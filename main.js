vBright6ar __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb2, mod3) => function __require() {
  return mod3 || (0, cb2[__getOwnPropNames(cb2)[0]])((mod3 = { exports: {} }).exports, mod3), mod3.exports;
};
var __copyProps = (to2, from3, except2, desc) => {
  if (from3 && typeof from3 === "object" || typeof from3 === "function") {
    for (let key of __getOwnPropNames(from3))
      if (!__hasOwnProp.call(to2, key) && key !== except2)
        __defProp(to2, key, { get: () => from3[key], enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod3, isNodeMode, target5) => (target5 = mod3 != null ? __create(__getProtoOf(mod3)) : {}, __copyProps(isNodeMode || !mod3 || !mod3.__esModule ? __defProp(target5, "default", { value: mod3, enumerable: true }) : target5, mod3));

// node_modules/react/cjs/react.production.min.js
var require_react_production_min = __commonJS({
  "node_modules/react/cjs/react.production.min.js"(exports) {
    "use strict";
    var l = Symbol.for("react.element");
    var n = Symbol.for("react.portal");
    var p2 = Symbol.for("react.fragment");
    var q2 = Symbol.for("react.strict_mode");
    var r = Symbol.for("react.profiler");
    var t = Symbol.for("react.provider");
    var u2 = Symbol.for("react.context");
    var v = Symbol.for("react.forward_ref");
    var w = Symbol.for("react.suspense");
    var x = Symbol.for("react.memo");
    var y = Symbol.for("react.lazy");
    var z = Symbol.iterator;
    function A(a3) {
      if (a3 === null || typeof a3 !== "object")
        return null;
      a3 = z && a3[z] || a3["@@iterator"];
      return typeof a3 === "function" ? a3 : null;
    }
    var B = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } };
    var C = Object.assign;
    var D = {};
    function E(a3, b3, e) {
      this.props = a3;
      this.context = b3;
      this.refs = D;
      this.updater = e || B;
    }
    E.prototype.isReactComponent = {};
    E.prototype.setState = function(a3, b3) {
      if (typeof a3 !== "object" && typeof a3 !== "function" && a3 != null)
        throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a3, b3, "setState");
    };
    E.prototype.forceUpdate = function(a3) {
      this.updater.enqueueForceUpdate(this, a3, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E.prototype;
    function G(a3, b3, e) {
      this.props = a3;
      this.context = b3;
      this.refs = D;
      this.updater = e || B;
    }
    var H = G.prototype = new F();
    H.constructor = G;
    C(H, E.prototype);
    H.isPureReactComponent = true;
    var I = Array.isArray;
    var J = Object.prototype.hasOwnProperty;
    var K = { current: null };
    var L = { key: true, ref: true, __self: true, __source: true };
    function M(a3, b3, e) {
      var d, c2 = {}, k = null, h = null;
      if (b3 != null)
        for (d in b3.ref !== void 0 && (h = b3.ref), b3.key !== void 0 && (k = "" + b3.key), b3)
          J.call(b3, d) && !L.hasOwnProperty(d) && (c2[d] = b3[d]);
      var g2 = arguments.length - 2;
      if (g2 === 1)
        c2.children = e;
      else if (1 < g2) {
        for (var f = Array(g2), m = 0; m < g2; m++)
          f[m] = arguments[m + 2];
        c2.children = f;
      }
      if (a3 && a3.defaultProps)
        for (d in g2 = a3.defaultProps, g2)
          c2[d] === void 0 && (c2[d] = g2[d]);
      return { $$typeof: l, type: a3, key: k, ref: h, props: c2, _owner: K.current };
    }
    function N(a3, b3) {
      return { $$typeof: l, type: a3.type, key: b3, ref: a3.ref, props: a3.props, _owner: a3._owner };
    }
    function O(a3) {
      return typeof a3 === "object" && a3 !== null && a3.$$typeof === l;
    }
    function escape(a3) {
      var b3 = { "=": "=0", ":": "=2" };
      return "$" + a3.replace(/[=:]/g, function(a4) {
        return b3[a4];
      });
    }
    var P = /\/+/g;
    function Q(a3, b3) {
      return typeof a3 === "object" && a3 !== null && a3.key != null ? escape("" + a3.key) : b3.toString(36);
    }
    function R(a3, b3, e, d, c2) {
      var k = typeof a3;
      if (k === "undefined" || k === "boolean")
        a3 = null;
      var h = false;
      if (a3 === null)
        h = true;
      else
        switch (k) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a3.$$typeof) {
              case l:
              case n:
                h = true;
            }
        }
      if (h)
        return h = a3, c2 = c2(h), a3 = d === "" ? "." + Q(h, 0) : d, I(c2) ? (e = "", a3 != null && (e = a3.replace(P, "$&/") + "/"), R(c2, b3, e, "", function(a4) {
          return a4;
        })) : c2 != null && (O(c2) && (c2 = N(c2, e + (!c2.key || h && h.key === c2.key ? "" : ("" + c2.key).replace(P, "$&/") + "/") + a3)), b3.push(c2)), 1;
      h = 0;
      d = d === "" ? "." : d + ":";
      if (I(a3))
        for (var g2 = 0; g2 < a3.length; g2++) {
          k = a3[g2];
          var f = d + Q(k, g2);
          h += R(k, b3, e, f, c2);
        }
      else if (f = A(a3), typeof f === "function")
        for (a3 = f.call(a3), g2 = 0; !(k = a3.next()).done; )
          k = k.value, f = d + Q(k, g2++), h += R(k, b3, e, f, c2);
      else if (k === "object")
        throw b3 = String(a3), Error("Objects are not valid as a React child (found: " + (b3 === "[object Object]" ? "object with keys {" + Object.keys(a3).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S(a3, b3, e) {
      if (a3 == null)
        return a3;
      var d = [], c2 = 0;
      R(a3, d, "", "", function(a4) {
        return b3.call(e, a4, c2++);
      });
      return d;
    }
    function T(a3) {
      if (a3._status === -1) {
        var b3 = a3._result;
        b3 = b3();
        b3.then(function(b4) {
          if (a3._status === 0 || a3._status === -1)
            a3._status = 1, a3._result = b4;
        }, function(b4) {
          if (a3._status === 0 || a3._status === -1)
            a3._status = 2, a3._result = b4;
        });
        a3._status === -1 && (a3._status = 0, a3._result = b3);
      }
      if (a3._status === 1)
        return a3._result.default;
      throw a3._result;
    }
    var U = { current: null };
    var V = { transition: null };
    var W = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V, ReactCurrentOwner: K };
    exports.Children = { map: S, forEach: function(a3, b3, e) {
      S(a3, function() {
        b3.apply(this, arguments);
      }, e);
    }, count: function(a3) {
      var b3 = 0;
      S(a3, function() {
        b3++;
      });
      return b3;
    }, toArray: function(a3) {
      return S(a3, function(a4) {
        return a4;
      }) || [];
    }, only: function(a3) {
      if (!O(a3))
        throw Error("React.Children.only expected to receive a single React element child.");
      return a3;
    } };
    exports.Component = E;
    exports.Fragment = p2;
    exports.Profiler = r;
    exports.PureComponent = G;
    exports.StrictMode = q2;
    exports.Suspense = w;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
    exports.cloneElement = function(a3, b3, e) {
      if (a3 === null || a3 === void 0)
        throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a3 + ".");
      var d = C({}, a3.props), c2 = a3.key, k = a3.ref, h = a3._owner;
      if (b3 != null) {
        b3.ref !== void 0 && (k = b3.ref, h = K.current);
        b3.key !== void 0 && (c2 = "" + b3.key);
        if (a3.type && a3.type.defaultProps)
          var g2 = a3.type.defaultProps;
        for (f in b3)
          J.call(b3, f) && !L.hasOwnProperty(f) && (d[f] = b3[f] === void 0 && g2 !== void 0 ? g2[f] : b3[f]);
      }
      var f = arguments.length - 2;
      if (f === 1)
        d.children = e;
      else if (1 < f) {
        g2 = Array(f);
        for (var m = 0; m < f; m++)
          g2[m] = arguments[m + 2];
        d.children = g2;
      }
      return { $$typeof: l, type: a3.type, key: c2, ref: k, props: d, _owner: h };
    };
    exports.createContext = function(a3) {
      a3 = { $$typeof: u2, _currentValue: a3, _currentValue2: a3, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a3.Provider = { $$typeof: t, _context: a3 };
      return a3.Consumer = a3;
    };
    exports.createElement = M;
    exports.createFactory = function(a3) {
      var b3 = M.bind(null, a3);
      b3.type = a3;
      return b3;
    };
    exports.createRef = function() {
      return { current: null };
    };
    exports.forwardRef = function(a3) {
      return { $$typeof: v, render: a3 };
    };
    exports.isValidElement = O;
    exports.lazy = function(a3) {
      return { $$typeof: y, _payload: { _status: -1, _result: a3 }, _init: T };
    };
    exports.memo = function(a3, b3) {
      return { $$typeof: x, type: a3, compare: b3 === void 0 ? null : b3 };
    };
    exports.startTransition = function(a3) {
      var b3 = V.transition;
      V.transition = {};
      try {
        a3();
      } finally {
        V.transition = b3;
      }
    };
    exports.unstable_act = function() {
      throw Error("act(...) is not supported in production builds of React.");
    };
    exports.useCallback = function(a3, b3) {
      return U.current.useCallback(a3, b3);
    };
    exports.useContext = function(a3) {
      return U.current.useContext(a3);
    };
    exports.useDebugValue = function() {
    };
    exports.useDeferredValue = function(a3) {
      return U.current.useDeferredValue(a3);
    };
    exports.useEffect = function(a3, b3) {
      return U.current.useEffect(a3, b3);
    };
    exports.useId = function() {
      return U.current.useId();
    };
    exports.useImperativeHandle = function(a3, b3, e) {
      return U.current.useImperativeHandle(a3, b3, e);
    };
    exports.useInsertionEffect = function(a3, b3) {
      return U.current.useInsertionEffect(a3, b3);
    };
    exports.useLayoutEffect = function(a3, b3) {
      return U.current.useLayoutEffect(a3, b3);
    };
    exports.useMemo = function(a3, b3) {
      return U.current.useMemo(a3, b3);
    };
    exports.useReducer = function(a3, b3, e) {
      return U.current.useReducer(a3, b3, e);
    };
    exports.useRef = function(a3) {
      return U.current.useRef(a3);
    };
    exports.useState = function(a3) {
      return U.current.useState(a3);
    };
    exports.useSyncExternalStore = function(a3, b3, e) {
      return U.current.useSyncExternalStore(a3, b3, e);
    };
    exports.useTransition = function() {
      return U.current.useTransition();
    };
    exports.version = "18.1.0";
  }
});

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "node_modules/react/cjs/react.development.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var ReactVersion = "18.1.0";
        var enableScopeAPI = false;
        var enableCacheElement = false;
        var enableTransitionTracing = false;
        var enableLegacyHidden = false;
        var enableDebugTracing = false;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: null
        };
        var ReactCurrentActQueue = {
          current: null,
          isBatchingLegacy: false,
          didScheduleLegacyUpdate: false
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack4) {
          {
            currentExtraStackFrame = stack4;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack4) {
            {
              currentExtraStackFrame = stack4;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack4 = "";
            if (currentExtraStackFrame) {
              stack4 += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack4 += impl() || "";
            }
            return stack4;
          };
        }
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
        }
        function warn3(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error3(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack4 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack4 !== "") {
              format += "%s";
              args = args.concat([stack4]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error3("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback2, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback2, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback2, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var assign2 = Object.assign;
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback2) {
          if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
            throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
          this.updater.enqueueSetState(this, partialState, callback2, "setState");
        };
        Component.prototype.forceUpdate = function(callback2) {
          this.updater.enqueueForceUpdate(this, callback2, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info2) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn3("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        assign2(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef2() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a3) {
          return isArrayImpl(a3);
        }
        function typeName(value12) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value12) {
          {
            try {
              testStringCoercion(value12);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value12) {
          return "" + value12;
        }
        function checkKeyStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName2 = outerType.displayName;
          if (displayName2) {
            return displayName2;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error3("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider2 = type;
                return getContextName(provider2._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init3(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config) {
          {
            if (hasOwnProperty2.call(config, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.ref !== void 0;
        }
        function hasValidKey(config) {
          {
            if (hasOwnProperty2.call(config, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName2) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error3("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName2) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error3("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
              var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error3('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source3, owner, props) {
          var element3 = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element3._store = {};
            Object.defineProperty(element3._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element3, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element3, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source3
            });
            if (Object.freeze) {
              Object.freeze(element3.props);
              Object.freeze(element3);
            }
          }
          return element3;
        };
        function createElement9(type, config, children2) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source3 = null;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config);
              }
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            self2 = config.__self === void 0 ? null : config.__self;
            source3 = config.__source === void 0 ? null : config.__source;
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children2;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName2 = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName2);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName2);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement2(element3, config, children2) {
          if (element3 === null || element3 === void 0) {
            throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element3 + ".");
          }
          var propName;
          var props = assign2({}, element3.props);
          var key = element3.key;
          var ref = element3.ref;
          var self2 = element3._self;
          var source3 = element3._source;
          var owner = element3._owner;
          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
              {
                checkKeyStringCoercion(config.key);
              }
              key = "" + config.key;
            }
            var defaultProps;
            if (element3.type && element3.type.defaultProps) {
              defaultProps = element3.type.defaultProps;
            }
            for (propName in config) {
              if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children2;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i3 = 0; i3 < childrenLength; i3++) {
              childArray[i3] = arguments[i3 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element3.type, key, ref, self2, source3, owner, props);
        }
        function isValidElement2(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match4) {
            return escaperLookup[match4];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text6) {
          return text6.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element3, index6) {
          if (typeof element3 === "object" && element3 !== null && element3.key != null) {
            {
              checkKeyStringCoercion(element3.key);
            }
            return escape("" + element3.key);
          }
          return index6.toString(36);
        }
        function mapIntoArray(children2, array, escapedPrefix, nameSoFar, callback2) {
          var type = typeof children2;
          if (type === "undefined" || type === "boolean") {
            children2 = null;
          }
          var invokeCallback = false;
          if (children2 === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children2.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children2;
            var mappedChild = callback2(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray2(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement2(mappedChild)) {
                {
                  if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                    checkKeyStringCoercion(mappedChild.key);
                  }
                }
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (isArray2(children2)) {
            for (var i3 = 0; i3 < children2.length; i3++) {
              child = children2[i3];
              nextName = nextNamePrefix + getElementKey(child, i3);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback2);
            }
          } else {
            var iteratorFn = getIteratorFn(children2);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children2;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator2 = iteratorFn.call(iterableChildren);
              var step3;
              var ii = 0;
              while (!(step3 = iterator2.next()).done) {
                child = step3.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback2);
              }
            } else if (type === "object") {
              var childrenString = String(children2);
              throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
          }
          return subtreeCount;
        }
        function mapChildren(children2, func, context) {
          if (children2 == null) {
            return children2;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children2, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children2) {
          var n = 0;
          mapChildren(children2, function() {
            n++;
          });
          return n;
        }
        function forEachChildren(children2, forEachFunc, forEachContext) {
          mapChildren(children2, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray6(children2) {
          return mapChildren(children2, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children2) {
          if (!isValidElement2(children2)) {
            throw new Error("React.Children.only expected to receive a single React element child.");
          }
          return children2;
        }
        function createContext8(defaultValue4) {
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue4,
            _currentValue2: defaultValue4,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error3("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error3("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName2) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn3("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName2);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject2) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = moduleObject2;
              }
            }, function(error4) {
              if (payload._status === Pending || payload._status === Uninitialized) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error4;
              }
            });
            if (payload._status === Uninitialized) {
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
            }
          }
          if (payload._status === Resolved) {
            var moduleObject = payload._result;
            {
              if (moduleObject === void 0) {
                error3("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
              }
            }
            {
              if (!("default" in moduleObject)) {
                error3("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
              }
            }
            return moduleObject.default;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: Uninitialized,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error3("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error3("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef4(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error3("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error3("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error3("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error3("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name15) {
                ownName = name15;
                if (!render.name && !render.displayName) {
                  render.displayName = name15;
                }
              }
            });
          }
          return elementType;
        }
        var REACT_MODULE_REFERENCE;
        {
          REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
        }
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare4) {
          {
            if (!isValidElementType(type)) {
              error3("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare4 === void 0 ? null : compare4
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name15) {
                ownName = name15;
                if (!type.name && !type.displayName) {
                  type.displayName = name15;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          {
            if (dispatcher === null) {
              error3("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext14(Context) {
          var dispatcher = resolveDispatcher();
          {
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error3("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error3("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context);
        }
        function useState4(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer2(reducer, initialArg, init3) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init3);
        }
        function useRef9(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect12(create6, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create6, deps);
        }
        function useInsertionEffect(create6, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useInsertionEffect(create6, deps);
        }
        function useLayoutEffect3(create6, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create6, deps);
        }
        function useCallback3(callback2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback2, deps);
        }
        function useMemo6(create6, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create6, deps);
        }
        function useImperativeHandle(ref, create6, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create6, deps);
        }
        function useDebugValue(value12, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value12, formatterFn);
          }
        }
        function useTransition() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useTransition();
        }
        function useDeferredValue(value12) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDeferredValue(value12);
        }
        function useId3() {
          var dispatcher = resolveDispatcher();
          return dispatcher.useId();
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error3("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name15, source3, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match4 = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match4 && match4[1] || "";
              }
            }
            return "\n" + prefix + name15;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name15 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack4 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack4);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location2, componentName, element3) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error3("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error3("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack4 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              setExtraStackFrame(stack4);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name15 = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name15) {
              return "\n\nCheck the render method of `" + name15 + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source3) {
          if (source3 !== void 0) {
            var fileName = source3.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source3.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info2 = getDeclarationErrorAddendum();
          if (!info2) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info2;
        }
        function validateExplicitKey(element3, parentType) {
          if (!element3._store || element3._store.validated || element3.key != null) {
            return;
          }
          element3._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element3 && element3._owner && element3._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element3._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element3);
            error3('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (isArray2(node)) {
            for (var i3 = 0; i3 < node.length; i3++) {
              var child = node[i3];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator2 = iteratorFn.call(node);
                var step3;
                while (!(step3 = iterator2.next()).done) {
                  if (isValidElement2(step3.value)) {
                    validateExplicitKey(step3.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element3) {
          {
            var type = element3.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name15 = getComponentNameFromType(type);
              checkPropTypes(propTypes, element3.props, "prop", name15, element3);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentNameFromType(type);
              error3("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error3("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment2) {
          {
            var keys4 = Object.keys(fragment2.props);
            for (var i3 = 0; i3 < keys4.length; i3++) {
              var key = keys4[i3];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment2);
                error3("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment2.ref !== null) {
              setCurrentlyValidatingElement$1(fragment2);
              error3("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children2) {
          var validType = isValidElementType(type);
          if (!validType) {
            var info2 = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info2 += sourceInfo;
            } else {
              info2 += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray2(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info2 = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error3("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
            }
          }
          var element3 = createElement9.apply(this, arguments);
          if (element3 == null) {
            return element3;
          }
          if (validType) {
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], type);
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element3);
          } else {
            validatePropTypes(element3);
          }
          return element3;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn3("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn3("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element3, props, children2) {
          var newElement = cloneElement2.apply(this, arguments);
          for (var i3 = 2; i3 < arguments.length; i3++) {
            validateChildKeys(arguments[i3], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        function startTransition(scope2, options2) {
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = {};
          var currentTransition = ReactCurrentBatchConfig.transition;
          {
            ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            scope2();
          } finally {
            ReactCurrentBatchConfig.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        var didWarnAboutMessageChannel = false;
        var enqueueTaskImpl = null;
        function enqueueTask(task) {
          if (enqueueTaskImpl === null) {
            try {
              var requireString = ("require" + Math.random()).slice(0, 7);
              var nodeRequire = module2 && module2[requireString];
              enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
            } catch (_err) {
              enqueueTaskImpl = function(callback2) {
                {
                  if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === "undefined") {
                      error3("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                    }
                  }
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback2;
                channel.port2.postMessage(void 0);
              };
            }
          }
          return enqueueTaskImpl(task);
        }
        var actScopeDepth = 0;
        var didWarnNoAwaitAct = false;
        function act(callback2) {
          {
            var prevActScopeDepth = actScopeDepth;
            actScopeDepth++;
            if (ReactCurrentActQueue.current === null) {
              ReactCurrentActQueue.current = [];
            }
            var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
            var result;
            try {
              ReactCurrentActQueue.isBatchingLegacy = true;
              result = callback2();
              if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                  ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                  flushActQueue(queue);
                }
              }
            } catch (error4) {
              popActScope(prevActScopeDepth);
              throw error4;
            } finally {
              ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
            }
            if (result !== null && typeof result === "object" && typeof result.then === "function") {
              var thenableResult = result;
              var wasAwaited = false;
              var thenable = {
                then: function(resolve2, reject) {
                  wasAwaited = true;
                  thenableResult.then(function(returnValue2) {
                    popActScope(prevActScopeDepth);
                    if (actScopeDepth === 0) {
                      recursivelyFlushAsyncActWork(returnValue2, resolve2, reject);
                    } else {
                      resolve2(returnValue2);
                    }
                  }, function(error4) {
                    popActScope(prevActScopeDepth);
                    reject(error4);
                  });
                }
              };
              {
                if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                  Promise.resolve().then(function() {
                  }).then(function() {
                    if (!wasAwaited) {
                      didWarnNoAwaitAct = true;
                      error3("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                    }
                  });
                }
              }
              return thenable;
            } else {
              var returnValue = result;
              popActScope(prevActScopeDepth);
              if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                  flushActQueue(_queue);
                  ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                  then: function(resolve2, reject) {
                    if (ReactCurrentActQueue.current === null) {
                      ReactCurrentActQueue.current = [];
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                    } else {
                      resolve2(returnValue);
                    }
                  }
                };
                return _thenable;
              } else {
                var _thenable2 = {
                  then: function(resolve2, reject) {
                    resolve2(returnValue);
                  }
                };
                return _thenable2;
              }
            }
          }
        }
        function popActScope(prevActScopeDepth) {
          {
            if (prevActScopeDepth !== actScopeDepth - 1) {
              error3("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
            }
            actScopeDepth = prevActScopeDepth;
          }
        }
        function recursivelyFlushAsyncActWork(returnValue, resolve2, reject) {
          {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              try {
                flushActQueue(queue);
                enqueueTask(function() {
                  if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve2(returnValue);
                  } else {
                    recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                  }
                });
              } catch (error4) {
                reject(error4);
              }
            } else {
              resolve2(returnValue);
            }
          }
        }
        var isFlushing = false;
        function flushActQueue(queue) {
          {
            if (!isFlushing) {
              isFlushing = true;
              var i3 = 0;
              try {
                for (; i3 < queue.length; i3++) {
                  var callback2 = queue[i3];
                  do {
                    callback2 = callback2(true);
                  } while (callback2 !== null);
                }
                queue.length = 0;
              } catch (error4) {
                queue = queue.slice(i3 + 1);
                throw error4;
              } finally {
                isFlushing = false;
              }
            }
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray6,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component;
        exports.Fragment = REACT_FRAGMENT_TYPE;
        exports.Profiler = REACT_PROFILER_TYPE;
        exports.PureComponent = PureComponent;
        exports.StrictMode = REACT_STRICT_MODE_TYPE;
        exports.Suspense = REACT_SUSPENSE_TYPE;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext8;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef2;
        exports.forwardRef = forwardRef4;
        exports.isValidElement = isValidElement2;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.startTransition = startTransition;
        exports.unstable_act = act;
        exports.useCallback = useCallback3;
        exports.useContext = useContext14;
        exports.useDebugValue = useDebugValue;
        exports.useDeferredValue = useDeferredValue;
        exports.useEffect = useEffect12;
        exports.useId = useId3;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useInsertionEffect = useInsertionEffect;
        exports.useLayoutEffect = useLayoutEffect3;
        exports.useMemo = useMemo6;
        exports.useReducer = useReducer2;
        exports.useRef = useRef9;
        exports.useState = useState4;
        exports.useSyncExternalStore = useSyncExternalStore;
        exports.useTransition = useTransition;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react/index.js
var require_react = __commonJS({
  "node_modules/react/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_production_min();
    } else {
      module2.exports = require_react_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js
var require_react_dom_server_legacy_node_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ba = require("stream");
    function ca2(a3, b3) {
      a3.prototype = Object.create(b3.prototype);
      a3.prototype.constructor = a3;
      a3.__proto__ = b3;
    }
    var da = false;
    function h(a3, b3) {
      da && (da = false, b3[0] !== "<" && a3.push("<!-- -->"));
      return b3 === "<!-- -->" ? da = true : a3.push(b3);
    }
    var p2 = Object.prototype.hasOwnProperty;
    var ea = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var fa = {};
    var ha = {};
    function ia(a3) {
      if (p2.call(ha, a3))
        return true;
      if (p2.call(fa, a3))
        return false;
      if (ea.test(a3))
        return ha[a3] = true;
      fa[a3] = true;
      return false;
    }
    function q2(a3, b3, c2, d, f, e, g2) {
      this.acceptsBooleans = b3 === 2 || b3 === 3 || b3 === 4;
      this.attributeName = d;
      this.attributeNamespace = f;
      this.mustUseProperty = c2;
      this.propertyName = a3;
      this.type = b3;
      this.sanitizeURL = e;
      this.removeEmptyString = g2;
    }
    var r = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
      r[a3] = new q2(a3, 0, false, a3, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
      var b3 = a3[0];
      r[b3] = new q2(b3, 1, false, a3[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
      r[a3] = new q2(a3, 2, false, a3.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
      r[a3] = new q2(a3, 2, false, a3, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
      r[a3] = new q2(a3, 3, false, a3.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
      r[a3] = new q2(a3, 3, true, a3, null, false, false);
    });
    ["capture", "download"].forEach(function(a3) {
      r[a3] = new q2(a3, 4, false, a3, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a3) {
      r[a3] = new q2(a3, 6, false, a3, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a3) {
      r[a3] = new q2(a3, 5, false, a3.toLowerCase(), null, false, false);
    });
    var ja = /[\-:]([a-z])/g;
    function ka(a3) {
      return a3[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
      var b3 = a3.replace(ja, ka);
      r[b3] = new q2(b3, 1, false, a3, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
      var b3 = a3.replace(ja, ka);
      r[b3] = new q2(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
      var b3 = a3.replace(ja, ka);
      r[b3] = new q2(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a3) {
      r[a3] = new q2(a3, 1, false, a3.toLowerCase(), null, false, false);
    });
    r.xlinkHref = new q2("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a3) {
      r[a3] = new q2(a3, 1, false, a3.toLowerCase(), null, true, true);
    });
    var t = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var la = ["Webkit", "ms", "Moz", "O"];
    Object.keys(t).forEach(function(a3) {
      la.forEach(function(b3) {
        b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
        t[b3] = t[a3];
      });
    });
    var ma = /["'&<>]/;
    function u2(a3) {
      if (typeof a3 === "boolean" || typeof a3 === "number")
        return "" + a3;
      a3 = "" + a3;
      var b3 = ma.exec(a3);
      if (b3) {
        var c2 = "", d, f = 0;
        for (d = b3.index; d < a3.length; d++) {
          switch (a3.charCodeAt(d)) {
            case 34:
              b3 = "&quot;";
              break;
            case 38:
              b3 = "&amp;";
              break;
            case 39:
              b3 = "&#x27;";
              break;
            case 60:
              b3 = "&lt;";
              break;
            case 62:
              b3 = "&gt;";
              break;
            default:
              continue;
          }
          f !== d && (c2 += a3.substring(f, d));
          f = d + 1;
          c2 += b3;
        }
        a3 = f !== d ? c2 + a3.substring(f, d) : c2;
      }
      return a3;
    }
    var na = /([A-Z])/g;
    var oa = /^ms-/;
    var pa = Array.isArray;
    function v(a3, b3) {
      return { insertionMode: a3, selectedValue: b3 };
    }
    function qa(a3, b3, c2) {
      switch (b3) {
        case "select":
          return v(1, c2.value != null ? c2.value : c2.defaultValue);
        case "svg":
          return v(2, null);
        case "math":
          return v(3, null);
        case "foreignObject":
          return v(1, null);
        case "table":
          return v(4, null);
        case "thead":
        case "tbody":
        case "tfoot":
          return v(5, null);
        case "colgroup":
          return v(7, null);
        case "tr":
          return v(6, null);
      }
      return 4 <= a3.insertionMode || a3.insertionMode === 0 ? v(1, null) : a3;
    }
    function ra(a3, b3) {
      b3 !== "" && a3.push(u2(b3), "<!-- -->");
    }
    var sa = /* @__PURE__ */ new Map();
    function ta(a3, b3, c2) {
      if (typeof c2 !== "object")
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      b3 = true;
      for (var d in c2)
        if (p2.call(c2, d)) {
          var f = c2[d];
          if (f != null && typeof f !== "boolean" && f !== "") {
            if (d.indexOf("--") === 0) {
              var e = u2(d);
              f = u2(("" + f).trim());
            } else {
              e = d;
              var g2 = sa.get(e);
              g2 !== void 0 ? e = g2 : (g2 = u2(e.replace(na, "-$1").toLowerCase().replace(oa, "-ms-")), sa.set(e, g2), e = g2);
              f = typeof f === "number" ? f === 0 || p2.call(t, d) ? "" + f : f + "px" : u2(("" + f).trim());
            }
            b3 ? (b3 = false, a3.push(' style="', e, ":", f)) : a3.push(";", e, ":", f);
          }
        }
      b3 || a3.push('"');
    }
    function x(a3, b3, c2, d) {
      switch (c2) {
        case "style":
          ta(a3, b3, d);
          return;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
          return;
      }
      if (!(2 < c2.length) || c2[0] !== "o" && c2[0] !== "O" || c2[1] !== "n" && c2[1] !== "N") {
        if (b3 = r.hasOwnProperty(c2) ? r[c2] : null, b3 !== null) {
          switch (typeof d) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (!b3.acceptsBooleans)
                return;
          }
          c2 = b3.attributeName;
          switch (b3.type) {
            case 3:
              d && a3.push(" ", c2, '=""');
              break;
            case 4:
              d === true ? a3.push(" ", c2, '=""') : d !== false && a3.push(" ", c2, '="', u2(d), '"');
              break;
            case 5:
              isNaN(d) || a3.push(" ", c2, '="', u2(d), '"');
              break;
            case 6:
              !isNaN(d) && 1 <= d && a3.push(" ", c2, '="', u2(d), '"');
              break;
            default:
              b3.sanitizeURL && (d = "" + d), a3.push(" ", c2, '="', u2(d), '"');
          }
        } else if (ia(c2)) {
          switch (typeof d) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (b3 = c2.toLowerCase().slice(0, 5), b3 !== "data-" && b3 !== "aria-")
                return;
          }
          a3.push(" ", c2, '="', u2(d), '"');
        }
      }
    }
    function z(a3, b3, c2) {
      if (b3 != null) {
        if (c2 != null)
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if (typeof b3 !== "object" || !("__html" in b3))
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b3 = b3.__html;
        b3 !== null && b3 !== void 0 && a3.push("" + b3);
      }
    }
    function ua(a3) {
      var b3 = "";
      aa.Children.forEach(a3, function(a4) {
        a4 != null && (b3 += a4);
      });
      return b3;
    }
    function va(a3, b3, c2, d) {
      a3.push(A(c2));
      var f = c2 = null, e;
      for (e in b3)
        if (p2.call(b3, e)) {
          var g2 = b3[e];
          if (g2 != null)
            switch (e) {
              case "children":
                c2 = g2;
                break;
              case "dangerouslySetInnerHTML":
                f = g2;
                break;
              default:
                x(a3, d, e, g2);
            }
        }
      a3.push(">");
      z(a3, f, c2);
      return typeof c2 === "string" ? (a3.push(u2(c2)), null) : c2;
    }
    var wa = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var xa = /* @__PURE__ */ new Map();
    function A(a3) {
      var b3 = xa.get(a3);
      if (b3 === void 0) {
        if (!wa.test(a3))
          throw Error("Invalid tag: " + a3);
        b3 = "<" + a3;
        xa.set(a3, b3);
      }
      return b3;
    }
    function ya(a3, b3, c2, d, f) {
      switch (b3) {
        case "select":
          a3.push(A("select"));
          var e = null, g2 = null;
          for (m in c2)
            if (p2.call(c2, m)) {
              var k = c2[m];
              if (k != null)
                switch (m) {
                  case "children":
                    e = k;
                    break;
                  case "dangerouslySetInnerHTML":
                    g2 = k;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    x(a3, d, m, k);
                }
            }
          a3.push(">");
          z(a3, g2, e);
          return e;
        case "option":
          g2 = f.selectedValue;
          a3.push(A("option"));
          var l = k = null, n = null;
          var m = null;
          for (e in c2)
            if (p2.call(c2, e) && (b3 = c2[e], b3 != null))
              switch (e) {
                case "children":
                  k = b3;
                  break;
                case "selected":
                  n = b3;
                  break;
                case "dangerouslySetInnerHTML":
                  m = b3;
                  break;
                case "value":
                  l = b3;
                default:
                  x(a3, d, e, b3);
              }
          if (g2 != null)
            if (c2 = l !== null ? "" + l : ua(k), pa(g2))
              for (d = 0; d < g2.length; d++) {
                if ("" + g2[d] === c2) {
                  a3.push(' selected=""');
                  break;
                }
              }
            else
              "" + g2 === c2 && a3.push(' selected=""');
          else
            n && a3.push(' selected=""');
          a3.push(">");
          z(a3, m, k);
          return k;
        case "textarea":
          a3.push(A("textarea"));
          m = g2 = e = null;
          for (k in c2)
            if (p2.call(c2, k) && (l = c2[k], l != null))
              switch (k) {
                case "children":
                  m = l;
                  break;
                case "value":
                  e = l;
                  break;
                case "defaultValue":
                  g2 = l;
                  break;
                case "dangerouslySetInnerHTML":
                  throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  x(a3, d, k, l);
              }
          e === null && g2 !== null && (e = g2);
          a3.push(">");
          if (m != null) {
            if (e != null)
              throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (pa(m) && 1 < m.length)
              throw Error("<textarea> can only have at most one child.");
            e = "" + m;
          }
          typeof e === "string" && e[0] === "\n" && a3.push("\n");
          e !== null && a3.push(u2("" + e));
          return null;
        case "input":
          a3.push(A("input"));
          l = m = k = e = null;
          for (g2 in c2)
            if (p2.call(c2, g2) && (n = c2[g2], n != null))
              switch (g2) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  l = n;
                  break;
                case "defaultValue":
                  k = n;
                  break;
                case "checked":
                  m = n;
                  break;
                case "value":
                  e = n;
                  break;
                default:
                  x(a3, d, g2, n);
              }
          m !== null ? x(a3, d, "checked", m) : l !== null && x(a3, d, "checked", l);
          e !== null ? x(a3, d, "value", e) : k !== null && x(a3, d, "value", k);
          a3.push("/>");
          return null;
        case "menuitem":
          a3.push(A("menuitem"));
          for (var y in c2)
            if (p2.call(c2, y) && (e = c2[y], e != null))
              switch (y) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  x(a3, d, y, e);
              }
          a3.push(">");
          return null;
        case "listing":
        case "pre":
          a3.push(A(b3));
          g2 = e = null;
          for (l in c2)
            if (p2.call(c2, l) && (k = c2[l], k != null))
              switch (l) {
                case "children":
                  e = k;
                  break;
                case "dangerouslySetInnerHTML":
                  g2 = k;
                  break;
                default:
                  x(a3, d, l, k);
              }
          a3.push(">");
          if (g2 != null) {
            if (e != null)
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof g2 !== "object" || !("__html" in g2))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            c2 = g2.__html;
            c2 !== null && c2 !== void 0 && (typeof c2 === "string" && 0 < c2.length && c2[0] === "\n" ? a3.push("\n", c2) : a3.push("" + c2));
          }
          typeof e === "string" && e[0] === "\n" && a3.push("\n");
          return e;
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "link":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
          a3.push(A(b3));
          for (var B in c2)
            if (p2.call(c2, B) && (e = c2[B], e != null))
              switch (B) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(b3 + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  x(a3, d, B, e);
              }
          a3.push("/>");
          return null;
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return va(a3, c2, b3, d);
        case "html":
          return f.insertionMode === 0 && a3.push("<!DOCTYPE html>"), va(a3, c2, b3, d);
        default:
          if (b3.indexOf("-") === -1 && typeof c2.is !== "string")
            return va(a3, c2, b3, d);
          a3.push(A(b3));
          g2 = e = null;
          for (n in c2)
            if (p2.call(c2, n) && (k = c2[n], k != null))
              switch (n) {
                case "children":
                  e = k;
                  break;
                case "dangerouslySetInnerHTML":
                  g2 = k;
                  break;
                case "style":
                  ta(a3, d, k);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  ia(n) && typeof k !== "function" && typeof k !== "symbol" && a3.push(" ", n, '="', u2(k), '"');
              }
          a3.push(">");
          z(a3, g2, e);
          return e;
      }
    }
    function za(a3, b3, c2) {
      h(a3, '<!--$?--><template id="');
      if (c2 === null)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      h(a3, c2);
      return h(a3, '"></template>');
    }
    function Aa(a3, b3, c2, d) {
      switch (c2.insertionMode) {
        case 0:
        case 1:
          return h(a3, '<div hidden id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 2:
          return h(a3, '<svg aria-hidden="true" style="display:none" id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 3:
          return h(a3, '<math aria-hidden="true" style="display:none" id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 4:
          return h(a3, '<table hidden id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 5:
          return h(a3, '<table hidden><tbody id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 6:
          return h(a3, '<table hidden><tr id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        case 7:
          return h(a3, '<table hidden><colgroup id="'), h(a3, b3.segmentPrefix), b3 = d.toString(16), h(a3, b3), h(a3, '">');
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function Ba(a3, b3) {
      switch (b3.insertionMode) {
        case 0:
        case 1:
          return h(a3, "</div>");
        case 2:
          return h(a3, "</svg>");
        case 3:
          return h(a3, "</math>");
        case 4:
          return h(a3, "</table>");
        case 5:
          return h(a3, "</tbody></table>");
        case 6:
          return h(a3, "</tr></table>");
        case 7:
          return h(a3, "</colgroup></table>");
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function Ca(a3, b3) {
      b3 = b3 === void 0 ? "" : b3;
      return { bootstrapChunks: [], startInlineScript: "<script>", placeholderPrefix: b3 + "P:", segmentPrefix: b3 + "S:", boundaryPrefix: b3 + "B:", idPrefix: b3, nextSuspenseID: 0, sentCompleteSegmentFunction: false, sentCompleteBoundaryFunction: false, sentClientRenderFunction: false, generateStaticMarkup: a3 };
    }
    function Da() {
      return { insertionMode: 1, selectedValue: null };
    }
    var C = Object.assign;
    var Ea = Symbol.for("react.element");
    var Fa = Symbol.for("react.portal");
    var Ga = Symbol.for("react.fragment");
    var Ha = Symbol.for("react.strict_mode");
    var Ia = Symbol.for("react.profiler");
    var Ja = Symbol.for("react.provider");
    var Ka = Symbol.for("react.context");
    var La = Symbol.for("react.forward_ref");
    var Ma = Symbol.for("react.suspense");
    var Na = Symbol.for("react.suspense_list");
    var Oa = Symbol.for("react.memo");
    var Pa = Symbol.for("react.lazy");
    var Qa = Symbol.for("react.scope");
    var Ra = Symbol.for("react.debug_trace_mode");
    var Sa = Symbol.for("react.legacy_hidden");
    var Ta = Symbol.for("react.default_value");
    var Ua = Symbol.iterator;
    function Va(a3) {
      if (a3 == null)
        return null;
      if (typeof a3 === "function")
        return a3.displayName || a3.name || null;
      if (typeof a3 === "string")
        return a3;
      switch (a3) {
        case Ga:
          return "Fragment";
        case Fa:
          return "Portal";
        case Ia:
          return "Profiler";
        case Ha:
          return "StrictMode";
        case Ma:
          return "Suspense";
        case Na:
          return "SuspenseList";
      }
      if (typeof a3 === "object")
        switch (a3.$$typeof) {
          case Ka:
            return (a3.displayName || "Context") + ".Consumer";
          case Ja:
            return (a3._context.displayName || "Context") + ".Provider";
          case La:
            var b3 = a3.render;
            a3 = a3.displayName;
            a3 || (a3 = b3.displayName || b3.name || "", a3 = a3 !== "" ? "ForwardRef(" + a3 + ")" : "ForwardRef");
            return a3;
          case Oa:
            return b3 = a3.displayName || null, b3 !== null ? b3 : Va(a3.type) || "Memo";
          case Pa:
            b3 = a3._payload;
            a3 = a3._init;
            try {
              return Va(a3(b3));
            } catch (c2) {
            }
        }
      return null;
    }
    var Wa = {};
    function Xa(a3, b3) {
      a3 = a3.contextTypes;
      if (!a3)
        return Wa;
      var c2 = {}, d;
      for (d in a3)
        c2[d] = b3[d];
      return c2;
    }
    var D = null;
    function E(a3, b3) {
      if (a3 !== b3) {
        a3.context._currentValue2 = a3.parentValue;
        a3 = a3.parent;
        var c2 = b3.parent;
        if (a3 === null) {
          if (c2 !== null)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
          if (c2 === null)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          E(a3, c2);
        }
        b3.context._currentValue2 = b3.value;
      }
    }
    function Ya(a3) {
      a3.context._currentValue2 = a3.parentValue;
      a3 = a3.parent;
      a3 !== null && Ya(a3);
    }
    function Za(a3) {
      var b3 = a3.parent;
      b3 !== null && Za(b3);
      a3.context._currentValue2 = a3.value;
    }
    function $a(a3, b3) {
      a3.context._currentValue2 = a3.parentValue;
      a3 = a3.parent;
      if (a3 === null)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a3.depth === b3.depth ? E(a3, b3) : $a(a3, b3);
    }
    function ab(a3, b3) {
      var c2 = b3.parent;
      if (c2 === null)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a3.depth === c2.depth ? E(a3, c2) : ab(a3, c2);
      b3.context._currentValue2 = b3.value;
    }
    function F(a3) {
      var b3 = D;
      b3 !== a3 && (b3 === null ? Za(a3) : a3 === null ? Ya(b3) : b3.depth === a3.depth ? E(b3, a3) : b3.depth > a3.depth ? $a(b3, a3) : ab(b3, a3), D = a3);
    }
    var bb = { isMounted: function() {
      return false;
    }, enqueueSetState: function(a3, b3) {
      a3 = a3._reactInternals;
      a3.queue !== null && a3.queue.push(b3);
    }, enqueueReplaceState: function(a3, b3) {
      a3 = a3._reactInternals;
      a3.replace = true;
      a3.queue = [b3];
    }, enqueueForceUpdate: function() {
    } };
    function cb2(a3, b3, c2, d) {
      var f = a3.state !== void 0 ? a3.state : null;
      a3.updater = bb;
      a3.props = c2;
      a3.state = f;
      var e = { queue: [], replace: false };
      a3._reactInternals = e;
      var g2 = b3.contextType;
      a3.context = typeof g2 === "object" && g2 !== null ? g2._currentValue2 : d;
      g2 = b3.getDerivedStateFromProps;
      typeof g2 === "function" && (g2 = g2(c2, f), f = g2 === null || g2 === void 0 ? f : C({}, f, g2), a3.state = f);
      if (typeof b3.getDerivedStateFromProps !== "function" && typeof a3.getSnapshotBeforeUpdate !== "function" && (typeof a3.UNSAFE_componentWillMount === "function" || typeof a3.componentWillMount === "function"))
        if (b3 = a3.state, typeof a3.componentWillMount === "function" && a3.componentWillMount(), typeof a3.UNSAFE_componentWillMount === "function" && a3.UNSAFE_componentWillMount(), b3 !== a3.state && bb.enqueueReplaceState(a3, a3.state, null), e.queue !== null && 0 < e.queue.length)
          if (b3 = e.queue, g2 = e.replace, e.queue = null, e.replace = false, g2 && b3.length === 1)
            a3.state = b3[0];
          else {
            e = g2 ? b3[0] : a3.state;
            f = true;
            for (g2 = g2 ? 1 : 0; g2 < b3.length; g2++) {
              var k = b3[g2];
              k = typeof k === "function" ? k.call(a3, e, c2, d) : k;
              k != null && (f ? (f = false, e = C({}, e, k)) : C(e, k));
            }
            a3.state = e;
          }
        else
          e.queue = null;
    }
    var db = { id: 1, overflow: "" };
    function eb(a3, b3, c2) {
      var d = a3.id;
      a3 = a3.overflow;
      var f = 32 - G(d) - 1;
      d &= ~(1 << f);
      c2 += 1;
      var e = 32 - G(b3) + f;
      if (30 < e) {
        var g2 = f - f % 5;
        e = (d & (1 << g2) - 1).toString(32);
        d >>= g2;
        f -= g2;
        return { id: 1 << 32 - G(b3) + f | c2 << f | d, overflow: e + a3 };
      }
      return { id: 1 << e | c2 << f | d, overflow: a3 };
    }
    var G = Math.clz32 ? Math.clz32 : fb;
    var gb = Math.log;
    var hb = Math.LN2;
    function fb(a3) {
      a3 >>>= 0;
      return a3 === 0 ? 32 : 31 - (gb(a3) / hb | 0) | 0;
    }
    function ib(a3, b3) {
      return a3 === b3 && (a3 !== 0 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
    }
    var jb = typeof Object.is === "function" ? Object.is : ib;
    var H = null;
    var kb = null;
    var I = null;
    var J = null;
    var K = false;
    var L = false;
    var M = 0;
    var N = null;
    var O = 0;
    function P() {
      if (H === null)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return H;
    }
    function lb() {
      if (0 < O)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function mb() {
      J === null ? I === null ? (K = false, I = J = lb()) : (K = true, J = I) : J.next === null ? (K = false, J = J.next = lb()) : (K = true, J = J.next);
      return J;
    }
    function nb() {
      kb = H = null;
      L = false;
      I = null;
      O = 0;
      J = N = null;
    }
    function ob(a3, b3) {
      return typeof b3 === "function" ? b3(a3) : b3;
    }
    function pb(a3, b3, c2) {
      H = P();
      J = mb();
      if (K) {
        var d = J.queue;
        b3 = d.dispatch;
        if (N !== null && (c2 = N.get(d), c2 !== void 0)) {
          N.delete(d);
          d = J.memoizedState;
          do
            d = a3(d, c2.action), c2 = c2.next;
          while (c2 !== null);
          J.memoizedState = d;
          return [d, b3];
        }
        return [J.memoizedState, b3];
      }
      a3 = a3 === ob ? typeof b3 === "function" ? b3() : b3 : c2 !== void 0 ? c2(b3) : b3;
      J.memoizedState = a3;
      a3 = J.queue = { last: null, dispatch: null };
      a3 = a3.dispatch = qb.bind(null, H, a3);
      return [J.memoizedState, a3];
    }
    function rb2(a3, b3) {
      H = P();
      J = mb();
      b3 = b3 === void 0 ? null : b3;
      if (J !== null) {
        var c2 = J.memoizedState;
        if (c2 !== null && b3 !== null) {
          var d = c2[1];
          a:
            if (d === null)
              d = false;
            else {
              for (var f = 0; f < d.length && f < b3.length; f++)
                if (!jb(b3[f], d[f])) {
                  d = false;
                  break a;
                }
              d = true;
            }
          if (d)
            return c2[0];
        }
      }
      a3 = a3();
      J.memoizedState = [a3, b3];
      return a3;
    }
    function qb(a3, b3, c2) {
      if (25 <= O)
        throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      if (a3 === H)
        if (L = true, a3 = { action: c2, next: null }, N === null && (N = /* @__PURE__ */ new Map()), c2 = N.get(b3), c2 === void 0)
          N.set(b3, a3);
        else {
          for (b3 = c2; b3.next !== null; )
            b3 = b3.next;
          b3.next = a3;
        }
    }
    function sb() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function Q() {
    }
    var tb = { readContext: function(a3) {
      return a3._currentValue2;
    }, useContext: function(a3) {
      P();
      return a3._currentValue2;
    }, useMemo: rb2, useReducer: pb, useRef: function(a3) {
      H = P();
      J = mb();
      var b3 = J.memoizedState;
      return b3 === null ? (a3 = { current: a3 }, J.memoizedState = a3) : b3;
    }, useState: function(a3) {
      return pb(ob, a3);
    }, useInsertionEffect: Q, useLayoutEffect: function() {
    }, useCallback: function(a3, b3) {
      return rb2(function() {
        return a3;
      }, b3);
    }, useImperativeHandle: Q, useEffect: Q, useDebugValue: Q, useDeferredValue: function(a3) {
      P();
      return a3;
    }, useTransition: function() {
      P();
      return [false, sb];
    }, useId: function() {
      var a3 = kb.treeContext;
      var b3 = a3.overflow;
      a3 = a3.id;
      a3 = (a3 & ~(1 << 32 - G(a3) - 1)).toString(32) + b3;
      var c2 = R;
      if (c2 === null)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
      b3 = M++;
      a3 = ":" + c2.idPrefix + "R" + a3;
      0 < b3 && (a3 += "H" + b3.toString(32));
      return a3 + ":";
    }, useMutableSource: function(a3, b3) {
      P();
      return b3(a3._source);
    }, useSyncExternalStore: function(a3, b3, c2) {
      if (c2 === void 0)
        throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
      return c2();
    } };
    var R = null;
    var ub = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;
    function vb(a3) {
      console.error(a3);
    }
    function S() {
    }
    function wb(a3, b3, c2, d, f, e, g2, k, l) {
      var n = [], m = /* @__PURE__ */ new Set();
      b3 = { destination: null, responseState: b3, progressiveChunkSize: d === void 0 ? 12800 : d, status: 0, fatalError: null, nextSegmentId: 0, allPendingTasks: 0, pendingRootTasks: 0, completedRootSegment: null, abortableTasks: m, pingedTasks: n, clientRenderedBoundaries: [], completedBoundaries: [], partialBoundaries: [], onError: f === void 0 ? vb : f, onAllReady: e === void 0 ? S : e, onShellReady: g2 === void 0 ? S : g2, onShellError: k === void 0 ? S : k, onFatalError: l === void 0 ? S : l };
      c2 = T(b3, 0, null, c2);
      c2.parentFlushed = true;
      a3 = xb(b3, a3, null, c2, m, Wa, null, db);
      n.push(a3);
      return b3;
    }
    function xb(a3, b3, c2, d, f, e, g2, k) {
      a3.allPendingTasks++;
      c2 === null ? a3.pendingRootTasks++ : c2.pendingTasks++;
      var l = { node: b3, ping: function() {
        var b4 = a3.pingedTasks;
        b4.push(l);
        b4.length === 1 && yb(a3);
      }, blockedBoundary: c2, blockedSegment: d, abortSet: f, legacyContext: e, context: g2, treeContext: k };
      f.add(l);
      return l;
    }
    function T(a3, b3, c2, d) {
      return { status: 0, id: -1, index: b3, parentFlushed: false, chunks: [], children: [], formatContext: d, boundary: c2 };
    }
    function U(a3, b3) {
      a3 = a3.onError;
      a3(b3);
    }
    function V(a3, b3) {
      var c2 = a3.onShellError;
      c2(b3);
      c2 = a3.onFatalError;
      c2(b3);
      a3.destination !== null ? (a3.status = 2, a3.destination.destroy(b3)) : (a3.status = 1, a3.fatalError = b3);
    }
    function zb(a3, b3, c2, d, f) {
      H = {};
      kb = b3;
      M = 0;
      for (a3 = c2(d, f); L; )
        L = false, M = 0, O += 1, J = null, a3 = c2(d, f);
      nb();
      return a3;
    }
    function Ab(a3, b3, c2, d) {
      var f = c2.render(), e = d.childContextTypes;
      if (e !== null && e !== void 0) {
        var g2 = b3.legacyContext;
        if (typeof c2.getChildContext !== "function")
          d = g2;
        else {
          c2 = c2.getChildContext();
          for (var k in c2)
            if (!(k in e))
              throw Error((Va(d) || "Unknown") + '.getChildContext(): key "' + k + '" is not defined in childContextTypes.');
          d = C({}, g2, c2);
        }
        b3.legacyContext = d;
        W(a3, b3, f);
        b3.legacyContext = g2;
      } else
        W(a3, b3, f);
    }
    function Bb(a3, b3) {
      if (a3 && a3.defaultProps) {
        b3 = C({}, b3);
        a3 = a3.defaultProps;
        for (var c2 in a3)
          b3[c2] === void 0 && (b3[c2] = a3[c2]);
        return b3;
      }
      return b3;
    }
    function Cb(a3, b3, c2, d, f) {
      if (typeof c2 === "function")
        if (c2.prototype && c2.prototype.isReactComponent) {
          f = Xa(c2, b3.legacyContext);
          var e = c2.contextType;
          e = new c2(d, typeof e === "object" && e !== null ? e._currentValue2 : f);
          cb2(e, c2, d, f);
          Ab(a3, b3, e, c2);
        } else {
          e = Xa(c2, b3.legacyContext);
          f = zb(a3, b3, c2, d, e);
          var g2 = M !== 0;
          if (typeof f === "object" && f !== null && typeof f.render === "function" && f.$$typeof === void 0)
            cb2(f, c2, d, e), Ab(a3, b3, f, c2);
          else if (g2) {
            d = b3.treeContext;
            b3.treeContext = eb(d, 1, 0);
            try {
              W(a3, b3, f);
            } finally {
              b3.treeContext = d;
            }
          } else
            W(a3, b3, f);
        }
      else if (typeof c2 === "string")
        switch (f = b3.blockedSegment, e = ya(f.chunks, c2, d, a3.responseState, f.formatContext), g2 = f.formatContext, f.formatContext = qa(g2, c2, d), Db(a3, b3, e), f.formatContext = g2, c2) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            f.chunks.push("</", c2, ">");
        }
      else {
        switch (c2) {
          case Sa:
          case Ra:
          case Ha:
          case Ia:
          case Ga:
            W(a3, b3, d.children);
            return;
          case Na:
            W(a3, b3, d.children);
            return;
          case Qa:
            throw Error("ReactDOMServer does not yet support scope components.");
          case Ma:
            a: {
              c2 = b3.blockedBoundary;
              f = b3.blockedSegment;
              e = d.fallback;
              d = d.children;
              g2 = /* @__PURE__ */ new Set();
              var k = { id: null, rootSegmentID: -1, parentFlushed: false, pendingTasks: 0, forceClientRender: false, completedSegments: [], byteSize: 0, fallbackAbortableTasks: g2 }, l = T(a3, f.chunks.length, k, f.formatContext);
              f.children.push(l);
              var n = T(a3, 0, null, f.formatContext);
              n.parentFlushed = true;
              b3.blockedBoundary = k;
              b3.blockedSegment = n;
              try {
                if (Db(a3, b3, d), n.status = 1, X(k, n), k.pendingTasks === 0)
                  break a;
              } catch (m) {
                n.status = 4, U(a3, m), k.forceClientRender = true;
              } finally {
                b3.blockedBoundary = c2, b3.blockedSegment = f;
              }
              b3 = xb(a3, e, c2, l, g2, b3.legacyContext, b3.context, b3.treeContext);
              a3.pingedTasks.push(b3);
            }
            return;
        }
        if (typeof c2 === "object" && c2 !== null)
          switch (c2.$$typeof) {
            case La:
              d = zb(a3, b3, c2.render, d, f);
              if (M !== 0) {
                c2 = b3.treeContext;
                b3.treeContext = eb(c2, 1, 0);
                try {
                  W(a3, b3, d);
                } finally {
                  b3.treeContext = c2;
                }
              } else
                W(a3, b3, d);
              return;
            case Oa:
              c2 = c2.type;
              d = Bb(c2, d);
              Cb(a3, b3, c2, d, f);
              return;
            case Ja:
              f = d.children;
              c2 = c2._context;
              d = d.value;
              e = c2._currentValue2;
              c2._currentValue2 = d;
              g2 = D;
              D = d = { parent: g2, depth: g2 === null ? 0 : g2.depth + 1, context: c2, parentValue: e, value: d };
              b3.context = d;
              W(a3, b3, f);
              a3 = D;
              if (a3 === null)
                throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
              d = a3.parentValue;
              a3.context._currentValue2 = d === Ta ? a3.context._defaultValue : d;
              a3 = D = a3.parent;
              b3.context = a3;
              return;
            case Ka:
              d = d.children;
              d = d(c2._currentValue2);
              W(a3, b3, d);
              return;
            case Pa:
              f = c2._init;
              c2 = f(c2._payload);
              d = Bb(c2, d);
              Cb(a3, b3, c2, d, void 0);
              return;
          }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((c2 == null ? c2 : typeof c2) + "."));
      }
    }
    function W(a3, b3, c2) {
      b3.node = c2;
      if (typeof c2 === "object" && c2 !== null) {
        switch (c2.$$typeof) {
          case Ea:
            Cb(a3, b3, c2.type, c2.props, c2.ref);
            return;
          case Fa:
            throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
          case Pa:
            var d = c2._init;
            c2 = d(c2._payload);
            W(a3, b3, c2);
            return;
        }
        if (pa(c2)) {
          Eb(a3, b3, c2);
          return;
        }
        c2 === null || typeof c2 !== "object" ? d = null : (d = Ua && c2[Ua] || c2["@@iterator"], d = typeof d === "function" ? d : null);
        if (d && (d = d.call(c2))) {
          c2 = d.next();
          if (!c2.done) {
            var f = [];
            do
              f.push(c2.value), c2 = d.next();
            while (!c2.done);
            Eb(a3, b3, f);
          }
          return;
        }
        a3 = Object.prototype.toString.call(c2);
        throw Error("Objects are not valid as a React child (found: " + (a3 === "[object Object]" ? "object with keys {" + Object.keys(c2).join(", ") + "}" : a3) + "). If you meant to render a collection of children, use an array instead.");
      }
      typeof c2 === "string" ? (b3 = b3.blockedSegment.chunks, a3.responseState.generateStaticMarkup ? b3.push(u2(c2)) : ra(b3, c2)) : typeof c2 === "number" && (b3 = b3.blockedSegment.chunks, c2 = "" + c2, a3.responseState.generateStaticMarkup ? b3.push(u2(c2)) : ra(b3, c2));
    }
    function Eb(a3, b3, c2) {
      for (var d = c2.length, f = 0; f < d; f++) {
        var e = b3.treeContext;
        b3.treeContext = eb(e, d, f);
        try {
          Db(a3, b3, c2[f]);
        } finally {
          b3.treeContext = e;
        }
      }
    }
    function Db(a3, b3, c2) {
      var d = b3.blockedSegment.formatContext, f = b3.legacyContext, e = b3.context;
      try {
        return W(a3, b3, c2);
      } catch (l) {
        if (nb(), typeof l === "object" && l !== null && typeof l.then === "function") {
          c2 = l;
          var g2 = b3.blockedSegment, k = T(a3, g2.chunks.length, null, g2.formatContext);
          g2.children.push(k);
          a3 = xb(a3, b3.node, b3.blockedBoundary, k, b3.abortSet, b3.legacyContext, b3.context, b3.treeContext).ping;
          c2.then(a3, a3);
          b3.blockedSegment.formatContext = d;
          b3.legacyContext = f;
          b3.context = e;
          F(e);
        } else
          throw b3.blockedSegment.formatContext = d, b3.legacyContext = f, b3.context = e, F(e), l;
      }
    }
    function Fb(a3) {
      var b3 = a3.blockedBoundary;
      a3 = a3.blockedSegment;
      a3.status = 3;
      Gb(this, b3, a3);
    }
    function Hb(a3) {
      var b3 = a3.blockedBoundary;
      a3.blockedSegment.status = 3;
      b3 === null ? (this.allPendingTasks--, this.status !== 2 && (this.status = 2, this.destination !== null && this.destination.push(null))) : (b3.pendingTasks--, b3.forceClientRender || (b3.forceClientRender = true, b3.parentFlushed && this.clientRenderedBoundaries.push(b3)), b3.fallbackAbortableTasks.forEach(Hb, this), b3.fallbackAbortableTasks.clear(), this.allPendingTasks--, this.allPendingTasks === 0 && (a3 = this.onAllReady, a3()));
    }
    function X(a3, b3) {
      if (b3.chunks.length === 0 && b3.children.length === 1 && b3.children[0].boundary === null) {
        var c2 = b3.children[0];
        c2.id = b3.id;
        c2.parentFlushed = true;
        c2.status === 1 && X(a3, c2);
      } else
        a3.completedSegments.push(b3);
    }
    function Gb(a3, b3, c2) {
      if (b3 === null) {
        if (c2.parentFlushed) {
          if (a3.completedRootSegment !== null)
            throw Error("There can only be one root segment. This is a bug in React.");
          a3.completedRootSegment = c2;
        }
        a3.pendingRootTasks--;
        a3.pendingRootTasks === 0 && (a3.onShellError = S, b3 = a3.onShellReady, b3());
      } else
        b3.pendingTasks--, b3.forceClientRender || (b3.pendingTasks === 0 ? (c2.parentFlushed && c2.status === 1 && X(b3, c2), b3.parentFlushed && a3.completedBoundaries.push(b3), b3.fallbackAbortableTasks.forEach(Fb, a3), b3.fallbackAbortableTasks.clear()) : c2.parentFlushed && c2.status === 1 && (X(b3, c2), b3.completedSegments.length === 1 && b3.parentFlushed && a3.partialBoundaries.push(b3)));
      a3.allPendingTasks--;
      a3.allPendingTasks === 0 && (a3 = a3.onAllReady, a3());
    }
    function yb(a3) {
      if (a3.status !== 2) {
        var b3 = D, c2 = ub.current;
        ub.current = tb;
        var d = R;
        R = a3.responseState;
        try {
          var f = a3.pingedTasks, e;
          for (e = 0; e < f.length; e++) {
            var g2 = f[e];
            var k = a3, l = g2.blockedSegment;
            if (l.status === 0) {
              F(g2.context);
              try {
                W(k, g2, g2.node), g2.abortSet.delete(g2), l.status = 1, Gb(k, g2.blockedBoundary, l);
              } catch (w) {
                if (nb(), typeof w === "object" && w !== null && typeof w.then === "function") {
                  var n = g2.ping;
                  w.then(n, n);
                } else {
                  g2.abortSet.delete(g2);
                  l.status = 4;
                  var m = g2.blockedBoundary, y = w;
                  U(k, y);
                  m === null ? V(k, y) : (m.pendingTasks--, m.forceClientRender || (m.forceClientRender = true, m.parentFlushed && k.clientRenderedBoundaries.push(m)));
                  k.allPendingTasks--;
                  if (k.allPendingTasks === 0) {
                    var B = k.onAllReady;
                    B();
                  }
                }
              } finally {
              }
            }
          }
          f.splice(0, e);
          a3.destination !== null && Ib(a3, a3.destination);
        } catch (w) {
          U(a3, w), V(a3, w);
        } finally {
          R = d, ub.current = c2, c2 === tb && F(b3);
        }
      }
    }
    function Y(a3, b3, c2) {
      c2.parentFlushed = true;
      switch (c2.status) {
        case 0:
          var d = c2.id = a3.nextSegmentId++;
          a3 = a3.responseState;
          h(b3, '<template id="');
          h(b3, a3.placeholderPrefix);
          a3 = d.toString(16);
          h(b3, a3);
          return h(b3, '"></template>');
        case 1:
          c2.status = 2;
          var f = true;
          d = c2.chunks;
          var e = 0;
          c2 = c2.children;
          for (var g2 = 0; g2 < c2.length; g2++) {
            for (f = c2[g2]; e < f.index; e++)
              h(b3, d[e]);
            f = Z(a3, b3, f);
          }
          for (; e < d.length - 1; e++)
            h(b3, d[e]);
          e < d.length && (f = h(b3, d[e]));
          return f;
        default:
          throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
      }
    }
    function Z(a3, b3, c2) {
      var d = c2.boundary;
      if (d === null)
        return Y(a3, b3, c2);
      d.parentFlushed = true;
      if (d.forceClientRender)
        return a3.responseState.generateStaticMarkup || h(b3, "<!--$!-->"), Y(a3, b3, c2), a3 = a3.responseState.generateStaticMarkup ? true : h(b3, "<!--/$-->"), a3;
      if (0 < d.pendingTasks) {
        d.rootSegmentID = a3.nextSegmentId++;
        0 < d.completedSegments.length && a3.partialBoundaries.push(d);
        var f = a3.responseState;
        var e = f.nextSuspenseID++;
        f = f.boundaryPrefix + e.toString(16);
        d = d.id = f;
        za(b3, a3.responseState, d);
        Y(a3, b3, c2);
        return h(b3, "<!--/$-->");
      }
      if (d.byteSize > a3.progressiveChunkSize)
        return d.rootSegmentID = a3.nextSegmentId++, a3.completedBoundaries.push(d), za(b3, a3.responseState, d.id), Y(a3, b3, c2), h(b3, "<!--/$-->");
      a3.responseState.generateStaticMarkup || h(b3, "<!--$-->");
      c2 = d.completedSegments;
      if (c2.length !== 1)
        throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
      Z(a3, b3, c2[0]);
      a3 = a3.responseState.generateStaticMarkup ? true : h(b3, "<!--/$-->");
      return a3;
    }
    function Jb(a3, b3, c2) {
      Aa(b3, a3.responseState, c2.formatContext, c2.id);
      Z(a3, b3, c2);
      return Ba(b3, c2.formatContext);
    }
    function Kb(a3, b3, c2) {
      for (var d = c2.completedSegments, f = 0; f < d.length; f++)
        Lb(a3, b3, c2, d[f]);
      d.length = 0;
      a3 = a3.responseState;
      d = c2.id;
      c2 = c2.rootSegmentID;
      h(b3, a3.startInlineScript);
      a3.sentCompleteBoundaryFunction ? h(b3, '$RC("') : (a3.sentCompleteBoundaryFunction = true, h(b3, 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'));
      if (d === null)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      c2 = c2.toString(16);
      h(b3, d);
      h(b3, '","');
      h(b3, a3.segmentPrefix);
      h(b3, c2);
      return h(b3, '")<\/script>');
    }
    function Lb(a3, b3, c2, d) {
      if (d.status === 2)
        return true;
      var f = d.id;
      if (f === -1) {
        if ((d.id = c2.rootSegmentID) === -1)
          throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return Jb(a3, b3, d);
      }
      Jb(a3, b3, d);
      a3 = a3.responseState;
      h(b3, a3.startInlineScript);
      a3.sentCompleteSegmentFunction ? h(b3, '$RS("') : (a3.sentCompleteSegmentFunction = true, h(b3, 'function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'));
      h(b3, a3.segmentPrefix);
      f = f.toString(16);
      h(b3, f);
      h(b3, '","');
      h(b3, a3.placeholderPrefix);
      h(b3, f);
      return h(b3, '")<\/script>');
    }
    function Ib(a3, b3) {
      try {
        var c2 = a3.completedRootSegment;
        if (c2 !== null && a3.pendingRootTasks === 0) {
          Z(a3, b3, c2);
          a3.completedRootSegment = null;
          var d = a3.responseState.bootstrapChunks;
          for (c2 = 0; c2 < d.length - 1; c2++)
            h(b3, d[c2]);
          c2 < d.length && h(b3, d[c2]);
        }
        var f = a3.clientRenderedBoundaries, e;
        for (e = 0; e < f.length; e++) {
          d = b3;
          var g2 = a3.responseState, k = f[e].id;
          h(d, g2.startInlineScript);
          g2.sentClientRenderFunction ? h(d, '$RX("') : (g2.sentClientRenderFunction = true, h(d, 'function $RX(a){if(a=document.getElementById(a))a=a.previousSibling,a.data="$!",a._reactRetry&&a._reactRetry()};$RX("'));
          if (k === null)
            throw Error("An ID must have been assigned before we can complete the boundary.");
          h(d, k);
          if (!h(d, '")<\/script>')) {
            a3.destination = null;
            e++;
            f.splice(0, e);
            return;
          }
        }
        f.splice(0, e);
        var l = a3.completedBoundaries;
        for (e = 0; e < l.length; e++)
          if (!Kb(a3, b3, l[e])) {
            a3.destination = null;
            e++;
            l.splice(0, e);
            return;
          }
        l.splice(0, e);
        var n = a3.partialBoundaries;
        for (e = 0; e < n.length; e++) {
          var m = n[e];
          a: {
            f = a3;
            g2 = b3;
            var y = m.completedSegments;
            for (k = 0; k < y.length; k++)
              if (!Lb(f, g2, m, y[k])) {
                k++;
                y.splice(0, k);
                var B = false;
                break a;
              }
            y.splice(0, k);
            B = true;
          }
          if (!B) {
            a3.destination = null;
            e++;
            n.splice(0, e);
            return;
          }
        }
        n.splice(0, e);
        var w = a3.completedBoundaries;
        for (e = 0; e < w.length; e++)
          if (!Kb(a3, b3, w[e])) {
            a3.destination = null;
            e++;
            w.splice(0, e);
            return;
          }
        w.splice(0, e);
      } finally {
        a3.allPendingTasks === 0 && a3.pingedTasks.length === 0 && a3.clientRenderedBoundaries.length === 0 && a3.completedBoundaries.length === 0 && b3.push(null);
      }
    }
    function Mb(a3, b3) {
      if (a3.status === 1)
        a3.status = 2, b3.destroy(a3.fatalError);
      else if (a3.status !== 2 && a3.destination === null) {
        a3.destination = b3;
        try {
          Ib(a3, b3);
        } catch (c2) {
          U(a3, c2), V(a3, c2);
        }
      }
    }
    function Nb(a3) {
      try {
        var b3 = a3.abortableTasks;
        b3.forEach(Hb, a3);
        b3.clear();
        a3.destination !== null && Ib(a3, a3.destination);
      } catch (c2) {
        U(a3, c2), V(a3, c2);
      }
    }
    function Ob() {
    }
    function Pb(a3, b3, c2) {
      var d = false, f = null, e = "", g2 = false;
      a3 = wb(a3, Ca(c2, b3 ? b3.identifierPrefix : void 0), Da(), Infinity, Ob, void 0, function() {
        g2 = true;
      }, void 0, void 0);
      yb(a3);
      Nb(a3);
      Mb(a3, { push: function(a4) {
        a4 !== null && (e += a4);
        return true;
      }, destroy: function(a4) {
        d = true;
        f = a4;
      } });
      if (d)
        throw f;
      if (!g2)
        throw Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
      return e;
    }
    var Qb = function(a3) {
      function b3() {
        var b4 = a3.call(this, {}) || this;
        b4.request = null;
        b4.startedFlowing = false;
        return b4;
      }
      ca2(b3, a3);
      var c2 = b3.prototype;
      c2._destroy = function(a4, b4) {
        Nb(this.request);
        b4(a4);
      };
      c2._read = function() {
        this.startedFlowing && Mb(this.request, this);
      };
      return b3;
    }(ba.Readable);
    function Rb() {
    }
    function Sb(a3, b3) {
      var c2 = new Qb(), d = wb(a3, Ca(false, b3 ? b3.identifierPrefix : void 0), Da(), Infinity, Rb, function() {
        c2.startedFlowing = true;
        Mb(d, c2);
      }, void 0, void 0);
      c2.request = d;
      yb(d);
      return c2;
    }
    exports.renderToNodeStream = function(a3, b3) {
      return Sb(a3, b3);
    };
    exports.renderToStaticMarkup = function(a3, b3) {
      return Pb(a3, b3, true);
    };
    exports.renderToStaticNodeStream = function(a3, b3) {
      return Sb(a3, b3);
    };
    exports.renderToString = function(a3, b3) {
      return Pb(a3, b3, false);
    };
    exports.version = "18.1.0";
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.production.min.js
var require_react_dom_server_node_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.production.min.js"(exports) {
    "use strict";
    var aa = require("util");
    var ba = require_react();
    var k = null;
    var l = 0;
    var q2 = true;
    function r(a3, b3) {
      if (typeof b3 === "string") {
        if (b3.length !== 0)
          if (2048 < 3 * b3.length)
            0 < l && (t(a3, k.subarray(0, l)), k = new Uint8Array(2048), l = 0), t(a3, u2.encode(b3));
          else {
            var c2 = k;
            0 < l && (c2 = k.subarray(l));
            c2 = u2.encodeInto(b3, c2);
            var d = c2.read;
            l += c2.written;
            d < b3.length && (t(a3, k), k = new Uint8Array(2048), l = u2.encodeInto(b3.slice(d), k).written);
            l === 2048 && (t(a3, k), k = new Uint8Array(2048), l = 0);
          }
      } else
        b3.byteLength !== 0 && (2048 < b3.byteLength ? (0 < l && (t(a3, k.subarray(0, l)), k = new Uint8Array(2048), l = 0), t(a3, b3)) : (c2 = k.length - l, c2 < b3.byteLength && (c2 === 0 ? t(a3, k) : (k.set(b3.subarray(0, c2), l), l += c2, t(a3, k), b3 = b3.subarray(c2)), k = new Uint8Array(2048), l = 0), k.set(b3, l), l += b3.byteLength, l === 2048 && (t(a3, k), k = new Uint8Array(2048), l = 0)));
    }
    function t(a3, b3) {
      a3 = a3.write(b3);
      q2 = q2 && a3;
    }
    function v(a3, b3) {
      r(a3, b3);
      return q2;
    }
    function ca2(a3) {
      k && 0 < l && a3.write(k.subarray(0, l));
      k = null;
      l = 0;
      q2 = true;
    }
    var u2 = new aa.TextEncoder();
    function w(a3) {
      return u2.encode(a3);
    }
    var x = Object.prototype.hasOwnProperty;
    var da = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var ea = {};
    var fa = {};
    function ha(a3) {
      if (x.call(fa, a3))
        return true;
      if (x.call(ea, a3))
        return false;
      if (da.test(a3))
        return fa[a3] = true;
      ea[a3] = true;
      return false;
    }
    function y(a3, b3, c2, d, f, e, g2) {
      this.acceptsBooleans = b3 === 2 || b3 === 3 || b3 === 4;
      this.attributeName = d;
      this.attributeNamespace = f;
      this.mustUseProperty = c2;
      this.propertyName = a3;
      this.type = b3;
      this.sanitizeURL = e;
      this.removeEmptyString = g2;
    }
    var z = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
      z[a3] = new y(a3, 0, false, a3, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
      var b3 = a3[0];
      z[b3] = new y(b3, 1, false, a3[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
      z[a3] = new y(a3, 2, false, a3.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
      z[a3] = new y(a3, 2, false, a3, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
      z[a3] = new y(a3, 3, false, a3.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
      z[a3] = new y(a3, 3, true, a3, null, false, false);
    });
    ["capture", "download"].forEach(function(a3) {
      z[a3] = new y(a3, 4, false, a3, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a3) {
      z[a3] = new y(a3, 6, false, a3, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a3) {
      z[a3] = new y(a3, 5, false, a3.toLowerCase(), null, false, false);
    });
    var ia = /[\-:]([a-z])/g;
    function ja(a3) {
      return a3[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
      var b3 = a3.replace(ia, ja);
      z[b3] = new y(b3, 1, false, a3, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
      var b3 = a3.replace(ia, ja);
      z[b3] = new y(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
      var b3 = a3.replace(ia, ja);
      z[b3] = new y(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a3) {
      z[a3] = new y(a3, 1, false, a3.toLowerCase(), null, false, false);
    });
    z.xlinkHref = new y("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a3) {
      z[a3] = new y(a3, 1, false, a3.toLowerCase(), null, true, true);
    });
    var B = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var ka = ["Webkit", "ms", "Moz", "O"];
    Object.keys(B).forEach(function(a3) {
      ka.forEach(function(b3) {
        b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
        B[b3] = B[a3];
      });
    });
    var la = /["'&<>]/;
    function D(a3) {
      if (typeof a3 === "boolean" || typeof a3 === "number")
        return "" + a3;
      a3 = "" + a3;
      var b3 = la.exec(a3);
      if (b3) {
        var c2 = "", d, f = 0;
        for (d = b3.index; d < a3.length; d++) {
          switch (a3.charCodeAt(d)) {
            case 34:
              b3 = "&quot;";
              break;
            case 38:
              b3 = "&amp;";
              break;
            case 39:
              b3 = "&#x27;";
              break;
            case 60:
              b3 = "&lt;";
              break;
            case 62:
              b3 = "&gt;";
              break;
            default:
              continue;
          }
          f !== d && (c2 += a3.substring(f, d));
          f = d + 1;
          c2 += b3;
        }
        a3 = f !== d ? c2 + a3.substring(f, d) : c2;
      }
      return a3;
    }
    var ma = /([A-Z])/g;
    var na = /^ms-/;
    var oa = Array.isArray;
    var pa = w("<script>");
    var qa = w("<\/script>");
    var ra = w('<script src="');
    var sa = w('<script type="module" src="');
    var ta = w('" async=""><\/script>');
    var ua = /(<\/|<)(s)(cript)/gi;
    function va(a3, b3, c2, d) {
      return "" + b3 + (c2 === "s" ? "\\u0073" : "\\u0053") + d;
    }
    function E(a3, b3) {
      return { insertionMode: a3, selectedValue: b3 };
    }
    function wa(a3, b3, c2) {
      switch (b3) {
        case "select":
          return E(1, c2.value != null ? c2.value : c2.defaultValue);
        case "svg":
          return E(2, null);
        case "math":
          return E(3, null);
        case "foreignObject":
          return E(1, null);
        case "table":
          return E(4, null);
        case "thead":
        case "tbody":
        case "tfoot":
          return E(5, null);
        case "colgroup":
          return E(7, null);
        case "tr":
          return E(6, null);
      }
      return 4 <= a3.insertionMode || a3.insertionMode === 0 ? E(1, null) : a3;
    }
    var xa = w("<!-- -->");
    var ya = /* @__PURE__ */ new Map();
    var za = w(' style="');
    var Aa = w(":");
    var Ba = w(";");
    function Ca(a3, b3, c2) {
      if (typeof c2 !== "object")
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      b3 = true;
      for (var d in c2)
        if (x.call(c2, d)) {
          var f = c2[d];
          if (f != null && typeof f !== "boolean" && f !== "") {
            if (d.indexOf("--") === 0) {
              var e = D(d);
              f = D(("" + f).trim());
            } else {
              e = d;
              var g2 = ya.get(e);
              g2 !== void 0 ? e = g2 : (g2 = w(D(e.replace(ma, "-$1").toLowerCase().replace(na, "-ms-"))), ya.set(e, g2), e = g2);
              f = typeof f === "number" ? f === 0 || x.call(B, d) ? "" + f : f + "px" : D(("" + f).trim());
            }
            b3 ? (b3 = false, a3.push(za, e, Aa, f)) : a3.push(Ba, e, Aa, f);
          }
        }
      b3 || a3.push(F);
    }
    var H = w(" ");
    var I = w('="');
    var F = w('"');
    var Da = w('=""');
    function J(a3, b3, c2, d) {
      switch (c2) {
        case "style":
          Ca(a3, b3, d);
          return;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
          return;
      }
      if (!(2 < c2.length) || c2[0] !== "o" && c2[0] !== "O" || c2[1] !== "n" && c2[1] !== "N") {
        if (b3 = z.hasOwnProperty(c2) ? z[c2] : null, b3 !== null) {
          switch (typeof d) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (!b3.acceptsBooleans)
                return;
          }
          c2 = b3.attributeName;
          switch (b3.type) {
            case 3:
              d && a3.push(H, c2, Da);
              break;
            case 4:
              d === true ? a3.push(H, c2, Da) : d !== false && a3.push(H, c2, I, D(d), F);
              break;
            case 5:
              isNaN(d) || a3.push(H, c2, I, D(d), F);
              break;
            case 6:
              !isNaN(d) && 1 <= d && a3.push(H, c2, I, D(d), F);
              break;
            default:
              b3.sanitizeURL && (d = "" + d), a3.push(H, c2, I, D(d), F);
          }
        } else if (ha(c2)) {
          switch (typeof d) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (b3 = c2.toLowerCase().slice(0, 5), b3 !== "data-" && b3 !== "aria-")
                return;
          }
          a3.push(H, c2, I, D(d), F);
        }
      }
    }
    var K = w(">");
    var Ea = w("/>");
    function L(a3, b3, c2) {
      if (b3 != null) {
        if (c2 != null)
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        if (typeof b3 !== "object" || !("__html" in b3))
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        b3 = b3.__html;
        b3 !== null && b3 !== void 0 && a3.push("" + b3);
      }
    }
    function Fa(a3) {
      var b3 = "";
      ba.Children.forEach(a3, function(a4) {
        a4 != null && (b3 += a4);
      });
      return b3;
    }
    var Ga = w(' selected=""');
    function Ha(a3, b3, c2, d) {
      a3.push(M(c2));
      var f = c2 = null, e;
      for (e in b3)
        if (x.call(b3, e)) {
          var g2 = b3[e];
          if (g2 != null)
            switch (e) {
              case "children":
                c2 = g2;
                break;
              case "dangerouslySetInnerHTML":
                f = g2;
                break;
              default:
                J(a3, d, e, g2);
            }
        }
      a3.push(K);
      L(a3, f, c2);
      return typeof c2 === "string" ? (a3.push(D(c2)), null) : c2;
    }
    var Ia = w("\n");
    var Ja = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
    var Ka = /* @__PURE__ */ new Map();
    function M(a3) {
      var b3 = Ka.get(a3);
      if (b3 === void 0) {
        if (!Ja.test(a3))
          throw Error("Invalid tag: " + a3);
        b3 = w("<" + a3);
        Ka.set(a3, b3);
      }
      return b3;
    }
    var La = w("<!DOCTYPE html>");
    function Ma(a3, b3, c2, d, f) {
      switch (b3) {
        case "select":
          a3.push(M("select"));
          var e = null, g2 = null;
          for (p2 in c2)
            if (x.call(c2, p2)) {
              var h = c2[p2];
              if (h != null)
                switch (p2) {
                  case "children":
                    e = h;
                    break;
                  case "dangerouslySetInnerHTML":
                    g2 = h;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    J(a3, d, p2, h);
                }
            }
          a3.push(K);
          L(a3, g2, e);
          return e;
        case "option":
          g2 = f.selectedValue;
          a3.push(M("option"));
          var m = h = null, n = null;
          var p2 = null;
          for (e in c2)
            if (x.call(c2, e) && (b3 = c2[e], b3 != null))
              switch (e) {
                case "children":
                  h = b3;
                  break;
                case "selected":
                  n = b3;
                  break;
                case "dangerouslySetInnerHTML":
                  p2 = b3;
                  break;
                case "value":
                  m = b3;
                default:
                  J(a3, d, e, b3);
              }
          if (g2 != null)
            if (c2 = m !== null ? "" + m : Fa(h), oa(g2))
              for (d = 0; d < g2.length; d++) {
                if ("" + g2[d] === c2) {
                  a3.push(Ga);
                  break;
                }
              }
            else
              "" + g2 === c2 && a3.push(Ga);
          else
            n && a3.push(Ga);
          a3.push(K);
          L(a3, p2, h);
          return h;
        case "textarea":
          a3.push(M("textarea"));
          p2 = g2 = e = null;
          for (h in c2)
            if (x.call(c2, h) && (m = c2[h], m != null))
              switch (h) {
                case "children":
                  p2 = m;
                  break;
                case "value":
                  e = m;
                  break;
                case "defaultValue":
                  g2 = m;
                  break;
                case "dangerouslySetInnerHTML":
                  throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  J(a3, d, h, m);
              }
          e === null && g2 !== null && (e = g2);
          a3.push(K);
          if (p2 != null) {
            if (e != null)
              throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            if (oa(p2) && 1 < p2.length)
              throw Error("<textarea> can only have at most one child.");
            e = "" + p2;
          }
          typeof e === "string" && e[0] === "\n" && a3.push(Ia);
          e !== null && a3.push(D("" + e));
          return null;
        case "input":
          a3.push(M("input"));
          m = p2 = h = e = null;
          for (g2 in c2)
            if (x.call(c2, g2) && (n = c2[g2], n != null))
              switch (g2) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  m = n;
                  break;
                case "defaultValue":
                  h = n;
                  break;
                case "checked":
                  p2 = n;
                  break;
                case "value":
                  e = n;
                  break;
                default:
                  J(a3, d, g2, n);
              }
          p2 !== null ? J(a3, d, "checked", p2) : m !== null && J(a3, d, "checked", m);
          e !== null ? J(a3, d, "value", e) : h !== null && J(a3, d, "value", h);
          a3.push(Ea);
          return null;
        case "menuitem":
          a3.push(M("menuitem"));
          for (var C in c2)
            if (x.call(c2, C) && (e = c2[C], e != null))
              switch (C) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  J(a3, d, C, e);
              }
          a3.push(K);
          return null;
        case "listing":
        case "pre":
          a3.push(M(b3));
          g2 = e = null;
          for (m in c2)
            if (x.call(c2, m) && (h = c2[m], h != null))
              switch (m) {
                case "children":
                  e = h;
                  break;
                case "dangerouslySetInnerHTML":
                  g2 = h;
                  break;
                default:
                  J(a3, d, m, h);
              }
          a3.push(K);
          if (g2 != null) {
            if (e != null)
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (typeof g2 !== "object" || !("__html" in g2))
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            c2 = g2.__html;
            c2 !== null && c2 !== void 0 && (typeof c2 === "string" && 0 < c2.length && c2[0] === "\n" ? a3.push(Ia, c2) : a3.push("" + c2));
          }
          typeof e === "string" && e[0] === "\n" && a3.push(Ia);
          return e;
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "link":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
          a3.push(M(b3));
          for (var G in c2)
            if (x.call(c2, G) && (e = c2[G], e != null))
              switch (G) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(b3 + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  J(a3, d, G, e);
              }
          a3.push(Ea);
          return null;
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return Ha(a3, c2, b3, d);
        case "html":
          return f.insertionMode === 0 && a3.push(La), Ha(a3, c2, b3, d);
        default:
          if (b3.indexOf("-") === -1 && typeof c2.is !== "string")
            return Ha(a3, c2, b3, d);
          a3.push(M(b3));
          g2 = e = null;
          for (n in c2)
            if (x.call(c2, n) && (h = c2[n], h != null))
              switch (n) {
                case "children":
                  e = h;
                  break;
                case "dangerouslySetInnerHTML":
                  g2 = h;
                  break;
                case "style":
                  Ca(a3, d, h);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  ha(n) && typeof h !== "function" && typeof h !== "symbol" && a3.push(H, n, I, D(h), F);
              }
          a3.push(K);
          L(a3, g2, e);
          return e;
      }
    }
    var Na = w("</");
    var Oa = w(">");
    var Pa = w('<template id="');
    var Qa = w('"></template>');
    var Ra = w("<!--$-->");
    var Sa = w('<!--$?--><template id="');
    var Ta = w('"></template>');
    var Ua = w("<!--$!-->");
    var Va = w("<!--/$-->");
    function Wa(a3, b3, c2) {
      r(a3, Sa);
      if (c2 === null)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      r(a3, c2);
      return v(a3, Ta);
    }
    var Xa = w('<div hidden id="');
    var Ya = w('">');
    var Za = w("</div>");
    var $a = w('<svg aria-hidden="true" style="display:none" id="');
    var ab = w('">');
    var bb = w("</svg>");
    var cb2 = w('<math aria-hidden="true" style="display:none" id="');
    var db = w('">');
    var eb = w("</math>");
    var fb = w('<table hidden id="');
    var gb = w('">');
    var hb = w("</table>");
    var ib = w('<table hidden><tbody id="');
    var jb = w('">');
    var kb = w("</tbody></table>");
    var lb = w('<table hidden><tr id="');
    var mb = w('">');
    var nb = w("</tr></table>");
    var ob = w('<table hidden><colgroup id="');
    var pb = w('">');
    var qb = w("</colgroup></table>");
    function rb2(a3, b3, c2, d) {
      switch (c2.insertionMode) {
        case 0:
        case 1:
          return r(a3, Xa), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, Ya);
        case 2:
          return r(a3, $a), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, ab);
        case 3:
          return r(a3, cb2), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, db);
        case 4:
          return r(a3, fb), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, gb);
        case 5:
          return r(a3, ib), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, jb);
        case 6:
          return r(a3, lb), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, mb);
        case 7:
          return r(a3, ob), r(a3, b3.segmentPrefix), r(a3, d.toString(16)), v(a3, pb);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function sb(a3, b3) {
      switch (b3.insertionMode) {
        case 0:
        case 1:
          return v(a3, Za);
        case 2:
          return v(a3, bb);
        case 3:
          return v(a3, eb);
        case 4:
          return v(a3, hb);
        case 5:
          return v(a3, kb);
        case 6:
          return v(a3, nb);
        case 7:
          return v(a3, qb);
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    var tb = w('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("');
    var ub = w('$RS("');
    var vb = w('","');
    var wb = w('")<\/script>');
    var xb = w('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("');
    var yb = w('$RC("');
    var zb = w('","');
    var Ab = w('")<\/script>');
    var Bb = w('function $RX(a){if(a=document.getElementById(a))a=a.previousSibling,a.data="$!",a._reactRetry&&a._reactRetry()};$RX("');
    var Cb = w('$RX("');
    var Db = w('")<\/script>');
    var N = Object.assign;
    var Eb = Symbol.for("react.element");
    var Fb = Symbol.for("react.portal");
    var Gb = Symbol.for("react.fragment");
    var Hb = Symbol.for("react.strict_mode");
    var Ib = Symbol.for("react.profiler");
    var Jb = Symbol.for("react.provider");
    var Kb = Symbol.for("react.context");
    var Lb = Symbol.for("react.forward_ref");
    var Mb = Symbol.for("react.suspense");
    var Nb = Symbol.for("react.suspense_list");
    var Ob = Symbol.for("react.memo");
    var Pb = Symbol.for("react.lazy");
    var Qb = Symbol.for("react.scope");
    var Rb = Symbol.for("react.debug_trace_mode");
    var Sb = Symbol.for("react.legacy_hidden");
    var Tb = Symbol.for("react.default_value");
    var Ub = Symbol.iterator;
    function Vb(a3) {
      if (a3 == null)
        return null;
      if (typeof a3 === "function")
        return a3.displayName || a3.name || null;
      if (typeof a3 === "string")
        return a3;
      switch (a3) {
        case Gb:
          return "Fragment";
        case Fb:
          return "Portal";
        case Ib:
          return "Profiler";
        case Hb:
          return "StrictMode";
        case Mb:
          return "Suspense";
        case Nb:
          return "SuspenseList";
      }
      if (typeof a3 === "object")
        switch (a3.$$typeof) {
          case Kb:
            return (a3.displayName || "Context") + ".Consumer";
          case Jb:
            return (a3._context.displayName || "Context") + ".Provider";
          case Lb:
            var b3 = a3.render;
            a3 = a3.displayName;
            a3 || (a3 = b3.displayName || b3.name || "", a3 = a3 !== "" ? "ForwardRef(" + a3 + ")" : "ForwardRef");
            return a3;
          case Ob:
            return b3 = a3.displayName || null, b3 !== null ? b3 : Vb(a3.type) || "Memo";
          case Pb:
            b3 = a3._payload;
            a3 = a3._init;
            try {
              return Vb(a3(b3));
            } catch (c2) {
            }
        }
      return null;
    }
    var Wb = {};
    function Xb(a3, b3) {
      a3 = a3.contextTypes;
      if (!a3)
        return Wb;
      var c2 = {}, d;
      for (d in a3)
        c2[d] = b3[d];
      return c2;
    }
    var O = null;
    function P(a3, b3) {
      if (a3 !== b3) {
        a3.context._currentValue = a3.parentValue;
        a3 = a3.parent;
        var c2 = b3.parent;
        if (a3 === null) {
          if (c2 !== null)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
        } else {
          if (c2 === null)
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          P(a3, c2);
        }
        b3.context._currentValue = b3.value;
      }
    }
    function Yb(a3) {
      a3.context._currentValue = a3.parentValue;
      a3 = a3.parent;
      a3 !== null && Yb(a3);
    }
    function Zb(a3) {
      var b3 = a3.parent;
      b3 !== null && Zb(b3);
      a3.context._currentValue = a3.value;
    }
    function $b(a3, b3) {
      a3.context._currentValue = a3.parentValue;
      a3 = a3.parent;
      if (a3 === null)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a3.depth === b3.depth ? P(a3, b3) : $b(a3, b3);
    }
    function ac(a3, b3) {
      var c2 = b3.parent;
      if (c2 === null)
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      a3.depth === c2.depth ? P(a3, c2) : ac(a3, c2);
      b3.context._currentValue = b3.value;
    }
    function Q(a3) {
      var b3 = O;
      b3 !== a3 && (b3 === null ? Zb(a3) : a3 === null ? Yb(b3) : b3.depth === a3.depth ? P(b3, a3) : b3.depth > a3.depth ? $b(b3, a3) : ac(b3, a3), O = a3);
    }
    var bc = { isMounted: function() {
      return false;
    }, enqueueSetState: function(a3, b3) {
      a3 = a3._reactInternals;
      a3.queue !== null && a3.queue.push(b3);
    }, enqueueReplaceState: function(a3, b3) {
      a3 = a3._reactInternals;
      a3.replace = true;
      a3.queue = [b3];
    }, enqueueForceUpdate: function() {
    } };
    function cc2(a3, b3, c2, d) {
      var f = a3.state !== void 0 ? a3.state : null;
      a3.updater = bc;
      a3.props = c2;
      a3.state = f;
      var e = { queue: [], replace: false };
      a3._reactInternals = e;
      var g2 = b3.contextType;
      a3.context = typeof g2 === "object" && g2 !== null ? g2._currentValue : d;
      g2 = b3.getDerivedStateFromProps;
      typeof g2 === "function" && (g2 = g2(c2, f), f = g2 === null || g2 === void 0 ? f : N({}, f, g2), a3.state = f);
      if (typeof b3.getDerivedStateFromProps !== "function" && typeof a3.getSnapshotBeforeUpdate !== "function" && (typeof a3.UNSAFE_componentWillMount === "function" || typeof a3.componentWillMount === "function"))
        if (b3 = a3.state, typeof a3.componentWillMount === "function" && a3.componentWillMount(), typeof a3.UNSAFE_componentWillMount === "function" && a3.UNSAFE_componentWillMount(), b3 !== a3.state && bc.enqueueReplaceState(a3, a3.state, null), e.queue !== null && 0 < e.queue.length)
          if (b3 = e.queue, g2 = e.replace, e.queue = null, e.replace = false, g2 && b3.length === 1)
            a3.state = b3[0];
          else {
            e = g2 ? b3[0] : a3.state;
            f = true;
            for (g2 = g2 ? 1 : 0; g2 < b3.length; g2++) {
              var h = b3[g2];
              h = typeof h === "function" ? h.call(a3, e, c2, d) : h;
              h != null && (f ? (f = false, e = N({}, e, h)) : N(e, h));
            }
            a3.state = e;
          }
        else
          e.queue = null;
    }
    var dc = { id: 1, overflow: "" };
    function ec(a3, b3, c2) {
      var d = a3.id;
      a3 = a3.overflow;
      var f = 32 - fc(d) - 1;
      d &= ~(1 << f);
      c2 += 1;
      var e = 32 - fc(b3) + f;
      if (30 < e) {
        var g2 = f - f % 5;
        e = (d & (1 << g2) - 1).toString(32);
        d >>= g2;
        f -= g2;
        return { id: 1 << 32 - fc(b3) + f | c2 << f | d, overflow: e + a3 };
      }
      return { id: 1 << e | c2 << f | d, overflow: a3 };
    }
    var fc = Math.clz32 ? Math.clz32 : gc;
    var hc = Math.log;
    var ic = Math.LN2;
    function gc(a3) {
      a3 >>>= 0;
      return a3 === 0 ? 32 : 31 - (hc(a3) / ic | 0) | 0;
    }
    function jc(a3, b3) {
      return a3 === b3 && (a3 !== 0 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
    }
    var kc = typeof Object.is === "function" ? Object.is : jc;
    var R = null;
    var lc = null;
    var mc = null;
    var S = null;
    var T = false;
    var nc = false;
    var U = 0;
    var V = null;
    var oc = 0;
    function W() {
      if (R === null)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      return R;
    }
    function pc() {
      if (0 < oc)
        throw Error("Rendered more hooks than during the previous render");
      return { memoizedState: null, queue: null, next: null };
    }
    function qc() {
      S === null ? mc === null ? (T = false, mc = S = pc()) : (T = true, S = mc) : S.next === null ? (T = false, S = S.next = pc()) : (T = true, S = S.next);
      return S;
    }
    function rc() {
      lc = R = null;
      nc = false;
      mc = null;
      oc = 0;
      S = V = null;
    }
    function sc(a3, b3) {
      return typeof b3 === "function" ? b3(a3) : b3;
    }
    function tc(a3, b3, c2) {
      R = W();
      S = qc();
      if (T) {
        var d = S.queue;
        b3 = d.dispatch;
        if (V !== null && (c2 = V.get(d), c2 !== void 0)) {
          V.delete(d);
          d = S.memoizedState;
          do
            d = a3(d, c2.action), c2 = c2.next;
          while (c2 !== null);
          S.memoizedState = d;
          return [d, b3];
        }
        return [S.memoizedState, b3];
      }
      a3 = a3 === sc ? typeof b3 === "function" ? b3() : b3 : c2 !== void 0 ? c2(b3) : b3;
      S.memoizedState = a3;
      a3 = S.queue = { last: null, dispatch: null };
      a3 = a3.dispatch = uc.bind(null, R, a3);
      return [S.memoizedState, a3];
    }
    function vc(a3, b3) {
      R = W();
      S = qc();
      b3 = b3 === void 0 ? null : b3;
      if (S !== null) {
        var c2 = S.memoizedState;
        if (c2 !== null && b3 !== null) {
          var d = c2[1];
          a:
            if (d === null)
              d = false;
            else {
              for (var f = 0; f < d.length && f < b3.length; f++)
                if (!kc(b3[f], d[f])) {
                  d = false;
                  break a;
                }
              d = true;
            }
          if (d)
            return c2[0];
        }
      }
      a3 = a3();
      S.memoizedState = [a3, b3];
      return a3;
    }
    function uc(a3, b3, c2) {
      if (25 <= oc)
        throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      if (a3 === R)
        if (nc = true, a3 = { action: c2, next: null }, V === null && (V = /* @__PURE__ */ new Map()), c2 = V.get(b3), c2 === void 0)
          V.set(b3, a3);
        else {
          for (b3 = c2; b3.next !== null; )
            b3 = b3.next;
          b3.next = a3;
        }
    }
    function wc() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function xc() {
    }
    var zc = { readContext: function(a3) {
      return a3._currentValue;
    }, useContext: function(a3) {
      W();
      return a3._currentValue;
    }, useMemo: vc, useReducer: tc, useRef: function(a3) {
      R = W();
      S = qc();
      var b3 = S.memoizedState;
      return b3 === null ? (a3 = { current: a3 }, S.memoizedState = a3) : b3;
    }, useState: function(a3) {
      return tc(sc, a3);
    }, useInsertionEffect: xc, useLayoutEffect: function() {
    }, useCallback: function(a3, b3) {
      return vc(function() {
        return a3;
      }, b3);
    }, useImperativeHandle: xc, useEffect: xc, useDebugValue: xc, useDeferredValue: function(a3) {
      W();
      return a3;
    }, useTransition: function() {
      W();
      return [false, wc];
    }, useId: function() {
      var a3 = lc.treeContext;
      var b3 = a3.overflow;
      a3 = a3.id;
      a3 = (a3 & ~(1 << 32 - fc(a3) - 1)).toString(32) + b3;
      var c2 = yc;
      if (c2 === null)
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
      b3 = U++;
      a3 = ":" + c2.idPrefix + "R" + a3;
      0 < b3 && (a3 += "H" + b3.toString(32));
      return a3 + ":";
    }, useMutableSource: function(a3, b3) {
      W();
      return b3(a3._source);
    }, useSyncExternalStore: function(a3, b3, c2) {
      if (c2 === void 0)
        throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
      return c2();
    } };
    var yc = null;
    var Ac = ba.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;
    function Bc(a3) {
      console.error(a3);
    }
    function X() {
    }
    function Cc(a3, b3) {
      var c2 = a3.pingedTasks;
      c2.push(b3);
      c2.length === 1 && setImmediate(function() {
        return Dc(a3);
      });
    }
    function Ec(a3, b3, c2, d, f, e, g2, h) {
      a3.allPendingTasks++;
      c2 === null ? a3.pendingRootTasks++ : c2.pendingTasks++;
      var m = { node: b3, ping: function() {
        return Cc(a3, m);
      }, blockedBoundary: c2, blockedSegment: d, abortSet: f, legacyContext: e, context: g2, treeContext: h };
      f.add(m);
      return m;
    }
    function Fc(a3, b3, c2, d) {
      return { status: 0, id: -1, index: b3, parentFlushed: false, chunks: [], children: [], formatContext: d, boundary: c2 };
    }
    function Y(a3, b3) {
      a3 = a3.onError;
      a3(b3);
    }
    function Gc(a3, b3) {
      var c2 = a3.onShellError;
      c2(b3);
      c2 = a3.onFatalError;
      c2(b3);
      a3.destination !== null ? (a3.status = 2, a3.destination.destroy(b3)) : (a3.status = 1, a3.fatalError = b3);
    }
    function Hc(a3, b3, c2, d, f) {
      R = {};
      lc = b3;
      U = 0;
      for (a3 = c2(d, f); nc; )
        nc = false, U = 0, oc += 1, S = null, a3 = c2(d, f);
      rc();
      return a3;
    }
    function Ic(a3, b3, c2, d) {
      var f = c2.render(), e = d.childContextTypes;
      if (e !== null && e !== void 0) {
        var g2 = b3.legacyContext;
        if (typeof c2.getChildContext !== "function")
          d = g2;
        else {
          c2 = c2.getChildContext();
          for (var h in c2)
            if (!(h in e))
              throw Error((Vb(d) || "Unknown") + '.getChildContext(): key "' + h + '" is not defined in childContextTypes.');
          d = N({}, g2, c2);
        }
        b3.legacyContext = d;
        Z(a3, b3, f);
        b3.legacyContext = g2;
      } else
        Z(a3, b3, f);
    }
    function Jc(a3, b3) {
      if (a3 && a3.defaultProps) {
        b3 = N({}, b3);
        a3 = a3.defaultProps;
        for (var c2 in a3)
          b3[c2] === void 0 && (b3[c2] = a3[c2]);
        return b3;
      }
      return b3;
    }
    function Kc(a3, b3, c2, d, f) {
      if (typeof c2 === "function")
        if (c2.prototype && c2.prototype.isReactComponent) {
          f = Xb(c2, b3.legacyContext);
          var e = c2.contextType;
          e = new c2(d, typeof e === "object" && e !== null ? e._currentValue : f);
          cc2(e, c2, d, f);
          Ic(a3, b3, e, c2);
        } else {
          e = Xb(c2, b3.legacyContext);
          f = Hc(a3, b3, c2, d, e);
          var g2 = U !== 0;
          if (typeof f === "object" && f !== null && typeof f.render === "function" && f.$$typeof === void 0)
            cc2(f, c2, d, e), Ic(a3, b3, f, c2);
          else if (g2) {
            d = b3.treeContext;
            b3.treeContext = ec(d, 1, 0);
            try {
              Z(a3, b3, f);
            } finally {
              b3.treeContext = d;
            }
          } else
            Z(a3, b3, f);
        }
      else if (typeof c2 === "string")
        switch (f = b3.blockedSegment, e = Ma(f.chunks, c2, d, a3.responseState, f.formatContext), g2 = f.formatContext, f.formatContext = wa(g2, c2, d), Lc(a3, b3, e), f.formatContext = g2, c2) {
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "img":
          case "input":
          case "keygen":
          case "link":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
            break;
          default:
            f.chunks.push(Na, c2, Oa);
        }
      else {
        switch (c2) {
          case Sb:
          case Rb:
          case Hb:
          case Ib:
          case Gb:
            Z(a3, b3, d.children);
            return;
          case Nb:
            Z(a3, b3, d.children);
            return;
          case Qb:
            throw Error("ReactDOMServer does not yet support scope components.");
          case Mb:
            a: {
              c2 = b3.blockedBoundary;
              f = b3.blockedSegment;
              e = d.fallback;
              d = d.children;
              g2 = /* @__PURE__ */ new Set();
              var h = { id: null, rootSegmentID: -1, parentFlushed: false, pendingTasks: 0, forceClientRender: false, completedSegments: [], byteSize: 0, fallbackAbortableTasks: g2 }, m = Fc(a3, f.chunks.length, h, f.formatContext);
              f.children.push(m);
              var n = Fc(a3, 0, null, f.formatContext);
              n.parentFlushed = true;
              b3.blockedBoundary = h;
              b3.blockedSegment = n;
              try {
                if (Lc(a3, b3, d), n.status = 1, Mc(h, n), h.pendingTasks === 0)
                  break a;
              } catch (p2) {
                n.status = 4, Y(a3, p2), h.forceClientRender = true;
              } finally {
                b3.blockedBoundary = c2, b3.blockedSegment = f;
              }
              b3 = Ec(a3, e, c2, m, g2, b3.legacyContext, b3.context, b3.treeContext);
              a3.pingedTasks.push(b3);
            }
            return;
        }
        if (typeof c2 === "object" && c2 !== null)
          switch (c2.$$typeof) {
            case Lb:
              d = Hc(a3, b3, c2.render, d, f);
              if (U !== 0) {
                c2 = b3.treeContext;
                b3.treeContext = ec(c2, 1, 0);
                try {
                  Z(a3, b3, d);
                } finally {
                  b3.treeContext = c2;
                }
              } else
                Z(a3, b3, d);
              return;
            case Ob:
              c2 = c2.type;
              d = Jc(c2, d);
              Kc(a3, b3, c2, d, f);
              return;
            case Jb:
              f = d.children;
              c2 = c2._context;
              d = d.value;
              e = c2._currentValue;
              c2._currentValue = d;
              g2 = O;
              O = d = { parent: g2, depth: g2 === null ? 0 : g2.depth + 1, context: c2, parentValue: e, value: d };
              b3.context = d;
              Z(a3, b3, f);
              a3 = O;
              if (a3 === null)
                throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
              d = a3.parentValue;
              a3.context._currentValue = d === Tb ? a3.context._defaultValue : d;
              a3 = O = a3.parent;
              b3.context = a3;
              return;
            case Kb:
              d = d.children;
              d = d(c2._currentValue);
              Z(a3, b3, d);
              return;
            case Pb:
              f = c2._init;
              c2 = f(c2._payload);
              d = Jc(c2, d);
              Kc(a3, b3, c2, d, void 0);
              return;
          }
        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((c2 == null ? c2 : typeof c2) + "."));
      }
    }
    function Z(a3, b3, c2) {
      b3.node = c2;
      if (typeof c2 === "object" && c2 !== null) {
        switch (c2.$$typeof) {
          case Eb:
            Kc(a3, b3, c2.type, c2.props, c2.ref);
            return;
          case Fb:
            throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
          case Pb:
            var d = c2._init;
            c2 = d(c2._payload);
            Z(a3, b3, c2);
            return;
        }
        if (oa(c2)) {
          Nc(a3, b3, c2);
          return;
        }
        c2 === null || typeof c2 !== "object" ? d = null : (d = Ub && c2[Ub] || c2["@@iterator"], d = typeof d === "function" ? d : null);
        if (d && (d = d.call(c2))) {
          c2 = d.next();
          if (!c2.done) {
            var f = [];
            do
              f.push(c2.value), c2 = d.next();
            while (!c2.done);
            Nc(a3, b3, f);
          }
          return;
        }
        b3 = Object.prototype.toString.call(c2);
        throw Error("Objects are not valid as a React child (found: " + (b3 === "[object Object]" ? "object with keys {" + Object.keys(c2).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
      }
      typeof c2 === "string" ? c2 !== "" && b3.blockedSegment.chunks.push(D(c2), xa) : typeof c2 === "number" && (a3 = "" + c2, a3 !== "" && b3.blockedSegment.chunks.push(D(a3), xa));
    }
    function Nc(a3, b3, c2) {
      for (var d = c2.length, f = 0; f < d; f++) {
        var e = b3.treeContext;
        b3.treeContext = ec(e, d, f);
        try {
          Lc(a3, b3, c2[f]);
        } finally {
          b3.treeContext = e;
        }
      }
    }
    function Lc(a3, b3, c2) {
      var d = b3.blockedSegment.formatContext, f = b3.legacyContext, e = b3.context;
      try {
        return Z(a3, b3, c2);
      } catch (m) {
        if (rc(), typeof m === "object" && m !== null && typeof m.then === "function") {
          c2 = m;
          var g2 = b3.blockedSegment, h = Fc(a3, g2.chunks.length, null, g2.formatContext);
          g2.children.push(h);
          a3 = Ec(a3, b3.node, b3.blockedBoundary, h, b3.abortSet, b3.legacyContext, b3.context, b3.treeContext).ping;
          c2.then(a3, a3);
          b3.blockedSegment.formatContext = d;
          b3.legacyContext = f;
          b3.context = e;
          Q(e);
        } else
          throw b3.blockedSegment.formatContext = d, b3.legacyContext = f, b3.context = e, Q(e), m;
      }
    }
    function Oc(a3) {
      var b3 = a3.blockedBoundary;
      a3 = a3.blockedSegment;
      a3.status = 3;
      Pc(this, b3, a3);
    }
    function Qc(a3) {
      var b3 = a3.blockedBoundary;
      a3.blockedSegment.status = 3;
      b3 === null ? (this.allPendingTasks--, this.status !== 2 && (this.status = 2, this.destination !== null && this.destination.end())) : (b3.pendingTasks--, b3.forceClientRender || (b3.forceClientRender = true, b3.parentFlushed && this.clientRenderedBoundaries.push(b3)), b3.fallbackAbortableTasks.forEach(Qc, this), b3.fallbackAbortableTasks.clear(), this.allPendingTasks--, this.allPendingTasks === 0 && (a3 = this.onAllReady, a3()));
    }
    function Mc(a3, b3) {
      if (b3.chunks.length === 0 && b3.children.length === 1 && b3.children[0].boundary === null) {
        var c2 = b3.children[0];
        c2.id = b3.id;
        c2.parentFlushed = true;
        c2.status === 1 && Mc(a3, c2);
      } else
        a3.completedSegments.push(b3);
    }
    function Pc(a3, b3, c2) {
      if (b3 === null) {
        if (c2.parentFlushed) {
          if (a3.completedRootSegment !== null)
            throw Error("There can only be one root segment. This is a bug in React.");
          a3.completedRootSegment = c2;
        }
        a3.pendingRootTasks--;
        a3.pendingRootTasks === 0 && (a3.onShellError = X, b3 = a3.onShellReady, b3());
      } else
        b3.pendingTasks--, b3.forceClientRender || (b3.pendingTasks === 0 ? (c2.parentFlushed && c2.status === 1 && Mc(b3, c2), b3.parentFlushed && a3.completedBoundaries.push(b3), b3.fallbackAbortableTasks.forEach(Oc, a3), b3.fallbackAbortableTasks.clear()) : c2.parentFlushed && c2.status === 1 && (Mc(b3, c2), b3.completedSegments.length === 1 && b3.parentFlushed && a3.partialBoundaries.push(b3)));
      a3.allPendingTasks--;
      a3.allPendingTasks === 0 && (a3 = a3.onAllReady, a3());
    }
    function Dc(a3) {
      if (a3.status !== 2) {
        var b3 = O, c2 = Ac.current;
        Ac.current = zc;
        var d = yc;
        yc = a3.responseState;
        try {
          var f = a3.pingedTasks, e;
          for (e = 0; e < f.length; e++) {
            var g2 = f[e];
            var h = a3, m = g2.blockedSegment;
            if (m.status === 0) {
              Q(g2.context);
              try {
                Z(h, g2, g2.node), g2.abortSet.delete(g2), m.status = 1, Pc(h, g2.blockedBoundary, m);
              } catch (A) {
                if (rc(), typeof A === "object" && A !== null && typeof A.then === "function") {
                  var n = g2.ping;
                  A.then(n, n);
                } else {
                  g2.abortSet.delete(g2);
                  m.status = 4;
                  var p2 = g2.blockedBoundary, C = A;
                  Y(h, C);
                  p2 === null ? Gc(h, C) : (p2.pendingTasks--, p2.forceClientRender || (p2.forceClientRender = true, p2.parentFlushed && h.clientRenderedBoundaries.push(p2)));
                  h.allPendingTasks--;
                  if (h.allPendingTasks === 0) {
                    var G = h.onAllReady;
                    G();
                  }
                }
              } finally {
              }
            }
          }
          f.splice(0, e);
          a3.destination !== null && Rc(a3, a3.destination);
        } catch (A) {
          Y(a3, A), Gc(a3, A);
        } finally {
          yc = d, Ac.current = c2, c2 === zc && Q(b3);
        }
      }
    }
    function Sc(a3, b3, c2) {
      c2.parentFlushed = true;
      switch (c2.status) {
        case 0:
          var d = c2.id = a3.nextSegmentId++;
          a3 = a3.responseState;
          r(b3, Pa);
          r(b3, a3.placeholderPrefix);
          a3 = d.toString(16);
          r(b3, a3);
          return v(b3, Qa);
        case 1:
          c2.status = 2;
          var f = true;
          d = c2.chunks;
          var e = 0;
          c2 = c2.children;
          for (var g2 = 0; g2 < c2.length; g2++) {
            for (f = c2[g2]; e < f.index; e++)
              r(b3, d[e]);
            f = Tc(a3, b3, f);
          }
          for (; e < d.length - 1; e++)
            r(b3, d[e]);
          e < d.length && (f = v(b3, d[e]));
          return f;
        default:
          throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
      }
    }
    function Tc(a3, b3, c2) {
      var d = c2.boundary;
      if (d === null)
        return Sc(a3, b3, c2);
      d.parentFlushed = true;
      if (d.forceClientRender)
        v(b3, Ua), Sc(a3, b3, c2);
      else if (0 < d.pendingTasks) {
        d.rootSegmentID = a3.nextSegmentId++;
        0 < d.completedSegments.length && a3.partialBoundaries.push(d);
        var f = a3.responseState;
        var e = f.nextSuspenseID++;
        f = w(f.boundaryPrefix + e.toString(16));
        d = d.id = f;
        Wa(b3, a3.responseState, d);
        Sc(a3, b3, c2);
      } else if (d.byteSize > a3.progressiveChunkSize)
        d.rootSegmentID = a3.nextSegmentId++, a3.completedBoundaries.push(d), Wa(b3, a3.responseState, d.id), Sc(a3, b3, c2);
      else {
        v(b3, Ra);
        c2 = d.completedSegments;
        if (c2.length !== 1)
          throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
        Tc(a3, b3, c2[0]);
      }
      return v(b3, Va);
    }
    function Uc(a3, b3, c2) {
      rb2(b3, a3.responseState, c2.formatContext, c2.id);
      Tc(a3, b3, c2);
      return sb(b3, c2.formatContext);
    }
    function Vc(a3, b3, c2) {
      for (var d = c2.completedSegments, f = 0; f < d.length; f++)
        Wc(a3, b3, c2, d[f]);
      d.length = 0;
      a3 = a3.responseState;
      d = c2.id;
      c2 = c2.rootSegmentID;
      r(b3, a3.startInlineScript);
      a3.sentCompleteBoundaryFunction ? r(b3, yb) : (a3.sentCompleteBoundaryFunction = true, r(b3, xb));
      if (d === null)
        throw Error("An ID must have been assigned before we can complete the boundary.");
      c2 = c2.toString(16);
      r(b3, d);
      r(b3, zb);
      r(b3, a3.segmentPrefix);
      r(b3, c2);
      return v(b3, Ab);
    }
    function Wc(a3, b3, c2, d) {
      if (d.status === 2)
        return true;
      var f = d.id;
      if (f === -1) {
        if ((d.id = c2.rootSegmentID) === -1)
          throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        return Uc(a3, b3, d);
      }
      Uc(a3, b3, d);
      a3 = a3.responseState;
      r(b3, a3.startInlineScript);
      a3.sentCompleteSegmentFunction ? r(b3, ub) : (a3.sentCompleteSegmentFunction = true, r(b3, tb));
      r(b3, a3.segmentPrefix);
      f = f.toString(16);
      r(b3, f);
      r(b3, vb);
      r(b3, a3.placeholderPrefix);
      r(b3, f);
      return v(b3, wb);
    }
    function Rc(a3, b3) {
      k = new Uint8Array(2048);
      l = 0;
      q2 = true;
      try {
        var c2 = a3.completedRootSegment;
        if (c2 !== null && a3.pendingRootTasks === 0) {
          Tc(a3, b3, c2);
          a3.completedRootSegment = null;
          var d = a3.responseState.bootstrapChunks;
          for (c2 = 0; c2 < d.length - 1; c2++)
            r(b3, d[c2]);
          c2 < d.length && v(b3, d[c2]);
        }
        var f = a3.clientRenderedBoundaries, e;
        for (e = 0; e < f.length; e++) {
          d = b3;
          var g2 = a3.responseState, h = f[e].id;
          r(d, g2.startInlineScript);
          g2.sentClientRenderFunction ? r(d, Cb) : (g2.sentClientRenderFunction = true, r(d, Bb));
          if (h === null)
            throw Error("An ID must have been assigned before we can complete the boundary.");
          r(d, h);
          if (!v(d, Db)) {
            a3.destination = null;
            e++;
            f.splice(0, e);
            return;
          }
        }
        f.splice(0, e);
        var m = a3.completedBoundaries;
        for (e = 0; e < m.length; e++)
          if (!Vc(a3, b3, m[e])) {
            a3.destination = null;
            e++;
            m.splice(0, e);
            return;
          }
        m.splice(0, e);
        ca2(b3);
        k = new Uint8Array(2048);
        l = 0;
        q2 = true;
        var n = a3.partialBoundaries;
        for (e = 0; e < n.length; e++) {
          var p2 = n[e];
          a: {
            f = a3;
            g2 = b3;
            var C = p2.completedSegments;
            for (h = 0; h < C.length; h++)
              if (!Wc(f, g2, p2, C[h])) {
                h++;
                C.splice(0, h);
                var G = false;
                break a;
              }
            C.splice(0, h);
            G = true;
          }
          if (!G) {
            a3.destination = null;
            e++;
            n.splice(0, e);
            return;
          }
        }
        n.splice(0, e);
        var A = a3.completedBoundaries;
        for (e = 0; e < A.length; e++)
          if (!Vc(a3, b3, A[e])) {
            a3.destination = null;
            e++;
            A.splice(0, e);
            return;
          }
        A.splice(0, e);
      } finally {
        ca2(b3), typeof b3.flush === "function" && b3.flush(), a3.allPendingTasks === 0 && a3.pingedTasks.length === 0 && a3.clientRenderedBoundaries.length === 0 && a3.completedBoundaries.length === 0 && b3.end();
      }
    }
    function Xc(a3) {
      setImmediate(function() {
        return Dc(a3);
      });
    }
    function Yc(a3, b3) {
      if (a3.status === 1)
        a3.status = 2, b3.destroy(a3.fatalError);
      else if (a3.status !== 2 && a3.destination === null) {
        a3.destination = b3;
        try {
          Rc(a3, b3);
        } catch (c2) {
          Y(a3, c2), Gc(a3, c2);
        }
      }
    }
    function Zc(a3) {
      try {
        var b3 = a3.abortableTasks;
        b3.forEach(Qc, a3);
        b3.clear();
        a3.destination !== null && Rc(a3, a3.destination);
      } catch (c2) {
        Y(a3, c2), Gc(a3, c2);
      }
    }
    function $c(a3, b3) {
      return function() {
        return Yc(b3, a3);
      };
    }
    function ad(a3) {
      return function() {
        return Zc(a3);
      };
    }
    function bd(a3, b3) {
      var c2 = b3 ? b3.identifierPrefix : void 0, d = b3 ? b3.nonce : void 0, f = b3 ? b3.bootstrapScriptContent : void 0, e = b3 ? b3.bootstrapScripts : void 0;
      var g2 = b3 ? b3.bootstrapModules : void 0;
      c2 = c2 === void 0 ? "" : c2;
      d = d === void 0 ? pa : w('<script nonce="' + D(d) + '">');
      var h = [];
      f !== void 0 && h.push(d, ("" + f).replace(ua, va), qa);
      if (e !== void 0)
        for (f = 0; f < e.length; f++)
          h.push(ra, D(e[f]), ta);
      if (g2 !== void 0)
        for (e = 0; e < g2.length; e++)
          h.push(sa, D(g2[e]), ta);
      g2 = {
        bootstrapChunks: h,
        startInlineScript: d,
        placeholderPrefix: w(c2 + "P:"),
        segmentPrefix: w(c2 + "S:"),
        boundaryPrefix: c2 + "B:",
        idPrefix: c2,
        nextSuspenseID: 0,
        sentCompleteSegmentFunction: false,
        sentCompleteBoundaryFunction: false,
        sentClientRenderFunction: false
      };
      e = b3 ? b3.namespaceURI : void 0;
      e = E(e === "http://www.w3.org/2000/svg" ? 2 : e === "http://www.w3.org/1998/Math/MathML" ? 3 : 0, null);
      f = b3 ? b3.progressiveChunkSize : void 0;
      d = b3 ? b3.onError : void 0;
      h = b3 ? b3.onAllReady : void 0;
      var m = b3 ? b3.onShellReady : void 0, n = b3 ? b3.onShellError : void 0;
      b3 = [];
      c2 = /* @__PURE__ */ new Set();
      g2 = {
        destination: null,
        responseState: g2,
        progressiveChunkSize: f === void 0 ? 12800 : f,
        status: 0,
        fatalError: null,
        nextSegmentId: 0,
        allPendingTasks: 0,
        pendingRootTasks: 0,
        completedRootSegment: null,
        abortableTasks: c2,
        pingedTasks: b3,
        clientRenderedBoundaries: [],
        completedBoundaries: [],
        partialBoundaries: [],
        onError: d === void 0 ? Bc : d,
        onAllReady: h === void 0 ? X : h,
        onShellReady: m === void 0 ? X : m,
        onShellError: n === void 0 ? X : n,
        onFatalError: X
      };
      e = Fc(g2, 0, null, e);
      e.parentFlushed = true;
      a3 = Ec(g2, a3, null, e, c2, Wb, null, dc);
      b3.push(a3);
      return g2;
    }
    exports.renderToPipeableStream = function(a3, b3) {
      var c2 = bd(a3, b3), d = false;
      Xc(c2);
      return { pipe: function(a4) {
        if (d)
          throw Error("React currently only supports piping to one writable stream.");
        d = true;
        Yc(c2, a4);
        a4.on("drain", $c(a4, c2));
        a4.on("close", ad(c2));
        return a4;
      }, abort: function() {
        Zc(c2);
      } };
    };
    exports.version = "18.1.0";
  }
});

// node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js
var require_react_dom_server_legacy_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server-legacy.node.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React7 = require_react();
        var stream = require("stream");
        var ReactSharedInternals = React7.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn3(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error3(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack4 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack4 !== "") {
              format += "%s";
              args = args.concat([stack4]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function _inheritsLoose(subClass, superClass) {
          subClass.prototype = Object.create(superClass.prototype);
          subClass.prototype.constructor = subClass;
          subClass.__proto__ = superClass;
        }
        function scheduleWork(callback2) {
          callback2();
        }
        function beginWriting(destination) {
        }
        var prevWasCommentSegmenter = false;
        function writeChunk(destination, chunk) {
          writeChunkAndReturn(destination, chunk);
        }
        function writeChunkAndReturn(destination, chunk) {
          if (prevWasCommentSegmenter) {
            prevWasCommentSegmenter = false;
            if (chunk[0] !== "<") {
              destination.push("<!-- -->");
            }
          }
          if (chunk === "<!-- -->") {
            prevWasCommentSegmenter = true;
            return true;
          }
          return destination.push(chunk);
        }
        function completeWriting(destination) {
        }
        function close2(destination) {
          destination.push(null);
        }
        function stringToChunk(content3) {
          return content3;
        }
        function stringToPrecomputedChunk(content3) {
          return content3;
        }
        function closeWithError(destination, error4) {
          destination.destroy(error4);
        }
        function typeName(value12) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value12) {
          {
            try {
              testStringCoercion(value12);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value12) {
          return "" + value12;
        }
        function checkAttributeStringCoercion(value12, attributeName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value12, propName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkHtmlStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error3("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value12) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name15.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name15) {
          return properties.hasOwnProperty(name15) ? properties[name15] : null;
        }
        function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name15;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name15 = _ref[0], attributeName = _ref[1];
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop2) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop2)] = isUnitlessNumber[prop2];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName2, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error3("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error3("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName2, props) {
          if (tagName2.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName2) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName2, name15) {
          {
            if (hasOwnProperty2.call(warnedProperties, name15) && warnedProperties[name15]) {
              return true;
            }
            if (rARIACamel.test(name15)) {
              var ariaName = "aria-" + name15.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error3("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                warnedProperties[name15] = true;
                return true;
              }
              if (name15 !== correctName) {
                error3("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                warnedProperties[name15] = true;
                return true;
              }
            }
            if (rARIA.test(name15)) {
              var lowerCasedName = name15.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name15] = true;
                return false;
              }
              if (name15 !== standardName) {
                error3("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties[name15] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error3("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error3("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error3("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error3("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
              return true;
            }
            var lowerCasedName = name15.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error3("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name15)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error3("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name15)) {
                error3("Unknown event handler property `%s`. It will be ignored.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name15)) {
              if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                error3("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error3("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error3("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
              error3("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "number" && isNaN(value12)) {
              error3("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
              warnedProperties$1[name15] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name15);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name15) {
                error3("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (!isReserved && name15 !== lowerCasedName) {
              error3("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              if (value12) {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
              } else {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              warnedProperties$1[name15] = true;
              return false;
            }
            if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error3("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error3("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error3("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern, "ms-")));
          };
          var warnBadVendoredStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name15, value12) {
            if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
              return;
            }
            warnedStyleValues[value12] = true;
            error3(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name15, value12) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error3("`NaN` is an invalid value for the `%s` css style property.", name15);
          };
          var warnStyleValueIsInfinity = function(name15, value12) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error3("`Infinity` is an invalid value for the `%s` css style property.", name15);
          };
          warnValidStyle = function(name15, value12) {
            if (name15.indexOf("-") > -1) {
              warnHyphenatedStyleName(name15);
            } else if (badVendoredStyleNamePattern.test(name15)) {
              warnBadVendoredStyleName(name15);
            } else if (badStyleValueWithSemicolonPattern.test(value12)) {
              warnStyleValueWithSemicolon(name15, value12);
            }
            if (typeof value12 === "number") {
              if (isNaN(value12)) {
                warnStyleValueIsNaN(name15, value12);
              } else if (!isFinite(value12)) {
                warnStyleValueIsInfinity(name15, value12);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str2 = "" + string;
          var match4 = matchHtmlRegExp.exec(str2);
          if (!match4) {
            return str2;
          }
          var escape;
          var html3 = "";
          var index6;
          var lastIndex = 0;
          for (index6 = match4.index; index6 < str2.length; index6++) {
            switch (str2.charCodeAt(index6)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index6) {
              html3 += str2.substring(lastIndex, index6);
            }
            lastIndex = index6 + 1;
            html3 += escape;
          }
          return lastIndex !== index6 ? html3 + str2.substring(lastIndex, index6) : html3;
        }
        function escapeTextForBrowser(text6) {
          if (typeof text6 === "boolean" || typeof text6 === "number") {
            return "" + text6;
          }
          return escapeHtml(text6);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name15) {
          return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url2) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url2)) {
              didWarn = true;
              error3("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a3) {
          return isArrayImpl(a3);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match4, prefix2, s2, suffix) {
          return "" + prefix2 + (s2 === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i3 = 0; i3 < bootstrapScripts.length; i3++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i3])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id3 = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id3 += "H" + localId.toString(32);
          }
          return id3 + ":";
        }
        function encodeHTMLTextNode(text6) {
          return escapeTextForBrowser(text6);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target5, text6, responseState) {
          if (text6 === "") {
            return;
          }
          target5.push(stringToChunk(encodeHTMLTextNode(text6)), textSeparator);
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target5, responseState, style2) {
          if (typeof style2 !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style2) {
            if (!hasOwnProperty2.call(style2, styleName)) {
              continue;
            }
            var styleValue = style2[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty2.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target5.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target5.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target5.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target5, responseState, name15, value12) {
          switch (name15) {
            case "style": {
              pushStyle(target5, responseState, value12);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
            return;
          }
          var propertyInfo = getPropertyInfo(name15);
          if (propertyInfo !== null) {
            switch (typeof value12) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value12) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value12 === true) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value12 === false)
                  ;
                else {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value12)) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value12) && value12 >= 1) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value12, attributeName);
                  }
                  value12 = "" + value12;
                  sanitizeURL(value12);
                }
                target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name15)) {
            switch (typeof value12) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name15.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target5.push(attributeSeparator, stringToChunk(name15), attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target5, innerHTML, children2) {
          if (innerHTML != null) {
            if (children2 != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html3 = innerHTML.__html;
            if (html3 !== null && html3 !== void 0) {
              {
                checkHtmlStringCoercion(html3);
              }
              target5.push(stringToChunk("" + html3));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value12 = props[propName];
            if (value12 != null) {
              var array = isArray2(value12);
              if (props.multiple && !array) {
                error3("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error3("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target5, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error3("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target5.push(startChunkForTag("select"));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        function flattenOptionChildren(children2) {
          var content3 = "";
          React7.Children.forEach(children2, function(child) {
            if (child == null) {
              return;
            }
            content3 += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error3("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content3;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target5, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target5.push(startChunkForTag("option"));
          var children2 = null;
          var value12 = null;
          var selected2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "selected":
                  selected2 = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error3("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value12 = propValue;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value12 !== null) {
              {
                checkAttributeStringCoercion(value12, "value");
              }
              stringValue = "" + value12;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error3("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children2);
            }
            if (isArray2(selectedValue)) {
              for (var i3 = 0; i3 < selectedValue.length; i3++) {
                {
                  checkAttributeStringCoercion(selectedValue[i3], "value");
                }
                var v = "" + selectedValue[i3];
                if (v === stringValue) {
                  target5.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target5.push(selectedMarkerAttribute);
              }
            }
          } else if (selected2) {
            target5.push(selectedMarkerAttribute);
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        function pushInput(target5, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error3("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error3("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target5.push(startChunkForTag("input"));
          var value12 = null;
          var defaultValue4 = null;
          var checked2 = null;
          var defaultChecked2 = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked2 = propValue;
                  break;
                case "defaultValue":
                  defaultValue4 = propValue;
                  break;
                case "checked":
                  checked2 = propValue;
                  break;
                case "value":
                  value12 = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked2 !== null) {
            pushAttribute(target5, responseState, "checked", checked2);
          } else if (defaultChecked2 !== null) {
            pushAttribute(target5, responseState, "checked", defaultChecked2);
          }
          if (value12 !== null) {
            pushAttribute(target5, responseState, "value", value12);
          } else if (defaultValue4 !== null) {
            pushAttribute(target5, responseState, "value", defaultValue4);
          }
          target5.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target5, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error3("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target5.push(startChunkForTag("textarea"));
          var value12 = null;
          var defaultValue4 = null;
          var children2 = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "value":
                  value12 = propValue;
                  break;
                case "defaultValue":
                  defaultValue4 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value12 === null && defaultValue4 !== null) {
            value12 = defaultValue4;
          }
          target5.push(endOfStartTag);
          if (children2 != null) {
            {
              error3("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value12 != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children2)) {
              if (children2.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children2[0]);
              }
              value12 = "" + children2[0];
            }
            {
              checkHtmlStringCoercion(children2);
            }
            value12 = "" + children2;
          }
          if (typeof value12 === "string" && value12[0] === "\n") {
            target5.push(leadingNewline);
          }
          if (value12 !== null) {
            {
              checkAttributeStringCoercion(value12, "value");
            }
            target5.push(stringToChunk(encodeHTMLTextNode("" + value12)));
          }
          return null;
        }
        function pushSelfClosing(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target5, props, responseState) {
          target5.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          return null;
        }
        function pushStartGenericElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          if (typeof children2 === "string") {
            target5.push(stringToChunk(encodeHTMLTextNode(children2)));
            return null;
          }
          return children2;
        }
        function pushStartCustomElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target5, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target5.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          if (innerHTML != null) {
            if (children2 != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html3 = innerHTML.__html;
            if (html3 !== null && html3 !== void 0) {
              if (typeof html3 === "string" && html3.length > 0 && html3[0] === "\n") {
                target5.push(leadingNewline, stringToChunk(html3));
              } else {
                {
                  checkHtmlStringCoercion(html3);
                }
                target5.push(stringToChunk("" + html3));
              }
            }
          }
          if (typeof children2 === "string" && children2[0] === "\n") {
            target5.push(leadingNewline);
          }
          return children2;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target5, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error3("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error3("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target5, props, responseState);
            case "option":
              return pushStartOption(target5, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target5, props, responseState);
            case "input":
              return pushInput(target5, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target5, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target5, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target5, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target5, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target5.push(DOCTYPE);
              }
              return pushStartGenericElement(target5, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target5, props, type, responseState);
              } else {
                return pushStartCustomElement(target5, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target5, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target5.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i3 = 0;
          for (; i3 < bootstrapChunks.length - 1; i3++) {
            writeChunk(destination, bootstrapChunks[i3]);
          }
          if (i3 < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i3]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder22 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id3) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id3.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder22);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id3) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id3 === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id3);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id3) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(a){if(a=document.getElementById(a))a=a.previousSibling,a.data="$!",a._reactRetry&&a._reactRetry()}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript2 = stringToPrecomputedChunk('")<\/script>');
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        function createResponseState$1(generateStaticMarkup, identifierPrefix) {
          var responseState = createResponseState(identifierPrefix, void 0);
          return {
            bootstrapChunks: responseState.bootstrapChunks,
            startInlineScript: responseState.startInlineScript,
            placeholderPrefix: responseState.placeholderPrefix,
            segmentPrefix: responseState.segmentPrefix,
            boundaryPrefix: responseState.boundaryPrefix,
            idPrefix: responseState.idPrefix,
            nextSuspenseID: responseState.nextSuspenseID,
            sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
            sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
            sentClientRenderFunction: responseState.sentClientRenderFunction,
            generateStaticMarkup
          };
        }
        function createRootFormatContext() {
          return {
            insertionMode: HTML_MODE,
            selectedValue: null
          };
        }
        function pushTextInstance$1(target5, text6, responseState) {
          if (responseState.generateStaticMarkup) {
            target5.push(stringToChunk(escapeTextForBrowser(text6)));
          } else {
            pushTextInstance(target5, text6);
          }
        }
        function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartCompletedSuspenseBoundary(destination);
        }
        function writeStartClientRenderedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeStartClientRenderedSuspenseBoundary(destination);
        }
        function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndCompletedSuspenseBoundary(destination);
        }
        function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
          if (responseState.generateStaticMarkup) {
            return true;
          }
          return writeEndClientRenderedSuspenseBoundary(destination);
        }
        var assign2 = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName2 = outerType.displayName;
          if (displayName2) {
            return displayName2;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error3("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider2 = type;
                return getContextName(provider2._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init3(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error3("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name15, source3, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match4 = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match4 && match4[1] || "";
              }
            }
            return "\n" + prefix + name15;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name15 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source3, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack4 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack4);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location2, componentName, element3) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error3("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error3("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name15 = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name15);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error3("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name15 = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name15);
            }
            return assign2({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue2 = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue2 = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue2;
            context._currentValue2 = nextValue;
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error3("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error3("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var _value = prevSnapshot.parentValue;
            if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue2 = _value;
            }
            {
              if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                error3("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer2 = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value12 = context._currentValue2;
          return value12;
        }
        function get3(key) {
          return key._reactInternals;
        }
        function set3(key, value12) {
          key._reactInternals = value12;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback2, callerName) {
            if (callback2 === null || typeof callback2 === "function") {
              return;
            }
            var key = callerName + "_" + callback2;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error3("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error3("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error3("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback2) {
            var internals = get3(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback2) {
            var internals = get3(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback2 !== void 0 && callback2 !== null) {
                warnOnInvalidCallback(callback2, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback2) {
            var internals = get3(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error3("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error3("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error3("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name15 = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error3("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
              } else {
                error3("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error3("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error3("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
            }
            if (instance.propTypes) {
              error3("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
            }
            if (instance.contextType) {
              error3("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
            }
            {
              if (instance.contextTypes) {
                error3("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error3("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error3("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error3("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error3("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error3("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error3("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error3("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error3("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
            }
            if (instance.defaultProps) {
              error3("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error3("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error3("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error3("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error3("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error3("%s.state: must be set to an object or null", name15);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error3("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error3("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i3 = oldReplace ? 1 : 0; i3 < oldQueue.length; i3++) {
                var partial = oldQueue[i3];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign2({}, nextState, partialState);
                  } else {
                    assign2(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set3(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error3("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id3.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index6) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot2 = index6 + 1;
          var length8 = getBitLength(totalChildren) + baseLength;
          if (length8 > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot2 << restOfBaseLength;
            var id3 = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id3,
              overflow
            };
          } else {
            var newBits = slot2 << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length8 | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number2) {
          return 32 - clz32(number2);
        }
        function getLeadingBit(id3) {
          return 1 << getBitLength(id3) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log5 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log5(asUint) / LN2 | 0) | 0;
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error3("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error3("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error3("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
            if (objectIs(nextDeps[i3], prevDeps[i3])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component, props, children2, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children2 = Component(props, refOrContext);
          }
          resetHooksState();
          return children2;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error3("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext14(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state3, action2) {
          return typeof action2 === "function" ? action2(state3) : action2;
        }
        function useState4(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer2(basicStateReducer, initialState);
        }
        function useReducer2(reducer, initialArg, init3) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action2 = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action2);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init3 !== void 0 ? init3(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo6(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef9(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect3(create6, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error3("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action2) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action: action2,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback3(callback2, deps) {
          return useMemo6(function() {
            return callback2;
          }, deps);
        }
        function useMutableSource(source3, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source3._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value12) {
          resolveCurrentlyRenderingComponent();
          return value12;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId3() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext: useContext14,
          useMemo: useMemo6,
          useReducer: useReducer2,
          useRef: useRef9,
          useState: useState4,
          useInsertionEffect: noop,
          useLayoutEffect: useLayoutEffect3,
          useCallback: useCallback3,
          useImperativeHandle: noop,
          useEffect: noop,
          useDebugValue: noop,
          useDeferredValue,
          useTransition,
          useId: useId3,
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info2 = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info2 += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info2 += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info2 += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info2;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error4) {
          console["error"](error4);
        }
        function noop$1() {
        }
        function createRequest(children2, responseState, rootFormatContext, progressiveChunkSize, onError4, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError4 === void 0 ? defaultErrorHandler : onError4,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(request, 0, null, rootFormatContext);
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children2, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index6, boundary, formatContext) {
          return {
            status: PENDING,
            id: -1,
            index: index6,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error3("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        function logRecoverableError(request, error4) {
          var onError4 = request.onError;
          onError4(error4);
        }
        function fatalError(request, error4) {
          var onShellError = request.onShellError;
          onShellError(error4);
          var onFatalError = request.onFatalError;
          onFatalError(error4);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error4);
          } else {
            request.status = CLOSING;
            request.fatalError = error4;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content3 = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext);
          parentSegment.children.push(boundarySegment);
          var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext);
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content3);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error4) {
            contentRootSegment.status = ERRORED;
            logRecoverableError(request, error4);
            newBoundary.forceClientRender = true;
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children2 = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children2);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error3("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error3("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value12 = renderWithHooks(request, task, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value12, Component, props, legacyContext);
            finishClassComponent(request, task, value12, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index6 = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
              try {
                renderNodeDestructive(request, task, value12);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value12);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error3("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error3("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error3("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign2({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children2 = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index6 = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
            try {
              renderNodeDestructive(request, task, children2);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children2);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error3("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error3("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value12 = props.value;
          var children2 = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value12);
          renderNodeDestructive(request, task, children2);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error3("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init3 = lazyComponent._init;
          var Component = init3(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info2 = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error3("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element3 = node;
                var type = element3.type;
                var props = element3.props;
                var ref = element3.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init3 = lazyNode._init;
                var resolvedNode = init3(payload);
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray2(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator2 = iteratorFn.call(node);
              if (iterator2) {
                var step3 = iterator2.next();
                if (!step3.done) {
                  var children2 = [];
                  do {
                    children2.push(step3.value);
                    step3 = iterator2.next();
                  } while (!step3.done);
                  renderChildrenArray(request, task, children2);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState);
            return;
          }
          if (typeof node === "number") {
            pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState);
            return;
          }
          {
            if (typeof node === "function") {
              error3("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children2) {
          var totalChildren = children2.length;
          for (var i3 = 0; i3 < totalChildren; i3++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i3);
            try {
              renderNode(request, task, children2[i3]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext);
          segment.children.push(newSegment);
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error4) {
          logRecoverableError(request, error4);
          if (boundary === null) {
            fatalError(request, error4);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close2(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(abortTask, request);
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i3;
            for (i3 = 0; i3 < pingedTasks.length; i3++) {
              var task = pingedTasks[i3];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i3);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children2 = segment.children;
              for (var childIdx = 0; childIdx < children2.length; childIdx++) {
                var nextChild = children2[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id3 = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id3);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i3 = 0;
          for (; i3 < completedSegments.length; i3++) {
            var segment = completedSegments[i3];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i3 = 0;
          for (; i3 < completedSegments.length; i3++) {
            var segment = completedSegments[i3];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i3++;
              completedSegments.splice(0, i3);
              return false;
            }
          }
          completedSegments.splice(0, i3);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i3;
            for (i3 = 0; i3 < clientRenderedBoundaries.length; i3++) {
              var boundary = clientRenderedBoundaries[i3];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i3++;
                clientRenderedBoundaries.splice(0, i3);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i3);
            var completedBoundaries = request.completedBoundaries;
            for (i3 = 0; i3 < completedBoundaries.length; i3++) {
              var _boundary = completedBoundaries[i3];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i3++;
                completedBoundaries.splice(0, i3);
                return;
              }
            }
            completedBoundaries.splice(0, i3);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i3 = 0; i3 < partialBoundaries.length; i3++) {
              var _boundary2 = partialBoundaries[i3];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i3++;
                partialBoundaries.splice(0, i3);
                return;
              }
            }
            partialBoundaries.splice(0, i3);
            var largeBoundaries = request.completedBoundaries;
            for (i3 = 0; i3 < largeBoundaries.length; i3++) {
              var _boundary3 = largeBoundaries[i3];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i3++;
                largeBoundaries.splice(0, i3);
                return;
              }
            }
            largeBoundaries.splice(0, i3);
          } finally {
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error3("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close2(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          }
        }
        function abort(request) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(abortTask, request);
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          }
        }
        var ReactVersion = "18.1.0";
        function onError3() {
        }
        function renderToStringImpl(children2, options2, generateStaticMarkup) {
          var didFatal = false;
          var fatalError2 = null;
          var result = "";
          var destination = {
            push: function(chunk) {
              if (chunk !== null) {
                result += chunk;
              }
              return true;
            },
            destroy: function(error4) {
              didFatal = true;
              fatalError2 = error4;
            }
          };
          var readyToStream = false;
          function onShellReady() {
            readyToStream = true;
          }
          var request = createRequest(children2, createResponseState$1(generateStaticMarkup, options2 ? options2.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError3, void 0, onShellReady, void 0, void 0);
          startWork(request);
          abort(request);
          startFlowing(request, destination);
          if (didFatal) {
            throw fatalError2;
          }
          if (!readyToStream) {
            throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          }
          return result;
        }
        function renderToString2(children2, options2) {
          return renderToStringImpl(children2, options2, false);
        }
        function renderToStaticMarkup2(children2, options2) {
          return renderToStringImpl(children2, options2, true);
        }
        var ReactMarkupReadableStream = /* @__PURE__ */ function(_Readable) {
          _inheritsLoose(ReactMarkupReadableStream2, _Readable);
          function ReactMarkupReadableStream2() {
            var _this;
            _this = _Readable.call(this, {}) || this;
            _this.request = null;
            _this.startedFlowing = false;
            return _this;
          }
          var _proto = ReactMarkupReadableStream2.prototype;
          _proto._destroy = function _destroy(err, callback2) {
            abort(this.request);
            callback2(err);
          };
          _proto._read = function _read2(size8) {
            if (this.startedFlowing) {
              startFlowing(this.request, this);
            }
          };
          return ReactMarkupReadableStream2;
        }(stream.Readable);
        function onError$1() {
        }
        function renderToNodeStreamImpl(children2, options2, generateStaticMarkup) {
          function onAllReady() {
            destination.startedFlowing = true;
            startFlowing(request, destination);
          }
          var destination = new ReactMarkupReadableStream();
          var request = createRequest(children2, createResponseState$1(false, options2 ? options2.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError$1, onAllReady, void 0, void 0);
          destination.request = request;
          startWork(request);
          return destination;
        }
        function renderToNodeStream(children2, options2) {
          {
            error3("renderToNodeStream is deprecated. Use renderToPipeableStream instead.");
          }
          return renderToNodeStreamImpl(children2, options2);
        }
        function renderToStaticNodeStream(children2, options2) {
          return renderToNodeStreamImpl(children2, options2);
        }
        exports.renderToNodeStream = renderToNodeStream;
        exports.renderToStaticMarkup = renderToStaticMarkup2;
        exports.renderToStaticNodeStream = renderToStaticNodeStream;
        exports.renderToString = renderToString2;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/cjs/react-dom-server.node.development.js
var require_react_dom_server_node_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom-server.node.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var React7 = require_react();
        var util = require("util");
        var ReactVersion = "18.1.0";
        var ReactSharedInternals = React7.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn3(format) {
          {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error3(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack4 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack4 !== "") {
              format += "%s";
              args = args.concat([stack4]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        function scheduleWork(callback2) {
          setImmediate(callback2);
        }
        function flushBuffered(destination) {
          if (typeof destination.flush === "function") {
            destination.flush();
          }
        }
        var VIEW_SIZE = 2048;
        var currentView = null;
        var writtenBytes = 0;
        var destinationHasCapacity = true;
        function beginWriting(destination) {
          currentView = new Uint8Array(VIEW_SIZE);
          writtenBytes = 0;
          destinationHasCapacity = true;
        }
        function writeStringChunk(destination, stringChunk) {
          if (stringChunk.length === 0) {
            return;
          }
          if (stringChunk.length * 3 > VIEW_SIZE) {
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, textEncoder.encode(stringChunk));
            return;
          }
          var target5 = currentView;
          if (writtenBytes > 0) {
            target5 = currentView.subarray(writtenBytes);
          }
          var _textEncoder$encodeIn = textEncoder.encodeInto(stringChunk, target5), read8 = _textEncoder$encodeIn.read, written = _textEncoder$encodeIn.written;
          writtenBytes += written;
          if (read8 < stringChunk.length) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = textEncoder.encodeInto(stringChunk.slice(read8), currentView).written;
          }
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeViewChunk(destination, chunk) {
          if (chunk.byteLength === 0) {
            return;
          }
          if (chunk.byteLength > VIEW_SIZE) {
            if (writtenBytes > 0) {
              writeToDestination(destination, currentView.subarray(0, writtenBytes));
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            writeToDestination(destination, chunk);
            return;
          }
          var bytesToWrite = chunk;
          var allowableBytes = currentView.length - writtenBytes;
          if (allowableBytes < bytesToWrite.byteLength) {
            if (allowableBytes === 0) {
              writeToDestination(destination, currentView);
            } else {
              currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
              writtenBytes += allowableBytes;
              writeToDestination(destination, currentView);
              bytesToWrite = bytesToWrite.subarray(allowableBytes);
            }
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          currentView.set(bytesToWrite, writtenBytes);
          writtenBytes += bytesToWrite.byteLength;
          if (writtenBytes === VIEW_SIZE) {
            writeToDestination(destination, currentView);
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
        }
        function writeChunk(destination, chunk) {
          if (typeof chunk === "string") {
            writeStringChunk(destination, chunk);
          } else {
            writeViewChunk(destination, chunk);
          }
        }
        function writeToDestination(destination, view) {
          var currentHasCapacity = destination.write(view);
          destinationHasCapacity = destinationHasCapacity && currentHasCapacity;
        }
        function writeChunkAndReturn(destination, chunk) {
          writeChunk(destination, chunk);
          return destinationHasCapacity;
        }
        function completeWriting(destination) {
          if (currentView && writtenBytes > 0) {
            destination.write(currentView.subarray(0, writtenBytes));
          }
          currentView = null;
          writtenBytes = 0;
          destinationHasCapacity = true;
        }
        function close2(destination) {
          destination.end();
        }
        var textEncoder = new util.TextEncoder();
        function stringToChunk(content3) {
          return content3;
        }
        function stringToPrecomputedChunk(content3) {
          return textEncoder.encode(content3);
        }
        function closeWithError(destination, error4) {
          destination.destroy(error4);
        }
        function typeName(value12) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value12) {
          {
            try {
              testStringCoercion(value12);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value12) {
          return "" + value12;
        }
        function checkAttributeStringCoercion(value12, attributeName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value12, propName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkHtmlStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error3("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value12) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name15.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function getPropertyInfo(name15) {
          return properties.hasOwnProperty(name15) ? properties[name15] : null;
        }
        function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name15;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name15 = _ref[0], attributeName = _ref[1];
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop2) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop2)] = isUnitlessNumber[prop2];
          });
        });
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName2, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error3("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error3("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCustomComponent(tagName2, props) {
          if (tagName2.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName2) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName2, name15) {
          {
            if (hasOwnProperty2.call(warnedProperties, name15) && warnedProperties[name15]) {
              return true;
            }
            if (rARIACamel.test(name15)) {
              var ariaName = "aria-" + name15.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error3("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                warnedProperties[name15] = true;
                return true;
              }
              if (name15 !== correctName) {
                error3("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                warnedProperties[name15] = true;
                return true;
              }
            }
            if (rARIA.test(name15)) {
              var lowerCasedName = name15.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name15] = true;
                return false;
              }
              if (name15 !== standardName) {
                error3("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties[name15] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error3("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error3("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error3("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error3("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
              return true;
            }
            var lowerCasedName = name15.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error3("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies.hasOwnProperty(name15)) {
                return true;
              }
              var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
              if (registrationName != null) {
                error3("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name15)) {
                error3("Unknown event handler property `%s`. It will be ignored.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name15)) {
              if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                error3("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error3("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error3("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
              error3("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "number" && isNaN(value12)) {
              error3("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
              warnedProperties$1[name15] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name15);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name15) {
                error3("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (!isReserved && name15 !== lowerCasedName) {
              error3("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              if (value12) {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
              } else {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              warnedProperties$1[name15] = true;
              return false;
            }
            if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error3("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error3("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error3("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern, "ms-")));
          };
          var warnBadVendoredStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name15, value12) {
            if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
              return;
            }
            warnedStyleValues[value12] = true;
            error3(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name15, value12) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error3("`NaN` is an invalid value for the `%s` css style property.", name15);
          };
          var warnStyleValueIsInfinity = function(name15, value12) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error3("`Infinity` is an invalid value for the `%s` css style property.", name15);
          };
          warnValidStyle = function(name15, value12) {
            if (name15.indexOf("-") > -1) {
              warnHyphenatedStyleName(name15);
            } else if (badVendoredStyleNamePattern.test(name15)) {
              warnBadVendoredStyleName(name15);
            } else if (badStyleValueWithSemicolonPattern.test(value12)) {
              warnStyleValueWithSemicolon(name15, value12);
            }
            if (typeof value12 === "number") {
              if (isNaN(value12)) {
                warnStyleValueIsNaN(name15, value12);
              } else if (!isFinite(value12)) {
                warnStyleValueIsInfinity(name15, value12);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        var matchHtmlRegExp = /["'&<>]/;
        function escapeHtml(string) {
          {
            checkHtmlStringCoercion(string);
          }
          var str2 = "" + string;
          var match4 = matchHtmlRegExp.exec(str2);
          if (!match4) {
            return str2;
          }
          var escape;
          var html3 = "";
          var index6;
          var lastIndex = 0;
          for (index6 = match4.index; index6 < str2.length; index6++) {
            switch (str2.charCodeAt(index6)) {
              case 34:
                escape = "&quot;";
                break;
              case 38:
                escape = "&amp;";
                break;
              case 39:
                escape = "&#x27;";
                break;
              case 60:
                escape = "&lt;";
                break;
              case 62:
                escape = "&gt;";
                break;
              default:
                continue;
            }
            if (lastIndex !== index6) {
              html3 += str2.substring(lastIndex, index6);
            }
            lastIndex = index6 + 1;
            html3 += escape;
          }
          return lastIndex !== index6 ? html3 + str2.substring(lastIndex, index6) : html3;
        }
        function escapeTextForBrowser(text6) {
          if (typeof text6 === "boolean" || typeof text6 === "number") {
            return "" + text6;
          }
          return escapeHtml(text6);
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern$1 = /^ms-/;
        function hyphenateStyleName(name15) {
          return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
        }
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url2) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url2)) {
              didWarn = true;
              error3("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
            }
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a3) {
          return isArrayImpl(a3);
        }
        var startInlineScript = stringToPrecomputedChunk("<script>");
        var endInlineScript = stringToPrecomputedChunk("<\/script>");
        var startScriptSrc = stringToPrecomputedChunk('<script src="');
        var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
        var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
        function escapeBootstrapScriptContent(scriptText) {
          {
            checkHtmlStringCoercion(scriptText);
          }
          return ("" + scriptText).replace(scriptRegex, scriptReplacer);
        }
        var scriptRegex = /(<\/|<)(s)(cript)/gi;
        var scriptReplacer = function(match4, prefix2, s2, suffix) {
          return "" + prefix2 + (s2 === "s" ? "\\u0073" : "\\u0053") + suffix;
        };
        function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
          var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
          var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
          var bootstrapChunks = [];
          if (bootstrapScriptContent !== void 0) {
            bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
          }
          if (bootstrapScripts !== void 0) {
            for (var i3 = 0; i3 < bootstrapScripts.length; i3++) {
              bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i3])), endAsyncScript);
            }
          }
          if (bootstrapModules !== void 0) {
            for (var _i = 0; _i < bootstrapModules.length; _i++) {
              bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
            }
          }
          return {
            bootstrapChunks,
            startInlineScript: inlineScriptWithNonce,
            placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
            segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
            boundaryPrefix: idPrefix + "B:",
            idPrefix,
            nextSuspenseID: 0,
            sentCompleteSegmentFunction: false,
            sentCompleteBoundaryFunction: false,
            sentClientRenderFunction: false
          };
        }
        var ROOT_HTML_MODE = 0;
        var HTML_MODE = 1;
        var SVG_MODE = 2;
        var MATHML_MODE = 3;
        var HTML_TABLE_MODE = 4;
        var HTML_TABLE_BODY_MODE = 5;
        var HTML_TABLE_ROW_MODE = 6;
        var HTML_COLGROUP_MODE = 7;
        function createFormatContext(insertionMode, selectedValue) {
          return {
            insertionMode,
            selectedValue
          };
        }
        function createRootFormatContext(namespaceURI) {
          var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
          return createFormatContext(insertionMode, null);
        }
        function getChildFormatContext(parentContext, type, props) {
          switch (type) {
            case "select":
              return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
            case "svg":
              return createFormatContext(SVG_MODE, null);
            case "math":
              return createFormatContext(MATHML_MODE, null);
            case "foreignObject":
              return createFormatContext(HTML_MODE, null);
            case "table":
              return createFormatContext(HTML_TABLE_MODE, null);
            case "thead":
            case "tbody":
            case "tfoot":
              return createFormatContext(HTML_TABLE_BODY_MODE, null);
            case "colgroup":
              return createFormatContext(HTML_COLGROUP_MODE, null);
            case "tr":
              return createFormatContext(HTML_TABLE_ROW_MODE, null);
          }
          if (parentContext.insertionMode >= HTML_TABLE_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          if (parentContext.insertionMode === ROOT_HTML_MODE) {
            return createFormatContext(HTML_MODE, null);
          }
          return parentContext;
        }
        var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
        function assignSuspenseBoundaryID(responseState) {
          var generatedID = responseState.nextSuspenseID++;
          return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
        }
        function makeId(responseState, treeId, localId) {
          var idPrefix = responseState.idPrefix;
          var id3 = ":" + idPrefix + "R" + treeId;
          if (localId > 0) {
            id3 += "H" + localId.toString(32);
          }
          return id3 + ":";
        }
        function encodeHTMLTextNode(text6) {
          return escapeTextForBrowser(text6);
        }
        var textSeparator = stringToPrecomputedChunk("<!-- -->");
        function pushTextInstance(target5, text6, responseState) {
          if (text6 === "") {
            return;
          }
          target5.push(stringToChunk(encodeHTMLTextNode(text6)), textSeparator);
        }
        var styleNameCache = /* @__PURE__ */ new Map();
        function processStyleName(styleName) {
          var chunk = styleNameCache.get(styleName);
          if (chunk !== void 0) {
            return chunk;
          }
          var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName(styleName)));
          styleNameCache.set(styleName, result);
          return result;
        }
        var styleAttributeStart = stringToPrecomputedChunk(' style="');
        var styleAssign = stringToPrecomputedChunk(":");
        var styleSeparator = stringToPrecomputedChunk(";");
        function pushStyle(target5, responseState, style2) {
          if (typeof style2 !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
          var isFirst = true;
          for (var styleName in style2) {
            if (!hasOwnProperty2.call(style2, styleName)) {
              continue;
            }
            var styleValue = style2[styleName];
            if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
              continue;
            }
            var nameChunk = void 0;
            var valueChunk = void 0;
            var isCustomProperty = styleName.indexOf("--") === 0;
            if (isCustomProperty) {
              nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              {
                checkCSSPropertyStringCoercion(styleValue, styleName);
              }
              valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              {
                warnValidStyle$1(styleName, styleValue);
              }
              nameChunk = processStyleName(styleName);
              if (typeof styleValue === "number") {
                if (styleValue !== 0 && !hasOwnProperty2.call(isUnitlessNumber, styleName)) {
                  valueChunk = stringToChunk(styleValue + "px");
                } else {
                  valueChunk = stringToChunk("" + styleValue);
                }
              } else {
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              }
            }
            if (isFirst) {
              isFirst = false;
              target5.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
            } else {
              target5.push(styleSeparator, nameChunk, styleAssign, valueChunk);
            }
          }
          if (!isFirst) {
            target5.push(attributeEnd);
          }
        }
        var attributeSeparator = stringToPrecomputedChunk(" ");
        var attributeAssign = stringToPrecomputedChunk('="');
        var attributeEnd = stringToPrecomputedChunk('"');
        var attributeEmptyString = stringToPrecomputedChunk('=""');
        function pushAttribute(target5, responseState, name15, value12) {
          switch (name15) {
            case "style": {
              pushStyle(target5, responseState, value12);
              return;
            }
            case "defaultValue":
            case "defaultChecked":
            case "innerHTML":
            case "suppressContentEditableWarning":
            case "suppressHydrationWarning":
              return;
          }
          if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
            return;
          }
          var propertyInfo = getPropertyInfo(name15);
          if (propertyInfo !== null) {
            switch (typeof value12) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                if (!propertyInfo.acceptsBooleans) {
                  return;
                }
              }
            }
            var attributeName = propertyInfo.attributeName;
            var attributeNameChunk = stringToChunk(attributeName);
            switch (propertyInfo.type) {
              case BOOLEAN:
                if (value12) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                }
                return;
              case OVERLOADED_BOOLEAN:
                if (value12 === true) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                } else if (value12 === false)
                  ;
                else {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                return;
              case NUMERIC:
                if (!isNaN(value12)) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                break;
              case POSITIVE_NUMERIC:
                if (!isNaN(value12) && value12 >= 1) {
                  target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                }
                break;
              default:
                if (propertyInfo.sanitizeURL) {
                  {
                    checkAttributeStringCoercion(value12, attributeName);
                  }
                  value12 = "" + value12;
                  sanitizeURL(value12);
                }
                target5.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
            }
          } else if (isAttributeNameSafe(name15)) {
            switch (typeof value12) {
              case "function":
              case "symbol":
                return;
              case "boolean": {
                var prefix2 = name15.toLowerCase().slice(0, 5);
                if (prefix2 !== "data-" && prefix2 !== "aria-") {
                  return;
                }
              }
            }
            target5.push(attributeSeparator, stringToChunk(name15), attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
          }
        }
        var endOfStartTag = stringToPrecomputedChunk(">");
        var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
        function pushInnerHTML(target5, innerHTML, children2) {
          if (innerHTML != null) {
            if (children2 != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html3 = innerHTML.__html;
            if (html3 !== null && html3 !== void 0) {
              {
                checkHtmlStringCoercion(html3);
              }
              target5.push(stringToChunk("" + html3));
            }
          }
        }
        var didWarnDefaultInputValue = false;
        var didWarnDefaultChecked = false;
        var didWarnDefaultSelectValue = false;
        var didWarnDefaultTextareaValue = false;
        var didWarnInvalidOptionChildren = false;
        var didWarnInvalidOptionInnerHTML = false;
        var didWarnSelectedSetOnOption = false;
        function checkSelectProp(props, propName) {
          {
            var value12 = props[propName];
            if (value12 != null) {
              var array = isArray2(value12);
              if (props.multiple && !array) {
                error3("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
              } else if (!props.multiple && array) {
                error3("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
              }
            }
          }
        }
        function pushStartSelect(target5, props, responseState) {
          {
            checkControlledValueProps("select", props);
            checkSelectProp(props, "value");
            checkSelectProp(props, "defaultValue");
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
              error3("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultSelectValue = true;
            }
          }
          target5.push(startChunkForTag("select"));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "defaultValue":
                case "value":
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        function flattenOptionChildren(children2) {
          var content3 = "";
          React7.Children.forEach(children2, function(child) {
            if (child == null) {
              return;
            }
            content3 += child;
            {
              if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                didWarnInvalidOptionChildren = true;
                error3("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
              }
            }
          });
          return content3;
        }
        var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
        function pushStartOption(target5, props, responseState, formatContext) {
          var selectedValue = formatContext.selectedValue;
          target5.push(startChunkForTag("option"));
          var children2 = null;
          var value12 = null;
          var selected2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "selected":
                  selected2 = propValue;
                  {
                    if (!didWarnSelectedSetOnOption) {
                      error3("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                      didWarnSelectedSetOnOption = true;
                    }
                  }
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "value":
                  value12 = propValue;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (selectedValue != null) {
            var stringValue;
            if (value12 !== null) {
              {
                checkAttributeStringCoercion(value12, "value");
              }
              stringValue = "" + value12;
            } else {
              {
                if (innerHTML !== null) {
                  if (!didWarnInvalidOptionInnerHTML) {
                    didWarnInvalidOptionInnerHTML = true;
                    error3("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              stringValue = flattenOptionChildren(children2);
            }
            if (isArray2(selectedValue)) {
              for (var i3 = 0; i3 < selectedValue.length; i3++) {
                {
                  checkAttributeStringCoercion(selectedValue[i3], "value");
                }
                var v = "" + selectedValue[i3];
                if (v === stringValue) {
                  target5.push(selectedMarkerAttribute);
                  break;
                }
              }
            } else {
              {
                checkAttributeStringCoercion(selectedValue, "select.value");
              }
              if ("" + selectedValue === stringValue) {
                target5.push(selectedMarkerAttribute);
              }
            }
          } else if (selected2) {
            target5.push(selectedMarkerAttribute);
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        function pushInput(target5, props, responseState) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
              error3("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
              error3("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
              didWarnDefaultInputValue = true;
            }
          }
          target5.push(startChunkForTag("input"));
          var value12 = null;
          var defaultValue4 = null;
          var checked2 = null;
          var defaultChecked2 = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  defaultChecked2 = propValue;
                  break;
                case "defaultValue":
                  defaultValue4 = propValue;
                  break;
                case "checked":
                  checked2 = propValue;
                  break;
                case "value":
                  value12 = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (checked2 !== null) {
            pushAttribute(target5, responseState, "checked", checked2);
          } else if (defaultChecked2 !== null) {
            pushAttribute(target5, responseState, "checked", defaultChecked2);
          }
          if (value12 !== null) {
            pushAttribute(target5, responseState, "value", value12);
          } else if (defaultValue4 !== null) {
            pushAttribute(target5, responseState, "value", defaultValue4);
          }
          target5.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartTextArea(target5, props, responseState) {
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
              error3("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnDefaultTextareaValue = true;
            }
          }
          target5.push(startChunkForTag("textarea"));
          var value12 = null;
          var defaultValue4 = null;
          var children2 = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "value":
                  value12 = propValue;
                  break;
                case "defaultValue":
                  defaultValue4 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          if (value12 === null && defaultValue4 !== null) {
            value12 = defaultValue4;
          }
          target5.push(endOfStartTag);
          if (children2 != null) {
            {
              error3("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            if (value12 != null) {
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
            }
            if (isArray2(children2)) {
              if (children2.length > 1) {
                throw new Error("<textarea> can only have at most one child.");
              }
              {
                checkHtmlStringCoercion(children2[0]);
              }
              value12 = "" + children2[0];
            }
            {
              checkHtmlStringCoercion(children2);
            }
            value12 = "" + children2;
          }
          if (typeof value12 === "string" && value12[0] === "\n") {
            target5.push(leadingNewline);
          }
          if (value12 !== null) {
            {
              checkAttributeStringCoercion(value12, "value");
            }
            target5.push(stringToChunk(encodeHTMLTextNode("" + value12)));
          }
          return null;
        }
        function pushSelfClosing(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error(tag + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTagSelfClosing);
          return null;
        }
        function pushStartMenuItem(target5, props, responseState) {
          target5.push(startChunkForTag("menuitem"));
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          return null;
        }
        function pushStartGenericElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          if (typeof children2 === "string") {
            target5.push(stringToChunk(encodeHTMLTextNode(children2)));
            return null;
          }
          return children2;
        }
        function pushStartCustomElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target5, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                    target5.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                  }
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          pushInnerHTML(target5, innerHTML, children2);
          return children2;
        }
        var leadingNewline = stringToPrecomputedChunk("\n");
        function pushStartPreformattedElement(target5, props, tag, responseState) {
          target5.push(startChunkForTag(tag));
          var children2 = null;
          var innerHTML = null;
          for (var propKey in props) {
            if (hasOwnProperty2.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue == null) {
                continue;
              }
              switch (propKey) {
                case "children":
                  children2 = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target5, responseState, propKey, propValue);
                  break;
              }
            }
          }
          target5.push(endOfStartTag);
          if (innerHTML != null) {
            if (children2 != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            var html3 = innerHTML.__html;
            if (html3 !== null && html3 !== void 0) {
              if (typeof html3 === "string" && html3.length > 0 && html3[0] === "\n") {
                target5.push(leadingNewline, stringToChunk(html3));
              } else {
                {
                  checkHtmlStringCoercion(html3);
                }
                target5.push(stringToChunk("" + html3));
              }
            }
          }
          if (typeof children2 === "string" && children2[0] === "\n") {
            target5.push(leadingNewline);
          }
          return children2;
        }
        var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
        var validatedTagCache = /* @__PURE__ */ new Map();
        function startChunkForTag(tag) {
          var tagStartChunk = validatedTagCache.get(tag);
          if (tagStartChunk === void 0) {
            if (!VALID_TAG_REGEX.test(tag)) {
              throw new Error("Invalid tag: " + tag);
            }
            tagStartChunk = stringToPrecomputedChunk("<" + tag);
            validatedTagCache.set(tag, tagStartChunk);
          }
          return tagStartChunk;
        }
        var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
        function pushStartInstance(target5, type, props, responseState, formatContext) {
          {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, null);
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error3("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
            if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
              if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                error3("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
          }
          switch (type) {
            case "select":
              return pushStartSelect(target5, props, responseState);
            case "option":
              return pushStartOption(target5, props, responseState, formatContext);
            case "textarea":
              return pushStartTextArea(target5, props, responseState);
            case "input":
              return pushInput(target5, props, responseState);
            case "menuitem":
              return pushStartMenuItem(target5, props, responseState);
            case "listing":
            case "pre": {
              return pushStartPreformattedElement(target5, props, type, responseState);
            }
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              return pushSelfClosing(target5, props, type, responseState);
            }
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph": {
              return pushStartGenericElement(target5, props, type, responseState);
            }
            case "html": {
              if (formatContext.insertionMode === ROOT_HTML_MODE) {
                target5.push(DOCTYPE);
              }
              return pushStartGenericElement(target5, props, type, responseState);
            }
            default: {
              if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                return pushStartGenericElement(target5, props, type, responseState);
              } else {
                return pushStartCustomElement(target5, props, type, responseState);
              }
            }
          }
        }
        var endTag1 = stringToPrecomputedChunk("</");
        var endTag2 = stringToPrecomputedChunk(">");
        function pushEndInstance(target5, type, props) {
          switch (type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr": {
              break;
            }
            default: {
              target5.push(endTag1, stringToChunk(type), endTag2);
            }
          }
        }
        function writeCompletedRoot(destination, responseState) {
          var bootstrapChunks = responseState.bootstrapChunks;
          var i3 = 0;
          for (; i3 < bootstrapChunks.length - 1; i3++) {
            writeChunk(destination, bootstrapChunks[i3]);
          }
          if (i3 < bootstrapChunks.length) {
            return writeChunkAndReturn(destination, bootstrapChunks[i3]);
          }
          return true;
        }
        var placeholder1 = stringToPrecomputedChunk('<template id="');
        var placeholder22 = stringToPrecomputedChunk('"></template>');
        function writePlaceholder(destination, responseState, id3) {
          writeChunk(destination, placeholder1);
          writeChunk(destination, responseState.placeholderPrefix);
          var formattedID = stringToChunk(id3.toString(16));
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, placeholder22);
        }
        var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
        var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
        var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
        var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
        var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
        function writeStartCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
        }
        function writeStartPendingSuspenseBoundary(destination, responseState, id3) {
          writeChunk(destination, startPendingSuspenseBoundary1);
          if (id3 === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, id3);
          return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
        }
        function writeStartClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
        }
        function writeEndCompletedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndPendingSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
          return writeChunkAndReturn(destination, endSuspenseBoundary);
        }
        var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
        var startSegmentHTML2 = stringToPrecomputedChunk('">');
        var endSegmentHTML = stringToPrecomputedChunk("</div>");
        var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
        var startSegmentSVG2 = stringToPrecomputedChunk('">');
        var endSegmentSVG = stringToPrecomputedChunk("</svg>");
        var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
        var startSegmentMathML2 = stringToPrecomputedChunk('">');
        var endSegmentMathML = stringToPrecomputedChunk("</math>");
        var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
        var startSegmentTable2 = stringToPrecomputedChunk('">');
        var endSegmentTable = stringToPrecomputedChunk("</table>");
        var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
        var startSegmentTableBody2 = stringToPrecomputedChunk('">');
        var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
        var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
        var startSegmentTableRow2 = stringToPrecomputedChunk('">');
        var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
        var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
        var startSegmentColGroup2 = stringToPrecomputedChunk('">');
        var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
        function writeStartSegment(destination, responseState, formatContext, id3) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              writeChunk(destination, startSegmentHTML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentHTML2);
            }
            case SVG_MODE: {
              writeChunk(destination, startSegmentSVG);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentSVG2);
            }
            case MATHML_MODE: {
              writeChunk(destination, startSegmentMathML);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentMathML2);
            }
            case HTML_TABLE_MODE: {
              writeChunk(destination, startSegmentTable);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTable2);
            }
            case HTML_TABLE_BODY_MODE: {
              writeChunk(destination, startSegmentTableBody);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableBody2);
            }
            case HTML_TABLE_ROW_MODE: {
              writeChunk(destination, startSegmentTableRow);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentTableRow2);
            }
            case HTML_COLGROUP_MODE: {
              writeChunk(destination, startSegmentColGroup);
              writeChunk(destination, responseState.segmentPrefix);
              writeChunk(destination, stringToChunk(id3.toString(16)));
              return writeChunkAndReturn(destination, startSegmentColGroup2);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        function writeEndSegment(destination, formatContext) {
          switch (formatContext.insertionMode) {
            case ROOT_HTML_MODE:
            case HTML_MODE: {
              return writeChunkAndReturn(destination, endSegmentHTML);
            }
            case SVG_MODE: {
              return writeChunkAndReturn(destination, endSegmentSVG);
            }
            case MATHML_MODE: {
              return writeChunkAndReturn(destination, endSegmentMathML);
            }
            case HTML_TABLE_MODE: {
              return writeChunkAndReturn(destination, endSegmentTable);
            }
            case HTML_TABLE_BODY_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableBody);
            }
            case HTML_TABLE_ROW_MODE: {
              return writeChunkAndReturn(destination, endSegmentTableRow);
            }
            case HTML_COLGROUP_MODE: {
              return writeChunkAndReturn(destination, endSegmentColGroup);
            }
            default: {
              throw new Error("Unknown insertion mode. This is a bug in React.");
            }
          }
        }
        var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
        var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
        var clientRenderFunction = 'function $RX(a){if(a=document.getElementById(a))a=a.previousSibling,a.data="$!",a._reactRetry&&a._reactRetry()}';
        var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
        var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
        var completeSegmentScript2 = stringToPrecomputedChunk('","');
        var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteSegmentFunction) {
            responseState.sentCompleteSegmentFunction = true;
            writeChunk(destination, completeSegmentScript1Full);
          } else {
            writeChunk(destination, completeSegmentScript1Partial);
          }
          writeChunk(destination, responseState.segmentPrefix);
          var formattedID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, formattedID);
          writeChunk(destination, completeSegmentScript2);
          writeChunk(destination, responseState.placeholderPrefix);
          writeChunk(destination, formattedID);
          return writeChunkAndReturn(destination, completeSegmentScript3);
        }
        var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
        var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
        var completeBoundaryScript2 = stringToPrecomputedChunk('","');
        var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
        function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentCompleteBoundaryFunction) {
            responseState.sentCompleteBoundaryFunction = true;
            writeChunk(destination, completeBoundaryScript1Full);
          } else {
            writeChunk(destination, completeBoundaryScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          var formattedContentID = stringToChunk(contentSegmentID.toString(16));
          writeChunk(destination, boundaryID);
          writeChunk(destination, completeBoundaryScript2);
          writeChunk(destination, responseState.segmentPrefix);
          writeChunk(destination, formattedContentID);
          return writeChunkAndReturn(destination, completeBoundaryScript3);
        }
        var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
        var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
        var clientRenderScript2 = stringToPrecomputedChunk('")<\/script>');
        function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID) {
          writeChunk(destination, responseState.startInlineScript);
          if (!responseState.sentClientRenderFunction) {
            responseState.sentClientRenderFunction = true;
            writeChunk(destination, clientRenderScript1Full);
          } else {
            writeChunk(destination, clientRenderScript1Partial);
          }
          if (boundaryID === null) {
            throw new Error("An ID must have been assigned before we can complete the boundary.");
          }
          writeChunk(destination, boundaryID);
          return writeChunkAndReturn(destination, clientRenderScript2);
        }
        var assign2 = Object.assign;
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName2 = outerType.displayName;
          if (displayName2) {
            return displayName2;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error3("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider2 = type;
                return getContextName(provider2._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init3(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error3("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name15, source3, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match4 = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match4 && match4[1] || "";
              }
            }
            return "\n" + prefix + name15;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name15 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source3, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack4 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame.setExtraStackFrame(stack4);
            } else {
              ReactDebugCurrentFrame.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location2, componentName, element3) {
          {
            var has = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error3("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error3("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        function getMaskedContext(type, unmaskedContext) {
          {
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name15 = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name15);
            }
            return context;
          }
        }
        function processChildContext(instance, type, parentContext, childContextTypes) {
          {
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error3("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name15 = getComponentNameFromType(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name15);
            }
            return assign2({}, parentContext, childContext);
          }
        }
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var rootContextSnapshot = null;
        var currentActiveSnapshot = null;
        function popNode(prev) {
          {
            prev.context._currentValue = prev.parentValue;
          }
        }
        function pushNode(next) {
          {
            next.context._currentValue = next.value;
          }
        }
        function popToNearestCommonAncestor(prev, next) {
          if (prev === next)
            ;
          else {
            popNode(prev);
            var parentPrev = prev.parent;
            var parentNext = next.parent;
            if (parentPrev === null) {
              if (parentNext !== null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
            } else {
              if (parentNext === null) {
                throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
              }
              popToNearestCommonAncestor(parentPrev, parentNext);
            }
            pushNode(next);
          }
        }
        function popAllPrevious(prev) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev !== null) {
            popAllPrevious(parentPrev);
          }
        }
        function pushAllNext(next) {
          var parentNext = next.parent;
          if (parentNext !== null) {
            pushAllNext(parentNext);
          }
          pushNode(next);
        }
        function popPreviousToCommonLevel(prev, next) {
          popNode(prev);
          var parentPrev = prev.parent;
          if (parentPrev === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (parentPrev.depth === next.depth) {
            popToNearestCommonAncestor(parentPrev, next);
          } else {
            popPreviousToCommonLevel(parentPrev, next);
          }
        }
        function popNextToCommonLevel(prev, next) {
          var parentNext = next.parent;
          if (parentNext === null) {
            throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
          }
          if (prev.depth === parentNext.depth) {
            popToNearestCommonAncestor(prev, parentNext);
          } else {
            popNextToCommonLevel(prev, parentNext);
          }
          pushNode(next);
        }
        function switchContext(newSnapshot) {
          var prev = currentActiveSnapshot;
          var next = newSnapshot;
          if (prev !== next) {
            if (prev === null) {
              pushAllNext(next);
            } else if (next === null) {
              popAllPrevious(prev);
            } else if (prev.depth === next.depth) {
              popToNearestCommonAncestor(prev, next);
            } else if (prev.depth > next.depth) {
              popPreviousToCommonLevel(prev, next);
            } else {
              popNextToCommonLevel(prev, next);
            }
            currentActiveSnapshot = next;
          }
        }
        function pushProvider(context, nextValue) {
          var prevValue;
          {
            prevValue = context._currentValue;
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error3("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          var prevNode = currentActiveSnapshot;
          var newNode = {
            parent: prevNode,
            depth: prevNode === null ? 0 : prevNode.depth + 1,
            context,
            parentValue: prevValue,
            value: nextValue
          };
          currentActiveSnapshot = newNode;
          return newNode;
        }
        function popProvider(context) {
          var prevSnapshot = currentActiveSnapshot;
          if (prevSnapshot === null) {
            throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
          }
          {
            if (prevSnapshot.context !== context) {
              error3("The parent context is not the expected context. This is probably a bug in React.");
            }
          }
          {
            var value12 = prevSnapshot.parentValue;
            if (value12 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
              prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
            } else {
              prevSnapshot.context._currentValue = value12;
            }
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error3("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
          return currentActiveSnapshot = prevSnapshot.parent;
        }
        function getActiveContext() {
          return currentActiveSnapshot;
        }
        function readContext(context) {
          var value12 = context._currentValue;
          return value12;
        }
        function get3(key) {
          return key._reactInternals;
        }
        function set3(key, value12) {
          key._reactInternals = value12;
        }
        var didWarnAboutNoopUpdateForComponent = {};
        var didWarnAboutDeprecatedWillMount = {};
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback2, callerName) {
            if (callback2 === null || typeof callback2 === "function") {
              return;
            }
            var key = callerName + "_" + callback2;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error3("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error3("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
        }
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnAboutNoopUpdateForComponent[warningKey]) {
              return;
            }
            error3("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
            didWarnAboutNoopUpdateForComponent[warningKey] = true;
          }
        }
        var classComponentUpdater = {
          isMounted: function(inst) {
            return false;
          },
          enqueueSetState: function(inst, payload, callback2) {
            var internals = get3(inst);
            if (internals.queue === null) {
              warnNoop(inst, "setState");
            } else {
              internals.queue.push(payload);
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            }
          },
          enqueueReplaceState: function(inst, payload, callback2) {
            var internals = get3(inst);
            internals.replace = true;
            internals.queue = [payload];
            {
              if (callback2 !== void 0 && callback2 !== null) {
                warnOnInvalidCallback(callback2, "setState");
              }
            }
          },
          enqueueForceUpdate: function(inst, callback2) {
            var internals = get3(inst);
            if (internals.queue === null) {
              warnNoop(inst, "forceUpdate");
            } else {
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            }
          }
        };
        function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var newState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
          return newState;
        }
        function constructClassInstance(ctor, props, maskedLegacyContext) {
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error3("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            context = maskedLegacyContext;
          }
          var instance = new ctor(props, context);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error3("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error3("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          return instance;
        }
        function checkClassInstance(instance, ctor, newProps) {
          {
            var name15 = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error3("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
              } else {
                error3("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error3("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error3("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
            }
            if (instance.propTypes) {
              error3("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
            }
            if (instance.contextType) {
              error3("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
            }
            {
              if (instance.contextTypes) {
                error3("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error3("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error3("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error3("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error3("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error3("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error3("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error3("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error3("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
            }
            if (instance.defaultProps) {
              error3("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error3("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error3("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error3("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error3("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error3("%s.state: must be set to an object or null", name15);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error3("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
            }
          }
        }
        function callComponentWillMount(type, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            {
              if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDeprecatedWillMount[componentName]) {
                  warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                  didWarnAboutDeprecatedWillMount[componentName] = true;
                }
              }
            }
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error3("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
          if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
            var oldQueue = internalInstance.queue;
            var oldReplace = internalInstance.replace;
            internalInstance.queue = null;
            internalInstance.replace = false;
            if (oldReplace && oldQueue.length === 1) {
              inst.state = oldQueue[0];
            } else {
              var nextState = oldReplace ? oldQueue[0] : inst.state;
              var dontMutate = true;
              for (var i3 = oldReplace ? 1 : 0; i3 < oldQueue.length; i3++) {
                var partial = oldQueue[i3];
                var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                if (partialState != null) {
                  if (dontMutate) {
                    dontMutate = false;
                    nextState = assign2({}, nextState, partialState);
                  } else {
                    assign2(nextState, partialState);
                  }
                }
              }
              inst.state = nextState;
            }
          } else {
            internalInstance.queue = null;
          }
        }
        function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
          {
            checkClassInstance(instance, ctor, newProps);
          }
          var initialState = instance.state !== void 0 ? instance.state : null;
          instance.updater = classComponentUpdater;
          instance.props = newProps;
          instance.state = initialState;
          var internalInstance = {
            queue: [],
            replace: false
          };
          set3(instance, internalInstance);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            instance.context = maskedLegacyContext;
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error3("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(ctor, instance);
            processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
          }
        }
        var emptyTreeContext = {
          id: 1,
          overflow: ""
        };
        function getTreeId(context) {
          var overflow = context.overflow;
          var idWithLeadingBit = context.id;
          var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id3.toString(32) + overflow;
        }
        function pushTreeContext(baseContext, totalChildren, index6) {
          var baseIdWithLeadingBit = baseContext.id;
          var baseOverflow = baseContext.overflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot2 = index6 + 1;
          var length8 = getBitLength(totalChildren) + baseLength;
          if (length8 > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot2 << restOfBaseLength;
            var id3 = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            return {
              id: 1 << restOfLength | id3,
              overflow
            };
          } else {
            var newBits = slot2 << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            return {
              id: 1 << length8 | _id,
              overflow: _overflow
            };
          }
        }
        function getBitLength(number2) {
          return 32 - clz32(number2);
        }
        function getLeadingBit(id3) {
          return 1 << getBitLength(id3) - 1;
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log5 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log5(asUint) / LN2 | 0) | 0;
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        var currentlyRenderingComponent = null;
        var currentlyRenderingTask = null;
        var firstWorkInProgressHook = null;
        var workInProgressHook = null;
        var isReRender = false;
        var didScheduleRenderPhaseUpdate = false;
        var localIdCounter = 0;
        var renderPhaseUpdates = null;
        var numberOfReRenders = 0;
        var RE_RENDER_LIMIT = 25;
        var isInHookUserCodeInDev = false;
        var currentHookNameInDev;
        function resolveCurrentlyRenderingComponent() {
          if (currentlyRenderingComponent === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          {
            if (isInHookUserCodeInDev) {
              error3("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            }
          }
          return currentlyRenderingComponent;
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          if (prevDeps === null) {
            {
              error3("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error3("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
            }
          }
          for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
            if (objectIs(nextDeps[i3], prevDeps[i3])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function createHook() {
          if (numberOfReRenders > 0) {
            throw new Error("Rendered more hooks than during the previous render");
          }
          return {
            memoizedState: null,
            queue: null,
            next: null
          };
        }
        function createWorkInProgressHook() {
          if (workInProgressHook === null) {
            if (firstWorkInProgressHook === null) {
              isReRender = false;
              firstWorkInProgressHook = workInProgressHook = createHook();
            } else {
              isReRender = true;
              workInProgressHook = firstWorkInProgressHook;
            }
          } else {
            if (workInProgressHook.next === null) {
              isReRender = false;
              workInProgressHook = workInProgressHook.next = createHook();
            } else {
              isReRender = true;
              workInProgressHook = workInProgressHook.next;
            }
          }
          return workInProgressHook;
        }
        function prepareToUseHooks(task, componentIdentity) {
          currentlyRenderingComponent = componentIdentity;
          currentlyRenderingTask = task;
          {
            isInHookUserCodeInDev = false;
          }
          localIdCounter = 0;
        }
        function finishHooks(Component, props, children2, refOrContext) {
          while (didScheduleRenderPhaseUpdate) {
            didScheduleRenderPhaseUpdate = false;
            localIdCounter = 0;
            numberOfReRenders += 1;
            workInProgressHook = null;
            children2 = Component(props, refOrContext);
          }
          resetHooksState();
          return children2;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          return didRenderIdHook;
        }
        function resetHooksState() {
          {
            isInHookUserCodeInDev = false;
          }
          currentlyRenderingComponent = null;
          currentlyRenderingTask = null;
          didScheduleRenderPhaseUpdate = false;
          firstWorkInProgressHook = null;
          numberOfReRenders = 0;
          renderPhaseUpdates = null;
          workInProgressHook = null;
        }
        function readContext$1(context) {
          {
            if (isInHookUserCodeInDev) {
              error3("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          return readContext(context);
        }
        function useContext14(context) {
          {
            currentHookNameInDev = "useContext";
          }
          resolveCurrentlyRenderingComponent();
          return readContext(context);
        }
        function basicStateReducer(state3, action2) {
          return typeof action2 === "function" ? action2(state3) : action2;
        }
        function useState4(initialState) {
          {
            currentHookNameInDev = "useState";
          }
          return useReducer2(basicStateReducer, initialState);
        }
        function useReducer2(reducer, initialArg, init3) {
          {
            if (reducer !== basicStateReducer) {
              currentHookNameInDev = "useReducer";
            }
          }
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          if (isReRender) {
            var queue = workInProgressHook.queue;
            var dispatch = queue.dispatch;
            if (renderPhaseUpdates !== null) {
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate !== void 0) {
                renderPhaseUpdates.delete(queue);
                var newState = workInProgressHook.memoizedState;
                var update = firstRenderPhaseUpdate;
                do {
                  var action2 = update.action;
                  {
                    isInHookUserCodeInDev = true;
                  }
                  newState = reducer(newState, action2);
                  {
                    isInHookUserCodeInDev = false;
                  }
                  update = update.next;
                } while (update !== null);
                workInProgressHook.memoizedState = newState;
                return [newState, dispatch];
              }
            }
            return [workInProgressHook.memoizedState, dispatch];
          } else {
            {
              isInHookUserCodeInDev = true;
            }
            var initialState;
            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === "function" ? initialArg() : initialArg;
            } else {
              initialState = init3 !== void 0 ? init3(initialArg) : initialArg;
            }
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = initialState;
            var _queue = workInProgressHook.queue = {
              last: null,
              dispatch: null
            };
            var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
            return [workInProgressHook.memoizedState, _dispatch];
          }
        }
        function useMemo6(nextCreate, deps) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          if (workInProgressHook !== null) {
            var prevState = workInProgressHook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
          }
          {
            isInHookUserCodeInDev = true;
          }
          var nextValue = nextCreate();
          {
            isInHookUserCodeInDev = false;
          }
          workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function useRef9(initialValue) {
          currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
          workInProgressHook = createWorkInProgressHook();
          var previousRef = workInProgressHook.memoizedState;
          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        }
        function useLayoutEffect3(create6, inputs) {
          {
            currentHookNameInDev = "useLayoutEffect";
            error3("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
          }
        }
        function dispatchAction(componentIdentity, queue, action2) {
          if (numberOfReRenders >= RE_RENDER_LIMIT) {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          }
          if (componentIdentity === currentlyRenderingComponent) {
            didScheduleRenderPhaseUpdate = true;
            var update = {
              action: action2,
              next: null
            };
            if (renderPhaseUpdates === null) {
              renderPhaseUpdates = /* @__PURE__ */ new Map();
            }
            var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
            if (firstRenderPhaseUpdate === void 0) {
              renderPhaseUpdates.set(queue, update);
            } else {
              var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
              while (lastRenderPhaseUpdate.next !== null) {
                lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              }
              lastRenderPhaseUpdate.next = update;
            }
          }
        }
        function useCallback3(callback2, deps) {
          return useMemo6(function() {
            return callback2;
          }, deps);
        }
        function useMutableSource(source3, getSnapshot, subscribe) {
          resolveCurrentlyRenderingComponent();
          return getSnapshot(source3._source);
        }
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          if (getServerSnapshot === void 0) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          return getServerSnapshot();
        }
        function useDeferredValue(value12) {
          resolveCurrentlyRenderingComponent();
          return value12;
        }
        function unsupportedStartTransition() {
          throw new Error("startTransition cannot be called during server rendering.");
        }
        function useTransition() {
          resolveCurrentlyRenderingComponent();
          return [false, unsupportedStartTransition];
        }
        function useId3() {
          var task = currentlyRenderingTask;
          var treeId = getTreeId(task.treeContext);
          var responseState = currentResponseState;
          if (responseState === null) {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
          }
          var localId = localIdCounter++;
          return makeId(responseState, treeId, localId);
        }
        function noop() {
        }
        var Dispatcher = {
          readContext: readContext$1,
          useContext: useContext14,
          useMemo: useMemo6,
          useReducer: useReducer2,
          useRef: useRef9,
          useState: useState4,
          useInsertionEffect: noop,
          useLayoutEffect: useLayoutEffect3,
          useCallback: useCallback3,
          useImperativeHandle: noop,
          useEffect: noop,
          useDebugValue: noop,
          useDeferredValue,
          useTransition,
          useId: useId3,
          useMutableSource,
          useSyncExternalStore
        };
        var currentResponseState = null;
        function setCurrentResponseState(responseState) {
          currentResponseState = responseState;
        }
        function getStackByComponentStackNode(componentStack) {
          try {
            var info2 = "";
            var node = componentStack;
            do {
              switch (node.tag) {
                case 0:
                  info2 += describeBuiltInComponentFrame(node.type, null, null);
                  break;
                case 1:
                  info2 += describeFunctionComponentFrame(node.type, null, null);
                  break;
                case 2:
                  info2 += describeClassComponentFrame(node.type, null, null);
                  break;
              }
              node = node.parent;
            } while (node);
            return info2;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var PENDING = 0;
        var COMPLETED = 1;
        var FLUSHED = 2;
        var ABORTED = 3;
        var ERRORED = 4;
        var OPEN = 0;
        var CLOSING = 1;
        var CLOSED = 2;
        var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
        function defaultErrorHandler(error4) {
          console["error"](error4);
        }
        function noop$1() {
        }
        function createRequest(children2, responseState, rootFormatContext, progressiveChunkSize, onError3, onAllReady, onShellReady, onShellError, onFatalError) {
          var pingedTasks = [];
          var abortSet = /* @__PURE__ */ new Set();
          var request = {
            destination: null,
            responseState,
            progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
            status: OPEN,
            fatalError: null,
            nextSegmentId: 0,
            allPendingTasks: 0,
            pendingRootTasks: 0,
            completedRootSegment: null,
            abortableTasks: abortSet,
            pingedTasks,
            clientRenderedBoundaries: [],
            completedBoundaries: [],
            partialBoundaries: [],
            onError: onError3 === void 0 ? defaultErrorHandler : onError3,
            onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
            onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
            onShellError: onShellError === void 0 ? noop$1 : onShellError,
            onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
          };
          var rootSegment = createPendingSegment(request, 0, null, rootFormatContext);
          rootSegment.parentFlushed = true;
          var rootTask = createTask(request, children2, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
          pingedTasks.push(rootTask);
          return request;
        }
        function pingTask(request, task) {
          var pingedTasks = request.pingedTasks;
          pingedTasks.push(task);
          if (pingedTasks.length === 1) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
        }
        function createSuspenseBoundary(request, fallbackAbortableTasks) {
          return {
            id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
            rootSegmentID: -1,
            parentFlushed: false,
            pendingTasks: 0,
            forceClientRender: false,
            completedSegments: [],
            byteSize: 0,
            fallbackAbortableTasks
          };
        }
        function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
          request.allPendingTasks++;
          if (blockedBoundary === null) {
            request.pendingRootTasks++;
          } else {
            blockedBoundary.pendingTasks++;
          }
          var task = {
            node,
            ping: function() {
              return pingTask(request, task);
            },
            blockedBoundary,
            blockedSegment,
            abortSet,
            legacyContext,
            context,
            treeContext
          };
          {
            task.componentStack = null;
          }
          abortSet.add(task);
          return task;
        }
        function createPendingSegment(request, index6, boundary, formatContext) {
          return {
            status: PENDING,
            id: -1,
            index: index6,
            parentFlushed: false,
            chunks: [],
            children: [],
            formatContext,
            boundary
          };
        }
        var currentTaskInDEV = null;
        function getCurrentStackInDEV() {
          {
            if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
              return "";
            }
            return getStackByComponentStackNode(currentTaskInDEV.componentStack);
          }
        }
        function pushBuiltInComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 0,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushFunctionComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 1,
              parent: task.componentStack,
              type
            };
          }
        }
        function pushClassComponentStackInDEV(task, type) {
          {
            task.componentStack = {
              tag: 2,
              parent: task.componentStack,
              type
            };
          }
        }
        function popComponentStackInDEV(task) {
          {
            if (task.componentStack === null) {
              error3("Unexpectedly popped too many stack frames. This is a bug in React.");
            } else {
              task.componentStack = task.componentStack.parent;
            }
          }
        }
        function logRecoverableError(request, error4) {
          var onError3 = request.onError;
          onError3(error4);
        }
        function fatalError(request, error4) {
          var onShellError = request.onShellError;
          onShellError(error4);
          var onFatalError = request.onFatalError;
          onFatalError(error4);
          if (request.destination !== null) {
            request.status = CLOSED;
            closeWithError(request.destination, error4);
          } else {
            request.status = CLOSING;
            request.fatalError = error4;
          }
        }
        function renderSuspenseBoundary(request, task, props) {
          pushBuiltInComponentStackInDEV(task, "Suspense");
          var parentBoundary = task.blockedBoundary;
          var parentSegment = task.blockedSegment;
          var fallback = props.fallback;
          var content3 = props.children;
          var fallbackAbortSet = /* @__PURE__ */ new Set();
          var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
          var insertionIndex = parentSegment.chunks.length;
          var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext);
          parentSegment.children.push(boundarySegment);
          var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext);
          contentRootSegment.parentFlushed = true;
          task.blockedBoundary = newBoundary;
          task.blockedSegment = contentRootSegment;
          try {
            renderNode(request, task, content3);
            contentRootSegment.status = COMPLETED;
            queueCompletedSegment(newBoundary, contentRootSegment);
            if (newBoundary.pendingTasks === 0) {
              popComponentStackInDEV(task);
              return;
            }
          } catch (error4) {
            contentRootSegment.status = ERRORED;
            logRecoverableError(request, error4);
            newBoundary.forceClientRender = true;
          } finally {
            task.blockedBoundary = parentBoundary;
            task.blockedSegment = parentSegment;
          }
          var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
          {
            suspendedFallbackTask.componentStack = task.componentStack;
          }
          request.pingedTasks.push(suspendedFallbackTask);
          popComponentStackInDEV(task);
        }
        function renderHostElement(request, task, type, props) {
          pushBuiltInComponentStackInDEV(task, type);
          var segment = task.blockedSegment;
          var children2 = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
          var prevContext = segment.formatContext;
          segment.formatContext = getChildFormatContext(prevContext, type, props);
          renderNode(request, task, children2);
          segment.formatContext = prevContext;
          pushEndInstance(segment.chunks, type);
          popComponentStackInDEV(task);
        }
        function shouldConstruct$1(Component) {
          return Component.prototype && Component.prototype.isReactComponent;
        }
        function renderWithHooks(request, task, Component, props, secondArg) {
          var componentIdentity = {};
          prepareToUseHooks(task, componentIdentity);
          var result = Component(props, secondArg);
          return finishHooks(Component, props, result, secondArg);
        }
        function finishClassComponent(request, task, instance, Component, props) {
          var nextChildren = instance.render();
          {
            if (instance.props !== props) {
              if (!didWarnAboutReassigningProps) {
                error3("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          {
            var childContextTypes = Component.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== void 0) {
              var previousContext = task.legacyContext;
              var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
              task.legacyContext = mergedContext;
              renderNodeDestructive(request, task, nextChildren);
              task.legacyContext = previousContext;
              return;
            }
          }
          renderNodeDestructive(request, task, nextChildren);
        }
        function renderClassComponent(request, task, Component, props) {
          pushClassComponentStackInDEV(task, Component);
          var maskedContext = getMaskedContext(Component, task.legacyContext);
          var instance = constructClassInstance(Component, props, maskedContext);
          mountClassInstance(instance, Component, props, maskedContext);
          finishClassComponent(request, task, instance, Component, props);
          popComponentStackInDEV(task);
        }
        var didWarnAboutBadClass = {};
        var didWarnAboutModulePatternComponent = {};
        var didWarnAboutContextTypeOnFunctionComponent = {};
        var didWarnAboutGetDerivedStateOnFunctionComponent = {};
        var didWarnAboutReassigningProps = false;
        var didWarnAboutGenerators = false;
        var didWarnAboutMaps = false;
        var hasWarnedAboutUsingContextAsConsumer = false;
        function renderIndeterminateComponent(request, task, Component, props) {
          var legacyContext;
          {
            legacyContext = getMaskedContext(Component, task.legacyContext);
          }
          pushFunctionComponentStackInDEV(task, Component);
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error3("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
          }
          var value12 = renderWithHooks(request, task, Component, props, legacyContext);
          var hasId = checkDidRenderIdHook();
          {
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            mountClassInstance(value12, Component, props, legacyContext);
            finishClassComponent(request, task, value12, Component, props);
          } else {
            {
              validateFunctionComponentInDev(Component);
            }
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index6 = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
              try {
                renderNodeDestructive(request, task, value12);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, value12);
            }
          }
          popComponentStackInDEV(task);
        }
        function validateFunctionComponentInDev(Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error3("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error3("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error3("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign2({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        function renderForwardRef(request, task, type, props, ref) {
          pushFunctionComponentStackInDEV(task, type.render);
          var children2 = renderWithHooks(request, task, type.render, props, ref);
          var hasId = checkDidRenderIdHook();
          if (hasId) {
            var prevTreeContext = task.treeContext;
            var totalChildren = 1;
            var index6 = 0;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
            try {
              renderNodeDestructive(request, task, children2);
            } finally {
              task.treeContext = prevTreeContext;
            }
          } else {
            renderNodeDestructive(request, task, children2);
          }
          popComponentStackInDEV(task);
        }
        function renderMemo(request, task, type, props, ref) {
          var innerType = type.type;
          var resolvedProps = resolveDefaultProps(innerType, props);
          renderElement(request, task, innerType, resolvedProps, ref);
        }
        function renderContextConsumer(request, task, context, props) {
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error3("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var render = props.children;
          {
            if (typeof render !== "function") {
              error3("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          var newValue = readContext(context);
          var newChildren = render(newValue);
          renderNodeDestructive(request, task, newChildren);
        }
        function renderContextProvider(request, task, type, props) {
          var context = type._context;
          var value12 = props.value;
          var children2 = props.children;
          var prevSnapshot;
          {
            prevSnapshot = task.context;
          }
          task.context = pushProvider(context, value12);
          renderNodeDestructive(request, task, children2);
          task.context = popProvider(context);
          {
            if (prevSnapshot !== task.context) {
              error3("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
            }
          }
        }
        function renderLazyComponent(request, task, lazyComponent, props, ref) {
          pushBuiltInComponentStackInDEV(task, "Lazy");
          var payload = lazyComponent._payload;
          var init3 = lazyComponent._init;
          var Component = init3(payload);
          var resolvedProps = resolveDefaultProps(Component, props);
          renderElement(request, task, Component, resolvedProps, ref);
          popComponentStackInDEV(task);
        }
        function renderElement(request, task, type, props, ref) {
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              renderClassComponent(request, task, type, props);
              return;
            } else {
              renderIndeterminateComponent(request, task, type, props);
              return;
            }
          }
          if (typeof type === "string") {
            renderHostElement(request, task, type, props);
            return;
          }
          switch (type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE: {
              renderNodeDestructive(request, task, props.children);
              return;
            }
            case REACT_SUSPENSE_LIST_TYPE: {
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            }
            case REACT_SCOPE_TYPE: {
              throw new Error("ReactDOMServer does not yet support scope components.");
            }
            case REACT_SUSPENSE_TYPE: {
              {
                renderSuspenseBoundary(request, task, props);
              }
              return;
            }
          }
          if (typeof type === "object" && type !== null) {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE: {
                renderForwardRef(request, task, type, props, ref);
                return;
              }
              case REACT_MEMO_TYPE: {
                renderMemo(request, task, type, props, ref);
                return;
              }
              case REACT_PROVIDER_TYPE: {
                renderContextProvider(request, task, type, props);
                return;
              }
              case REACT_CONTEXT_TYPE: {
                renderContextConsumer(request, task, type, props);
                return;
              }
              case REACT_LAZY_TYPE: {
                renderLazyComponent(request, task, type, props);
                return;
              }
            }
          }
          var info2 = "";
          {
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
          }
          throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
        }
        function validateIterable(iterable, iteratorFn) {
          {
            if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error3("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (iterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
          }
        }
        function renderNodeDestructive(request, task, node) {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch (node.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var element3 = node;
                var type = element3.type;
                var props = element3.props;
                var ref = element3.ref;
                renderElement(request, task, type, props, ref);
                return;
              }
              case REACT_PORTAL_TYPE:
                throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE: {
                var lazyNode = node;
                var payload = lazyNode._payload;
                var init3 = lazyNode._init;
                var resolvedNode = init3(payload);
                renderNodeDestructive(request, task, resolvedNode);
                return;
              }
            }
            if (isArray2(node)) {
              renderChildrenArray(request, task, node);
              return;
            }
            var iteratorFn = getIteratorFn(node);
            if (iteratorFn) {
              {
                validateIterable(node, iteratorFn);
              }
              var iterator2 = iteratorFn.call(node);
              if (iterator2) {
                var step3 = iterator2.next();
                if (!step3.done) {
                  var children2 = [];
                  do {
                    children2.push(step3.value);
                    step3 = iterator2.next();
                  } while (!step3.done);
                  renderChildrenArray(request, task, children2);
                  return;
                }
                return;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            pushTextInstance(task.blockedSegment.chunks, node, request.responseState);
            return;
          }
          if (typeof node === "number") {
            pushTextInstance(task.blockedSegment.chunks, "" + node, request.responseState);
            return;
          }
          {
            if (typeof node === "function") {
              error3("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
        }
        function renderChildrenArray(request, task, children2) {
          var totalChildren = children2.length;
          for (var i3 = 0; i3 < totalChildren; i3++) {
            var prevTreeContext = task.treeContext;
            task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i3);
            try {
              renderNode(request, task, children2[i3]);
            } finally {
              task.treeContext = prevTreeContext;
            }
          }
        }
        function spawnNewSuspendedTask(request, task, x) {
          var segment = task.blockedSegment;
          var insertionIndex = segment.chunks.length;
          var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext);
          segment.children.push(newSegment);
          var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          {
            if (task.componentStack !== null) {
              newTask.componentStack = task.componentStack.parent;
            }
          }
          var ping = newTask.ping;
          x.then(ping, ping);
        }
        function renderNode(request, task, node) {
          var previousFormatContext = task.blockedSegment.formatContext;
          var previousLegacyContext = task.legacyContext;
          var previousContext = task.context;
          var previousComponentStack = null;
          {
            previousComponentStack = task.componentStack;
          }
          try {
            return renderNodeDestructive(request, task, node);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              spawnNewSuspendedTask(request, task, x);
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              return;
            } else {
              task.blockedSegment.formatContext = previousFormatContext;
              task.legacyContext = previousLegacyContext;
              task.context = previousContext;
              switchContext(previousContext);
              {
                task.componentStack = previousComponentStack;
              }
              throw x;
            }
          }
        }
        function erroredTask(request, boundary, segment, error4) {
          logRecoverableError(request, error4);
          if (boundary === null) {
            fatalError(request, error4);
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function abortTaskSoft(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          finishedTask(request, boundary, segment);
        }
        function abortTask(task) {
          var request = this;
          var boundary = task.blockedBoundary;
          var segment = task.blockedSegment;
          segment.status = ABORTED;
          if (boundary === null) {
            request.allPendingTasks--;
            if (request.status !== CLOSED) {
              request.status = CLOSED;
              if (request.destination !== null) {
                close2(request.destination);
              }
            }
          } else {
            boundary.pendingTasks--;
            if (!boundary.forceClientRender) {
              boundary.forceClientRender = true;
              if (boundary.parentFlushed) {
                request.clientRenderedBoundaries.push(boundary);
              }
            }
            boundary.fallbackAbortableTasks.forEach(abortTask, request);
            boundary.fallbackAbortableTasks.clear();
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
        }
        function queueCompletedSegment(boundary, segment) {
          if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
            var childSegment = segment.children[0];
            childSegment.id = segment.id;
            childSegment.parentFlushed = true;
            if (childSegment.status === COMPLETED) {
              queueCompletedSegment(boundary, childSegment);
            }
          } else {
            var completedSegments = boundary.completedSegments;
            completedSegments.push(segment);
          }
        }
        function finishedTask(request, boundary, segment) {
          if (boundary === null) {
            if (segment.parentFlushed) {
              if (request.completedRootSegment !== null) {
                throw new Error("There can only be one root segment. This is a bug in React.");
              }
              request.completedRootSegment = segment;
            }
            request.pendingRootTasks--;
            if (request.pendingRootTasks === 0) {
              request.onShellError = noop$1;
              var onShellReady = request.onShellReady;
              onShellReady();
            }
          } else {
            boundary.pendingTasks--;
            if (boundary.forceClientRender)
              ;
            else if (boundary.pendingTasks === 0) {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                }
              }
              if (boundary.parentFlushed) {
                request.completedBoundaries.push(boundary);
              }
              boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
              boundary.fallbackAbortableTasks.clear();
            } else {
              if (segment.parentFlushed) {
                if (segment.status === COMPLETED) {
                  queueCompletedSegment(boundary, segment);
                  var completedSegments = boundary.completedSegments;
                  if (completedSegments.length === 1) {
                    if (boundary.parentFlushed) {
                      request.partialBoundaries.push(boundary);
                    }
                  }
                }
              }
            }
          }
          request.allPendingTasks--;
          if (request.allPendingTasks === 0) {
            var onAllReady = request.onAllReady;
            onAllReady();
          }
        }
        function retryTask(request, task) {
          var segment = task.blockedSegment;
          if (segment.status !== PENDING) {
            return;
          }
          switchContext(task.context);
          var prevTaskInDEV = null;
          {
            prevTaskInDEV = currentTaskInDEV;
            currentTaskInDEV = task;
          }
          try {
            renderNodeDestructive(request, task, task.node);
            task.abortSet.delete(task);
            segment.status = COMPLETED;
            finishedTask(request, task.blockedBoundary, segment);
          } catch (x) {
            resetHooksState();
            if (typeof x === "object" && x !== null && typeof x.then === "function") {
              var ping = task.ping;
              x.then(ping, ping);
            } else {
              task.abortSet.delete(task);
              segment.status = ERRORED;
              erroredTask(request, task.blockedBoundary, segment, x);
            }
          } finally {
            {
              currentTaskInDEV = prevTaskInDEV;
            }
          }
        }
        function performWork(request) {
          if (request.status === CLOSED) {
            return;
          }
          var prevContext = getActiveContext();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = Dispatcher;
          var prevGetCurrentStackImpl;
          {
            prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
            ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
          }
          var prevResponseState = currentResponseState;
          setCurrentResponseState(request.responseState);
          try {
            var pingedTasks = request.pingedTasks;
            var i3;
            for (i3 = 0; i3 < pingedTasks.length; i3++) {
              var task = pingedTasks[i3];
              retryTask(request, task);
            }
            pingedTasks.splice(0, i3);
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          } finally {
            setCurrentResponseState(prevResponseState);
            ReactCurrentDispatcher$1.current = prevDispatcher;
            {
              ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
            }
            if (prevDispatcher === Dispatcher) {
              switchContext(prevContext);
            }
          }
        }
        function flushSubtree(request, destination, segment) {
          segment.parentFlushed = true;
          switch (segment.status) {
            case PENDING: {
              var segmentID = segment.id = request.nextSegmentId++;
              return writePlaceholder(destination, request.responseState, segmentID);
            }
            case COMPLETED: {
              segment.status = FLUSHED;
              var r = true;
              var chunks = segment.chunks;
              var chunkIdx = 0;
              var children2 = segment.children;
              for (var childIdx = 0; childIdx < children2.length; childIdx++) {
                var nextChild = children2[childIdx];
                for (; chunkIdx < nextChild.index; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                r = flushSegment(request, destination, nextChild);
              }
              for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                writeChunk(destination, chunks[chunkIdx]);
              }
              if (chunkIdx < chunks.length) {
                r = writeChunkAndReturn(destination, chunks[chunkIdx]);
              }
              return r;
            }
            default: {
              throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
            }
          }
        }
        function flushSegment(request, destination, segment) {
          var boundary = segment.boundary;
          if (boundary === null) {
            return flushSubtree(request, destination, segment);
          }
          boundary.parentFlushed = true;
          if (boundary.forceClientRender) {
            writeStartClientRenderedSuspenseBoundary(destination, request.responseState);
            flushSubtree(request, destination, segment);
            return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
          } else if (boundary.pendingTasks > 0) {
            boundary.rootSegmentID = request.nextSegmentId++;
            if (boundary.completedSegments.length > 0) {
              request.partialBoundaries.push(boundary);
            }
            var id3 = boundary.id = assignSuspenseBoundaryID(request.responseState);
            writeStartPendingSuspenseBoundary(destination, request.responseState, id3);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else if (boundary.byteSize > request.progressiveChunkSize) {
            boundary.rootSegmentID = request.nextSegmentId++;
            request.completedBoundaries.push(boundary);
            writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
            flushSubtree(request, destination, segment);
            return writeEndPendingSuspenseBoundary(destination, request.responseState);
          } else {
            writeStartCompletedSuspenseBoundary(destination, request.responseState);
            var completedSegments = boundary.completedSegments;
            if (completedSegments.length !== 1) {
              throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
            }
            var contentSegment = completedSegments[0];
            flushSegment(request, destination, contentSegment);
            return writeEndCompletedSuspenseBoundary(destination, request.responseState);
          }
        }
        function flushClientRenderedBoundary(request, destination, boundary) {
          return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id);
        }
        function flushSegmentContainer(request, destination, segment) {
          writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
          flushSegment(request, destination, segment);
          return writeEndSegment(destination, segment.formatContext);
        }
        function flushCompletedBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i3 = 0;
          for (; i3 < completedSegments.length; i3++) {
            var segment = completedSegments[i3];
            flushPartiallyCompletedSegment(request, destination, boundary, segment);
          }
          completedSegments.length = 0;
          return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
        }
        function flushPartialBoundary(request, destination, boundary) {
          var completedSegments = boundary.completedSegments;
          var i3 = 0;
          for (; i3 < completedSegments.length; i3++) {
            var segment = completedSegments[i3];
            if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
              i3++;
              completedSegments.splice(0, i3);
              return false;
            }
          }
          completedSegments.splice(0, i3);
          return true;
        }
        function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
          if (segment.status === FLUSHED) {
            return true;
          }
          var segmentID = segment.id;
          if (segmentID === -1) {
            var rootSegmentID = segment.id = boundary.rootSegmentID;
            if (rootSegmentID === -1) {
              throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
            }
            return flushSegmentContainer(request, destination, segment);
          } else {
            flushSegmentContainer(request, destination, segment);
            return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
          }
        }
        function flushCompletedQueues(request, destination) {
          beginWriting();
          try {
            var completedRootSegment = request.completedRootSegment;
            if (completedRootSegment !== null && request.pendingRootTasks === 0) {
              flushSegment(request, destination, completedRootSegment);
              request.completedRootSegment = null;
              writeCompletedRoot(destination, request.responseState);
            }
            var clientRenderedBoundaries = request.clientRenderedBoundaries;
            var i3;
            for (i3 = 0; i3 < clientRenderedBoundaries.length; i3++) {
              var boundary = clientRenderedBoundaries[i3];
              if (!flushClientRenderedBoundary(request, destination, boundary)) {
                request.destination = null;
                i3++;
                clientRenderedBoundaries.splice(0, i3);
                return;
              }
            }
            clientRenderedBoundaries.splice(0, i3);
            var completedBoundaries = request.completedBoundaries;
            for (i3 = 0; i3 < completedBoundaries.length; i3++) {
              var _boundary = completedBoundaries[i3];
              if (!flushCompletedBoundary(request, destination, _boundary)) {
                request.destination = null;
                i3++;
                completedBoundaries.splice(0, i3);
                return;
              }
            }
            completedBoundaries.splice(0, i3);
            completeWriting(destination);
            beginWriting(destination);
            var partialBoundaries = request.partialBoundaries;
            for (i3 = 0; i3 < partialBoundaries.length; i3++) {
              var _boundary2 = partialBoundaries[i3];
              if (!flushPartialBoundary(request, destination, _boundary2)) {
                request.destination = null;
                i3++;
                partialBoundaries.splice(0, i3);
                return;
              }
            }
            partialBoundaries.splice(0, i3);
            var largeBoundaries = request.completedBoundaries;
            for (i3 = 0; i3 < largeBoundaries.length; i3++) {
              var _boundary3 = largeBoundaries[i3];
              if (!flushCompletedBoundary(request, destination, _boundary3)) {
                request.destination = null;
                i3++;
                largeBoundaries.splice(0, i3);
                return;
              }
            }
            largeBoundaries.splice(0, i3);
          } finally {
            completeWriting(destination);
            flushBuffered(destination);
            if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
              {
                if (request.abortableTasks.size !== 0) {
                  error3("There was still abortable task at the root when we closed. This is a bug in React.");
                }
              }
              close2(destination);
            }
          }
        }
        function startWork(request) {
          scheduleWork(function() {
            return performWork(request);
          });
        }
        function startFlowing(request, destination) {
          if (request.status === CLOSING) {
            request.status = CLOSED;
            closeWithError(destination, request.fatalError);
            return;
          }
          if (request.status === CLOSED) {
            return;
          }
          if (request.destination !== null) {
            return;
          }
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          }
        }
        function abort(request) {
          try {
            var abortableTasks = request.abortableTasks;
            abortableTasks.forEach(abortTask, request);
            abortableTasks.clear();
            if (request.destination !== null) {
              flushCompletedQueues(request, request.destination);
            }
          } catch (error4) {
            logRecoverableError(request, error4);
            fatalError(request, error4);
          }
        }
        function createDrainHandler(destination, request) {
          return function() {
            return startFlowing(request, destination);
          };
        }
        function createAbortHandler(request) {
          return function() {
            return abort(request);
          };
        }
        function createRequestImpl(children2, options2) {
          return createRequest(children2, createResponseState(options2 ? options2.identifierPrefix : void 0, options2 ? options2.nonce : void 0, options2 ? options2.bootstrapScriptContent : void 0, options2 ? options2.bootstrapScripts : void 0, options2 ? options2.bootstrapModules : void 0), createRootFormatContext(options2 ? options2.namespaceURI : void 0), options2 ? options2.progressiveChunkSize : void 0, options2 ? options2.onError : void 0, options2 ? options2.onAllReady : void 0, options2 ? options2.onShellReady : void 0, options2 ? options2.onShellError : void 0, void 0);
        }
        function renderToPipeableStream(children2, options2) {
          var request = createRequestImpl(children2, options2);
          var hasStartedFlowing = false;
          startWork(request);
          return {
            pipe: function(destination) {
              if (hasStartedFlowing) {
                throw new Error("React currently only supports piping to one writable stream.");
              }
              hasStartedFlowing = true;
              startFlowing(request, destination);
              destination.on("drain", createDrainHandler(destination, request));
              destination.on("close", createAbortHandler(request));
              return destination;
            },
            abort: function() {
              abort(request);
            }
          };
        }
        exports.renderToPipeableStream = renderToPipeableStream;
        exports.version = ReactVersion;
      })();
    }
  }
});

// node_modules/react-dom/server.node.js
var require_server_node = __commonJS({
  "node_modules/react-dom/server.node.js"(exports) {
    "use strict";
    var l;
    var s2;
    if (process.env.NODE_ENV === "production") {
      l = require_react_dom_server_legacy_node_production_min();
      s2 = require_react_dom_server_node_production_min();
    } else {
      l = require_react_dom_server_legacy_node_development();
      s2 = require_react_dom_server_node_development();
    }
    exports.version = l.version;
    exports.renderToString = l.renderToString;
    exports.renderToStaticMarkup = l.renderToStaticMarkup;
    exports.renderToNodeStream = l.renderToNodeStream;
    exports.renderToStaticNodeStream = l.renderToStaticNodeStream;
    exports.renderToPipeableStream = s2.renderToPipeableStream;
  }
});

// node_modules/scheduler/cjs/scheduler.production.min.js
var require_scheduler_production_min = __commonJS({
  "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
    "use strict";
    function f(a3, b3) {
      var c2 = a3.length;
      a3.push(b3);
      a:
        for (; 0 < c2; ) {
          var d = c2 - 1 >>> 1, e = a3[d];
          if (0 < g2(e, b3))
            a3[d] = b3, a3[c2] = e, c2 = d;
          else
            break a;
        }
    }
    function h(a3) {
      return a3.length === 0 ? null : a3[0];
    }
    function k(a3) {
      if (a3.length === 0)
        return null;
      var b3 = a3[0], c2 = a3.pop();
      if (c2 !== b3) {
        a3[0] = c2;
        a:
          for (var d = 0, e = a3.length, w = e >>> 1; d < w; ) {
            var m = 2 * (d + 1) - 1, C = a3[m], n = m + 1, x = a3[n];
            if (0 > g2(C, c2))
              n < e && 0 > g2(x, C) ? (a3[d] = x, a3[n] = c2, d = n) : (a3[d] = C, a3[m] = c2, d = m);
            else if (n < e && 0 > g2(x, c2))
              a3[d] = x, a3[n] = c2, d = n;
            else
              break a;
          }
      }
      return b3;
    }
    function g2(a3, b3) {
      var c2 = a3.sortIndex - b3.sortIndex;
      return c2 !== 0 ? c2 : a3.id - b3.id;
    }
    if (typeof performance === "object" && typeof performance.now === "function") {
      l = performance;
      exports.unstable_now = function() {
        return l.now();
      };
    } else {
      p2 = Date, q2 = p2.now();
      exports.unstable_now = function() {
        return p2.now() - q2;
      };
    }
    var l;
    var p2;
    var q2;
    var r = [];
    var t = [];
    var u2 = 1;
    var v = null;
    var y = 3;
    var z = false;
    var A = false;
    var B = false;
    var D = typeof setTimeout === "function" ? setTimeout : null;
    var E = typeof clearTimeout === "function" ? clearTimeout : null;
    var F = typeof setImmediate !== "undefined" ? setImmediate : null;
    typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function G(a3) {
      for (var b3 = h(t); b3 !== null; ) {
        if (b3.callback === null)
          k(t);
        else if (b3.startTime <= a3)
          k(t), b3.sortIndex = b3.expirationTime, f(r, b3);
        else
          break;
        b3 = h(t);
      }
    }
    function H(a3) {
      B = false;
      G(a3);
      if (!A)
        if (h(r) !== null)
          A = true, I(J);
        else {
          var b3 = h(t);
          b3 !== null && K(H, b3.startTime - a3);
        }
    }
    function J(a3, b3) {
      A = false;
      B && (B = false, E(L), L = -1);
      z = true;
      var c2 = y;
      try {
        G(b3);
        for (v = h(r); v !== null && (!(v.expirationTime > b3) || a3 && !M()); ) {
          var d = v.callback;
          if (typeof d === "function") {
            v.callback = null;
            y = v.priorityLevel;
            var e = d(v.expirationTime <= b3);
            b3 = exports.unstable_now();
            typeof e === "function" ? v.callback = e : v === h(r) && k(r);
            G(b3);
          } else
            k(r);
          v = h(r);
        }
        if (v !== null)
          var w = true;
        else {
          var m = h(t);
          m !== null && K(H, m.startTime - b3);
          w = false;
        }
        return w;
      } finally {
        v = null, y = c2, z = false;
      }
    }
    var N = false;
    var O = null;
    var L = -1;
    var P = 5;
    var Q = -1;
    function M() {
      return exports.unstable_now() - Q < P ? false : true;
    }
    function R() {
      if (O !== null) {
        var a3 = exports.unstable_now();
        Q = a3;
        var b3 = true;
        try {
          b3 = O(true, a3);
        } finally {
          b3 ? S() : (N = false, O = null);
        }
      } else
        N = false;
    }
    var S;
    if (typeof F === "function")
      S = function() {
        F(R);
      };
    else if (typeof MessageChannel !== "undefined") {
      T = new MessageChannel(), U = T.port2;
      T.port1.onmessage = R;
      S = function() {
        U.postMessage(null);
      };
    } else
      S = function() {
        D(R, 0);
      };
    var T;
    var U;
    function I(a3) {
      O = a3;
      N || (N = true, S());
    }
    function K(a3, b3) {
      L = D(function() {
        a3(exports.unstable_now());
      }, b3);
    }
    exports.unstable_IdlePriority = 5;
    exports.unstable_ImmediatePriority = 1;
    exports.unstable_LowPriority = 4;
    exports.unstable_NormalPriority = 3;
    exports.unstable_Profiling = null;
    exports.unstable_UserBlockingPriority = 2;
    exports.unstable_cancelCallback = function(a3) {
      a3.callback = null;
    };
    exports.unstable_continueExecution = function() {
      A || z || (A = true, I(J));
    };
    exports.unstable_forceFrameRate = function(a3) {
      0 > a3 || 125 < a3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a3 ? Math.floor(1e3 / a3) : 5;
    };
    exports.unstable_getCurrentPriorityLevel = function() {
      return y;
    };
    exports.unstable_getFirstCallbackNode = function() {
      return h(r);
    };
    exports.unstable_next = function(a3) {
      switch (y) {
        case 1:
        case 2:
        case 3:
          var b3 = 3;
          break;
        default:
          b3 = y;
      }
      var c2 = y;
      y = b3;
      try {
        return a3();
      } finally {
        y = c2;
      }
    };
    exports.unstable_pauseExecution = function() {
    };
    exports.unstable_requestPaint = function() {
    };
    exports.unstable_runWithPriority = function(a3, b3) {
      switch (a3) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          a3 = 3;
      }
      var c2 = y;
      y = a3;
      try {
        return b3();
      } finally {
        y = c2;
      }
    };
    exports.unstable_scheduleCallback = function(a3, b3, c2) {
      var d = exports.unstable_now();
      typeof c2 === "object" && c2 !== null ? (c2 = c2.delay, c2 = typeof c2 === "number" && 0 < c2 ? d + c2 : d) : c2 = d;
      switch (a3) {
        case 1:
          var e = -1;
          break;
        case 2:
          e = 250;
          break;
        case 5:
          e = 1073741823;
          break;
        case 4:
          e = 1e4;
          break;
        default:
          e = 5e3;
      }
      e = c2 + e;
      a3 = { id: u2++, callback: b3, priorityLevel: a3, startTime: c2, expirationTime: e, sortIndex: -1 };
      c2 > d ? (a3.sortIndex = c2, f(t, a3), h(r) === null && a3 === h(t) && (B ? (E(L), L = -1) : B = true, K(H, c2 - d))) : (a3.sortIndex = e, f(r, a3), A || z || (A = true, I(J)));
      return a3;
    };
    exports.unstable_shouldYield = M;
    exports.unstable_wrapCallback = function(a3) {
      var b3 = y;
      return function() {
        var c2 = y;
        y = b3;
        try {
          return a3.apply(this, arguments);
        } finally {
          y = c2;
        }
      };
    };
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push2(heap, node) {
          var index6 = heap.length;
          heap.push(node);
          siftUp(heap, node, index6);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop2(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first2 = heap[0];
          var last4 = heap.pop();
          if (last4 !== first2) {
            heap[0] = last4;
            siftDown(heap, last4, 0);
          }
          return first2;
        }
        function siftUp(heap, node, i3) {
          var index6 = i3;
          while (index6 > 0) {
            var parentIndex = index6 - 1 >>> 1;
            var parent2 = heap[parentIndex];
            if (compare4(parent2, node) > 0) {
              heap[parentIndex] = node;
              heap[index6] = parent2;
              index6 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i3) {
          var index6 = i3;
          var length8 = heap.length;
          var halfLength = length8 >>> 1;
          while (index6 < halfLength) {
            var leftIndex = (index6 + 1) * 2 - 1;
            var left4 = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right3 = heap[rightIndex];
            if (compare4(left4, node) < 0) {
              if (rightIndex < length8 && compare4(right3, left4) < 0) {
                heap[index6] = right3;
                heap[rightIndex] = node;
                index6 = rightIndex;
              } else {
                heap[index6] = left4;
                heap[leftIndex] = node;
                index6 = leftIndex;
              }
            } else if (rightIndex < length8 && compare4(right3, node) < 0) {
              heap[index6] = right3;
              heap[rightIndex] = node;
              index6 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare4(a3, b3) {
          var diff = a3.sortIndex - b3.sortIndex;
          return diff !== 0 ? diff : a3.id - b3.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime2) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop2(timerQueue);
            } else if (timer.startTime <= currentTime2) {
              pop2(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push2(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime2) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime2);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error3) {
                if (currentTask !== null) {
                  var currentTime2 = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime2);
                  currentTask.isQueued = false;
                }
                throw error3;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime2 = initialTime2;
          advanceTimers(currentTime2);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime2 && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback2 = currentTask.callback;
            if (typeof callback2 === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime2;
              var continuationCallback = callback2(didUserCallbackTimeout);
              currentTime2 = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop2(taskQueue);
                }
              }
              advanceTimers(currentTime2);
            } else {
              pop2(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback2) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback2.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback2, options2) {
          var currentTime2 = exports.unstable_now();
          var startTime2;
          if (typeof options2 === "object" && options2 !== null) {
            var delay2 = options2.delay;
            if (typeof delay2 === "number" && delay2 > 0) {
              startTime2 = currentTime2 + delay2;
            } else {
              startTime2 = currentTime2;
            }
          } else {
            startTime2 = currentTime2;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback: callback2,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime2) {
            newTask.sortIndex = startTime2;
            push2(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime2);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push2(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime2 = exports.unstable_now();
            startTime = currentTime2;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime2);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port2 = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port2.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback2) {
          scheduledHostCallback = callback2;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback2, ms) {
          taskTimeoutID = localSetTimeout(function() {
            callback2(exports.unstable_now());
          }, ms);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/scheduler/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_scheduler_production_min();
    } else {
      module2.exports = require_scheduler_development();
    }
  }
});

// node_modules/react-dom/cjs/react-dom.production.min.js
var require_react_dom_production_min = __commonJS({
  "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
    "use strict";
    var aa = require_react();
    var ba = require_scheduler();
    function p2(a3) {
      for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c2 = 1; c2 < arguments.length; c2++)
        b3 += "&args[]=" + encodeURIComponent(arguments[c2]);
      return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set();
    var ea = {};
    function fa(a3, b3) {
      ha(a3, b3);
      ha(a3 + "Capture", b3);
    }
    function ha(a3, b3) {
      ea[a3] = b3;
      for (a3 = 0; a3 < b3.length; a3++)
        da.add(b3[a3]);
    }
    var ia = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined");
    var ja = Object.prototype.hasOwnProperty;
    var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
    var la = {};
    var ma = {};
    function na(a3) {
      if (ja.call(ma, a3))
        return true;
      if (ja.call(la, a3))
        return false;
      if (ka.test(a3))
        return ma[a3] = true;
      la[a3] = true;
      return false;
    }
    function oa(a3, b3, c2, d) {
      if (c2 !== null && c2.type === 0)
        return false;
      switch (typeof b3) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d)
            return false;
          if (c2 !== null)
            return !c2.acceptsBooleans;
          a3 = a3.toLowerCase().slice(0, 5);
          return a3 !== "data-" && a3 !== "aria-";
        default:
          return false;
      }
    }
    function pa(a3, b3, c2, d) {
      if (b3 === null || typeof b3 === "undefined" || oa(a3, b3, c2, d))
        return true;
      if (d)
        return false;
      if (c2 !== null)
        switch (c2.type) {
          case 3:
            return !b3;
          case 4:
            return b3 === false;
          case 5:
            return isNaN(b3);
          case 6:
            return isNaN(b3) || 1 > b3;
        }
      return false;
    }
    function t(a3, b3, c2, d, e, f, g2) {
      this.acceptsBooleans = b3 === 2 || b3 === 3 || b3 === 4;
      this.attributeName = d;
      this.attributeNamespace = e;
      this.mustUseProperty = c2;
      this.propertyName = a3;
      this.type = b3;
      this.sanitizeURL = f;
      this.removeEmptyString = g2;
    }
    var z = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
      z[a3] = new t(a3, 0, false, a3, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
      var b3 = a3[0];
      z[b3] = new t(b3, 1, false, a3[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
      z[a3] = new t(a3, 2, false, a3.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
      z[a3] = new t(a3, 2, false, a3, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
      z[a3] = new t(a3, 3, false, a3.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
      z[a3] = new t(a3, 3, true, a3, null, false, false);
    });
    ["capture", "download"].forEach(function(a3) {
      z[a3] = new t(a3, 4, false, a3, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a3) {
      z[a3] = new t(a3, 6, false, a3, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a3) {
      z[a3] = new t(a3, 5, false, a3.toLowerCase(), null, false, false);
    });
    var qa = /[\-:]([a-z])/g;
    function ra(a3) {
      return a3[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
      var b3 = a3.replace(qa, ra);
      z[b3] = new t(b3, 1, false, a3, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
      var b3 = a3.replace(qa, ra);
      z[b3] = new t(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
      var b3 = a3.replace(qa, ra);
      z[b3] = new t(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a3) {
      z[a3] = new t(a3, 1, false, a3.toLowerCase(), null, false, false);
    });
    z.xlinkHref = new t("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a3) {
      z[a3] = new t(a3, 1, false, a3.toLowerCase(), null, true, true);
    });
    function sa(a3, b3, c2, d) {
      var e = z.hasOwnProperty(b3) ? z[b3] : null;
      if (e !== null ? e.type !== 0 : d || !(2 < b3.length) || b3[0] !== "o" && b3[0] !== "O" || b3[1] !== "n" && b3[1] !== "N")
        pa(b3, c2, e, d) && (c2 = null), d || e === null ? na(b3) && (c2 === null ? a3.removeAttribute(b3) : a3.setAttribute(b3, "" + c2)) : e.mustUseProperty ? a3[e.propertyName] = c2 === null ? e.type === 3 ? false : "" : c2 : (b3 = e.attributeName, d = e.attributeNamespace, c2 === null ? a3.removeAttribute(b3) : (e = e.type, c2 = e === 3 || e === 4 && c2 === true ? "" : "" + c2, d ? a3.setAttributeNS(d, b3, c2) : a3.setAttribute(b3, c2)));
    }
    var ta = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var ua = Symbol.for("react.element");
    var va = Symbol.for("react.portal");
    var wa = Symbol.for("react.fragment");
    var xa = Symbol.for("react.strict_mode");
    var za = Symbol.for("react.profiler");
    var Aa = Symbol.for("react.provider");
    var Ba = Symbol.for("react.context");
    var Ca = Symbol.for("react.forward_ref");
    var Da = Symbol.for("react.suspense");
    var Ea = Symbol.for("react.suspense_list");
    var Fa = Symbol.for("react.memo");
    var Ga = Symbol.for("react.lazy");
    Symbol.for("react.scope");
    Symbol.for("react.debug_trace_mode");
    var Ha = Symbol.for("react.offscreen");
    Symbol.for("react.legacy_hidden");
    Symbol.for("react.cache");
    Symbol.for("react.tracing_marker");
    var Ia = Symbol.iterator;
    function Ja(a3) {
      if (a3 === null || typeof a3 !== "object")
        return null;
      a3 = Ia && a3[Ia] || a3["@@iterator"];
      return typeof a3 === "function" ? a3 : null;
    }
    var A = Object.assign;
    var Ka;
    function La(a3) {
      if (Ka === void 0)
        try {
          throw Error();
        } catch (c2) {
          var b3 = c2.stack.trim().match(/\n( *(at )?)/);
          Ka = b3 && b3[1] || "";
        }
      return "\n" + Ka + a3;
    }
    var Ma = false;
    function Na(a3, b3) {
      if (!a3 || Ma)
        return "";
      Ma = true;
      var c2 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b3)
          if (b3 = function() {
            throw Error();
          }, Object.defineProperty(b3.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(b3, []);
            } catch (l) {
              var d = l;
            }
            Reflect.construct(a3, [], b3);
          } else {
            try {
              b3.call();
            } catch (l) {
              d = l;
            }
            a3.call(b3.prototype);
          }
        else {
          try {
            throw Error();
          } catch (l) {
            d = l;
          }
          a3();
        }
      } catch (l) {
        if (l && d && typeof l.stack === "string") {
          for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g2 = e.length - 1, h = f.length - 1; 1 <= g2 && 0 <= h && e[g2] !== f[h]; )
            h--;
          for (; 1 <= g2 && 0 <= h; g2--, h--)
            if (e[g2] !== f[h]) {
              if (g2 !== 1 || h !== 1) {
                do
                  if (g2--, h--, 0 > h || e[g2] !== f[h]) {
                    var k = "\n" + e[g2].replace(" at new ", " at ");
                    a3.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a3.displayName));
                    return k;
                  }
                while (1 <= g2 && 0 <= h);
              }
              break;
            }
        }
      } finally {
        Ma = false, Error.prepareStackTrace = c2;
      }
      return (a3 = a3 ? a3.displayName || a3.name : "") ? La(a3) : "";
    }
    function Oa(a3) {
      switch (a3.tag) {
        case 5:
          return La(a3.type);
        case 16:
          return La("Lazy");
        case 13:
          return La("Suspense");
        case 19:
          return La("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a3 = Na(a3.type, false), a3;
        case 11:
          return a3 = Na(a3.type.render, false), a3;
        case 1:
          return a3 = Na(a3.type, true), a3;
        default:
          return "";
      }
    }
    function Pa(a3) {
      if (a3 == null)
        return null;
      if (typeof a3 === "function")
        return a3.displayName || a3.name || null;
      if (typeof a3 === "string")
        return a3;
      switch (a3) {
        case wa:
          return "Fragment";
        case va:
          return "Portal";
        case za:
          return "Profiler";
        case xa:
          return "StrictMode";
        case Da:
          return "Suspense";
        case Ea:
          return "SuspenseList";
      }
      if (typeof a3 === "object")
        switch (a3.$$typeof) {
          case Ba:
            return (a3.displayName || "Context") + ".Consumer";
          case Aa:
            return (a3._context.displayName || "Context") + ".Provider";
          case Ca:
            var b3 = a3.render;
            a3 = a3.displayName;
            a3 || (a3 = b3.displayName || b3.name || "", a3 = a3 !== "" ? "ForwardRef(" + a3 + ")" : "ForwardRef");
            return a3;
          case Fa:
            return b3 = a3.displayName || null, b3 !== null ? b3 : Pa(a3.type) || "Memo";
          case Ga:
            b3 = a3._payload;
            a3 = a3._init;
            try {
              return Pa(a3(b3));
            } catch (c2) {
            }
        }
      return null;
    }
    function Qa(a3) {
      var b3 = a3.type;
      switch (a3.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b3.displayName || "Context") + ".Consumer";
        case 10:
          return (b3._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a3 = b3.render, a3 = a3.displayName || a3.name || "", b3.displayName || (a3 !== "" ? "ForwardRef(" + a3 + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b3;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Pa(b3);
        case 8:
          return b3 === xa ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof b3 === "function")
            return b3.displayName || b3.name || null;
          if (typeof b3 === "string")
            return b3;
      }
      return null;
    }
    function Ra(a3) {
      switch (typeof a3) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a3;
        case "object":
          return a3;
        default:
          return "";
      }
    }
    function Sa(a3) {
      var b3 = a3.type;
      return (a3 = a3.nodeName) && a3.toLowerCase() === "input" && (b3 === "checkbox" || b3 === "radio");
    }
    function Ta(a3) {
      var b3 = Sa(a3) ? "checked" : "value", c2 = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b3), d = "" + a3[b3];
      if (!a3.hasOwnProperty(b3) && typeof c2 !== "undefined" && typeof c2.get === "function" && typeof c2.set === "function") {
        var e = c2.get, f = c2.set;
        Object.defineProperty(a3, b3, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(a4) {
          d = "" + a4;
          f.call(this, a4);
        } });
        Object.defineProperty(a3, b3, { enumerable: c2.enumerable });
        return { getValue: function() {
          return d;
        }, setValue: function(a4) {
          d = "" + a4;
        }, stopTracking: function() {
          a3._valueTracker = null;
          delete a3[b3];
        } };
      }
    }
    function Ua(a3) {
      a3._valueTracker || (a3._valueTracker = Ta(a3));
    }
    function Va(a3) {
      if (!a3)
        return false;
      var b3 = a3._valueTracker;
      if (!b3)
        return true;
      var c2 = b3.getValue();
      var d = "";
      a3 && (d = Sa(a3) ? a3.checked ? "true" : "false" : a3.value);
      a3 = d;
      return a3 !== c2 ? (b3.setValue(a3), true) : false;
    }
    function Wa(a3) {
      a3 = a3 || (typeof document !== "undefined" ? document : void 0);
      if (typeof a3 === "undefined")
        return null;
      try {
        return a3.activeElement || a3.body;
      } catch (b3) {
        return a3.body;
      }
    }
    function Xa(a3, b3) {
      var c2 = b3.checked;
      return A({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: c2 != null ? c2 : a3._wrapperState.initialChecked });
    }
    function Ya(a3, b3) {
      var c2 = b3.defaultValue == null ? "" : b3.defaultValue, d = b3.checked != null ? b3.checked : b3.defaultChecked;
      c2 = Ra(b3.value != null ? b3.value : c2);
      a3._wrapperState = { initialChecked: d, initialValue: c2, controlled: b3.type === "checkbox" || b3.type === "radio" ? b3.checked != null : b3.value != null };
    }
    function Za(a3, b3) {
      b3 = b3.checked;
      b3 != null && sa(a3, "checked", b3, false);
    }
    function $a(a3, b3) {
      Za(a3, b3);
      var c2 = Ra(b3.value), d = b3.type;
      if (c2 != null)
        if (d === "number") {
          if (c2 === 0 && a3.value === "" || a3.value != c2)
            a3.value = "" + c2;
        } else
          a3.value !== "" + c2 && (a3.value = "" + c2);
      else if (d === "submit" || d === "reset") {
        a3.removeAttribute("value");
        return;
      }
      b3.hasOwnProperty("value") ? bb(a3, b3.type, c2) : b3.hasOwnProperty("defaultValue") && bb(a3, b3.type, Ra(b3.defaultValue));
      b3.checked == null && b3.defaultChecked != null && (a3.defaultChecked = !!b3.defaultChecked);
    }
    function cb2(a3, b3, c2) {
      if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
        var d = b3.type;
        if (!(d !== "submit" && d !== "reset" || b3.value !== void 0 && b3.value !== null))
          return;
        b3 = "" + a3._wrapperState.initialValue;
        c2 || b3 === a3.value || (a3.value = b3);
        a3.defaultValue = b3;
      }
      c2 = a3.name;
      c2 !== "" && (a3.name = "");
      a3.defaultChecked = !!a3._wrapperState.initialChecked;
      c2 !== "" && (a3.name = c2);
    }
    function bb(a3, b3, c2) {
      if (b3 !== "number" || Wa(a3.ownerDocument) !== a3)
        c2 == null ? a3.defaultValue = "" + a3._wrapperState.initialValue : a3.defaultValue !== "" + c2 && (a3.defaultValue = "" + c2);
    }
    var db = Array.isArray;
    function eb(a3, b3, c2, d) {
      a3 = a3.options;
      if (b3) {
        b3 = {};
        for (var e = 0; e < c2.length; e++)
          b3["$" + c2[e]] = true;
        for (c2 = 0; c2 < a3.length; c2++)
          e = b3.hasOwnProperty("$" + a3[c2].value), a3[c2].selected !== e && (a3[c2].selected = e), e && d && (a3[c2].defaultSelected = true);
      } else {
        c2 = "" + Ra(c2);
        b3 = null;
        for (e = 0; e < a3.length; e++) {
          if (a3[e].value === c2) {
            a3[e].selected = true;
            d && (a3[e].defaultSelected = true);
            return;
          }
          b3 !== null || a3[e].disabled || (b3 = a3[e]);
        }
        b3 !== null && (b3.selected = true);
      }
    }
    function fb(a3, b3) {
      if (b3.dangerouslySetInnerHTML != null)
        throw Error(p2(91));
      return A({}, b3, { value: void 0, defaultValue: void 0, children: "" + a3._wrapperState.initialValue });
    }
    function gb(a3, b3) {
      var c2 = b3.value;
      if (c2 == null) {
        c2 = b3.children;
        b3 = b3.defaultValue;
        if (c2 != null) {
          if (b3 != null)
            throw Error(p2(92));
          if (db(c2)) {
            if (1 < c2.length)
              throw Error(p2(93));
            c2 = c2[0];
          }
          b3 = c2;
        }
        b3 == null && (b3 = "");
        c2 = b3;
      }
      a3._wrapperState = { initialValue: Ra(c2) };
    }
    function hb(a3, b3) {
      var c2 = Ra(b3.value), d = Ra(b3.defaultValue);
      c2 != null && (c2 = "" + c2, c2 !== a3.value && (a3.value = c2), b3.defaultValue == null && a3.defaultValue !== c2 && (a3.defaultValue = c2));
      d != null && (a3.defaultValue = "" + d);
    }
    function ib(a3) {
      var b3 = a3.textContent;
      b3 === a3._wrapperState.initialValue && b3 !== "" && b3 !== null && (a3.value = b3);
    }
    function jb(a3) {
      switch (a3) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function kb(a3, b3) {
      return a3 == null || a3 === "http://www.w3.org/1999/xhtml" ? jb(b3) : a3 === "http://www.w3.org/2000/svg" && b3 === "foreignObject" ? "http://www.w3.org/1999/xhtml" : a3;
    }
    var lb;
    var mb = function(a3) {
      return typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction ? function(b3, c2, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a3(b3, c2, d, e);
        });
      } : a3;
    }(function(a3, b3) {
      if (a3.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in a3)
        a3.innerHTML = b3;
      else {
        lb = lb || document.createElement("div");
        lb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
        for (b3 = lb.firstChild; a3.firstChild; )
          a3.removeChild(a3.firstChild);
        for (; b3.firstChild; )
          a3.appendChild(b3.firstChild);
      }
    });
    function nb(a3, b3) {
      if (b3) {
        var c2 = a3.firstChild;
        if (c2 && c2 === a3.lastChild && c2.nodeType === 3) {
          c2.nodeValue = b3;
          return;
        }
      }
      a3.textContent = b3;
    }
    var ob = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    var pb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(ob).forEach(function(a3) {
      pb.forEach(function(b3) {
        b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
        ob[b3] = ob[a3];
      });
    });
    function qb(a3, b3, c2) {
      return b3 == null || typeof b3 === "boolean" || b3 === "" ? "" : c2 || typeof b3 !== "number" || b3 === 0 || ob.hasOwnProperty(a3) && ob[a3] ? ("" + b3).trim() : b3 + "px";
    }
    function rb2(a3, b3) {
      a3 = a3.style;
      for (var c2 in b3)
        if (b3.hasOwnProperty(c2)) {
          var d = c2.indexOf("--") === 0, e = qb(c2, b3[c2], d);
          c2 === "float" && (c2 = "cssFloat");
          d ? a3.setProperty(c2, e) : a3[c2] = e;
        }
    }
    var sb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function tb(a3, b3) {
      if (b3) {
        if (sb[a3] && (b3.children != null || b3.dangerouslySetInnerHTML != null))
          throw Error(p2(137, a3));
        if (b3.dangerouslySetInnerHTML != null) {
          if (b3.children != null)
            throw Error(p2(60));
          if (typeof b3.dangerouslySetInnerHTML !== "object" || !("__html" in b3.dangerouslySetInnerHTML))
            throw Error(p2(61));
        }
        if (b3.style != null && typeof b3.style !== "object")
          throw Error(p2(62));
      }
    }
    function ub(a3, b3) {
      if (a3.indexOf("-") === -1)
        return typeof b3.is === "string";
      switch (a3) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var vb = null;
    function wb(a3) {
      a3 = a3.target || a3.srcElement || window;
      a3.correspondingUseElement && (a3 = a3.correspondingUseElement);
      return a3.nodeType === 3 ? a3.parentNode : a3;
    }
    var xb = null;
    var yb = null;
    var zb = null;
    function Ab(a3) {
      if (a3 = Bb(a3)) {
        if (typeof xb !== "function")
          throw Error(p2(280));
        var b3 = a3.stateNode;
        b3 && (b3 = Cb(b3), xb(a3.stateNode, a3.type, b3));
      }
    }
    function Db(a3) {
      yb ? zb ? zb.push(a3) : zb = [a3] : yb = a3;
    }
    function Eb() {
      if (yb) {
        var a3 = yb, b3 = zb;
        zb = yb = null;
        Ab(a3);
        if (b3)
          for (a3 = 0; a3 < b3.length; a3++)
            Ab(b3[a3]);
      }
    }
    function Fb(a3, b3) {
      return a3(b3);
    }
    function Gb() {
    }
    var Hb = false;
    function Ib(a3, b3, c2) {
      if (Hb)
        return a3(b3, c2);
      Hb = true;
      try {
        return Fb(a3, b3, c2);
      } finally {
        if (Hb = false, yb !== null || zb !== null)
          Gb(), Eb();
      }
    }
    function Jb(a3, b3) {
      var c2 = a3.stateNode;
      if (c2 === null)
        return null;
      var d = Cb(c2);
      if (d === null)
        return null;
      c2 = d[b3];
      a:
        switch (b3) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d = !d.disabled) || (a3 = a3.type, d = !(a3 === "button" || a3 === "input" || a3 === "select" || a3 === "textarea"));
            a3 = !d;
            break a;
          default:
            a3 = false;
        }
      if (a3)
        return null;
      if (c2 && typeof c2 !== "function")
        throw Error(p2(231, b3, typeof c2));
      return c2;
    }
    var Kb = false;
    if (ia)
      try {
        Lb = {};
        Object.defineProperty(Lb, "passive", { get: function() {
          Kb = true;
        } });
        window.addEventListener("test", Lb, Lb);
        window.removeEventListener("test", Lb, Lb);
      } catch (a3) {
        Kb = false;
      }
    var Lb;
    function Mb(a3, b3, c2, d, e, f, g2, h, k) {
      var l = Array.prototype.slice.call(arguments, 3);
      try {
        b3.apply(c2, l);
      } catch (n) {
        this.onError(n);
      }
    }
    var Nb = false;
    var Ob = null;
    var Pb = false;
    var Qb = null;
    var Rb = { onError: function(a3) {
      Nb = true;
      Ob = a3;
    } };
    function Sb(a3, b3, c2, d, e, f, g2, h, k) {
      Nb = false;
      Ob = null;
      Mb.apply(Rb, arguments);
    }
    function Tb(a3, b3, c2, d, e, f, g2, h, k) {
      Sb.apply(this, arguments);
      if (Nb) {
        if (Nb) {
          var l = Ob;
          Nb = false;
          Ob = null;
        } else
          throw Error(p2(198));
        Pb || (Pb = true, Qb = l);
      }
    }
    function Ub(a3) {
      var b3 = a3, c2 = a3;
      if (a3.alternate)
        for (; b3.return; )
          b3 = b3.return;
      else {
        a3 = b3;
        do
          b3 = a3, (b3.flags & 4098) !== 0 && (c2 = b3.return), a3 = b3.return;
        while (a3);
      }
      return b3.tag === 3 ? c2 : null;
    }
    function Vb(a3) {
      if (a3.tag === 13) {
        var b3 = a3.memoizedState;
        b3 === null && (a3 = a3.alternate, a3 !== null && (b3 = a3.memoizedState));
        if (b3 !== null)
          return b3.dehydrated;
      }
      return null;
    }
    function Wb(a3) {
      if (Ub(a3) !== a3)
        throw Error(p2(188));
    }
    function Xb(a3) {
      var b3 = a3.alternate;
      if (!b3) {
        b3 = Ub(a3);
        if (b3 === null)
          throw Error(p2(188));
        return b3 !== a3 ? null : a3;
      }
      for (var c2 = a3, d = b3; ; ) {
        var e = c2.return;
        if (e === null)
          break;
        var f = e.alternate;
        if (f === null) {
          d = e.return;
          if (d !== null) {
            c2 = d;
            continue;
          }
          break;
        }
        if (e.child === f.child) {
          for (f = e.child; f; ) {
            if (f === c2)
              return Wb(e), a3;
            if (f === d)
              return Wb(e), b3;
            f = f.sibling;
          }
          throw Error(p2(188));
        }
        if (c2.return !== d.return)
          c2 = e, d = f;
        else {
          for (var g2 = false, h = e.child; h; ) {
            if (h === c2) {
              g2 = true;
              c2 = e;
              d = f;
              break;
            }
            if (h === d) {
              g2 = true;
              d = e;
              c2 = f;
              break;
            }
            h = h.sibling;
          }
          if (!g2) {
            for (h = f.child; h; ) {
              if (h === c2) {
                g2 = true;
                c2 = f;
                d = e;
                break;
              }
              if (h === d) {
                g2 = true;
                d = f;
                c2 = e;
                break;
              }
              h = h.sibling;
            }
            if (!g2)
              throw Error(p2(189));
          }
        }
        if (c2.alternate !== d)
          throw Error(p2(190));
      }
      if (c2.tag !== 3)
        throw Error(p2(188));
      return c2.stateNode.current === c2 ? a3 : b3;
    }
    function Yb(a3) {
      a3 = Xb(a3);
      return a3 !== null ? Zb(a3) : null;
    }
    function Zb(a3) {
      if (a3.tag === 5 || a3.tag === 6)
        return a3;
      for (a3 = a3.child; a3 !== null; ) {
        var b3 = Zb(a3);
        if (b3 !== null)
          return b3;
        a3 = a3.sibling;
      }
      return null;
    }
    var $b = ba.unstable_scheduleCallback;
    var ac = ba.unstable_cancelCallback;
    var bc = ba.unstable_shouldYield;
    var cc2 = ba.unstable_requestPaint;
    var B = ba.unstable_now;
    var dc = ba.unstable_getCurrentPriorityLevel;
    var ec = ba.unstable_ImmediatePriority;
    var fc = ba.unstable_UserBlockingPriority;
    var gc = ba.unstable_NormalPriority;
    var hc = ba.unstable_LowPriority;
    var ic = ba.unstable_IdlePriority;
    var jc = null;
    var kc = null;
    function lc(a3) {
      if (kc && typeof kc.onCommitFiberRoot === "function")
        try {
          kc.onCommitFiberRoot(jc, a3, void 0, (a3.current.flags & 128) === 128);
        } catch (b3) {
        }
    }
    var nc = Math.clz32 ? Math.clz32 : mc;
    var oc = Math.log;
    var pc = Math.LN2;
    function mc(a3) {
      a3 >>>= 0;
      return a3 === 0 ? 32 : 31 - (oc(a3) / pc | 0) | 0;
    }
    var qc = 64;
    var rc = 4194304;
    function sc(a3) {
      switch (a3 & -a3) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a3 & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a3 & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a3;
      }
    }
    function tc(a3, b3) {
      var c2 = a3.pendingLanes;
      if (c2 === 0)
        return 0;
      var d = 0, e = a3.suspendedLanes, f = a3.pingedLanes, g2 = c2 & 268435455;
      if (g2 !== 0) {
        var h = g2 & ~e;
        h !== 0 ? d = sc(h) : (f &= g2, f !== 0 && (d = sc(f)));
      } else
        g2 = c2 & ~e, g2 !== 0 ? d = sc(g2) : f !== 0 && (d = sc(f));
      if (d === 0)
        return 0;
      if (b3 !== 0 && b3 !== d && (b3 & e) === 0 && (e = d & -d, f = b3 & -b3, e >= f || e === 16 && (f & 4194240) !== 0))
        return b3;
      (d & 4) !== 0 && (d |= c2 & 16);
      b3 = a3.entangledLanes;
      if (b3 !== 0)
        for (a3 = a3.entanglements, b3 &= d; 0 < b3; )
          c2 = 31 - nc(b3), e = 1 << c2, d |= a3[c2], b3 &= ~e;
      return d;
    }
    function uc(a3, b3) {
      switch (a3) {
        case 1:
        case 2:
        case 4:
          return b3 + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b3 + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function vc(a3, b3) {
      for (var c2 = a3.suspendedLanes, d = a3.pingedLanes, e = a3.expirationTimes, f = a3.pendingLanes; 0 < f; ) {
        var g2 = 31 - nc(f), h = 1 << g2, k = e[g2];
        if (k === -1) {
          if ((h & c2) === 0 || (h & d) !== 0)
            e[g2] = uc(h, b3);
        } else
          k <= b3 && (a3.expiredLanes |= h);
        f &= ~h;
      }
    }
    function wc(a3) {
      a3 = a3.pendingLanes & -1073741825;
      return a3 !== 0 ? a3 : a3 & 1073741824 ? 1073741824 : 0;
    }
    function xc() {
      var a3 = qc;
      qc <<= 1;
      (qc & 4194240) === 0 && (qc = 64);
      return a3;
    }
    function yc(a3) {
      for (var b3 = [], c2 = 0; 31 > c2; c2++)
        b3.push(a3);
      return b3;
    }
    function zc(a3, b3, c2) {
      a3.pendingLanes |= b3;
      b3 !== 536870912 && (a3.suspendedLanes = 0, a3.pingedLanes = 0);
      a3 = a3.eventTimes;
      b3 = 31 - nc(b3);
      a3[b3] = c2;
    }
    function Ac(a3, b3) {
      var c2 = a3.pendingLanes & ~b3;
      a3.pendingLanes = b3;
      a3.suspendedLanes = 0;
      a3.pingedLanes = 0;
      a3.expiredLanes &= b3;
      a3.mutableReadLanes &= b3;
      a3.entangledLanes &= b3;
      b3 = a3.entanglements;
      var d = a3.eventTimes;
      for (a3 = a3.expirationTimes; 0 < c2; ) {
        var e = 31 - nc(c2), f = 1 << e;
        b3[e] = 0;
        d[e] = -1;
        a3[e] = -1;
        c2 &= ~f;
      }
    }
    function Bc(a3, b3) {
      var c2 = a3.entangledLanes |= b3;
      for (a3 = a3.entanglements; c2; ) {
        var d = 31 - nc(c2), e = 1 << d;
        e & b3 | a3[d] & b3 && (a3[d] |= b3);
        c2 &= ~e;
      }
    }
    var C = 0;
    function Cc(a3) {
      a3 &= -a3;
      return 1 < a3 ? 4 < a3 ? (a3 & 268435455) !== 0 ? 16 : 536870912 : 4 : 1;
    }
    var Dc;
    var Ec;
    var Fc;
    var Gc;
    var Hc;
    var Ic = false;
    var Jc = [];
    var Kc = null;
    var Lc = null;
    var Mc = null;
    var Nc = /* @__PURE__ */ new Map();
    var Oc = /* @__PURE__ */ new Map();
    var Pc = [];
    var Qc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Rc(a3, b3) {
      switch (a3) {
        case "focusin":
        case "focusout":
          Kc = null;
          break;
        case "dragenter":
        case "dragleave":
          Lc = null;
          break;
        case "mouseover":
        case "mouseout":
          Mc = null;
          break;
        case "pointerover":
        case "pointerout":
          Nc.delete(b3.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Oc.delete(b3.pointerId);
      }
    }
    function Sc(a3, b3, c2, d, e, f) {
      if (a3 === null || a3.nativeEvent !== f)
        return a3 = { blockedOn: b3, domEventName: c2, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, b3 !== null && (b3 = Bb(b3), b3 !== null && Ec(b3)), a3;
      a3.eventSystemFlags |= d;
      b3 = a3.targetContainers;
      e !== null && b3.indexOf(e) === -1 && b3.push(e);
      return a3;
    }
    function Tc(a3, b3, c2, d, e) {
      switch (b3) {
        case "focusin":
          return Kc = Sc(Kc, a3, b3, c2, d, e), true;
        case "dragenter":
          return Lc = Sc(Lc, a3, b3, c2, d, e), true;
        case "mouseover":
          return Mc = Sc(Mc, a3, b3, c2, d, e), true;
        case "pointerover":
          var f = e.pointerId;
          Nc.set(f, Sc(Nc.get(f) || null, a3, b3, c2, d, e));
          return true;
        case "gotpointercapture":
          return f = e.pointerId, Oc.set(f, Sc(Oc.get(f) || null, a3, b3, c2, d, e)), true;
      }
      return false;
    }
    function Uc(a3) {
      var b3 = Vc(a3.target);
      if (b3 !== null) {
        var c2 = Ub(b3);
        if (c2 !== null) {
          if (b3 = c2.tag, b3 === 13) {
            if (b3 = Vb(c2), b3 !== null) {
              a3.blockedOn = b3;
              Hc(a3.priority, function() {
                Fc(c2);
              });
              return;
            }
          } else if (b3 === 3 && c2.stateNode.current.memoizedState.isDehydrated) {
            a3.blockedOn = c2.tag === 3 ? c2.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a3.blockedOn = null;
    }
    function Wc(a3) {
      if (a3.blockedOn !== null)
        return false;
      for (var b3 = a3.targetContainers; 0 < b3.length; ) {
        var c2 = Xc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
        if (c2 === null) {
          c2 = a3.nativeEvent;
          var d = new c2.constructor(c2.type, c2);
          vb = d;
          c2.target.dispatchEvent(d);
          vb = null;
        } else
          return b3 = Bb(c2), b3 !== null && Ec(b3), a3.blockedOn = c2, false;
        b3.shift();
      }
      return true;
    }
    function Yc(a3, b3, c2) {
      Wc(a3) && c2.delete(b3);
    }
    function Zc() {
      Ic = false;
      Kc !== null && Wc(Kc) && (Kc = null);
      Lc !== null && Wc(Lc) && (Lc = null);
      Mc !== null && Wc(Mc) && (Mc = null);
      Nc.forEach(Yc);
      Oc.forEach(Yc);
    }
    function $c(a3, b3) {
      a3.blockedOn === b3 && (a3.blockedOn = null, Ic || (Ic = true, ba.unstable_scheduleCallback(ba.unstable_NormalPriority, Zc)));
    }
    function ad(a3) {
      function b3(b4) {
        return $c(b4, a3);
      }
      if (0 < Jc.length) {
        $c(Jc[0], a3);
        for (var c2 = 1; c2 < Jc.length; c2++) {
          var d = Jc[c2];
          d.blockedOn === a3 && (d.blockedOn = null);
        }
      }
      Kc !== null && $c(Kc, a3);
      Lc !== null && $c(Lc, a3);
      Mc !== null && $c(Mc, a3);
      Nc.forEach(b3);
      Oc.forEach(b3);
      for (c2 = 0; c2 < Pc.length; c2++)
        d = Pc[c2], d.blockedOn === a3 && (d.blockedOn = null);
      for (; 0 < Pc.length && (c2 = Pc[0], c2.blockedOn === null); )
        Uc(c2), c2.blockedOn === null && Pc.shift();
    }
    var bd = ta.ReactCurrentBatchConfig;
    var cd = true;
    function dd2(a3, b3, c2, d) {
      var e = C, f = bd.transition;
      bd.transition = null;
      try {
        C = 1, ed(a3, b3, c2, d);
      } finally {
        C = e, bd.transition = f;
      }
    }
    function fd(a3, b3, c2, d) {
      var e = C, f = bd.transition;
      bd.transition = null;
      try {
        C = 4, ed(a3, b3, c2, d);
      } finally {
        C = e, bd.transition = f;
      }
    }
    function ed(a3, b3, c2, d) {
      if (cd) {
        var e = Xc(a3, b3, c2, d);
        if (e === null)
          gd(a3, b3, d, hd, c2), Rc(a3, d);
        else if (Tc(e, a3, b3, c2, d))
          d.stopPropagation();
        else if (Rc(a3, d), b3 & 4 && -1 < Qc.indexOf(a3)) {
          for (; e !== null; ) {
            var f = Bb(e);
            f !== null && Dc(f);
            f = Xc(a3, b3, c2, d);
            f === null && gd(a3, b3, d, hd, c2);
            if (f === e)
              break;
            e = f;
          }
          e !== null && d.stopPropagation();
        } else
          gd(a3, b3, d, null, c2);
      }
    }
    var hd = null;
    function Xc(a3, b3, c2, d) {
      hd = null;
      a3 = wb(d);
      a3 = Vc(a3);
      if (a3 !== null)
        if (b3 = Ub(a3), b3 === null)
          a3 = null;
        else if (c2 = b3.tag, c2 === 13) {
          a3 = Vb(b3);
          if (a3 !== null)
            return a3;
          a3 = null;
        } else if (c2 === 3) {
          if (b3.stateNode.current.memoizedState.isDehydrated)
            return b3.tag === 3 ? b3.stateNode.containerInfo : null;
          a3 = null;
        } else
          b3 !== a3 && (a3 = null);
      hd = a3;
      return null;
    }
    function id3(a3) {
      switch (a3) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (dc()) {
            case ec:
              return 1;
            case fc:
              return 4;
            case gc:
            case hc:
              return 16;
            case ic:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var jd = null;
    var kd = null;
    var ld = null;
    function md() {
      if (ld)
        return ld;
      var a3, b3 = kd, c2 = b3.length, d, e = "value" in jd ? jd.value : jd.textContent, f = e.length;
      for (a3 = 0; a3 < c2 && b3[a3] === e[a3]; a3++)
        ;
      var g2 = c2 - a3;
      for (d = 1; d <= g2 && b3[c2 - d] === e[f - d]; d++)
        ;
      return ld = e.slice(a3, 1 < d ? 1 - d : void 0);
    }
    function nd(a3) {
      var b3 = a3.keyCode;
      "charCode" in a3 ? (a3 = a3.charCode, a3 === 0 && b3 === 13 && (a3 = 13)) : a3 = b3;
      a3 === 10 && (a3 = 13);
      return 32 <= a3 || a3 === 13 ? a3 : 0;
    }
    function od() {
      return true;
    }
    function pd() {
      return false;
    }
    function qd(a3) {
      function b3(b4, d, e, f, g2) {
        this._reactName = b4;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f;
        this.target = g2;
        this.currentTarget = null;
        for (var c2 in a3)
          a3.hasOwnProperty(c2) && (b4 = a3[c2], this[c2] = b4 ? b4(f) : f[c2]);
        this.isDefaultPrevented = (f.defaultPrevented != null ? f.defaultPrevented : f.returnValue === false) ? od : pd;
        this.isPropagationStopped = pd;
        return this;
      }
      A(b3.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a4 = this.nativeEvent;
        a4 && (a4.preventDefault ? a4.preventDefault() : typeof a4.returnValue !== "unknown" && (a4.returnValue = false), this.isDefaultPrevented = od);
      }, stopPropagation: function() {
        var a4 = this.nativeEvent;
        a4 && (a4.stopPropagation ? a4.stopPropagation() : typeof a4.cancelBubble !== "unknown" && (a4.cancelBubble = true), this.isPropagationStopped = od);
      }, persist: function() {
      }, isPersistent: od });
      return b3;
    }
    var rd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a3) {
      return a3.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 };
    var sd = qd(rd);
    var td2 = A({}, rd, { view: 0, detail: 0 });
    var ud = qd(td2);
    var vd;
    var wd;
    var xd;
    var zd = A({}, td2, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: yd, button: 0, buttons: 0, relatedTarget: function(a3) {
      return a3.relatedTarget === void 0 ? a3.fromElement === a3.srcElement ? a3.toElement : a3.fromElement : a3.relatedTarget;
    }, movementX: function(a3) {
      if ("movementX" in a3)
        return a3.movementX;
      a3 !== xd && (xd && a3.type === "mousemove" ? (vd = a3.screenX - xd.screenX, wd = a3.screenY - xd.screenY) : wd = vd = 0, xd = a3);
      return vd;
    }, movementY: function(a3) {
      return "movementY" in a3 ? a3.movementY : wd;
    } });
    var Ad = qd(zd);
    var Bd = A({}, zd, { dataTransfer: 0 });
    var Cd = qd(Bd);
    var Dd = A({}, td2, { relatedTarget: 0 });
    var Ed = qd(Dd);
    var Fd = A({}, rd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Gd = qd(Fd);
    var Hd = A({}, rd, { clipboardData: function(a3) {
      return "clipboardData" in a3 ? a3.clipboardData : window.clipboardData;
    } });
    var Id = qd(Hd);
    var Jd = A({}, rd, { data: 0 });
    var Kd = qd(Jd);
    var Ld = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    };
    var Md = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
    var Nd = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Od(a3) {
      var b3 = this.nativeEvent;
      return b3.getModifierState ? b3.getModifierState(a3) : (a3 = Nd[a3]) ? !!b3[a3] : false;
    }
    function yd() {
      return Od;
    }
    var Pd = A({}, td2, { key: function(a3) {
      if (a3.key) {
        var b3 = Ld[a3.key] || a3.key;
        if (b3 !== "Unidentified")
          return b3;
      }
      return a3.type === "keypress" ? (a3 = nd(a3), a3 === 13 ? "Enter" : String.fromCharCode(a3)) : a3.type === "keydown" || a3.type === "keyup" ? Md[a3.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: yd, charCode: function(a3) {
      return a3.type === "keypress" ? nd(a3) : 0;
    }, keyCode: function(a3) {
      return a3.type === "keydown" || a3.type === "keyup" ? a3.keyCode : 0;
    }, which: function(a3) {
      return a3.type === "keypress" ? nd(a3) : a3.type === "keydown" || a3.type === "keyup" ? a3.keyCode : 0;
    } });
    var Qd = qd(Pd);
    var Rd = A({}, zd, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
    var Sd = qd(Rd);
    var Td = A({}, td2, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: yd });
    var Ud = qd(Td);
    var Vd = A({}, rd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
    var Wd = qd(Vd);
    var Xd = A({}, zd, {
      deltaX: function(a3) {
        return "deltaX" in a3 ? a3.deltaX : "wheelDeltaX" in a3 ? -a3.wheelDeltaX : 0;
      },
      deltaY: function(a3) {
        return "deltaY" in a3 ? a3.deltaY : "wheelDeltaY" in a3 ? -a3.wheelDeltaY : "wheelDelta" in a3 ? -a3.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    });
    var Yd = qd(Xd);
    var Zd = [9, 13, 27, 32];
    var $d = ia && "CompositionEvent" in window;
    var ae = null;
    ia && "documentMode" in document && (ae = document.documentMode);
    var be = ia && "TextEvent" in window && !ae;
    var ce = ia && (!$d || ae && 8 < ae && 11 >= ae);
    var de = String.fromCharCode(32);
    var ee = false;
    function fe(a3, b3) {
      switch (a3) {
        case "keyup":
          return Zd.indexOf(b3.keyCode) !== -1;
        case "keydown":
          return b3.keyCode !== 229;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function ge(a3) {
      a3 = a3.detail;
      return typeof a3 === "object" && "data" in a3 ? a3.data : null;
    }
    var he = false;
    function ie(a3, b3) {
      switch (a3) {
        case "compositionend":
          return ge(b3);
        case "keypress":
          if (b3.which !== 32)
            return null;
          ee = true;
          return de;
        case "textInput":
          return a3 = b3.data, a3 === de && ee ? null : a3;
        default:
          return null;
      }
    }
    function je(a3, b3) {
      if (he)
        return a3 === "compositionend" || !$d && fe(a3, b3) ? (a3 = md(), ld = kd = jd = null, he = false, a3) : null;
      switch (a3) {
        case "paste":
          return null;
        case "keypress":
          if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
            if (b3.char && 1 < b3.char.length)
              return b3.char;
            if (b3.which)
              return String.fromCharCode(b3.which);
          }
          return null;
        case "compositionend":
          return ce && b3.locale !== "ko" ? null : b3.data;
        default:
          return null;
      }
    }
    var ke = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function le(a3) {
      var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
      return b3 === "input" ? !!ke[a3.type] : b3 === "textarea" ? true : false;
    }
    function me(a3, b3, c2, d) {
      Db(d);
      b3 = ne(b3, "onChange");
      0 < b3.length && (c2 = new sd("onChange", "change", null, c2, d), a3.push({ event: c2, listeners: b3 }));
    }
    var oe = null;
    var pe = null;
    function qe(a3) {
      re(a3, 0);
    }
    function se(a3) {
      var b3 = te(a3);
      if (Va(b3))
        return a3;
    }
    function ue(a3, b3) {
      if (a3 === "change")
        return b3;
    }
    var ve = false;
    if (ia) {
      if (ia) {
        xe = "oninput" in document;
        if (!xe) {
          ye = document.createElement("div");
          ye.setAttribute("oninput", "return;");
          xe = typeof ye.oninput === "function";
        }
        we = xe;
      } else
        we = false;
      ve = we && (!document.documentMode || 9 < document.documentMode);
    }
    var we;
    var xe;
    var ye;
    function ze() {
      oe && (oe.detachEvent("onpropertychange", Ae), pe = oe = null);
    }
    function Ae(a3) {
      if (a3.propertyName === "value" && se(pe)) {
        var b3 = [];
        me(b3, pe, a3, wb(a3));
        Ib(qe, b3);
      }
    }
    function Be(a3, b3, c2) {
      a3 === "focusin" ? (ze(), oe = b3, pe = c2, oe.attachEvent("onpropertychange", Ae)) : a3 === "focusout" && ze();
    }
    function Ce(a3) {
      if (a3 === "selectionchange" || a3 === "keyup" || a3 === "keydown")
        return se(pe);
    }
    function De(a3, b3) {
      if (a3 === "click")
        return se(b3);
    }
    function Ee(a3, b3) {
      if (a3 === "input" || a3 === "change")
        return se(b3);
    }
    function Fe(a3, b3) {
      return a3 === b3 && (a3 !== 0 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
    }
    var Ge = typeof Object.is === "function" ? Object.is : Fe;
    function He(a3, b3) {
      if (Ge(a3, b3))
        return true;
      if (typeof a3 !== "object" || a3 === null || typeof b3 !== "object" || b3 === null)
        return false;
      var c2 = Object.keys(a3), d = Object.keys(b3);
      if (c2.length !== d.length)
        return false;
      for (d = 0; d < c2.length; d++) {
        var e = c2[d];
        if (!ja.call(b3, e) || !Ge(a3[e], b3[e]))
          return false;
      }
      return true;
    }
    function Ie(a3) {
      for (; a3 && a3.firstChild; )
        a3 = a3.firstChild;
      return a3;
    }
    function Je(a3, b3) {
      var c2 = Ie(a3);
      a3 = 0;
      for (var d; c2; ) {
        if (c2.nodeType === 3) {
          d = a3 + c2.textContent.length;
          if (a3 <= b3 && d >= b3)
            return { node: c2, offset: b3 - a3 };
          a3 = d;
        }
        a: {
          for (; c2; ) {
            if (c2.nextSibling) {
              c2 = c2.nextSibling;
              break a;
            }
            c2 = c2.parentNode;
          }
          c2 = void 0;
        }
        c2 = Ie(c2);
      }
    }
    function Ke(a3, b3) {
      return a3 && b3 ? a3 === b3 ? true : a3 && a3.nodeType === 3 ? false : b3 && b3.nodeType === 3 ? Ke(a3, b3.parentNode) : "contains" in a3 ? a3.contains(b3) : a3.compareDocumentPosition ? !!(a3.compareDocumentPosition(b3) & 16) : false : false;
    }
    function Le() {
      for (var a3 = window, b3 = Wa(); b3 instanceof a3.HTMLIFrameElement; ) {
        try {
          var c2 = typeof b3.contentWindow.location.href === "string";
        } catch (d) {
          c2 = false;
        }
        if (c2)
          a3 = b3.contentWindow;
        else
          break;
        b3 = Wa(a3.document);
      }
      return b3;
    }
    function Me(a3) {
      var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
      return b3 && (b3 === "input" && (a3.type === "text" || a3.type === "search" || a3.type === "tel" || a3.type === "url" || a3.type === "password") || b3 === "textarea" || a3.contentEditable === "true");
    }
    function Ne(a3) {
      var b3 = Le(), c2 = a3.focusedElem, d = a3.selectionRange;
      if (b3 !== c2 && c2 && c2.ownerDocument && Ke(c2.ownerDocument.documentElement, c2)) {
        if (d !== null && Me(c2)) {
          if (b3 = d.start, a3 = d.end, a3 === void 0 && (a3 = b3), "selectionStart" in c2)
            c2.selectionStart = b3, c2.selectionEnd = Math.min(a3, c2.value.length);
          else if (a3 = (b3 = c2.ownerDocument || document) && b3.defaultView || window, a3.getSelection) {
            a3 = a3.getSelection();
            var e = c2.textContent.length, f = Math.min(d.start, e);
            d = d.end === void 0 ? f : Math.min(d.end, e);
            !a3.extend && f > d && (e = d, d = f, f = e);
            e = Je(c2, f);
            var g2 = Je(c2, d);
            e && g2 && (a3.rangeCount !== 1 || a3.anchorNode !== e.node || a3.anchorOffset !== e.offset || a3.focusNode !== g2.node || a3.focusOffset !== g2.offset) && (b3 = b3.createRange(), b3.setStart(e.node, e.offset), a3.removeAllRanges(), f > d ? (a3.addRange(b3), a3.extend(g2.node, g2.offset)) : (b3.setEnd(g2.node, g2.offset), a3.addRange(b3)));
          }
        }
        b3 = [];
        for (a3 = c2; a3 = a3.parentNode; )
          a3.nodeType === 1 && b3.push({ element: a3, left: a3.scrollLeft, top: a3.scrollTop });
        typeof c2.focus === "function" && c2.focus();
        for (c2 = 0; c2 < b3.length; c2++)
          a3 = b3[c2], a3.element.scrollLeft = a3.left, a3.element.scrollTop = a3.top;
      }
    }
    var Oe = ia && "documentMode" in document && 11 >= document.documentMode;
    var Pe = null;
    var Qe = null;
    var Re2 = null;
    var Se = false;
    function Te(a3, b3, c2) {
      var d = c2.window === c2 ? c2.document : c2.nodeType === 9 ? c2 : c2.ownerDocument;
      Se || Pe == null || Pe !== Wa(d) || (d = Pe, "selectionStart" in d && Me(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Re2 && He(Re2, d) || (Re2 = d, d = ne(Qe, "onSelect"), 0 < d.length && (b3 = new sd("onSelect", "select", null, b3, c2), a3.push({ event: b3, listeners: d }), b3.target = Pe)));
    }
    function Ue(a3, b3) {
      var c2 = {};
      c2[a3.toLowerCase()] = b3.toLowerCase();
      c2["Webkit" + a3] = "webkit" + b3;
      c2["Moz" + a3] = "moz" + b3;
      return c2;
    }
    var Ve = { animationend: Ue("Animation", "AnimationEnd"), animationiteration: Ue("Animation", "AnimationIteration"), animationstart: Ue("Animation", "AnimationStart"), transitionend: Ue("Transition", "TransitionEnd") };
    var We = {};
    var Xe = {};
    ia && (Xe = document.createElement("div").style, "AnimationEvent" in window || (delete Ve.animationend.animation, delete Ve.animationiteration.animation, delete Ve.animationstart.animation), "TransitionEvent" in window || delete Ve.transitionend.transition);
    function Ye(a3) {
      if (We[a3])
        return We[a3];
      if (!Ve[a3])
        return a3;
      var b3 = Ve[a3], c2;
      for (c2 in b3)
        if (b3.hasOwnProperty(c2) && c2 in Xe)
          return We[a3] = b3[c2];
      return a3;
    }
    var Ze = Ye("animationend");
    var $e = Ye("animationiteration");
    var af = Ye("animationstart");
    var bf = Ye("transitionend");
    var cf = /* @__PURE__ */ new Map();
    var df = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ef(a3, b3) {
      cf.set(a3, b3);
      fa(b3, [a3]);
    }
    for (ff2 = 0; ff2 < df.length; ff2++) {
      gf = df[ff2], hf = gf.toLowerCase(), jf = gf[0].toUpperCase() + gf.slice(1);
      ef(hf, "on" + jf);
    }
    var gf;
    var hf;
    var jf;
    var ff2;
    ef(Ze, "onAnimationEnd");
    ef($e, "onAnimationIteration");
    ef(af, "onAnimationStart");
    ef("dblclick", "onDoubleClick");
    ef("focusin", "onFocus");
    ef("focusout", "onBlur");
    ef(bf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var kf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
    var lf = new Set("cancel close invalid load scroll toggle".split(" ").concat(kf));
    function mf(a3, b3, c2) {
      var d = a3.type || "unknown-event";
      a3.currentTarget = c2;
      Tb(d, b3, void 0, a3);
      a3.currentTarget = null;
    }
    function re(a3, b3) {
      b3 = (b3 & 4) !== 0;
      for (var c2 = 0; c2 < a3.length; c2++) {
        var d = a3[c2], e = d.event;
        d = d.listeners;
        a: {
          var f = void 0;
          if (b3)
            for (var g2 = d.length - 1; 0 <= g2; g2--) {
              var h = d[g2], k = h.instance, l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              mf(e, h, l);
              f = k;
            }
          else
            for (g2 = 0; g2 < d.length; g2++) {
              h = d[g2];
              k = h.instance;
              l = h.currentTarget;
              h = h.listener;
              if (k !== f && e.isPropagationStopped())
                break a;
              mf(e, h, l);
              f = k;
            }
        }
      }
      if (Pb)
        throw a3 = Qb, Pb = false, Qb = null, a3;
    }
    function D(a3, b3) {
      var c2 = b3[nf];
      c2 === void 0 && (c2 = b3[nf] = /* @__PURE__ */ new Set());
      var d = a3 + "__bubble";
      c2.has(d) || (of(b3, a3, 2, false), c2.add(d));
    }
    function pf(a3, b3, c2) {
      var d = 0;
      b3 && (d |= 4);
      of(c2, a3, d, b3);
    }
    var qf = "_reactListening" + Math.random().toString(36).slice(2);
    function rf(a3) {
      if (!a3[qf]) {
        a3[qf] = true;
        da.forEach(function(b4) {
          b4 !== "selectionchange" && (lf.has(b4) || pf(b4, false, a3), pf(b4, true, a3));
        });
        var b3 = a3.nodeType === 9 ? a3 : a3.ownerDocument;
        b3 === null || b3[qf] || (b3[qf] = true, pf("selectionchange", false, b3));
      }
    }
    function of(a3, b3, c2, d) {
      switch (id3(b3)) {
        case 1:
          var e = dd2;
          break;
        case 4:
          e = fd;
          break;
        default:
          e = ed;
      }
      c2 = e.bind(null, b3, c2, a3);
      e = void 0;
      !Kb || b3 !== "touchstart" && b3 !== "touchmove" && b3 !== "wheel" || (e = true);
      d ? e !== void 0 ? a3.addEventListener(b3, c2, { capture: true, passive: e }) : a3.addEventListener(b3, c2, true) : e !== void 0 ? a3.addEventListener(b3, c2, { passive: e }) : a3.addEventListener(b3, c2, false);
    }
    function gd(a3, b3, c2, d, e) {
      var f = d;
      if ((b3 & 1) === 0 && (b3 & 2) === 0 && d !== null)
        a:
          for (; ; ) {
            if (d === null)
              return;
            var g2 = d.tag;
            if (g2 === 3 || g2 === 4) {
              var h = d.stateNode.containerInfo;
              if (h === e || h.nodeType === 8 && h.parentNode === e)
                break;
              if (g2 === 4)
                for (g2 = d.return; g2 !== null; ) {
                  var k = g2.tag;
                  if (k === 3 || k === 4) {
                    if (k = g2.stateNode.containerInfo, k === e || k.nodeType === 8 && k.parentNode === e)
                      return;
                  }
                  g2 = g2.return;
                }
              for (; h !== null; ) {
                g2 = Vc(h);
                if (g2 === null)
                  return;
                k = g2.tag;
                if (k === 5 || k === 6) {
                  d = f = g2;
                  continue a;
                }
                h = h.parentNode;
              }
            }
            d = d.return;
          }
      Ib(function() {
        var d2 = f, e2 = wb(c2), g3 = [];
        a: {
          var h7 = cf.get(a3);
          if (h7 !== void 0) {
            var k2 = sd, m = a3;
            switch (a3) {
              case "keypress":
                if (nd(c2) === 0)
                  break a;
              case "keydown":
              case "keyup":
                k2 = Qd;
                break;
              case "focusin":
                m = "focus";
                k2 = Ed;
                break;
              case "focusout":
                m = "blur";
                k2 = Ed;
                break;
              case "beforeblur":
              case "afterblur":
                k2 = Ed;
                break;
              case "click":
                if (c2.button === 2)
                  break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k2 = Ad;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k2 = Cd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k2 = Ud;
                break;
              case Ze:
              case $e:
              case af:
                k2 = Gd;
                break;
              case bf:
                k2 = Wd;
                break;
              case "scroll":
                k2 = ud;
                break;
              case "wheel":
                k2 = Yd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k2 = Id;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k2 = Sd;
            }
            var w = (b3 & 4) !== 0, J = !w && a3 === "scroll", v = w ? h7 !== null ? h7 + "Capture" : null : h7;
            w = [];
            for (var x = d2, r; x !== null; ) {
              r = x;
              var F = r.stateNode;
              r.tag === 5 && F !== null && (r = F, v !== null && (F = Jb(x, v), F != null && w.push(sf(x, F, r))));
              if (J)
                break;
              x = x.return;
            }
            0 < w.length && (h7 = new k2(h7, m, null, c2, e2), g3.push({ event: h7, listeners: w }));
          }
        }
        if ((b3 & 7) === 0) {
          a: {
            h7 = a3 === "mouseover" || a3 === "pointerover";
            k2 = a3 === "mouseout" || a3 === "pointerout";
            if (h7 && c2 !== vb && (m = c2.relatedTarget || c2.fromElement) && (Vc(m) || m[tf]))
              break a;
            if (k2 || h7) {
              h7 = e2.window === e2 ? e2 : (h7 = e2.ownerDocument) ? h7.defaultView || h7.parentWindow : window;
              if (k2) {
                if (m = c2.relatedTarget || c2.toElement, k2 = d2, m = m ? Vc(m) : null, m !== null && (J = Ub(m), m !== J || m.tag !== 5 && m.tag !== 6))
                  m = null;
              } else
                k2 = null, m = d2;
              if (k2 !== m) {
                w = Ad;
                F = "onMouseLeave";
                v = "onMouseEnter";
                x = "mouse";
                if (a3 === "pointerout" || a3 === "pointerover")
                  w = Sd, F = "onPointerLeave", v = "onPointerEnter", x = "pointer";
                J = k2 == null ? h7 : te(k2);
                r = m == null ? h7 : te(m);
                h7 = new w(F, x + "leave", k2, c2, e2);
                h7.target = J;
                h7.relatedTarget = r;
                F = null;
                Vc(e2) === d2 && (w = new w(v, x + "enter", m, c2, e2), w.target = r, w.relatedTarget = J, F = w);
                J = F;
                if (k2 && m)
                  b: {
                    w = k2;
                    v = m;
                    x = 0;
                    for (r = w; r; r = uf(r))
                      x++;
                    r = 0;
                    for (F = v; F; F = uf(F))
                      r++;
                    for (; 0 < x - r; )
                      w = uf(w), x--;
                    for (; 0 < r - x; )
                      v = uf(v), r--;
                    for (; x--; ) {
                      if (w === v || v !== null && w === v.alternate)
                        break b;
                      w = uf(w);
                      v = uf(v);
                    }
                    w = null;
                  }
                else
                  w = null;
                k2 !== null && vf(g3, h7, k2, w, false);
                m !== null && J !== null && vf(g3, J, m, w, true);
              }
            }
          }
          a: {
            h7 = d2 ? te(d2) : window;
            k2 = h7.nodeName && h7.nodeName.toLowerCase();
            if (k2 === "select" || k2 === "input" && h7.type === "file")
              var Z = ue;
            else if (le(h7))
              if (ve)
                Z = Ee;
              else {
                Z = Ce;
                var ya = Be;
              }
            else
              (k2 = h7.nodeName) && k2.toLowerCase() === "input" && (h7.type === "checkbox" || h7.type === "radio") && (Z = De);
            if (Z && (Z = Z(a3, d2))) {
              me(g3, Z, c2, e2);
              break a;
            }
            ya && ya(a3, h7, d2);
            a3 === "focusout" && (ya = h7._wrapperState) && ya.controlled && h7.type === "number" && bb(h7, "number", h7.value);
          }
          ya = d2 ? te(d2) : window;
          switch (a3) {
            case "focusin":
              if (le(ya) || ya.contentEditable === "true")
                Pe = ya, Qe = d2, Re2 = null;
              break;
            case "focusout":
              Re2 = Qe = Pe = null;
              break;
            case "mousedown":
              Se = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Se = false;
              Te(g3, c2, e2);
              break;
            case "selectionchange":
              if (Oe)
                break;
            case "keydown":
            case "keyup":
              Te(g3, c2, e2);
          }
          var ab;
          if ($d)
            b: {
              switch (a3) {
                case "compositionstart":
                  var ca2 = "onCompositionStart";
                  break b;
                case "compositionend":
                  ca2 = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ca2 = "onCompositionUpdate";
                  break b;
              }
              ca2 = void 0;
            }
          else
            he ? fe(a3, c2) && (ca2 = "onCompositionEnd") : a3 === "keydown" && c2.keyCode === 229 && (ca2 = "onCompositionStart");
          ca2 && (ce && c2.locale !== "ko" && (he || ca2 !== "onCompositionStart" ? ca2 === "onCompositionEnd" && he && (ab = md()) : (jd = e2, kd = "value" in jd ? jd.value : jd.textContent, he = true)), ya = ne(d2, ca2), 0 < ya.length && (ca2 = new Kd(ca2, a3, null, c2, e2), g3.push({ event: ca2, listeners: ya }), ab ? ca2.data = ab : (ab = ge(c2), ab !== null && (ca2.data = ab))));
          if (ab = be ? ie(a3, c2) : je(a3, c2))
            d2 = ne(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Kd("onBeforeInput", "beforeinput", null, c2, e2), g3.push({ event: e2, listeners: d2 }), e2.data = ab);
        }
        re(g3, b3);
      });
    }
    function sf(a3, b3, c2) {
      return { instance: a3, listener: b3, currentTarget: c2 };
    }
    function ne(a3, b3) {
      for (var c2 = b3 + "Capture", d = []; a3 !== null; ) {
        var e = a3, f = e.stateNode;
        e.tag === 5 && f !== null && (e = f, f = Jb(a3, c2), f != null && d.unshift(sf(a3, f, e)), f = Jb(a3, b3), f != null && d.push(sf(a3, f, e)));
        a3 = a3.return;
      }
      return d;
    }
    function uf(a3) {
      if (a3 === null)
        return null;
      do
        a3 = a3.return;
      while (a3 && a3.tag !== 5);
      return a3 ? a3 : null;
    }
    function vf(a3, b3, c2, d, e) {
      for (var f = b3._reactName, g2 = []; c2 !== null && c2 !== d; ) {
        var h = c2, k = h.alternate, l = h.stateNode;
        if (k !== null && k === d)
          break;
        h.tag === 5 && l !== null && (h = l, e ? (k = Jb(c2, f), k != null && g2.unshift(sf(c2, k, h))) : e || (k = Jb(c2, f), k != null && g2.push(sf(c2, k, h))));
        c2 = c2.return;
      }
      g2.length !== 0 && a3.push({ event: b3, listeners: g2 });
    }
    var wf = /\r\n?/g;
    var xf = /\u0000|\uFFFD/g;
    function yf(a3) {
      return (typeof a3 === "string" ? a3 : "" + a3).replace(wf, "\n").replace(xf, "");
    }
    function zf(a3, b3, c2) {
      b3 = yf(b3);
      if (yf(a3) !== b3 && c2)
        throw Error(p2(425));
    }
    function Af() {
    }
    var Bf = null;
    var Cf = null;
    function Df(a3, b3) {
      return a3 === "textarea" || a3 === "noscript" || typeof b3.children === "string" || typeof b3.children === "number" || typeof b3.dangerouslySetInnerHTML === "object" && b3.dangerouslySetInnerHTML !== null && b3.dangerouslySetInnerHTML.__html != null;
    }
    var Ef = typeof setTimeout === "function" ? setTimeout : void 0;
    var Ff = typeof clearTimeout === "function" ? clearTimeout : void 0;
    var Gf = typeof Promise === "function" ? Promise : void 0;
    var If = typeof queueMicrotask === "function" ? queueMicrotask : typeof Gf !== "undefined" ? function(a3) {
      return Gf.resolve(null).then(a3).catch(Hf);
    } : Ef;
    function Hf(a3) {
      setTimeout(function() {
        throw a3;
      });
    }
    function Jf(a3, b3) {
      var c2 = b3, d = 0;
      do {
        var e = c2.nextSibling;
        a3.removeChild(c2);
        if (e && e.nodeType === 8)
          if (c2 = e.data, c2 === "/$") {
            if (d === 0) {
              a3.removeChild(e);
              ad(b3);
              return;
            }
            d--;
          } else
            c2 !== "$" && c2 !== "$?" && c2 !== "$!" || d++;
        c2 = e;
      } while (c2);
      ad(b3);
    }
    function Kf(a3) {
      for (; a3 != null; a3 = a3.nextSibling) {
        var b3 = a3.nodeType;
        if (b3 === 1 || b3 === 3)
          break;
        if (b3 === 8) {
          b3 = a3.data;
          if (b3 === "$" || b3 === "$!" || b3 === "$?")
            break;
          if (b3 === "/$")
            return null;
        }
      }
      return a3;
    }
    function Lf(a3) {
      a3 = a3.previousSibling;
      for (var b3 = 0; a3; ) {
        if (a3.nodeType === 8) {
          var c2 = a3.data;
          if (c2 === "$" || c2 === "$!" || c2 === "$?") {
            if (b3 === 0)
              return a3;
            b3--;
          } else
            c2 === "/$" && b3++;
        }
        a3 = a3.previousSibling;
      }
      return null;
    }
    var Mf = Math.random().toString(36).slice(2);
    var Nf = "__reactFiber$" + Mf;
    var Of = "__reactProps$" + Mf;
    var tf = "__reactContainer$" + Mf;
    var nf = "__reactEvents$" + Mf;
    var Pf = "__reactListeners$" + Mf;
    var Qf = "__reactHandles$" + Mf;
    function Vc(a3) {
      var b3 = a3[Nf];
      if (b3)
        return b3;
      for (var c2 = a3.parentNode; c2; ) {
        if (b3 = c2[tf] || c2[Nf]) {
          c2 = b3.alternate;
          if (b3.child !== null || c2 !== null && c2.child !== null)
            for (a3 = Lf(a3); a3 !== null; ) {
              if (c2 = a3[Nf])
                return c2;
              a3 = Lf(a3);
            }
          return b3;
        }
        a3 = c2;
        c2 = a3.parentNode;
      }
      return null;
    }
    function Bb(a3) {
      a3 = a3[Nf] || a3[tf];
      return !a3 || a3.tag !== 5 && a3.tag !== 6 && a3.tag !== 13 && a3.tag !== 3 ? null : a3;
    }
    function te(a3) {
      if (a3.tag === 5 || a3.tag === 6)
        return a3.stateNode;
      throw Error(p2(33));
    }
    function Cb(a3) {
      return a3[Of] || null;
    }
    var Rf = [];
    var Sf = -1;
    function Tf(a3) {
      return { current: a3 };
    }
    function E(a3) {
      0 > Sf || (a3.current = Rf[Sf], Rf[Sf] = null, Sf--);
    }
    function G(a3, b3) {
      Sf++;
      Rf[Sf] = a3.current;
      a3.current = b3;
    }
    var Uf = {};
    var H = Tf(Uf);
    var Vf = Tf(false);
    var Wf = Uf;
    function Xf(a3, b3) {
      var c2 = a3.type.contextTypes;
      if (!c2)
        return Uf;
      var d = a3.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b3)
        return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f;
      for (f in c2)
        e[f] = b3[f];
      d && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = b3, a3.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Yf(a3) {
      a3 = a3.childContextTypes;
      return a3 !== null && a3 !== void 0;
    }
    function Zf() {
      E(Vf);
      E(H);
    }
    function $f(a3, b3, c2) {
      if (H.current !== Uf)
        throw Error(p2(168));
      G(H, b3);
      G(Vf, c2);
    }
    function ag(a3, b3, c2) {
      var d = a3.stateNode;
      b3 = b3.childContextTypes;
      if (typeof d.getChildContext !== "function")
        return c2;
      d = d.getChildContext();
      for (var e in d)
        if (!(e in b3))
          throw Error(p2(108, Qa(a3) || "Unknown", e));
      return A({}, c2, d);
    }
    function bg(a3) {
      a3 = (a3 = a3.stateNode) && a3.__reactInternalMemoizedMergedChildContext || Uf;
      Wf = H.current;
      G(H, a3);
      G(Vf, Vf.current);
      return true;
    }
    function cg(a3, b3, c2) {
      var d = a3.stateNode;
      if (!d)
        throw Error(p2(169));
      c2 ? (a3 = ag(a3, b3, Wf), d.__reactInternalMemoizedMergedChildContext = a3, E(Vf), E(H), G(H, a3)) : E(Vf);
      G(Vf, c2);
    }
    var dg = null;
    var eg = false;
    var fg = false;
    function gg(a3) {
      dg === null ? dg = [a3] : dg.push(a3);
    }
    function hg(a3) {
      eg = true;
      gg(a3);
    }
    function ig() {
      if (!fg && dg !== null) {
        fg = true;
        var a3 = 0, b3 = C;
        try {
          var c2 = dg;
          for (C = 1; a3 < c2.length; a3++) {
            var d = c2[a3];
            do
              d = d(true);
            while (d !== null);
          }
          dg = null;
          eg = false;
        } catch (e) {
          throw dg !== null && (dg = dg.slice(a3 + 1)), $b(ec, ig), e;
        } finally {
          C = b3, fg = false;
        }
      }
      return null;
    }
    var jg = ta.ReactCurrentBatchConfig;
    function kg(a3, b3) {
      if (a3 && a3.defaultProps) {
        b3 = A({}, b3);
        a3 = a3.defaultProps;
        for (var c2 in a3)
          b3[c2] === void 0 && (b3[c2] = a3[c2]);
        return b3;
      }
      return b3;
    }
    var lg = Tf(null);
    var mg = null;
    var ng = null;
    var og = null;
    function pg() {
      og = ng = mg = null;
    }
    function qg(a3) {
      var b3 = lg.current;
      E(lg);
      a3._currentValue = b3;
    }
    function rg(a3, b3, c2) {
      for (; a3 !== null; ) {
        var d = a3.alternate;
        (a3.childLanes & b3) !== b3 ? (a3.childLanes |= b3, d !== null && (d.childLanes |= b3)) : d !== null && (d.childLanes & b3) !== b3 && (d.childLanes |= b3);
        if (a3 === c2)
          break;
        a3 = a3.return;
      }
    }
    function sg(a3, b3) {
      mg = a3;
      og = ng = null;
      a3 = a3.dependencies;
      a3 !== null && a3.firstContext !== null && ((a3.lanes & b3) !== 0 && (tg = true), a3.firstContext = null);
    }
    function ug(a3) {
      var b3 = a3._currentValue;
      if (og !== a3)
        if (a3 = { context: a3, memoizedValue: b3, next: null }, ng === null) {
          if (mg === null)
            throw Error(p2(308));
          ng = a3;
          mg.dependencies = { lanes: 0, firstContext: a3 };
        } else
          ng = ng.next = a3;
      return b3;
    }
    var vg = null;
    var wg = false;
    function xg(a3) {
      a3.updateQueue = { baseState: a3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function yg(a3, b3) {
      a3 = a3.updateQueue;
      b3.updateQueue === a3 && (b3.updateQueue = { baseState: a3.baseState, firstBaseUpdate: a3.firstBaseUpdate, lastBaseUpdate: a3.lastBaseUpdate, shared: a3.shared, effects: a3.effects });
    }
    function zg(a3, b3) {
      return { eventTime: a3, lane: b3, tag: 0, payload: null, callback: null, next: null };
    }
    function Ag(a3, b3) {
      var c2 = a3.updateQueue;
      c2 !== null && (c2 = c2.shared, Bg(a3) ? (a3 = c2.interleaved, a3 === null ? (b3.next = b3, vg === null ? vg = [c2] : vg.push(c2)) : (b3.next = a3.next, a3.next = b3), c2.interleaved = b3) : (a3 = c2.pending, a3 === null ? b3.next = b3 : (b3.next = a3.next, a3.next = b3), c2.pending = b3));
    }
    function Cg(a3, b3, c2) {
      b3 = b3.updateQueue;
      if (b3 !== null && (b3 = b3.shared, (c2 & 4194240) !== 0)) {
        var d = b3.lanes;
        d &= a3.pendingLanes;
        c2 |= d;
        b3.lanes = c2;
        Bc(a3, c2);
      }
    }
    function Dg(a3, b3) {
      var c2 = a3.updateQueue, d = a3.alternate;
      if (d !== null && (d = d.updateQueue, c2 === d)) {
        var e = null, f = null;
        c2 = c2.firstBaseUpdate;
        if (c2 !== null) {
          do {
            var g2 = { eventTime: c2.eventTime, lane: c2.lane, tag: c2.tag, payload: c2.payload, callback: c2.callback, next: null };
            f === null ? e = f = g2 : f = f.next = g2;
            c2 = c2.next;
          } while (c2 !== null);
          f === null ? e = f = b3 : f = f.next = b3;
        } else
          e = f = b3;
        c2 = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
        a3.updateQueue = c2;
        return;
      }
      a3 = c2.lastBaseUpdate;
      a3 === null ? c2.firstBaseUpdate = b3 : a3.next = b3;
      c2.lastBaseUpdate = b3;
    }
    function Eg(a3, b3, c2, d) {
      var e = a3.updateQueue;
      wg = false;
      var f = e.firstBaseUpdate, g2 = e.lastBaseUpdate, h = e.shared.pending;
      if (h !== null) {
        e.shared.pending = null;
        var k = h, l = k.next;
        k.next = null;
        g2 === null ? f = l : g2.next = l;
        g2 = k;
        var n = a3.alternate;
        n !== null && (n = n.updateQueue, h = n.lastBaseUpdate, h !== g2 && (h === null ? n.firstBaseUpdate = l : h.next = l, n.lastBaseUpdate = k));
      }
      if (f !== null) {
        var u2 = e.baseState;
        g2 = 0;
        n = l = k = null;
        h = f;
        do {
          var q2 = h.lane, y = h.eventTime;
          if ((d & q2) === q2) {
            n !== null && (n = n.next = {
              eventTime: y,
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: h.callback,
              next: null
            });
            a: {
              var m = a3, w = h;
              q2 = b3;
              y = c2;
              switch (w.tag) {
                case 1:
                  m = w.payload;
                  if (typeof m === "function") {
                    u2 = m.call(y, u2, q2);
                    break a;
                  }
                  u2 = m;
                  break a;
                case 3:
                  m.flags = m.flags & -65537 | 128;
                case 0:
                  m = w.payload;
                  q2 = typeof m === "function" ? m.call(y, u2, q2) : m;
                  if (q2 === null || q2 === void 0)
                    break a;
                  u2 = A({}, u2, q2);
                  break a;
                case 2:
                  wg = true;
              }
            }
            h.callback !== null && h.lane !== 0 && (a3.flags |= 64, q2 = e.effects, q2 === null ? e.effects = [h] : q2.push(h));
          } else
            y = { eventTime: y, lane: q2, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, n === null ? (l = n = y, k = u2) : n = n.next = y, g2 |= q2;
          h = h.next;
          if (h === null)
            if (h = e.shared.pending, h === null)
              break;
            else
              q2 = h, h = q2.next, q2.next = null, e.lastBaseUpdate = q2, e.shared.pending = null;
        } while (1);
        n === null && (k = u2);
        e.baseState = k;
        e.firstBaseUpdate = l;
        e.lastBaseUpdate = n;
        b3 = e.shared.interleaved;
        if (b3 !== null) {
          e = b3;
          do
            g2 |= e.lane, e = e.next;
          while (e !== b3);
        } else
          f === null && (e.shared.lanes = 0);
        Fg |= g2;
        a3.lanes = g2;
        a3.memoizedState = u2;
      }
    }
    function Gg(a3, b3, c2) {
      a3 = b3.effects;
      b3.effects = null;
      if (a3 !== null)
        for (b3 = 0; b3 < a3.length; b3++) {
          var d = a3[b3], e = d.callback;
          if (e !== null) {
            d.callback = null;
            d = c2;
            if (typeof e !== "function")
              throw Error(p2(191, e));
            e.call(d);
          }
        }
    }
    var Hg = new aa.Component().refs;
    function Ig(a3, b3, c2, d) {
      b3 = a3.memoizedState;
      c2 = c2(d, b3);
      c2 = c2 === null || c2 === void 0 ? b3 : A({}, b3, c2);
      a3.memoizedState = c2;
      a3.lanes === 0 && (a3.updateQueue.baseState = c2);
    }
    var Mg = { isMounted: function(a3) {
      return (a3 = a3._reactInternals) ? Ub(a3) === a3 : false;
    }, enqueueSetState: function(a3, b3, c2) {
      a3 = a3._reactInternals;
      var d = Jg(), e = Kg(a3), f = zg(d, e);
      f.payload = b3;
      c2 !== void 0 && c2 !== null && (f.callback = c2);
      Ag(a3, f);
      b3 = Lg(a3, e, d);
      b3 !== null && Cg(b3, a3, e);
    }, enqueueReplaceState: function(a3, b3, c2) {
      a3 = a3._reactInternals;
      var d = Jg(), e = Kg(a3), f = zg(d, e);
      f.tag = 1;
      f.payload = b3;
      c2 !== void 0 && c2 !== null && (f.callback = c2);
      Ag(a3, f);
      b3 = Lg(a3, e, d);
      b3 !== null && Cg(b3, a3, e);
    }, enqueueForceUpdate: function(a3, b3) {
      a3 = a3._reactInternals;
      var c2 = Jg(), d = Kg(a3), e = zg(c2, d);
      e.tag = 2;
      b3 !== void 0 && b3 !== null && (e.callback = b3);
      Ag(a3, e);
      b3 = Lg(a3, d, c2);
      b3 !== null && Cg(b3, a3, d);
    } };
    function Ng(a3, b3, c2, d, e, f, g2) {
      a3 = a3.stateNode;
      return typeof a3.shouldComponentUpdate === "function" ? a3.shouldComponentUpdate(d, f, g2) : b3.prototype && b3.prototype.isPureReactComponent ? !He(c2, d) || !He(e, f) : true;
    }
    function Og(a3, b3, c2) {
      var d = false, e = Uf;
      var f = b3.contextType;
      typeof f === "object" && f !== null ? f = ug(f) : (e = Yf(b3) ? Wf : H.current, d = b3.contextTypes, f = (d = d !== null && d !== void 0) ? Xf(a3, e) : Uf);
      b3 = new b3(c2, f);
      a3.memoizedState = b3.state !== null && b3.state !== void 0 ? b3.state : null;
      b3.updater = Mg;
      a3.stateNode = b3;
      b3._reactInternals = a3;
      d && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = e, a3.__reactInternalMemoizedMaskedChildContext = f);
      return b3;
    }
    function Pg(a3, b3, c2, d) {
      a3 = b3.state;
      typeof b3.componentWillReceiveProps === "function" && b3.componentWillReceiveProps(c2, d);
      typeof b3.UNSAFE_componentWillReceiveProps === "function" && b3.UNSAFE_componentWillReceiveProps(c2, d);
      b3.state !== a3 && Mg.enqueueReplaceState(b3, b3.state, null);
    }
    function Qg(a3, b3, c2, d) {
      var e = a3.stateNode;
      e.props = c2;
      e.state = a3.memoizedState;
      e.refs = Hg;
      xg(a3);
      var f = b3.contextType;
      typeof f === "object" && f !== null ? e.context = ug(f) : (f = Yf(b3) ? Wf : H.current, e.context = Xf(a3, f));
      e.state = a3.memoizedState;
      f = b3.getDerivedStateFromProps;
      typeof f === "function" && (Ig(a3, b3, f, c2), e.state = a3.memoizedState);
      typeof b3.getDerivedStateFromProps === "function" || typeof e.getSnapshotBeforeUpdate === "function" || typeof e.UNSAFE_componentWillMount !== "function" && typeof e.componentWillMount !== "function" || (b3 = e.state, typeof e.componentWillMount === "function" && e.componentWillMount(), typeof e.UNSAFE_componentWillMount === "function" && e.UNSAFE_componentWillMount(), b3 !== e.state && Mg.enqueueReplaceState(e, e.state, null), Eg(a3, c2, e, d), e.state = a3.memoizedState);
      typeof e.componentDidMount === "function" && (a3.flags |= 4194308);
    }
    var Rg = [];
    var Sg = 0;
    var Tg = null;
    var Ug = 0;
    var Vg = [];
    var Wg = 0;
    var Xg = null;
    var Yg = 1;
    var Zg = "";
    function $g(a3, b3) {
      Rg[Sg++] = Ug;
      Rg[Sg++] = Tg;
      Tg = a3;
      Ug = b3;
    }
    function ah(a3, b3, c2) {
      Vg[Wg++] = Yg;
      Vg[Wg++] = Zg;
      Vg[Wg++] = Xg;
      Xg = a3;
      var d = Yg;
      a3 = Zg;
      var e = 32 - nc(d) - 1;
      d &= ~(1 << e);
      c2 += 1;
      var f = 32 - nc(b3) + e;
      if (30 < f) {
        var g2 = e - e % 5;
        f = (d & (1 << g2) - 1).toString(32);
        d >>= g2;
        e -= g2;
        Yg = 1 << 32 - nc(b3) + e | c2 << e | d;
        Zg = f + a3;
      } else
        Yg = 1 << f | c2 << e | d, Zg = a3;
    }
    function bh(a3) {
      a3.return !== null && ($g(a3, 1), ah(a3, 1, 0));
    }
    function ch2(a3) {
      for (; a3 === Tg; )
        Tg = Rg[--Sg], Rg[Sg] = null, Ug = Rg[--Sg], Rg[Sg] = null;
      for (; a3 === Xg; )
        Xg = Vg[--Wg], Vg[Wg] = null, Zg = Vg[--Wg], Vg[Wg] = null, Yg = Vg[--Wg], Vg[Wg] = null;
    }
    var dh = null;
    var eh = null;
    var I = false;
    var fh = null;
    function gh(a3, b3) {
      var c2 = hh(5, null, null, 0);
      c2.elementType = "DELETED";
      c2.stateNode = b3;
      c2.return = a3;
      b3 = a3.deletions;
      b3 === null ? (a3.deletions = [c2], a3.flags |= 16) : b3.push(c2);
    }
    function ih(a3, b3) {
      switch (a3.tag) {
        case 5:
          var c2 = a3.type;
          b3 = b3.nodeType !== 1 || c2.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
          return b3 !== null ? (a3.stateNode = b3, dh = a3, eh = Kf(b3.firstChild), true) : false;
        case 6:
          return b3 = a3.pendingProps === "" || b3.nodeType !== 3 ? null : b3, b3 !== null ? (a3.stateNode = b3, dh = a3, eh = null, true) : false;
        case 13:
          return b3 = b3.nodeType !== 8 ? null : b3, b3 !== null ? (c2 = Xg !== null ? { id: Yg, overflow: Zg } : null, a3.memoizedState = { dehydrated: b3, treeContext: c2, retryLane: 1073741824 }, c2 = hh(18, null, null, 0), c2.stateNode = b3, c2.return = a3, a3.child = c2, dh = a3, eh = null, true) : false;
        default:
          return false;
      }
    }
    function jh(a3) {
      return (a3.mode & 1) !== 0 && (a3.flags & 128) === 0;
    }
    function kh(a3) {
      if (I) {
        var b3 = eh;
        if (b3) {
          var c2 = b3;
          if (!ih(a3, b3)) {
            if (jh(a3))
              throw Error(p2(418));
            b3 = Kf(c2.nextSibling);
            var d = dh;
            b3 && ih(a3, b3) ? gh(d, c2) : (a3.flags = a3.flags & -4097 | 2, I = false, dh = a3);
          }
        } else {
          if (jh(a3))
            throw Error(p2(418));
          a3.flags = a3.flags & -4097 | 2;
          I = false;
          dh = a3;
        }
      }
    }
    function lh(a3) {
      for (a3 = a3.return; a3 !== null && a3.tag !== 5 && a3.tag !== 3 && a3.tag !== 13; )
        a3 = a3.return;
      dh = a3;
    }
    function mh(a3) {
      if (a3 !== dh)
        return false;
      if (!I)
        return lh(a3), I = true, false;
      var b3;
      (b3 = a3.tag !== 3) && !(b3 = a3.tag !== 5) && (b3 = a3.type, b3 = b3 !== "head" && b3 !== "body" && !Df(a3.type, a3.memoizedProps));
      if (b3 && (b3 = eh)) {
        if (jh(a3)) {
          for (a3 = eh; a3; )
            a3 = Kf(a3.nextSibling);
          throw Error(p2(418));
        }
        for (; b3; )
          gh(a3, b3), b3 = Kf(b3.nextSibling);
      }
      lh(a3);
      if (a3.tag === 13) {
        a3 = a3.memoizedState;
        a3 = a3 !== null ? a3.dehydrated : null;
        if (!a3)
          throw Error(p2(317));
        a: {
          a3 = a3.nextSibling;
          for (b3 = 0; a3; ) {
            if (a3.nodeType === 8) {
              var c2 = a3.data;
              if (c2 === "/$") {
                if (b3 === 0) {
                  eh = Kf(a3.nextSibling);
                  break a;
                }
                b3--;
              } else
                c2 !== "$" && c2 !== "$!" && c2 !== "$?" || b3++;
            }
            a3 = a3.nextSibling;
          }
          eh = null;
        }
      } else
        eh = dh ? Kf(a3.stateNode.nextSibling) : null;
      return true;
    }
    function nh() {
      eh = dh = null;
      I = false;
    }
    function oh(a3) {
      fh === null ? fh = [a3] : fh.push(a3);
    }
    function ph(a3, b3, c2) {
      a3 = c2.ref;
      if (a3 !== null && typeof a3 !== "function" && typeof a3 !== "object") {
        if (c2._owner) {
          c2 = c2._owner;
          if (c2) {
            if (c2.tag !== 1)
              throw Error(p2(309));
            var d = c2.stateNode;
          }
          if (!d)
            throw Error(p2(147, a3));
          var e = d, f = "" + a3;
          if (b3 !== null && b3.ref !== null && typeof b3.ref === "function" && b3.ref._stringRef === f)
            return b3.ref;
          b3 = function(a4) {
            var b4 = e.refs;
            b4 === Hg && (b4 = e.refs = {});
            a4 === null ? delete b4[f] : b4[f] = a4;
          };
          b3._stringRef = f;
          return b3;
        }
        if (typeof a3 !== "string")
          throw Error(p2(284));
        if (!c2._owner)
          throw Error(p2(290, a3));
      }
      return a3;
    }
    function qh(a3, b3) {
      a3 = Object.prototype.toString.call(b3);
      throw Error(p2(31, a3 === "[object Object]" ? "object with keys {" + Object.keys(b3).join(", ") + "}" : a3));
    }
    function rh(a3) {
      var b3 = a3._init;
      return b3(a3._payload);
    }
    function sh(a3) {
      function b3(b4, c3) {
        if (a3) {
          var d2 = b4.deletions;
          d2 === null ? (b4.deletions = [c3], b4.flags |= 16) : d2.push(c3);
        }
      }
      function c2(c3, d2) {
        if (!a3)
          return null;
        for (; d2 !== null; )
          b3(c3, d2), d2 = d2.sibling;
        return null;
      }
      function d(a4, b4) {
        for (a4 = /* @__PURE__ */ new Map(); b4 !== null; )
          b4.key !== null ? a4.set(b4.key, b4) : a4.set(b4.index, b4), b4 = b4.sibling;
        return a4;
      }
      function e(a4, b4) {
        a4 = th2(a4, b4);
        a4.index = 0;
        a4.sibling = null;
        return a4;
      }
      function f(b4, c3, d2) {
        b4.index = d2;
        if (!a3)
          return b4.flags |= 1048576, c3;
        d2 = b4.alternate;
        if (d2 !== null)
          return d2 = d2.index, d2 < c3 ? (b4.flags |= 2, c3) : d2;
        b4.flags |= 2;
        return c3;
      }
      function g2(b4) {
        a3 && b4.alternate === null && (b4.flags |= 2);
        return b4;
      }
      function h(a4, b4, c3, d2) {
        if (b4 === null || b4.tag !== 6)
          return b4 = uh(c3, a4.mode, d2), b4.return = a4, b4;
        b4 = e(b4, c3);
        b4.return = a4;
        return b4;
      }
      function k(a4, b4, c3, d2) {
        var f2 = c3.type;
        if (f2 === wa)
          return n(a4, b4, c3.props.children, d2, c3.key);
        if (b4 !== null && (b4.elementType === f2 || typeof f2 === "object" && f2 !== null && f2.$$typeof === Ga && rh(f2) === b4.type))
          return d2 = e(b4, c3.props), d2.ref = ph(a4, b4, c3), d2.return = a4, d2;
        d2 = vh3(c3.type, c3.key, c3.props, null, a4.mode, d2);
        d2.ref = ph(a4, b4, c3);
        d2.return = a4;
        return d2;
      }
      function l(a4, b4, c3, d2) {
        if (b4 === null || b4.tag !== 4 || b4.stateNode.containerInfo !== c3.containerInfo || b4.stateNode.implementation !== c3.implementation)
          return b4 = wh(c3, a4.mode, d2), b4.return = a4, b4;
        b4 = e(b4, c3.children || []);
        b4.return = a4;
        return b4;
      }
      function n(a4, b4, c3, d2, f2) {
        if (b4 === null || b4.tag !== 7)
          return b4 = xh(c3, a4.mode, d2, f2), b4.return = a4, b4;
        b4 = e(b4, c3);
        b4.return = a4;
        return b4;
      }
      function u2(a4, b4, c3) {
        if (typeof b4 === "string" && b4 !== "" || typeof b4 === "number")
          return b4 = uh("" + b4, a4.mode, c3), b4.return = a4, b4;
        if (typeof b4 === "object" && b4 !== null) {
          switch (b4.$$typeof) {
            case ua:
              return c3 = vh3(b4.type, b4.key, b4.props, null, a4.mode, c3), c3.ref = ph(a4, null, b4), c3.return = a4, c3;
            case va:
              return b4 = wh(b4, a4.mode, c3), b4.return = a4, b4;
            case Ga:
              var d2 = b4._init;
              return u2(a4, d2(b4._payload), c3);
          }
          if (db(b4) || Ja(b4))
            return b4 = xh(b4, a4.mode, c3, null), b4.return = a4, b4;
          qh(a4, b4);
        }
        return null;
      }
      function q2(a4, b4, c3, d2) {
        var e2 = b4 !== null ? b4.key : null;
        if (typeof c3 === "string" && c3 !== "" || typeof c3 === "number")
          return e2 !== null ? null : h(a4, b4, "" + c3, d2);
        if (typeof c3 === "object" && c3 !== null) {
          switch (c3.$$typeof) {
            case ua:
              return c3.key === e2 ? k(a4, b4, c3, d2) : null;
            case va:
              return c3.key === e2 ? l(a4, b4, c3, d2) : null;
            case Ga:
              return e2 = c3._init, q2(a4, b4, e2(c3._payload), d2);
          }
          if (db(c3) || Ja(c3))
            return e2 !== null ? null : n(a4, b4, c3, d2, null);
          qh(a4, c3);
        }
        return null;
      }
      function y(a4, b4, c3, d2, e2) {
        if (typeof d2 === "string" && d2 !== "" || typeof d2 === "number")
          return a4 = a4.get(c3) || null, h(b4, a4, "" + d2, e2);
        if (typeof d2 === "object" && d2 !== null) {
          switch (d2.$$typeof) {
            case ua:
              return a4 = a4.get(d2.key === null ? c3 : d2.key) || null, k(b4, a4, d2, e2);
            case va:
              return a4 = a4.get(d2.key === null ? c3 : d2.key) || null, l(b4, a4, d2, e2);
            case Ga:
              var f2 = d2._init;
              return y(a4, b4, c3, f2(d2._payload), e2);
          }
          if (db(d2) || Ja(d2))
            return a4 = a4.get(c3) || null, n(b4, a4, d2, e2, null);
          qh(b4, d2);
        }
        return null;
      }
      function m(e2, g3, h7, k2) {
        for (var l2 = null, n2 = null, r = g3, m2 = g3 = 0, x = null; r !== null && m2 < h7.length; m2++) {
          r.index > m2 ? (x = r, r = null) : x = r.sibling;
          var v = q2(e2, r, h7[m2], k2);
          if (v === null) {
            r === null && (r = x);
            break;
          }
          a3 && r && v.alternate === null && b3(e2, r);
          g3 = f(v, g3, m2);
          n2 === null ? l2 = v : n2.sibling = v;
          n2 = v;
          r = x;
        }
        if (m2 === h7.length)
          return c2(e2, r), I && $g(e2, m2), l2;
        if (r === null) {
          for (; m2 < h7.length; m2++)
            r = u2(e2, h7[m2], k2), r !== null && (g3 = f(r, g3, m2), n2 === null ? l2 = r : n2.sibling = r, n2 = r);
          I && $g(e2, m2);
          return l2;
        }
        for (r = d(e2, r); m2 < h7.length; m2++)
          x = y(r, e2, m2, h7[m2], k2), x !== null && (a3 && x.alternate !== null && r.delete(x.key === null ? m2 : x.key), g3 = f(x, g3, m2), n2 === null ? l2 = x : n2.sibling = x, n2 = x);
        a3 && r.forEach(function(a4) {
          return b3(e2, a4);
        });
        I && $g(e2, m2);
        return l2;
      }
      function w(e2, g3, h7, k2) {
        var l2 = Ja(h7);
        if (typeof l2 !== "function")
          throw Error(p2(150));
        h7 = l2.call(h7);
        if (h7 == null)
          throw Error(p2(151));
        for (var n2 = l2 = null, m2 = g3, r = g3 = 0, x = null, v = h7.next(); m2 !== null && !v.done; r++, v = h7.next()) {
          m2.index > r ? (x = m2, m2 = null) : x = m2.sibling;
          var w2 = q2(e2, m2, v.value, k2);
          if (w2 === null) {
            m2 === null && (m2 = x);
            break;
          }
          a3 && m2 && w2.alternate === null && b3(e2, m2);
          g3 = f(w2, g3, r);
          n2 === null ? l2 = w2 : n2.sibling = w2;
          n2 = w2;
          m2 = x;
        }
        if (v.done)
          return c2(e2, m2), I && $g(e2, r), l2;
        if (m2 === null) {
          for (; !v.done; r++, v = h7.next())
            v = u2(e2, v.value, k2), v !== null && (g3 = f(v, g3, r), n2 === null ? l2 = v : n2.sibling = v, n2 = v);
          I && $g(e2, r);
          return l2;
        }
        for (m2 = d(e2, m2); !v.done; r++, v = h7.next())
          v = y(m2, e2, r, v.value, k2), v !== null && (a3 && v.alternate !== null && m2.delete(v.key === null ? r : v.key), g3 = f(v, g3, r), n2 === null ? l2 = v : n2.sibling = v, n2 = v);
        a3 && m2.forEach(function(a4) {
          return b3(e2, a4);
        });
        I && $g(e2, r);
        return l2;
      }
      function J(a4, d2, f2, h7) {
        typeof f2 === "object" && f2 !== null && f2.type === wa && f2.key === null && (f2 = f2.props.children);
        if (typeof f2 === "object" && f2 !== null) {
          switch (f2.$$typeof) {
            case ua:
              a: {
                for (var k2 = f2.key, l2 = d2; l2 !== null; ) {
                  if (l2.key === k2) {
                    k2 = f2.type;
                    if (k2 === wa) {
                      if (l2.tag === 7) {
                        c2(a4, l2.sibling);
                        d2 = e(l2, f2.props.children);
                        d2.return = a4;
                        a4 = d2;
                        break a;
                      }
                    } else if (l2.elementType === k2 || typeof k2 === "object" && k2 !== null && k2.$$typeof === Ga && rh(k2) === l2.type) {
                      c2(a4, l2.sibling);
                      d2 = e(l2, f2.props);
                      d2.ref = ph(a4, l2, f2);
                      d2.return = a4;
                      a4 = d2;
                      break a;
                    }
                    c2(a4, l2);
                    break;
                  } else
                    b3(a4, l2);
                  l2 = l2.sibling;
                }
                f2.type === wa ? (d2 = xh(f2.props.children, a4.mode, h7, f2.key), d2.return = a4, a4 = d2) : (h7 = vh3(f2.type, f2.key, f2.props, null, a4.mode, h7), h7.ref = ph(a4, d2, f2), h7.return = a4, a4 = h7);
              }
              return g2(a4);
            case va:
              a: {
                for (l2 = f2.key; d2 !== null; ) {
                  if (d2.key === l2)
                    if (d2.tag === 4 && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c2(a4, d2.sibling);
                      d2 = e(d2, f2.children || []);
                      d2.return = a4;
                      a4 = d2;
                      break a;
                    } else {
                      c2(a4, d2);
                      break;
                    }
                  else
                    b3(a4, d2);
                  d2 = d2.sibling;
                }
                d2 = wh(f2, a4.mode, h7);
                d2.return = a4;
                a4 = d2;
              }
              return g2(a4);
            case Ga:
              return l2 = f2._init, J(a4, d2, l2(f2._payload), h7);
          }
          if (db(f2))
            return m(a4, d2, f2, h7);
          if (Ja(f2))
            return w(a4, d2, f2, h7);
          qh(a4, f2);
        }
        return typeof f2 === "string" && f2 !== "" || typeof f2 === "number" ? (f2 = "" + f2, d2 !== null && d2.tag === 6 ? (c2(a4, d2.sibling), d2 = e(d2, f2), d2.return = a4, a4 = d2) : (c2(a4, d2), d2 = uh(f2, a4.mode, h7), d2.return = a4, a4 = d2), g2(a4)) : c2(a4, d2);
      }
      return J;
    }
    var yh = sh(true);
    var zh = sh(false);
    var Ah = {};
    var Bh = Tf(Ah);
    var Ch = Tf(Ah);
    var Dh = Tf(Ah);
    function Eh(a3) {
      if (a3 === Ah)
        throw Error(p2(174));
      return a3;
    }
    function Fh(a3, b3) {
      G(Dh, b3);
      G(Ch, a3);
      G(Bh, Ah);
      a3 = b3.nodeType;
      switch (a3) {
        case 9:
        case 11:
          b3 = (b3 = b3.documentElement) ? b3.namespaceURI : kb(null, "");
          break;
        default:
          a3 = a3 === 8 ? b3.parentNode : b3, b3 = a3.namespaceURI || null, a3 = a3.tagName, b3 = kb(b3, a3);
      }
      E(Bh);
      G(Bh, b3);
    }
    function Gh() {
      E(Bh);
      E(Ch);
      E(Dh);
    }
    function Hh(a3) {
      Eh(Dh.current);
      var b3 = Eh(Bh.current);
      var c2 = kb(b3, a3.type);
      b3 !== c2 && (G(Ch, a3), G(Bh, c2));
    }
    function Ih(a3) {
      Ch.current === a3 && (E(Bh), E(Ch));
    }
    var K = Tf(0);
    function Jh(a3) {
      for (var b3 = a3; b3 !== null; ) {
        if (b3.tag === 13) {
          var c2 = b3.memoizedState;
          if (c2 !== null && (c2 = c2.dehydrated, c2 === null || c2.data === "$?" || c2.data === "$!"))
            return b3;
        } else if (b3.tag === 19 && b3.memoizedProps.revealOrder !== void 0) {
          if ((b3.flags & 128) !== 0)
            return b3;
        } else if (b3.child !== null) {
          b3.child.return = b3;
          b3 = b3.child;
          continue;
        }
        if (b3 === a3)
          break;
        for (; b3.sibling === null; ) {
          if (b3.return === null || b3.return === a3)
            return null;
          b3 = b3.return;
        }
        b3.sibling.return = b3.return;
        b3 = b3.sibling;
      }
      return null;
    }
    var Kh = [];
    function Lh() {
      for (var a3 = 0; a3 < Kh.length; a3++)
        Kh[a3]._workInProgressVersionPrimary = null;
      Kh.length = 0;
    }
    var Mh = ta.ReactCurrentDispatcher;
    var Nh = ta.ReactCurrentBatchConfig;
    var Oh = 0;
    var L = null;
    var M = null;
    var N = null;
    var Ph = false;
    var Qh = false;
    var Rh = 0;
    var Sh = 0;
    function O() {
      throw Error(p2(321));
    }
    function Th(a3, b3) {
      if (b3 === null)
        return false;
      for (var c2 = 0; c2 < b3.length && c2 < a3.length; c2++)
        if (!Ge(a3[c2], b3[c2]))
          return false;
      return true;
    }
    function Uh(a3, b3, c2, d, e, f) {
      Oh = f;
      L = b3;
      b3.memoizedState = null;
      b3.updateQueue = null;
      b3.lanes = 0;
      Mh.current = a3 === null || a3.memoizedState === null ? Vh : Wh;
      a3 = c2(d, e);
      if (Qh) {
        f = 0;
        do {
          Qh = false;
          Rh = 0;
          if (25 <= f)
            throw Error(p2(301));
          f += 1;
          N = M = null;
          b3.updateQueue = null;
          Mh.current = Xh;
          a3 = c2(d, e);
        } while (Qh);
      }
      Mh.current = Yh;
      b3 = M !== null && M.next !== null;
      Oh = 0;
      N = M = L = null;
      Ph = false;
      if (b3)
        throw Error(p2(300));
      return a3;
    }
    function Zh() {
      var a3 = Rh !== 0;
      Rh = 0;
      return a3;
    }
    function $h() {
      var a3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      N === null ? L.memoizedState = N = a3 : N = N.next = a3;
      return N;
    }
    function ai() {
      if (M === null) {
        var a3 = L.alternate;
        a3 = a3 !== null ? a3.memoizedState : null;
      } else
        a3 = M.next;
      var b3 = N === null ? L.memoizedState : N.next;
      if (b3 !== null)
        N = b3, M = a3;
      else {
        if (a3 === null)
          throw Error(p2(310));
        M = a3;
        a3 = { memoizedState: M.memoizedState, baseState: M.baseState, baseQueue: M.baseQueue, queue: M.queue, next: null };
        N === null ? L.memoizedState = N = a3 : N = N.next = a3;
      }
      return N;
    }
    function bi(a3, b3) {
      return typeof b3 === "function" ? b3(a3) : b3;
    }
    function ci(a3) {
      var b3 = ai(), c2 = b3.queue;
      if (c2 === null)
        throw Error(p2(311));
      c2.lastRenderedReducer = a3;
      var d = M, e = d.baseQueue, f = c2.pending;
      if (f !== null) {
        if (e !== null) {
          var g2 = e.next;
          e.next = f.next;
          f.next = g2;
        }
        d.baseQueue = e = f;
        c2.pending = null;
      }
      if (e !== null) {
        f = e.next;
        d = d.baseState;
        var h = g2 = null, k = null, l = f;
        do {
          var n = l.lane;
          if ((Oh & n) === n)
            k !== null && (k = k.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a3(d, l.action);
          else {
            var u2 = {
              lane: n,
              action: l.action,
              hasEagerState: l.hasEagerState,
              eagerState: l.eagerState,
              next: null
            };
            k === null ? (h = k = u2, g2 = d) : k = k.next = u2;
            L.lanes |= n;
            Fg |= n;
          }
          l = l.next;
        } while (l !== null && l !== f);
        k === null ? g2 = d : k.next = h;
        Ge(d, b3.memoizedState) || (tg = true);
        b3.memoizedState = d;
        b3.baseState = g2;
        b3.baseQueue = k;
        c2.lastRenderedState = d;
      }
      a3 = c2.interleaved;
      if (a3 !== null) {
        e = a3;
        do
          f = e.lane, L.lanes |= f, Fg |= f, e = e.next;
        while (e !== a3);
      } else
        e === null && (c2.lanes = 0);
      return [b3.memoizedState, c2.dispatch];
    }
    function di(a3) {
      var b3 = ai(), c2 = b3.queue;
      if (c2 === null)
        throw Error(p2(311));
      c2.lastRenderedReducer = a3;
      var d = c2.dispatch, e = c2.pending, f = b3.memoizedState;
      if (e !== null) {
        c2.pending = null;
        var g2 = e = e.next;
        do
          f = a3(f, g2.action), g2 = g2.next;
        while (g2 !== e);
        Ge(f, b3.memoizedState) || (tg = true);
        b3.memoizedState = f;
        b3.baseQueue === null && (b3.baseState = f);
        c2.lastRenderedState = f;
      }
      return [f, d];
    }
    function ei() {
    }
    function fi(a3, b3) {
      var c2 = L, d = ai(), e = b3(), f = !Ge(d.memoizedState, e);
      f && (d.memoizedState = e, tg = true);
      d = d.queue;
      gi(hi.bind(null, c2, d, a3), [a3]);
      if (d.getSnapshot !== b3 || f || N !== null && N.memoizedState.tag & 1) {
        c2.flags |= 2048;
        ii(9, ji.bind(null, c2, d, e, b3), void 0, null);
        if (P === null)
          throw Error(p2(349));
        (Oh & 30) !== 0 || ki(c2, b3, e);
      }
      return e;
    }
    function ki(a3, b3, c2) {
      a3.flags |= 16384;
      a3 = { getSnapshot: b3, value: c2 };
      b3 = L.updateQueue;
      b3 === null ? (b3 = { lastEffect: null, stores: null }, L.updateQueue = b3, b3.stores = [a3]) : (c2 = b3.stores, c2 === null ? b3.stores = [a3] : c2.push(a3));
    }
    function ji(a3, b3, c2, d) {
      b3.value = c2;
      b3.getSnapshot = d;
      li3(b3) && Lg(a3, 1, -1);
    }
    function hi(a3, b3, c2) {
      return c2(function() {
        li3(b3) && Lg(a3, 1, -1);
      });
    }
    function li3(a3) {
      var b3 = a3.getSnapshot;
      a3 = a3.value;
      try {
        var c2 = b3();
        return !Ge(a3, c2);
      } catch (d) {
        return true;
      }
    }
    function mi(a3) {
      var b3 = $h();
      typeof a3 === "function" && (a3 = a3());
      b3.memoizedState = b3.baseState = a3;
      a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: bi, lastRenderedState: a3 };
      b3.queue = a3;
      a3 = a3.dispatch = ni.bind(null, L, a3);
      return [b3.memoizedState, a3];
    }
    function ii(a3, b3, c2, d) {
      a3 = { tag: a3, create: b3, destroy: c2, deps: d, next: null };
      b3 = L.updateQueue;
      b3 === null ? (b3 = { lastEffect: null, stores: null }, L.updateQueue = b3, b3.lastEffect = a3.next = a3) : (c2 = b3.lastEffect, c2 === null ? b3.lastEffect = a3.next = a3 : (d = c2.next, c2.next = a3, a3.next = d, b3.lastEffect = a3));
      return a3;
    }
    function oi() {
      return ai().memoizedState;
    }
    function pi2(a3, b3, c2, d) {
      var e = $h();
      L.flags |= a3;
      e.memoizedState = ii(1 | b3, c2, void 0, d === void 0 ? null : d);
    }
    function qi(a3, b3, c2, d) {
      var e = ai();
      d = d === void 0 ? null : d;
      var f = void 0;
      if (M !== null) {
        var g2 = M.memoizedState;
        f = g2.destroy;
        if (d !== null && Th(d, g2.deps)) {
          e.memoizedState = ii(b3, c2, f, d);
          return;
        }
      }
      L.flags |= a3;
      e.memoizedState = ii(1 | b3, c2, f, d);
    }
    function ri(a3, b3) {
      return pi2(8390656, 8, a3, b3);
    }
    function gi(a3, b3) {
      return qi(2048, 8, a3, b3);
    }
    function si(a3, b3) {
      return qi(4, 2, a3, b3);
    }
    function ti(a3, b3) {
      return qi(4, 4, a3, b3);
    }
    function ui(a3, b3) {
      if (typeof b3 === "function")
        return a3 = a3(), b3(a3), function() {
          b3(null);
        };
      if (b3 !== null && b3 !== void 0)
        return a3 = a3(), b3.current = a3, function() {
          b3.current = null;
        };
    }
    function vi(a3, b3, c2) {
      c2 = c2 !== null && c2 !== void 0 ? c2.concat([a3]) : null;
      return qi(4, 4, ui.bind(null, b3, a3), c2);
    }
    function wi() {
    }
    function xi(a3, b3) {
      var c2 = ai();
      b3 = b3 === void 0 ? null : b3;
      var d = c2.memoizedState;
      if (d !== null && b3 !== null && Th(b3, d[1]))
        return d[0];
      c2.memoizedState = [a3, b3];
      return a3;
    }
    function yi(a3, b3) {
      var c2 = ai();
      b3 = b3 === void 0 ? null : b3;
      var d = c2.memoizedState;
      if (d !== null && b3 !== null && Th(b3, d[1]))
        return d[0];
      a3 = a3();
      c2.memoizedState = [a3, b3];
      return a3;
    }
    function zi(a3, b3, c2) {
      if ((Oh & 21) === 0)
        return a3.baseState && (a3.baseState = false, tg = true), a3.memoizedState = c2;
      Ge(c2, b3) || (c2 = xc(), L.lanes |= c2, Fg |= c2, a3.baseState = true);
      return b3;
    }
    function Ai(a3, b3) {
      var c2 = C;
      C = c2 !== 0 && 4 > c2 ? c2 : 4;
      a3(true);
      var d = Nh.transition;
      Nh.transition = {};
      try {
        a3(false), b3();
      } finally {
        C = c2, Nh.transition = d;
      }
    }
    function Bi() {
      return ai().memoizedState;
    }
    function Ci(a3, b3, c2) {
      var d = Kg(a3);
      c2 = { lane: d, action: c2, hasEagerState: false, eagerState: null, next: null };
      Di(a3) ? Ei(b3, c2) : (Fi(a3, b3, c2), c2 = Jg(), a3 = Lg(a3, d, c2), a3 !== null && Gi(a3, b3, d));
    }
    function ni(a3, b3, c2) {
      var d = Kg(a3), e = { lane: d, action: c2, hasEagerState: false, eagerState: null, next: null };
      if (Di(a3))
        Ei(b3, e);
      else {
        Fi(a3, b3, e);
        var f = a3.alternate;
        if (a3.lanes === 0 && (f === null || f.lanes === 0) && (f = b3.lastRenderedReducer, f !== null))
          try {
            var g2 = b3.lastRenderedState, h = f(g2, c2);
            e.hasEagerState = true;
            e.eagerState = h;
            if (Ge(h, g2))
              return;
          } catch (k) {
          } finally {
          }
        c2 = Jg();
        a3 = Lg(a3, d, c2);
        a3 !== null && Gi(a3, b3, d);
      }
    }
    function Di(a3) {
      var b3 = a3.alternate;
      return a3 === L || b3 !== null && b3 === L;
    }
    function Ei(a3, b3) {
      Qh = Ph = true;
      var c2 = a3.pending;
      c2 === null ? b3.next = b3 : (b3.next = c2.next, c2.next = b3);
      a3.pending = b3;
    }
    function Fi(a3, b3, c2) {
      Bg(a3) ? (a3 = b3.interleaved, a3 === null ? (c2.next = c2, vg === null ? vg = [b3] : vg.push(b3)) : (c2.next = a3.next, a3.next = c2), b3.interleaved = c2) : (a3 = b3.pending, a3 === null ? c2.next = c2 : (c2.next = a3.next, a3.next = c2), b3.pending = c2);
    }
    function Gi(a3, b3, c2) {
      if ((c2 & 4194240) !== 0) {
        var d = b3.lanes;
        d &= a3.pendingLanes;
        c2 |= d;
        b3.lanes = c2;
        Bc(a3, c2);
      }
    }
    var Yh = { readContext: ug, useCallback: O, useContext: O, useEffect: O, useImperativeHandle: O, useInsertionEffect: O, useLayoutEffect: O, useMemo: O, useReducer: O, useRef: O, useState: O, useDebugValue: O, useDeferredValue: O, useTransition: O, useMutableSource: O, useSyncExternalStore: O, useId: O, unstable_isNewReconciler: false };
    var Vh = { readContext: ug, useCallback: function(a3, b3) {
      $h().memoizedState = [a3, b3 === void 0 ? null : b3];
      return a3;
    }, useContext: ug, useEffect: ri, useImperativeHandle: function(a3, b3, c2) {
      c2 = c2 !== null && c2 !== void 0 ? c2.concat([a3]) : null;
      return pi2(4194308, 4, ui.bind(null, b3, a3), c2);
    }, useLayoutEffect: function(a3, b3) {
      return pi2(4194308, 4, a3, b3);
    }, useInsertionEffect: function(a3, b3) {
      return pi2(4, 2, a3, b3);
    }, useMemo: function(a3, b3) {
      var c2 = $h();
      b3 = b3 === void 0 ? null : b3;
      a3 = a3();
      c2.memoizedState = [a3, b3];
      return a3;
    }, useReducer: function(a3, b3, c2) {
      var d = $h();
      b3 = c2 !== void 0 ? c2(b3) : b3;
      d.memoizedState = d.baseState = b3;
      a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a3, lastRenderedState: b3 };
      d.queue = a3;
      a3 = a3.dispatch = Ci.bind(null, L, a3);
      return [d.memoizedState, a3];
    }, useRef: function(a3) {
      var b3 = $h();
      a3 = { current: a3 };
      return b3.memoizedState = a3;
    }, useState: mi, useDebugValue: wi, useDeferredValue: function(a3) {
      return $h().memoizedState = a3;
    }, useTransition: function() {
      var a3 = mi(false), b3 = a3[0];
      a3 = Ai.bind(null, a3[1]);
      $h().memoizedState = a3;
      return [b3, a3];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a3, b3, c2) {
      var d = L, e = $h();
      if (I) {
        if (c2 === void 0)
          throw Error(p2(407));
        c2 = c2();
      } else {
        c2 = b3();
        if (P === null)
          throw Error(p2(349));
        (Oh & 30) !== 0 || ki(d, b3, c2);
      }
      e.memoizedState = c2;
      var f = { value: c2, getSnapshot: b3 };
      e.queue = f;
      ri(hi.bind(null, d, f, a3), [a3]);
      d.flags |= 2048;
      ii(9, ji.bind(null, d, f, c2, b3), void 0, null);
      return c2;
    }, useId: function() {
      var a3 = $h(), b3 = P.identifierPrefix;
      if (I) {
        var c2 = Zg;
        var d = Yg;
        c2 = (d & ~(1 << 32 - nc(d) - 1)).toString(32) + c2;
        b3 = ":" + b3 + "R" + c2;
        c2 = Rh++;
        0 < c2 && (b3 += "H" + c2.toString(32));
        b3 += ":";
      } else
        c2 = Sh++, b3 = ":" + b3 + "r" + c2.toString(32) + ":";
      return a3.memoizedState = b3;
    }, unstable_isNewReconciler: false };
    var Wh = {
      readContext: ug,
      useCallback: xi,
      useContext: ug,
      useEffect: gi,
      useImperativeHandle: vi,
      useInsertionEffect: si,
      useLayoutEffect: ti,
      useMemo: yi,
      useReducer: ci,
      useRef: oi,
      useState: function() {
        return ci(bi);
      },
      useDebugValue: wi,
      useDeferredValue: function(a3) {
        var b3 = ai();
        return zi(b3, M.memoizedState, a3);
      },
      useTransition: function() {
        var a3 = ci(bi)[0], b3 = ai().memoizedState;
        return [a3, b3];
      },
      useMutableSource: ei,
      useSyncExternalStore: fi,
      useId: Bi,
      unstable_isNewReconciler: false
    };
    var Xh = { readContext: ug, useCallback: xi, useContext: ug, useEffect: gi, useImperativeHandle: vi, useInsertionEffect: si, useLayoutEffect: ti, useMemo: yi, useReducer: di, useRef: oi, useState: function() {
      return di(bi);
    }, useDebugValue: wi, useDeferredValue: function(a3) {
      var b3 = ai();
      return M === null ? b3.memoizedState = a3 : zi(b3, M.memoizedState, a3);
    }, useTransition: function() {
      var a3 = di(bi)[0], b3 = ai().memoizedState;
      return [a3, b3];
    }, useMutableSource: ei, useSyncExternalStore: fi, useId: Bi, unstable_isNewReconciler: false };
    function Hi(a3, b3) {
      try {
        var c2 = "", d = b3;
        do
          c2 += Oa(d), d = d.return;
        while (d);
        var e = c2;
      } catch (f) {
        e = "\nError generating stack: " + f.message + "\n" + f.stack;
      }
      return { value: a3, source: b3, stack: e };
    }
    function Ii(a3, b3) {
      try {
        console.error(b3.value);
      } catch (c2) {
        setTimeout(function() {
          throw c2;
        });
      }
    }
    var Ji = typeof WeakMap === "function" ? WeakMap : Map;
    function Ki(a3, b3, c2) {
      c2 = zg(-1, c2);
      c2.tag = 3;
      c2.payload = { element: null };
      var d = b3.value;
      c2.callback = function() {
        Li || (Li = true, Mi = d);
        Ii(a3, b3);
      };
      return c2;
    }
    function Ni(a3, b3, c2) {
      c2 = zg(-1, c2);
      c2.tag = 3;
      var d = a3.type.getDerivedStateFromError;
      if (typeof d === "function") {
        var e = b3.value;
        c2.payload = function() {
          return d(e);
        };
        c2.callback = function() {
          Ii(a3, b3);
        };
      }
      var f = a3.stateNode;
      f !== null && typeof f.componentDidCatch === "function" && (c2.callback = function() {
        Ii(a3, b3);
        typeof d !== "function" && (Oi === null ? Oi = /* @__PURE__ */ new Set([this]) : Oi.add(this));
        var c3 = b3.stack;
        this.componentDidCatch(b3.value, { componentStack: c3 !== null ? c3 : "" });
      });
      return c2;
    }
    function Pi(a3, b3, c2) {
      var d = a3.pingCache;
      if (d === null) {
        d = a3.pingCache = new Ji();
        var e = /* @__PURE__ */ new Set();
        d.set(b3, e);
      } else
        e = d.get(b3), e === void 0 && (e = /* @__PURE__ */ new Set(), d.set(b3, e));
      e.has(c2) || (e.add(c2), a3 = Qi.bind(null, a3, b3, c2), b3.then(a3, a3));
    }
    function Ri(a3) {
      do {
        var b3;
        if (b3 = a3.tag === 13)
          b3 = a3.memoizedState, b3 = b3 !== null ? b3.dehydrated !== null ? true : false : true;
        if (b3)
          return a3;
        a3 = a3.return;
      } while (a3 !== null);
      return null;
    }
    function Si(a3, b3, c2, d, e) {
      if ((a3.mode & 1) === 0)
        return a3 === b3 ? a3.flags |= 65536 : (a3.flags |= 128, c2.flags |= 131072, c2.flags &= -52805, c2.tag === 1 && (c2.alternate === null ? c2.tag = 17 : (b3 = zg(-1, 1), b3.tag = 2, Ag(c2, b3))), c2.lanes |= 1), a3;
      a3.flags |= 65536;
      a3.lanes = e;
      return a3;
    }
    var Ti;
    var Ui;
    var Vi;
    var Wi;
    Ti = function(a3, b3) {
      for (var c2 = b3.child; c2 !== null; ) {
        if (c2.tag === 5 || c2.tag === 6)
          a3.appendChild(c2.stateNode);
        else if (c2.tag !== 4 && c2.child !== null) {
          c2.child.return = c2;
          c2 = c2.child;
          continue;
        }
        if (c2 === b3)
          break;
        for (; c2.sibling === null; ) {
          if (c2.return === null || c2.return === b3)
            return;
          c2 = c2.return;
        }
        c2.sibling.return = c2.return;
        c2 = c2.sibling;
      }
    };
    Ui = function() {
    };
    Vi = function(a3, b3, c2, d) {
      var e = a3.memoizedProps;
      if (e !== d) {
        a3 = b3.stateNode;
        Eh(Bh.current);
        var f = null;
        switch (c2) {
          case "input":
            e = Xa(a3, e);
            d = Xa(a3, d);
            f = [];
            break;
          case "select":
            e = A({}, e, { value: void 0 });
            d = A({}, d, { value: void 0 });
            f = [];
            break;
          case "textarea":
            e = fb(a3, e);
            d = fb(a3, d);
            f = [];
            break;
          default:
            typeof e.onClick !== "function" && typeof d.onClick === "function" && (a3.onclick = Af);
        }
        tb(c2, d);
        var g2;
        c2 = null;
        for (l in e)
          if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && e[l] != null)
            if (l === "style") {
              var h = e[l];
              for (g2 in h)
                h.hasOwnProperty(g2) && (c2 || (c2 = {}), c2[g2] = "");
            } else
              l !== "dangerouslySetInnerHTML" && l !== "children" && l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && l !== "autoFocus" && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
        for (l in d) {
          var k = d[l];
          h = e != null ? e[l] : void 0;
          if (d.hasOwnProperty(l) && k !== h && (k != null || h != null))
            if (l === "style")
              if (h) {
                for (g2 in h)
                  !h.hasOwnProperty(g2) || k && k.hasOwnProperty(g2) || (c2 || (c2 = {}), c2[g2] = "");
                for (g2 in k)
                  k.hasOwnProperty(g2) && h[g2] !== k[g2] && (c2 || (c2 = {}), c2[g2] = k[g2]);
              } else
                c2 || (f || (f = []), f.push(l, c2)), c2 = k;
            else
              l === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, k != null && h !== k && (f = f || []).push(l, k)) : l === "children" ? typeof k !== "string" && typeof k !== "number" || (f = f || []).push(l, "" + k) : l !== "suppressContentEditableWarning" && l !== "suppressHydrationWarning" && (ea.hasOwnProperty(l) ? (k != null && l === "onScroll" && D("scroll", a3), f || h === k || (f = [])) : (f = f || []).push(l, k));
        }
        c2 && (f = f || []).push("style", c2);
        var l = f;
        if (b3.updateQueue = l)
          b3.flags |= 4;
      }
    };
    Wi = function(a3, b3, c2, d) {
      c2 !== d && (b3.flags |= 4);
    };
    function Xi(a3, b3) {
      if (!I)
        switch (a3.tailMode) {
          case "hidden":
            b3 = a3.tail;
            for (var c2 = null; b3 !== null; )
              b3.alternate !== null && (c2 = b3), b3 = b3.sibling;
            c2 === null ? a3.tail = null : c2.sibling = null;
            break;
          case "collapsed":
            c2 = a3.tail;
            for (var d = null; c2 !== null; )
              c2.alternate !== null && (d = c2), c2 = c2.sibling;
            d === null ? b3 || a3.tail === null ? a3.tail = null : a3.tail.sibling = null : d.sibling = null;
        }
    }
    function Q(a3) {
      var b3 = a3.alternate !== null && a3.alternate.child === a3.child, c2 = 0, d = 0;
      if (b3)
        for (var e = a3.child; e !== null; )
          c2 |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a3, e = e.sibling;
      else
        for (e = a3.child; e !== null; )
          c2 |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a3, e = e.sibling;
      a3.subtreeFlags |= d;
      a3.childLanes = c2;
      return b3;
    }
    function Yi(a3, b3, c2) {
      var d = b3.pendingProps;
      ch2(b3);
      switch (b3.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return Q(b3), null;
        case 1:
          return Yf(b3.type) && Zf(), Q(b3), null;
        case 3:
          d = b3.stateNode;
          Gh();
          E(Vf);
          E(H);
          Lh();
          d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
          if (a3 === null || a3.child === null)
            mh(b3) ? b3.flags |= 4 : a3 === null || a3.memoizedState.isDehydrated && (b3.flags & 256) === 0 || (b3.flags |= 1024, fh !== null && (Zi(fh), fh = null));
          Ui(a3, b3);
          Q(b3);
          return null;
        case 5:
          Ih(b3);
          var e = Eh(Dh.current);
          c2 = b3.type;
          if (a3 !== null && b3.stateNode != null)
            Vi(a3, b3, c2, d, e), a3.ref !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
          else {
            if (!d) {
              if (b3.stateNode === null)
                throw Error(p2(166));
              Q(b3);
              return null;
            }
            a3 = Eh(Bh.current);
            if (mh(b3)) {
              d = b3.stateNode;
              c2 = b3.type;
              var f = b3.memoizedProps;
              d[Nf] = b3;
              d[Of] = f;
              a3 = (b3.mode & 1) !== 0;
              switch (c2) {
                case "dialog":
                  D("cancel", d);
                  D("close", d);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", d);
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < kf.length; e++)
                    D(kf[e], d);
                  break;
                case "source":
                  D("error", d);
                  break;
                case "img":
                case "image":
                case "link":
                  D("error", d);
                  D("load", d);
                  break;
                case "details":
                  D("toggle", d);
                  break;
                case "input":
                  Ya(d, f);
                  D("invalid", d);
                  break;
                case "select":
                  d._wrapperState = { wasMultiple: !!f.multiple };
                  D("invalid", d);
                  break;
                case "textarea":
                  gb(d, f), D("invalid", d);
              }
              tb(c2, f);
              e = null;
              for (var g2 in f)
                if (f.hasOwnProperty(g2)) {
                  var h = f[g2];
                  g2 === "children" ? typeof h === "string" ? d.textContent !== h && (f.suppressHydrationWarning !== true && zf(d.textContent, h, a3), e = ["children", h]) : typeof h === "number" && d.textContent !== "" + h && (f.suppressHydrationWarning !== true && zf(d.textContent, h, a3), e = ["children", "" + h]) : ea.hasOwnProperty(g2) && h != null && g2 === "onScroll" && D("scroll", d);
                }
              switch (c2) {
                case "input":
                  Ua(d);
                  cb2(d, f, true);
                  break;
                case "textarea":
                  Ua(d);
                  ib(d);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  typeof f.onClick === "function" && (d.onclick = Af);
              }
              d = e;
              b3.updateQueue = d;
              d !== null && (b3.flags |= 4);
            } else {
              g2 = e.nodeType === 9 ? e : e.ownerDocument;
              a3 === "http://www.w3.org/1999/xhtml" && (a3 = jb(c2));
              a3 === "http://www.w3.org/1999/xhtml" ? c2 === "script" ? (a3 = g2.createElement("div"), a3.innerHTML = "<script><\/script>", a3 = a3.removeChild(a3.firstChild)) : typeof d.is === "string" ? a3 = g2.createElement(c2, { is: d.is }) : (a3 = g2.createElement(c2), c2 === "select" && (g2 = a3, d.multiple ? g2.multiple = true : d.size && (g2.size = d.size))) : a3 = g2.createElementNS(a3, c2);
              a3[Nf] = b3;
              a3[Of] = d;
              Ti(a3, b3, false, false);
              b3.stateNode = a3;
              a: {
                g2 = ub(c2, d);
                switch (c2) {
                  case "dialog":
                    D("cancel", a3);
                    D("close", a3);
                    e = d;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", a3);
                    e = d;
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < kf.length; e++)
                      D(kf[e], a3);
                    e = d;
                    break;
                  case "source":
                    D("error", a3);
                    e = d;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D("error", a3);
                    D("load", a3);
                    e = d;
                    break;
                  case "details":
                    D("toggle", a3);
                    e = d;
                    break;
                  case "input":
                    Ya(a3, d);
                    e = Xa(a3, d);
                    D("invalid", a3);
                    break;
                  case "option":
                    e = d;
                    break;
                  case "select":
                    a3._wrapperState = { wasMultiple: !!d.multiple };
                    e = A({}, d, { value: void 0 });
                    D("invalid", a3);
                    break;
                  case "textarea":
                    gb(a3, d);
                    e = fb(a3, d);
                    D("invalid", a3);
                    break;
                  default:
                    e = d;
                }
                tb(c2, e);
                h = e;
                for (f in h)
                  if (h.hasOwnProperty(f)) {
                    var k = h[f];
                    f === "style" ? rb2(a3, k) : f === "dangerouslySetInnerHTML" ? (k = k ? k.__html : void 0, k != null && mb(a3, k)) : f === "children" ? typeof k === "string" ? (c2 !== "textarea" || k !== "") && nb(a3, k) : typeof k === "number" && nb(a3, "" + k) : f !== "suppressContentEditableWarning" && f !== "suppressHydrationWarning" && f !== "autoFocus" && (ea.hasOwnProperty(f) ? k != null && f === "onScroll" && D("scroll", a3) : k != null && sa(a3, f, k, g2));
                  }
                switch (c2) {
                  case "input":
                    Ua(a3);
                    cb2(a3, d, false);
                    break;
                  case "textarea":
                    Ua(a3);
                    ib(a3);
                    break;
                  case "option":
                    d.value != null && a3.setAttribute("value", "" + Ra(d.value));
                    break;
                  case "select":
                    a3.multiple = !!d.multiple;
                    f = d.value;
                    f != null ? eb(a3, !!d.multiple, f, false) : d.defaultValue != null && eb(a3, !!d.multiple, d.defaultValue, true);
                    break;
                  default:
                    typeof e.onClick === "function" && (a3.onclick = Af);
                }
                switch (c2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d = !!d.autoFocus;
                    break a;
                  case "img":
                    d = true;
                    break a;
                  default:
                    d = false;
                }
              }
              d && (b3.flags |= 4);
            }
            b3.ref !== null && (b3.flags |= 512, b3.flags |= 2097152);
          }
          Q(b3);
          return null;
        case 6:
          if (a3 && b3.stateNode != null)
            Wi(a3, b3, a3.memoizedProps, d);
          else {
            if (typeof d !== "string" && b3.stateNode === null)
              throw Error(p2(166));
            c2 = Eh(Dh.current);
            Eh(Bh.current);
            if (mh(b3)) {
              d = b3.stateNode;
              c2 = b3.memoizedProps;
              d[Nf] = b3;
              if (f = d.nodeValue !== c2) {
                if (a3 = dh, a3 !== null)
                  switch (a3.tag) {
                    case 3:
                      zf(d.nodeValue, c2, (a3.mode & 1) !== 0);
                      break;
                    case 5:
                      a3.memoizedProps.suppressHydrationWarning !== true && zf(d.nodeValue, c2, (a3.mode & 1) !== 0);
                  }
              }
              f && (b3.flags |= 4);
            } else
              d = (c2.nodeType === 9 ? c2 : c2.ownerDocument).createTextNode(d), d[Nf] = b3, b3.stateNode = d;
          }
          Q(b3);
          return null;
        case 13:
          E(K);
          d = b3.memoizedState;
          if (I && eh !== null && (b3.mode & 1) !== 0 && (b3.flags & 128) === 0) {
            for (d = eh; d; )
              d = Kf(d.nextSibling);
            nh();
            b3.flags |= 98560;
            return b3;
          }
          if (d !== null && d.dehydrated !== null) {
            d = mh(b3);
            if (a3 === null) {
              if (!d)
                throw Error(p2(318));
              d = b3.memoizedState;
              d = d !== null ? d.dehydrated : null;
              if (!d)
                throw Error(p2(317));
              d[Nf] = b3;
            } else
              nh(), (b3.flags & 128) === 0 && (b3.memoizedState = null), b3.flags |= 4;
            Q(b3);
            return null;
          }
          fh !== null && (Zi(fh), fh = null);
          if ((b3.flags & 128) !== 0)
            return b3.lanes = c2, b3;
          d = d !== null;
          c2 = false;
          a3 === null ? mh(b3) : c2 = a3.memoizedState !== null;
          d !== c2 && d && (b3.child.flags |= 8192, (b3.mode & 1) !== 0 && (a3 === null || (K.current & 1) !== 0 ? R === 0 && (R = 3) : $i()));
          b3.updateQueue !== null && (b3.flags |= 4);
          Q(b3);
          return null;
        case 4:
          return Gh(), Ui(a3, b3), a3 === null && rf(b3.stateNode.containerInfo), Q(b3), null;
        case 10:
          return qg(b3.type._context), Q(b3), null;
        case 17:
          return Yf(b3.type) && Zf(), Q(b3), null;
        case 19:
          E(K);
          f = b3.memoizedState;
          if (f === null)
            return Q(b3), null;
          d = (b3.flags & 128) !== 0;
          g2 = f.rendering;
          if (g2 === null)
            if (d)
              Xi(f, false);
            else {
              if (R !== 0 || a3 !== null && (a3.flags & 128) !== 0)
                for (a3 = b3.child; a3 !== null; ) {
                  g2 = Jh(a3);
                  if (g2 !== null) {
                    b3.flags |= 128;
                    Xi(f, false);
                    d = g2.updateQueue;
                    d !== null && (b3.updateQueue = d, b3.flags |= 4);
                    b3.subtreeFlags = 0;
                    d = c2;
                    for (c2 = b3.child; c2 !== null; )
                      f = c2, a3 = d, f.flags &= 14680066, g2 = f.alternate, g2 === null ? (f.childLanes = 0, f.lanes = a3, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g2.childLanes, f.lanes = g2.lanes, f.child = g2.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g2.memoizedProps, f.memoizedState = g2.memoizedState, f.updateQueue = g2.updateQueue, f.type = g2.type, a3 = g2.dependencies, f.dependencies = a3 === null ? null : { lanes: a3.lanes, firstContext: a3.firstContext }), c2 = c2.sibling;
                    G(K, K.current & 1 | 2);
                    return b3.child;
                  }
                  a3 = a3.sibling;
                }
              f.tail !== null && B() > aj && (b3.flags |= 128, d = true, Xi(f, false), b3.lanes = 4194304);
            }
          else {
            if (!d)
              if (a3 = Jh(g2), a3 !== null) {
                if (b3.flags |= 128, d = true, c2 = a3.updateQueue, c2 !== null && (b3.updateQueue = c2, b3.flags |= 4), Xi(f, true), f.tail === null && f.tailMode === "hidden" && !g2.alternate && !I)
                  return Q(b3), null;
              } else
                2 * B() - f.renderingStartTime > aj && c2 !== 1073741824 && (b3.flags |= 128, d = true, Xi(f, false), b3.lanes = 4194304);
            f.isBackwards ? (g2.sibling = b3.child, b3.child = g2) : (c2 = f.last, c2 !== null ? c2.sibling = g2 : b3.child = g2, f.last = g2);
          }
          if (f.tail !== null)
            return b3 = f.tail, f.rendering = b3, f.tail = b3.sibling, f.renderingStartTime = B(), b3.sibling = null, c2 = K.current, G(K, d ? c2 & 1 | 2 : c2 & 1), b3;
          Q(b3);
          return null;
        case 22:
        case 23:
          return bj(), d = b3.memoizedState !== null, a3 !== null && a3.memoizedState !== null !== d && (b3.flags |= 8192), d && (b3.mode & 1) !== 0 ? (cj & 1073741824) !== 0 && (Q(b3), b3.subtreeFlags & 6 && (b3.flags |= 8192)) : Q(b3), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p2(156, b3.tag));
    }
    var dj = ta.ReactCurrentOwner;
    var tg = false;
    function ej(a3, b3, c2, d) {
      b3.child = a3 === null ? zh(b3, null, c2, d) : yh(b3, a3.child, c2, d);
    }
    function fj(a3, b3, c2, d, e) {
      c2 = c2.render;
      var f = b3.ref;
      sg(b3, e);
      d = Uh(a3, b3, c2, d, f, e);
      c2 = Zh();
      if (a3 !== null && !tg)
        return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e, gj(a3, b3, e);
      I && c2 && bh(b3);
      b3.flags |= 1;
      ej(a3, b3, d, e);
      return b3.child;
    }
    function hj(a3, b3, c2, d, e) {
      if (a3 === null) {
        var f = c2.type;
        if (typeof f === "function" && !ij(f) && f.defaultProps === void 0 && c2.compare === null && c2.defaultProps === void 0)
          return b3.tag = 15, b3.type = f, jj(a3, b3, f, d, e);
        a3 = vh3(c2.type, null, d, b3, b3.mode, e);
        a3.ref = b3.ref;
        a3.return = b3;
        return b3.child = a3;
      }
      f = a3.child;
      if ((a3.lanes & e) === 0) {
        var g2 = f.memoizedProps;
        c2 = c2.compare;
        c2 = c2 !== null ? c2 : He;
        if (c2(g2, d) && a3.ref === b3.ref)
          return gj(a3, b3, e);
      }
      b3.flags |= 1;
      a3 = th2(f, d);
      a3.ref = b3.ref;
      a3.return = b3;
      return b3.child = a3;
    }
    function jj(a3, b3, c2, d, e) {
      if (a3 !== null) {
        var f = a3.memoizedProps;
        if (He(f, d) && a3.ref === b3.ref)
          if (tg = false, b3.pendingProps = d = f, (a3.lanes & e) !== 0)
            (a3.flags & 131072) !== 0 && (tg = true);
          else
            return b3.lanes = a3.lanes, gj(a3, b3, e);
      }
      return kj(a3, b3, c2, d, e);
    }
    function lj(a3, b3, c2) {
      var d = b3.pendingProps, e = d.children, f = a3 !== null ? a3.memoizedState : null;
      if (d.mode === "hidden")
        if ((b3.mode & 1) === 0)
          b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(mj, cj), cj |= c2;
        else if ((c2 & 1073741824) !== 0)
          b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, d = f !== null ? f.baseLanes : c2, G(mj, cj), cj |= d;
        else
          return a3 = f !== null ? f.baseLanes | c2 : c2, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a3, cachePool: null, transitions: null }, b3.updateQueue = null, G(mj, cj), cj |= a3, null;
      else
        f !== null ? (d = f.baseLanes | c2, b3.memoizedState = null) : d = c2, G(mj, cj), cj |= d;
      ej(a3, b3, e, c2);
      return b3.child;
    }
    function nj(a3, b3) {
      var c2 = b3.ref;
      if (a3 === null && c2 !== null || a3 !== null && a3.ref !== c2)
        b3.flags |= 512, b3.flags |= 2097152;
    }
    function kj(a3, b3, c2, d, e) {
      var f = Yf(c2) ? Wf : H.current;
      f = Xf(b3, f);
      sg(b3, e);
      c2 = Uh(a3, b3, c2, d, f, e);
      d = Zh();
      if (a3 !== null && !tg)
        return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e, gj(a3, b3, e);
      I && d && bh(b3);
      b3.flags |= 1;
      ej(a3, b3, c2, e);
      return b3.child;
    }
    function oj(a3, b3, c2, d, e) {
      if (Yf(c2)) {
        var f = true;
        bg(b3);
      } else
        f = false;
      sg(b3, e);
      if (b3.stateNode === null)
        a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2), Og(b3, c2, d), Qg(b3, c2, d, e), d = true;
      else if (a3 === null) {
        var g2 = b3.stateNode, h = b3.memoizedProps;
        g2.props = h;
        var k = g2.context, l = c2.contextType;
        typeof l === "object" && l !== null ? l = ug(l) : (l = Yf(c2) ? Wf : H.current, l = Xf(b3, l));
        var n = c2.getDerivedStateFromProps, u2 = typeof n === "function" || typeof g2.getSnapshotBeforeUpdate === "function";
        u2 || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h !== d || k !== l) && Pg(b3, g2, d, l);
        wg = false;
        var q2 = b3.memoizedState;
        g2.state = q2;
        Eg(b3, d, g2, e);
        k = b3.memoizedState;
        h !== d || q2 !== k || Vf.current || wg ? (typeof n === "function" && (Ig(b3, c2, n, d), k = b3.memoizedState), (h = wg || Ng(b3, c2, h, d, q2, k, l)) ? (u2 || typeof g2.UNSAFE_componentWillMount !== "function" && typeof g2.componentWillMount !== "function" || (typeof g2.componentWillMount === "function" && g2.componentWillMount(), typeof g2.UNSAFE_componentWillMount === "function" && g2.UNSAFE_componentWillMount()), typeof g2.componentDidMount === "function" && (b3.flags |= 4194308)) : (typeof g2.componentDidMount === "function" && (b3.flags |= 4194308), b3.memoizedProps = d, b3.memoizedState = k), g2.props = d, g2.state = k, g2.context = l, d = h) : (typeof g2.componentDidMount === "function" && (b3.flags |= 4194308), d = false);
      } else {
        g2 = b3.stateNode;
        yg(a3, b3);
        h = b3.memoizedProps;
        l = b3.type === b3.elementType ? h : kg(b3.type, h);
        g2.props = l;
        u2 = b3.pendingProps;
        q2 = g2.context;
        k = c2.contextType;
        typeof k === "object" && k !== null ? k = ug(k) : (k = Yf(c2) ? Wf : H.current, k = Xf(b3, k));
        var y = c2.getDerivedStateFromProps;
        (n = typeof y === "function" || typeof g2.getSnapshotBeforeUpdate === "function") || typeof g2.UNSAFE_componentWillReceiveProps !== "function" && typeof g2.componentWillReceiveProps !== "function" || (h !== u2 || q2 !== k) && Pg(b3, g2, d, k);
        wg = false;
        q2 = b3.memoizedState;
        g2.state = q2;
        Eg(b3, d, g2, e);
        var m = b3.memoizedState;
        h !== u2 || q2 !== m || Vf.current || wg ? (typeof y === "function" && (Ig(b3, c2, y, d), m = b3.memoizedState), (l = wg || Ng(b3, c2, l, d, q2, m, k) || false) ? (n || typeof g2.UNSAFE_componentWillUpdate !== "function" && typeof g2.componentWillUpdate !== "function" || (typeof g2.componentWillUpdate === "function" && g2.componentWillUpdate(d, m, k), typeof g2.UNSAFE_componentWillUpdate === "function" && g2.UNSAFE_componentWillUpdate(d, m, k)), typeof g2.componentDidUpdate === "function" && (b3.flags |= 4), typeof g2.getSnapshotBeforeUpdate === "function" && (b3.flags |= 1024)) : (typeof g2.componentDidUpdate !== "function" || h === a3.memoizedProps && q2 === a3.memoizedState || (b3.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h === a3.memoizedProps && q2 === a3.memoizedState || (b3.flags |= 1024), b3.memoizedProps = d, b3.memoizedState = m), g2.props = d, g2.state = m, g2.context = k, d = l) : (typeof g2.componentDidUpdate !== "function" || h === a3.memoizedProps && q2 === a3.memoizedState || (b3.flags |= 4), typeof g2.getSnapshotBeforeUpdate !== "function" || h === a3.memoizedProps && q2 === a3.memoizedState || (b3.flags |= 1024), d = false);
      }
      return pj(a3, b3, c2, d, f, e);
    }
    function pj(a3, b3, c2, d, e, f) {
      nj(a3, b3);
      var g2 = (b3.flags & 128) !== 0;
      if (!d && !g2)
        return e && cg(b3, c2, false), gj(a3, b3, f);
      d = b3.stateNode;
      dj.current = b3;
      var h = g2 && typeof c2.getDerivedStateFromError !== "function" ? null : d.render();
      b3.flags |= 1;
      a3 !== null && g2 ? (b3.child = yh(b3, a3.child, null, f), b3.child = yh(b3, null, h, f)) : ej(a3, b3, h, f);
      b3.memoizedState = d.state;
      e && cg(b3, c2, true);
      return b3.child;
    }
    function qj(a3) {
      var b3 = a3.stateNode;
      b3.pendingContext ? $f(a3, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && $f(a3, b3.context, false);
      Fh(a3, b3.containerInfo);
    }
    function rj(a3, b3, c2, d, e) {
      nh();
      oh(e);
      b3.flags |= 256;
      ej(a3, b3, c2, d);
      return b3.child;
    }
    var sj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function tj(a3) {
      return { baseLanes: a3, cachePool: null, transitions: null };
    }
    function uj(a3, b3) {
      return { baseLanes: a3.baseLanes | b3, cachePool: null, transitions: a3.transitions };
    }
    function vj(a3, b3, c2) {
      var d = b3.pendingProps, e = K.current, f = false, g2 = (b3.flags & 128) !== 0, h;
      (h = g2) || (h = a3 !== null && a3.memoizedState === null ? false : (e & 2) !== 0);
      if (h)
        f = true, b3.flags &= -129;
      else if (a3 === null || a3.memoizedState !== null)
        e |= 1;
      G(K, e & 1);
      if (a3 === null) {
        kh(b3);
        a3 = b3.memoizedState;
        if (a3 !== null && (a3 = a3.dehydrated, a3 !== null))
          return (b3.mode & 1) === 0 ? b3.lanes = 1 : a3.data === "$!" ? b3.lanes = 8 : b3.lanes = 1073741824, null;
        e = d.children;
        a3 = d.fallback;
        return f ? (d = b3.mode, f = b3.child, e = { mode: "hidden", children: e }, (d & 1) === 0 && f !== null ? (f.childLanes = 0, f.pendingProps = e) : f = wj(e, d, 0, null), a3 = xh(a3, d, c2, null), f.return = b3, a3.return = b3, f.sibling = a3, b3.child = f, b3.child.memoizedState = tj(c2), b3.memoizedState = sj, a3) : xj(b3, e);
      }
      e = a3.memoizedState;
      if (e !== null) {
        h = e.dehydrated;
        if (h !== null) {
          if (g2) {
            if (b3.flags & 256)
              return b3.flags &= -257, yj(a3, b3, c2, Error(p2(422)));
            if (b3.memoizedState !== null)
              return b3.child = a3.child, b3.flags |= 128, null;
            f = d.fallback;
            e = b3.mode;
            d = wj({ mode: "visible", children: d.children }, e, 0, null);
            f = xh(f, e, c2, null);
            f.flags |= 2;
            d.return = b3;
            f.return = b3;
            d.sibling = f;
            b3.child = d;
            (b3.mode & 1) !== 0 && yh(b3, a3.child, null, c2);
            b3.child.memoizedState = tj(c2);
            b3.memoizedState = sj;
            return f;
          }
          if ((b3.mode & 1) === 0)
            b3 = yj(a3, b3, c2, null);
          else if (h.data === "$!")
            b3 = yj(a3, b3, c2, Error(p2(419)));
          else if (d = (c2 & a3.childLanes) !== 0, tg || d) {
            d = P;
            if (d !== null) {
              switch (c2 & -c2) {
                case 4:
                  f = 2;
                  break;
                case 16:
                  f = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  f = 32;
                  break;
                case 536870912:
                  f = 268435456;
                  break;
                default:
                  f = 0;
              }
              d = (f & (d.suspendedLanes | c2)) !== 0 ? 0 : f;
              d !== 0 && d !== e.retryLane && (e.retryLane = d, Lg(a3, d, -1));
            }
            $i();
            b3 = yj(a3, b3, c2, Error(p2(421)));
          } else
            h.data === "$?" ? (b3.flags |= 128, b3.child = a3.child, b3 = zj.bind(null, a3), h._reactRetry = b3, b3 = null) : (c2 = e.treeContext, eh = Kf(h.nextSibling), dh = b3, I = true, fh = null, c2 !== null && (Vg[Wg++] = Yg, Vg[Wg++] = Zg, Vg[Wg++] = Xg, Yg = c2.id, Zg = c2.overflow, Xg = b3), b3 = xj(b3, b3.pendingProps.children), b3.flags |= 4096);
          return b3;
        }
        if (f)
          return d = Aj(a3, b3, d.children, d.fallback, c2), f = b3.child, e = a3.child.memoizedState, f.memoizedState = e === null ? tj(c2) : uj(e, c2), f.childLanes = a3.childLanes & ~c2, b3.memoizedState = sj, d;
        c2 = Bj(a3, b3, d.children, c2);
        b3.memoizedState = null;
        return c2;
      }
      if (f)
        return d = Aj(a3, b3, d.children, d.fallback, c2), f = b3.child, e = a3.child.memoizedState, f.memoizedState = e === null ? tj(c2) : uj(e, c2), f.childLanes = a3.childLanes & ~c2, b3.memoizedState = sj, d;
      c2 = Bj(a3, b3, d.children, c2);
      b3.memoizedState = null;
      return c2;
    }
    function xj(a3, b3) {
      b3 = wj({ mode: "visible", children: b3 }, a3.mode, 0, null);
      b3.return = a3;
      return a3.child = b3;
    }
    function Bj(a3, b3, c2, d) {
      var e = a3.child;
      a3 = e.sibling;
      c2 = th2(e, { mode: "visible", children: c2 });
      (b3.mode & 1) === 0 && (c2.lanes = d);
      c2.return = b3;
      c2.sibling = null;
      a3 !== null && (d = b3.deletions, d === null ? (b3.deletions = [a3], b3.flags |= 16) : d.push(a3));
      return b3.child = c2;
    }
    function Aj(a3, b3, c2, d, e) {
      var f = b3.mode;
      a3 = a3.child;
      var g2 = a3.sibling, h = { mode: "hidden", children: c2 };
      (f & 1) === 0 && b3.child !== a3 ? (c2 = b3.child, c2.childLanes = 0, c2.pendingProps = h, b3.deletions = null) : (c2 = th2(a3, h), c2.subtreeFlags = a3.subtreeFlags & 14680064);
      g2 !== null ? d = th2(g2, d) : (d = xh(d, f, e, null), d.flags |= 2);
      d.return = b3;
      c2.return = b3;
      c2.sibling = d;
      b3.child = c2;
      return d;
    }
    function yj(a3, b3, c2, d) {
      d !== null && oh(d);
      yh(b3, a3.child, null, c2);
      a3 = xj(b3, b3.pendingProps.children);
      a3.flags |= 2;
      b3.memoizedState = null;
      return a3;
    }
    function Cj(a3, b3, c2) {
      a3.lanes |= b3;
      var d = a3.alternate;
      d !== null && (d.lanes |= b3);
      rg(a3.return, b3, c2);
    }
    function Dj(a3, b3, c2, d, e) {
      var f = a3.memoizedState;
      f === null ? a3.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d, tail: c2, tailMode: e } : (f.isBackwards = b3, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c2, f.tailMode = e);
    }
    function Ej(a3, b3, c2) {
      var d = b3.pendingProps, e = d.revealOrder, f = d.tail;
      ej(a3, b3, d.children, c2);
      d = K.current;
      if ((d & 2) !== 0)
        d = d & 1 | 2, b3.flags |= 128;
      else {
        if (a3 !== null && (a3.flags & 128) !== 0)
          a:
            for (a3 = b3.child; a3 !== null; ) {
              if (a3.tag === 13)
                a3.memoizedState !== null && Cj(a3, c2, b3);
              else if (a3.tag === 19)
                Cj(a3, c2, b3);
              else if (a3.child !== null) {
                a3.child.return = a3;
                a3 = a3.child;
                continue;
              }
              if (a3 === b3)
                break a;
              for (; a3.sibling === null; ) {
                if (a3.return === null || a3.return === b3)
                  break a;
                a3 = a3.return;
              }
              a3.sibling.return = a3.return;
              a3 = a3.sibling;
            }
        d &= 1;
      }
      G(K, d);
      if ((b3.mode & 1) === 0)
        b3.memoizedState = null;
      else
        switch (e) {
          case "forwards":
            c2 = b3.child;
            for (e = null; c2 !== null; )
              a3 = c2.alternate, a3 !== null && Jh(a3) === null && (e = c2), c2 = c2.sibling;
            c2 = e;
            c2 === null ? (e = b3.child, b3.child = null) : (e = c2.sibling, c2.sibling = null);
            Dj(b3, false, e, c2, f);
            break;
          case "backwards":
            c2 = null;
            e = b3.child;
            for (b3.child = null; e !== null; ) {
              a3 = e.alternate;
              if (a3 !== null && Jh(a3) === null) {
                b3.child = e;
                break;
              }
              a3 = e.sibling;
              e.sibling = c2;
              c2 = e;
              e = a3;
            }
            Dj(b3, true, c2, null, f);
            break;
          case "together":
            Dj(b3, false, null, null, void 0);
            break;
          default:
            b3.memoizedState = null;
        }
      return b3.child;
    }
    function gj(a3, b3, c2) {
      a3 !== null && (b3.dependencies = a3.dependencies);
      Fg |= b3.lanes;
      if ((c2 & b3.childLanes) === 0)
        return null;
      if (a3 !== null && b3.child !== a3.child)
        throw Error(p2(153));
      if (b3.child !== null) {
        a3 = b3.child;
        c2 = th2(a3, a3.pendingProps);
        b3.child = c2;
        for (c2.return = b3; a3.sibling !== null; )
          a3 = a3.sibling, c2 = c2.sibling = th2(a3, a3.pendingProps), c2.return = b3;
        c2.sibling = null;
      }
      return b3.child;
    }
    function Fj(a3, b3, c2) {
      switch (b3.tag) {
        case 3:
          qj(b3);
          nh();
          break;
        case 5:
          Hh(b3);
          break;
        case 1:
          Yf(b3.type) && bg(b3);
          break;
        case 4:
          Fh(b3, b3.stateNode.containerInfo);
          break;
        case 10:
          var d = b3.type._context, e = b3.memoizedProps.value;
          G(lg, d._currentValue);
          d._currentValue = e;
          break;
        case 13:
          d = b3.memoizedState;
          if (d !== null) {
            if (d.dehydrated !== null)
              return G(K, K.current & 1), b3.flags |= 128, null;
            if ((c2 & b3.child.childLanes) !== 0)
              return vj(a3, b3, c2);
            G(K, K.current & 1);
            a3 = gj(a3, b3, c2);
            return a3 !== null ? a3.sibling : null;
          }
          G(K, K.current & 1);
          break;
        case 19:
          d = (c2 & b3.childLanes) !== 0;
          if ((a3.flags & 128) !== 0) {
            if (d)
              return Ej(a3, b3, c2);
            b3.flags |= 128;
          }
          e = b3.memoizedState;
          e !== null && (e.rendering = null, e.tail = null, e.lastEffect = null);
          G(K, K.current);
          if (d)
            break;
          else
            return null;
        case 22:
        case 23:
          return b3.lanes = 0, lj(a3, b3, c2);
      }
      return gj(a3, b3, c2);
    }
    function Gj(a3, b3) {
      ch2(b3);
      switch (b3.tag) {
        case 1:
          return Yf(b3.type) && Zf(), a3 = b3.flags, a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 3:
          return Gh(), E(Vf), E(H), Lh(), a3 = b3.flags, (a3 & 65536) !== 0 && (a3 & 128) === 0 ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 5:
          return Ih(b3), null;
        case 13:
          E(K);
          a3 = b3.memoizedState;
          if (a3 !== null && a3.dehydrated !== null) {
            if (b3.alternate === null)
              throw Error(p2(340));
            nh();
          }
          a3 = b3.flags;
          return a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
        case 19:
          return E(K), null;
        case 4:
          return Gh(), null;
        case 10:
          return qg(b3.type._context), null;
        case 22:
        case 23:
          return bj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Hj = false;
    var S = false;
    var Ij = typeof WeakSet === "function" ? WeakSet : Set;
    var T = null;
    function Jj(a3, b3) {
      var c2 = a3.ref;
      if (c2 !== null)
        if (typeof c2 === "function")
          try {
            c2(null);
          } catch (d) {
            U(a3, b3, d);
          }
        else
          c2.current = null;
    }
    function Kj(a3, b3, c2) {
      try {
        c2();
      } catch (d) {
        U(a3, b3, d);
      }
    }
    var Lj = false;
    function Mj(a3, b3) {
      Bf = cd;
      a3 = Le();
      if (Me(a3)) {
        if ("selectionStart" in a3)
          var c2 = { start: a3.selectionStart, end: a3.selectionEnd };
        else
          a: {
            c2 = (c2 = a3.ownerDocument) && c2.defaultView || window;
            var d = c2.getSelection && c2.getSelection();
            if (d && d.rangeCount !== 0) {
              c2 = d.anchorNode;
              var e = d.anchorOffset, f = d.focusNode;
              d = d.focusOffset;
              try {
                c2.nodeType, f.nodeType;
              } catch (Z) {
                c2 = null;
                break a;
              }
              var g2 = 0, h = -1, k = -1, l = 0, n = 0, u2 = a3, q2 = null;
              b:
                for (; ; ) {
                  for (var y; ; ) {
                    u2 !== c2 || e !== 0 && u2.nodeType !== 3 || (h = g2 + e);
                    u2 !== f || d !== 0 && u2.nodeType !== 3 || (k = g2 + d);
                    u2.nodeType === 3 && (g2 += u2.nodeValue.length);
                    if ((y = u2.firstChild) === null)
                      break;
                    q2 = u2;
                    u2 = y;
                  }
                  for (; ; ) {
                    if (u2 === a3)
                      break b;
                    q2 === c2 && ++l === e && (h = g2);
                    q2 === f && ++n === d && (k = g2);
                    if ((y = u2.nextSibling) !== null)
                      break;
                    u2 = q2;
                    q2 = u2.parentNode;
                  }
                  u2 = y;
                }
              c2 = h === -1 || k === -1 ? null : { start: h, end: k };
            } else
              c2 = null;
          }
        c2 = c2 || { start: 0, end: 0 };
      } else
        c2 = null;
      Cf = { focusedElem: a3, selectionRange: c2 };
      cd = false;
      for (T = b3; T !== null; )
        if (b3 = T, a3 = b3.child, (b3.subtreeFlags & 1028) !== 0 && a3 !== null)
          a3.return = b3, T = a3;
        else
          for (; T !== null; ) {
            b3 = T;
            try {
              var m = b3.alternate;
              if ((b3.flags & 1024) !== 0)
                switch (b3.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (m !== null) {
                      var w = m.memoizedProps, J = m.memoizedState, v = b3.stateNode, x = v.getSnapshotBeforeUpdate(b3.elementType === b3.type ? w : kg(b3.type, w), J);
                      v.__reactInternalSnapshotBeforeUpdate = x;
                    }
                    break;
                  case 3:
                    var r = b3.stateNode.containerInfo;
                    if (r.nodeType === 1)
                      r.textContent = "";
                    else if (r.nodeType === 9) {
                      var F = r.body;
                      F != null && (F.textContent = "");
                    }
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(p2(163));
                }
            } catch (Z) {
              U(b3, b3.return, Z);
            }
            a3 = b3.sibling;
            if (a3 !== null) {
              a3.return = b3.return;
              T = a3;
              break;
            }
            T = b3.return;
          }
      m = Lj;
      Lj = false;
      return m;
    }
    function Nj(a3, b3, c2) {
      var d = b3.updateQueue;
      d = d !== null ? d.lastEffect : null;
      if (d !== null) {
        var e = d = d.next;
        do {
          if ((e.tag & a3) === a3) {
            var f = e.destroy;
            e.destroy = void 0;
            f !== void 0 && Kj(b3, c2, f);
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Oj(a3, b3) {
      b3 = b3.updateQueue;
      b3 = b3 !== null ? b3.lastEffect : null;
      if (b3 !== null) {
        var c2 = b3 = b3.next;
        do {
          if ((c2.tag & a3) === a3) {
            var d = c2.create;
            c2.destroy = d();
          }
          c2 = c2.next;
        } while (c2 !== b3);
      }
    }
    function Pj(a3) {
      var b3 = a3.ref;
      if (b3 !== null) {
        var c2 = a3.stateNode;
        switch (a3.tag) {
          case 5:
            a3 = c2;
            break;
          default:
            a3 = c2;
        }
        typeof b3 === "function" ? b3(a3) : b3.current = a3;
      }
    }
    function Qj(a3) {
      var b3 = a3.alternate;
      b3 !== null && (a3.alternate = null, Qj(b3));
      a3.child = null;
      a3.deletions = null;
      a3.sibling = null;
      a3.tag === 5 && (b3 = a3.stateNode, b3 !== null && (delete b3[Nf], delete b3[Of], delete b3[nf], delete b3[Pf], delete b3[Qf]));
      a3.stateNode = null;
      a3.return = null;
      a3.dependencies = null;
      a3.memoizedProps = null;
      a3.memoizedState = null;
      a3.pendingProps = null;
      a3.stateNode = null;
      a3.updateQueue = null;
    }
    function Rj(a3) {
      return a3.tag === 5 || a3.tag === 3 || a3.tag === 4;
    }
    function Sj(a3) {
      a:
        for (; ; ) {
          for (; a3.sibling === null; ) {
            if (a3.return === null || Rj(a3.return))
              return null;
            a3 = a3.return;
          }
          a3.sibling.return = a3.return;
          for (a3 = a3.sibling; a3.tag !== 5 && a3.tag !== 6 && a3.tag !== 18; ) {
            if (a3.flags & 2)
              continue a;
            if (a3.child === null || a3.tag === 4)
              continue a;
            else
              a3.child.return = a3, a3 = a3.child;
          }
          if (!(a3.flags & 2))
            return a3.stateNode;
        }
    }
    function Tj(a3, b3, c2) {
      var d = a3.tag;
      if (d === 5 || d === 6)
        a3 = a3.stateNode, b3 ? c2.nodeType === 8 ? c2.parentNode.insertBefore(a3, b3) : c2.insertBefore(a3, b3) : (c2.nodeType === 8 ? (b3 = c2.parentNode, b3.insertBefore(a3, c2)) : (b3 = c2, b3.appendChild(a3)), c2 = c2._reactRootContainer, c2 !== null && c2 !== void 0 || b3.onclick !== null || (b3.onclick = Af));
      else if (d !== 4 && (a3 = a3.child, a3 !== null))
        for (Tj(a3, b3, c2), a3 = a3.sibling; a3 !== null; )
          Tj(a3, b3, c2), a3 = a3.sibling;
    }
    function Uj(a3, b3, c2) {
      var d = a3.tag;
      if (d === 5 || d === 6)
        a3 = a3.stateNode, b3 ? c2.insertBefore(a3, b3) : c2.appendChild(a3);
      else if (d !== 4 && (a3 = a3.child, a3 !== null))
        for (Uj(a3, b3, c2), a3 = a3.sibling; a3 !== null; )
          Uj(a3, b3, c2), a3 = a3.sibling;
    }
    var V = null;
    var Vj = false;
    function Wj(a3, b3, c2) {
      for (c2 = c2.child; c2 !== null; )
        Xj(a3, b3, c2), c2 = c2.sibling;
    }
    function Xj(a3, b3, c2) {
      if (kc && typeof kc.onCommitFiberUnmount === "function")
        try {
          kc.onCommitFiberUnmount(jc, c2);
        } catch (h) {
        }
      switch (c2.tag) {
        case 5:
          S || Jj(c2, b3);
        case 6:
          var d = V, e = Vj;
          V = null;
          Wj(a3, b3, c2);
          V = d;
          Vj = e;
          V !== null && (Vj ? (a3 = V, c2 = c2.stateNode, a3.nodeType === 8 ? a3.parentNode.removeChild(c2) : a3.removeChild(c2)) : V.removeChild(c2.stateNode));
          break;
        case 18:
          V !== null && (Vj ? (a3 = V, c2 = c2.stateNode, a3.nodeType === 8 ? Jf(a3.parentNode, c2) : a3.nodeType === 1 && Jf(a3, c2), ad(a3)) : Jf(V, c2.stateNode));
          break;
        case 4:
          d = V;
          e = Vj;
          V = c2.stateNode.containerInfo;
          Vj = true;
          Wj(a3, b3, c2);
          V = d;
          Vj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!S && (d = c2.updateQueue, d !== null && (d = d.lastEffect, d !== null))) {
            e = d = d.next;
            do {
              var f = e, g2 = f.destroy;
              f = f.tag;
              g2 !== void 0 && ((f & 2) !== 0 ? Kj(c2, b3, g2) : (f & 4) !== 0 && Kj(c2, b3, g2));
              e = e.next;
            } while (e !== d);
          }
          Wj(a3, b3, c2);
          break;
        case 1:
          if (!S && (Jj(c2, b3), d = c2.stateNode, typeof d.componentWillUnmount === "function"))
            try {
              d.props = c2.memoizedProps, d.state = c2.memoizedState, d.componentWillUnmount();
            } catch (h) {
              U(c2, b3, h);
            }
          Wj(a3, b3, c2);
          break;
        case 21:
          Wj(a3, b3, c2);
          break;
        case 22:
          c2.mode & 1 ? (S = (d = S) || c2.memoizedState !== null, Wj(a3, b3, c2), S = d) : Wj(a3, b3, c2);
          break;
        default:
          Wj(a3, b3, c2);
      }
    }
    function Yj(a3) {
      var b3 = a3.updateQueue;
      if (b3 !== null) {
        a3.updateQueue = null;
        var c2 = a3.stateNode;
        c2 === null && (c2 = a3.stateNode = new Ij());
        b3.forEach(function(b4) {
          var d = Zj.bind(null, a3, b4);
          c2.has(b4) || (c2.add(b4), b4.then(d, d));
        });
      }
    }
    function ak(a3, b3) {
      var c2 = b3.deletions;
      if (c2 !== null)
        for (var d = 0; d < c2.length; d++) {
          var e = c2[d];
          try {
            var f = a3, g2 = b3, h = g2;
            a:
              for (; h !== null; ) {
                switch (h.tag) {
                  case 5:
                    V = h.stateNode;
                    Vj = false;
                    break a;
                  case 3:
                    V = h.stateNode.containerInfo;
                    Vj = true;
                    break a;
                  case 4:
                    V = h.stateNode.containerInfo;
                    Vj = true;
                    break a;
                }
                h = h.return;
              }
            if (V === null)
              throw Error(p2(160));
            Xj(f, g2, e);
            V = null;
            Vj = false;
            var k = e.alternate;
            k !== null && (k.return = null);
            e.return = null;
          } catch (l) {
            U(e, b3, l);
          }
        }
      if (b3.subtreeFlags & 12854)
        for (b3 = b3.child; b3 !== null; )
          bk(b3, a3), b3 = b3.sibling;
    }
    function bk(a3, b3) {
      var c2 = a3.alternate, d = a3.flags;
      switch (a3.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ak(b3, a3);
          ck(a3);
          if (d & 4) {
            try {
              Nj(3, a3, a3.return), Oj(3, a3);
            } catch (m) {
              U(a3, a3.return, m);
            }
            try {
              Nj(5, a3, a3.return);
            } catch (m) {
              U(a3, a3.return, m);
            }
          }
          break;
        case 1:
          ak(b3, a3);
          ck(a3);
          d & 512 && c2 !== null && Jj(c2, c2.return);
          break;
        case 5:
          ak(b3, a3);
          ck(a3);
          d & 512 && c2 !== null && Jj(c2, c2.return);
          if (a3.flags & 32) {
            var e = a3.stateNode;
            try {
              nb(e, "");
            } catch (m) {
              U(a3, a3.return, m);
            }
          }
          if (d & 4 && (e = a3.stateNode, e != null)) {
            var f = a3.memoizedProps, g2 = c2 !== null ? c2.memoizedProps : f, h = a3.type, k = a3.updateQueue;
            a3.updateQueue = null;
            if (k !== null)
              try {
                h === "input" && f.type === "radio" && f.name != null && Za(e, f);
                ub(h, g2);
                var l = ub(h, f);
                for (g2 = 0; g2 < k.length; g2 += 2) {
                  var n = k[g2], u2 = k[g2 + 1];
                  n === "style" ? rb2(e, u2) : n === "dangerouslySetInnerHTML" ? mb(e, u2) : n === "children" ? nb(e, u2) : sa(e, n, u2, l);
                }
                switch (h) {
                  case "input":
                    $a(e, f);
                    break;
                  case "textarea":
                    hb(e, f);
                    break;
                  case "select":
                    var q2 = e._wrapperState.wasMultiple;
                    e._wrapperState.wasMultiple = !!f.multiple;
                    var y = f.value;
                    y != null ? eb(e, !!f.multiple, y, false) : q2 !== !!f.multiple && (f.defaultValue != null ? eb(e, !!f.multiple, f.defaultValue, true) : eb(e, !!f.multiple, f.multiple ? [] : "", false));
                }
                e[Of] = f;
              } catch (m) {
                U(a3, a3.return, m);
              }
          }
          break;
        case 6:
          ak(b3, a3);
          ck(a3);
          if (d & 4) {
            if (a3.stateNode === null)
              throw Error(p2(162));
            l = a3.stateNode;
            n = a3.memoizedProps;
            try {
              l.nodeValue = n;
            } catch (m) {
              U(a3, a3.return, m);
            }
          }
          break;
        case 3:
          ak(b3, a3);
          ck(a3);
          if (d & 4 && c2 !== null && c2.memoizedState.isDehydrated)
            try {
              ad(b3.containerInfo);
            } catch (m) {
              U(a3, a3.return, m);
            }
          break;
        case 4:
          ak(b3, a3);
          ck(a3);
          break;
        case 13:
          ak(b3, a3);
          ck(a3);
          l = a3.child;
          l.flags & 8192 && l.memoizedState !== null && (l.alternate === null || l.alternate.memoizedState === null) && (dk = B());
          d & 4 && Yj(a3);
          break;
        case 22:
          l = c2 !== null && c2.memoizedState !== null;
          a3.mode & 1 ? (S = (n = S) || l, ak(b3, a3), S = n) : ak(b3, a3);
          ck(a3);
          if (d & 8192) {
            n = a3.memoizedState !== null;
            a:
              for (u2 = null, q2 = a3; ; ) {
                if (q2.tag === 5) {
                  if (u2 === null) {
                    u2 = q2;
                    try {
                      e = q2.stateNode, n ? (f = e.style, typeof f.setProperty === "function" ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q2.stateNode, k = q2.memoizedProps.style, g2 = k !== void 0 && k !== null && k.hasOwnProperty("display") ? k.display : null, h.style.display = qb("display", g2));
                    } catch (m) {
                      U(a3, a3.return, m);
                    }
                  }
                } else if (q2.tag === 6) {
                  if (u2 === null)
                    try {
                      q2.stateNode.nodeValue = n ? "" : q2.memoizedProps;
                    } catch (m) {
                      U(a3, a3.return, m);
                    }
                } else if ((q2.tag !== 22 && q2.tag !== 23 || q2.memoizedState === null || q2 === a3) && q2.child !== null) {
                  q2.child.return = q2;
                  q2 = q2.child;
                  continue;
                }
                if (q2 === a3)
                  break a;
                for (; q2.sibling === null; ) {
                  if (q2.return === null || q2.return === a3)
                    break a;
                  u2 === q2 && (u2 = null);
                  q2 = q2.return;
                }
                u2 === q2 && (u2 = null);
                q2.sibling.return = q2.return;
                q2 = q2.sibling;
              }
            if (n && !l && (a3.mode & 1) !== 0)
              for (T = a3, a3 = a3.child; a3 !== null; ) {
                for (l = T = a3; T !== null; ) {
                  n = T;
                  u2 = n.child;
                  switch (n.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Nj(4, n, n.return);
                      break;
                    case 1:
                      Jj(n, n.return);
                      f = n.stateNode;
                      if (typeof f.componentWillUnmount === "function") {
                        q2 = n;
                        y = n.return;
                        try {
                          e = q2, f.props = e.memoizedProps, f.state = e.memoizedState, f.componentWillUnmount();
                        } catch (m) {
                          U(q2, y, m);
                        }
                      }
                      break;
                    case 5:
                      Jj(n, n.return);
                      break;
                    case 22:
                      if (n.memoizedState !== null) {
                        ek(l);
                        continue;
                      }
                  }
                  u2 !== null ? (u2.return = n, T = u2) : ek(l);
                }
                a3 = a3.sibling;
              }
          }
          break;
        case 19:
          ak(b3, a3);
          ck(a3);
          d & 4 && Yj(a3);
          break;
        case 21:
          break;
        default:
          ak(b3, a3), ck(a3);
      }
    }
    function ck(a3) {
      var b3 = a3.flags;
      if (b3 & 2) {
        try {
          a: {
            for (var c2 = a3.return; c2 !== null; ) {
              if (Rj(c2)) {
                var d = c2;
                break a;
              }
              c2 = c2.return;
            }
            throw Error(p2(160));
          }
          switch (d.tag) {
            case 5:
              var e = d.stateNode;
              d.flags & 32 && (nb(e, ""), d.flags &= -33);
              var f = Sj(a3);
              Uj(a3, f, e);
              break;
            case 3:
            case 4:
              var g2 = d.stateNode.containerInfo, h = Sj(a3);
              Tj(a3, h, g2);
              break;
            default:
              throw Error(p2(161));
          }
        } catch (k) {
          U(a3, a3.return, k);
        }
        a3.flags &= -3;
      }
      b3 & 4096 && (a3.flags &= -4097);
    }
    function fk(a3, b3, c2) {
      T = a3;
      gk(a3, b3, c2);
    }
    function gk(a3, b3, c2) {
      for (var d = (a3.mode & 1) !== 0; T !== null; ) {
        var e = T, f = e.child;
        if (e.tag === 22 && d) {
          var g2 = e.memoizedState !== null || Hj;
          if (!g2) {
            var h = e.alternate, k = h !== null && h.memoizedState !== null || S;
            h = Hj;
            var l = S;
            Hj = g2;
            if ((S = k) && !l)
              for (T = e; T !== null; )
                g2 = T, k = g2.child, g2.tag === 22 && g2.memoizedState !== null ? hk(e) : k !== null ? (k.return = g2, T = k) : hk(e);
            for (; f !== null; )
              T = f, gk(f, b3, c2), f = f.sibling;
            T = e;
            Hj = h;
            S = l;
          }
          ik(a3, b3, c2);
        } else
          (e.subtreeFlags & 8772) !== 0 && f !== null ? (f.return = e, T = f) : ik(a3, b3, c2);
      }
    }
    function ik(a3) {
      for (; T !== null; ) {
        var b3 = T;
        if ((b3.flags & 8772) !== 0) {
          var c2 = b3.alternate;
          try {
            if ((b3.flags & 8772) !== 0)
              switch (b3.tag) {
                case 0:
                case 11:
                case 15:
                  S || Oj(5, b3);
                  break;
                case 1:
                  var d = b3.stateNode;
                  if (b3.flags & 4 && !S)
                    if (c2 === null)
                      d.componentDidMount();
                    else {
                      var e = b3.elementType === b3.type ? c2.memoizedProps : kg(b3.type, c2.memoizedProps);
                      d.componentDidUpdate(e, c2.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                    }
                  var f = b3.updateQueue;
                  f !== null && Gg(b3, f, d);
                  break;
                case 3:
                  var g2 = b3.updateQueue;
                  if (g2 !== null) {
                    c2 = null;
                    if (b3.child !== null)
                      switch (b3.child.tag) {
                        case 5:
                          c2 = b3.child.stateNode;
                          break;
                        case 1:
                          c2 = b3.child.stateNode;
                      }
                    Gg(b3, g2, c2);
                  }
                  break;
                case 5:
                  var h = b3.stateNode;
                  if (c2 === null && b3.flags & 4) {
                    c2 = h;
                    var k = b3.memoizedProps;
                    switch (b3.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k.autoFocus && c2.focus();
                        break;
                      case "img":
                        k.src && (c2.src = k.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (b3.memoizedState === null) {
                    var l = b3.alternate;
                    if (l !== null) {
                      var n = l.memoizedState;
                      if (n !== null) {
                        var u2 = n.dehydrated;
                        u2 !== null && ad(u2);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                  break;
                default:
                  throw Error(p2(163));
              }
            S || b3.flags & 512 && Pj(b3);
          } catch (q2) {
            U(b3, b3.return, q2);
          }
        }
        if (b3 === a3) {
          T = null;
          break;
        }
        c2 = b3.sibling;
        if (c2 !== null) {
          c2.return = b3.return;
          T = c2;
          break;
        }
        T = b3.return;
      }
    }
    function ek(a3) {
      for (; T !== null; ) {
        var b3 = T;
        if (b3 === a3) {
          T = null;
          break;
        }
        var c2 = b3.sibling;
        if (c2 !== null) {
          c2.return = b3.return;
          T = c2;
          break;
        }
        T = b3.return;
      }
    }
    function hk(a3) {
      for (; T !== null; ) {
        var b3 = T;
        try {
          switch (b3.tag) {
            case 0:
            case 11:
            case 15:
              var c2 = b3.return;
              try {
                Oj(4, b3);
              } catch (k) {
                U(b3, c2, k);
              }
              break;
            case 1:
              var d = b3.stateNode;
              if (typeof d.componentDidMount === "function") {
                var e = b3.return;
                try {
                  d.componentDidMount();
                } catch (k) {
                  U(b3, e, k);
                }
              }
              var f = b3.return;
              try {
                Pj(b3);
              } catch (k) {
                U(b3, f, k);
              }
              break;
            case 5:
              var g2 = b3.return;
              try {
                Pj(b3);
              } catch (k) {
                U(b3, g2, k);
              }
          }
        } catch (k) {
          U(b3, b3.return, k);
        }
        if (b3 === a3) {
          T = null;
          break;
        }
        var h = b3.sibling;
        if (h !== null) {
          h.return = b3.return;
          T = h;
          break;
        }
        T = b3.return;
      }
    }
    var jk = Math.ceil;
    var kk = ta.ReactCurrentDispatcher;
    var lk = ta.ReactCurrentOwner;
    var mk = ta.ReactCurrentBatchConfig;
    var W = 0;
    var P = null;
    var X = null;
    var Y = 0;
    var cj = 0;
    var mj = Tf(0);
    var R = 0;
    var nk = null;
    var Fg = 0;
    var ok = 0;
    var pk = 0;
    var qk = null;
    var rk = null;
    var dk = 0;
    var aj = Infinity;
    var sk = null;
    var Li = false;
    var Mi = null;
    var Oi = null;
    var tk = false;
    var uk = null;
    var vk = 0;
    var wk = 0;
    var xk = null;
    var yk = -1;
    var zk = 0;
    function Jg() {
      return (W & 6) !== 0 ? B() : yk !== -1 ? yk : yk = B();
    }
    function Kg(a3) {
      if ((a3.mode & 1) === 0)
        return 1;
      if ((W & 2) !== 0 && Y !== 0)
        return Y & -Y;
      if (jg.transition !== null)
        return zk === 0 && (zk = xc()), zk;
      a3 = C;
      if (a3 !== 0)
        return a3;
      a3 = window.event;
      a3 = a3 === void 0 ? 16 : id3(a3.type);
      return a3;
    }
    function Lg(a3, b3, c2) {
      if (50 < wk)
        throw wk = 0, xk = null, Error(p2(185));
      var d = Ak(a3, b3);
      if (d === null)
        return null;
      zc(d, b3, c2);
      if ((W & 2) === 0 || d !== P)
        d === P && ((W & 2) === 0 && (ok |= b3), R === 4 && Bk(d, Y)), Ck(d, c2), b3 === 1 && W === 0 && (a3.mode & 1) === 0 && (aj = B() + 500, eg && ig());
      return d;
    }
    function Ak(a3, b3) {
      a3.lanes |= b3;
      var c2 = a3.alternate;
      c2 !== null && (c2.lanes |= b3);
      c2 = a3;
      for (a3 = a3.return; a3 !== null; )
        a3.childLanes |= b3, c2 = a3.alternate, c2 !== null && (c2.childLanes |= b3), c2 = a3, a3 = a3.return;
      return c2.tag === 3 ? c2.stateNode : null;
    }
    function Bg(a3) {
      return (P !== null || vg !== null) && (a3.mode & 1) !== 0 && (W & 2) === 0;
    }
    function Ck(a3, b3) {
      var c2 = a3.callbackNode;
      vc(a3, b3);
      var d = tc(a3, a3 === P ? Y : 0);
      if (d === 0)
        c2 !== null && ac(c2), a3.callbackNode = null, a3.callbackPriority = 0;
      else if (b3 = d & -d, a3.callbackPriority !== b3) {
        c2 != null && ac(c2);
        if (b3 === 1)
          a3.tag === 0 ? hg(Dk.bind(null, a3)) : gg(Dk.bind(null, a3)), If(function() {
            W === 0 && ig();
          }), c2 = null;
        else {
          switch (Cc(d)) {
            case 1:
              c2 = ec;
              break;
            case 4:
              c2 = fc;
              break;
            case 16:
              c2 = gc;
              break;
            case 536870912:
              c2 = ic;
              break;
            default:
              c2 = gc;
          }
          c2 = Ek(c2, Fk.bind(null, a3));
        }
        a3.callbackPriority = b3;
        a3.callbackNode = c2;
      }
    }
    function Fk(a3, b3) {
      yk = -1;
      zk = 0;
      if ((W & 6) !== 0)
        throw Error(p2(327));
      var c2 = a3.callbackNode;
      if (Gk() && a3.callbackNode !== c2)
        return null;
      var d = tc(a3, a3 === P ? Y : 0);
      if (d === 0)
        return null;
      if ((d & 30) !== 0 || (d & a3.expiredLanes) !== 0 || b3)
        b3 = Hk(a3, d);
      else {
        b3 = d;
        var e = W;
        W |= 2;
        var f = Ik();
        if (P !== a3 || Y !== b3)
          sk = null, aj = B() + 500, Jk(a3, b3);
        do
          try {
            Kk();
            break;
          } catch (h) {
            Lk(a3, h);
          }
        while (1);
        pg();
        kk.current = f;
        W = e;
        X !== null ? b3 = 0 : (P = null, Y = 0, b3 = R);
      }
      if (b3 !== 0) {
        b3 === 2 && (e = wc(a3), e !== 0 && (d = e, b3 = Mk(a3, e)));
        if (b3 === 1)
          throw c2 = nk, Jk(a3, 0), Bk(a3, d), Ck(a3, B()), c2;
        if (b3 === 6)
          Bk(a3, d);
        else {
          e = a3.current.alternate;
          if ((d & 30) === 0 && !Nk(e) && (b3 = Hk(a3, d), b3 === 2 && (f = wc(a3), f !== 0 && (d = f, b3 = Mk(a3, f))), b3 === 1))
            throw c2 = nk, Jk(a3, 0), Bk(a3, d), Ck(a3, B()), c2;
          a3.finishedWork = e;
          a3.finishedLanes = d;
          switch (b3) {
            case 0:
            case 1:
              throw Error(p2(345));
            case 2:
              Ok(a3, rk, sk);
              break;
            case 3:
              Bk(a3, d);
              if ((d & 130023424) === d && (b3 = dk + 500 - B(), 10 < b3)) {
                if (tc(a3, 0) !== 0)
                  break;
                e = a3.suspendedLanes;
                if ((e & d) !== d) {
                  Jg();
                  a3.pingedLanes |= a3.suspendedLanes & e;
                  break;
                }
                a3.timeoutHandle = Ef(Ok.bind(null, a3, rk, sk), b3);
                break;
              }
              Ok(a3, rk, sk);
              break;
            case 4:
              Bk(a3, d);
              if ((d & 4194240) === d)
                break;
              b3 = a3.eventTimes;
              for (e = -1; 0 < d; ) {
                var g2 = 31 - nc(d);
                f = 1 << g2;
                g2 = b3[g2];
                g2 > e && (e = g2);
                d &= ~f;
              }
              d = e;
              d = B() - d;
              d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * jk(d / 1960)) - d;
              if (10 < d) {
                a3.timeoutHandle = Ef(Ok.bind(null, a3, rk, sk), d);
                break;
              }
              Ok(a3, rk, sk);
              break;
            case 5:
              Ok(a3, rk, sk);
              break;
            default:
              throw Error(p2(329));
          }
        }
      }
      Ck(a3, B());
      return a3.callbackNode === c2 ? Fk.bind(null, a3) : null;
    }
    function Mk(a3, b3) {
      var c2 = qk;
      a3.current.memoizedState.isDehydrated && (Jk(a3, b3).flags |= 256);
      a3 = Hk(a3, b3);
      a3 !== 2 && (b3 = rk, rk = c2, b3 !== null && Zi(b3));
      return a3;
    }
    function Zi(a3) {
      rk === null ? rk = a3 : rk.push.apply(rk, a3);
    }
    function Nk(a3) {
      for (var b3 = a3; ; ) {
        if (b3.flags & 16384) {
          var c2 = b3.updateQueue;
          if (c2 !== null && (c2 = c2.stores, c2 !== null))
            for (var d = 0; d < c2.length; d++) {
              var e = c2[d], f = e.getSnapshot;
              e = e.value;
              try {
                if (!Ge(f(), e))
                  return false;
              } catch (g2) {
                return false;
              }
            }
        }
        c2 = b3.child;
        if (b3.subtreeFlags & 16384 && c2 !== null)
          c2.return = b3, b3 = c2;
        else {
          if (b3 === a3)
            break;
          for (; b3.sibling === null; ) {
            if (b3.return === null || b3.return === a3)
              return true;
            b3 = b3.return;
          }
          b3.sibling.return = b3.return;
          b3 = b3.sibling;
        }
      }
      return true;
    }
    function Bk(a3, b3) {
      b3 &= ~pk;
      b3 &= ~ok;
      a3.suspendedLanes |= b3;
      a3.pingedLanes &= ~b3;
      for (a3 = a3.expirationTimes; 0 < b3; ) {
        var c2 = 31 - nc(b3), d = 1 << c2;
        a3[c2] = -1;
        b3 &= ~d;
      }
    }
    function Dk(a3) {
      if ((W & 6) !== 0)
        throw Error(p2(327));
      Gk();
      var b3 = tc(a3, 0);
      if ((b3 & 1) === 0)
        return Ck(a3, B()), null;
      var c2 = Hk(a3, b3);
      if (a3.tag !== 0 && c2 === 2) {
        var d = wc(a3);
        d !== 0 && (b3 = d, c2 = Mk(a3, d));
      }
      if (c2 === 1)
        throw c2 = nk, Jk(a3, 0), Bk(a3, b3), Ck(a3, B()), c2;
      if (c2 === 6)
        throw Error(p2(345));
      a3.finishedWork = a3.current.alternate;
      a3.finishedLanes = b3;
      Ok(a3, rk, sk);
      Ck(a3, B());
      return null;
    }
    function Pk(a3, b3) {
      var c2 = W;
      W |= 1;
      try {
        return a3(b3);
      } finally {
        W = c2, W === 0 && (aj = B() + 500, eg && ig());
      }
    }
    function Qk(a3) {
      uk !== null && uk.tag === 0 && (W & 6) === 0 && Gk();
      var b3 = W;
      W |= 1;
      var c2 = mk.transition, d = C;
      try {
        if (mk.transition = null, C = 1, a3)
          return a3();
      } finally {
        C = d, mk.transition = c2, W = b3, (W & 6) === 0 && ig();
      }
    }
    function bj() {
      cj = mj.current;
      E(mj);
    }
    function Jk(a3, b3) {
      a3.finishedWork = null;
      a3.finishedLanes = 0;
      var c2 = a3.timeoutHandle;
      c2 !== -1 && (a3.timeoutHandle = -1, Ff(c2));
      if (X !== null)
        for (c2 = X.return; c2 !== null; ) {
          var d = c2;
          ch2(d);
          switch (d.tag) {
            case 1:
              d = d.type.childContextTypes;
              d !== null && d !== void 0 && Zf();
              break;
            case 3:
              Gh();
              E(Vf);
              E(H);
              Lh();
              break;
            case 5:
              Ih(d);
              break;
            case 4:
              Gh();
              break;
            case 13:
              E(K);
              break;
            case 19:
              E(K);
              break;
            case 10:
              qg(d.type._context);
              break;
            case 22:
            case 23:
              bj();
          }
          c2 = c2.return;
        }
      P = a3;
      X = a3 = th2(a3.current, null);
      Y = cj = b3;
      R = 0;
      nk = null;
      pk = ok = Fg = 0;
      rk = qk = null;
      if (vg !== null) {
        for (b3 = 0; b3 < vg.length; b3++)
          if (c2 = vg[b3], d = c2.interleaved, d !== null) {
            c2.interleaved = null;
            var e = d.next, f = c2.pending;
            if (f !== null) {
              var g2 = f.next;
              f.next = e;
              d.next = g2;
            }
            c2.pending = d;
          }
        vg = null;
      }
      return a3;
    }
    function Lk(a3, b3) {
      do {
        var c2 = X;
        try {
          pg();
          Mh.current = Yh;
          if (Ph) {
            for (var d = L.memoizedState; d !== null; ) {
              var e = d.queue;
              e !== null && (e.pending = null);
              d = d.next;
            }
            Ph = false;
          }
          Oh = 0;
          N = M = L = null;
          Qh = false;
          Rh = 0;
          lk.current = null;
          if (c2 === null || c2.return === null) {
            R = 1;
            nk = b3;
            X = null;
            break;
          }
          a: {
            var f = a3, g2 = c2.return, h = c2, k = b3;
            b3 = Y;
            h.flags |= 32768;
            if (k !== null && typeof k === "object" && typeof k.then === "function") {
              var l = k, n = h, u2 = n.tag;
              if ((n.mode & 1) === 0 && (u2 === 0 || u2 === 11 || u2 === 15)) {
                var q2 = n.alternate;
                q2 ? (n.updateQueue = q2.updateQueue, n.memoizedState = q2.memoizedState, n.lanes = q2.lanes) : (n.updateQueue = null, n.memoizedState = null);
              }
              var y = Ri(g2);
              if (y !== null) {
                y.flags &= -257;
                Si(y, g2, h, f, b3);
                y.mode & 1 && Pi(f, l, b3);
                b3 = y;
                k = l;
                var m = b3.updateQueue;
                if (m === null) {
                  var w = /* @__PURE__ */ new Set();
                  w.add(k);
                  b3.updateQueue = w;
                } else
                  m.add(k);
                break a;
              } else {
                if ((b3 & 1) === 0) {
                  Pi(f, l, b3);
                  $i();
                  break a;
                }
                k = Error(p2(426));
              }
            } else if (I && h.mode & 1) {
              var J = Ri(g2);
              if (J !== null) {
                (J.flags & 65536) === 0 && (J.flags |= 256);
                Si(J, g2, h, f, b3);
                oh(k);
                break a;
              }
            }
            f = k;
            R !== 4 && (R = 2);
            qk === null ? qk = [f] : qk.push(f);
            k = Hi(k, h);
            h = g2;
            do {
              switch (h.tag) {
                case 3:
                  h.flags |= 65536;
                  b3 &= -b3;
                  h.lanes |= b3;
                  var v = Ki(h, k, b3);
                  Dg(h, v);
                  break a;
                case 1:
                  f = k;
                  var x = h.type, r = h.stateNode;
                  if ((h.flags & 128) === 0 && (typeof x.getDerivedStateFromError === "function" || r !== null && typeof r.componentDidCatch === "function" && (Oi === null || !Oi.has(r)))) {
                    h.flags |= 65536;
                    b3 &= -b3;
                    h.lanes |= b3;
                    var F = Ni(h, f, b3);
                    Dg(h, F);
                    break a;
                  }
              }
              h = h.return;
            } while (h !== null);
          }
          Rk(c2);
        } catch (Z) {
          b3 = Z;
          X === c2 && c2 !== null && (X = c2 = c2.return);
          continue;
        }
        break;
      } while (1);
    }
    function Ik() {
      var a3 = kk.current;
      kk.current = Yh;
      return a3 === null ? Yh : a3;
    }
    function $i() {
      if (R === 0 || R === 3 || R === 2)
        R = 4;
      P === null || (Fg & 268435455) === 0 && (ok & 268435455) === 0 || Bk(P, Y);
    }
    function Hk(a3, b3) {
      var c2 = W;
      W |= 2;
      var d = Ik();
      if (P !== a3 || Y !== b3)
        sk = null, Jk(a3, b3);
      do
        try {
          Sk();
          break;
        } catch (e) {
          Lk(a3, e);
        }
      while (1);
      pg();
      W = c2;
      kk.current = d;
      if (X !== null)
        throw Error(p2(261));
      P = null;
      Y = 0;
      return R;
    }
    function Sk() {
      for (; X !== null; )
        Tk(X);
    }
    function Kk() {
      for (; X !== null && !bc(); )
        Tk(X);
    }
    function Tk(a3) {
      var b3 = Uk(a3.alternate, a3, cj);
      a3.memoizedProps = a3.pendingProps;
      b3 === null ? Rk(a3) : X = b3;
      lk.current = null;
    }
    function Rk(a3) {
      var b3 = a3;
      do {
        var c2 = b3.alternate;
        a3 = b3.return;
        if ((b3.flags & 32768) === 0) {
          if (c2 = Yi(c2, b3, cj), c2 !== null) {
            X = c2;
            return;
          }
        } else {
          c2 = Gj(c2, b3);
          if (c2 !== null) {
            c2.flags &= 32767;
            X = c2;
            return;
          }
          if (a3 !== null)
            a3.flags |= 32768, a3.subtreeFlags = 0, a3.deletions = null;
          else {
            R = 6;
            X = null;
            return;
          }
        }
        b3 = b3.sibling;
        if (b3 !== null) {
          X = b3;
          return;
        }
        X = b3 = a3;
      } while (b3 !== null);
      R === 0 && (R = 5);
    }
    function Ok(a3, b3, c2) {
      var d = C, e = mk.transition;
      try {
        mk.transition = null, C = 1, Vk(a3, b3, c2, d);
      } finally {
        mk.transition = e, C = d;
      }
      return null;
    }
    function Vk(a3, b3, c2, d) {
      do
        Gk();
      while (uk !== null);
      if ((W & 6) !== 0)
        throw Error(p2(327));
      c2 = a3.finishedWork;
      var e = a3.finishedLanes;
      if (c2 === null)
        return null;
      a3.finishedWork = null;
      a3.finishedLanes = 0;
      if (c2 === a3.current)
        throw Error(p2(177));
      a3.callbackNode = null;
      a3.callbackPriority = 0;
      var f = c2.lanes | c2.childLanes;
      Ac(a3, f);
      a3 === P && (X = P = null, Y = 0);
      (c2.subtreeFlags & 2064) === 0 && (c2.flags & 2064) === 0 || tk || (tk = true, Ek(gc, function() {
        Gk();
        return null;
      }));
      f = (c2.flags & 15990) !== 0;
      if ((c2.subtreeFlags & 15990) !== 0 || f) {
        f = mk.transition;
        mk.transition = null;
        var g2 = C;
        C = 1;
        var h = W;
        W |= 4;
        lk.current = null;
        Mj(a3, c2);
        bk(c2, a3);
        Ne(Cf);
        cd = !!Bf;
        Cf = Bf = null;
        a3.current = c2;
        fk(c2, a3, e);
        cc2();
        W = h;
        C = g2;
        mk.transition = f;
      } else
        a3.current = c2;
      tk && (tk = false, uk = a3, vk = e);
      f = a3.pendingLanes;
      f === 0 && (Oi = null);
      lc(c2.stateNode, d);
      Ck(a3, B());
      if (b3 !== null)
        for (d = a3.onRecoverableError, c2 = 0; c2 < b3.length; c2++)
          d(b3[c2]);
      if (Li)
        throw Li = false, a3 = Mi, Mi = null, a3;
      (vk & 1) !== 0 && a3.tag !== 0 && Gk();
      f = a3.pendingLanes;
      (f & 1) !== 0 ? a3 === xk ? wk++ : (wk = 0, xk = a3) : wk = 0;
      ig();
      return null;
    }
    function Gk() {
      if (uk !== null) {
        var a3 = Cc(vk), b3 = mk.transition, c2 = C;
        try {
          mk.transition = null;
          C = 16 > a3 ? 16 : a3;
          if (uk === null)
            var d = false;
          else {
            a3 = uk;
            uk = null;
            vk = 0;
            if ((W & 6) !== 0)
              throw Error(p2(331));
            var e = W;
            W |= 4;
            for (T = a3.current; T !== null; ) {
              var f = T, g2 = f.child;
              if ((T.flags & 16) !== 0) {
                var h = f.deletions;
                if (h !== null) {
                  for (var k = 0; k < h.length; k++) {
                    var l = h[k];
                    for (T = l; T !== null; ) {
                      var n = T;
                      switch (n.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Nj(8, n, f);
                      }
                      var u2 = n.child;
                      if (u2 !== null)
                        u2.return = n, T = u2;
                      else
                        for (; T !== null; ) {
                          n = T;
                          var q2 = n.sibling, y = n.return;
                          Qj(n);
                          if (n === l) {
                            T = null;
                            break;
                          }
                          if (q2 !== null) {
                            q2.return = y;
                            T = q2;
                            break;
                          }
                          T = y;
                        }
                    }
                  }
                  var m = f.alternate;
                  if (m !== null) {
                    var w = m.child;
                    if (w !== null) {
                      m.child = null;
                      do {
                        var J = w.sibling;
                        w.sibling = null;
                        w = J;
                      } while (w !== null);
                    }
                  }
                  T = f;
                }
              }
              if ((f.subtreeFlags & 2064) !== 0 && g2 !== null)
                g2.return = f, T = g2;
              else
                b:
                  for (; T !== null; ) {
                    f = T;
                    if ((f.flags & 2048) !== 0)
                      switch (f.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Nj(9, f, f.return);
                      }
                    var v = f.sibling;
                    if (v !== null) {
                      v.return = f.return;
                      T = v;
                      break b;
                    }
                    T = f.return;
                  }
            }
            var x = a3.current;
            for (T = x; T !== null; ) {
              g2 = T;
              var r = g2.child;
              if ((g2.subtreeFlags & 2064) !== 0 && r !== null)
                r.return = g2, T = r;
              else
                b:
                  for (g2 = x; T !== null; ) {
                    h = T;
                    if ((h.flags & 2048) !== 0)
                      try {
                        switch (h.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Oj(9, h);
                        }
                      } catch (Z) {
                        U(h, h.return, Z);
                      }
                    if (h === g2) {
                      T = null;
                      break b;
                    }
                    var F = h.sibling;
                    if (F !== null) {
                      F.return = h.return;
                      T = F;
                      break b;
                    }
                    T = h.return;
                  }
            }
            W = e;
            ig();
            if (kc && typeof kc.onPostCommitFiberRoot === "function")
              try {
                kc.onPostCommitFiberRoot(jc, a3);
              } catch (Z) {
              }
            d = true;
          }
          return d;
        } finally {
          C = c2, mk.transition = b3;
        }
      }
      return false;
    }
    function Wk(a3, b3, c2) {
      b3 = Hi(c2, b3);
      b3 = Ki(a3, b3, 1);
      Ag(a3, b3);
      b3 = Jg();
      a3 = Ak(a3, 1);
      a3 !== null && (zc(a3, 1, b3), Ck(a3, b3));
    }
    function U(a3, b3, c2) {
      if (a3.tag === 3)
        Wk(a3, a3, c2);
      else
        for (; b3 !== null; ) {
          if (b3.tag === 3) {
            Wk(b3, a3, c2);
            break;
          } else if (b3.tag === 1) {
            var d = b3.stateNode;
            if (typeof b3.type.getDerivedStateFromError === "function" || typeof d.componentDidCatch === "function" && (Oi === null || !Oi.has(d))) {
              a3 = Hi(c2, a3);
              a3 = Ni(b3, a3, 1);
              Ag(b3, a3);
              a3 = Jg();
              b3 = Ak(b3, 1);
              b3 !== null && (zc(b3, 1, a3), Ck(b3, a3));
              break;
            }
          }
          b3 = b3.return;
        }
    }
    function Qi(a3, b3, c2) {
      var d = a3.pingCache;
      d !== null && d.delete(b3);
      b3 = Jg();
      a3.pingedLanes |= a3.suspendedLanes & c2;
      P === a3 && (Y & c2) === c2 && (R === 4 || R === 3 && (Y & 130023424) === Y && 500 > B() - dk ? Jk(a3, 0) : pk |= c2);
      Ck(a3, b3);
    }
    function Xk(a3, b3) {
      b3 === 0 && ((a3.mode & 1) === 0 ? b3 = 1 : (b3 = rc, rc <<= 1, (rc & 130023424) === 0 && (rc = 4194304)));
      var c2 = Jg();
      a3 = Ak(a3, b3);
      a3 !== null && (zc(a3, b3, c2), Ck(a3, c2));
    }
    function zj(a3) {
      var b3 = a3.memoizedState, c2 = 0;
      b3 !== null && (c2 = b3.retryLane);
      Xk(a3, c2);
    }
    function Zj(a3, b3) {
      var c2 = 0;
      switch (a3.tag) {
        case 13:
          var d = a3.stateNode;
          var e = a3.memoizedState;
          e !== null && (c2 = e.retryLane);
          break;
        case 19:
          d = a3.stateNode;
          break;
        default:
          throw Error(p2(314));
      }
      d !== null && d.delete(b3);
      Xk(a3, c2);
    }
    var Uk;
    Uk = function(a3, b3, c2) {
      if (a3 !== null)
        if (a3.memoizedProps !== b3.pendingProps || Vf.current)
          tg = true;
        else {
          if ((a3.lanes & c2) === 0 && (b3.flags & 128) === 0)
            return tg = false, Fj(a3, b3, c2);
          tg = (a3.flags & 131072) !== 0 ? true : false;
        }
      else
        tg = false, I && (b3.flags & 1048576) !== 0 && ah(b3, Ug, b3.index);
      b3.lanes = 0;
      switch (b3.tag) {
        case 2:
          var d = b3.type;
          a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
          a3 = b3.pendingProps;
          var e = Xf(b3, H.current);
          sg(b3, c2);
          e = Uh(null, b3, d, a3, e, c2);
          var f = Zh();
          b3.flags |= 1;
          typeof e === "object" && e !== null && typeof e.render === "function" && e.$$typeof === void 0 ? (b3.tag = 1, b3.memoizedState = null, b3.updateQueue = null, Yf(d) ? (f = true, bg(b3)) : f = false, b3.memoizedState = e.state !== null && e.state !== void 0 ? e.state : null, xg(b3), e.updater = Mg, b3.stateNode = e, e._reactInternals = b3, Qg(b3, d, a3, c2), b3 = pj(null, b3, d, true, f, c2)) : (b3.tag = 0, I && f && bh(b3), ej(null, b3, e, c2), b3 = b3.child);
          return b3;
        case 16:
          d = b3.elementType;
          a: {
            a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
            a3 = b3.pendingProps;
            e = d._init;
            d = e(d._payload);
            b3.type = d;
            e = b3.tag = Yk(d);
            a3 = kg(d, a3);
            switch (e) {
              case 0:
                b3 = kj(null, b3, d, a3, c2);
                break a;
              case 1:
                b3 = oj(null, b3, d, a3, c2);
                break a;
              case 11:
                b3 = fj(null, b3, d, a3, c2);
                break a;
              case 14:
                b3 = hj(null, b3, d, kg(d.type, a3), c2);
                break a;
            }
            throw Error(p2(306, d, ""));
          }
          return b3;
        case 0:
          return d = b3.type, e = b3.pendingProps, e = b3.elementType === d ? e : kg(d, e), kj(a3, b3, d, e, c2);
        case 1:
          return d = b3.type, e = b3.pendingProps, e = b3.elementType === d ? e : kg(d, e), oj(a3, b3, d, e, c2);
        case 3:
          a: {
            qj(b3);
            if (a3 === null)
              throw Error(p2(387));
            d = b3.pendingProps;
            f = b3.memoizedState;
            e = f.element;
            yg(a3, b3);
            Eg(b3, d, null, c2);
            var g2 = b3.memoizedState;
            d = g2.element;
            if (f.isDehydrated)
              if (f = {
                element: d,
                isDehydrated: false,
                cache: g2.cache,
                pendingSuspenseBoundaries: g2.pendingSuspenseBoundaries,
                transitions: g2.transitions
              }, b3.updateQueue.baseState = f, b3.memoizedState = f, b3.flags & 256) {
                e = Error(p2(423));
                b3 = rj(a3, b3, d, c2, e);
                break a;
              } else if (d !== e) {
                e = Error(p2(424));
                b3 = rj(a3, b3, d, c2, e);
                break a;
              } else
                for (eh = Kf(b3.stateNode.containerInfo.firstChild), dh = b3, I = true, fh = null, c2 = zh(b3, null, d, c2), b3.child = c2; c2; )
                  c2.flags = c2.flags & -3 | 4096, c2 = c2.sibling;
            else {
              nh();
              if (d === e) {
                b3 = gj(a3, b3, c2);
                break a;
              }
              ej(a3, b3, d, c2);
            }
            b3 = b3.child;
          }
          return b3;
        case 5:
          return Hh(b3), a3 === null && kh(b3), d = b3.type, e = b3.pendingProps, f = a3 !== null ? a3.memoizedProps : null, g2 = e.children, Df(d, e) ? g2 = null : f !== null && Df(d, f) && (b3.flags |= 32), nj(a3, b3), ej(a3, b3, g2, c2), b3.child;
        case 6:
          return a3 === null && kh(b3), null;
        case 13:
          return vj(a3, b3, c2);
        case 4:
          return Fh(b3, b3.stateNode.containerInfo), d = b3.pendingProps, a3 === null ? b3.child = yh(b3, null, d, c2) : ej(a3, b3, d, c2), b3.child;
        case 11:
          return d = b3.type, e = b3.pendingProps, e = b3.elementType === d ? e : kg(d, e), fj(a3, b3, d, e, c2);
        case 7:
          return ej(a3, b3, b3.pendingProps, c2), b3.child;
        case 8:
          return ej(a3, b3, b3.pendingProps.children, c2), b3.child;
        case 12:
          return ej(a3, b3, b3.pendingProps.children, c2), b3.child;
        case 10:
          a: {
            d = b3.type._context;
            e = b3.pendingProps;
            f = b3.memoizedProps;
            g2 = e.value;
            G(lg, d._currentValue);
            d._currentValue = g2;
            if (f !== null)
              if (Ge(f.value, g2)) {
                if (f.children === e.children && !Vf.current) {
                  b3 = gj(a3, b3, c2);
                  break a;
                }
              } else
                for (f = b3.child, f !== null && (f.return = b3); f !== null; ) {
                  var h = f.dependencies;
                  if (h !== null) {
                    g2 = f.child;
                    for (var k = h.firstContext; k !== null; ) {
                      if (k.context === d) {
                        if (f.tag === 1) {
                          k = zg(-1, c2 & -c2);
                          k.tag = 2;
                          var l = f.updateQueue;
                          if (l !== null) {
                            l = l.shared;
                            var n = l.pending;
                            n === null ? k.next = k : (k.next = n.next, n.next = k);
                            l.pending = k;
                          }
                        }
                        f.lanes |= c2;
                        k = f.alternate;
                        k !== null && (k.lanes |= c2);
                        rg(f.return, c2, b3);
                        h.lanes |= c2;
                        break;
                      }
                      k = k.next;
                    }
                  } else if (f.tag === 10)
                    g2 = f.type === b3.type ? null : f.child;
                  else if (f.tag === 18) {
                    g2 = f.return;
                    if (g2 === null)
                      throw Error(p2(341));
                    g2.lanes |= c2;
                    h = g2.alternate;
                    h !== null && (h.lanes |= c2);
                    rg(g2, c2, b3);
                    g2 = f.sibling;
                  } else
                    g2 = f.child;
                  if (g2 !== null)
                    g2.return = f;
                  else
                    for (g2 = f; g2 !== null; ) {
                      if (g2 === b3) {
                        g2 = null;
                        break;
                      }
                      f = g2.sibling;
                      if (f !== null) {
                        f.return = g2.return;
                        g2 = f;
                        break;
                      }
                      g2 = g2.return;
                    }
                  f = g2;
                }
            ej(a3, b3, e.children, c2);
            b3 = b3.child;
          }
          return b3;
        case 9:
          return e = b3.type, d = b3.pendingProps.children, sg(b3, c2), e = ug(e), d = d(e), b3.flags |= 1, ej(a3, b3, d, c2), b3.child;
        case 14:
          return d = b3.type, e = kg(d, b3.pendingProps), e = kg(d.type, e), hj(a3, b3, d, e, c2);
        case 15:
          return jj(a3, b3, b3.type, b3.pendingProps, c2);
        case 17:
          return d = b3.type, e = b3.pendingProps, e = b3.elementType === d ? e : kg(d, e), a3 !== null && (a3.alternate = null, b3.alternate = null, b3.flags |= 2), b3.tag = 1, Yf(d) ? (a3 = true, bg(b3)) : a3 = false, sg(b3, c2), Og(b3, d, e), Qg(b3, d, e, c2), pj(null, b3, d, true, a3, c2);
        case 19:
          return Ej(a3, b3, c2);
        case 22:
          return lj(a3, b3, c2);
      }
      throw Error(p2(156, b3.tag));
    };
    function Ek(a3, b3) {
      return $b(a3, b3);
    }
    function Zk(a3, b3, c2, d) {
      this.tag = a3;
      this.key = c2;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b3;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function hh(a3, b3, c2, d) {
      return new Zk(a3, b3, c2, d);
    }
    function ij(a3) {
      a3 = a3.prototype;
      return !(!a3 || !a3.isReactComponent);
    }
    function Yk(a3) {
      if (typeof a3 === "function")
        return ij(a3) ? 1 : 0;
      if (a3 !== void 0 && a3 !== null) {
        a3 = a3.$$typeof;
        if (a3 === Ca)
          return 11;
        if (a3 === Fa)
          return 14;
      }
      return 2;
    }
    function th2(a3, b3) {
      var c2 = a3.alternate;
      c2 === null ? (c2 = hh(a3.tag, b3, a3.key, a3.mode), c2.elementType = a3.elementType, c2.type = a3.type, c2.stateNode = a3.stateNode, c2.alternate = a3, a3.alternate = c2) : (c2.pendingProps = b3, c2.type = a3.type, c2.flags = 0, c2.subtreeFlags = 0, c2.deletions = null);
      c2.flags = a3.flags & 14680064;
      c2.childLanes = a3.childLanes;
      c2.lanes = a3.lanes;
      c2.child = a3.child;
      c2.memoizedProps = a3.memoizedProps;
      c2.memoizedState = a3.memoizedState;
      c2.updateQueue = a3.updateQueue;
      b3 = a3.dependencies;
      c2.dependencies = b3 === null ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
      c2.sibling = a3.sibling;
      c2.index = a3.index;
      c2.ref = a3.ref;
      return c2;
    }
    function vh3(a3, b3, c2, d, e, f) {
      var g2 = 2;
      d = a3;
      if (typeof a3 === "function")
        ij(a3) && (g2 = 1);
      else if (typeof a3 === "string")
        g2 = 5;
      else
        a:
          switch (a3) {
            case wa:
              return xh(c2.children, e, f, b3);
            case xa:
              g2 = 8;
              e |= 8;
              break;
            case za:
              return a3 = hh(12, c2, b3, e | 2), a3.elementType = za, a3.lanes = f, a3;
            case Da:
              return a3 = hh(13, c2, b3, e), a3.elementType = Da, a3.lanes = f, a3;
            case Ea:
              return a3 = hh(19, c2, b3, e), a3.elementType = Ea, a3.lanes = f, a3;
            case Ha:
              return wj(c2, e, f, b3);
            default:
              if (typeof a3 === "object" && a3 !== null)
                switch (a3.$$typeof) {
                  case Aa:
                    g2 = 10;
                    break a;
                  case Ba:
                    g2 = 9;
                    break a;
                  case Ca:
                    g2 = 11;
                    break a;
                  case Fa:
                    g2 = 14;
                    break a;
                  case Ga:
                    g2 = 16;
                    d = null;
                    break a;
                }
              throw Error(p2(130, a3 == null ? a3 : typeof a3, ""));
          }
      b3 = hh(g2, c2, b3, e);
      b3.elementType = a3;
      b3.type = d;
      b3.lanes = f;
      return b3;
    }
    function xh(a3, b3, c2, d) {
      a3 = hh(7, a3, d, b3);
      a3.lanes = c2;
      return a3;
    }
    function wj(a3, b3, c2, d) {
      a3 = hh(22, a3, d, b3);
      a3.elementType = Ha;
      a3.lanes = c2;
      a3.stateNode = {};
      return a3;
    }
    function uh(a3, b3, c2) {
      a3 = hh(6, a3, null, b3);
      a3.lanes = c2;
      return a3;
    }
    function wh(a3, b3, c2) {
      b3 = hh(4, a3.children !== null ? a3.children : [], a3.key, b3);
      b3.lanes = c2;
      b3.stateNode = { containerInfo: a3.containerInfo, pendingChildren: null, implementation: a3.implementation };
      return b3;
    }
    function $k(a3, b3, c2, d, e) {
      this.tag = b3;
      this.containerInfo = a3;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = yc(0);
      this.expirationTimes = yc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = yc(0);
      this.identifierPrefix = d;
      this.onRecoverableError = e;
      this.mutableSourceEagerHydrationData = null;
    }
    function al(a3, b3, c2, d, e, f, g2, h, k) {
      a3 = new $k(a3, b3, c2, h, k);
      b3 === 1 ? (b3 = 1, f === true && (b3 |= 8)) : b3 = 0;
      f = hh(3, null, null, b3);
      a3.current = f;
      f.stateNode = a3;
      f.memoizedState = { element: d, isDehydrated: c2, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      xg(f);
      return a3;
    }
    function bl(a3, b3, c2) {
      var d = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: va, key: d == null ? null : "" + d, children: a3, containerInfo: b3, implementation: c2 };
    }
    function cl(a3) {
      if (!a3)
        return Uf;
      a3 = a3._reactInternals;
      a: {
        if (Ub(a3) !== a3 || a3.tag !== 1)
          throw Error(p2(170));
        var b3 = a3;
        do {
          switch (b3.tag) {
            case 3:
              b3 = b3.stateNode.context;
              break a;
            case 1:
              if (Yf(b3.type)) {
                b3 = b3.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b3 = b3.return;
        } while (b3 !== null);
        throw Error(p2(171));
      }
      if (a3.tag === 1) {
        var c2 = a3.type;
        if (Yf(c2))
          return ag(a3, c2, b3);
      }
      return b3;
    }
    function dl2(a3, b3, c2, d, e, f, g2, h, k) {
      a3 = al(c2, d, true, a3, e, f, g2, h, k);
      a3.context = cl(null);
      c2 = a3.current;
      d = Jg();
      e = Kg(c2);
      f = zg(d, e);
      f.callback = b3 !== void 0 && b3 !== null ? b3 : null;
      Ag(c2, f);
      a3.current.lanes = e;
      zc(a3, e, d);
      Ck(a3, d);
      return a3;
    }
    function el8(a3, b3, c2, d) {
      var e = b3.current, f = Jg(), g2 = Kg(e);
      c2 = cl(c2);
      b3.context === null ? b3.context = c2 : b3.pendingContext = c2;
      b3 = zg(f, g2);
      b3.payload = { element: a3 };
      d = d === void 0 ? null : d;
      d !== null && (b3.callback = d);
      Ag(e, b3);
      a3 = Lg(e, g2, f);
      a3 !== null && Cg(a3, e, g2);
      return g2;
    }
    function fl(a3) {
      a3 = a3.current;
      if (!a3.child)
        return null;
      switch (a3.child.tag) {
        case 5:
          return a3.child.stateNode;
        default:
          return a3.child.stateNode;
      }
    }
    function gl(a3, b3) {
      a3 = a3.memoizedState;
      if (a3 !== null && a3.dehydrated !== null) {
        var c2 = a3.retryLane;
        a3.retryLane = c2 !== 0 && c2 < b3 ? c2 : b3;
      }
    }
    function hl(a3, b3) {
      gl(a3, b3);
      (a3 = a3.alternate) && gl(a3, b3);
    }
    function il() {
      return null;
    }
    var jl = typeof reportError === "function" ? reportError : function(a3) {
      console.error(a3);
    };
    function kl(a3) {
      this._internalRoot = a3;
    }
    ll.prototype.render = kl.prototype.render = function(a3) {
      var b3 = this._internalRoot;
      if (b3 === null)
        throw Error(p2(409));
      el8(a3, b3, null, null);
    };
    ll.prototype.unmount = kl.prototype.unmount = function() {
      var a3 = this._internalRoot;
      if (a3 !== null) {
        this._internalRoot = null;
        var b3 = a3.containerInfo;
        Qk(function() {
          el8(null, a3, null, null);
        });
        b3[tf] = null;
      }
    };
    function ll(a3) {
      this._internalRoot = a3;
    }
    ll.prototype.unstable_scheduleHydration = function(a3) {
      if (a3) {
        var b3 = Gc();
        a3 = { blockedOn: null, target: a3, priority: b3 };
        for (var c2 = 0; c2 < Pc.length && b3 !== 0 && b3 < Pc[c2].priority; c2++)
          ;
        Pc.splice(c2, 0, a3);
        c2 === 0 && Uc(a3);
      }
    };
    function ml(a3) {
      return !(!a3 || a3.nodeType !== 1 && a3.nodeType !== 9 && a3.nodeType !== 11);
    }
    function nl(a3) {
      return !(!a3 || a3.nodeType !== 1 && a3.nodeType !== 9 && a3.nodeType !== 11 && (a3.nodeType !== 8 || a3.nodeValue !== " react-mount-point-unstable "));
    }
    function ol2() {
    }
    function pl(a3, b3, c2, d, e) {
      if (e) {
        if (typeof d === "function") {
          var f = d;
          d = function() {
            var a4 = fl(g2);
            f.call(a4);
          };
        }
        var g2 = dl2(b3, d, a3, 0, null, false, false, "", ol2);
        a3._reactRootContainer = g2;
        a3[tf] = g2.current;
        rf(a3.nodeType === 8 ? a3.parentNode : a3);
        Qk();
        return g2;
      }
      for (; e = a3.lastChild; )
        a3.removeChild(e);
      if (typeof d === "function") {
        var h = d;
        d = function() {
          var a4 = fl(k);
          h.call(a4);
        };
      }
      var k = al(a3, 0, false, null, null, false, false, "", ol2);
      a3._reactRootContainer = k;
      a3[tf] = k.current;
      rf(a3.nodeType === 8 ? a3.parentNode : a3);
      Qk(function() {
        el8(b3, k, c2, d);
      });
      return k;
    }
    function ql(a3, b3, c2, d, e) {
      var f = c2._reactRootContainer;
      if (f) {
        var g2 = f;
        if (typeof e === "function") {
          var h = e;
          e = function() {
            var a4 = fl(g2);
            h.call(a4);
          };
        }
        el8(b3, g2, a3, e);
      } else
        g2 = pl(c2, b3, a3, e, d);
      return fl(g2);
    }
    Dc = function(a3) {
      switch (a3.tag) {
        case 3:
          var b3 = a3.stateNode;
          if (b3.current.memoizedState.isDehydrated) {
            var c2 = sc(b3.pendingLanes);
            c2 !== 0 && (Bc(b3, c2 | 1), Ck(b3, B()), (W & 6) === 0 && (aj = B() + 500, ig()));
          }
          break;
        case 13:
          var d = Jg();
          Qk(function() {
            return Lg(a3, 1, d);
          });
          hl(a3, 1);
      }
    };
    Ec = function(a3) {
      if (a3.tag === 13) {
        var b3 = Jg();
        Lg(a3, 134217728, b3);
        hl(a3, 134217728);
      }
    };
    Fc = function(a3) {
      if (a3.tag === 13) {
        var b3 = Jg(), c2 = Kg(a3);
        Lg(a3, c2, b3);
        hl(a3, c2);
      }
    };
    Gc = function() {
      return C;
    };
    Hc = function(a3, b3) {
      var c2 = C;
      try {
        return C = a3, b3();
      } finally {
        C = c2;
      }
    };
    xb = function(a3, b3, c2) {
      switch (b3) {
        case "input":
          $a(a3, c2);
          b3 = c2.name;
          if (c2.type === "radio" && b3 != null) {
            for (c2 = a3; c2.parentNode; )
              c2 = c2.parentNode;
            c2 = c2.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
            for (b3 = 0; b3 < c2.length; b3++) {
              var d = c2[b3];
              if (d !== a3 && d.form === a3.form) {
                var e = Cb(d);
                if (!e)
                  throw Error(p2(90));
                Va(d);
                $a(d, e);
              }
            }
          }
          break;
        case "textarea":
          hb(a3, c2);
          break;
        case "select":
          b3 = c2.value, b3 != null && eb(a3, !!c2.multiple, b3, false);
      }
    };
    Fb = Pk;
    Gb = Qk;
    var rl = { usingClientEntryPoint: false, Events: [Bb, te, Cb, Db, Eb, Pk] };
    var sl = { findFiberByHostInstance: Vc, bundleType: 0, version: "18.1.0", rendererPackageName: "react-dom" };
    var tl = { bundleType: sl.bundleType, version: sl.version, rendererPackageName: sl.rendererPackageName, rendererConfig: sl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ta.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
      a3 = Yb(a3);
      return a3 === null ? null : a3.stateNode;
    }, findFiberByHostInstance: sl.findFiberByHostInstance || il, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.1.0-next-22edb9f77-20220426" };
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
      ul2 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!ul2.isDisabled && ul2.supportsFiber)
        try {
          jc = ul2.inject(tl), kc = ul2;
        } catch (a3) {
        }
    }
    var ul2;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = rl;
    exports.createPortal = function(a3, b3) {
      var c2 = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
      if (!ml(b3))
        throw Error(p2(200));
      return bl(a3, b3, null, c2);
    };
    exports.createRoot = function(a3, b3) {
      if (!ml(a3))
        throw Error(p2(299));
      var c2 = false, d = "", e = jl;
      b3 !== null && b3 !== void 0 && (b3.unstable_strictMode === true && (c2 = true), b3.identifierPrefix !== void 0 && (d = b3.identifierPrefix), b3.onRecoverableError !== void 0 && (e = b3.onRecoverableError));
      b3 = al(a3, 1, false, null, null, c2, false, d, e);
      a3[tf] = b3.current;
      rf(a3.nodeType === 8 ? a3.parentNode : a3);
      return new kl(b3);
    };
    exports.findDOMNode = function(a3) {
      if (a3 == null)
        return null;
      if (a3.nodeType === 1)
        return a3;
      var b3 = a3._reactInternals;
      if (b3 === void 0) {
        if (typeof a3.render === "function")
          throw Error(p2(188));
        a3 = Object.keys(a3).join(",");
        throw Error(p2(268, a3));
      }
      a3 = Yb(b3);
      a3 = a3 === null ? null : a3.stateNode;
      return a3;
    };
    exports.flushSync = function(a3) {
      return Qk(a3);
    };
    exports.hydrate = function(a3, b3, c2) {
      if (!nl(b3))
        throw Error(p2(200));
      return ql(null, a3, b3, true, c2);
    };
    exports.hydrateRoot = function(a3, b3, c2) {
      if (!ml(a3))
        throw Error(p2(405));
      var d = c2 != null && c2.hydratedSources || null, e = false, f = "", g2 = jl;
      c2 !== null && c2 !== void 0 && (c2.unstable_strictMode === true && (e = true), c2.identifierPrefix !== void 0 && (f = c2.identifierPrefix), c2.onRecoverableError !== void 0 && (g2 = c2.onRecoverableError));
      b3 = dl2(b3, null, a3, 1, c2 != null ? c2 : null, e, false, f, g2);
      a3[tf] = b3.current;
      rf(a3);
      if (d)
        for (a3 = 0; a3 < d.length; a3++)
          c2 = d[a3], e = c2._getVersion, e = e(c2._source), b3.mutableSourceEagerHydrationData == null ? b3.mutableSourceEagerHydrationData = [c2, e] : b3.mutableSourceEagerHydrationData.push(c2, e);
      return new ll(b3);
    };
    exports.render = function(a3, b3, c2) {
      if (!nl(b3))
        throw Error(p2(200));
      return ql(null, a3, b3, false, c2);
    };
    exports.unmountComponentAtNode = function(a3) {
      if (!nl(a3))
        throw Error(p2(40));
      return a3._reactRootContainer ? (Qk(function() {
        ql(null, null, a3, false, function() {
          a3._reactRootContainer = null;
          a3[tf] = null;
        });
      }), true) : false;
    };
    exports.unstable_batchedUpdates = Pk;
    exports.unstable_renderSubtreeIntoContainer = function(a3, b3, c2, d) {
      if (!nl(c2))
        throw Error(p2(200));
      if (a3 == null || a3._reactInternals === void 0)
        throw Error(p2(38));
      return ql(a3, b3, c2, false, d);
    };
    exports.version = "18.1.0-next-22edb9f77-20220426";
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React7 = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React7.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn3(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error3(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack4 = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack4 !== "") {
              format += "%s";
              args = args.concat([stack4]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment3 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = false;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error3("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i3 = 0; i3 < dependencies.length; i3++) {
            allNativeEvents.add(dependencies[i3]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        function typeName(value12) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value12) {
          {
            try {
              testStringCoercion(value12);
              return false;
            } catch (e) {
              return true;
            }
          }
        }
        function testStringCoercion(value12) {
          return "" + value12;
        }
        function checkAttributeStringCoercion(value12, attributeName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkKeyStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkPropStringCoercion(value12, propName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value12, propName) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkHtmlStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value12) {
          {
            if (willCoercionThrow(value12)) {
              error3("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value12));
              return testStringCoercion(value12);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error3("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value12) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name15.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag) {
          if (value12 === null || typeof value12 === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value12;
              case OVERLOADED_BOOLEAN:
                return value12 === false;
              case NUMERIC:
                return isNaN(value12);
              case POSITIVE_NUMERIC:
                return isNaN(value12) || value12 < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name15) {
          return properties.hasOwnProperty(name15) ? properties[name15] : null;
        }
        function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name15;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name15 = _ref[0], attributeName = _ref[1];
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name15) {
          properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name15 = attributeName.replace(CAMELIZE, capitalize);
          properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url2) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url2)) {
              didWarn = true;
              error3("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
            }
          }
        }
        function getValueForProperty(node, name15, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name15);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value12 = node.getAttribute(attributeName);
                  if (value12 === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                    return value12;
                  }
                  if (value12 === "" + expected) {
                    return expected;
                  }
                  return value12;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name15, expected) {
          {
            if (!isAttributeNameSafe(name15)) {
              return;
            }
            if (!node.hasAttribute(name15)) {
              return expected === void 0 ? void 0 : null;
            }
            var value12 = node.getAttribute(name15);
            {
              checkAttributeStringCoercion(expected, name15);
            }
            if (value12 === "" + expected) {
              return expected;
            }
            return value12;
          }
        }
        function setValueForProperty(node, name15, value12, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name15);
          if (shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag)) {
            value12 = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name15)) {
              var _attributeName = name15;
              if (value12 === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value12, name15);
                }
                node.setAttribute(_attributeName, "" + value12);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value12 === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value12;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value12 === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value12 === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value12, attributeName);
                }
                attributeValue = "" + value12;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign2 = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign2({}, props, {
                  value: prevLog
                }),
                info: assign2({}, props, {
                  value: prevInfo
                }),
                warn: assign2({}, props, {
                  value: prevWarn
                }),
                error: assign2({}, props, {
                  value: prevError
                }),
                group: assign2({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign2({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign2({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error3("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name15, source3, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x) {
                var match4 = x.stack.trim().match(/\n( *(at )?)/);
                prefix = match4 && match4[1] || "";
              }
            }
            return "\n" + prefix + name15;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame2 = componentFrameCache.get(fn);
            if (frame2 !== void 0) {
              return frame2;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x) {
                  control = x;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x) {
                  control = x;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x) {
                control = x;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name15 = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source3, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source3, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init3(payload), source3, ownerFn);
                } catch (x) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source3 = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info2 = "";
            var node = workInProgress2;
            do {
              info2 += describeFiber(node);
              node = node.return;
            } while (node);
            return info2;
          } catch (x) {
            return "\nError generating stack: " + x.message + "\n" + x.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName2 = outerType.displayName;
          if (displayName2) {
            return displayName2;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error3("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider2 = type;
                return getContextName(provider2._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  return getComponentNameFromType(init3(payload));
                } catch (x) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider2 = type;
              return getContextName$1(provider2._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment3:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString9(value12) {
          return "" + value12;
        }
        function getToStringValue(value12) {
          switch (typeof value12) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value12;
            case "object":
              {
                checkFormFieldValueStringCoercion(value12);
              }
              return value12;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName2, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error3("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error3("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem3) {
          var type = elem3.type;
          var nodeName2 = elem3.nodeName;
          return nodeName2 && nodeName2.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value12 = "";
          if (!node) {
            return value12;
          }
          if (isCheckable(node)) {
            value12 = node.checked ? "true" : "false";
          } else {
            value12 = node.value;
          }
          return value12;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get4 = descriptor.get, set4 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get4.call(this);
            },
            set: function(value12) {
              {
                checkFormFieldValueStringCoercion(value12);
              }
              currentValue = "" + value12;
              set4.call(this, value12);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value12) {
              {
                checkFormFieldValueStringCoercion(value12);
              }
              currentValue = "" + value12;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track2(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element3, props) {
          var node = element3;
          var checked2 = props.checked;
          var hostProps = assign2({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked2 != null ? checked2 : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element3, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error3("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error3("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element3;
          var defaultValue4 = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue4),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element3, props) {
          var node = element3;
          var checked2 = props.checked;
          if (checked2 != null) {
            setValueForProperty(node, "checked", checked2, false);
          }
        }
        function updateWrapper(element3, props) {
          var node = element3;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error3("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error3("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element3, props);
          var value12 = getToStringValue(props.value);
          var type = props.type;
          if (value12 != null) {
            if (type === "number") {
              if (value12 === 0 && node.value === "" || node.value != value12) {
                node.value = toString9(value12);
              }
            } else if (node.value !== toString9(value12)) {
              node.value = toString9(value12);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue4(node, props.type, value12);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue4(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element3, props, isHydrating2) {
          var node = element3;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString9(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name15 = node.name;
          if (name15 !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name15 !== "") {
            node.name = name15;
          }
        }
        function restoreControlledState(element3, props) {
          var node = element3;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name15 = props.name;
          if (props.type === "radio" && name15 != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name15, "name");
            }
            var group3 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name15) + '][type="radio"]');
            for (var i3 = 0; i3 < group3.length; i3++) {
              var otherNode = group3[i3];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue4(node, type, value12) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value12 == null) {
              node.defaultValue = toString9(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString9(value12)) {
              node.defaultValue = toString9(value12);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element3, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React7.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error3("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error3("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error3("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element3, props) {
          if (props.value != null) {
            element3.setAttribute("value", toString9(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray2(a3) {
          return isArrayImpl(a3);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i3 = 0; i3 < valuePropNames.length; i3++) {
              var propName = valuePropNames[i3];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray2(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error3("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error3("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple3, propValue, setDefaultSelected2) {
          var options3 = node.options;
          if (multiple3) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i3 = 0; i3 < selectedValues.length; i3++) {
              selectedValue["$" + selectedValues[i3]] = true;
            }
            for (var _i = 0; _i < options3.length; _i++) {
              var selected2 = selectedValue.hasOwnProperty("$" + options3[_i].value);
              if (options3[_i].selected !== selected2) {
                options3[_i].selected = selected2;
              }
              if (selected2 && setDefaultSelected2) {
                options3[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString9(getToStringValue(propValue));
            var defaultSelected2 = null;
            for (var _i2 = 0; _i2 < options3.length; _i2++) {
              if (options3[_i2].value === _selectedValue) {
                options3[_i2].selected = true;
                if (setDefaultSelected2) {
                  options3[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected2 === null && !options3[_i2].disabled) {
                defaultSelected2 = options3[_i2];
              }
            }
            if (defaultSelected2 !== null) {
              defaultSelected2.selected = true;
            }
          }
        }
        function getHostProps$1(element3, props) {
          return assign2({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element3, props) {
          var node = element3;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error3("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element3, props) {
          var node = element3;
          node.multiple = !!props.multiple;
          var value12 = props.value;
          if (value12 != null) {
            updateOptions(node, !!props.multiple, value12, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element3, props) {
          var node = element3;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value12 = props.value;
          if (value12 != null) {
            updateOptions(node, !!props.multiple, value12, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element3, props) {
          var node = element3;
          var value12 = props.value;
          if (value12 != null) {
            updateOptions(node, !!props.multiple, value12, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element3, props) {
          var node = element3;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign2({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString9(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element3, props) {
          var node = element3;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error3("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children2 = props.children, defaultValue4 = props.defaultValue;
            if (children2 != null) {
              {
                error3("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue4 != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray2(children2)) {
                  if (children2.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children2 = children2[0];
                }
                defaultValue4 = children2;
              }
            }
            if (defaultValue4 == null) {
              defaultValue4 = "";
            }
            initialValue = defaultValue4;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element3, props) {
          var node = element3;
          var value12 = getToStringValue(props.value);
          var defaultValue4 = getToStringValue(props.defaultValue);
          if (value12 != null) {
            var newValue = toString9(value12);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue4 != null) {
            node.defaultValue = toString9(defaultValue4);
          }
        }
        function postMountWrapper$3(element3, props) {
          var node = element3;
          var textContent2 = node.textContent;
          if (textContent2 === node._wrapperState.initialValue) {
            if (textContent2 !== "" && textContent2 !== null) {
              node.value = textContent2;
            }
          }
        }
        function restoreControlledState$2(element3, props) {
          updateWrapper$1(element3, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html3) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html3.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html3;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent2 = function(node, text6) {
          if (text6) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text6;
              return;
            }
          }
          node.textContent = text6;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop2) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop2)] = isUnitlessNumber[prop2];
          });
        });
        function dangerousStyleValue(name15, value12, isCustomProperty) {
          var isEmpty = value12 == null || typeof value12 === "boolean" || value12 === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value12 === "number" && value12 !== 0 && !(isUnitlessNumber.hasOwnProperty(name15) && isUnitlessNumber[name15])) {
            return value12 + "px";
          }
          {
            checkCSSPropertyStringCoercion(value12, name15);
          }
          return ("" + value12).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name15) {
          return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name15) {
            if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
              return;
            }
            warnedStyleNames[name15] = true;
            error3("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name15, value12) {
            if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
              return;
            }
            warnedStyleValues[value12] = true;
            error3(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name15, value12) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error3("`NaN` is an invalid value for the `%s` css style property.", name15);
          };
          var warnStyleValueIsInfinity = function(name15, value12) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error3("`Infinity` is an invalid value for the `%s` css style property.", name15);
          };
          warnValidStyle = function(name15, value12) {
            if (name15.indexOf("-") > -1) {
              warnHyphenatedStyleName(name15);
            } else if (badVendoredStyleNamePattern.test(name15)) {
              warnBadVendoredStyleName(name15);
            } else if (badStyleValueWithSemicolonPattern.test(value12)) {
              warnStyleValueWithSemicolon(name15, value12);
            }
            if (typeof value12 === "number") {
              if (isNaN(value12)) {
                warnStyleValueIsNaN(name15, value12);
              } else if (!isFinite(value12)) {
                warnStyleValueIsInfinity(name15, value12);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter2 = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter2 + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter2 = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style3 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style3.setProperty(styleName, styleValue);
            } else {
              style3[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value12) {
          return value12 == null || typeof value12 === "boolean" || value12 === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i3 = 0; i3 < longhands.length; i3++) {
              expanded[longhands[i3]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error3("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = assign2({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error3("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName2, props) {
          if (tagName2.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName2) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName2, name15) {
          {
            if (hasOwnProperty2.call(warnedProperties, name15) && warnedProperties[name15]) {
              return true;
            }
            if (rARIACamel.test(name15)) {
              var ariaName = "aria-" + name15.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error3("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                warnedProperties[name15] = true;
                return true;
              }
              if (name15 !== correctName) {
                error3("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                warnedProperties[name15] = true;
                return true;
              }
            }
            if (rARIA.test(name15)) {
              var lowerCasedName = name15.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name15] = true;
                return false;
              }
              if (name15 !== standardName) {
                error3("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties[name15] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid2 = validateProperty(type, key);
              if (!isValid2) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error3("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error3("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error3("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error3("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
            if (hasOwnProperty2.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
              return true;
            }
            var lowerCasedName = name15.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error3("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name15)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error3("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name15)) {
                error3("Unknown event handler property `%s`. It will be ignored.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name15)) {
              if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                error3("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error3("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error3("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name15] = true;
              return true;
            }
            if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
              error3("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "number" && isNaN(value12)) {
              error3("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
              warnedProperties$1[name15] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name15);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name15) {
                error3("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                warnedProperties$1[name15] = true;
                return true;
              }
            } else if (!isReserved && name15 !== lowerCasedName) {
              error3("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
              warnedProperties$1[name15] = true;
              return true;
            }
            if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              if (value12) {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
              } else {
                error3('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
              }
              warnedProperties$1[name15] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
              warnedProperties$1[name15] = true;
              return false;
            }
            if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error3("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
              warnedProperties$1[name15] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid2) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop2) {
              return "`" + prop2 + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error3("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error3("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error3("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error3("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target5 = nativeEvent.target || nativeEvent.srcElement || window;
          if (target5.correspondingUseElement) {
            target5 = target5.correspondingUseElement;
          }
          return target5.nodeType === TEXT_NODE ? target5.parentNode : target5;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target5) {
          var internalInstance = getInstanceFromNode(target5);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target5) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target5);
            } else {
              restoreQueue = [target5];
            }
          } else {
            restoreTarget = target5;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target5 = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target5);
          if (queuedTargets) {
            for (var i3 = 0; i3 < queuedTargets.length; i3++) {
              restoreStateOfTarget(queuedTargets[i3]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a3, b3) {
          if (isInsideEventHandler) {
            return fn(a3, b3);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a3, b3);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name15, type, props) {
          switch (name15) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options2 = {};
            Object.defineProperty(options2, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options2, options2);
            window.removeEventListener("test", options2, options2);
          } catch (e) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name15, func, context, a3, b3, c2, d, e, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error4) {
            this.onError(error4);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name15, func, context, a3, b3, c2, d, e, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error4;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error4 = event.error;
                didSetError = true;
                if (error4 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error4 != null && typeof error4 === "object") {
                    try {
                      error4._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name15 ? name15 : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error4 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error4 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error4);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error4) {
            hasError = true;
            caughtError = error4;
          }
        };
        function invokeGuardedCallback(name15, func, context, a3, b3, c2, d, e, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name15, func, context, a3, b3, c2, d, e, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error4 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error4;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error4 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error4;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error4 = caughtError;
            hasError = false;
            caughtError = null;
            return error4;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get3(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set3(key, value12) {
          key._reactInternals = value12;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement2 = 2;
        var Update = 4;
        var ChildDeletion = 16;
        var ContentReset = 32;
        var Callback = 64;
        var DidCapture = 128;
        var ForceClientRender = 256;
        var Ref = 512;
        var Snapshot = 1024;
        var Passive = 2048;
        var Hydrating = 4096;
        var Visibility = 8192;
        var StoreConsistency = 16384;
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = 32767;
        var Incomplete = 32768;
        var ShouldCapture = 65536;
        var ForceUpdateForLegacySuspense = 131072;
        var Forked = 1048576;
        var RefStatic = 2097152;
        var LayoutStatic = 4194304;
        var PassiveStatic = 8388608;
        var MountLayoutDev = 16777216;
        var MountPassiveDev = 33554432;
        var BeforeMutationMask = Update | Snapshot | 0;
        var MutationMask = Placement2 | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement2 | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component25) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error3("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get3(component25);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a3 = fiber;
          var b3 = alternate;
          while (true) {
            var parentA = a3.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a3 = b3 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a3) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b3) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a3.return !== b3.return) {
              a3 = parentA;
              b3 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a3) {
                  didFindChild = true;
                  a3 = parentA;
                  b3 = parentB;
                  break;
                }
                if (_child === b3) {
                  didFindChild = true;
                  b3 = parentA;
                  a3 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a3) {
                    didFindChild = true;
                    a3 = parentB;
                    b3 = parentA;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentB;
                    a3 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a3.alternate !== b3) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a3.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a3.stateNode.current === a3) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match4 = findCurrentHostFiberImpl(child);
            if (match4 !== null) {
              return match4;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent2) {
          var currentParent = findCurrentFiberUsingSlowPath(parent2);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match4 = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match4 !== null) {
                return match4;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now2 = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error3("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign2({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error3("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children2) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children2);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error3("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error3("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error3("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error3("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error3("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map35 = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index7 = 0; index7 < TotalLanes; index7++) {
              var label6 = getLabelForLane(lane);
              map35.set(lane, label6);
              lane *= 2;
            }
            return map35;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = 0;
        var ConcurrentMode = 1;
        var ProfileMode = 2;
        var StrictLegacyMode = 8;
        var StrictEffectsMode = 16;
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log5 = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x) {
          var asUint = x >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log5(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var InputContinuousHydrationLane = 2;
        var InputContinuousLane = 4;
        var DefaultHydrationLane = 8;
        var DefaultLane = 16;
        var TransitionHydrationLane = 32;
        var TransitionLanes = 4194240;
        var TransitionLane1 = 64;
        var TransitionLane2 = 128;
        var TransitionLane3 = 256;
        var TransitionLane4 = 512;
        var TransitionLane5 = 1024;
        var TransitionLane6 = 2048;
        var TransitionLane7 = 4096;
        var TransitionLane8 = 8192;
        var TransitionLane9 = 16384;
        var TransitionLane10 = 32768;
        var TransitionLane11 = 65536;
        var TransitionLane12 = 131072;
        var TransitionLane13 = 262144;
        var TransitionLane14 = 524288;
        var TransitionLane15 = 1048576;
        var TransitionLane16 = 2097152;
        var RetryLanes = 130023424;
        var RetryLane1 = 4194304;
        var RetryLane2 = 8388608;
        var RetryLane3 = 16777216;
        var RetryLane4 = 33554432;
        var RetryLane5 = 67108864;
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = 134217728;
        var NonIdleLanes = 268435455;
        var IdleHydrationLane = 268435456;
        var IdleLane = 536870912;
        var OffscreenLane = 1073741824;
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error3("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              nextLanes |= entanglements[index7];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            var eventTime = eventTimes[index7];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime2) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime2 + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime2 + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error3("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime2) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            var expirationTime = expirationTimes[index7];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index7] = computeExpirationTime(lane, currentTime2);
              }
            } else if (expirationTime <= currentTime2) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a3, b3) {
          return (a3 & b3) !== NoLanes;
        }
        function isSubsetOfLanes(set4, subset) {
          return (set4 & subset) === subset;
        }
        function mergeLanes(a3, b3) {
          return a3 | b3;
        }
        function removeLanes(set4, subset) {
          return set4 & ~subset;
        }
        function intersectLanes(a3, b3) {
          return a3 & b3;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a3, b3) {
          return a3 !== NoLane && a3 < b3 ? a3 : b3;
        }
        function createLaneMap(initial4) {
          var laneMap = [];
          for (var i3 = 0; i3 < TotalLanes; i3++) {
            laneMap.push(initial4);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index7 = laneToIndex(updateLane);
          eventTimes[index7] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            expirationTimes[index7] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            entanglements[index7] = NoLanes;
            eventTimes[index7] = NoTimestamp;
            expirationTimes[index7] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index7 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index7;
            if (lane & entangledLanes | entanglements[index7] & entangledLanes) {
              entanglements[index7] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index7 = laneToIndex(lanes);
            var lane = 1 << index7;
            var updaters = pendingUpdatersLaneMap[index7];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index7 = laneToIndex(lanes);
            var lane = 1 << index7;
            var updaters = pendingUpdatersLaneMap[index7];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a3, b3) {
          return a3 !== 0 && a3 < b3 ? a3 : b3;
        }
        function lowerEventPriority(a3, b3) {
          return a3 === 0 || a3 > b3 ? a3 : b3;
        }
        function isHigherEventPriority(a3, b3) {
          return a3 !== 0 && a3 < b3;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType2) {
          return discreteReplayableEvents.indexOf(eventType2) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target5) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target: target5,
            priority: updatePriority
          };
          var i3 = 0;
          for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
          if (i3 === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map35) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map35.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
              var queuedEvent = queuedDiscreteEvents[i3];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent2;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container3, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent2(domEventName, eventSystemFlags, container3, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container3, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent2(domEventName, eventSystemFlags, container3, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            case "beforeblur":
            case "afterblur":
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target5, eventType2, listener) {
          target5.addEventListener(eventType2, listener, false);
          return listener;
        }
        function addEventCaptureListener(target5, eventType2, listener) {
          target5.addEventListener(eventType2, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target5, eventType2, listener, passive) {
          target5.addEventListener(eventType2, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target5, eventType2, listener, passive) {
          target5.addEventListener(eventType2, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset2() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start2;
          var startValue = startText;
          var startLength = startValue.length;
          var end2;
          var endValue = getText();
          var endLength = endValue.length;
          for (start2 = 0; start2 < startLength; start2++) {
            if (startValue[start2] !== endValue[start2]) {
              break;
            }
          }
          var minEnd = startLength - start2;
          for (end2 = 1; end2 <= minEnd; end2++) {
            if (startValue[startLength - end2] !== endValue[endLength - end2]) {
              break;
            }
          }
          var sliceTail = end2 > 1 ? 1 - end2 : void 0;
          fallbackText = endValue.slice(start2, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize3 = Interface[_propName];
              if (normalize3) {
                this[_propName] = normalize3(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign2(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign2({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign2({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign2({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign2({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign2({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign2({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign2({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent2 = this;
          var nativeEvent = syntheticEvent2.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign2({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign2({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign2({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign2({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign2({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType2;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType2 = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType2 = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType2 = "onCompositionEnd";
          }
          if (!eventType2) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType2 === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType2 === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType2);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType2, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which2 = nativeEvent.which;
              if (which2 !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset2();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem3) {
          var nodeName2 = elem3 && elem3.nodeName && elem3.nodeName.toLowerCase();
          if (nodeName2 === "input") {
            return !!supportedInputTypes[elem3.type];
          }
          if (nodeName2 === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element3 = document.createElement("div");
            element3.setAttribute(eventName, "return;");
            isSupported = typeof element3[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target5) {
          enqueueStateRestore(target5);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target5);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement2 = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem3) {
          var nodeName2 = elem3.nodeName && elem3.nodeName.toLowerCase();
          return nodeName2 === "select" || nodeName2 === "input" && elem3.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target5, targetInst) {
          activeElement2 = target5;
          activeElementInst = targetInst;
          activeElement2.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement2) {
            return;
          }
          activeElement2.detachEvent("onpropertychange", handlePropertyChange);
          activeElement2 = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target5, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target5, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem3) {
          var nodeName2 = elem3.nodeName;
          return nodeName2 && nodeName2.toLowerCase() === "input" && (elem3.type === "checkbox" || elem3.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state3 = node._wrapperState;
          if (!state3 || !state3.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue4(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from3;
          var to2;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from3 = targetInst;
            to2 = _related ? getClosestInstanceFromNode(_related) : null;
            if (to2 !== null) {
              var nearestMounted = getNearestMountedFiber(to2);
              if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                to2 = null;
              }
            }
          } else {
            from3 = null;
            to2 = targetInst;
          }
          if (from3 === to2) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode3 = from3 == null ? win : getNodeFromInstance(from3);
          var toNode = to2 == null ? win : getNodeFromInstance(to2);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
          leave.target = fromNode3;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode3;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to2);
        }
        function is2(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i3 = 0; i3 < keysA.length; i3++) {
            var currentKey = keysA[i3];
            if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length8 = 0;
          var start2 = -1;
          var end2 = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start2 = length8 + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end2 = length8 + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length8 += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length8;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end2 = length8;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start2 === -1 || end2 === -1) {
            return null;
          }
          return {
            start: start2,
            end: end2
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length8 = node.textContent.length;
          var start2 = Math.min(offsets.start, length8);
          var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length8);
          if (!selection.extend && start2 > end2) {
            var temp = end2;
            end2 = start2;
            start2 = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start2);
          var endMarker = getNodeForCharacterOffset(node, end2);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range4 = doc.createRange();
            range4.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start2 > end2) {
              selection.addRange(range4);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range4.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range4);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe2) {
          try {
            return typeof iframe2.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element3 = getActiveElement();
          while (element3 instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element3)) {
              win = element3.contentWindow;
            } else {
              return element3;
            }
            element3 = getActiveElement(win.document);
          }
          return element3;
        }
        function hasSelectionCapabilities(elem3) {
          var nodeName2 = elem3 && elem3.nodeName && elem3.nodeName.toLowerCase();
          return nodeName2 && (nodeName2 === "input" && (elem3.type === "text" || elem3.type === "search" || elem3.type === "tel" || elem3.type === "url" || elem3.type === "password") || nodeName2 === "textarea" || elem3.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i3 = 0; i3 < ancestors.length; i3++) {
              var info2 = ancestors[i3];
              info2.element.scrollLeft = info2.left;
              info2.element.scrollTop = info2.top;
            }
          }
        }
        function getSelection(input4) {
          var selection;
          if ("selectionStart" in input4) {
            selection = {
              start: input4.selectionStart,
              end: input4.selectionEnd
            };
          } else {
            selection = getOffsets(input4);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input4, offsets) {
          var start2 = offsets.start;
          var end2 = offsets.end;
          if (end2 === void 0) {
            end2 = start2;
          }
          if ("selectionStart" in input4) {
            input4.selectionStart = start2;
            input4.selectionEnd = Math.min(end2, input4.value.length);
          } else {
            setOffsets(input4, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style2 = {};
        if (canUseDOM) {
          style2 = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style2) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
            var eventName = simpleEventPluginEvents[i3];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
              var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
            var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error3('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target5) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error3('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target5, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container3 = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container3, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container3 !== null) {
                      var parentNode = getClosestInstanceFromNode(container3);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container3 = container3.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target5, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target5;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to2) {
          var common = from3 && to2 ? getLowestCommonAncestor(from3, to2) : null;
          if (from3 !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common, false);
          }
          if (to2 !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error3("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names2 = [];
            attributeNames.forEach(function(name15) {
              names2.push(name15);
            });
            error3("Extra attributes from the server: %s", names2);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error3("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error3("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent2, html3) {
            var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
            testElement.innerHTML = html3;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error3('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent2(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent2(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
            var propKey = updatePayload[i3];
            var propValue = updatePayload[i3 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent2(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement9(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error3("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div9 = ownerDocument.createElement("div");
              div9.innerHTML = "<script><\/script>";
              var firstChild = div9.firstChild;
              domElement = div9.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error3("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode2(text6, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text6);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track2(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track2(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name15 = attributes[_i].name.toLowerCase();
              switch (name15) {
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track2(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track2(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text6, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text6;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error3("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error3('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error3("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text6) {
          {
            if (text6 === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error3('Expected server HTML to contain a matching text node for "%s" in <%s>.', text6, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
            var info2 = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info2;
            if (tag === "form") {
              ancestorInfo.formTag = info2;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info2;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info2;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info2;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info2;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info2;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info2;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error3("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info2 = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error3("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
            } else {
              error3("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container3 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container3.namespaceURI || null;
              type = container3.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement9(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text6, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text6, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode2(text6, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback2) {
          return localPromise.resolve(null).then(callback2).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error4) {
          setTimeout(function() {
            throw error4;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent2(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild2(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container3, child) {
          var parentNode;
          if (container3.nodeType === COMMENT_NODE) {
            parentNode = container3.parentNode;
            parentNode.insertBefore(child, container3);
          } else {
            parentNode = container3;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container3._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore2(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container3, child, beforeChild) {
          if (container3.nodeType === COMMENT_NODE) {
            container3.parentNode.insertBefore(child, beforeChild);
          } else {
            container3.insertBefore(child, beforeChild);
          }
        }
        function removeChild2(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container3, child) {
          if (container3.nodeType === COMMENT_NODE) {
            container3.parentNode.removeChild(child);
          } else {
            container3.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container3, suspenseInstance) {
          if (container3.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container3.parentNode, suspenseInstance);
          } else if (container3.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container3, suspenseInstance);
          }
          retryIfBlockedOn(container3);
        }
        function hideInstance(instance) {
          instance = instance;
          var style3 = instance.style;
          if (typeof style3.setProperty === "function") {
            style3.setProperty("display", "none", "important");
          } else {
            style3.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text6) {
          textInstance.nodeValue = text6;
        }
        function clearContainer(container3) {
          if (container3.nodeType === ELEMENT_NODE) {
            container3.textContent = "";
          } else if (container3.nodeType === DOCUMENT_NODE) {
            var body2 = container3.body;
            if (body2 != null) {
              body2.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text6) {
          if (text6 === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function registerSuspenseInstanceRetry(instance, callback2) {
          instance._reactRetry = callback2;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text6, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text6);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container3) {
          retryIfBlockedOn(container3);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text6, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text6, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text6, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6) {
          {
            warnForInsertedHydratedText(parentContainer, text6);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text6) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null)
              warnForInsertedHydratedText(parentNode, text6);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text6, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text6);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error3("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element3) {
          {
            if (element3) {
              var owner = element3._owner;
              var stack4 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack4);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values2, location2, componentName, element3) {
          {
            var has2 = Function.call.bind(hasOwnProperty2);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element3);
                  error3("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element3);
                  error3("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index6 = -1;
        function createCursor(defaultValue4) {
          return {
            current: defaultValue4
          };
        }
        function pop2(cursor, fiber) {
          if (index6 < 0) {
            {
              error3("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index6]) {
              error3("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index6];
          valueStack[index6] = null;
          {
            fiberStack[index6] = null;
          }
          index6--;
        }
        function push2(cursor, value12, fiber) {
          index6++;
          valueStack[index6] = cursor.current;
          {
            fiberStack[index6] = fiber;
          }
          cursor.current = value12;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name15 = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name15);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop2(didPerformWorkStackCursor, fiber);
            pop2(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop2(didPerformWorkStackCursor, fiber);
            pop2(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push2(contextStackCursor, context, fiber);
            push2(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error3("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name15 = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name15);
            }
            return assign2({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop2(didPerformWorkStackCursor, workInProgress2);
              pop2(contextStackCursor, workInProgress2);
              push2(contextStackCursor, mergedContext, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop2(didPerformWorkStackCursor, workInProgress2);
              push2(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback2) {
          if (syncQueue === null) {
            syncQueue = [callback2];
          } else {
            syncQueue.push(callback2);
          }
        }
        function scheduleLegacySyncCallback(callback2) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback2);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i3 = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i3 < queue.length; i3++) {
                var callback2 = queue[i3];
                do {
                  callback2 = callback2(isSync);
                } while (callback2 !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error4) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i3 + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error4;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set4) {
            var array = [];
            set4.forEach(function(value12) {
              array.push(value12);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error3("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error3("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error3("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn3("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn3("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error3("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error3("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign2({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push2(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error3("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop2(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
          var node = parent2;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error3("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null)
                      ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error3("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value12 = context._currentValue;
          if (lastFullyObservedContext === context)
            ;
          else {
            var contextItem = {
              context,
              memoizedValue: value12,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value12;
        }
        var interleavedQueues = null;
        function pushInterleavedQueue(queue) {
          if (interleavedQueues === null) {
            interleavedQueues = [queue];
          } else {
            interleavedQueues.push(queue);
          }
        }
        function hasInterleavedUpdates() {
          return interleavedQueues !== null;
        }
        function enqueueInterleavedUpdates() {
          if (interleavedQueues !== null) {
            for (var i3 = 0; i3 < interleavedQueues.length; i3++) {
              var queue = interleavedQueues[i3];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            interleavedQueues = null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isInterleavedUpdate(fiber)) {
            var interleaved = sharedQueue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushInterleavedQueue(sharedQueue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            sharedQueue.interleaved = update;
          } else {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
          }
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error3("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone2 = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone2;
                  } else {
                    newLast.next = clone2;
                    newLast = clone2;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign2({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone2 = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone2;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback2 = update.callback;
                if (callback2 !== null && update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback2, context) {
          if (typeof callback2 !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback2));
          }
          callback2.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i3 = 0; i3 < effects.length; i3++) {
              var effect = effects[i3];
              var callback2 = effect.callback;
              if (callback2 !== null) {
                effect.callback = null;
                callCallback(callback2, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var emptyRefsObject = new React7.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback2, callerName) {
            if (callback2 === null || typeof callback2 === "function") {
              return;
            }
            var key = callerName + "_" + callback2;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error3("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error3("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback2) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback2 !== void 0 && callback2 !== null) {
              {
                warnOnInvalidCallback(callback2, "setState");
              }
              update.callback = callback2;
            }
            enqueueUpdate(fiber, update);
            var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root2 !== null) {
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback2) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback2 !== void 0 && callback2 !== null) {
              {
                warnOnInvalidCallback(callback2, "replaceState");
              }
              update.callback = callback2;
            }
            enqueueUpdate(fiber, update);
            var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root2 !== null) {
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback2) {
            var fiber = get3(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback2 !== void 0 && callback2 !== null) {
              {
                warnOnInvalidCallback(callback2, "forceUpdate");
              }
              update.callback = callback2;
            }
            enqueueUpdate(fiber, update);
            var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root2 !== null) {
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error3("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name15 = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error3("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
              } else {
                error3("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error3("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error3("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
            }
            if (instance.propTypes) {
              error3("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
            }
            if (instance.contextType) {
              error3("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
            }
            {
              if (instance.contextTypes) {
                error3("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error3("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error3("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error3("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error3("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error3("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error3("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error3("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error3("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
            }
            if (instance.defaultProps) {
              error3("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error3("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error3("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error3("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error3("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error3("%s.state: must be set to an object or null", name15);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error3("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set3(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error3("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state3 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state3 === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error3("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error3("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error3("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error3("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error3("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id3.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index7) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot2 = index7 + 1;
          var length8 = getBitLength(totalChildren) + baseLength;
          if (length8 > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot2 << restOfBaseLength;
            var id3 = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id3;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot2 << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length8 | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number2) {
          return 32 - clz32(number2);
        }
        function getLeadingBit(id3) {
          return 1 << getBitLength(id3) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error3("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error3("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null)
                  didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text6 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text6);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null)
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement2;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text6 = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text6);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent2 = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent2, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent2, isConcurrentMode);
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent2, _isConcurrentMode2);
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
            parent2 = parent2.return;
          }
          hydrationParentFiber = parent2;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error4) {
          if (hydrationErrors === null) {
            hydrationErrors = [error4];
          } else {
            hydrationErrors.push(error4);
          }
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error3('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function coerceRef(returnFiber, current2, element3) {
          var mixedRef = element3.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element3._owner && element3._self && element3._owner.stateNode !== element3._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error3('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element3._owner) {
              var owner = element3._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value12) {
                var refs = resolvedInst.refs;
                if (refs === emptyRefsObject) {
                  refs = resolvedInst.refs = {};
                }
                if (value12 === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value12;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element3._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error3("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init3 = lazyType._init;
          return init3(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement2;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement2;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement2;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent2, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent2);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element3, lanes) {
            var elementType = element3.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element3.props.children, lanes, element3.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element3) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element3.props);
                existing.ref = coerceRef(returnFiber, current2, element3);
                existing.return = returnFiber;
                {
                  existing._debugSource = element3._source;
                  existing._debugOwner = element3._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element3, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element3);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
            if (current2 === null || current2.tag !== Fragment3) {
              var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment2);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init3 = newChild._init;
                  return createChild(returnFiber, init3(payload), lanes);
                }
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init3 = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init3(payload), lanes);
                }
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init3 = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init3(payload), lanes);
              }
              if (isArray2(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error3("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init3 = child._init;
                  warnOnInvalidKey(init3(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i3 = 0; i3 < newChildren.length; i3++) {
                var child = newChildren[i3];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error3("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step3 = newChildren.next();
            for (; oldFiber !== null && !step3.done; newIdx++, step3 = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step3.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step3.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step3.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step3.done; newIdx++, step3 = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step3.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent2, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent2);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element3, lanes) {
            var key = element3.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element3.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment3) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element3.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element3._source;
                      existing._debugOwner = element3._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element3) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element3.props);
                    _existing.ref = coerceRef(returnFiber, child, element3);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element3._source;
                      _existing._debugOwner = element3._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element3.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element3.props.children, returnFiber.mode, lanes, element3.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element3, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element3);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init3 = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init3(payload), lanes);
              }
              if (isArray2(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (c2 === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push2(rootInstanceStackCursor, nextRootInstance, fiber);
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop2(contextStackCursor$1, fiber);
          push2(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop2(contextStackCursor$1, fiber);
          pop2(contextFiberStackCursor, fiber);
          pop2(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push2(contextFiberStackCursor, fiber, fiber);
          push2(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop2(contextStackCursor$1, fiber);
          pop2(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push2(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop2(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row2) {
          var node = row2;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state3 = node.memoizedState;
              if (state3 !== null) {
                var dehydrated = state3.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row2) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row2) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Insertion = 2;
        var Layout = 4;
        var Passive$1 = 8;
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
            var mutableSource = workInProgressSources[i3];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray2(deps)) {
              error3("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table2 = "";
                var secondColumnStart = 30;
                for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                  var oldHookName = hookTypesDev[i3];
                  var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row2 = i3 + 1 + ". " + oldHookName;
                  while (row2.length < secondColumnStart) {
                    row2 += " ";
                  }
                  row2 += newHookName + "\n";
                  table2 += row2;
                }
                error3("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error3("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error3("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
            if (objectIs(nextDeps[i3], prevDeps[i3])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children2 = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children2 = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
              error3("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children2;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state3, action2) {
          return typeof action2 === "function" ? action2(state3) : action2;
        }
        function mountReducer(reducer, initialArg, init3) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init3 !== void 0) {
            initialState = init3(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init3) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error3("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first2 = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first2;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone2 = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action2 = update.action;
                  newState = reducer(newState, action2);
                }
              }
              update = update.next;
            } while (update !== null && update !== first2);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init3) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action2 = update.action;
              newState = reducer(newState, action2);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source3, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source3, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error3("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error3("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error3("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error4) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create6, destroy2, deps) {
          var effect = {
            tag,
            create: create6,
            destroy: destroy2,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create6, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create6, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create6, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy2 = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy2 = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create6, destroy2, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create6, destroy2, nextDeps);
        }
        function mountEffect(create6, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create6, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create6, deps);
          }
        }
        function updateEffect(create6, deps) {
          return updateEffectImpl(Passive, Passive$1, create6, deps);
        }
        function mountInsertionEffect(create6, deps) {
          return mountEffectImpl(Update, Insertion, create6, deps);
        }
        function updateInsertionEffect(create6, deps) {
          return updateEffectImpl(Update, Insertion, create6, deps);
        }
        function mountLayoutEffect(create6, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create6, deps);
        }
        function updateLayoutEffect(create6, deps) {
          return updateEffectImpl(Update, Layout, create6, deps);
        }
        function imperativeHandleEffect(create6, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create6();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error3("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create6();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create6, deps) {
          {
            if (typeof create6 !== "function") {
              error3("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create6 !== null ? typeof create6 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create6, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create6, deps) {
          {
            if (typeof create6 !== "function") {
              error3("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create6 !== null ? typeof create6 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create6, ref), effectDeps);
        }
        function mountDebugValue(value12, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback2, nextDeps];
          return callback2;
        }
        function updateCallback(callback2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback2, nextDeps];
          return callback2;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value12) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value12;
          return value12;
        }
        function updateDeferredValue(value12) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value12);
        }
        function rerenderDeferredValue(value12) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value12;
            return value12;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value12);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value12) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value12, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value12;
            return value12;
          }
        }
        function startTransition(setPending, callback2, options3) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback2();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn3("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start2 = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start2;
          return [isPending, start2];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start2 = hook.memoizedState;
          return [isPending, start2];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id3;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id3 = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id3 += "H" + localId.toString(32);
            }
            id3 += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id3 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id3;
          return id3;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id3 = hook.memoizedState;
          return id3;
        }
        function dispatchReducerAction(fiber, queue, action2) {
          {
            if (typeof arguments[3] === "function") {
              error3("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action: action2,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            enqueueUpdate$1(fiber, queue, update);
            var eventTime = requestEventTime();
            var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root2 !== null) {
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action2) {
          {
            if (typeof arguments[3] === "function") {
              error3("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action: action2,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            enqueueUpdate$1(fiber, queue, update);
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action2);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error4) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var eventTime = requestEventTime();
            var root2 = scheduleUpdateOnFiber(fiber, lane, eventTime);
            if (root2 !== null) {
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function enqueueUpdate$1(fiber, queue, update, lane) {
          if (isInterleavedUpdate(fiber)) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushInterleavedQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          } else {
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action2) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error3("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error3("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback2, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback2, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create6, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create6, deps);
            },
            useImperativeHandle: function(ref, create6, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create6, deps);
            },
            useInsertionEffect: function(create6, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create6, deps);
            },
            useLayoutEffect: function(create6, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create6, deps);
            },
            useMemo: function(create6, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create6, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init3) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init3);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value12, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value12) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value12);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source3, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function createCapturedValue(value12, source3) {
          return {
            value: value12,
            source: source3,
            stack: getStackByFiberInDevAndProd(source3)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error4 = errorInfo.value;
            if (true) {
              var source3 = errorInfo.source;
              var stack4 = errorInfo.stack;
              var componentStack = stack4 !== null ? stack4 : "";
              if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error4);
              }
              var componentName = source3 ? getComponentNameFromFiber(source3) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error4);
            }
          } catch (e) {
            setTimeout(function() {
              throw e;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error4 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback2() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack4 = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack4 !== null ? stack4 : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error3("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException2(root2, returnFiber, sourceFiber, value12, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value12 !== null && typeof value12 === "object" && typeof value12.then === "function") {
            var wakeable = value12;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value12 = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(value12);
                return;
              }
            }
          }
          renderDidError(value12);
          value12 = createCapturedValue(value12, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value12;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value12;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent;
        var updateHostText;
        {
          appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent2, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment3:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
                warnIfUnhydratedTailNodes(workInProgress2);
                resetHydrationState();
                workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
                return workInProgress2;
              }
              if (nextState !== null && nextState.dehydrated !== null) {
                var _wasHydrated3 = popHydrationState(workInProgress2);
                if (current2 === null) {
                  if (!_wasHydrated3) {
                    throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                  }
                  prepareToHydrateHostSuspenseInstance(workInProgress2);
                  bubbleProperties(workInProgress2);
                  {
                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                      var isTimedOutSuspense = nextState !== null;
                      if (isTimedOutSuspense) {
                        var primaryChildFragment = workInProgress2.child;
                        if (primaryChildFragment !== null) {
                          workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                        }
                      }
                    }
                  }
                  return null;
                } else {
                  resetHydrationState();
                  if ((workInProgress2.flags & DidCapture) === NoFlags) {
                    workInProgress2.memoizedState = null;
                  }
                  workInProgress2.flags |= Update;
                  bubbleProperties(workInProgress2);
                  {
                    if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                      var _isTimedOutSuspense = nextState !== null;
                      if (_isTimedOutSuspense) {
                        var _primaryChildFragment = workInProgress2.child;
                        if (_primaryChildFragment !== null) {
                          workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                        }
                      }
                    }
                  }
                  return null;
                }
              }
              upgradeHydrationErrorsToRecoverable();
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                popHydrationState(workInProgress2);
              } else {
                var _prevState = current2.memoizedState;
                prevDidTimeout = _prevState !== null;
              }
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var _primaryChildFragment2 = workInProgress2.child;
                    if (_primaryChildFragment2 !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment2.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row2 = workInProgress2.child;
                    while (row2 !== null) {
                      var suspended = findFirstSuspended(row2);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row2 = row2.sibling;
                    }
                  }
                  if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now2();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState2 = current2.memoizedState;
                var prevIsHidden = _prevState2 !== null;
                if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement2 | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare4 = Component.compare;
            compare4 = compare4 !== null ? compare4 : shallowEqual;
            if (compare4(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init3 = lazyComponent._init;
                try {
                  outerMemoType = init3(payload);
                } catch (x) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef$1(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state3 = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state3, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValue(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement2;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error3("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef$1(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement2 | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent$1(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef$1(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText$1(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init3 = lazyComponent._init;
          var Component = init3(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value12;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error3("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error3("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value12.state !== null && value12.state !== void 0 ? value12.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value12);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value12, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error3("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info2 = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info2 += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error3("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error3("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error3("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                if (!didSuspend) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, _dehydrated, prevState, renderLanes2);
                } else if (workInProgress2.flags & ForceClientRender) {
                  workInProgress2.flags &= ~ForceClientRender;
                  return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                } else if (workInProgress2.memoizedState !== null) {
                  workInProgress2.child = current2.child;
                  workInProgress2.flags |= DidCapture;
                  return null;
                } else {
                  var _nextPrimaryChildren = nextProps.children;
                  var _nextFallbackChildren = nextProps.fallback;
                  var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                  var _primaryChildFragment2 = workInProgress2.child;
                  _primaryChildFragment2.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return fallbackChildFragment;
                }
              }
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement2;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement2;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement2;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error3("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, suspenseInstance, suspenseState, renderLanes2) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."));
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                scheduleUpdateOnFiber(current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state3 = node.memoizedState;
              if (state3 !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row2 = firstChild;
          var lastContentRow = null;
          while (row2 !== null) {
            var currentRow = row2.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row2;
            }
            row2 = row2.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error3('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error3('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error3('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error3('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error3('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error3('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index7) {
          {
            var isAnArray = isArray2(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error3("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index7, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children2, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
              if (isArray2(children2)) {
                for (var i3 = 0; i3 < children2.length; i3++) {
                  if (!validateSuspenseListNestedChild(children2[i3], i3)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children2);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children2);
                  if (childrenIterator) {
                    var step3 = childrenIterator.next();
                    var _i = 0;
                    for (; !step3.done; step3 = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step3.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error3('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail2, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail: tail2,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail2;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail2;
                if (lastContentRow === null) {
                  tail2 = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail2 = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail2, lastContentRow, tailMode);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row2 = workInProgress2.child;
                workInProgress2.child = null;
                while (row2 !== null) {
                  var currentRow = row2.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row2;
                    break;
                  }
                  var nextRow = row2.sibling;
                  row2.sibling = _tail;
                  _tail = row2;
                  row2 = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error3("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error3("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error3("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement2;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state3 = workInProgress2.memoizedState;
              if (state3 !== null) {
                if (state3.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent$1(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText$1(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment3:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error4) {
          {
            invokeGuardedCallback(null, function() {
              throw error4;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error4) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error4);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error4) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error4);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error4) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error4);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error4) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error4);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error4) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error4);
              }
              {
                if (typeof retVal === "function") {
                  error3("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy2) {
          try {
            destroy2();
          } catch (error4) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error4);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error4) {
              captureCommitPhaseError(fiber, fiber.return, error4);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error3("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error3("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error3("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy2 = effect.destroy;
                effect.destroy = void 0;
                if (destroy2 !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy2);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create6 = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create6();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy2 = effect.destroy;
                  if (destroy2 !== void 0 && typeof destroy2 !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy2 === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy2.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy2;
                    }
                    error3("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id3 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id3, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error3("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error3("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error3("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error3("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error3("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error3("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error3("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error3("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent2 = fiber.return;
          while (parent2 !== null) {
            if (isHostParent(parent2)) {
              return parent2;
            }
            parent2 = parent2.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement2) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement2)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent2 = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent2);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent2);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent2, stateNode, before);
            } else {
              appendChildToContainer(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent2) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore2(parent2, stateNode, before);
            } else {
              appendChild2(parent2, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent2);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent2);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent2 = returnFiber;
            findParent:
              while (parent2 !== null) {
                switch (parent2.tag) {
                  case HostComponent: {
                    hostParent = parent2.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent2.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent2 = parent2.return;
              }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
          var child = parent2.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild2(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy2 = _effect.destroy, tag = _effect.tag;
                      if (destroy2 !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy2);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (deletedFiber.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i3 = 0; i3 < deletions.length; i3++) {
              var childToDelete = deletions[i3];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error4) {
                captureCommitPhaseError(childToDelete, parentFiber, error4);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error4) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error4) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error4) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error4) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error4) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error4);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (finishedWork.mode & ConcurrentMode) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement2) {
            try {
              commitPlacement(finishedWork);
            } catch (error4) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error4);
            }
            finishedWork.flags &= ~Placement2;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(child, root2, committedLanes);
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error4) {
                captureCommitPhaseError(fiber, fiber.return, error4);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error4) {
              captureCommitPhaseError(fiber, fiber.return, error4);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error4) {
                captureCommitPhaseError(fiber, fiber.return, error4);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i3 = 0; i3 < deletions.length; i3++) {
                  var fiberToDelete = deletions[i3];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error4) {
                  captureCommitPhaseError(fiber, fiber.return, error4);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error4) {
                  captureCommitPhaseError(fiber, fiber.return, error4);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error4) {
                  captureCommitPhaseError(fiber, fiber.return, error4);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error4) {
                  captureCommitPhaseError(fiber, fiber.return, error4);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error4) {
                  captureCommitPhaseError(fiber, fiber.return, error4);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error3("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil2 = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = 0;
        var BatchedContext = 1;
        var RenderContext = 2;
        var CommitContext = 4;
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now2();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now2();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition3 = ReactCurrentBatchConfig$3.transition;
              if (!transition3._updatedFibers) {
                transition3._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition3._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error3("useInsertionEffect must not schedule updates.");
            }
          }
          var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root2 === null) {
            return null;
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
          return root2;
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement2 | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent2 = sourceFiber.return;
          while (parent2 !== null) {
            parent2.childLanes = mergeLanes(parent2.childLanes, lane);
            alternate = parent2.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent2.flags & (Placement2 | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent2;
            parent2 = parent2.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        function isInterleavedUpdate(fiber, lane) {
          return (workInProgressRoot !== null || hasInterleavedUpdates()) && (fiber.mode & ConcurrentMode) !== NoMode && (executionContext & RenderContext) === NoContext;
        }
        function ensureRootIsScheduled(root2, currentTime2) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime2);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error3("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if (executionContext === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now2());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now2());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now2() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i3 = 0; i3 < checks.length; i3++) {
                    var check = checks[i3];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error4) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now2());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now2());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now2());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a3) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a3);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a3, b3, c2, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a3, b3, c2, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync2(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop2(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          enqueueInterleavedUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException2(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now2();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error4) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error4];
          } else {
            workInProgressRootConcurrentErrors.push(error4);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error3("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now2());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
              var recoverableError = recoverableErrors[i3];
              onRecoverableError(recoverableError);
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i3 = 0; i3 < profilerEffects.length; i3++) {
              var _fiber = profilerEffects[i3];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error4) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error4;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error4) {
          var errorInfo = createCapturedValue(error4, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error3("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error3("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error3("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error3("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error3("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback2) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback2);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback2);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error3("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error3("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler2) {
          {
            resolveFamily = handler2;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element3) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element3.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync2(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element3) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync2(function() {
              updateContainer(element3, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types2 = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types2.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement2;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                case REACT_SCOPE_TYPE:
                case REACT_CACHE_TYPE:
                case REACT_TRACING_MARKER_TYPE:
                case REACT_DEBUG_TRACING_MODE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info2 = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element3, mode, lanes) {
          var owner = null;
          {
            owner = element3._owner;
          }
          var type = element3.type;
          var key = element3.key;
          var pendingProps = element3.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element3._source;
            fiber._debugOwner = element3._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment3, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error3('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {};
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content3, mode, lanes) {
          var fiber = createFiber(HostText, content3, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target5, source3) {
          if (target5 === null) {
            target5 = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target5.tag = source3.tag;
          target5.key = source3.key;
          target5.elementType = source3.elementType;
          target5.type = source3.type;
          target5.stateNode = source3.stateNode;
          target5.return = source3.return;
          target5.child = source3.child;
          target5.sibling = source3.sibling;
          target5.index = source3.index;
          target5.ref = source3.ref;
          target5.pendingProps = source3.pendingProps;
          target5.memoizedProps = source3.memoizedProps;
          target5.updateQueue = source3.updateQueue;
          target5.memoizedState = source3.memoizedState;
          target5.dependencies = source3.dependencies;
          target5.mode = source3.mode;
          target5.flags = source3.flags;
          target5.subtreeFlags = source3.subtreeFlags;
          target5.deletions = source3.deletions;
          target5.lanes = source3.lanes;
          target5.childLanes = source3.childLanes;
          target5.alternate = source3.alternate;
          {
            target5.actualDuration = source3.actualDuration;
            target5.actualStartTime = source3.actualStartTime;
            target5.selfBaseDuration = source3.selfBaseDuration;
            target5.treeBaseDuration = source3.treeBaseDuration;
          }
          target5._debugSource = source3._debugSource;
          target5._debugOwner = source3._debugOwner;
          target5._debugNeedsRemount = source3._debugNeedsRemount;
          target5._debugHookTypes = source3._debugHookTypes;
          return target5;
        }
        function FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i = 0; _i < TotalLanes; _i++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate3 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate3 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate3,
              cache: null,
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.1.0";
        function createPortal2(children2, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children: children2,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get3(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component25, methodName) {
          {
            var fiber = get3(component25);
            if (fiber === void 0) {
              if (typeof component25.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys4 = Object.keys(component25).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys4);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error3("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error3("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate3 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback2, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate3 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback2 !== void 0 && callback2 !== null ? callback2 : null;
          enqueueUpdate(current2, update);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element3, container3, parentComponent, callback2) {
          {
            onScheduleRoot(container3, element3);
          }
          var current$1 = container3.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container3.context === null) {
            container3.context = context;
          } else {
            container3.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error3("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element: element3
          };
          callback2 = callback2 === void 0 ? null : callback2;
          if (callback2 !== null) {
            {
              if (typeof callback2 !== "function") {
                error3("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback2);
              }
            }
            update.callback = callback2;
          }
          enqueueUpdate(current$1, update);
          var root2 = scheduleUpdateOnFiber(current$1, lane, eventTime);
          if (root2 !== null) {
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container3) {
          var containerFiber = container3.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot:
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            case SuspenseComponent:
              var eventTime = requestEventTime();
              flushSync2(function() {
                return scheduleUpdateOnFiber(fiber, SyncLane, eventTime);
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path5, index7) {
            var key = path5[index7];
            var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
            if (index7 + 1 === path5.length) {
              if (isArray2(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path5, index7 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path5) {
            return copyWithDeleteImpl(obj, path5, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index7) {
            var oldKey = oldPath[index7];
            var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
            if (index7 + 1 === oldPath.length) {
              var newKey = newPath[index7];
              updated[newKey] = updated[oldKey];
              if (isArray2(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index7 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn3("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                if (oldPath[i3] !== newPath[i3]) {
                  warn3("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path5, index7, value12) {
            if (index7 >= path5.length) {
              return value12;
            }
            var key = path5[index7];
            var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path5, index7 + 1, value12);
            return updated;
          };
          var copyWithSet = function(obj, path5, value12) {
            return copyWithSetImpl(obj, path5, 0, value12);
          };
          var findHook = function(fiber, id3) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id3 > 0) {
              currentHook2 = currentHook2.next;
              id3--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id3, path5, value12) {
            var hook = findHook(fiber, id3);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path5, value12);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id3, path5) {
            var hook = findHook(fiber, id3);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path5);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id3, oldPath, newPath) {
            var hook = findHook(fiber, id3);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign2({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path5, value12) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path5, value12);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path5) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path5);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error4) {
          console["error"](error4);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error3("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error3("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error3("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container3 = root2.containerInfo;
            if (container3.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container3) {
                  error3("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children2, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error3("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container3 = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error3("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync2(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container3);
          }
        };
        function createRoot(container3, options3) {
          if (!isValidContainer(container3)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container3);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options3 !== null && options3 !== void 0) {
            {
              if (options3.hydrate) {
                warn3("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options3 === "object" && options3 !== null && options3.$$typeof === REACT_ELEMENT_TYPE) {
                  error3("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options3.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options3.identifierPrefix !== void 0) {
              identifierPrefix = options3.identifierPrefix;
            }
            if (options3.onRecoverableError !== void 0) {
              onRecoverableError = options3.onRecoverableError;
            }
            if (options3.transitionCallbacks !== void 0) {
              transitionCallbacks = options3.transitionCallbacks;
            }
          }
          var root2 = createContainer(container3, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container3);
          var rootContainerElement = container3.nodeType === COMMENT_NODE ? container3.parentNode : container3;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target5) {
          if (target5) {
            queueExplicitHydrationTarget(target5);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container3, initialChildren, options3) {
          if (!isValidContainer(container3)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container3);
          {
            if (initialChildren === void 0) {
              error3("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options3 != null ? options3 : null;
          var mutableSources = options3 != null && options3.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options3 !== null && options3 !== void 0) {
            if (options3.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options3.identifierPrefix !== void 0) {
              identifierPrefix = options3.identifierPrefix;
            }
            if (options3.onRecoverableError !== void 0) {
              onRecoverableError = options3.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container3, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container3);
          listenToAllSupportedEvents(container3);
          if (mutableSources) {
            for (var i3 = 0; i3 < mutableSources.length; i3++) {
              var mutableSource = mutableSources[i3];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container3) {
          {
            if (container3.nodeType === ELEMENT_NODE && container3.tagName && container3.tagName.toUpperCase() === "BODY") {
              error3("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container3)) {
              if (container3._reactRootContainer) {
                error3("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error3("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container3) {
            if (container3._reactRootContainer && container3.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container3._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container3) {
                  error3("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container3._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container3);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error3("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container3.nodeType === ELEMENT_NODE && container3.tagName && container3.tagName.toUpperCase() === "BODY") {
              error3("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container3) {
          if (!container3) {
            return null;
          }
          if (container3.nodeType === DOCUMENT_NODE) {
            return container3.documentElement;
          } else {
            return container3.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container3, initialChildren, parentComponent, callback2, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback2 === "function") {
              var originalCallback = callback2;
              callback2 = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(initialChildren, callback2, container3, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container3._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container3);
            var rootContainerElement = container3.nodeType === COMMENT_NODE ? container3.parentNode : container3;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync2();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container3.lastChild) {
              container3.removeChild(rootSibling);
            }
            if (typeof callback2 === "function") {
              var _originalCallback = callback2;
              callback2 = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(container3, LegacyRoot, null, false, false, "", noopOnRecoverableError);
            container3._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container3);
            var _rootContainerElement = container3.nodeType === COMMENT_NODE ? container3.parentNode : container3;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync2(function() {
              updateContainer(initialChildren, _root, parentComponent, callback2);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback2, callerName) {
          {
            if (callback2 !== null && typeof callback2 !== "function") {
              error3("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children2, container3, forceHydrate, callback2) {
          {
            topLevelUpdateWarnings(container3);
            warnOnInvalidCallback$1(callback2 === void 0 ? null : callback2, "render");
          }
          var maybeRoot = container3._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container3, children2, parentComponent, callback2, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback2 === "function") {
              var originalCallback = callback2;
              callback2 = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children2, root2, parentComponent, callback2);
          }
          return getPublicRootInstance(root2);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error3("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate2(element3, container3, callback2) {
          {
            error3("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container3)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error3("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element3, container3, true, callback2);
        }
        function render(element3, container3, callback2) {
          {
            error3("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container3)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error3("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element3, container3, false, callback2);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2) {
          {
            error3("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element3, containerNode, false, callback2);
        }
        function unmountComponentAtNode(container3) {
          if (!isValidContainerLegacy(container3)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error3("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container3._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container3);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error3("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync2(function() {
              legacyRenderSubtreeIntoContainer(null, null, container3, false, function() {
                container3._reactRootContainer = null;
                unmarkContainerAsRoot(container3);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container3);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container3.nodeType === ELEMENT_NODE && isValidContainerLegacy(container3.parentNode) && !!container3.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error3("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error3("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
        function createPortal$1(children2, container3) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container3)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal2(children2, container3, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2);
        }
        var Internals = {
          usingClientEntryPoint: false,
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container3, options3) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error3('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot(container3, options3);
        }
        function hydrateRoot$1(container3, initialChildren, options3) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error3('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container3, initialChildren, options3);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error3("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync2(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol2 = window.location.protocol;
              if (/^(https?|file):$/.test(protocol2)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol2 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate2;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/react-dom/index.js"(exports, module2) {
    "use strict";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      if (process.env.NODE_ENV !== "production") {
        throw new Error("^_^");
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    if (process.env.NODE_ENV === "production") {
      checkDCE();
      module2.exports = require_react_dom_production_min();
    } else {
      module2.exports = require_react_dom_development();
    }
  }
});

// node_modules/@emotion/sheet/dist/emotion-sheet.cjs.prod.js
var require_emotion_sheet_cjs_prod = __commonJS({
  "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.prod.js"(exports) {
    "use strict";
    function sheetForTag(tag) {
      if (tag.sheet)
        return tag.sheet;
      for (var i3 = 0; i3 < document.styleSheets.length; i3++)
        if (document.styleSheets[i3].ownerNode === tag)
          return document.styleSheets[i3];
    }
    function createStyleElement(options2) {
      var tag = document.createElement("style");
      return tag.setAttribute("data-emotion", options2.key), options2.nonce !== void 0 && tag.setAttribute("nonce", options2.nonce), tag.appendChild(document.createTextNode("")), tag.setAttribute("data-s", ""), tag;
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var StyleSheet = function() {
      function StyleSheet2(options2) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          before = _this.tags.length === 0 ? _this.insertionPoint ? _this.insertionPoint.nextSibling : _this.prepend ? _this.container.firstChild : _this.before : _this.tags[_this.tags.length - 1].nextSibling, _this.container.insertBefore(tag, before), _this.tags.push(tag);
        }, this.isSpeedy = options2.speedy === void 0 || options2.speedy, this.tags = [], this.ctr = 0, this.nonce = options2.nonce, this.key = options2.key, this.container = options2.container, this.prepend = options2.prepend, this.insertionPoint = options2.insertionPoint, this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      return _proto.hydrate = function(nodes) {
        nodes.forEach(this._insertTag);
      }, _proto.insert = function(rule) {
        this.ctr % (this.isSpeedy ? 65e3 : 1) == 0 && this._insertTag(createStyleElement(this));
        var tag = this.tags[this.tags.length - 1];
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
            0;
          }
        } else
          tag.appendChild(document.createTextNode(rule));
        this.ctr++;
      }, _proto.flush = function() {
        this.tags.forEach(function(tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        }), this.tags = [], this.ctr = 0;
      }, StyleSheet2;
    }();
    exports.StyleSheet = StyleSheet;
  }
});

// node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js
var require_emotion_sheet_cjs_dev = __commonJS({
  "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function sheetForTag(tag) {
      if (tag.sheet) {
        return tag.sheet;
      }
      for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
        if (document.styleSheets[i3].ownerNode === tag) {
          return document.styleSheets[i3];
        }
      }
    }
    function createStyleElement(options2) {
      var tag = document.createElement("style");
      tag.setAttribute("data-emotion", options2.key);
      if (options2.nonce !== void 0) {
        tag.setAttribute("nonce", options2.nonce);
      }
      tag.appendChild(document.createTextNode(""));
      tag.setAttribute("data-s", "");
      return tag;
    }
    var StyleSheet = /* @__PURE__ */ function() {
      function StyleSheet2(options2) {
        var _this = this;
        this._insertTag = function(tag) {
          var before;
          if (_this.tags.length === 0) {
            if (_this.insertionPoint) {
              before = _this.insertionPoint.nextSibling;
            } else if (_this.prepend) {
              before = _this.container.firstChild;
            } else {
              before = _this.before;
            }
          } else {
            before = _this.tags[_this.tags.length - 1].nextSibling;
          }
          _this.container.insertBefore(tag, before);
          _this.tags.push(tag);
        };
        this.isSpeedy = options2.speedy === void 0 ? process.env.NODE_ENV === "production" : options2.speedy;
        this.tags = [];
        this.ctr = 0;
        this.nonce = options2.nonce;
        this.key = options2.key;
        this.container = options2.container;
        this.prepend = options2.prepend;
        this.insertionPoint = options2.insertionPoint;
        this.before = null;
      }
      var _proto = StyleSheet2.prototype;
      _proto.hydrate = function hydrate2(nodes) {
        nodes.forEach(this._insertTag);
      };
      _proto.insert = function insert10(rule) {
        if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
          this._insertTag(createStyleElement(this));
        }
        var tag = this.tags[this.tags.length - 1];
        if (process.env.NODE_ENV !== "production") {
          var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
          if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {
            console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
          }
          this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;
        }
        if (this.isSpeedy) {
          var sheet = sheetForTag(tag);
          try {
            sheet.insertRule(rule, sheet.cssRules.length);
          } catch (e) {
            if (process.env.NODE_ENV !== "production" && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
              console.error('There was a problem inserting the following rule: "' + rule + '"', e);
            }
          }
        } else {
          tag.appendChild(document.createTextNode(rule));
        }
        this.ctr++;
      };
      _proto.flush = function flush() {
        this.tags.forEach(function(tag) {
          return tag.parentNode && tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.ctr = 0;
        if (process.env.NODE_ENV !== "production") {
          this._alreadyInsertedOrderInsensitiveRule = false;
        }
      };
      return StyleSheet2;
    }();
    exports.StyleSheet = StyleSheet;
  }
});

// node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js
var require_emotion_sheet_cjs = __commonJS({
  "node_modules/@emotion/sheet/dist/emotion-sheet.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_sheet_cjs_prod();
    } else {
      module2.exports = require_emotion_sheet_cjs_dev();
    }
  }
});

// node_modules/stylis/dist/umd/stylis.js
var require_stylis = __commonJS({
  "node_modules/stylis/dist/umd/stylis.js"(exports, module2) {
    (function(e, r) {
      typeof exports === "object" && typeof module2 !== "undefined" ? r(exports) : typeof define === "function" && define.amd ? define(["exports"], r) : (e = e || self, r(e.stylis = {}));
    })(exports, function(e) {
      "use strict";
      var r = "-ms-";
      var a3 = "-moz-";
      var c2 = "-webkit-";
      var t = "comm";
      var n = "rule";
      var s2 = "decl";
      var i3 = "@page";
      var u2 = "@media";
      var o = "@import";
      var f = "@charset";
      var l = "@viewport";
      var h = "@supports";
      var p2 = "@document";
      var v = "@namespace";
      var b3 = "@keyframes";
      var d = "@font-face";
      var m = "@counter-style";
      var w = "@font-feature-values";
      var k = Math.abs;
      var $ = String.fromCharCode;
      var g2 = Object.assign;
      function x(e2, r2) {
        return (((r2 << 2 ^ O(e2, 0)) << 2 ^ O(e2, 1)) << 2 ^ O(e2, 2)) << 2 ^ O(e2, 3);
      }
      function E(e2) {
        return e2.trim();
      }
      function y(e2, r2) {
        return (e2 = r2.exec(e2)) ? e2[0] : e2;
      }
      function T(e2, r2, a4) {
        return e2.replace(r2, a4);
      }
      function A(e2, r2) {
        return e2.indexOf(r2);
      }
      function O(e2, r2) {
        return e2.charCodeAt(r2) | 0;
      }
      function C(e2, r2, a4) {
        return e2.slice(r2, a4);
      }
      function M(e2) {
        return e2.length;
      }
      function S(e2) {
        return e2.length;
      }
      function R(e2, r2) {
        return r2.push(e2), e2;
      }
      function z(e2, r2) {
        return e2.map(r2).join("");
      }
      e.line = 1;
      e.column = 1;
      e.length = 0;
      e.position = 0;
      e.character = 0;
      e.characters = "";
      function N(r2, a4, c3, t2, n2, s3, i4) {
        return { value: r2, root: a4, parent: c3, type: t2, props: n2, children: s3, line: e.line, column: e.column, length: i4, return: "" };
      }
      function P(e2, r2) {
        return g2(N("", null, null, "", null, null, 0), e2, { length: -e2.length }, r2);
      }
      function j() {
        return e.character;
      }
      function U() {
        e.character = e.position > 0 ? O(e.characters, --e.position) : 0;
        if (e.column--, e.character === 10)
          e.column = 1, e.line--;
        return e.character;
      }
      function _() {
        e.character = e.position < e.length ? O(e.characters, e.position++) : 0;
        if (e.column++, e.character === 10)
          e.column = 1, e.line++;
        return e.character;
      }
      function F() {
        return O(e.characters, e.position);
      }
      function I() {
        return e.position;
      }
      function L(r2, a4) {
        return C(e.characters, r2, a4);
      }
      function D(e2) {
        switch (e2) {
          case 0:
          case 9:
          case 10:
          case 13:
          case 32:
            return 5;
          case 33:
          case 43:
          case 44:
          case 47:
          case 62:
          case 64:
          case 126:
          case 59:
          case 123:
          case 125:
            return 4;
          case 58:
            return 3;
          case 34:
          case 39:
          case 40:
          case 91:
            return 2;
          case 41:
          case 93:
            return 1;
        }
        return 0;
      }
      function K(r2) {
        return e.line = e.column = 1, e.length = M(e.characters = r2), e.position = 0, [];
      }
      function V(r2) {
        return e.characters = "", r2;
      }
      function W(r2) {
        return E(L(e.position - 1, Z(r2 === 91 ? r2 + 2 : r2 === 40 ? r2 + 1 : r2)));
      }
      function Y(e2) {
        return V(G(K(e2)));
      }
      function B(r2) {
        while (e.character = F())
          if (e.character < 33)
            _();
          else
            break;
        return D(r2) > 2 || D(e.character) > 3 ? "" : " ";
      }
      function G(r2) {
        while (_())
          switch (D(e.character)) {
            case 0:
              R(J(e.position - 1), r2);
              break;
            case 2:
              R(W(e.character), r2);
              break;
            default:
              R($(e.character), r2);
          }
        return r2;
      }
      function H(r2, a4) {
        while (--a4 && _())
          if (e.character < 48 || e.character > 102 || e.character > 57 && e.character < 65 || e.character > 70 && e.character < 97)
            break;
        return L(r2, I() + (a4 < 6 && F() == 32 && _() == 32));
      }
      function Z(r2) {
        while (_())
          switch (e.character) {
            case r2:
              return e.position;
            case 34:
            case 39:
              if (r2 !== 34 && r2 !== 39)
                Z(e.character);
              break;
            case 40:
              if (r2 === 41)
                Z(r2);
              break;
            case 92:
              _();
              break;
          }
        return e.position;
      }
      function q2(r2, a4) {
        while (_())
          if (r2 + e.character === 47 + 10)
            break;
          else if (r2 + e.character === 42 + 42 && F() === 47)
            break;
        return "/*" + L(a4, e.position - 1) + "*" + $(r2 === 47 ? r2 : _());
      }
      function J(r2) {
        while (!D(F()))
          _();
        return L(r2, e.position);
      }
      function Q(e2) {
        return V(X("", null, null, null, [""], e2 = K(e2), 0, [0], e2));
      }
      function X(e2, r2, a4, c3, t2, n2, s3, i4, u3) {
        var o2 = 0;
        var f2 = 0;
        var l2 = s3;
        var h7 = 0;
        var p3 = 0;
        var v2 = 0;
        var b4 = 1;
        var d2 = 1;
        var m2 = 1;
        var w2 = 0;
        var k2 = "";
        var g3 = t2;
        var x2 = n2;
        var E2 = c3;
        var y2 = k2;
        while (d2)
          switch (v2 = w2, w2 = _()) {
            case 40:
              if (v2 != 108 && y2.charCodeAt(l2 - 1) == 58) {
                if (A(y2 += T(W(w2), "&", "&\f"), "&\f") != -1)
                  m2 = -1;
                break;
              }
            case 34:
            case 39:
            case 91:
              y2 += W(w2);
              break;
            case 9:
            case 10:
            case 13:
            case 32:
              y2 += B(v2);
              break;
            case 92:
              y2 += H(I() - 1, 7);
              continue;
            case 47:
              switch (F()) {
                case 42:
                case 47:
                  R(re(q2(_(), I()), r2, a4), u3);
                  break;
                default:
                  y2 += "/";
              }
              break;
            case 123 * b4:
              i4[o2++] = M(y2) * m2;
            case 125 * b4:
            case 59:
            case 0:
              switch (w2) {
                case 0:
                case 125:
                  d2 = 0;
                case 59 + f2:
                  if (p3 > 0 && M(y2) - l2)
                    R(p3 > 32 ? ae(y2 + ";", c3, a4, l2 - 1) : ae(T(y2, " ", "") + ";", c3, a4, l2 - 2), u3);
                  break;
                case 59:
                  y2 += ";";
                default:
                  R(E2 = ee(y2, r2, a4, o2, f2, t2, i4, k2, g3 = [], x2 = [], l2), n2);
                  if (w2 === 123)
                    if (f2 === 0)
                      X(y2, r2, E2, E2, g3, n2, l2, i4, x2);
                    else
                      switch (h7) {
                        case 100:
                        case 109:
                        case 115:
                          X(e2, E2, E2, c3 && R(ee(e2, E2, E2, 0, 0, t2, i4, k2, t2, g3 = [], l2), x2), t2, x2, l2, i4, c3 ? g3 : x2);
                          break;
                        default:
                          X(y2, E2, E2, E2, [""], x2, 0, i4, x2);
                      }
              }
              o2 = f2 = p3 = 0, b4 = m2 = 1, k2 = y2 = "", l2 = s3;
              break;
            case 58:
              l2 = 1 + M(y2), p3 = v2;
            default:
              if (b4 < 1) {
                if (w2 == 123)
                  --b4;
                else if (w2 == 125 && b4++ == 0 && U() == 125)
                  continue;
              }
              switch (y2 += $(w2), w2 * b4) {
                case 38:
                  m2 = f2 > 0 ? 1 : (y2 += "\f", -1);
                  break;
                case 44:
                  i4[o2++] = (M(y2) - 1) * m2, m2 = 1;
                  break;
                case 64:
                  if (F() === 45)
                    y2 += W(_());
                  h7 = F(), f2 = l2 = M(k2 = y2 += J(I())), w2++;
                  break;
                case 45:
                  if (v2 === 45 && M(y2) == 2)
                    b4 = 0;
              }
          }
        return n2;
      }
      function ee(e2, r2, a4, c3, t2, s3, i4, u3, o2, f2, l2) {
        var h7 = t2 - 1;
        var p3 = t2 === 0 ? s3 : [""];
        var v2 = S(p3);
        for (var b4 = 0, d2 = 0, m2 = 0; b4 < c3; ++b4)
          for (var w2 = 0, $2 = C(e2, h7 + 1, h7 = k(d2 = i4[b4])), g3 = e2; w2 < v2; ++w2)
            if (g3 = E(d2 > 0 ? p3[w2] + " " + $2 : T($2, /&\f/g, p3[w2])))
              o2[m2++] = g3;
        return N(e2, r2, a4, t2 === 0 ? n : u3, o2, f2, l2);
      }
      function re(e2, r2, a4) {
        return N(e2, r2, a4, t, $(j()), C(e2, 2, -2), 0);
      }
      function ae(e2, r2, a4, c3) {
        return N(e2, r2, a4, s2, C(e2, 0, c3), C(e2, c3 + 1, -1), c3);
      }
      function ce(e2, t2) {
        switch (x(e2, t2)) {
          case 5103:
            return c2 + "print-" + e2 + e2;
          case 5737:
          case 4201:
          case 3177:
          case 3433:
          case 1641:
          case 4457:
          case 2921:
          case 5572:
          case 6356:
          case 5844:
          case 3191:
          case 6645:
          case 3005:
          case 6391:
          case 5879:
          case 5623:
          case 6135:
          case 4599:
          case 4855:
          case 4215:
          case 6389:
          case 5109:
          case 5365:
          case 5621:
          case 3829:
            return c2 + e2 + e2;
          case 5349:
          case 4246:
          case 4810:
          case 6968:
          case 2756:
            return c2 + e2 + a3 + e2 + r + e2 + e2;
          case 6828:
          case 4268:
            return c2 + e2 + r + e2 + e2;
          case 6165:
            return c2 + e2 + r + "flex-" + e2 + e2;
          case 5187:
            return c2 + e2 + T(e2, /(\w+).+(:[^]+)/, c2 + "box-$1$2" + r + "flex-$1$2") + e2;
          case 5443:
            return c2 + e2 + r + "flex-item-" + T(e2, /flex-|-self/, "") + e2;
          case 4675:
            return c2 + e2 + r + "flex-line-pack" + T(e2, /align-content|flex-|-self/, "") + e2;
          case 5548:
            return c2 + e2 + r + T(e2, "shrink", "negative") + e2;
          case 5292:
            return c2 + e2 + r + T(e2, "basis", "preferred-size") + e2;
          case 6060:
            return c2 + "box-" + T(e2, "-grow", "") + c2 + e2 + r + T(e2, "grow", "positive") + e2;
          case 4554:
            return c2 + T(e2, /([^-])(transform)/g, "$1" + c2 + "$2") + e2;
          case 6187:
            return T(T(T(e2, /(zoom-|grab)/, c2 + "$1"), /(image-set)/, c2 + "$1"), e2, "") + e2;
          case 5495:
          case 3959:
            return T(e2, /(image-set\([^]*)/, c2 + "$1$`$1");
          case 4968:
            return T(T(e2, /(.+:)(flex-)?(.*)/, c2 + "box-pack:$3" + r + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + c2 + e2 + e2;
          case 4095:
          case 3583:
          case 4068:
          case 2532:
            return T(e2, /(.+)-inline(.+)/, c2 + "$1$2") + e2;
          case 8116:
          case 7059:
          case 5753:
          case 5535:
          case 5445:
          case 5701:
          case 4933:
          case 4677:
          case 5533:
          case 5789:
          case 5021:
          case 4765:
            if (M(e2) - 1 - t2 > 6)
              switch (O(e2, t2 + 1)) {
                case 109:
                  if (O(e2, t2 + 4) !== 45)
                    break;
                case 102:
                  return T(e2, /(.+:)(.+)-([^]+)/, "$1" + c2 + "$2-$3$1" + a3 + (O(e2, t2 + 3) == 108 ? "$3" : "$2-$3")) + e2;
                case 115:
                  return ~A(e2, "stretch") ? ce(T(e2, "stretch", "fill-available"), t2) + e2 : e2;
              }
            break;
          case 4949:
            if (O(e2, t2 + 1) !== 115)
              break;
          case 6444:
            switch (O(e2, M(e2) - 3 - (~A(e2, "!important") && 10))) {
              case 107:
                return T(e2, ":", ":" + c2) + e2;
              case 101:
                return T(e2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + c2 + (O(e2, 14) === 45 ? "inline-" : "") + "box$3$1" + c2 + "$2$3$1" + r + "$2box$3") + e2;
            }
            break;
          case 5936:
            switch (O(e2, t2 + 11)) {
              case 114:
                return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb") + e2;
              case 108:
                return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "tb-rl") + e2;
              case 45:
                return c2 + e2 + r + T(e2, /[svh]\w+-[tblr]{2}/, "lr") + e2;
            }
            return c2 + e2 + r + e2 + e2;
        }
        return e2;
      }
      function te(e2, r2) {
        var a4 = "";
        var c3 = S(e2);
        for (var t2 = 0; t2 < c3; t2++)
          a4 += r2(e2[t2], t2, e2, r2) || "";
        return a4;
      }
      function ne(e2, r2, a4, c3) {
        switch (e2.type) {
          case o:
          case s2:
            return e2.return = e2.return || e2.value;
          case t:
            return "";
          case b3:
            return e2.return = e2.value + "{" + te(e2.children, c3) + "}";
          case n:
            e2.value = e2.props.join(",");
        }
        return M(a4 = te(e2.children, c3)) ? e2.return = e2.value + "{" + a4 + "}" : "";
      }
      function se(e2) {
        var r2 = S(e2);
        return function(a4, c3, t2, n2) {
          var s3 = "";
          for (var i4 = 0; i4 < r2; i4++)
            s3 += e2[i4](a4, c3, t2, n2) || "";
          return s3;
        };
      }
      function ie(e2) {
        return function(r2) {
          if (!r2.root) {
            if (r2 = r2.return)
              e2(r2);
          }
        };
      }
      function ue(e2, t2, i4, u3) {
        if (e2.length > -1) {
          if (!e2.return)
            switch (e2.type) {
              case s2:
                e2.return = ce(e2.value, e2.length);
                break;
              case b3:
                return te([P(e2, { value: T(e2.value, "@", "@" + c2) })], u3);
              case n:
                if (e2.length)
                  return z(e2.props, function(t3) {
                    switch (y(t3, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return te([P(e2, { props: [T(t3, /:(read-\w+)/, ":" + a3 + "$1")] })], u3);
                      case "::placeholder":
                        return te([P(e2, { props: [T(t3, /:(plac\w+)/, ":" + c2 + "input-$1")] }), P(e2, { props: [T(t3, /:(plac\w+)/, ":" + a3 + "$1")] }), P(e2, { props: [T(t3, /:(plac\w+)/, r + "input-$1")] })], u3);
                    }
                    return "";
                  });
            }
        }
      }
      function oe(e2) {
        switch (e2.type) {
          case n:
            e2.props = e2.props.map(function(r2) {
              return z(Y(r2), function(r3, a4, c3) {
                switch (O(r3, 0)) {
                  case 12:
                    return C(r3, 1, M(r3));
                  case 0:
                  case 40:
                  case 43:
                  case 62:
                  case 126:
                    return r3;
                  case 58:
                    if (c3[++a4] === "global")
                      c3[a4] = "", c3[++a4] = "\f" + C(c3[a4], a4 = 1, -1);
                  case 32:
                    return a4 === 1 ? "" : r3;
                  default:
                    switch (a4) {
                      case 0:
                        e2 = r3;
                        return S(c3) > 1 ? "" : r3;
                      case (a4 = S(c3) - 1):
                      case 2:
                        return a4 === 2 ? r3 + e2 + e2 : r3 + e2;
                      default:
                        return r3;
                    }
                }
              });
            });
        }
      }
      e.CHARSET = f;
      e.COMMENT = t;
      e.COUNTER_STYLE = m;
      e.DECLARATION = s2;
      e.DOCUMENT = p2;
      e.FONT_FACE = d;
      e.FONT_FEATURE_VALUES = w;
      e.IMPORT = o;
      e.KEYFRAMES = b3;
      e.MEDIA = u2;
      e.MOZ = a3;
      e.MS = r;
      e.NAMESPACE = v;
      e.PAGE = i3;
      e.RULESET = n;
      e.SUPPORTS = h;
      e.VIEWPORT = l;
      e.WEBKIT = c2;
      e.abs = k;
      e.alloc = K;
      e.append = R;
      e.assign = g2;
      e.caret = I;
      e.char = j;
      e.charat = O;
      e.combine = z;
      e.comment = re;
      e.commenter = q2;
      e.compile = Q;
      e.copy = P;
      e.dealloc = V;
      e.declaration = ae;
      e.delimit = W;
      e.delimiter = Z;
      e.escaping = H;
      e.from = $;
      e.hash = x;
      e.identifier = J;
      e.indexof = A;
      e.match = y;
      e.middleware = se;
      e.namespace = oe;
      e.next = _;
      e.node = N;
      e.parse = X;
      e.peek = F;
      e.prefix = ce;
      e.prefixer = ue;
      e.prev = U;
      e.replace = T;
      e.ruleset = ee;
      e.rulesheet = ie;
      e.serialize = te;
      e.sizeof = S;
      e.slice = L;
      e.stringify = ne;
      e.strlen = M;
      e.substr = C;
      e.token = D;
      e.tokenize = Y;
      e.tokenizer = G;
      e.trim = E;
      e.whitespace = B;
      Object.defineProperty(e, "__esModule", { value: true });
    });
  }
});

// node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.prod.js
var require_weak_memoize_cjs_prod = __commonJS({
  "node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var weakMemoize = function(func) {
      var cache = /* @__PURE__ */ new WeakMap();
      return function(arg) {
        if (cache.has(arg))
          return cache.get(arg);
        var ret = func(arg);
        return cache.set(arg, ret), ret;
      };
    };
    exports.default = weakMemoize;
  }
});

// node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.dev.js
var require_weak_memoize_cjs_dev = __commonJS({
  "node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var weakMemoize = function weakMemoize2(func) {
      var cache = /* @__PURE__ */ new WeakMap();
      return function(arg) {
        if (cache.has(arg)) {
          return cache.get(arg);
        }
        var ret = func(arg);
        cache.set(arg, ret);
        return ret;
      };
    };
    exports.default = weakMemoize;
  }
});

// node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.js
var require_weak_memoize_cjs = __commonJS({
  "node_modules/@emotion/weak-memoize/dist/weak-memoize.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_weak_memoize_cjs_prod();
    } else {
      module2.exports = require_weak_memoize_cjs_dev();
    }
  }
});

// node_modules/@emotion/memoize/dist/emotion-memoize.cjs.prod.js
var require_emotion_memoize_cjs_prod = __commonJS({
  "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.prod.js"(exports) {
    "use strict";
    function memoize(fn) {
      var cache = /* @__PURE__ */ Object.create(null);
      return function(arg) {
        return cache[arg] === void 0 && (cache[arg] = fn(arg)), cache[arg];
      };
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    }), exports.default = memoize;
  }
});

// node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js
var require_emotion_memoize_cjs_dev = __commonJS({
  "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function memoize(fn) {
      var cache = /* @__PURE__ */ Object.create(null);
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    exports.default = memoize;
  }
});

// node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js
var require_emotion_memoize_cjs = __commonJS({
  "node_modules/@emotion/memoize/dist/emotion-memoize.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_memoize_cjs_prod();
    } else {
      module2.exports = require_emotion_memoize_cjs_dev();
    }
  }
});

// node_modules/@emotion/cache/dist/emotion-cache.cjs.prod.js
var require_emotion_cache_cjs_prod = __commonJS({
  "node_modules/@emotion/cache/dist/emotion-cache.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var sheet = require_emotion_sheet_cjs();
    var stylis = require_stylis();
    var weakMemoize = require_weak_memoize_cjs();
    var memoize = require_emotion_memoize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    var weakMemoize__default = _interopDefault(weakMemoize);
    var memoize__default = _interopDefault(memoize);
    var identifierWithPointTracking = function(begin, points, index6) {
      for (var previous = 0, character = 0; previous = character, character = stylis.peek(), previous === 38 && character === 12 && (points[index6] = 1), !stylis.token(character); )
        stylis.next();
      return stylis.slice(begin, stylis.position);
    };
    var toRules = function(parsed, points) {
      var index6 = -1, character = 44;
      do {
        switch (stylis.token(character)) {
          case 0:
            character === 38 && stylis.peek() === 12 && (points[index6] = 1), parsed[index6] += identifierWithPointTracking(stylis.position - 1, points, index6);
            break;
          case 2:
            parsed[index6] += stylis.delimit(character);
            break;
          case 4:
            if (character === 44) {
              parsed[++index6] = stylis.peek() === 58 ? "&\f" : "", points[index6] = parsed[index6].length;
              break;
            }
          default:
            parsed[index6] += stylis.from(character);
        }
      } while (character = stylis.next());
      return parsed;
    };
    var getRules = function(value12, points) {
      return stylis.dealloc(toRules(stylis.alloc(value12), points));
    };
    var fixedElements = /* @__PURE__ */ new WeakMap();
    var compat = function(element3) {
      if (element3.type === "rule" && element3.parent && !(element3.length < 1)) {
        for (var value12 = element3.value, parent2 = element3.parent, isImplicitRule = element3.column === parent2.column && element3.line === parent2.line; parent2.type !== "rule"; )
          if (!(parent2 = parent2.parent))
            return;
        if ((element3.props.length !== 1 || value12.charCodeAt(0) === 58 || fixedElements.get(parent2)) && !isImplicitRule) {
          fixedElements.set(element3, true);
          for (var points = [], rules2 = getRules(value12, points), parentRules = parent2.props, i3 = 0, k = 0; i3 < rules2.length; i3++)
            for (var j = 0; j < parentRules.length; j++, k++)
              element3.props[k] = points[i3] ? rules2[i3].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules2[i3];
        }
      }
    };
    var removeLabel = function(element3) {
      if (element3.type === "decl") {
        var value12 = element3.value;
        value12.charCodeAt(0) === 108 && value12.charCodeAt(2) === 98 && (element3.return = "", element3.value = "");
      }
    };
    var isBrowser2 = typeof document != "undefined";
    var getServerStylisCache = isBrowser2 ? void 0 : weakMemoize__default.default(function() {
      return memoize__default.default(function() {
        var cache = {};
        return function(name15) {
          return cache[name15];
        };
      });
    });
    var defaultStylisPlugins = [stylis.prefixer];
    var createCache = function(options2) {
      var key = options2.key;
      if (isBrowser2 && key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node) {
          node.getAttribute("data-emotion").indexOf(" ") !== -1 && (document.head.appendChild(node), node.setAttribute("data-s", ""));
        });
      }
      var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
      var container3, _insert, inserted = {}, nodesToHydrate = [];
      isBrowser2 && (container3 = options2.container || document.head, Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
        for (var attrib = node.getAttribute("data-emotion").split(" "), i3 = 1; i3 < attrib.length; i3++)
          inserted[attrib[i3]] = true;
        nodesToHydrate.push(node);
      }));
      var omnipresentPlugins = [compat, removeLabel];
      if (isBrowser2) {
        var currentSheet, finalizingPlugins = [stylis.stringify, stylis.rulesheet(function(rule) {
          currentSheet.insert(rule);
        })], serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        _insert = function(selector, serialized, sheet2, shouldCache) {
          var styles;
          currentSheet = sheet2, styles = selector ? selector + "{" + serialized.styles + "}" : serialized.styles, stylis.serialize(stylis.compile(styles), serializer), shouldCache && (cache.inserted[serialized.name] = true);
        };
      } else {
        var _finalizingPlugins = [stylis.stringify], _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins)), serverStylisCache = getServerStylisCache(stylisPlugins)(key), getRules2 = function(selector, serialized) {
          var styles, name15 = serialized.name;
          return serverStylisCache[name15] === void 0 && (serverStylisCache[name15] = (styles = selector ? selector + "{" + serialized.styles + "}" : serialized.styles, stylis.serialize(stylis.compile(styles), _serializer))), serverStylisCache[name15];
        };
        _insert = function(selector, serialized, sheet2, shouldCache) {
          var name15 = serialized.name, rules2 = getRules2(selector, serialized);
          return cache.compat === void 0 ? (shouldCache && (cache.inserted[name15] = true), rules2) : shouldCache ? void (cache.inserted[name15] = rules2) : rules2;
        };
      }
      var cache = {
        key,
        sheet: new sheet.StyleSheet({
          key,
          container: container3,
          nonce: options2.nonce,
          speedy: options2.speedy,
          prepend: options2.prepend,
          insertionPoint: options2.insertionPoint
        }),
        nonce: options2.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      return cache.sheet.hydrate(nodesToHydrate), cache;
    };
    exports.default = createCache;
  }
});

// node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js
var require_emotion_cache_cjs_dev = __commonJS({
  "node_modules/@emotion/cache/dist/emotion-cache.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sheet = require_emotion_sheet_cjs();
    var stylis = require_stylis();
    var weakMemoize = require_weak_memoize_cjs();
    var memoize = require_emotion_memoize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { "default": e };
    }
    var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
    var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
    var last4 = function last5(arr) {
      return arr.length ? arr[arr.length - 1] : null;
    };
    var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index6) {
      var previous = 0;
      var character = 0;
      while (true) {
        previous = character;
        character = stylis.peek();
        if (previous === 38 && character === 12) {
          points[index6] = 1;
        }
        if (stylis.token(character)) {
          break;
        }
        stylis.next();
      }
      return stylis.slice(begin, stylis.position);
    };
    var toRules = function toRules2(parsed, points) {
      var index6 = -1;
      var character = 44;
      do {
        switch (stylis.token(character)) {
          case 0:
            if (character === 38 && stylis.peek() === 12) {
              points[index6] = 1;
            }
            parsed[index6] += identifierWithPointTracking(stylis.position - 1, points, index6);
            break;
          case 2:
            parsed[index6] += stylis.delimit(character);
            break;
          case 4:
            if (character === 44) {
              parsed[++index6] = stylis.peek() === 58 ? "&\f" : "";
              points[index6] = parsed[index6].length;
              break;
            }
          default:
            parsed[index6] += stylis.from(character);
        }
      } while (character = stylis.next());
      return parsed;
    };
    var getRules = function getRules2(value12, points) {
      return stylis.dealloc(toRules(stylis.alloc(value12), points));
    };
    var fixedElements = /* @__PURE__ */ new WeakMap();
    var compat = function compat2(element3) {
      if (element3.type !== "rule" || !element3.parent || element3.length < 1) {
        return;
      }
      var value12 = element3.value, parent2 = element3.parent;
      var isImplicitRule = element3.column === parent2.column && element3.line === parent2.line;
      while (parent2.type !== "rule") {
        parent2 = parent2.parent;
        if (!parent2)
          return;
      }
      if (element3.props.length === 1 && value12.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
        return;
      }
      if (isImplicitRule) {
        return;
      }
      fixedElements.set(element3, true);
      var points = [];
      var rules2 = getRules(value12, points);
      var parentRules = parent2.props;
      for (var i3 = 0, k = 0; i3 < rules2.length; i3++) {
        for (var j = 0; j < parentRules.length; j++, k++) {
          element3.props[k] = points[i3] ? rules2[i3].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules2[i3];
        }
      }
    };
    var removeLabel = function removeLabel2(element3) {
      if (element3.type === "decl") {
        var value12 = element3.value;
        if (value12.charCodeAt(0) === 108 && value12.charCodeAt(2) === 98) {
          element3["return"] = "";
          element3.value = "";
        }
      }
    };
    var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
    var isIgnoringComment = function isIgnoringComment2(element3) {
      return !!element3 && element3.type === "comm" && element3.children.indexOf(ignoreFlag) > -1;
    };
    var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
      return function(element3, index6, children2) {
        if (element3.type !== "rule")
          return;
        var unsafePseudoClasses = element3.value.match(/(:first|:nth|:nth-last)-child/g);
        if (unsafePseudoClasses && cache.compat !== true) {
          var prevElement = index6 > 0 ? children2[index6 - 1] : null;
          if (prevElement && isIgnoringComment(last4(prevElement.children))) {
            return;
          }
          unsafePseudoClasses.forEach(function(unsafePseudoClass) {
            console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
          });
        }
      };
    };
    var isImportRule = function isImportRule2(element3) {
      return element3.type.charCodeAt(1) === 105 && element3.type.charCodeAt(0) === 64;
    };
    var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index6, children2) {
      for (var i3 = index6 - 1; i3 >= 0; i3--) {
        if (!isImportRule(children2[i3])) {
          return true;
        }
      }
      return false;
    };
    var nullifyElement = function nullifyElement2(element3) {
      element3.type = "";
      element3.value = "";
      element3["return"] = "";
      element3.children = "";
      element3.props = "";
    };
    var incorrectImportAlarm = function incorrectImportAlarm2(element3, index6, children2) {
      if (!isImportRule(element3)) {
        return;
      }
      if (element3.parent) {
        console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
        nullifyElement(element3);
      } else if (isPrependedWithRegularRules(index6, children2)) {
        console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
        nullifyElement(element3);
      }
    };
    var isBrowser2 = typeof document !== "undefined";
    var getServerStylisCache = isBrowser2 ? void 0 : weakMemoize__default["default"](function() {
      return memoize__default["default"](function() {
        var cache = {};
        return function(name15) {
          return cache[name15];
        };
      });
    });
    var defaultStylisPlugins = [stylis.prefixer];
    var createCache = function createCache2(options2) {
      var key = options2.key;
      if (process.env.NODE_ENV !== "production" && !key) {
        throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
      }
      if (isBrowser2 && key === "css") {
        var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
        Array.prototype.forEach.call(ssrStyles, function(node) {
          var dataEmotionAttribute = node.getAttribute("data-emotion");
          if (dataEmotionAttribute.indexOf(" ") === -1) {
            return;
          }
          document.head.appendChild(node);
          node.setAttribute("data-s", "");
        });
      }
      var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
      if (process.env.NODE_ENV !== "production") {
        if (/[^a-z-]/.test(key)) {
          throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
        }
      }
      var inserted = {};
      var container3;
      var nodesToHydrate = [];
      if (isBrowser2) {
        container3 = options2.container || document.head;
        Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node) {
          var attrib = node.getAttribute("data-emotion").split(" ");
          for (var i3 = 1; i3 < attrib.length; i3++) {
            inserted[attrib[i3]] = true;
          }
          nodesToHydrate.push(node);
        });
      }
      var _insert;
      var omnipresentPlugins = [compat, removeLabel];
      if (process.env.NODE_ENV !== "production") {
        omnipresentPlugins.push(createUnsafeSelectorsAlarm({
          get compat() {
            return cache.compat;
          }
        }), incorrectImportAlarm);
      }
      if (isBrowser2) {
        var currentSheet;
        var finalizingPlugins = [stylis.stringify, process.env.NODE_ENV !== "production" ? function(element3) {
          if (!element3.root) {
            if (element3["return"]) {
              currentSheet.insert(element3["return"]);
            } else if (element3.value && element3.type !== stylis.COMMENT) {
              currentSheet.insert(element3.value + "{}");
            }
          }
        } : stylis.rulesheet(function(rule) {
          currentSheet.insert(rule);
        })];
        var serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
        var stylis$1 = function stylis$12(styles) {
          return stylis.serialize(stylis.compile(styles), serializer);
        };
        _insert = function insert10(selector, serialized, sheet2, shouldCache) {
          currentSheet = sheet2;
          if (process.env.NODE_ENV !== "production" && serialized.map !== void 0) {
            currentSheet = {
              insert: function insert11(rule) {
                sheet2.insert(rule + serialized.map);
              }
            };
          }
          stylis$1(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          if (shouldCache) {
            cache.inserted[serialized.name] = true;
          }
        };
      } else {
        var _finalizingPlugins = [stylis.stringify];
        var _serializer = stylis.middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
        var _stylis = function _stylis2(styles) {
          return stylis.serialize(stylis.compile(styles), _serializer);
        };
        var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
        var getRules2 = function getRules3(selector, serialized) {
          var name15 = serialized.name;
          if (serverStylisCache[name15] === void 0) {
            serverStylisCache[name15] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
          }
          return serverStylisCache[name15];
        };
        _insert = function _insert2(selector, serialized, sheet2, shouldCache) {
          var name15 = serialized.name;
          var rules2 = getRules2(selector, serialized);
          if (cache.compat === void 0) {
            if (shouldCache) {
              cache.inserted[name15] = true;
            }
            if (process.env.NODE_ENV === "development" && serialized.map !== void 0) {
              return rules2 + serialized.map;
            }
            return rules2;
          } else {
            if (shouldCache) {
              cache.inserted[name15] = rules2;
            } else {
              return rules2;
            }
          }
        };
      }
      var cache = {
        key,
        sheet: new sheet.StyleSheet({
          key,
          container: container3,
          nonce: options2.nonce,
          speedy: options2.speedy,
          prepend: options2.prepend,
          insertionPoint: options2.insertionPoint
        }),
        nonce: options2.nonce,
        inserted,
        registered: {},
        insert: _insert
      };
      cache.sheet.hydrate(nodesToHydrate);
      return cache;
    };
    exports.default = createCache;
  }
});

// node_modules/@emotion/cache/dist/emotion-cache.cjs.js
var require_emotion_cache_cjs = __commonJS({
  "node_modules/@emotion/cache/dist/emotion-cache.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_cache_cjs_prod();
    } else {
      module2.exports = require_emotion_cache_cjs_dev();
    }
  }
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS({
  "node_modules/@babel/runtime/helpers/extends.js"(exports, module2) {
    function _extends() {
      module2.exports = _extends = Object.assign ? Object.assign.bind() : function(target5) {
        for (var i3 = 1; i3 < arguments.length; i3++) {
          var source3 = arguments[i3];
          for (var key in source3) {
            if (Object.prototype.hasOwnProperty.call(source3, key)) {
              target5[key] = source3[key];
            }
          }
        }
        return target5;
      }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
      return _extends.apply(this, arguments);
    }
    module2.exports = _extends, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
  }
});

// node_modules/react-is/cjs/react-is.production.min.js
var require_react_is_production_min = __commonJS({
  "node_modules/react-is/cjs/react-is.production.min.js"(exports) {
    "use strict";
    var b3 = typeof Symbol === "function" && Symbol.for;
    var c2 = b3 ? Symbol.for("react.element") : 60103;
    var d = b3 ? Symbol.for("react.portal") : 60106;
    var e = b3 ? Symbol.for("react.fragment") : 60107;
    var f = b3 ? Symbol.for("react.strict_mode") : 60108;
    var g2 = b3 ? Symbol.for("react.profiler") : 60114;
    var h = b3 ? Symbol.for("react.provider") : 60109;
    var k = b3 ? Symbol.for("react.context") : 60110;
    var l = b3 ? Symbol.for("react.async_mode") : 60111;
    var m = b3 ? Symbol.for("react.concurrent_mode") : 60111;
    var n = b3 ? Symbol.for("react.forward_ref") : 60112;
    var p2 = b3 ? Symbol.for("react.suspense") : 60113;
    var q2 = b3 ? Symbol.for("react.suspense_list") : 60120;
    var r = b3 ? Symbol.for("react.memo") : 60115;
    var t = b3 ? Symbol.for("react.lazy") : 60116;
    var v = b3 ? Symbol.for("react.block") : 60121;
    var w = b3 ? Symbol.for("react.fundamental") : 60117;
    var x = b3 ? Symbol.for("react.responder") : 60118;
    var y = b3 ? Symbol.for("react.scope") : 60119;
    function z(a3) {
      if (typeof a3 === "object" && a3 !== null) {
        var u2 = a3.$$typeof;
        switch (u2) {
          case c2:
            switch (a3 = a3.type, a3) {
              case l:
              case m:
              case e:
              case g2:
              case f:
              case p2:
                return a3;
              default:
                switch (a3 = a3 && a3.$$typeof, a3) {
                  case k:
                  case n:
                  case t:
                  case r:
                  case h:
                    return a3;
                  default:
                    return u2;
                }
            }
          case d:
            return u2;
        }
      }
    }
    function A(a3) {
      return z(a3) === m;
    }
    exports.AsyncMode = l;
    exports.ConcurrentMode = m;
    exports.ContextConsumer = k;
    exports.ContextProvider = h;
    exports.Element = c2;
    exports.ForwardRef = n;
    exports.Fragment = e;
    exports.Lazy = t;
    exports.Memo = r;
    exports.Portal = d;
    exports.Profiler = g2;
    exports.StrictMode = f;
    exports.Suspense = p2;
    exports.isAsyncMode = function(a3) {
      return A(a3) || z(a3) === l;
    };
    exports.isConcurrentMode = A;
    exports.isContextConsumer = function(a3) {
      return z(a3) === k;
    };
    exports.isContextProvider = function(a3) {
      return z(a3) === h;
    };
    exports.isElement = function(a3) {
      return typeof a3 === "object" && a3 !== null && a3.$$typeof === c2;
    };
    exports.isForwardRef = function(a3) {
      return z(a3) === n;
    };
    exports.isFragment = function(a3) {
      return z(a3) === e;
    };
    exports.isLazy = function(a3) {
      return z(a3) === t;
    };
    exports.isMemo = function(a3) {
      return z(a3) === r;
    };
    exports.isPortal = function(a3) {
      return z(a3) === d;
    };
    exports.isProfiler = function(a3) {
      return z(a3) === g2;
    };
    exports.isStrictMode = function(a3) {
      return z(a3) === f;
    };
    exports.isSuspense = function(a3) {
      return z(a3) === p2;
    };
    exports.isValidElementType = function(a3) {
      return typeof a3 === "string" || typeof a3 === "function" || a3 === e || a3 === m || a3 === g2 || a3 === f || a3 === p2 || a3 === q2 || typeof a3 === "object" && a3 !== null && (a3.$$typeof === t || a3.$$typeof === r || a3.$$typeof === h || a3.$$typeof === k || a3.$$typeof === n || a3.$$typeof === w || a3.$$typeof === x || a3.$$typeof === y || a3.$$typeof === v);
    };
    exports.typeOf = z;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf2(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf2(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf2(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf2(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf2(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf2(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf2(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf2(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf2(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf2(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf2(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf2(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf2(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf2;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_react_is_production_min();
    } else {
      module2.exports = require_react_is_development();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module2) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component25) {
      if (reactIs.isMemo(component25)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component25["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys4 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys4 = keys4.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i3 = 0; i3 < keys4.length; ++i3) {
          var key = keys4[i3];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module2.exports = hoistNonReactStatics;
  }
});

// node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.prod.js
var require_emotion_react_isolated_hnrs_cjs_prod = __commonJS({
  "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    var hoistNonReactStatics__default = _interopDefault(hoistNonReactStatics$1);
    var hoistNonReactStatics = function(targetComponent, sourceComponent) {
      return hoistNonReactStatics__default.default(targetComponent, sourceComponent);
    };
    exports.default = hoistNonReactStatics;
  }
});

// node_modules/@emotion/utils/dist/emotion-utils.cjs.prod.js
var require_emotion_utils_cjs_prod = __commonJS({
  "node_modules/@emotion/utils/dist/emotion-utils.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var isBrowser2 = typeof document != "undefined";
    function getRegisteredStyles(registered, registeredStyles, classNames) {
      var rawClassName = "";
      return classNames.split(" ").forEach(function(className2) {
        registered[className2] !== void 0 ? registeredStyles.push(registered[className2] + ";") : rawClassName += className2 + " ";
      }), rawClassName;
    }
    var registerStyles = function(cache, serialized, isStringTag) {
      var className2 = cache.key + "-" + serialized.name;
      (isStringTag === false || isBrowser2 === false && cache.compat !== void 0) && cache.registered[className2] === void 0 && (cache.registered[className2] = serialized.styles);
    };
    var insertStyles = function(cache, serialized, isStringTag) {
      registerStyles(cache, serialized, isStringTag);
      var className2 = cache.key + "-" + serialized.name;
      if (cache.inserted[serialized.name] === void 0) {
        var stylesForSSR = "", current = serialized;
        do {
          var maybeStyles = cache.insert(serialized === current ? "." + className2 : "", current, cache.sheet, true);
          isBrowser2 || maybeStyles === void 0 || (stylesForSSR += maybeStyles), current = current.next;
        } while (current !== void 0);
        if (!isBrowser2 && stylesForSSR.length !== 0)
          return stylesForSSR;
      }
    };
    exports.getRegisteredStyles = getRegisteredStyles, exports.insertStyles = insertStyles, exports.registerStyles = registerStyles;
  }
});

// node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js
var require_emotion_utils_cjs_dev = __commonJS({
  "node_modules/@emotion/utils/dist/emotion-utils.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var isBrowser2 = typeof document !== "undefined";
    function getRegisteredStyles(registered, registeredStyles, classNames) {
      var rawClassName = "";
      classNames.split(" ").forEach(function(className2) {
        if (registered[className2] !== void 0) {
          registeredStyles.push(registered[className2] + ";");
        } else {
          rawClassName += className2 + " ";
        }
      });
      return rawClassName;
    }
    var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
      var className2 = cache.key + "-" + serialized.name;
      if ((isStringTag === false || isBrowser2 === false && cache.compat !== void 0) && cache.registered[className2] === void 0) {
        cache.registered[className2] = serialized.styles;
      }
    };
    var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
      registerStyles(cache, serialized, isStringTag);
      var className2 = cache.key + "-" + serialized.name;
      if (cache.inserted[serialized.name] === void 0) {
        var stylesForSSR = "";
        var current = serialized;
        do {
          var maybeStyles = cache.insert(serialized === current ? "." + className2 : "", current, cache.sheet, true);
          if (!isBrowser2 && maybeStyles !== void 0) {
            stylesForSSR += maybeStyles;
          }
          current = current.next;
        } while (current !== void 0);
        if (!isBrowser2 && stylesForSSR.length !== 0) {
          return stylesForSSR;
        }
      }
    };
    exports.getRegisteredStyles = getRegisteredStyles;
    exports.insertStyles = insertStyles;
    exports.registerStyles = registerStyles;
  }
});

// node_modules/@emotion/utils/dist/emotion-utils.cjs.js
var require_emotion_utils_cjs = __commonJS({
  "node_modules/@emotion/utils/dist/emotion-utils.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_utils_cjs_prod();
    } else {
      module2.exports = require_emotion_utils_cjs_dev();
    }
  }
});

// node_modules/@emotion/hash/dist/hash.cjs.prod.js
var require_hash_cjs_prod = __commonJS({
  "node_modules/@emotion/hash/dist/hash.cjs.prod.js"(exports) {
    "use strict";
    function murmur2(str2) {
      for (var k, h = 0, i3 = 0, len = str2.length; len >= 4; ++i3, len -= 4)
        k = 1540483477 * (65535 & (k = 255 & str2.charCodeAt(i3) | (255 & str2.charCodeAt(++i3)) << 8 | (255 & str2.charCodeAt(++i3)) << 16 | (255 & str2.charCodeAt(++i3)) << 24)) + (59797 * (k >>> 16) << 16), h = 1540483477 * (65535 & (k ^= k >>> 24)) + (59797 * (k >>> 16) << 16) ^ 1540483477 * (65535 & h) + (59797 * (h >>> 16) << 16);
      switch (len) {
        case 3:
          h ^= (255 & str2.charCodeAt(i3 + 2)) << 16;
        case 2:
          h ^= (255 & str2.charCodeAt(i3 + 1)) << 8;
        case 1:
          h = 1540483477 * (65535 & (h ^= 255 & str2.charCodeAt(i3))) + (59797 * (h >>> 16) << 16);
      }
      return (((h = 1540483477 * (65535 & (h ^= h >>> 13)) + (59797 * (h >>> 16) << 16)) ^ h >>> 15) >>> 0).toString(36);
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    }), exports.default = murmur2;
  }
});

// node_modules/@emotion/hash/dist/hash.cjs.dev.js
var require_hash_cjs_dev = __commonJS({
  "node_modules/@emotion/hash/dist/hash.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function murmur2(str2) {
      var h = 0;
      var k, i3 = 0, len = str2.length;
      for (; len >= 4; ++i3, len -= 4) {
        k = str2.charCodeAt(i3) & 255 | (str2.charCodeAt(++i3) & 255) << 8 | (str2.charCodeAt(++i3) & 255) << 16 | (str2.charCodeAt(++i3) & 255) << 24;
        k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
        k ^= k >>> 24;
        h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      }
      switch (len) {
        case 3:
          h ^= (str2.charCodeAt(i3 + 2) & 255) << 16;
        case 2:
          h ^= (str2.charCodeAt(i3 + 1) & 255) << 8;
        case 1:
          h ^= str2.charCodeAt(i3) & 255;
          h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      }
      h ^= h >>> 13;
      h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
      return ((h ^ h >>> 15) >>> 0).toString(36);
    }
    exports.default = murmur2;
  }
});

// node_modules/@emotion/hash/dist/hash.cjs.js
var require_hash_cjs = __commonJS({
  "node_modules/@emotion/hash/dist/hash.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_hash_cjs_prod();
    } else {
      module2.exports = require_hash_cjs_dev();
    }
  }
});

// node_modules/@emotion/unitless/dist/unitless.cjs.prod.js
var require_unitless_cjs_prod = __commonJS({
  "node_modules/@emotion/unitless/dist/unitless.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    exports.default = unitlessKeys;
  }
});

// node_modules/@emotion/unitless/dist/unitless.cjs.dev.js
var require_unitless_cjs_dev = __commonJS({
  "node_modules/@emotion/unitless/dist/unitless.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var unitlessKeys = {
      animationIterationCount: 1,
      borderImageOutset: 1,
      borderImageSlice: 1,
      borderImageWidth: 1,
      boxFlex: 1,
      boxFlexGroup: 1,
      boxOrdinalGroup: 1,
      columnCount: 1,
      columns: 1,
      flex: 1,
      flexGrow: 1,
      flexPositive: 1,
      flexShrink: 1,
      flexNegative: 1,
      flexOrder: 1,
      gridRow: 1,
      gridRowEnd: 1,
      gridRowSpan: 1,
      gridRowStart: 1,
      gridColumn: 1,
      gridColumnEnd: 1,
      gridColumnSpan: 1,
      gridColumnStart: 1,
      msGridRow: 1,
      msGridRowSpan: 1,
      msGridColumn: 1,
      msGridColumnSpan: 1,
      fontWeight: 1,
      lineHeight: 1,
      opacity: 1,
      order: 1,
      orphans: 1,
      tabSize: 1,
      widows: 1,
      zIndex: 1,
      zoom: 1,
      WebkitLineClamp: 1,
      fillOpacity: 1,
      floodOpacity: 1,
      stopOpacity: 1,
      strokeDasharray: 1,
      strokeDashoffset: 1,
      strokeMiterlimit: 1,
      strokeOpacity: 1,
      strokeWidth: 1
    };
    exports.default = unitlessKeys;
  }
});

// node_modules/@emotion/unitless/dist/unitless.cjs.js
var require_unitless_cjs = __commonJS({
  "node_modules/@emotion/unitless/dist/unitless.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_unitless_cjs_prod();
    } else {
      module2.exports = require_unitless_cjs_dev();
    }
  }
});

// node_modules/@emotion/serialize/dist/emotion-serialize.cjs.prod.js
var require_emotion_serialize_cjs_prod = __commonJS({
  "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var hashString = require_hash_cjs();
    var unitless = require_unitless_cjs();
    var memoize = require_emotion_memoize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    var hashString__default = _interopDefault(hashString);
    var unitless__default = _interopDefault(unitless);
    var memoize__default = _interopDefault(memoize);
    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    var isCustomProperty = function(property) {
      return property.charCodeAt(1) === 45;
    };
    var isProcessableValue = function(value12) {
      return value12 != null && typeof value12 != "boolean";
    };
    var processStyleName = memoize__default.default(function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    var processStyleValue = function(key, value12) {
      switch (key) {
        case "animation":
        case "animationName":
          if (typeof value12 == "string")
            return value12.replace(animationRegex, function(match4, p1, p2) {
              return cursor = {
                name: p1,
                styles: p2,
                next: cursor
              }, p1;
            });
      }
      return unitless__default.default[key] === 1 || isCustomProperty(key) || typeof value12 != "number" || value12 === 0 ? value12 : value12 + "px";
    };
    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null)
        return "";
      if (interpolation.__emotion_styles !== void 0)
        return interpolation;
      switch (typeof interpolation) {
        case "boolean":
          return "";
        case "object":
          if (interpolation.anim === 1)
            return cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            }, interpolation.name;
          if (interpolation.styles !== void 0) {
            var next = interpolation.next;
            if (next !== void 0)
              for (; next !== void 0; )
                cursor = {
                  name: next.name,
                  styles: next.styles,
                  next: cursor
                }, next = next.next;
            var styles = interpolation.styles + ";";
            return styles;
          }
          return createStringFromObject(mergedProps, registered, interpolation);
        case "function":
          if (mergedProps !== void 0) {
            var previousCursor = cursor, result = interpolation(mergedProps);
            return cursor = previousCursor, handleInterpolation(mergedProps, registered, result);
          }
          break;
        case "string":
      }
      if (registered == null)
        return interpolation;
      var cached = registered[interpolation];
      return cached !== void 0 ? cached : interpolation;
    }
    function createStringFromObject(mergedProps, registered, obj) {
      var string = "";
      if (Array.isArray(obj))
        for (var i3 = 0; i3 < obj.length; i3++)
          string += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
      else
        for (var _key in obj) {
          var value12 = obj[_key];
          if (typeof value12 != "object")
            registered != null && registered[value12] !== void 0 ? string += _key + "{" + registered[value12] + "}" : isProcessableValue(value12) && (string += processStyleName(_key) + ":" + processStyleValue(_key, value12) + ";");
          else if (!Array.isArray(value12) || typeof value12[0] != "string" || registered != null && registered[value12[0]] !== void 0) {
            var interpolated = handleInterpolation(mergedProps, registered, value12);
            switch (_key) {
              case "animation":
              case "animationName":
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              default:
                string += _key + "{" + interpolated + "}";
            }
          } else
            for (var _i = 0; _i < value12.length; _i++)
              isProcessableValue(value12[_i]) && (string += processStyleName(_key) + ":" + processStyleValue(_key, value12[_i]) + ";");
        }
      return string;
    }
    var cursor;
    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    var serializeStyles = function(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] == "object" && args[0] !== null && args[0].styles !== void 0)
        return args[0];
      var stringMode = true, styles = "";
      cursor = void 0;
      var strings = args[0];
      strings == null || strings.raw === void 0 ? (stringMode = false, styles += handleInterpolation(mergedProps, registered, strings)) : styles += strings[0];
      for (var i3 = 1; i3 < args.length; i3++)
        styles += handleInterpolation(mergedProps, registered, args[i3]), stringMode && (styles += strings[i3]);
      labelPattern.lastIndex = 0;
      for (var match4, identifierName = ""; (match4 = labelPattern.exec(styles)) !== null; )
        identifierName += "-" + match4[1];
      var name15 = hashString__default.default(styles) + identifierName;
      return {
        name: name15,
        styles,
        next: cursor
      };
    };
    exports.serializeStyles = serializeStyles;
  }
});

// node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js
var require_emotion_serialize_cjs_dev = __commonJS({
  "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hashString = require_hash_cjs();
    var unitless = require_unitless_cjs();
    var memoize = require_emotion_memoize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { "default": e };
    }
    var hashString__default = /* @__PURE__ */ _interopDefault(hashString);
    var unitless__default = /* @__PURE__ */ _interopDefault(unitless);
    var memoize__default = /* @__PURE__ */ _interopDefault(memoize);
    var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
    var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
    var hyphenateRegex = /[A-Z]|^ms/g;
    var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
    var isCustomProperty = function isCustomProperty2(property) {
      return property.charCodeAt(1) === 45;
    };
    var isProcessableValue = function isProcessableValue2(value12) {
      return value12 != null && typeof value12 !== "boolean";
    };
    var processStyleName = /* @__PURE__ */ memoize__default["default"](function(styleName) {
      return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
    });
    var processStyleValue = function processStyleValue2(key, value12) {
      switch (key) {
        case "animation":
        case "animationName": {
          if (typeof value12 === "string") {
            return value12.replace(animationRegex, function(match4, p1, p2) {
              cursor = {
                name: p1,
                styles: p2,
                next: cursor
              };
              return p1;
            });
          }
        }
      }
      if (unitless__default["default"][key] !== 1 && !isCustomProperty(key) && typeof value12 === "number" && value12 !== 0) {
        return value12 + "px";
      }
      return value12;
    };
    if (process.env.NODE_ENV !== "production") {
      contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
      contentValues = ["normal", "none", "initial", "inherit", "unset"];
      oldProcessStyleValue = processStyleValue;
      msPattern = /^-ms-/;
      hyphenPattern = /-(.)/g;
      hyphenatedCache = {};
      processStyleValue = function processStyleValue2(key, value12) {
        if (key === "content") {
          if (typeof value12 !== "string" || contentValues.indexOf(value12) === -1 && !contentValuePattern.test(value12) && (value12.charAt(0) !== value12.charAt(value12.length - 1) || value12.charAt(0) !== '"' && value12.charAt(0) !== "'")) {
            throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value12 + "\"'`");
          }
        }
        var processed = oldProcessStyleValue(key, value12);
        if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
          hyphenatedCache[key] = true;
          console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str2, _char) {
            return _char.toUpperCase();
          }) + "?");
        }
        return processed;
      };
    }
    var contentValuePattern;
    var contentValues;
    var oldProcessStyleValue;
    var msPattern;
    var hyphenPattern;
    var hyphenatedCache;
    function handleInterpolation(mergedProps, registered, interpolation) {
      if (interpolation == null) {
        return "";
      }
      if (interpolation.__emotion_styles !== void 0) {
        if (process.env.NODE_ENV !== "production" && interpolation.toString() === "NO_COMPONENT_SELECTOR") {
          throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
        }
        return interpolation;
      }
      switch (typeof interpolation) {
        case "boolean": {
          return "";
        }
        case "object": {
          if (interpolation.anim === 1) {
            cursor = {
              name: interpolation.name,
              styles: interpolation.styles,
              next: cursor
            };
            return interpolation.name;
          }
          if (interpolation.styles !== void 0) {
            var next = interpolation.next;
            if (next !== void 0) {
              while (next !== void 0) {
                cursor = {
                  name: next.name,
                  styles: next.styles,
                  next: cursor
                };
                next = next.next;
              }
            }
            var styles = interpolation.styles + ";";
            if (process.env.NODE_ENV !== "production" && interpolation.map !== void 0) {
              styles += interpolation.map;
            }
            return styles;
          }
          return createStringFromObject(mergedProps, registered, interpolation);
        }
        case "function": {
          if (mergedProps !== void 0) {
            var previousCursor = cursor;
            var result = interpolation(mergedProps);
            cursor = previousCursor;
            return handleInterpolation(mergedProps, registered, result);
          } else if (process.env.NODE_ENV !== "production") {
            console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
          }
          break;
        }
        case "string":
          if (process.env.NODE_ENV !== "production") {
            var matched = [];
            var replaced = interpolation.replace(animationRegex, function(match4, p1, p2) {
              var fakeVarName = "animation" + matched.length;
              matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
              return "${" + fakeVarName + "}";
            });
            if (matched.length) {
              console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
            }
          }
          break;
      }
      if (registered == null) {
        return interpolation;
      }
      var cached = registered[interpolation];
      return cached !== void 0 ? cached : interpolation;
    }
    function createStringFromObject(mergedProps, registered, obj) {
      var string = "";
      if (Array.isArray(obj)) {
        for (var i3 = 0; i3 < obj.length; i3++) {
          string += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
        }
      } else {
        for (var _key in obj) {
          var value12 = obj[_key];
          if (typeof value12 !== "object") {
            if (registered != null && registered[value12] !== void 0) {
              string += _key + "{" + registered[value12] + "}";
            } else if (isProcessableValue(value12)) {
              string += processStyleName(_key) + ":" + processStyleValue(_key, value12) + ";";
            }
          } else {
            if (_key === "NO_COMPONENT_SELECTOR" && process.env.NODE_ENV !== "production") {
              throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
            }
            if (Array.isArray(value12) && typeof value12[0] === "string" && (registered == null || registered[value12[0]] === void 0)) {
              for (var _i = 0; _i < value12.length; _i++) {
                if (isProcessableValue(value12[_i])) {
                  string += processStyleName(_key) + ":" + processStyleValue(_key, value12[_i]) + ";";
                }
              }
            } else {
              var interpolated = handleInterpolation(mergedProps, registered, value12);
              switch (_key) {
                case "animation":
                case "animationName": {
                  string += processStyleName(_key) + ":" + interpolated + ";";
                  break;
                }
                default: {
                  if (process.env.NODE_ENV !== "production" && _key === "undefined") {
                    console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                  }
                  string += _key + "{" + interpolated + "}";
                }
              }
            }
          }
        }
      }
      return string;
    }
    var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
    var sourceMapPattern;
    if (process.env.NODE_ENV !== "production") {
      sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
    }
    var cursor;
    var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
      if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
        return args[0];
      }
      var stringMode = true;
      var styles = "";
      cursor = void 0;
      var strings = args[0];
      if (strings == null || strings.raw === void 0) {
        stringMode = false;
        styles += handleInterpolation(mergedProps, registered, strings);
      } else {
        if (process.env.NODE_ENV !== "production" && strings[0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles += strings[0];
      }
      for (var i3 = 1; i3 < args.length; i3++) {
        styles += handleInterpolation(mergedProps, registered, args[i3]);
        if (stringMode) {
          if (process.env.NODE_ENV !== "production" && strings[i3] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles += strings[i3];
        }
      }
      var sourceMap;
      if (process.env.NODE_ENV !== "production") {
        styles = styles.replace(sourceMapPattern, function(match5) {
          sourceMap = match5;
          return "";
        });
      }
      labelPattern.lastIndex = 0;
      var identifierName = "";
      var match4;
      while ((match4 = labelPattern.exec(styles)) !== null) {
        identifierName += "-" + match4[1];
      }
      var name15 = hashString__default["default"](styles) + identifierName;
      if (process.env.NODE_ENV !== "production") {
        return {
          name: name15,
          styles,
          map: sourceMap,
          next: cursor,
          toString: function toString9() {
            return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
          }
        };
      }
      return {
        name: name15,
        styles,
        next: cursor
      };
    };
    exports.serializeStyles = serializeStyles;
  }
});

// node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js
var require_emotion_serialize_cjs = __commonJS({
  "node_modules/@emotion/serialize/dist/emotion-serialize.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_serialize_cjs_prod();
    } else {
      module2.exports = require_emotion_serialize_cjs_dev();
    }
  }
});

// node_modules/@emotion/react/dist/emotion-element-b9b9378e.cjs.prod.js
var require_emotion_element_b9b9378e_cjs_prod = __commonJS({
  "node_modules/@emotion/react/dist/emotion-element-b9b9378e.cjs.prod.js"(exports) {
    "use strict";
    var React7 = require_react();
    var createCache = require_emotion_cache_cjs();
    var _extends = require_extends();
    var weakMemoize = require_weak_memoize_cjs();
    var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_prod();
    var utils = require_emotion_utils_cjs();
    var serialize = require_emotion_serialize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : {
        default: e
      };
    }
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      return e && Object.keys(e).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return e[k];
            }
          });
        }
      }), n.default = e, Object.freeze(n);
    }
    var React__namespace = _interopNamespace(React7);
    var createCache__default = _interopDefault(createCache);
    var _extends__default = _interopDefault(_extends);
    var weakMemoize__default = _interopDefault(weakMemoize);
    var isBrowser2 = typeof document != "undefined";
    var hasOwnProperty2 = {}.hasOwnProperty;
    var EmotionCacheContext = React7.createContext(typeof HTMLElement != "undefined" ? createCache__default.default({
      key: "css"
    }) : null);
    var CacheProvider = EmotionCacheContext.Provider;
    var __unsafe_useEmotionCache = function() {
      return React7.useContext(EmotionCacheContext);
    };
    exports.withEmotionCache = function(func) {
      return React7.forwardRef(function(props, ref) {
        var cache = React7.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    }, isBrowser2 || (exports.withEmotionCache = function(func) {
      return function(props) {
        var cache = React7.useContext(EmotionCacheContext);
        return cache === null ? (cache = createCache__default.default({
          key: "css"
        }), React7.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache))) : func(props, cache);
      };
    });
    var ThemeContext = React7.createContext({});
    var useTheme = function() {
      return React7.useContext(ThemeContext);
    };
    var getTheme = function(outerTheme, theme) {
      if (typeof theme == "function") {
        var mergedTheme = theme(outerTheme);
        return mergedTheme;
      }
      return _extends__default.default({}, outerTheme, theme);
    };
    var createCacheWithTheme = weakMemoize__default.default(function(outerTheme) {
      return weakMemoize__default.default(function(theme) {
        return getTheme(outerTheme, theme);
      });
    });
    var ThemeProvider = function(props) {
      var theme = React7.useContext(ThemeContext);
      return props.theme !== theme && (theme = createCacheWithTheme(theme)(props.theme)), React7.createElement(ThemeContext.Provider, {
        value: theme
      }, props.children);
    };
    function withTheme(Component) {
      var componentName = Component.displayName || Component.name || "Component", render = function(props, ref) {
        var theme = React7.useContext(ThemeContext);
        return React7.createElement(Component, _extends__default.default({
          theme,
          ref
        }, props));
      }, WithTheme = React7.forwardRef(render);
      return WithTheme.displayName = "WithTheme(" + componentName + ")", _isolatedHnrs_dist_emotionReact_isolatedHnrs.default(WithTheme, Component);
    }
    var isBrowser$1 = typeof document != "undefined";
    var useInsertionEffect = React__namespace.useInsertionEffect ? React__namespace.useInsertionEffect : function(create6) {
      create6();
    };
    function useInsertionEffectMaybe(create6) {
      if (!isBrowser$1)
        return create6();
      useInsertionEffect(create6);
    }
    var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
    var createEmotionProps = function(type, props) {
      var newProps = {};
      for (var key in props)
        hasOwnProperty2.call(props, key) && (newProps[key] = props[key]);
      return newProps[typePropName] = type, newProps;
    };
    var Insertion = function(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
      utils.registerStyles(cache, serialized, isStringTag);
      var rules2 = useInsertionEffectMaybe(function() {
        return utils.insertStyles(cache, serialized, isStringTag);
      });
      if (!isBrowser2 && rules2 !== void 0) {
        for (var _ref2, serializedNames = serialized.name, next = serialized.next; next !== void 0; )
          serializedNames += " " + next.name, next = next.next;
        return React7.createElement("style", ((_ref2 = {})["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
          __html: rules2
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    var Emotion = exports.withEmotionCache(function(props, cache, ref) {
      var cssProp = props.css;
      typeof cssProp == "string" && cache.registered[cssProp] !== void 0 && (cssProp = cache.registered[cssProp]);
      var WrappedComponent = props[typePropName], registeredStyles = [cssProp], className2 = "";
      typeof props.className == "string" ? className2 = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className) : props.className != null && (className2 = props.className + " ");
      var serialized = serialize.serializeStyles(registeredStyles, void 0, React7.useContext(ThemeContext));
      className2 += cache.key + "-" + serialized.name;
      var newProps = {};
      for (var key in props)
        hasOwnProperty2.call(props, key) && key !== "css" && key !== typePropName && (newProps[key] = props[key]);
      return newProps.ref = ref, newProps.className = className2, React7.createElement(React7.Fragment, null, React7.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof WrappedComponent == "string"
      }), React7.createElement(WrappedComponent, newProps));
    });
    exports.CacheProvider = CacheProvider, exports.Emotion = Emotion, exports.ThemeContext = ThemeContext, exports.ThemeProvider = ThemeProvider, exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache, exports.createEmotionProps = createEmotionProps, exports.hasOwnProperty = hasOwnProperty2, exports.isBrowser = isBrowser2, exports.useInsertionEffectMaybe = useInsertionEffectMaybe, exports.useTheme = useTheme, exports.withTheme = withTheme;
  }
});

// node_modules/@emotion/react/dist/emotion-react.cjs.prod.js
var require_emotion_react_cjs_prod = __commonJS({
  "node_modules/@emotion/react/dist/emotion-react.cjs.prod.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var React7 = require_react();
    require_emotion_cache_cjs();
    var emotionElement = require_emotion_element_b9b9378e_cjs_prod();
    require_extends(), require_weak_memoize_cjs(), require_hoist_non_react_statics_cjs(), require_emotion_react_isolated_hnrs_cjs_prod();
    var utils = require_emotion_utils_cjs();
    var serialize = require_emotion_serialize_cjs();
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      return e && Object.keys(e).forEach(function(k) {
        if (k !== "default") {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: function() {
              return e[k];
            }
          });
        }
      }), n.default = e, Object.freeze(n);
    }
    var React__namespace = _interopNamespace(React7);
    var jsx3 = function(type, props) {
      var args = arguments;
      if (props == null || !emotionElement.hasOwnProperty.call(props, "css"))
        return React7.createElement.apply(void 0, args);
      var argsLength = args.length, createElementArgArray = new Array(argsLength);
      createElementArgArray[0] = emotionElement.Emotion, createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
      for (var i3 = 2; i3 < argsLength; i3++)
        createElementArgArray[i3] = args[i3];
      return React7.createElement.apply(null, createElementArgArray);
    };
    var useInsertionEffect = React__namespace.useInsertionEffect ? React__namespace.useInsertionEffect : React7.useLayoutEffect;
    var Global2 = emotionElement.withEmotionCache(function(props, cache) {
      var styles = props.styles, serialized = serialize.serializeStyles([styles], void 0, React7.useContext(emotionElement.ThemeContext));
      if (!emotionElement.isBrowser) {
        for (var _ref, serializedNames = serialized.name, serializedStyles = serialized.styles, next = serialized.next; next !== void 0; )
          serializedNames += " " + next.name, serializedStyles += next.styles, next = next.next;
        var shouldCache = cache.compat === true, rules2 = cache.insert("", {
          name: serializedNames,
          styles: serializedStyles
        }, cache.sheet, shouldCache);
        return shouldCache ? null : React7.createElement("style", ((_ref = {})["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
          __html: rules2
        }, _ref.nonce = cache.sheet.nonce, _ref));
      }
      var sheetRef = React7.useRef();
      return useInsertionEffect(function() {
        var key = cache.key + "-global", sheet = new cache.sheet.constructor({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        }), rehydrating = false, node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        return cache.sheet.tags.length && (sheet.before = cache.sheet.tags[0]), node !== null && (rehydrating = true, node.setAttribute("data-emotion", key), sheet.hydrate([node])), sheetRef.current = [sheet, rehydrating], function() {
          sheet.flush();
        };
      }, [cache]), useInsertionEffect(function() {
        var sheetRefCurrent = sheetRef.current, sheet = sheetRefCurrent[0];
        if (sheetRefCurrent[1])
          sheetRefCurrent[1] = false;
        else {
          if (serialized.next !== void 0 && utils.insertStyles(cache, serialized.next, true), sheet.tags.length) {
            var element3 = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element3, sheet.flush();
          }
          cache.insert("", serialized, sheet, false);
        }
      }, [cache, serialized.name]), null;
    });
    function css33() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
        args[_key] = arguments[_key];
      return serialize.serializeStyles(args);
    }
    var keyframes5 = function() {
      var insertable = css33.apply(void 0, arguments), name15 = "animation-" + insertable.name;
      return {
        name: name15,
        styles: "@keyframes " + name15 + "{" + insertable.styles + "}",
        anim: 1,
        toString: function() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };
    var classnames = function classnames2(args) {
      for (var len = args.length, i3 = 0, cls = ""; i3 < len; i3++) {
        var arg = args[i3];
        if (arg != null) {
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object":
              if (Array.isArray(arg))
                toAdd = classnames2(arg);
              else
                for (var k in toAdd = "", arg)
                  arg[k] && k && (toAdd && (toAdd += " "), toAdd += k);
              break;
            default:
              toAdd = arg;
          }
          toAdd && (cls && (cls += " "), cls += toAdd);
        }
      }
      return cls;
    };
    function merge4(registered, css34, className2) {
      var registeredStyles = [], rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className2);
      return registeredStyles.length < 2 ? className2 : rawClassName + css34(registeredStyles);
    }
    var Insertion = function(_ref) {
      var _ref2, cache = _ref.cache, serializedArr = _ref.serializedArr, rules2 = emotionElement.useInsertionEffectMaybe(function() {
        for (var rules3 = "", i3 = 0; i3 < serializedArr.length; i3++) {
          var res = utils.insertStyles(cache, serializedArr[i3], false);
          emotionElement.isBrowser || res === void 0 || (rules3 += res);
        }
        if (!emotionElement.isBrowser)
          return rules3;
      });
      return emotionElement.isBrowser || rules2.length === 0 ? null : React7.createElement("style", ((_ref2 = {})["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
        return serialized.name;
      }).join(" "), _ref2.dangerouslySetInnerHTML = {
        __html: rules2
      }, _ref2.nonce = cache.sheet.nonce, _ref2));
    };
    var ClassNames = emotionElement.withEmotionCache(function(props, cache) {
      var serializedArr = [], css34 = function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)
          args[_key] = arguments[_key];
        var serialized = serialize.serializeStyles(args, cache.registered);
        return serializedArr.push(serialized), utils.registerStyles(cache, serialized, false), cache.key + "-" + serialized.name;
      }, content3 = {
        css: css34,
        cx: function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)
            args[_key2] = arguments[_key2];
          return merge4(cache.registered, css34, classnames(args));
        },
        theme: React7.useContext(emotionElement.ThemeContext)
      }, ele = props.children(content3);
      return true, React7.createElement(React7.Fragment, null, React7.createElement(Insertion, {
        cache,
        serializedArr
      }), ele);
    });
    exports.CacheProvider = emotionElement.CacheProvider, exports.ThemeContext = emotionElement.ThemeContext, exports.ThemeProvider = emotionElement.ThemeProvider, exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache, exports.useTheme = emotionElement.useTheme, Object.defineProperty(exports, "withEmotionCache", {
      enumerable: true,
      get: function() {
        return emotionElement.withEmotionCache;
      }
    }), exports.withTheme = emotionElement.withTheme, exports.ClassNames = ClassNames, exports.Global = Global2, exports.createElement = jsx3, exports.css = css33, exports.jsx = jsx3, exports.keyframes = keyframes5;
  }
});

// node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js
var require_emotion_react_isolated_hnrs_cjs_dev = __commonJS({
  "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var hoistNonReactStatics$1 = require_hoist_non_react_statics_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { "default": e };
    }
    var hoistNonReactStatics__default = /* @__PURE__ */ _interopDefault(hoistNonReactStatics$1);
    var hoistNonReactStatics = function(targetComponent, sourceComponent) {
      return hoistNonReactStatics__default["default"](targetComponent, sourceComponent);
    };
    exports.default = hoistNonReactStatics;
  }
});

// node_modules/@emotion/react/dist/emotion-element-e89f38a3.cjs.dev.js
var require_emotion_element_e89f38a3_cjs_dev = __commonJS({
  "node_modules/@emotion/react/dist/emotion-element-e89f38a3.cjs.dev.js"(exports) {
    "use strict";
    var React7 = require_react();
    var createCache = require_emotion_cache_cjs();
    var _extends = require_extends();
    var weakMemoize = require_weak_memoize_cjs();
    var _isolatedHnrs_dist_emotionReact_isolatedHnrs = require_emotion_react_isolated_hnrs_cjs_dev();
    var utils = require_emotion_utils_cjs();
    var serialize = require_emotion_serialize_cjs();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { "default": e };
    }
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: function() {
                return e[k];
              }
            });
          }
        });
      }
      n["default"] = e;
      return Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React7);
    var createCache__default = /* @__PURE__ */ _interopDefault(createCache);
    var _extends__default = /* @__PURE__ */ _interopDefault(_extends);
    var weakMemoize__default = /* @__PURE__ */ _interopDefault(weakMemoize);
    var isBrowser2 = typeof document !== "undefined";
    var hasOwnProperty2 = {}.hasOwnProperty;
    var EmotionCacheContext = /* @__PURE__ */ React7.createContext(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache__default["default"]({
      key: "css"
    }) : null);
    if (process.env.NODE_ENV !== "production") {
      EmotionCacheContext.displayName = "EmotionCacheContext";
    }
    var CacheProvider = EmotionCacheContext.Provider;
    var __unsafe_useEmotionCache = function useEmotionCache() {
      return React7.useContext(EmotionCacheContext);
    };
    exports.withEmotionCache = function withEmotionCache(func) {
      return /* @__PURE__ */ React7.forwardRef(function(props, ref) {
        var cache = React7.useContext(EmotionCacheContext);
        return func(props, cache, ref);
      });
    };
    if (!isBrowser2) {
      exports.withEmotionCache = function withEmotionCache(func) {
        return function(props) {
          var cache = React7.useContext(EmotionCacheContext);
          if (cache === null) {
            cache = createCache__default["default"]({
              key: "css"
            });
            return /* @__PURE__ */ React7.createElement(EmotionCacheContext.Provider, {
              value: cache
            }, func(props, cache));
          } else {
            return func(props, cache);
          }
        };
      };
    }
    var ThemeContext = /* @__PURE__ */ React7.createContext({});
    if (process.env.NODE_ENV !== "production") {
      ThemeContext.displayName = "EmotionThemeContext";
    }
    var useTheme = function useTheme2() {
      return React7.useContext(ThemeContext);
    };
    var getTheme = function getTheme2(outerTheme, theme) {
      if (typeof theme === "function") {
        var mergedTheme = theme(outerTheme);
        if (process.env.NODE_ENV !== "production" && (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme))) {
          throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
        }
        return mergedTheme;
      }
      if (process.env.NODE_ENV !== "production" && (theme == null || typeof theme !== "object" || Array.isArray(theme))) {
        throw new Error("[ThemeProvider] Please make your theme prop a plain object");
      }
      return _extends__default["default"]({}, outerTheme, theme);
    };
    var createCacheWithTheme = /* @__PURE__ */ weakMemoize__default["default"](function(outerTheme) {
      return weakMemoize__default["default"](function(theme) {
        return getTheme(outerTheme, theme);
      });
    });
    var ThemeProvider = function ThemeProvider2(props) {
      var theme = React7.useContext(ThemeContext);
      if (props.theme !== theme) {
        theme = createCacheWithTheme(theme)(props.theme);
      }
      return /* @__PURE__ */ React7.createElement(ThemeContext.Provider, {
        value: theme
      }, props.children);
    };
    function withTheme(Component) {
      var componentName = Component.displayName || Component.name || "Component";
      var render = function render2(props, ref) {
        var theme = React7.useContext(ThemeContext);
        return /* @__PURE__ */ React7.createElement(Component, _extends__default["default"]({
          theme,
          ref
        }, props));
      };
      var WithTheme = /* @__PURE__ */ React7.forwardRef(render);
      WithTheme.displayName = "WithTheme(" + componentName + ")";
      return _isolatedHnrs_dist_emotionReact_isolatedHnrs["default"](WithTheme, Component);
    }
    var getLastPart = function getLastPart2(functionName) {
      var parts = functionName.split(".");
      return parts[parts.length - 1];
    };
    var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line) {
      var match4 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line);
      if (match4)
        return getLastPart(match4[1]);
      match4 = /^([A-Za-z0-9$.]+)@/.exec(line);
      if (match4)
        return getLastPart(match4[1]);
      return void 0;
    };
    var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
    var sanitizeIdentifier = function sanitizeIdentifier2(identifier) {
      return identifier.replace(/\$/g, "-");
    };
    var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
      if (!stackTrace)
        return void 0;
      var lines = stackTrace.split("\n");
      for (var i3 = 0; i3 < lines.length; i3++) {
        var functionName = getFunctionNameFromStackTraceLine(lines[i3]);
        if (!functionName)
          continue;
        if (internalReactFunctionNames.has(functionName))
          break;
        if (/^[A-Z]/.test(functionName))
          return sanitizeIdentifier(functionName);
      }
      return void 0;
    };
    var isBrowser$1 = typeof document !== "undefined";
    var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : function useInsertionEffect2(create6) {
      create6();
    };
    function useInsertionEffectMaybe(create6) {
      if (!isBrowser$1) {
        return create6();
      }
      useInsertionEffect(create6);
    }
    var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
    var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
    var createEmotionProps = function createEmotionProps2(type, props) {
      if (process.env.NODE_ENV !== "production" && typeof props.css === "string" && props.css.indexOf(":") !== -1) {
        throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
      }
      var newProps = {};
      for (var key in props) {
        if (hasOwnProperty2.call(props, key)) {
          newProps[key] = props[key];
        }
      }
      newProps[typePropName] = type;
      if (process.env.NODE_ENV !== "production" && !!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
        var label6 = getLabelFromStackTrace(new Error().stack);
        if (label6)
          newProps[labelPropName] = label6;
      }
      return newProps;
    };
    var Insertion = function Insertion2(_ref) {
      var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
      utils.registerStyles(cache, serialized, isStringTag);
      var rules2 = useInsertionEffectMaybe(function() {
        return utils.insertStyles(cache, serialized, isStringTag);
      });
      if (!isBrowser2 && rules2 !== void 0) {
        var _ref2;
        var serializedNames = serialized.name;
        var next = serialized.next;
        while (next !== void 0) {
          serializedNames += " " + next.name;
          next = next.next;
        }
        return /* @__PURE__ */ React7.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
          __html: rules2
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    var Emotion = /* @__PURE__ */ exports.withEmotionCache(function(props, cache, ref) {
      var cssProp = props.css;
      if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
        cssProp = cache.registered[cssProp];
      }
      var WrappedComponent = props[typePropName];
      var registeredStyles = [cssProp];
      var className2 = "";
      if (typeof props.className === "string") {
        className2 = utils.getRegisteredStyles(cache.registered, registeredStyles, props.className);
      } else if (props.className != null) {
        className2 = props.className + " ";
      }
      var serialized = serialize.serializeStyles(registeredStyles, void 0, React7.useContext(ThemeContext));
      if (process.env.NODE_ENV !== "production" && serialized.name.indexOf("-") === -1) {
        var labelFromStack = props[labelPropName];
        if (labelFromStack) {
          serialized = serialize.serializeStyles([serialized, "label:" + labelFromStack + ";"]);
        }
      }
      className2 += cache.key + "-" + serialized.name;
      var newProps = {};
      for (var key in props) {
        if (hasOwnProperty2.call(props, key) && key !== "css" && key !== typePropName && (process.env.NODE_ENV === "production" || key !== labelPropName)) {
          newProps[key] = props[key];
        }
      }
      newProps.ref = ref;
      newProps.className = className2;
      return /* @__PURE__ */ React7.createElement(React7.Fragment, null, /* @__PURE__ */ React7.createElement(Insertion, {
        cache,
        serialized,
        isStringTag: typeof WrappedComponent === "string"
      }), /* @__PURE__ */ React7.createElement(WrappedComponent, newProps));
    });
    if (process.env.NODE_ENV !== "production") {
      Emotion.displayName = "EmotionCssPropInternal";
    }
    exports.CacheProvider = CacheProvider;
    exports.Emotion = Emotion;
    exports.ThemeContext = ThemeContext;
    exports.ThemeProvider = ThemeProvider;
    exports.__unsafe_useEmotionCache = __unsafe_useEmotionCache;
    exports.createEmotionProps = createEmotionProps;
    exports.hasOwnProperty = hasOwnProperty2;
    exports.isBrowser = isBrowser2;
    exports.useInsertionEffectMaybe = useInsertionEffectMaybe;
    exports.useTheme = useTheme;
    exports.withTheme = withTheme;
  }
});

// node_modules/@emotion/react/dist/emotion-react.cjs.dev.js
var require_emotion_react_cjs_dev = __commonJS({
  "node_modules/@emotion/react/dist/emotion-react.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var React7 = require_react();
    require_emotion_cache_cjs();
    var emotionElement = require_emotion_element_e89f38a3_cjs_dev();
    require_extends();
    require_weak_memoize_cjs();
    require_hoist_non_react_statics_cjs();
    require_emotion_react_isolated_hnrs_cjs_dev();
    var utils = require_emotion_utils_cjs();
    var serialize = require_emotion_serialize_cjs();
    function _interopNamespace(e) {
      if (e && e.__esModule)
        return e;
      var n = /* @__PURE__ */ Object.create(null);
      if (e) {
        Object.keys(e).forEach(function(k) {
          if (k !== "default") {
            var d = Object.getOwnPropertyDescriptor(e, k);
            Object.defineProperty(n, k, d.get ? d : {
              enumerable: true,
              get: function() {
                return e[k];
              }
            });
          }
        });
      }
      n["default"] = e;
      return Object.freeze(n);
    }
    var React__namespace = /* @__PURE__ */ _interopNamespace(React7);
    var pkg = {
      name: "@emotion/react",
      version: "11.9.0",
      main: "dist/emotion-react.cjs.js",
      module: "dist/emotion-react.esm.js",
      browser: {
        "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
        "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
      },
      types: "types/index.d.ts",
      files: [
        "src",
        "dist",
        "jsx-runtime",
        "jsx-dev-runtime",
        "_isolated-hnrs",
        "types/*.d.ts",
        "macro.js",
        "macro.d.ts",
        "macro.js.flow"
      ],
      sideEffects: false,
      author: "Emotion Contributors",
      license: "MIT",
      scripts: {
        "test:typescript": "dtslint types"
      },
      dependencies: {
        "@babel/runtime": "^7.13.10",
        "@emotion/babel-plugin": "^11.7.1",
        "@emotion/cache": "^11.7.1",
        "@emotion/serialize": "^1.0.3",
        "@emotion/utils": "^1.1.0",
        "@emotion/weak-memoize": "^0.2.5",
        "hoist-non-react-statics": "^3.3.1"
      },
      peerDependencies: {
        "@babel/core": "^7.0.0",
        react: ">=16.8.0"
      },
      peerDependenciesMeta: {
        "@babel/core": {
          optional: true
        },
        "@types/react": {
          optional: true
        }
      },
      devDependencies: {
        "@babel/core": "^7.13.10",
        "@emotion/css": "11.9.0",
        "@emotion/css-prettifier": "1.0.1",
        "@emotion/server": "11.4.0",
        "@emotion/styled": "11.8.1",
        "@types/react": "^16.9.11",
        dtslint: "^4.2.1",
        "html-tag-names": "^1.1.2",
        react: "16.14.0",
        "svg-tag-names": "^1.1.1",
        typescript: "^4.5.5"
      },
      repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
      publishConfig: {
        access: "public"
      },
      "umd:main": "dist/emotion-react.umd.min.js",
      preconstruct: {
        entrypoints: [
          "./index.js",
          "./jsx-runtime.js",
          "./jsx-dev-runtime.js",
          "./_isolated-hnrs.js"
        ],
        umdName: "emotionReact"
      }
    };
    var jsx3 = function jsx4(type, props) {
      var args = arguments;
      if (props == null || !emotionElement.hasOwnProperty.call(props, "css")) {
        return React7.createElement.apply(void 0, args);
      }
      var argsLength = args.length;
      var createElementArgArray = new Array(argsLength);
      createElementArgArray[0] = emotionElement.Emotion;
      createElementArgArray[1] = emotionElement.createEmotionProps(type, props);
      for (var i3 = 2; i3 < argsLength; i3++) {
        createElementArgArray[i3] = args[i3];
      }
      return React7.createElement.apply(null, createElementArgArray);
    };
    var useInsertionEffect = React__namespace["useInsertionEffect"] ? React__namespace["useInsertionEffect"] : React7.useLayoutEffect;
    var warnedAboutCssPropForGlobal = false;
    var Global2 = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
      if (process.env.NODE_ENV !== "production" && !warnedAboutCssPropForGlobal && (props.className || props.css)) {
        console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
        warnedAboutCssPropForGlobal = true;
      }
      var styles = props.styles;
      var serialized = serialize.serializeStyles([styles], void 0, React7.useContext(emotionElement.ThemeContext));
      if (!emotionElement.isBrowser) {
        var _ref;
        var serializedNames = serialized.name;
        var serializedStyles = serialized.styles;
        var next = serialized.next;
        while (next !== void 0) {
          serializedNames += " " + next.name;
          serializedStyles += next.styles;
          next = next.next;
        }
        var shouldCache = cache.compat === true;
        var rules2 = cache.insert("", {
          name: serializedNames,
          styles: serializedStyles
        }, cache.sheet, shouldCache);
        if (shouldCache) {
          return null;
        }
        return /* @__PURE__ */ React7.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
          __html: rules2
        }, _ref.nonce = cache.sheet.nonce, _ref));
      }
      var sheetRef = React7.useRef();
      useInsertionEffect(function() {
        var key = cache.key + "-global";
        var sheet = new cache.sheet.constructor({
          key,
          nonce: cache.sheet.nonce,
          container: cache.sheet.container,
          speedy: cache.sheet.isSpeedy
        });
        var rehydrating = false;
        var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
        if (cache.sheet.tags.length) {
          sheet.before = cache.sheet.tags[0];
        }
        if (node !== null) {
          rehydrating = true;
          node.setAttribute("data-emotion", key);
          sheet.hydrate([node]);
        }
        sheetRef.current = [sheet, rehydrating];
        return function() {
          sheet.flush();
        };
      }, [cache]);
      useInsertionEffect(function() {
        var sheetRefCurrent = sheetRef.current;
        var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
        if (rehydrating) {
          sheetRefCurrent[1] = false;
          return;
        }
        if (serialized.next !== void 0) {
          utils.insertStyles(cache, serialized.next, true);
        }
        if (sheet.tags.length) {
          var element3 = sheet.tags[sheet.tags.length - 1].nextElementSibling;
          sheet.before = element3;
          sheet.flush();
        }
        cache.insert("", serialized, sheet, false);
      }, [cache, serialized.name]);
      return null;
    });
    if (process.env.NODE_ENV !== "production") {
      Global2.displayName = "EmotionGlobal";
    }
    function css33() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return serialize.serializeStyles(args);
    }
    var keyframes5 = function keyframes6() {
      var insertable = css33.apply(void 0, arguments);
      var name15 = "animation-" + insertable.name;
      return {
        name: name15,
        styles: "@keyframes " + name15 + "{" + insertable.styles + "}",
        anim: 1,
        toString: function toString9() {
          return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
        }
      };
    };
    var classnames = function classnames2(args) {
      var len = args.length;
      var i3 = 0;
      var cls = "";
      for (; i3 < len; i3++) {
        var arg = args[i3];
        if (arg == null)
          continue;
        var toAdd = void 0;
        switch (typeof arg) {
          case "boolean":
            break;
          case "object": {
            if (Array.isArray(arg)) {
              toAdd = classnames2(arg);
            } else {
              if (process.env.NODE_ENV !== "production" && arg.styles !== void 0 && arg.name !== void 0) {
                console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
              }
              toAdd = "";
              for (var k in arg) {
                if (arg[k] && k) {
                  toAdd && (toAdd += " ");
                  toAdd += k;
                }
              }
            }
            break;
          }
          default: {
            toAdd = arg;
          }
        }
        if (toAdd) {
          cls && (cls += " ");
          cls += toAdd;
        }
      }
      return cls;
    };
    function merge4(registered, css34, className2) {
      var registeredStyles = [];
      var rawClassName = utils.getRegisteredStyles(registered, registeredStyles, className2);
      if (registeredStyles.length < 2) {
        return className2;
      }
      return rawClassName + css34(registeredStyles);
    }
    var Insertion = function Insertion2(_ref) {
      var cache = _ref.cache, serializedArr = _ref.serializedArr;
      var rules2 = emotionElement.useInsertionEffectMaybe(function() {
        var rules3 = "";
        for (var i3 = 0; i3 < serializedArr.length; i3++) {
          var res = utils.insertStyles(cache, serializedArr[i3], false);
          if (!emotionElement.isBrowser && res !== void 0) {
            rules3 += res;
          }
        }
        if (!emotionElement.isBrowser) {
          return rules3;
        }
      });
      if (!emotionElement.isBrowser && rules2.length !== 0) {
        var _ref2;
        return /* @__PURE__ */ React7.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedArr.map(function(serialized) {
          return serialized.name;
        }).join(" "), _ref2.dangerouslySetInnerHTML = {
          __html: rules2
        }, _ref2.nonce = cache.sheet.nonce, _ref2));
      }
      return null;
    };
    var ClassNames = /* @__PURE__ */ emotionElement.withEmotionCache(function(props, cache) {
      var hasRendered = false;
      var serializedArr = [];
      var css34 = function css35() {
        if (hasRendered && process.env.NODE_ENV !== "production") {
          throw new Error("css can only be used during render");
        }
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var serialized = serialize.serializeStyles(args, cache.registered);
        serializedArr.push(serialized);
        utils.registerStyles(cache, serialized, false);
        return cache.key + "-" + serialized.name;
      };
      var cx = function cx2() {
        if (hasRendered && process.env.NODE_ENV !== "production") {
          throw new Error("cx can only be used during render");
        }
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return merge4(cache.registered, css34, classnames(args));
      };
      var content3 = {
        css: css34,
        cx,
        theme: React7.useContext(emotionElement.ThemeContext)
      };
      var ele = props.children(content3);
      hasRendered = true;
      return /* @__PURE__ */ React7.createElement(React7.Fragment, null, /* @__PURE__ */ React7.createElement(Insertion, {
        cache,
        serializedArr
      }), ele);
    });
    if (process.env.NODE_ENV !== "production") {
      ClassNames.displayName = "EmotionClassNames";
    }
    if (process.env.NODE_ENV !== "production") {
      isBrowser2 = typeof document !== "undefined";
      isJest = typeof jest !== "undefined";
      if (isBrowser2 && !isJest) {
        globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : global;
        globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
        if (globalContext[globalKey]) {
          console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
        }
        globalContext[globalKey] = true;
      }
    }
    var isBrowser2;
    var isJest;
    var globalContext;
    var globalKey;
    exports.CacheProvider = emotionElement.CacheProvider;
    exports.ThemeContext = emotionElement.ThemeContext;
    exports.ThemeProvider = emotionElement.ThemeProvider;
    exports.__unsafe_useEmotionCache = emotionElement.__unsafe_useEmotionCache;
    exports.useTheme = emotionElement.useTheme;
    Object.defineProperty(exports, "withEmotionCache", {
      enumerable: true,
      get: function() {
        return emotionElement.withEmotionCache;
      }
    });
    exports.withTheme = emotionElement.withTheme;
    exports.ClassNames = ClassNames;
    exports.Global = Global2;
    exports.createElement = jsx3;
    exports.css = css33;
    exports.jsx = jsx3;
    exports.keyframes = keyframes5;
  }
});

// node_modules/@emotion/react/dist/emotion-react.cjs.js
var require_emotion_react_cjs = __commonJS({
  "node_modules/@emotion/react/dist/emotion-react.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_emotion_react_cjs_prod();
    } else {
      module2.exports = require_emotion_react_cjs_dev();
    }
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __classPrivateFieldIn2;
    var __createBinding2;
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory(createExporter(root, createExporter(module2.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id3, v) {
          return exports2[id3] = previous ? previous(id3, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b3) {
        d.__proto__ = b3;
      } || function(d, b3) {
        for (var p2 in b3)
          if (Object.prototype.hasOwnProperty.call(b3, p2))
            d[p2] = b3[p2];
      };
      __extends2 = function(d, b3) {
        if (typeof b3 !== "function" && b3 !== null)
          throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
        extendStatics(d, b3);
        function __() {
          this.constructor = d;
        }
        d.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
      };
      __assign2 = Object.assign || function(t) {
        for (var s2, i3 = 1, n = arguments.length; i3 < n; i3++) {
          s2 = arguments[i3];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t[p2] = s2[p2];
        }
        return t;
      };
      __rest2 = function(s2, e) {
        var t = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
            t[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) {
            if (e.indexOf(p2[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i3]))
              t[p2[i3]] = s2[p2[i3]];
          }
        return t;
      };
      __decorate2 = function(decorators, target5, key, desc) {
        var c2 = arguments.length, r = c2 < 3 ? target5 : desc === null ? desc = Object.getOwnPropertyDescriptor(target5, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target5, key, desc);
        else
          for (var i3 = decorators.length - 1; i3 >= 0; i3--)
            if (d = decorators[i3])
              r = (c2 < 3 ? d(r) : c2 > 3 ? d(target5, key, r) : d(target5, key)) || r;
        return c2 > 3 && r && Object.defineProperty(target5, key, r), r;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target5, key) {
          decorator(target5, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value12) {
          return value12 instanceof P ? value12 : new P(function(resolve2) {
            resolve2(value12);
          });
        }
        return new (P || (P = Promise))(function(resolve2, reject) {
          function fulfilled(value12) {
            try {
              step3(generator.next(value12));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value12) {
            try {
              step3(generator["throw"](value12));
            } catch (e) {
              reject(e);
            }
          }
          function step3(result) {
            result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step3((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body2) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n) {
          return function(v) {
            return step3([n, v]);
          };
        }
        function step3(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body2.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m, o) {
        for (var p2 in m)
          if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o, p2))
            __createBinding2(o, m, p2);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() {
            return m[k];
          } };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i3 = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i3 >= o.length)
                o = void 0;
              return { value: o && o[i3++], done: !o };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i3 = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i3.next()).done)
            ar.push(r.value);
        } catch (error3) {
          e = { error: error3 };
        } finally {
          try {
            if (r && !r.done && (m = i3["return"]))
              m.call(i3);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i3 = 0; i3 < arguments.length; i3++)
          ar = ar.concat(__read2(arguments[i3]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s2 = 0, i3 = 0, il = arguments.length; i3 < il; i3++)
          s2 += arguments[i3].length;
        for (var r = Array(s2), k = 0, i3 = 0; i3 < il; i3++)
          for (var a3 = arguments[i3], j = 0, jl = a3.length; j < jl; j++, k++)
            r[k] = a3[j];
        return r;
      };
      __spreadArray2 = function(to2, from3, pack) {
        if (pack || arguments.length === 2)
          for (var i3 = 0, l = from3.length, ar; i3 < l; i3++) {
            if (ar || !(i3 in from3)) {
              if (!ar)
                ar = Array.prototype.slice.call(from3, 0, i3);
              ar[i3] = from3[i3];
            }
          }
        return to2.concat(ar || Array.prototype.slice.call(from3));
      };
      __await2 = function(v) {
        return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i3, q2 = [];
        return i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3;
        function verb(n) {
          if (g2[n])
            i3[n] = function(v) {
              return new Promise(function(a3, b3) {
                q2.push([n, v, a3, b3]) > 1 || resume2(n, v);
              });
            };
        }
        function resume2(n, v) {
          try {
            step3(g2[n](v));
          } catch (e) {
            settle(q2[0][3], e);
          }
        }
        function step3(r) {
          r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q2[0][2], r);
        }
        function fulfill(value12) {
          resume2("next", value12);
        }
        function reject(value12) {
          resume2("throw", value12);
        }
        function settle(f, v) {
          if (f(v), q2.shift(), q2.length)
            resume2(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator2 = function(o) {
        var i3, p2;
        return i3 = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i3[Symbol.iterator] = function() {
          return this;
        }, i3;
        function verb(n, f) {
          i3[n] = o[n] ? function(v) {
            return (p2 = !p2) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues2 = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i3;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i3 = {}, verb("next"), verb("throw"), verb("return"), i3[Symbol.asyncIterator] = function() {
          return this;
        }, i3);
        function verb(n) {
          i3[n] = o[n] && function(v) {
            return new Promise(function(resolve2, reject) {
              v = o[n](v), settle(resolve2, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve2, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve2({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar2 = function(mod3) {
        if (mod3 && mod3.__esModule)
          return mod3;
        var result = {};
        if (mod3 != null) {
          for (var k in mod3)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod3, k))
              __createBinding2(result, mod3, k);
        }
        __setModuleDefault(result, mod3);
        return result;
      };
      __importDefault2 = function(mod3) {
        return mod3 && mod3.__esModule ? mod3 : { "default": mod3 };
      };
      __classPrivateFieldGet2 = function(receiver, state3, kind2, f) {
        if (kind2 === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state3 === "function" ? receiver !== state3 || !f : !state3.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state3.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state3, value12, kind2, f) {
        if (kind2 === "m")
          throw new TypeError("Private method is not writable");
        if (kind2 === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state3 === "function" ? receiver !== state3 || !f : !state3.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind2 === "a" ? f.call(receiver, value12) : f ? f.value = value12 : state3.set(receiver, value12), value12;
      };
      __classPrivateFieldIn2 = function(state3, receiver) {
        if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
          throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state3 === "function" ? receiver === state3 : state3.has(receiver);
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
    });
  }
});

// node_modules/hey-listen/dist/index.js
var require_dist = __commonJS({
  "node_modules/hey-listen/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.warning = function() {
    };
    exports.invariant = function() {
    };
    if (process.env.NODE_ENV !== "production") {
      exports.warning = function(check, message2) {
        if (!check && typeof console !== "undefined") {
          console.warn(message2);
        }
      };
      exports.invariant = function(check, message2) {
        if (!check) {
          throw new Error(message2);
        }
      };
    }
  }
});

// node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.prod.js
var require_memoize_cjs_prod = __commonJS({
  "node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.prod.js"(exports) {
    "use strict";
    function memoize(fn) {
      var cache = {};
      return function(arg) {
        return cache[arg] === void 0 && (cache[arg] = fn(arg)), cache[arg];
      };
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    }), exports.default = memoize;
  }
});

// node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.dev.js
var require_memoize_cjs_dev = __commonJS({
  "node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function memoize(fn) {
      var cache = {};
      return function(arg) {
        if (cache[arg] === void 0)
          cache[arg] = fn(arg);
        return cache[arg];
      };
    }
    exports.default = memoize;
  }
});

// node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.js
var require_memoize_cjs = __commonJS({
  "node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_memoize_cjs_prod();
    } else {
      module2.exports = require_memoize_cjs_dev();
    }
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.prod.js
var require_is_prop_valid_cjs_prod = __commonJS({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.prod.js"(exports) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex == "object" && "default" in ex ? ex.default : ex;
    }
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var memoize = _interopDefault(require_memoize_cjs());
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var index6 = memoize(function(prop2) {
      return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
    });
    exports.default = index6;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.dev.js
var require_is_prop_valid_cjs_dev = __commonJS({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.dev.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var memoize = _interopDefault(require_memoize_cjs());
    var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    var index6 = memoize(function(prop2) {
      return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
    });
    exports.default = index6;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.js
var require_is_prop_valid_cjs = __commonJS({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.cjs.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_is_prop_valid_cjs_prod();
    } else {
      module2.exports = require_is_prop_valid_cjs_dev();
    }
  }
});

// output/Main/foreign.js
var dirnameImpl = () => __dirname;

// output/Data.Bounded/foreign.js
var topInt = 2147483647;
var bottomInt = -2147483648;
var topChar = String.fromCharCode(65535);
var bottomChar = String.fromCharCode(0);
var topNumber = Number.POSITIVE_INFINITY;
var bottomNumber = Number.NEGATIVE_INFINITY;

// output/Data.Ord/foreign.js
var unsafeCompareImpl = function(lt) {
  return function(eq5) {
    return function(gt) {
      return function(x) {
        return function(y) {
          return x < y ? lt : x === y ? eq5 : gt;
        };
      };
    };
  };
};
var ordIntImpl = unsafeCompareImpl;
var ordNumberImpl = unsafeCompareImpl;
var ordCharImpl = unsafeCompareImpl;

// output/Data.Eq/foreign.js
var refEq = function(r1) {
  return function(r2) {
    return r1 === r2;
  };
};
var eqBooleanImpl = refEq;
var eqIntImpl = refEq;
var eqNumberImpl = refEq;
var eqCharImpl = refEq;

// output/Type.Proxy/index.js
var $$Proxy = /* @__PURE__ */ function() {
  function $$Proxy2() {
  }
  ;
  $$Proxy2.value = new $$Proxy2();
  return $$Proxy2;
}();

// output/Data.Symbol/index.js
var reflectSymbol = function(dict) {
  return dict.reflectSymbol;
};

// output/Record.Unsafe/foreign.js
var unsafeHas = function(label6) {
  return function(rec) {
    return {}.hasOwnProperty.call(rec, label6);
  };
};
var unsafeGet = function(label6) {
  return function(rec) {
    return rec[label6];
  };
};
var unsafeSet = function(label6) {
  return function(value12) {
    return function(rec) {
      var copy3 = {};
      for (var key in rec) {
        if ({}.hasOwnProperty.call(rec, key)) {
          copy3[key] = rec[key];
        }
      }
      copy3[label6] = value12;
      return copy3;
    };
  };
};
var unsafeDelete = function(label6) {
  return function(rec) {
    var copy3 = {};
    for (var key in rec) {
      if (key !== label6 && {}.hasOwnProperty.call(rec, key)) {
        copy3[key] = rec[key];
      }
    }
    return copy3;
  };
};

// output/Data.Eq/index.js
var eqRowNil = {
  eqRecord: function(v) {
    return function(v1) {
      return function(v2) {
        return true;
      };
    };
  }
};
var eqRecord = function(dict) {
  return dict.eqRecord;
};
var eqRec = function() {
  return function(dictEqRecord) {
    return {
      eq: eqRecord(dictEqRecord)($$Proxy.value)
    };
  };
};
var eqNumber = {
  eq: eqNumberImpl
};
var eqInt = {
  eq: eqIntImpl
};
var eqChar = {
  eq: eqCharImpl
};
var eqBoolean = {
  eq: eqBooleanImpl
};
var eq = function(dict) {
  return dict.eq;
};
var eq2 = /* @__PURE__ */ eq(eqBoolean);
var eqRowCons = function(dictEqRecord) {
  var eqRecord1 = eqRecord(dictEqRecord);
  return function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(dictEq) {
        var eq32 = eq(dictEq);
        return {
          eqRecord: function(v) {
            return function(ra) {
              return function(rb2) {
                var tail2 = eqRecord1($$Proxy.value)(ra)(rb2);
                var key = reflectSymbol2($$Proxy.value);
                var get3 = unsafeGet(key);
                return eq32(get3(ra))(get3(rb2)) && tail2;
              };
            };
          }
        };
      };
    };
  };
};
var notEq = function(dictEq) {
  var eq32 = eq(dictEq);
  return function(x) {
    return function(y) {
      return eq2(eq32(x)(y))(false);
    };
  };
};

// output/Data.Ordering/index.js
var LT = /* @__PURE__ */ function() {
  function LT2() {
  }
  ;
  LT2.value = new LT2();
  return LT2;
}();
var GT = /* @__PURE__ */ function() {
  function GT2() {
  }
  ;
  GT2.value = new GT2();
  return GT2;
}();
var EQ = /* @__PURE__ */ function() {
  function EQ2() {
  }
  ;
  EQ2.value = new EQ2();
  return EQ2;
}();

// output/Data.Ring/foreign.js
var intSub = function(x) {
  return function(y) {
    return x - y | 0;
  };
};
var numSub = function(n1) {
  return function(n2) {
    return n1 - n2;
  };
};

// output/Data.Semiring/foreign.js
var intAdd = function(x) {
  return function(y) {
    return x + y | 0;
  };
};
var intMul = function(x) {
  return function(y) {
    return x * y | 0;
  };
};
var numAdd = function(n1) {
  return function(n2) {
    return n1 + n2;
  };
};
var numMul = function(n1) {
  return function(n2) {
    return n1 * n2;
  };
};

// output/Data.Unit/foreign.js
var unit = void 0;

// output/Data.Semiring/index.js
var zeroRecord = function(dict) {
  return dict.zeroRecord;
};
var zero = function(dict) {
  return dict.zero;
};
var semiringRecordNil = {
  addRecord: function(v) {
    return function(v1) {
      return function(v2) {
        return {};
      };
    };
  },
  mulRecord: function(v) {
    return function(v1) {
      return function(v2) {
        return {};
      };
    };
  },
  oneRecord: function(v) {
    return function(v1) {
      return {};
    };
  },
  zeroRecord: function(v) {
    return function(v1) {
      return {};
    };
  }
};
var semiringNumber = {
  add: numAdd,
  zero: 0,
  mul: numMul,
  one: 1
};
var semiringInt = {
  add: intAdd,
  zero: 0,
  mul: intMul,
  one: 1
};
var oneRecord = function(dict) {
  return dict.oneRecord;
};
var one = function(dict) {
  return dict.one;
};
var mulRecord = function(dict) {
  return dict.mulRecord;
};
var mul = function(dict) {
  return dict.mul;
};
var addRecord = function(dict) {
  return dict.addRecord;
};
var semiringRecord = function() {
  return function(dictSemiringRecord) {
    return {
      add: addRecord(dictSemiringRecord)($$Proxy.value),
      mul: mulRecord(dictSemiringRecord)($$Proxy.value),
      one: oneRecord(dictSemiringRecord)($$Proxy.value)($$Proxy.value),
      zero: zeroRecord(dictSemiringRecord)($$Proxy.value)($$Proxy.value)
    };
  };
};
var add = function(dict) {
  return dict.add;
};
var semiringRecordCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function(dictSemiringRecord) {
      var addRecord1 = addRecord(dictSemiringRecord);
      var mulRecord1 = mulRecord(dictSemiringRecord);
      var oneRecord1 = oneRecord(dictSemiringRecord);
      var zeroRecord1 = zeroRecord(dictSemiringRecord);
      return function(dictSemiring) {
        var add1 = add(dictSemiring);
        var mul1 = mul(dictSemiring);
        var one1 = one(dictSemiring);
        var zero1 = zero(dictSemiring);
        return {
          addRecord: function(v) {
            return function(ra) {
              return function(rb2) {
                var tail2 = addRecord1($$Proxy.value)(ra)(rb2);
                var key = reflectSymbol2($$Proxy.value);
                var insert10 = unsafeSet(key);
                var get3 = unsafeGet(key);
                return insert10(add1(get3(ra))(get3(rb2)))(tail2);
              };
            };
          },
          mulRecord: function(v) {
            return function(ra) {
              return function(rb2) {
                var tail2 = mulRecord1($$Proxy.value)(ra)(rb2);
                var key = reflectSymbol2($$Proxy.value);
                var insert10 = unsafeSet(key);
                var get3 = unsafeGet(key);
                return insert10(mul1(get3(ra))(get3(rb2)))(tail2);
              };
            };
          },
          oneRecord: function(v) {
            return function(v1) {
              var tail2 = oneRecord1($$Proxy.value)($$Proxy.value);
              var key = reflectSymbol2($$Proxy.value);
              var insert10 = unsafeSet(key);
              return insert10(one1)(tail2);
            };
          },
          zeroRecord: function(v) {
            return function(v1) {
              var tail2 = zeroRecord1($$Proxy.value)($$Proxy.value);
              var key = reflectSymbol2($$Proxy.value);
              var insert10 = unsafeSet(key);
              return insert10(zero1)(tail2);
            };
          }
        };
      };
    };
  };
};

// output/Data.Ring/index.js
var sub = function(dict) {
  return dict.sub;
};
var ringNumber = {
  sub: numSub,
  Semiring0: function() {
    return semiringNumber;
  }
};
var ringInt = {
  sub: intSub,
  Semiring0: function() {
    return semiringInt;
  }
};
var negate = function(dictRing) {
  var sub1 = sub(dictRing);
  var zero5 = zero(dictRing.Semiring0());
  return function(a3) {
    return sub1(zero5)(a3);
  };
};

// output/Data.Ord/index.js
var ordNumber = /* @__PURE__ */ function() {
  return {
    compare: ordNumberImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqNumber;
    }
  };
}();
var ordInt = /* @__PURE__ */ function() {
  return {
    compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqInt;
    }
  };
}();
var ordChar = /* @__PURE__ */ function() {
  return {
    compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
    Eq0: function() {
      return eqChar;
    }
  };
}();
var compare = function(dict) {
  return dict.compare;
};
var greaterThanOrEq = function(dictOrd) {
  var compare32 = compare(dictOrd);
  return function(a1) {
    return function(a22) {
      var v = compare32(a1)(a22);
      if (v instanceof LT) {
        return false;
      }
      ;
      return true;
    };
  };
};
var lessThan = function(dictOrd) {
  var compare32 = compare(dictOrd);
  return function(a1) {
    return function(a22) {
      var v = compare32(a1)(a22);
      if (v instanceof LT) {
        return true;
      }
      ;
      return false;
    };
  };
};
var lessThanOrEq = function(dictOrd) {
  var compare32 = compare(dictOrd);
  return function(a1) {
    return function(a22) {
      var v = compare32(a1)(a22);
      if (v instanceof GT) {
        return false;
      }
      ;
      return true;
    };
  };
};
var max = function(dictOrd) {
  var compare32 = compare(dictOrd);
  return function(x) {
    return function(y) {
      var v = compare32(x)(y);
      if (v instanceof LT) {
        return y;
      }
      ;
      if (v instanceof EQ) {
        return x;
      }
      ;
      if (v instanceof GT) {
        return x;
      }
      ;
      throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v.constructor.name]);
    };
  };
};
var min = function(dictOrd) {
  var compare32 = compare(dictOrd);
  return function(x) {
    return function(y) {
      var v = compare32(x)(y);
      if (v instanceof LT) {
        return x;
      }
      ;
      if (v instanceof EQ) {
        return x;
      }
      ;
      if (v instanceof GT) {
        return y;
      }
      ;
      throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [v.constructor.name]);
    };
  };
};
var clamp = function(dictOrd) {
  var min1 = min(dictOrd);
  var max1 = max(dictOrd);
  return function(low2) {
    return function(hi) {
      return function(x) {
        return min1(hi)(max1(low2)(x));
      };
    };
  };
};
var abs = function(dictOrd) {
  var greaterThanOrEq1 = greaterThanOrEq(dictOrd);
  return function(dictRing) {
    var zero5 = zero(dictRing.Semiring0());
    var negate1 = negate(dictRing);
    return function(x) {
      var $99 = greaterThanOrEq1(x)(zero5);
      if ($99) {
        return x;
      }
      ;
      return negate1(x);
    };
  };
};

// output/Data.Bounded/index.js
var top = function(dict) {
  return dict.top;
};
var boundedInt = {
  top: topInt,
  bottom: bottomInt,
  Ord0: function() {
    return ordInt;
  }
};
var boundedChar = {
  top: topChar,
  bottom: bottomChar,
  Ord0: function() {
    return ordChar;
  }
};
var bottom = function(dict) {
  return dict.bottom;
};

// output/Data.Show/foreign.js
var showIntImpl = function(n) {
  return n.toString();
};
var showNumberImpl = function(n) {
  var str2 = n.toString();
  return isNaN(str2 + ".0") ? str2 : str2 + ".0";
};
var showStringImpl = function(s2) {
  var l = s2.length;
  return '"' + s2.replace(/[\0-\x1F\x7F"\\]/g, function(c2, i3) {
    switch (c2) {
      case '"':
      case "\\":
        return "\\" + c2;
      case "\x07":
        return "\\a";
      case "\b":
        return "\\b";
      case "\f":
        return "\\f";
      case "\n":
        return "\\n";
      case "\r":
        return "\\r";
      case "	":
        return "\\t";
      case "\v":
        return "\\v";
    }
    var k = i3 + 1;
    var empty5 = k < l && s2[k] >= "0" && s2[k] <= "9" ? "\\&" : "";
    return "\\" + c2.charCodeAt(0).toString(10) + empty5;
  }) + '"';
};

// output/Data.Show/index.js
var showString = {
  show: showStringImpl
};
var showNumber = {
  show: showNumberImpl
};
var showInt = {
  show: showIntImpl
};
var show = function(dict) {
  return dict.show;
};

// output/Data.Generic.Rep/index.js
var Inl = /* @__PURE__ */ function() {
  function Inl2(value0) {
    this.value0 = value0;
  }
  ;
  Inl2.create = function(value0) {
    return new Inl2(value0);
  };
  return Inl2;
}();
var Inr = /* @__PURE__ */ function() {
  function Inr2(value0) {
    this.value0 = value0;
  }
  ;
  Inr2.create = function(value0) {
    return new Inr2(value0);
  };
  return Inr2;
}();
var NoArguments = /* @__PURE__ */ function() {
  function NoArguments2() {
  }
  ;
  NoArguments2.value = new NoArguments2();
  return NoArguments2;
}();
var Constructor = function(x) {
  return x;
};
var Argument = function(x) {
  return x;
};
var to = function(dict) {
  return dict.to;
};
var from = function(dict) {
  return dict.from;
};

// output/Data.Bounded.Generic/index.js
var genericTopNoArguments = /* @__PURE__ */ function() {
  return {
    "genericTop'": NoArguments.value
  };
}();
var genericTop$prime = function(dict) {
  return dict["genericTop'"];
};
var genericTopConstructor = function(dictGenericTop) {
  return {
    "genericTop'": genericTop$prime(dictGenericTop)
  };
};
var genericTopSum = function(dictGenericTop) {
  return {
    "genericTop'": new Inr(genericTop$prime(dictGenericTop))
  };
};
var genericTop = function(dictGeneric) {
  var to2 = to(dictGeneric);
  return function(dictGenericTop) {
    return to2(genericTop$prime(dictGenericTop));
  };
};
var genericBottomNoArguments = /* @__PURE__ */ function() {
  return {
    "genericBottom'": NoArguments.value
  };
}();
var genericBottom$prime = function(dict) {
  return dict["genericBottom'"];
};
var genericBottomConstructor = function(dictGenericBottom) {
  return {
    "genericBottom'": genericBottom$prime(dictGenericBottom)
  };
};
var genericBottomSum = function(dictGenericBottom) {
  return {
    "genericBottom'": new Inl(genericBottom$prime(dictGenericBottom))
  };
};
var genericBottom = function(dictGeneric) {
  var to2 = to(dictGeneric);
  return function(dictGenericBottom) {
    return to2(genericBottom$prime(dictGenericBottom));
  };
};

// output/Control.Apply/foreign.js
var arrayApply = function(fs) {
  return function(xs) {
    var l = fs.length;
    var k = xs.length;
    var result = new Array(l * k);
    var n = 0;
    for (var i3 = 0; i3 < l; i3++) {
      var f = fs[i3];
      for (var j = 0; j < k; j++) {
        result[n++] = f(xs[j]);
      }
    }
    return result;
  };
};

// output/Control.Semigroupoid/index.js
var semigroupoidFn = {
  compose: function(f) {
    return function(g2) {
      return function(x) {
        return f(g2(x));
      };
    };
  }
};
var compose = function(dict) {
  return dict.compose;
};

// output/Control.Category/index.js
var identity = function(dict) {
  return dict.identity;
};
var categoryFn = {
  identity: function(x) {
    return x;
  },
  Semigroupoid0: function() {
    return semigroupoidFn;
  }
};

// output/Data.Boolean/index.js
var otherwise = true;

// output/Data.Function/index.js
var flip = function(f) {
  return function(b3) {
    return function(a3) {
      return f(a3)(b3);
    };
  };
};
var $$const = function(a3) {
  return function(v) {
    return a3;
  };
};
var applyFlipped = function(x) {
  return function(f) {
    return f(x);
  };
};

// output/Data.Functor/foreign.js
var arrayMap = function(f) {
  return function(arr) {
    var l = arr.length;
    var result = new Array(l);
    for (var i3 = 0; i3 < l; i3++) {
      result[i3] = f(arr[i3]);
    }
    return result;
  };
};

// output/Data.Functor/index.js
var map = function(dict) {
  return dict.map;
};
var mapFlipped = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return function(fa) {
    return function(f) {
      return map110(f)(fa);
    };
  };
};
var $$void = function(dictFunctor) {
  return map(dictFunctor)($$const(unit));
};
var voidLeft = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return function(f) {
    return function(x) {
      return map110($$const(x))(f);
    };
  };
};
var voidRight = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return function(x) {
    return map110($$const(x));
  };
};
var functorArray = {
  map: arrayMap
};
var flap = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return function(ff2) {
    return function(x) {
      return map110(function(f) {
        return f(x);
      })(ff2);
    };
  };
};

// output/Control.Apply/index.js
var identity2 = /* @__PURE__ */ identity(categoryFn);
var applyArray = {
  apply: arrayApply,
  Functor0: function() {
    return functorArray;
  }
};
var apply = function(dict) {
  return dict.apply;
};
var applySecond = function(dictApply) {
  var apply1 = apply(dictApply);
  var map35 = map(dictApply.Functor0());
  return function(a3) {
    return function(b3) {
      return apply1(map35($$const(identity2))(a3))(b3);
    };
  };
};
var lift2 = function(dictApply) {
  var apply1 = apply(dictApply);
  var map35 = map(dictApply.Functor0());
  return function(f) {
    return function(a3) {
      return function(b3) {
        return apply1(map35(f)(a3))(b3);
      };
    };
  };
};

// output/Data.Enum/foreign.js
function toCharCode(c2) {
  return c2.charCodeAt(0);
}
function fromCharCode(c2) {
  return String.fromCharCode(c2);
}

// output/Data.Semigroup/foreign.js
var concatString = function(s1) {
  return function(s2) {
    return s1 + s2;
  };
};
var concatArray = function(xs) {
  return function(ys) {
    if (xs.length === 0)
      return ys;
    if (ys.length === 0)
      return xs;
    return xs.concat(ys);
  };
};

// output/Data.Void/index.js
var absurd = function(a3) {
  var spin = function($copy_v) {
    var $tco_result;
    function $tco_loop(v) {
      $copy_v = v;
      return;
    }
    ;
    while (true) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  return spin(a3);
};

// output/Data.Semigroup/index.js
var semigroupUnit = {
  append: function(v) {
    return function(v1) {
      return unit;
    };
  }
};
var semigroupString = {
  append: concatString
};
var semigroupArray = {
  append: concatArray
};
var append = function(dict) {
  return dict.append;
};
var semigroupFn = function(dictSemigroup) {
  var append15 = append(dictSemigroup);
  return {
    append: function(f) {
      return function(g2) {
        return function(x) {
          return append15(f(x))(g2(x));
        };
      };
    }
  };
};

// output/Control.Alt/index.js
var alt = function(dict) {
  return dict.alt;
};

// output/Control.Applicative/index.js
var pure = function(dict) {
  return dict.pure;
};
var unless = function(dictApplicative) {
  var pure112 = pure(dictApplicative);
  return function(v) {
    return function(v1) {
      if (!v) {
        return v1;
      }
      ;
      if (v) {
        return pure112(unit);
      }
      ;
      throw new Error("Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};
var when = function(dictApplicative) {
  var pure112 = pure(dictApplicative);
  return function(v) {
    return function(v1) {
      if (v) {
        return v1;
      }
      ;
      if (!v) {
        return pure112(unit);
      }
      ;
      throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};
var liftA1 = function(dictApplicative) {
  var apply8 = apply(dictApplicative.Apply0());
  var pure112 = pure(dictApplicative);
  return function(f) {
    return function(a3) {
      return apply8(pure112(f))(a3);
    };
  };
};
var applicativeArray = {
  pure: function(x) {
    return [x];
  },
  Apply0: function() {
    return applyArray;
  }
};

// output/Control.Plus/index.js
var empty = function(dict) {
  return dict.empty;
};

// output/Control.Alternative/index.js
var guard = function(dictAlternative) {
  var pure33 = pure(dictAlternative.Applicative0());
  var empty5 = empty(dictAlternative.Plus1());
  return function(v) {
    if (v) {
      return pure33(unit);
    }
    ;
    if (!v) {
      return empty5;
    }
    ;
    throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v.constructor.name]);
  };
};

// output/Control.Bind/foreign.js
var arrayBind = function(arr) {
  return function(f) {
    var result = [];
    for (var i3 = 0, l = arr.length; i3 < l; i3++) {
      Array.prototype.push.apply(result, f(arr[i3]));
    }
    return result;
  };
};

// output/Control.Bind/index.js
var discard = function(dict) {
  return dict.discard;
};
var bindArray = {
  bind: arrayBind,
  Apply0: function() {
    return applyArray;
  }
};
var bind = function(dict) {
  return dict.bind;
};
var bindFlipped = function(dictBind) {
  return flip(bind(dictBind));
};
var composeKleisliFlipped = function(dictBind) {
  var bindFlipped1 = bindFlipped(dictBind);
  return function(f) {
    return function(g2) {
      return function(a3) {
        return bindFlipped1(f)(g2(a3));
      };
    };
  };
};
var composeKleisli = function(dictBind) {
  var bind112 = bind(dictBind);
  return function(f) {
    return function(g2) {
      return function(a3) {
        return bind112(f(a3))(g2);
      };
    };
  };
};
var discardUnit = {
  discard: function(dictBind) {
    return bind(dictBind);
  }
};

// output/Data.Maybe/index.js
var identity3 = /* @__PURE__ */ identity(categoryFn);
var Nothing = /* @__PURE__ */ function() {
  function Nothing2() {
  }
  ;
  Nothing2.value = new Nothing2();
  return Nothing2;
}();
var Just = /* @__PURE__ */ function() {
  function Just2(value0) {
    this.value0 = value0;
  }
  ;
  Just2.create = function(value0) {
    return new Just2(value0);
  };
  return Just2;
}();
var maybe = function(v) {
  return function(v1) {
    return function(v2) {
      if (v2 instanceof Nothing) {
        return v;
      }
      ;
      if (v2 instanceof Just) {
        return v1(v2.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};
var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
var functorMaybe = {
  map: function(v) {
    return function(v1) {
      if (v1 instanceof Just) {
        return new Just(v(v1.value0));
      }
      ;
      return Nothing.value;
    };
  }
};
var map2 = /* @__PURE__ */ map(functorMaybe);
var fromMaybe = function(a3) {
  return maybe(a3)(identity3);
};
var fromJust = function() {
  return function(v) {
    if (v instanceof Just) {
      return v.value0;
    }
    ;
    throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
  };
};
var applyMaybe = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Just) {
        return map2(v.value0)(v1);
      }
      ;
      if (v instanceof Nothing) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorMaybe;
  }
};
var bindMaybe = {
  bind: function(v) {
    return function(v1) {
      if (v instanceof Just) {
        return v1(v.value0);
      }
      ;
      if (v instanceof Nothing) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Apply0: function() {
    return applyMaybe;
  }
};
var applicativeMaybe = /* @__PURE__ */ function() {
  return {
    pure: Just.create,
    Apply0: function() {
      return applyMaybe;
    }
  };
}();
var altMaybe = {
  alt: function(v) {
    return function(v1) {
      if (v instanceof Nothing) {
        return v1;
      }
      ;
      return v;
    };
  },
  Functor0: function() {
    return functorMaybe;
  }
};
var plusMaybe = /* @__PURE__ */ function() {
  return {
    empty: Nothing.value,
    Alt0: function() {
      return altMaybe;
    }
  };
}();
var alternativeMaybe = {
  Applicative0: function() {
    return applicativeMaybe;
  },
  Plus1: function() {
    return plusMaybe;
  }
};

// output/Data.Either/index.js
var Left = /* @__PURE__ */ function() {
  function Left3(value0) {
    this.value0 = value0;
  }
  ;
  Left3.create = function(value0) {
    return new Left3(value0);
  };
  return Left3;
}();
var Right = /* @__PURE__ */ function() {
  function Right3(value0) {
    this.value0 = value0;
  }
  ;
  Right3.create = function(value0) {
    return new Right3(value0);
  };
  return Right3;
}();
var functorEither = {
  map: function(f) {
    return function(m) {
      if (m instanceof Left) {
        return new Left(m.value0);
      }
      ;
      if (m instanceof Right) {
        return new Right(f(m.value0));
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m.constructor.name]);
    };
  }
};
var map3 = /* @__PURE__ */ map(functorEither);
var either = function(v) {
  return function(v1) {
    return function(v2) {
      if (v2 instanceof Left) {
        return v(v2.value0);
      }
      ;
      if (v2 instanceof Right) {
        return v1(v2.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
    };
  };
};
var applyEither = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Left) {
        return new Left(v.value0);
      }
      ;
      if (v instanceof Right) {
        return map3(v.value0)(v1);
      }
      ;
      throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorEither;
  }
};
var applicativeEither = /* @__PURE__ */ function() {
  return {
    pure: Right.create,
    Apply0: function() {
      return applyEither;
    }
  };
}();

// output/Data.EuclideanRing/foreign.js
var intDegree = function(x) {
  return Math.min(Math.abs(x), 2147483647);
};
var intDiv = function(x) {
  return function(y) {
    if (y === 0)
      return 0;
    return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
  };
};
var intMod = function(x) {
  return function(y) {
    if (y === 0)
      return 0;
    var yy = Math.abs(y);
    return (x % yy + yy) % yy;
  };
};

// output/Data.CommutativeRing/index.js
var commutativeRingInt = {
  Ring0: function() {
    return ringInt;
  }
};

// output/Data.EuclideanRing/index.js
var mod = function(dict) {
  return dict.mod;
};
var euclideanRingInt = {
  degree: intDegree,
  div: intDiv,
  mod: intMod,
  CommutativeRing0: function() {
    return commutativeRingInt;
  }
};
var div = function(dict) {
  return dict.div;
};

// output/Data.Monoid/index.js
var monoidUnit = {
  mempty: unit,
  Semigroup0: function() {
    return semigroupUnit;
  }
};
var monoidString = {
  mempty: "",
  Semigroup0: function() {
    return semigroupString;
  }
};
var monoidArray = {
  mempty: [],
  Semigroup0: function() {
    return semigroupArray;
  }
};
var mempty = function(dict) {
  return dict.mempty;
};
var monoidFn = function(dictMonoid) {
  var mempty12 = mempty(dictMonoid);
  var semigroupFn2 = semigroupFn(dictMonoid.Semigroup0());
  return {
    mempty: function(v) {
      return mempty12;
    },
    Semigroup0: function() {
      return semigroupFn2;
    }
  };
};
var guard2 = function(dictMonoid) {
  var mempty12 = mempty(dictMonoid);
  return function(v) {
    return function(v1) {
      if (v) {
        return v1;
      }
      ;
      if (!v) {
        return mempty12;
      }
      ;
      throw new Error("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): " + [v.constructor.name, v1.constructor.name]);
    };
  };
};

// output/Data.Tuple/index.js
var Tuple = /* @__PURE__ */ function() {
  function Tuple2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Tuple2.create = function(value0) {
    return function(value1) {
      return new Tuple2(value0, value1);
    };
  };
  return Tuple2;
}();
var uncurry = function(f) {
  return function(v) {
    return f(v.value0)(v.value1);
  };
};
var snd = function(v) {
  return v.value1;
};
var fst = function(v) {
  return v.value0;
};

// output/Data.Unfoldable/foreign.js
var unfoldrArrayImpl = function(isNothing2) {
  return function(fromJust5) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b3) {
            var result = [];
            var value12 = b3;
            while (true) {
              var maybe2 = f(value12);
              if (isNothing2(maybe2))
                return result;
              var tuple = fromJust5(maybe2);
              result.push(fst2(tuple));
              value12 = snd2(tuple);
            }
          };
        };
      };
    };
  };
};

// output/Data.Traversable/foreign.js
var traverseArrayImpl = function() {
  function array1(a3) {
    return [a3];
  }
  function array2(a3) {
    return function(b3) {
      return [a3, b3];
    };
  }
  function array3(a3) {
    return function(b3) {
      return function(c2) {
        return [a3, b3, c2];
      };
    };
  }
  function concat22(xs) {
    return function(ys) {
      return xs.concat(ys);
    };
  }
  return function(apply8) {
    return function(map35) {
      return function(pure33) {
        return function(f) {
          return function(array) {
            function go2(bot, top7) {
              switch (top7 - bot) {
                case 0:
                  return pure33([]);
                case 1:
                  return map35(array1)(f(array[bot]));
                case 2:
                  return apply8(map35(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3:
                  return apply8(apply8(map35(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  var pivot = bot + Math.floor((top7 - bot) / 4) * 2;
                  return apply8(map35(concat22)(go2(bot, pivot)))(go2(pivot, top7));
              }
            }
            return go2(0, array.length);
          };
        };
      };
    };
  };
}();

// output/Data.Foldable/foreign.js
var foldrArray = function(f) {
  return function(init3) {
    return function(xs) {
      var acc = init3;
      var len = xs.length;
      for (var i3 = len - 1; i3 >= 0; i3--) {
        acc = f(xs[i3])(acc);
      }
      return acc;
    };
  };
};
var foldlArray = function(f) {
  return function(init3) {
    return function(xs) {
      var acc = init3;
      var len = xs.length;
      for (var i3 = 0; i3 < len; i3++) {
        acc = f(acc)(xs[i3]);
      }
      return acc;
    };
  };
};

// output/Data.Bifunctor/index.js
var identity4 = /* @__PURE__ */ identity(categoryFn);
var bimap = function(dict) {
  return dict.bimap;
};
var lmap = function(dictBifunctor) {
  var bimap1 = bimap(dictBifunctor);
  return function(f) {
    return bimap1(f)(identity4);
  };
};
var rmap = function(dictBifunctor) {
  return bimap(dictBifunctor)(identity4);
};
var bifunctorTuple = {
  bimap: function(f) {
    return function(g2) {
      return function(v) {
        return new Tuple(f(v.value0), g2(v.value1));
      };
    };
  }
};
var bifunctorEither = {
  bimap: function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return new Left(v(v2.value0));
        }
        ;
        if (v2 instanceof Right) {
          return new Right(v1(v2.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  }
};

// output/Unsafe.Coerce/foreign.js
var unsafeCoerce2 = function(x) {
  return x;
};

// output/Safe.Coerce/index.js
var coerce = function() {
  return unsafeCoerce2;
};

// output/Data.Newtype/index.js
var coerce2 = /* @__PURE__ */ coerce();
var wrap = function() {
  return coerce2;
};
var unwrap = function() {
  return coerce2;
};

// output/Data.Foldable/index.js
var foldr = function(dict) {
  return dict.foldr;
};
var traverse_ = function(dictApplicative) {
  var applySecond4 = applySecond(dictApplicative.Apply0());
  var pure33 = pure(dictApplicative);
  return function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(f) {
      return foldr22(function($449) {
        return applySecond4(f($449));
      })(pure33(unit));
    };
  };
};
var for_ = function(dictApplicative) {
  var traverse_1 = traverse_(dictApplicative);
  return function(dictFoldable) {
    return flip(traverse_1(dictFoldable));
  };
};
var foldl = function(dict) {
  return dict.foldl;
};
var intercalate2 = function(dictFoldable) {
  var foldl22 = foldl(dictFoldable);
  return function(dictMonoid) {
    var append11 = append(dictMonoid.Semigroup0());
    var mempty10 = mempty(dictMonoid);
    return function(sep2) {
      return function(xs) {
        var go2 = function(v) {
          return function(x) {
            if (v.init) {
              return {
                init: false,
                acc: x
              };
            }
            ;
            return {
              init: false,
              acc: append11(v.acc)(append11(sep2)(x))
            };
          };
        };
        return foldl22(go2)({
          init: true,
          acc: mempty10
        })(xs).acc;
      };
    };
  };
};
var foldableMaybe = {
  foldr: function(v) {
    return function(z) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return z;
        }
        ;
        if (v1 instanceof Just) {
          return v(v1.value0)(z);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  },
  foldl: function(v) {
    return function(z) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return z;
        }
        ;
        if (v1 instanceof Just) {
          return v(z)(v1.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, z.constructor.name, v1.constructor.name]);
      };
    };
  },
  foldMap: function(dictMonoid) {
    var mempty10 = mempty(dictMonoid);
    return function(v) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return mempty10;
        }
        ;
        if (v1 instanceof Just) {
          return v(v1.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  }
};
var foldMapDefaultR = function(dictFoldable) {
  var foldr22 = foldr(dictFoldable);
  return function(dictMonoid) {
    var append11 = append(dictMonoid.Semigroup0());
    var mempty10 = mempty(dictMonoid);
    return function(f) {
      return foldr22(function(x) {
        return function(acc) {
          return append11(f(x))(acc);
        };
      })(mempty10);
    };
  };
};
var foldableArray = {
  foldr: foldrArray,
  foldl: foldlArray,
  foldMap: function(dictMonoid) {
    return foldMapDefaultR(foldableArray)(dictMonoid);
  }
};
var foldMap = function(dict) {
  return dict.foldMap;
};

// output/Data.Identity/index.js
var Identity = function(x) {
  return x;
};
var functorIdentity = {
  map: function(f) {
    return function(m) {
      return f(m);
    };
  }
};
var applyIdentity = {
  apply: function(v) {
    return function(v1) {
      return v(v1);
    };
  },
  Functor0: function() {
    return functorIdentity;
  }
};
var bindIdentity = {
  bind: function(v) {
    return function(f) {
      return f(v);
    };
  },
  Apply0: function() {
    return applyIdentity;
  }
};
var applicativeIdentity = {
  pure: Identity,
  Apply0: function() {
    return applyIdentity;
  }
};
var monadIdentity = {
  Applicative0: function() {
    return applicativeIdentity;
  },
  Bind1: function() {
    return bindIdentity;
  }
};

// output/Data.Traversable/index.js
var identity5 = /* @__PURE__ */ identity(categoryFn);
var traverse = function(dict) {
  return dict.traverse;
};
var traversableMaybe = {
  traverse: function(dictApplicative) {
    var pure33 = pure(dictApplicative);
    var map35 = map(dictApplicative.Apply0().Functor0());
    return function(v) {
      return function(v1) {
        if (v1 instanceof Nothing) {
          return pure33(Nothing.value);
        }
        ;
        if (v1 instanceof Just) {
          return map35(Just.create)(v(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  },
  sequence: function(dictApplicative) {
    var pure33 = pure(dictApplicative);
    var map35 = map(dictApplicative.Apply0().Functor0());
    return function(v) {
      if (v instanceof Nothing) {
        return pure33(Nothing.value);
      }
      ;
      if (v instanceof Just) {
        return map35(Just.create)(v.value0);
      }
      ;
      throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v.constructor.name]);
    };
  },
  Functor0: function() {
    return functorMaybe;
  },
  Foldable1: function() {
    return foldableMaybe;
  }
};
var sequenceDefault = function(dictTraversable) {
  var traverse22 = traverse(dictTraversable);
  return function(dictApplicative) {
    return traverse22(dictApplicative)(identity5);
  };
};
var traversableArray = {
  traverse: function(dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    return traverseArrayImpl(apply(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
  },
  sequence: function(dictApplicative) {
    return sequenceDefault(traversableArray)(dictApplicative);
  },
  Functor0: function() {
    return functorArray;
  },
  Foldable1: function() {
    return foldableArray;
  }
};
var sequence = function(dict) {
  return dict.sequence;
};
var $$for = function(dictApplicative) {
  return function(dictTraversable) {
    var traverse22 = traverse(dictTraversable)(dictApplicative);
    return function(x) {
      return function(f) {
        return traverse22(f)(x);
      };
    };
  };
};

// output/Data.Unfoldable1/foreign.js
var unfoldr1ArrayImpl = function(isNothing2) {
  return function(fromJust5) {
    return function(fst2) {
      return function(snd2) {
        return function(f) {
          return function(b3) {
            var result = [];
            var value12 = b3;
            while (true) {
              var tuple = f(value12);
              result.push(fst2(tuple));
              var maybe2 = snd2(tuple);
              if (isNothing2(maybe2))
                return result;
              value12 = fromJust5(maybe2);
            }
          };
        };
      };
    };
  };
};

// output/Data.Unfoldable1/index.js
var fromJust2 = /* @__PURE__ */ fromJust();
var unfoldr1 = function(dict) {
  return dict.unfoldr1;
};
var unfoldable1Array = {
  unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
};
var replicate1 = function(dictUnfoldable1) {
  var unfoldr11 = unfoldr1(dictUnfoldable1);
  return function(n) {
    return function(v) {
      var step3 = function(i3) {
        if (i3 <= 0) {
          return new Tuple(v, Nothing.value);
        }
        ;
        if (otherwise) {
          return new Tuple(v, new Just(i3 - 1 | 0));
        }
        ;
        throw new Error("Failed pattern match at Data.Unfoldable1 (line 68, column 5 - line 68, column 39): " + [i3.constructor.name]);
      };
      return unfoldr11(step3)(n - 1 | 0);
    };
  };
};
var singleton = function(dictUnfoldable1) {
  return replicate1(dictUnfoldable1)(1);
};

// output/Data.Unfoldable/index.js
var fromJust3 = /* @__PURE__ */ fromJust();
var unfoldr = function(dict) {
  return dict.unfoldr;
};
var unfoldableArray = {
  unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
  Unfoldable10: function() {
    return unfoldable1Array;
  }
};

// output/Data.Enum/index.js
var top2 = /* @__PURE__ */ top(boundedInt);
var bottom2 = /* @__PURE__ */ bottom(boundedInt);
var bind2 = /* @__PURE__ */ bind(bindMaybe);
var voidLeft2 = /* @__PURE__ */ voidLeft(functorMaybe);
var guard3 = /* @__PURE__ */ guard(alternativeMaybe);
var toEnum = function(dict) {
  return dict.toEnum;
};
var succ = function(dict) {
  return dict.succ;
};
var pred = function(dict) {
  return dict.pred;
};
var fromEnum = function(dict) {
  return dict.fromEnum;
};
var toEnumWithDefaults = function(dictBoundedEnum) {
  var toEnum1 = toEnum(dictBoundedEnum);
  var fromEnum1 = fromEnum(dictBoundedEnum);
  var bottom1 = bottom(dictBoundedEnum.Bounded0());
  return function(low2) {
    return function(high2) {
      return function(x) {
        var v = toEnum1(x);
        if (v instanceof Just) {
          return v.value0;
        }
        ;
        if (v instanceof Nothing) {
          var $140 = x < fromEnum1(bottom1);
          if ($140) {
            return low2;
          }
          ;
          return high2;
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v.constructor.name]);
      };
    };
  };
};
var enumFromTo = function(dictEnum) {
  var Ord0 = dictEnum.Ord0();
  var eq14 = eq(Ord0.Eq0());
  var lessThan1 = lessThan(Ord0);
  var succ1 = succ(dictEnum);
  var lessThanOrEq1 = lessThanOrEq(Ord0);
  var pred1 = pred(dictEnum);
  var greaterThanOrEq1 = greaterThanOrEq(Ord0);
  return function(dictUnfoldable1) {
    var singleton7 = singleton(dictUnfoldable1);
    var unfoldr12 = unfoldr1(dictUnfoldable1);
    var go2 = function(step3) {
      return function(op) {
        return function(to2) {
          return function(a3) {
            return new Tuple(a3, bind2(step3(a3))(function(a$prime3) {
              return voidLeft2(guard3(op(a$prime3)(to2)))(a$prime3);
            }));
          };
        };
      };
    };
    return function(v) {
      return function(v1) {
        if (eq14(v)(v1)) {
          return singleton7(v);
        }
        ;
        if (lessThan1(v)(v1)) {
          return unfoldr12(go2(succ1)(lessThanOrEq1)(v1))(v);
        }
        ;
        if (otherwise) {
          return unfoldr12(go2(pred1)(greaterThanOrEq1)(v1))(v);
        }
        ;
        throw new Error("Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
};
var defaultSucc = function(toEnum$prime) {
  return function(fromEnum$prime) {
    return function(a3) {
      return toEnum$prime(fromEnum$prime(a3) + 1 | 0);
    };
  };
};
var defaultPred = function(toEnum$prime) {
  return function(fromEnum$prime) {
    return function(a3) {
      return toEnum$prime(fromEnum$prime(a3) - 1 | 0);
    };
  };
};
var charToEnum = function(v) {
  if (v >= bottom2 && v <= top2) {
    return new Just(fromCharCode(v));
  }
  ;
  return Nothing.value;
};
var enumChar = {
  succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
  pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
  Ord0: function() {
    return ordChar;
  }
};
var boundedEnumChar = /* @__PURE__ */ function() {
  return {
    cardinality: toCharCode(top(boundedChar)) - toCharCode(bottom(boundedChar)) | 0,
    toEnum: charToEnum,
    fromEnum: toCharCode,
    Bounded0: function() {
      return boundedChar;
    },
    Enum1: function() {
      return enumChar;
    }
  };
}();

// output/Data.Enum.Generic/index.js
var map4 = /* @__PURE__ */ map(functorMaybe);
var genericSucc$prime = function(dict) {
  return dict["genericSucc'"];
};
var genericSucc = function(dictGeneric) {
  var to2 = to(dictGeneric);
  var from3 = from(dictGeneric);
  return function(dictGenericEnum) {
    var $156 = map4(to2);
    var $157 = genericSucc$prime(dictGenericEnum);
    return function($158) {
      return $156($157(from3($158)));
    };
  };
};
var genericPred$prime = function(dict) {
  return dict["genericPred'"];
};
var genericPred = function(dictGeneric) {
  var to2 = to(dictGeneric);
  var from3 = from(dictGeneric);
  return function(dictGenericEnum) {
    var $159 = map4(to2);
    var $160 = genericPred$prime(dictGenericEnum);
    return function($161) {
      return $159($160(from3($161)));
    };
  };
};
var genericEnumSum = function(dictGenericEnum) {
  var genericPred$prime1 = genericPred$prime(dictGenericEnum);
  var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
  return function(dictGenericTop) {
    var genericTop$prime2 = genericTop$prime(dictGenericTop);
    return function(dictGenericEnum1) {
      var genericPred$prime2 = genericPred$prime(dictGenericEnum1);
      var genericSucc$prime2 = genericSucc$prime(dictGenericEnum1);
      return function(dictGenericBottom) {
        var genericBottom$prime2 = genericBottom$prime(dictGenericBottom);
        return {
          "genericPred'": function(v) {
            if (v instanceof Inl) {
              return map4(Inl.create)(genericPred$prime1(v.value0));
            }
            ;
            if (v instanceof Inr) {
              var v1 = genericPred$prime2(v.value0);
              if (v1 instanceof Nothing) {
                return new Just(new Inl(genericTop$prime2));
              }
              ;
              if (v1 instanceof Just) {
                return new Just(new Inr(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 30, column 14 - line 32, column 31): " + [v1.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Enum.Generic (line 28, column 18 - line 32, column 31): " + [v.constructor.name]);
          },
          "genericSucc'": function(v) {
            if (v instanceof Inl) {
              var v1 = genericSucc$prime1(v.value0);
              if (v1 instanceof Nothing) {
                return new Just(new Inr(genericBottom$prime2));
              }
              ;
              if (v1 instanceof Just) {
                return new Just(new Inl(v1.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 34, column 14 - line 36, column 31): " + [v1.constructor.name]);
            }
            ;
            if (v instanceof Inr) {
              return map4(Inr.create)(genericSucc$prime2(v.value0));
            }
            ;
            throw new Error("Failed pattern match at Data.Enum.Generic (line 33, column 18 - line 37, column 36): " + [v.constructor.name]);
          }
        };
      };
    };
  };
};
var genericEnumNoArguments = {
  "genericPred'": function(v) {
    return Nothing.value;
  },
  "genericSucc'": function(v) {
    return Nothing.value;
  }
};
var genericEnumConstructor = function(dictGenericEnum) {
  var genericPred$prime1 = genericPred$prime(dictGenericEnum);
  var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
  return {
    "genericPred'": function(v) {
      return map4(Constructor)(genericPred$prime1(v));
    },
    "genericSucc'": function(v) {
      return map4(Constructor)(genericSucc$prime1(v));
    }
  };
};

// output/Yoga.JSON/foreign.js
var _parseJSON = JSON.parse;
var _undefined = void 0;
var _unsafeStringify = JSON.stringify;

// output/Effect/foreign.js
var pureE = function(a3) {
  return function() {
    return a3;
  };
};
var bindE = function(a3) {
  return function(f) {
    return function() {
      return f(a3())();
    };
  };
};

// output/Control.Monad/index.js
var ap = function(dictMonad) {
  var bind32 = bind(dictMonad.Bind1());
  var pure33 = pure(dictMonad.Applicative0());
  return function(f) {
    return function(a3) {
      return bind32(f)(function(f$prime) {
        return bind32(a3)(function(a$prime3) {
          return pure33(f$prime(a$prime3));
        });
      });
    };
  };
};

// output/Effect/index.js
var $runtime_lazy = function(name15, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var monadEffect = {
  Applicative0: function() {
    return applicativeEffect;
  },
  Bind1: function() {
    return bindEffect;
  }
};
var bindEffect = {
  bind: bindE,
  Apply0: function() {
    return $lazy_applyEffect(0);
  }
};
var applicativeEffect = {
  pure: pureE,
  Apply0: function() {
    return $lazy_applyEffect(0);
  }
};
var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
  return {
    map: liftA1(applicativeEffect)
  };
});
var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
  return {
    apply: ap(monadEffect),
    Functor0: function() {
      return $lazy_functorEffect(0);
    }
  };
});
var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
var lift22 = /* @__PURE__ */ lift2(applyEffect);
var semigroupEffect = function(dictSemigroup) {
  return {
    append: lift22(append(dictSemigroup))
  };
};
var monoidEffect = function(dictMonoid) {
  var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
  return {
    mempty: pureE(mempty(dictMonoid)),
    Semigroup0: function() {
      return semigroupEffect1;
    }
  };
};

// output/Effect.Exception/foreign.js
function error(msg) {
  return new Error(msg);
}
function message(e) {
  return e.message;
}
function throwException(e) {
  return function() {
    throw e;
  };
}
function catchException(c2) {
  return function(t) {
    return function() {
      try {
        return t();
      } catch (e) {
        if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
          return c2(e)();
        } else {
          return c2(new Error(e.toString()))();
        }
      }
    };
  };
}

// output/Effect.Exception/index.js
var pure2 = /* @__PURE__ */ pure(applicativeEffect);
var map5 = /* @__PURE__ */ map(functorEffect);
var $$try = function(action2) {
  return catchException(function($3) {
    return pure2(Left.create($3));
  })(map5(Right.create)(action2));
};
var $$throw = function($4) {
  return throwException(error($4));
};

// output/Control.Monad.Error.Class/index.js
var throwError = function(dict) {
  return dict.throwError;
};

// output/Control.Monad.Reader.Class/index.js
var ask = function(dict) {
  return dict.ask;
};

// output/Effect.Ref/foreign.js
var _new = function(val) {
  return function() {
    return { value: val };
  };
};
var read = function(ref) {
  return function() {
    return ref.value;
  };
};
var modifyImpl = function(f) {
  return function(ref) {
    return function() {
      var t = f(ref.value);
      ref.value = t.state;
      return t.value;
    };
  };
};
var write = function(val) {
  return function(ref) {
    return function() {
      ref.value = val;
    };
  };
};

// output/Effect.Ref/index.js
var $$void2 = /* @__PURE__ */ $$void(functorEffect);
var $$new = _new;
var modify$prime = modifyImpl;
var modify = function(f) {
  return modify$prime(function(s2) {
    var s$prime2 = f(s2);
    return {
      state: s$prime2,
      value: s$prime2
    };
  });
};
var modify_ = function(f) {
  return function(s2) {
    return $$void2(modify(f)(s2));
  };
};

// output/Control.Monad.Rec.Class/index.js
var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
var map6 = /* @__PURE__ */ map(functorEffect);
var Loop = /* @__PURE__ */ function() {
  function Loop2(value0) {
    this.value0 = value0;
  }
  ;
  Loop2.create = function(value0) {
    return new Loop2(value0);
  };
  return Loop2;
}();
var Done = /* @__PURE__ */ function() {
  function Done2(value0) {
    this.value0 = value0;
  }
  ;
  Done2.create = function(value0) {
    return new Done2(value0);
  };
  return Done2;
}();
var tailRecM = function(dict) {
  return dict.tailRecM;
};
var monadRecEffect = {
  tailRecM: function(f) {
    return function(a3) {
      var fromDone = function(v) {
        if (v instanceof Done) {
          return v.value0;
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v.constructor.name]);
      };
      return function __do6() {
        var r = bindFlipped2($$new)(f(a3))();
        (function() {
          while (!function __do7() {
            var v = read(r)();
            if (v instanceof Loop) {
              var e = f(v.value0)();
              write(e)(r)();
              return false;
            }
            ;
            if (v instanceof Done) {
              return true;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v.constructor.name]);
          }()) {
          }
          ;
          return {};
        })();
        return map6(fromDone)(read(r))();
      };
    };
  },
  Monad0: function() {
    return monadEffect;
  }
};

// output/Control.Monad.Trans.Class/index.js
var lift = function(dict) {
  return dict.lift;
};

// output/Effect.Class/index.js
var monadEffectEffect = {
  liftEffect: /* @__PURE__ */ identity(categoryFn),
  Monad0: function() {
    return monadEffect;
  }
};
var liftEffect = function(dict) {
  return dict.liftEffect;
};

// output/Control.Monad.Except.Trans/index.js
var map7 = /* @__PURE__ */ map(functorEither);
var ExceptT = function(x) {
  return x;
};
var withExceptT = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return function(f) {
    return function(v) {
      var mapLeft = function(v1) {
        return function(v2) {
          if (v2 instanceof Right) {
            return new Right(v2.value0);
          }
          ;
          if (v2 instanceof Left) {
            return new Left(v1(v2.value0));
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [v1.constructor.name, v2.constructor.name]);
        };
      };
      return map110(mapLeft(f))(v);
    };
  };
};
var runExceptT = function(v) {
  return v;
};
var mapExceptT = function(f) {
  return function(v) {
    return f(v);
  };
};
var functorExceptT = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return {
    map: function(f) {
      return mapExceptT(map110(map7(f)));
    }
  };
};
var monadExceptT = function(dictMonad) {
  return {
    Applicative0: function() {
      return applicativeExceptT(dictMonad);
    },
    Bind1: function() {
      return bindExceptT(dictMonad);
    }
  };
};
var bindExceptT = function(dictMonad) {
  var bind32 = bind(dictMonad.Bind1());
  var pure33 = pure(dictMonad.Applicative0());
  return {
    bind: function(v) {
      return function(k) {
        return bind32(v)(either(function($187) {
          return pure33(Left.create($187));
        })(function(a3) {
          var v1 = k(a3);
          return v1;
        }));
      };
    },
    Apply0: function() {
      return applyExceptT(dictMonad);
    }
  };
};
var applyExceptT = function(dictMonad) {
  var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
  return {
    apply: ap(monadExceptT(dictMonad)),
    Functor0: function() {
      return functorExceptT1;
    }
  };
};
var applicativeExceptT = function(dictMonad) {
  return {
    pure: function() {
      var $188 = pure(dictMonad.Applicative0());
      return function($189) {
        return ExceptT($188(Right.create($189)));
      };
    }(),
    Apply0: function() {
      return applyExceptT(dictMonad);
    }
  };
};
var monadThrowExceptT = function(dictMonad) {
  var monadExceptT1 = monadExceptT(dictMonad);
  return {
    throwError: function() {
      var $198 = pure(dictMonad.Applicative0());
      return function($199) {
        return ExceptT($198(Left.create($199)));
      };
    }(),
    Monad0: function() {
      return monadExceptT1;
    }
  };
};
var altExceptT = function(dictSemigroup) {
  var append11 = append(dictSemigroup);
  return function(dictMonad) {
    var Bind1 = dictMonad.Bind1();
    var bind32 = bind(Bind1);
    var pure33 = pure(dictMonad.Applicative0());
    var functorExceptT1 = functorExceptT(Bind1.Apply0().Functor0());
    return {
      alt: function(v) {
        return function(v1) {
          return bind32(v)(function(rm) {
            if (rm instanceof Right) {
              return pure33(new Right(rm.value0));
            }
            ;
            if (rm instanceof Left) {
              return bind32(v1)(function(rn) {
                if (rn instanceof Right) {
                  return pure33(new Right(rn.value0));
                }
                ;
                if (rn instanceof Left) {
                  return pure33(new Left(append11(rm.value0)(rn.value0)));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [rn.constructor.name]);
              });
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [rm.constructor.name]);
          });
        };
      },
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
};

// output/Control.Monad.Except/index.js
var unwrap2 = /* @__PURE__ */ unwrap();
var withExcept = /* @__PURE__ */ withExceptT(functorIdentity);
var runExcept = function($3) {
  return unwrap2(runExceptT($3));
};

// output/Data.Array/foreign.js
var replicateFill = function(count) {
  return function(value12) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value12);
  };
};
var replicatePolyfill = function(count) {
  return function(value12) {
    var result = [];
    var n = 0;
    for (var i3 = 0; i3 < count; i3++) {
      result[n++] = value12;
    }
    return result;
  };
};
var replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
var fromFoldableImpl = function() {
  function Cons3(head6, tail2) {
    this.head = head6;
    this.tail = tail2;
  }
  var emptyList = {};
  function curryCons(head6) {
    return function(tail2) {
      return new Cons3(head6, tail2);
    };
  }
  function listToArray(list) {
    var result = [];
    var count = 0;
    var xs = list;
    while (xs !== emptyList) {
      result[count++] = xs.head;
      xs = xs.tail;
    }
    return result;
  }
  return function(foldr5) {
    return function(xs) {
      return listToArray(foldr5(curryCons)(emptyList)(xs));
    };
  };
}();
var length = function(xs) {
  return xs.length;
};
var indexImpl = function(just) {
  return function(nothing) {
    return function(xs) {
      return function(i3) {
        return i3 < 0 || i3 >= xs.length ? nothing : just(xs[i3]);
      };
    };
  };
};
var filter = function(f) {
  return function(xs) {
    return xs.filter(f);
  };
};
var sortByImpl = function() {
  function mergeFromTo(compare4, fromOrdering, xs1, xs2, from3, to2) {
    var mid;
    var i3;
    var j;
    var k;
    var x;
    var y;
    var c2;
    mid = from3 + (to2 - from3 >> 1);
    if (mid - from3 > 1)
      mergeFromTo(compare4, fromOrdering, xs2, xs1, from3, mid);
    if (to2 - mid > 1)
      mergeFromTo(compare4, fromOrdering, xs2, xs1, mid, to2);
    i3 = from3;
    j = mid;
    k = from3;
    while (i3 < mid && j < to2) {
      x = xs2[i3];
      y = xs2[j];
      c2 = fromOrdering(compare4(x)(y));
      if (c2 > 0) {
        xs1[k++] = y;
        ++j;
      } else {
        xs1[k++] = x;
        ++i3;
      }
    }
    while (i3 < mid) {
      xs1[k++] = xs2[i3++];
    }
    while (j < to2) {
      xs1[k++] = xs2[j++];
    }
  }
  return function(compare4) {
    return function(fromOrdering) {
      return function(xs) {
        var out;
        if (xs.length < 2)
          return xs;
        out = xs.slice(0);
        mergeFromTo(compare4, fromOrdering, out, xs.slice(0), 0, xs.length);
        return out;
      };
    };
  };
}();
var all2 = function(p2) {
  return function(xs) {
    var len = xs.length;
    for (var i3 = 0; i3 < len; i3++) {
      if (!p2(xs[i3]))
        return false;
    }
    return true;
  };
};
var unsafeIndexImpl = function(xs) {
  return function(n) {
    return xs[n];
  };
};

// output/Control.Monad.ST.Internal/foreign.js
var map_ = function(f) {
  return function(a3) {
    return function() {
      return f(a3());
    };
  };
};
var pure_ = function(a3) {
  return function() {
    return a3;
  };
};
var bind_ = function(a3) {
  return function(f) {
    return function() {
      return f(a3())();
    };
  };
};
var foreach = function(as) {
  return function(f) {
    return function() {
      for (var i3 = 0, l = as.length; i3 < l; i3++) {
        f(as[i3])();
      }
    };
  };
};
var read2 = function(ref) {
  return function() {
    return ref.value;
  };
};
var write2 = function(a3) {
  return function(ref) {
    return function() {
      return ref.value = a3;
    };
  };
};

// output/Control.Monad.ST.Internal/index.js
var $runtime_lazy2 = function(name15, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var functorST = {
  map: map_
};
var monadST = {
  Applicative0: function() {
    return applicativeST;
  },
  Bind1: function() {
    return bindST;
  }
};
var bindST = {
  bind: bind_,
  Apply0: function() {
    return $lazy_applyST(0);
  }
};
var applicativeST = {
  pure: pure_,
  Apply0: function() {
    return $lazy_applyST(0);
  }
};
var $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
  return {
    apply: ap(monadST),
    Functor0: function() {
      return functorST;
    }
  };
});

// output/Data.Array.ST/foreign.js
var pushAll = function(as) {
  return function(xs) {
    return function() {
      return xs.push.apply(xs, as);
    };
  };
};
var unsafeFreeze = function(xs) {
  return function() {
    return xs;
  };
};
function copyImpl(xs) {
  return function() {
    return xs.slice();
  };
}
var thaw = copyImpl;
var sortByImpl2 = function() {
  function mergeFromTo(compare4, fromOrdering, xs1, xs2, from3, to2) {
    var mid;
    var i3;
    var j;
    var k;
    var x;
    var y;
    var c2;
    mid = from3 + (to2 - from3 >> 1);
    if (mid - from3 > 1)
      mergeFromTo(compare4, fromOrdering, xs2, xs1, from3, mid);
    if (to2 - mid > 1)
      mergeFromTo(compare4, fromOrdering, xs2, xs1, mid, to2);
    i3 = from3;
    j = mid;
    k = from3;
    while (i3 < mid && j < to2) {
      x = xs2[i3];
      y = xs2[j];
      c2 = fromOrdering(compare4(x)(y));
      if (c2 > 0) {
        xs1[k++] = y;
        ++j;
      } else {
        xs1[k++] = x;
        ++i3;
      }
    }
    while (i3 < mid) {
      xs1[k++] = xs2[i3++];
    }
    while (j < to2) {
      xs1[k++] = xs2[j++];
    }
  }
  return function(compare4) {
    return function(fromOrdering) {
      return function(xs) {
        return function() {
          if (xs.length < 2)
            return xs;
          mergeFromTo(compare4, fromOrdering, xs, xs.slice(0), 0, xs.length);
          return xs;
        };
      };
    };
  };
}();

// output/Data.Array.ST/index.js
var withArray = function(f) {
  return function(xs) {
    return function __do6() {
      var result = thaw(xs)();
      f(result)();
      return unsafeFreeze(result)();
    };
  };
};
var push = function(a3) {
  return pushAll([a3]);
};

// output/Data.Array/index.js
var intercalate1 = /* @__PURE__ */ intercalate2(foldableArray);
var append2 = /* @__PURE__ */ append(semigroupArray);
var unsafeIndex = function() {
  return unsafeIndexImpl;
};
var snoc = function(xs) {
  return function(x) {
    return withArray(push(x))(xs)();
  };
};
var singleton2 = function(a3) {
  return [a3];
};
var $$null = function(xs) {
  return length(xs) === 0;
};
var intercalate3 = function(dictMonoid) {
  return intercalate1(dictMonoid);
};
var index = /* @__PURE__ */ function() {
  return indexImpl(Just.create)(Nothing.value);
}();
var head = function(xs) {
  return index(xs)(0);
};
var fromFoldable = function(dictFoldable) {
  return fromFoldableImpl(foldr(dictFoldable));
};
var cons2 = function(x) {
  return function(xs) {
    return append2([x])(xs);
  };
};
var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
var mapMaybe = function(f) {
  return concatMap(function() {
    var $185 = maybe([])(singleton2);
    return function($186) {
      return $185(f($186));
    };
  }());
};
var catMaybes = /* @__PURE__ */ mapMaybe(/* @__PURE__ */ identity(categoryFn));

// output/Data.Array.NonEmpty.Internal/foreign.js
var traverse1Impl = function() {
  function Cont(fn) {
    this.fn = fn;
  }
  var emptyList = {};
  var ConsCell = function(head6, tail2) {
    this.head = head6;
    this.tail = tail2;
  };
  function finalCell(head6) {
    return new ConsCell(head6, emptyList);
  }
  function consList(x) {
    return function(xs) {
      return new ConsCell(x, xs);
    };
  }
  function listToArray(list) {
    var arr = [];
    var xs = list;
    while (xs !== emptyList) {
      arr.push(xs.head);
      xs = xs.tail;
    }
    return arr;
  }
  return function(apply8) {
    return function(map35) {
      return function(f) {
        var buildFrom = function(x, ys) {
          return apply8(map35(consList)(f(x)))(ys);
        };
        var go2 = function(acc, currentLen, xs) {
          if (currentLen === 0) {
            return acc;
          } else {
            var last4 = xs[currentLen - 1];
            return new Cont(function() {
              var built = go2(buildFrom(last4, acc), currentLen - 1, xs);
              return built;
            });
          }
        };
        return function(array) {
          var acc = map35(finalCell)(f(array[array.length - 1]));
          var result = go2(acc, array.length - 1, array);
          while (result instanceof Cont) {
            result = result.fn();
          }
          return map35(listToArray)(result);
        };
      };
    };
  };
}();

// output/Data.FunctorWithIndex/foreign.js
var mapWithIndexArray = function(f) {
  return function(xs) {
    var l = xs.length;
    var result = Array(l);
    for (var i3 = 0; i3 < l; i3++) {
      result[i3] = f(i3)(xs[i3]);
    }
    return result;
  };
};

// output/Data.FunctorWithIndex/index.js
var mapWithIndex = function(dict) {
  return dict.mapWithIndex;
};
var functorWithIndexArray = {
  mapWithIndex: mapWithIndexArray,
  Functor0: function() {
    return functorArray;
  }
};

// output/Data.FoldableWithIndex/index.js
var foldr8 = /* @__PURE__ */ foldr(foldableArray);
var mapWithIndex2 = /* @__PURE__ */ mapWithIndex(functorWithIndexArray);
var foldl8 = /* @__PURE__ */ foldl(foldableArray);
var foldrWithIndex = function(dict) {
  return dict.foldrWithIndex;
};
var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
  var foldrWithIndex1 = foldrWithIndex(dictFoldableWithIndex);
  return function(dictMonoid) {
    var append11 = append(dictMonoid.Semigroup0());
    var mempty10 = mempty(dictMonoid);
    return function(f) {
      return foldrWithIndex1(function(i3) {
        return function(x) {
          return function(acc) {
            return append11(f(i3)(x))(acc);
          };
        };
      })(mempty10);
    };
  };
};
var foldableWithIndexArray = {
  foldrWithIndex: function(f) {
    return function(z) {
      var $289 = foldr8(function(v) {
        return function(y) {
          return f(v.value0)(v.value1)(y);
        };
      })(z);
      var $290 = mapWithIndex2(Tuple.create);
      return function($291) {
        return $289($290($291));
      };
    };
  },
  foldlWithIndex: function(f) {
    return function(z) {
      var $292 = foldl8(function(y) {
        return function(v) {
          return f(v.value0)(y)(v.value1);
        };
      })(z);
      var $293 = mapWithIndex2(Tuple.create);
      return function($294) {
        return $292($293($294));
      };
    };
  },
  foldMapWithIndex: function(dictMonoid) {
    return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
  },
  Foldable0: function() {
    return foldableArray;
  }
};

// output/Data.TraversableWithIndex/index.js
var traverseWithIndexDefault = function(dictTraversableWithIndex) {
  var sequence3 = sequence(dictTraversableWithIndex.Traversable2());
  var mapWithIndex4 = mapWithIndex(dictTraversableWithIndex.FunctorWithIndex0());
  return function(dictApplicative) {
    var sequence12 = sequence3(dictApplicative);
    return function(f) {
      var $174 = mapWithIndex4(f);
      return function($175) {
        return sequence12($174($175));
      };
    };
  };
};
var traverseWithIndex = function(dict) {
  return dict.traverseWithIndex;
};
var traversableWithIndexArray = {
  traverseWithIndex: function(dictApplicative) {
    return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
  },
  FunctorWithIndex0: function() {
    return functorWithIndexArray;
  },
  FoldableWithIndex1: function() {
    return foldableWithIndexArray;
  },
  Traversable2: function() {
    return traversableArray;
  }
};

// output/Data.Array.NonEmpty.Internal/index.js
var NonEmptyArray = function(x) {
  return x;
};
var traversableNonEmptyArray = traversableArray;

// output/Data.NonEmpty/index.js
var NonEmpty = /* @__PURE__ */ function() {
  function NonEmpty2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  NonEmpty2.create = function(value0) {
    return function(value1) {
      return new NonEmpty2(value0, value1);
    };
  };
  return NonEmpty2;
}();
var singleton3 = function(dictPlus) {
  var empty5 = empty(dictPlus);
  return function(a3) {
    return new NonEmpty(a3, empty5);
  };
};
var showNonEmpty = function(dictShow) {
  var show16 = show(dictShow);
  return function(dictShow1) {
    var show17 = show(dictShow1);
    return {
      show: function(v) {
        return "(NonEmpty " + (show16(v.value0) + (" " + (show17(v.value1) + ")")));
      }
    };
  };
};
var functorNonEmpty = function(dictFunctor) {
  var map210 = map(dictFunctor);
  return {
    map: function(f) {
      return function(m) {
        return new NonEmpty(f(m.value0), map210(f)(m.value1));
      };
    }
  };
};
var foldableNonEmpty = function(dictFoldable) {
  var foldMap13 = foldMap(dictFoldable);
  var foldl3 = foldl(dictFoldable);
  var foldr5 = foldr(dictFoldable);
  return {
    foldMap: function(dictMonoid) {
      var append15 = append(dictMonoid.Semigroup0());
      var foldMap14 = foldMap13(dictMonoid);
      return function(f) {
        return function(v) {
          return append15(f(v.value0))(foldMap14(f)(v.value1));
        };
      };
    },
    foldl: function(f) {
      return function(b3) {
        return function(v) {
          return foldl3(f)(f(b3)(v.value0))(v.value1);
        };
      };
    },
    foldr: function(f) {
      return function(b3) {
        return function(v) {
          return f(v.value0)(foldr5(f)(b3)(v.value1));
        };
      };
    }
  };
};

// output/Data.Array.NonEmpty/index.js
var fromJust4 = /* @__PURE__ */ fromJust();
var unsafeFromArray = NonEmptyArray;
var toArray = function(v) {
  return v;
};
var fromArray = function(xs) {
  if (length(xs) > 0) {
    return new Just(unsafeFromArray(xs));
  }
  ;
  if (otherwise) {
    return Nothing.value;
  }
  ;
  throw new Error("Failed pattern match at Data.Array.NonEmpty (line 157, column 1 - line 157, column 58): " + [xs.constructor.name]);
};
var cons$prime = function(x) {
  return function(xs) {
    return unsafeFromArray(cons2(x)(xs));
  };
};
var adaptMaybe = function(f) {
  return function($123) {
    return fromJust4(f(toArray($123)));
  };
};
var head2 = /* @__PURE__ */ adaptMaybe(head);
var adaptAny = function(f) {
  return function($125) {
    return f(toArray($125));
  };
};
var all3 = function(p2) {
  return adaptAny(all2(p2));
};
var catMaybes2 = /* @__PURE__ */ adaptAny(catMaybes);

// output/Data.Int/foreign.js
var fromNumberImpl = function(just) {
  return function(nothing) {
    return function(n) {
      return (n | 0) === n ? just(n) : nothing;
    };
  };
};
var toNumber = function(n) {
  return n;
};
var toStringAs = function(radix) {
  return function(i3) {
    return i3.toString(radix);
  };
};

// output/Data.Number/foreign.js
var nan = NaN;
var isFiniteImpl = isFinite;
var abs2 = Math.abs;
var floor = Math.floor;
var remainder = function(n) {
  return function(m) {
    return n % m;
  };
};
var round = Math.round;

// output/Data.Int/index.js
var top3 = /* @__PURE__ */ top(boundedInt);
var bottom3 = /* @__PURE__ */ bottom(boundedInt);
var fromNumber = /* @__PURE__ */ function() {
  return fromNumberImpl(Just.create)(Nothing.value);
}();
var unsafeClamp = function(x) {
  if (!isFiniteImpl(x)) {
    return 0;
  }
  ;
  if (x >= toNumber(top3)) {
    return top3;
  }
  ;
  if (x <= toNumber(bottom3)) {
    return bottom3;
  }
  ;
  if (otherwise) {
    return fromMaybe(0)(fromNumber(x));
  }
  ;
  throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
};
var round2 = function($37) {
  return unsafeClamp(round($37));
};
var floor2 = function($39) {
  return unsafeClamp(floor($39));
};
var decimal = 10;

// output/Data.List.Types/index.js
var Nil = /* @__PURE__ */ function() {
  function Nil3() {
  }
  ;
  Nil3.value = new Nil3();
  return Nil3;
}();
var Cons = /* @__PURE__ */ function() {
  function Cons3(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Cons3.create = function(value0) {
    return function(value1) {
      return new Cons3(value0, value1);
    };
  };
  return Cons3;
}();
var NonEmptyList = function(x) {
  return x;
};
var toList = function(v) {
  return new Cons(v.value0, v.value1);
};
var listMap = function(f) {
  var chunkedRevMap = function($copy_chunksAcc) {
    return function($copy_v) {
      var $tco_var_chunksAcc = $copy_chunksAcc;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(chunksAcc, v) {
        if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
          $tco_var_chunksAcc = new Cons(v, chunksAcc);
          $copy_v = v.value1.value1.value1;
          return;
        }
        ;
        var unrolledMap = function(v1) {
          if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
            return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
          }
          ;
          if (v1 instanceof Cons && v1.value1 instanceof Nil) {
            return new Cons(f(v1.value0), Nil.value);
          }
          ;
          return Nil.value;
        };
        var reverseUnrolledMap = function($copy_v1) {
          return function($copy_acc) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done1 = false;
            var $tco_result2;
            function $tco_loop2(v1, acc) {
              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                $tco_var_v1 = v1.value1;
                $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                return;
              }
              ;
              $tco_done1 = true;
              return acc;
            }
            ;
            while (!$tco_done1) {
              $tco_result2 = $tco_loop2($tco_var_v1, $copy_acc);
            }
            ;
            return $tco_result2;
          };
        };
        $tco_done = true;
        return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
      }
      ;
      return $tco_result;
    };
  };
  return chunkedRevMap(Nil.value);
};
var functorList = {
  map: listMap
};
var map8 = /* @__PURE__ */ map(functorList);
var functorNonEmptyList = /* @__PURE__ */ functorNonEmpty(functorList);
var foldableList = {
  foldr: function(f) {
    return function(b3) {
      var rev3 = function() {
        var go2 = function($copy_acc) {
          return function($copy_v) {
            var $tco_var_acc = $copy_acc;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(acc, v) {
              if (v instanceof Nil) {
                $tco_done = true;
                return acc;
              }
              ;
              if (v instanceof Cons) {
                $tco_var_acc = new Cons(v.value0, acc);
                $copy_v = v.value1;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [acc.constructor.name, v.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_acc, $copy_v);
            }
            ;
            return $tco_result;
          };
        };
        return go2(Nil.value);
      }();
      var $281 = foldl(foldableList)(flip(f))(b3);
      return function($282) {
        return $281(rev3($282));
      };
    };
  },
  foldl: function(f) {
    var go2 = function($copy_b) {
      return function($copy_v) {
        var $tco_var_b = $copy_b;
        var $tco_done1 = false;
        var $tco_result;
        function $tco_loop(b3, v) {
          if (v instanceof Nil) {
            $tco_done1 = true;
            return b3;
          }
          ;
          if (v instanceof Cons) {
            $tco_var_b = f(b3)(v.value0);
            $copy_v = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done1) {
          $tco_result = $tco_loop($tco_var_b, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go2;
  },
  foldMap: function(dictMonoid) {
    var append22 = append(dictMonoid.Semigroup0());
    var mempty10 = mempty(dictMonoid);
    return function(f) {
      return foldl(foldableList)(function(acc) {
        var $283 = append22(acc);
        return function($284) {
          return $283(f($284));
        };
      })(mempty10);
    };
  }
};
var foldr2 = /* @__PURE__ */ foldr(foldableList);
var intercalate5 = /* @__PURE__ */ intercalate2(foldableList)(monoidString);
var foldableNonEmptyList = /* @__PURE__ */ foldableNonEmpty(foldableList);
var semigroupList = {
  append: function(xs) {
    return function(ys) {
      return foldr2(Cons.create)(ys)(xs);
    };
  }
};
var append1 = /* @__PURE__ */ append(semigroupList);
var monoidList = /* @__PURE__ */ function() {
  return {
    mempty: Nil.value,
    Semigroup0: function() {
      return semigroupList;
    }
  };
}();
var semigroupNonEmptyList = {
  append: function(v) {
    return function(as$prime) {
      return new NonEmpty(v.value0, append1(v.value1)(toList(as$prime)));
    };
  }
};
var showList = function(dictShow) {
  var show16 = show(dictShow);
  return {
    show: function(v) {
      if (v instanceof Nil) {
        return "Nil";
      }
      ;
      return "(" + (intercalate5(" : ")(map8(show16)(v)) + " : Nil)");
    }
  };
};
var showNonEmptyList = function(dictShow) {
  var show16 = show(showNonEmpty(dictShow)(showList(dictShow)));
  return {
    show: function(v) {
      return "(NonEmptyList " + (show16(v) + ")");
    }
  };
};
var applyList = {
  apply: function(v) {
    return function(v1) {
      if (v instanceof Nil) {
        return Nil.value;
      }
      ;
      if (v instanceof Cons) {
        return append1(map8(v.value0)(v1))(apply(applyList)(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.List.Types (line 157, column 1 - line 159, column 48): " + [v.constructor.name, v1.constructor.name]);
    };
  },
  Functor0: function() {
    return functorList;
  }
};
var apply2 = /* @__PURE__ */ apply(applyList);
var applyNonEmptyList = {
  apply: function(v) {
    return function(v1) {
      return new NonEmpty(v.value0(v1.value0), append1(apply2(v.value1)(new Cons(v1.value0, Nil.value)))(apply2(new Cons(v.value0, v.value1))(v1.value1)));
    };
  },
  Functor0: function() {
    return functorNonEmptyList;
  }
};
var altList = {
  alt: append1,
  Functor0: function() {
    return functorList;
  }
};
var plusList = /* @__PURE__ */ function() {
  return {
    empty: Nil.value,
    Alt0: function() {
      return altList;
    }
  };
}();
var applicativeNonEmptyList = {
  pure: /* @__PURE__ */ function() {
    var $312 = singleton3(plusList);
    return function($313) {
      return NonEmptyList($312($313));
    };
  }(),
  Apply0: function() {
    return applyNonEmptyList;
  }
};

// output/Partial.Unsafe/foreign.js
var _unsafePartial = function(f) {
  return f();
};

// output/Partial/foreign.js
var _crashWith = function(msg) {
  throw new Error(msg);
};

// output/Partial/index.js
var crashWith = function() {
  return _crashWith;
};

// output/Partial.Unsafe/index.js
var crashWith2 = /* @__PURE__ */ crashWith();
var unsafePartial = _unsafePartial;
var unsafeCrashWith = function(msg) {
  return unsafePartial(function() {
    return crashWith2(msg);
  });
};

// output/Data.List.NonEmpty/index.js
var singleton4 = /* @__PURE__ */ function() {
  var $199 = singleton3(plusList);
  return function($200) {
    return NonEmptyList($199($200));
  };
}();

// output/Data.Map.Internal/index.js
var Leaf = /* @__PURE__ */ function() {
  function Leaf2() {
  }
  ;
  Leaf2.value = new Leaf2();
  return Leaf2;
}();
var Two = /* @__PURE__ */ function() {
  function Two2(value0, value1, value22, value32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
  }
  ;
  Two2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return new Two2(value0, value1, value22, value32);
        };
      };
    };
  };
  return Two2;
}();
var Three = /* @__PURE__ */ function() {
  function Three2(value0, value1, value22, value32, value42, value52, value62) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
    this.value4 = value42;
    this.value5 = value52;
    this.value6 = value62;
  }
  ;
  Three2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return function(value42) {
            return function(value52) {
              return function(value62) {
                return new Three2(value0, value1, value22, value32, value42, value52, value62);
              };
            };
          };
        };
      };
    };
  };
  return Three2;
}();
var TwoLeft = /* @__PURE__ */ function() {
  function TwoLeft2(value0, value1, value22) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
  }
  ;
  TwoLeft2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return new TwoLeft2(value0, value1, value22);
      };
    };
  };
  return TwoLeft2;
}();
var TwoRight = /* @__PURE__ */ function() {
  function TwoRight2(value0, value1, value22) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
  }
  ;
  TwoRight2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return new TwoRight2(value0, value1, value22);
      };
    };
  };
  return TwoRight2;
}();
var ThreeLeft = /* @__PURE__ */ function() {
  function ThreeLeft2(value0, value1, value22, value32, value42, value52) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
    this.value4 = value42;
    this.value5 = value52;
  }
  ;
  ThreeLeft2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return function(value42) {
            return function(value52) {
              return new ThreeLeft2(value0, value1, value22, value32, value42, value52);
            };
          };
        };
      };
    };
  };
  return ThreeLeft2;
}();
var ThreeMiddle = /* @__PURE__ */ function() {
  function ThreeMiddle2(value0, value1, value22, value32, value42, value52) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
    this.value4 = value42;
    this.value5 = value52;
  }
  ;
  ThreeMiddle2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return function(value42) {
            return function(value52) {
              return new ThreeMiddle2(value0, value1, value22, value32, value42, value52);
            };
          };
        };
      };
    };
  };
  return ThreeMiddle2;
}();
var ThreeRight = /* @__PURE__ */ function() {
  function ThreeRight2(value0, value1, value22, value32, value42, value52) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
    this.value4 = value42;
    this.value5 = value52;
  }
  ;
  ThreeRight2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return function(value42) {
            return function(value52) {
              return new ThreeRight2(value0, value1, value22, value32, value42, value52);
            };
          };
        };
      };
    };
  };
  return ThreeRight2;
}();
var KickUp = /* @__PURE__ */ function() {
  function KickUp2(value0, value1, value22, value32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
  }
  ;
  KickUp2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return new KickUp2(value0, value1, value22, value32);
        };
      };
    };
  };
  return KickUp2;
}();
var fromZipper = function($copy_dictOrd) {
  return function($copy_v) {
    return function($copy_tree) {
      var $tco_var_dictOrd = $copy_dictOrd;
      var $tco_var_v = $copy_v;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(dictOrd, v, tree) {
        if (v instanceof Nil) {
          $tco_done = true;
          return tree;
        }
        ;
        if (v instanceof Cons) {
          if (v.value0 instanceof TwoLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
            return;
          }
          ;
          if (v.value0 instanceof TwoRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
            return;
          }
          ;
          if (v.value0 instanceof ThreeLeft) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }
          ;
          if (v.value0 instanceof ThreeMiddle) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
            return;
          }
          ;
          if (v.value0 instanceof ThreeRight) {
            $tco_var_dictOrd = dictOrd;
            $tco_var_v = v.value1;
            $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 462, column 3 - line 467, column 88): " + [v.value0.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 459, column 1 - line 459, column 80): " + [v.constructor.name, tree.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
      }
      ;
      return $tco_result;
    };
  };
};
var insert2 = function(dictOrd) {
  var fromZipper1 = fromZipper(dictOrd);
  var compare4 = compare(dictOrd);
  return function(k) {
    return function(v) {
      var up = function($copy_v1) {
        return function($copy_v2) {
          var $tco_var_v1 = $copy_v1;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v1, v2) {
            if (v1 instanceof Nil) {
              $tco_done = true;
              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
            }
            ;
            if (v1 instanceof Cons) {
              if (v1.value0 instanceof TwoLeft) {
                $tco_done = true;
                return fromZipper1(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
              }
              ;
              if (v1.value0 instanceof TwoRight) {
                $tco_done = true;
                return fromZipper1(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
              }
              ;
              if (v1.value0 instanceof ThreeLeft) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }
              ;
              if (v1.value0 instanceof ThreeMiddle) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                return;
              }
              ;
              if (v1.value0 instanceof ThreeRight) {
                $tco_var_v1 = v1.value1;
                $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 5 - line 503, column 108): " + [v1.value0.constructor.name, v2.constructor.name]);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 3 - line 495, column 56): " + [v1.constructor.name, v2.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v1, $copy_v2);
          }
          ;
          return $tco_result;
        };
      };
      var down = function($copy_ctx) {
        return function($copy_v1) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(ctx, v1) {
            if (v1 instanceof Leaf) {
              $tco_done1 = true;
              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
            }
            ;
            if (v1 instanceof Two) {
              var v2 = compare4(k)(v1.value1);
              if (v2 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Two(v1.value0, k, v, v1.value3));
              }
              ;
              if (v2 instanceof LT) {
                $tco_var_ctx = new Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                $copy_v1 = v1.value0;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
              $copy_v1 = v1.value3;
              return;
            }
            ;
            if (v1 instanceof Three) {
              var v3 = compare4(k)(v1.value1);
              if (v3 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
              }
              ;
              var v4 = compare4(k)(v1.value4);
              if (v4 instanceof EQ) {
                $tco_done1 = true;
                return fromZipper1(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
              }
              ;
              if (v3 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value0;
                return;
              }
              ;
              if (v3 instanceof GT && v4 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                $copy_v1 = v1.value3;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
              $copy_v1 = v1.value6;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 478, column 3 - line 478, column 55): " + [ctx.constructor.name, v1.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return down(Nil.value);
    };
  };
};
var pop = function(dictOrd) {
  var fromZipper1 = fromZipper(dictOrd);
  var compare4 = compare(dictOrd);
  return function(k) {
    var up = function($copy_ctxs) {
      return function($copy_tree) {
        var $tco_var_ctxs = $copy_ctxs;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(ctxs, tree) {
          if (ctxs instanceof Nil) {
            $tco_done = true;
            return tree;
          }
          ;
          if (ctxs instanceof Cons) {
            if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
              return;
            }
            ;
            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
              $tco_var_ctxs = ctxs.value1;
              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
              return;
            }
            ;
            if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
            }
            ;
            if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }
            ;
            if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
            }
            ;
            if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
            }
            ;
            if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
              $tco_done = true;
              return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
            }
            ;
            $tco_done = true;
            return unsafeCrashWith("The impossible happened in partial function `up`.");
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 552, column 5 - line 573, column 86): " + [ctxs.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
        }
        ;
        return $tco_result;
      };
    };
    var removeMaxNode = function($copy_ctx) {
      return function($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done1 = false;
        var $tco_result;
        function $tco_loop(ctx, m) {
          if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
            $tco_done1 = true;
            return up(ctx)(Leaf.value);
          }
          ;
          if (m instanceof Two) {
            $tco_var_ctx = new Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }
          ;
          if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
            $tco_done1 = true;
            return up(new Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
          }
          ;
          if (m instanceof Three) {
            $tco_var_ctx = new Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }
          ;
          $tco_done1 = true;
          return unsafeCrashWith("The impossible happened in partial function `removeMaxNode`.");
        }
        ;
        while (!$tco_done1) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }
        ;
        return $tco_result;
      };
    };
    var maxNode = function($copy_m) {
      var $tco_done2 = false;
      var $tco_result;
      function $tco_loop(m) {
        if (m instanceof Two && m.value3 instanceof Leaf) {
          $tco_done2 = true;
          return {
            key: m.value1,
            value: m.value2
          };
        }
        ;
        if (m instanceof Two) {
          $copy_m = m.value3;
          return;
        }
        ;
        if (m instanceof Three && m.value6 instanceof Leaf) {
          $tco_done2 = true;
          return {
            key: m.value4,
            value: m.value5
          };
        }
        ;
        if (m instanceof Three) {
          $copy_m = m.value6;
          return;
        }
        ;
        $tco_done2 = true;
        return unsafeCrashWith("The impossible happened in partial function `maxNode`.");
      }
      ;
      while (!$tco_done2) {
        $tco_result = $tco_loop($copy_m);
      }
      ;
      return $tco_result;
    };
    var down = function($copy_ctx) {
      return function($copy_m) {
        var $tco_var_ctx = $copy_ctx;
        var $tco_done3 = false;
        var $tco_result;
        function $tco_loop(ctx, m) {
          if (m instanceof Leaf) {
            $tco_done3 = true;
            return Nothing.value;
          }
          ;
          if (m instanceof Two) {
            var v = compare4(k)(m.value1);
            if (m.value3 instanceof Leaf && v instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, up(ctx)(Leaf.value)));
            }
            ;
            if (v instanceof EQ) {
              var max7 = maxNode(m.value0);
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, removeMaxNode(new Cons(new TwoLeft(max7.key, max7.value, m.value3), ctx))(m.value0)));
            }
            ;
            if (v instanceof LT) {
              $tco_var_ctx = new Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
              $copy_m = m.value0;
              return;
            }
            ;
            $tco_var_ctx = new Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
            $copy_m = m.value3;
            return;
          }
          ;
          if (m instanceof Three) {
            var leaves = function() {
              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                return true;
              }
              ;
              return false;
            }();
            var v = compare4(k)(m.value4);
            var v3 = compare4(k)(m.value1);
            if (leaves && v3 instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, fromZipper1(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
            }
            ;
            if (leaves && v instanceof EQ) {
              $tco_done3 = true;
              return new Just(new Tuple(m.value5, fromZipper1(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
            }
            ;
            if (v3 instanceof EQ) {
              var max7 = maxNode(m.value0);
              $tco_done3 = true;
              return new Just(new Tuple(m.value2, removeMaxNode(new Cons(new ThreeLeft(max7.key, max7.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
            }
            ;
            if (v instanceof EQ) {
              var max7 = maxNode(m.value3);
              $tco_done3 = true;
              return new Just(new Tuple(m.value5, removeMaxNode(new Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max7.key, max7.value, m.value6), ctx))(m.value3)));
            }
            ;
            if (v3 instanceof LT) {
              $tco_var_ctx = new Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value0;
              return;
            }
            ;
            if (v3 instanceof GT && v instanceof LT) {
              $tco_var_ctx = new Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
              $copy_m = m.value3;
              return;
            }
            ;
            $tco_var_ctx = new Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
            $copy_m = m.value6;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 16 - line 548, column 80): " + [m.constructor.name]);
        }
        ;
        while (!$tco_done3) {
          $tco_result = $tco_loop($tco_var_ctx, $copy_m);
        }
        ;
        return $tco_result;
      };
    };
    return down(Nil.value);
  };
};
var foldableMap = {
  foldr: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(z)(m.value3)))(m.value0);
        }
        ;
        if (m instanceof Three) {
          return foldr(foldableMap)(f)(f(m.value2)(foldr(foldableMap)(f)(f(m.value5)(foldr(foldableMap)(f)(z)(m.value6)))(m.value3)))(m.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 133, column 17 - line 136, column 85): " + [m.constructor.name]);
      };
    };
  },
  foldl: function(f) {
    return function(z) {
      return function(m) {
        if (m instanceof Leaf) {
          return z;
        }
        ;
        if (m instanceof Two) {
          return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3);
        }
        ;
        if (m instanceof Three) {
          return foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(f(foldl(foldableMap)(f)(z)(m.value0))(m.value2))(m.value3))(m.value5))(m.value6);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 137, column 17 - line 140, column 85): " + [m.constructor.name]);
      };
    };
  },
  foldMap: function(dictMonoid) {
    var mempty10 = mempty(dictMonoid);
    var append22 = append(dictMonoid.Semigroup0());
    return function(f) {
      return function(m) {
        if (m instanceof Leaf) {
          return mempty10;
        }
        ;
        if (m instanceof Two) {
          return append22(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append22(f(m.value2))(foldMap(foldableMap)(dictMonoid)(f)(m.value3)));
        }
        ;
        if (m instanceof Three) {
          return append22(foldMap(foldableMap)(dictMonoid)(f)(m.value0))(append22(f(m.value2))(append22(foldMap(foldableMap)(dictMonoid)(f)(m.value3))(append22(f(m.value5))(foldMap(foldableMap)(dictMonoid)(f)(m.value6)))));
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 141, column 17 - line 144, column 93): " + [m.constructor.name]);
      };
    };
  }
};
var empty2 = /* @__PURE__ */ function() {
  return Leaf.value;
}();
var $$delete2 = function(dictOrd) {
  var pop1 = pop(dictOrd);
  return function(k) {
    return function(m) {
      return maybe(m)(snd)(pop1(k)(m));
    };
  };
};

// output/Data.Nullable/foreign.js
var nullImpl = null;
function nullable(a3, r, f) {
  return a3 == null ? r : f(a3);
}
function notNull(x) {
  return x;
}

// output/Data.Nullable/index.js
var toNullable = /* @__PURE__ */ maybe(nullImpl)(notNull);
var toMaybe = function(n) {
  return nullable(n, Nothing.value, Just.create);
};

// output/Data.Variant/index.js
var onMatch = function() {
  return function() {
    return function() {
      return function(r) {
        return function(k) {
          return function(v) {
            if (unsafeHas(v.type)(r)) {
              return unsafeGet(v.type)(r)(v.value);
            }
            ;
            return k(v);
          };
        };
      };
    };
  };
};
var onMatch1 = /* @__PURE__ */ onMatch()()();
var on2 = function() {
  return function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(p2) {
      return function(f) {
        return function(g2) {
          return function(r) {
            if (r.type === reflectSymbol2(p2)) {
              return f(r.value);
            }
            ;
            return g2(r);
          };
        };
      };
    };
  };
};
var inj = function() {
  return function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(p2) {
      return function(value12) {
        return {
          type: reflectSymbol2(p2),
          value: value12
        };
      };
    };
  };
};
var case_ = function(r) {
  return unsafeCrashWith("Data.Variant: pattern match failure [" + (r.type + "]"));
};
var match = function() {
  return function() {
    return function() {
      return function(r) {
        return onMatch1(r)(case_);
      };
    };
  };
};

// output/Effect.Uncurried/foreign.js
var mkEffectFn1 = function mkEffectFn12(fn) {
  return function(x) {
    return fn(x)();
  };
};
var mkEffectFn2 = function mkEffectFn22(fn) {
  return function(a3, b3) {
    return fn(a3)(b3)();
  };
};
var runEffectFn1 = function runEffectFn12(fn) {
  return function(a3) {
    return function() {
      return fn(a3);
    };
  };
};
var runEffectFn2 = function runEffectFn22(fn) {
  return function(a3) {
    return function(b3) {
      return function() {
        return fn(a3, b3);
      };
    };
  };
};

// output/Effect.Unsafe/foreign.js
var unsafePerformEffect = function(f) {
  return f();
};

// output/Foreign/foreign.js
function typeOf(value12) {
  return typeof value12;
}
function tagOf(value12) {
  return Object.prototype.toString.call(value12).slice(8, -1);
}
function isNull(value12) {
  return value12 === null;
}
function isUndefined(value12) {
  return value12 === void 0;
}
var isArray = Array.isArray || function(value12) {
  return Object.prototype.toString.call(value12) === "[object Array]";
};

// output/Data.String.CodeUnits/foreign.js
var singleton5 = function(c2) {
  return c2;
};
var length3 = function(s2) {
  return s2.length;
};
var drop3 = function(n) {
  return function(s2) {
    return s2.substring(n);
  };
};

// output/Data.String.Unsafe/foreign.js
var charAt = function(i3) {
  return function(s2) {
    if (i3 >= 0 && i3 < s2.length)
      return s2.charAt(i3);
    throw new Error("Data.String.Unsafe.charAt: Invalid index.");
  };
};

// output/Foreign/index.js
var show2 = /* @__PURE__ */ show(showString);
var show1 = /* @__PURE__ */ show(showInt);
var ForeignError = /* @__PURE__ */ function() {
  function ForeignError2(value0) {
    this.value0 = value0;
  }
  ;
  ForeignError2.create = function(value0) {
    return new ForeignError2(value0);
  };
  return ForeignError2;
}();
var TypeMismatch = /* @__PURE__ */ function() {
  function TypeMismatch2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  TypeMismatch2.create = function(value0) {
    return function(value1) {
      return new TypeMismatch2(value0, value1);
    };
  };
  return TypeMismatch2;
}();
var ErrorAtIndex = /* @__PURE__ */ function() {
  function ErrorAtIndex2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ErrorAtIndex2.create = function(value0) {
    return function(value1) {
      return new ErrorAtIndex2(value0, value1);
    };
  };
  return ErrorAtIndex2;
}();
var ErrorAtProperty = /* @__PURE__ */ function() {
  function ErrorAtProperty2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  ErrorAtProperty2.create = function(value0) {
    return function(value1) {
      return new ErrorAtProperty2(value0, value1);
    };
  };
  return ErrorAtProperty2;
}();
var unsafeToForeign = unsafeCoerce2;
var unsafeFromForeign = unsafeCoerce2;
var showForeignError = {
  show: function(v) {
    if (v instanceof ForeignError) {
      return "(ForeignError " + (show2(v.value0) + ")");
    }
    ;
    if (v instanceof ErrorAtIndex) {
      return "(ErrorAtIndex " + (show1(v.value0) + (" " + (show(showForeignError)(v.value1) + ")")));
    }
    ;
    if (v instanceof ErrorAtProperty) {
      return "(ErrorAtProperty " + (show2(v.value0) + (" " + (show(showForeignError)(v.value1) + ")")));
    }
    ;
    if (v instanceof TypeMismatch) {
      return "(TypeMismatch " + (show2(v.value0) + (" " + (show2(v.value1) + ")")));
    }
    ;
    throw new Error("Failed pattern match at Foreign (line 69, column 1 - line 73, column 89): " + [v.constructor.name]);
  }
};
var renderForeignError = function(v) {
  if (v instanceof ForeignError) {
    return v.value0;
  }
  ;
  if (v instanceof ErrorAtIndex) {
    return "Error at array index " + (show1(v.value0) + (": " + renderForeignError(v.value1)));
  }
  ;
  if (v instanceof ErrorAtProperty) {
    return "Error at property " + (show2(v.value0) + (": " + renderForeignError(v.value1)));
  }
  ;
  if (v instanceof TypeMismatch) {
    return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
  }
  ;
  throw new Error("Failed pattern match at Foreign (line 78, column 1 - line 78, column 45): " + [v.constructor.name]);
};
var fail = function(dictMonad) {
  var $153 = throwError(monadThrowExceptT(dictMonad));
  return function($154) {
    return $153(singleton4($154));
  };
};
var readArray = function(dictMonad) {
  var pure112 = pure(applicativeExceptT(dictMonad));
  var fail1 = fail(dictMonad);
  return function(value12) {
    if (isArray(value12)) {
      return pure112(unsafeFromForeign(value12));
    }
    ;
    if (otherwise) {
      return fail1(new TypeMismatch("array", tagOf(value12)));
    }
    ;
    throw new Error("Failed pattern match at Foreign (line 164, column 1 - line 164, column 99): " + [value12.constructor.name]);
  };
};
var unsafeReadTagged = function(dictMonad) {
  var pure112 = pure(applicativeExceptT(dictMonad));
  var fail1 = fail(dictMonad);
  return function(tag) {
    return function(value12) {
      if (tagOf(value12) === tag) {
        return pure112(unsafeFromForeign(value12));
      }
      ;
      if (otherwise) {
        return fail1(new TypeMismatch(tag, tagOf(value12)));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag.constructor.name, value12.constructor.name]);
    };
  };
};
var readString = function(dictMonad) {
  return unsafeReadTagged(dictMonad)("String");
};

// output/Foreign.Index/foreign.js
function unsafeReadPropImpl(f, s2, key, value12) {
  return value12 == null ? f : s2(value12[key]);
}

// output/Foreign.Index/index.js
var unsafeReadProp = function(dictMonad) {
  var fail5 = fail(dictMonad);
  var pure33 = pure(applicativeExceptT(dictMonad));
  return function(k) {
    return function(value12) {
      return unsafeReadPropImpl(fail5(new TypeMismatch("object", typeOf(value12))), pure33, k, value12);
    };
  };
};
var readProp = function(dictMonad) {
  return unsafeReadProp(dictMonad);
};

// output/Foreign.Object/foreign.js
function _copyST(m) {
  return function() {
    var r = {};
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r[k] = m[k];
      }
    }
    return r;
  };
}
var empty3 = {};
function runST(f) {
  return f();
}
function _fmapObject(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(m0[k]);
    }
  }
  return m;
}
function _mapWithKey(m0, f) {
  var m = {};
  for (var k in m0) {
    if (hasOwnProperty.call(m0, k)) {
      m[k] = f(k)(m0[k]);
    }
  }
  return m;
}
function _foldM(bind32) {
  return function(f) {
    return function(mz) {
      return function(m) {
        var acc = mz;
        function g2(k2) {
          return function(z) {
            return f(z)(k2)(m[k2]);
          };
        }
        for (var k in m) {
          if (hasOwnProperty.call(m, k)) {
            acc = bind32(acc)(g2(k));
          }
        }
        return acc;
      };
    };
  };
}
function _lookup(no, yes, k, m) {
  return k in m ? yes(m[k]) : no;
}
function toArrayWithKey(f) {
  return function(m) {
    var r = [];
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        r.push(f(k)(m[k]));
      }
    }
    return r;
  };
}
var keys = Object.keys || toArrayWithKey(function(k) {
  return function() {
    return k;
  };
});

// output/Data.Function.Uncurried/foreign.js
var mkFn2 = function(fn) {
  return function(a3, b3) {
    return fn(a3)(b3);
  };
};
var runFn2 = function(fn) {
  return function(a3) {
    return function(b3) {
      return fn(a3, b3);
    };
  };
};
var runFn3 = function(fn) {
  return function(a3) {
    return function(b3) {
      return function(c2) {
        return fn(a3, b3, c2);
      };
    };
  };
};
var runFn4 = function(fn) {
  return function(a3) {
    return function(b3) {
      return function(c2) {
        return function(d) {
          return fn(a3, b3, c2, d);
        };
      };
    };
  };
};

// output/Foreign.Object.ST/foreign.js
var newImpl = function() {
  return {};
};
function poke2(k) {
  return function(v) {
    return function(m) {
      return function() {
        m[k] = v;
        return m;
      };
    };
  };
}

// output/Foreign.Object/index.js
var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindST);
var $$void3 = /* @__PURE__ */ $$void(functorST);
var foldr3 = /* @__PURE__ */ foldr(foldableArray);
var identity6 = /* @__PURE__ */ identity(categoryFn);
var values = /* @__PURE__ */ toArrayWithKey(function(v) {
  return function(v1) {
    return v1;
  };
});
var thawST = _copyST;
var singleton6 = function(k) {
  return function(v) {
    return runST(bindFlipped3(poke2(k)(v))(newImpl));
  };
};
var mutate = function(f) {
  return function(m) {
    return runST(function __do6() {
      var s2 = thawST(m)();
      f(s2)();
      return s2;
    });
  };
};
var mapWithKey = function(f) {
  return function(m) {
    return _mapWithKey(m, f);
  };
};
var lookup2 = /* @__PURE__ */ function() {
  return runFn4(_lookup)(Nothing.value)(Just.create);
}();
var insert3 = function(k) {
  return function(v) {
    return mutate(poke2(k)(v));
  };
};
var functorObject = {
  map: function(f) {
    return function(m) {
      return _fmapObject(m, f);
    };
  }
};
var functorWithIndexObject = {
  mapWithIndex: mapWithKey,
  Functor0: function() {
    return functorObject;
  }
};
var fromHomogeneous = function() {
  return unsafeCoerce2;
};
var fromFoldable3 = function(dictFoldable) {
  var fromFoldable1 = fromFoldable(dictFoldable);
  return function(l) {
    return runST(function __do6() {
      var s2 = newImpl();
      foreach(fromFoldable1(l))(function(v) {
        return $$void3(poke2(v.value0)(v.value1)(s2));
      })();
      return s2;
    });
  };
};
var foldM3 = function(dictMonad) {
  var bind112 = bind(dictMonad.Bind1());
  var pure112 = pure(dictMonad.Applicative0());
  return function(f) {
    return function(z) {
      return _foldM(bind112)(f)(pure112(z));
    };
  };
};
var foldM1 = /* @__PURE__ */ foldM3(monadST);
var unionWith = function(f) {
  return function(m1) {
    return function(m2) {
      return mutate(function(s1) {
        return foldM1(function(s2) {
          return function(k) {
            return function(v1) {
              return poke2(k)(_lookup(v1, function(v2) {
                return f(v1)(v2);
              }, k, m2))(s2);
            };
          };
        })(s1)(m1);
      })(m2);
    };
  };
};
var semigroupObject = function(dictSemigroup) {
  return {
    append: unionWith(append(dictSemigroup))
  };
};
var monoidObject = function(dictSemigroup) {
  var semigroupObject1 = semigroupObject(dictSemigroup);
  return {
    mempty: empty3,
    Semigroup0: function() {
      return semigroupObject1;
    }
  };
};
var fold2 = /* @__PURE__ */ _foldM(applyFlipped);
var foldMap2 = function(dictMonoid) {
  var append15 = append(dictMonoid.Semigroup0());
  var mempty10 = mempty(dictMonoid);
  return function(f) {
    return fold2(function(acc) {
      return function(k) {
        return function(v) {
          return append15(acc)(f(k)(v));
        };
      };
    })(mempty10);
  };
};
var foldableObject = {
  foldl: function(f) {
    return fold2(function(z) {
      return function(v) {
        return f(z);
      };
    });
  },
  foldr: function(f) {
    return function(z) {
      return function(m) {
        return foldr3(f)(z)(values(m));
      };
    };
  },
  foldMap: function(dictMonoid) {
    var foldMap13 = foldMap2(dictMonoid);
    return function(f) {
      return foldMap13($$const(f));
    };
  }
};
var foldableWithIndexObject = {
  foldlWithIndex: function(f) {
    return fold2(flip(f));
  },
  foldrWithIndex: function(f) {
    return function(z) {
      return function(m) {
        return foldr3(uncurry(f))(z)(toArrayWithKey(Tuple.create)(m));
      };
    };
  },
  foldMapWithIndex: function(dictMonoid) {
    return foldMap2(dictMonoid);
  },
  Foldable0: function() {
    return foldableObject;
  }
};
var traversableWithIndexObject = {
  traverseWithIndex: function(dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply8 = apply(Apply0);
    var map35 = map(Apply0.Functor0());
    var pure112 = pure(dictApplicative);
    return function(f) {
      return function(ms) {
        return fold2(function(acc) {
          return function(k) {
            return function(v) {
              return apply8(map35(flip(insert3(k)))(acc))(f(k)(v));
            };
          };
        })(pure112(empty3))(ms);
      };
    };
  },
  FunctorWithIndex0: function() {
    return functorWithIndexObject;
  },
  FoldableWithIndex1: function() {
    return foldableWithIndexObject;
  },
  Traversable2: function() {
    return traversableObject;
  }
};
var traversableObject = {
  traverse: function(dictApplicative) {
    var $93 = traverseWithIndex(traversableWithIndexObject)(dictApplicative);
    return function($94) {
      return $93($$const($94));
    };
  },
  sequence: function(dictApplicative) {
    return traverse(traversableObject)(dictApplicative)(identity6);
  },
  Functor0: function() {
    return functorObject;
  },
  Foldable1: function() {
    return foldableObject;
  }
};

// output/Record/index.js
var insert4 = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function() {
      return function(l) {
        return function(a3) {
          return function(r) {
            return unsafeSet(reflectSymbol2(l))(a3)(r);
          };
        };
      };
    };
  };
};
var get = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function(l) {
      return function(r) {
        return unsafeGet(reflectSymbol2(l))(r);
      };
    };
  };
};
var $$delete3 = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function() {
    return function() {
      return function(l) {
        return function(r) {
          return unsafeDelete(reflectSymbol2(l))(r);
        };
      };
    };
  };
};

// output/Record.Builder/foreign.js
function copyRecord(rec) {
  var copy3 = {};
  for (var key in rec) {
    if ({}.hasOwnProperty.call(rec, key)) {
      copy3[key] = rec[key];
    }
  }
  return copy3;
}
function unsafeInsert(l) {
  return function(a3) {
    return function(rec) {
      rec[l] = a3;
      return rec;
    };
  };
}
function unsafeModify(l) {
  return function(f) {
    return function(rec) {
      rec[l] = f(rec[l]);
      return rec;
    };
  };
}

// output/Record.Builder/index.js
var semigroupoidBuilder = semigroupoidFn;
var modify4 = function() {
  return function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(l) {
        return function(f) {
          return function(r1) {
            return unsafeModify(reflectSymbol2(l))(f)(r1);
          };
        };
      };
    };
  };
};
var insert5 = function() {
  return function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(l) {
        return function(a3) {
          return function(r1) {
            return unsafeInsert(reflectSymbol2(l))(a3)(r1);
          };
        };
      };
    };
  };
};
var categoryBuilder = categoryFn;
var build = function(v) {
  return function(r1) {
    return v(copyRecord(r1));
  };
};

// output/Yoga.JSON/index.js
var identity7 = /* @__PURE__ */ identity(categoryBuilder);
var fail2 = /* @__PURE__ */ fail(monadIdentity);
var applicativeExceptT2 = /* @__PURE__ */ applicativeExceptT(monadIdentity);
var pure3 = /* @__PURE__ */ pure(applicativeExceptT2);
var map9 = /* @__PURE__ */ map(functorArray);
var compose1 = /* @__PURE__ */ compose(semigroupoidBuilder);
var insert6 = /* @__PURE__ */ insert5()();
var on3 = /* @__PURE__ */ on2();
var map1 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
var map22 = /* @__PURE__ */ map(functorNonEmptyList);
var bindExceptT2 = /* @__PURE__ */ bindExceptT(monadIdentity);
var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindExceptT2);
var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(bindExceptT2);
var sequence2 = /* @__PURE__ */ sequence(traversableObject)(applicativeExceptT2);
var alt2 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
var inj2 = /* @__PURE__ */ inj();
var bind3 = /* @__PURE__ */ bind(bindExceptT2);
var readProp2 = /* @__PURE__ */ readProp(monadIdentity);
var traverseWithIndex2 = /* @__PURE__ */ traverseWithIndex(traversableWithIndexArray)(applicativeExceptT2);
var readArray2 = /* @__PURE__ */ readArray(monadIdentity);
var applyExceptT2 = /* @__PURE__ */ applyExceptT(monadIdentity);
var pure1 = /* @__PURE__ */ pure(applicativeNonEmptyList);
var apply3 = /* @__PURE__ */ apply(applyExceptT2);
var writeForeignVariantNilRow = {
  writeVariantImpl: function(v) {
    return function(v1) {
      return unsafeCrashWith("Attempted to write empty variant.");
    };
  }
};
var writeForeignString = {
  writeImpl: unsafeToForeign
};
var writeForeignForeign = {
  writeImpl: /* @__PURE__ */ identity(categoryFn)
};
var writeForeignFieldsNilRowR = {
  writeImplFields: function(v) {
    return function(v1) {
      return identity7;
    };
  }
};
var readForeignVariantNil = {
  readVariantImpl: function(v) {
    return function(v1) {
      return fail2(new ForeignError("Unable to match any variant member."));
    };
  }
};
var readForeignString = {
  readImpl: /* @__PURE__ */ readString(monadIdentity)
};
var readForeignForeign = {
  readImpl: pure3
};
var readForeignFieldsNilRowRo = {
  getFields: function(v) {
    return function(v1) {
      return pure3(identity7);
    };
  }
};
var writeVariantImpl = function(dict) {
  return dict.writeVariantImpl;
};
var writeForeignVariant = function() {
  return function(dictWriteForeignVariant) {
    var writeVariantImpl1 = writeVariantImpl(dictWriteForeignVariant);
    return {
      writeImpl: function(variant) {
        return writeVariantImpl1($$Proxy.value)(variant);
      }
    };
  };
};
var writeImplFields = function(dict) {
  return dict.writeImplFields;
};
var writeForeignRecord = function() {
  return function(dictWriteForeignFields) {
    var writeImplFields1 = writeImplFields(dictWriteForeignFields);
    return {
      writeImpl: function(rec) {
        var steps2 = writeImplFields1($$Proxy.value)(rec);
        return unsafeToForeign(build(steps2)({}));
      }
    };
  };
};
var writeImpl = function(dict) {
  return dict.writeImpl;
};
var writeJSON = function(dictWriteForeign) {
  var $271 = writeImpl(dictWriteForeign);
  return function($272) {
    return _unsafeStringify($271($272));
  };
};
var writeForeignArray = function(dictWriteForeign) {
  var writeImpl32 = writeImpl(dictWriteForeign);
  return {
    writeImpl: function(xs) {
      return unsafeToForeign(map9(writeImpl32)(xs));
    }
  };
};
var writeImpl1 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignArray(writeForeignForeign));
var writeForeignFieldsCons = function(dictIsSymbol) {
  var get3 = get(dictIsSymbol)();
  var insert32 = insert6(dictIsSymbol);
  return function(dictWriteForeign) {
    var writeImpl32 = writeImpl(dictWriteForeign);
    return function(dictWriteForeignFields) {
      var writeImplFields1 = writeImplFields(dictWriteForeignFields);
      return function() {
        return function() {
          return function() {
            return {
              writeImplFields: function(v) {
                return function(rec) {
                  var rest = writeImplFields1($$Proxy.value)(rec);
                  var value12 = writeImpl32(get3($$Proxy.value)(rec));
                  var result = compose1(insert32($$Proxy.value)(value12))(rest);
                  return result;
                };
              }
            };
          };
        };
      };
    };
  };
};
var writeForeignObject = function(dictWriteForeign) {
  return {
    writeImpl: function() {
      var $277 = mapWithKey($$const(writeImpl(dictWriteForeign)));
      return function($278) {
        return unsafeToForeign($277($278));
      };
    }()
  };
};
var writeImpl2 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignObject(writeForeignForeign));
var writeForeignTuple = function(dictWriteForeign) {
  var writeImpl32 = writeImpl(dictWriteForeign);
  return function(dictWriteForeign1) {
    var writeImpl42 = writeImpl(dictWriteForeign1);
    return {
      writeImpl: function(v) {
        return writeImpl1([writeImpl32(v.value0), writeImpl42(v.value1)]);
      }
    };
  };
};
var writeForeignVariantCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  var on1 = on3(dictIsSymbol);
  return function(dictWriteForeign) {
    var writeImpl32 = writeImpl(dictWriteForeign);
    return function() {
      return function(dictWriteForeignVariant) {
        var writeVariantImpl1 = writeVariantImpl(dictWriteForeignVariant);
        return {
          writeVariantImpl: function(v) {
            return function(variant) {
              var name15 = reflectSymbol2($$Proxy.value);
              var writeVariant = function(value12) {
                return writeImpl2(singleton6(name15)(writeImpl32(value12)));
              };
              return on1($$Proxy.value)(writeVariant)(writeVariantImpl1($$Proxy.value))(variant);
            };
          }
        };
      };
    };
  };
};
var write3 = function(dictWriteForeign) {
  return writeImpl(dictWriteForeign);
};
var $$undefined = _undefined;
var writeForeignMaybe = function(dictWriteForeign) {
  return {
    writeImpl: maybe($$undefined)(writeImpl(dictWriteForeign))
  };
};
var readVariantImpl = function(dict) {
  return dict.readVariantImpl;
};
var readForeignVariant = function() {
  return function(dictReadForeignVariant) {
    var readVariantImpl1 = readVariantImpl(dictReadForeignVariant);
    return {
      readImpl: function(o) {
        return readVariantImpl1($$Proxy.value)(o);
      }
    };
  };
};
var readImpl = function(dict) {
  return dict.readImpl;
};
var readForeignMaybe = function(dictReadForeign) {
  return {
    readImpl: function() {
      var readNullOrUndefined = function(v) {
        return function(value12) {
          if (isNull(value12) || isUndefined(value12)) {
            return pure3(Nothing.value);
          }
          ;
          return map1(Just.create)(v(value12));
        };
      };
      return readNullOrUndefined(readImpl(dictReadForeign));
    }()
  };
};
var readForeignObject = function(dictReadForeign) {
  return {
    readImpl: function() {
      var readObject$prime = function(value12) {
        if (tagOf(value12) === "Object") {
          return pure3(unsafeFromForeign(value12));
        }
        ;
        if (otherwise) {
          return fail2(new TypeMismatch("Object", tagOf(value12)));
        }
        ;
        throw new Error("Failed pattern match at Yoga.JSON (line 207, column 5 - line 207, column 47): " + [value12.constructor.name]);
      };
      return composeKleisliFlipped2(function() {
        var $291 = mapWithKey($$const(readImpl(dictReadForeign)));
        return function($292) {
          return sequence2($291($292));
        };
      }())(readObject$prime);
    }()
  };
};
var readForeignVariantCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  var inj12 = inj2(dictIsSymbol);
  return function(dictReadForeign) {
    var readImpl22 = readImpl(dictReadForeign);
    return function() {
      return function(dictReadForeignVariant) {
        var readVariantImpl1 = readVariantImpl(dictReadForeignVariant);
        return {
          readVariantImpl: function(v) {
            return function(o) {
              var name15 = reflectSymbol2($$Proxy.value);
              return alt2(readVariantImpl1($$Proxy.value)(o))(map1(function(v1) {
                return inj12($$Proxy.value)(v1);
              })(bind3(readProp2(name15)(o))(readImpl22)));
            };
          }
        };
      };
    };
  };
};
var readAtIdx = function(dictReadForeign) {
  var readImpl22 = readImpl(dictReadForeign);
  return function(i3) {
    return function(f) {
      return withExcept(map22(ErrorAtIndex.create(i3)))(readImpl22(f));
    };
  };
};
var readForeignArray = function(dictReadForeign) {
  return {
    readImpl: composeKleisliFlipped2(traverseWithIndex2(readAtIdx(dictReadForeign)))(readArray2)
  };
};
var read$prime = function(dictReadForeign) {
  return readImpl(dictReadForeign);
};
var read3 = function(dictReadForeign) {
  var $300 = readImpl(dictReadForeign);
  return function($301) {
    return runExcept($300($301));
  };
};
var parseJSON = /* @__PURE__ */ function() {
  var $304 = lmap(bifunctorEither)(function($307) {
    return pure1(ForeignError.create(message($307)));
  });
  var $305 = runEffectFn1(_parseJSON);
  return function($306) {
    return ExceptT(Identity($304(unsafePerformEffect($$try($305($306))))));
  };
}();
var readJSON = function(dictReadForeign) {
  var $308 = composeKleisliFlipped2(readImpl(dictReadForeign))(parseJSON);
  return function($309) {
    return runExcept($308($309));
  };
};
var getFields = function(dict) {
  return dict.getFields;
};
var readForeignFieldsCons = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  var insert32 = insert6(dictIsSymbol);
  return function(dictReadForeign) {
    var readImpl22 = readImpl(dictReadForeign);
    return function(dictReadForeignFields) {
      var getFields1 = getFields(dictReadForeignFields);
      return function() {
        return function() {
          return {
            getFields: function(v) {
              return function(obj) {
                var rest = getFields1($$Proxy.value)(obj);
                var name15 = reflectSymbol2($$Proxy.value);
                var withExcept$prime = withExcept(map22(ErrorAtProperty.create(name15)));
                var value12 = withExcept$prime(bindFlipped4(readImpl22)(readProp2(name15)(obj)));
                var first2 = map1(insert32($$Proxy.value))(value12);
                return apply3(map1(compose1)(first2))(rest);
              };
            }
          };
        };
      };
    };
  };
};
var readForeignRecord = function() {
  return function(dictReadForeignFields) {
    var getFields1 = getFields(dictReadForeignFields);
    return {
      readImpl: function(o) {
        return map1(flip(build)({}))(getFields1($$Proxy.value)(o));
      }
    };
  };
};

// output/Yoga.JSON.Generics.EnumSumRep/index.js
var bind4 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadIdentity));
var readImpl2 = /* @__PURE__ */ readImpl(readForeignString);
var pure4 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadIdentity));
var fail3 = /* @__PURE__ */ fail(monadIdentity);
var writeImpl3 = /* @__PURE__ */ writeImpl(writeForeignString);
var map10 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
var alt3 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
var genericEnumSumRepConstruc = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return {
    genericEnumReadForeign: function(f) {
      var name15 = reflectSymbol2($$Proxy.value);
      return bind4(readImpl2(f))(function(s2) {
        var $35 = s2 === name15;
        if ($35) {
          return pure4(NoArguments.value);
        }
        ;
        return fail3(ForeignError.create("Enum string " + (s2 + (" did not match expected string " + name15))));
      });
    },
    genericEnumWriteForeign: function(v) {
      return writeImpl3(reflectSymbol2($$Proxy.value));
    }
  };
};
var genericEnumWriteForeign = function(dict) {
  return dict.genericEnumWriteForeign;
};
var genericWriteForeignEnum = function(dictGeneric) {
  var from3 = from(dictGeneric);
  return function(dictGenericEnumSumRep) {
    var genericEnumWriteForeign1 = genericEnumWriteForeign(dictGenericEnumSumRep);
    return function(a3) {
      return genericEnumWriteForeign1(from3(a3));
    };
  };
};
var genericEnumReadForeign = function(dict) {
  return dict.genericEnumReadForeign;
};
var genericReadForeignEnum = function(dictGeneric) {
  var to2 = to(dictGeneric);
  return function(dictGenericEnumSumRep) {
    var genericEnumReadForeign1 = genericEnumReadForeign(dictGenericEnumSumRep);
    return function(f) {
      return map10(to2)(genericEnumReadForeign1(f));
    };
  };
};
var genericEnumSumRepSum = function(dictGenericEnumSumRep) {
  var genericEnumReadForeign1 = genericEnumReadForeign(dictGenericEnumSumRep);
  var genericEnumWriteForeign1 = genericEnumWriteForeign(dictGenericEnumSumRep);
  return function(dictGenericEnumSumRep1) {
    var genericEnumReadForeign2 = genericEnumReadForeign(dictGenericEnumSumRep1);
    var genericEnumWriteForeign2 = genericEnumWriteForeign(dictGenericEnumSumRep1);
    return {
      genericEnumReadForeign: function(f) {
        return alt3(map10(Inl.create)(genericEnumReadForeign1(f)))(map10(Inr.create)(genericEnumReadForeign2(f)));
      },
      genericEnumWriteForeign: function(v) {
        if (v instanceof Inl) {
          return genericEnumWriteForeign1(v.value0);
        }
        ;
        if (v instanceof Inr) {
          return genericEnumWriteForeign2(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Yoga.JSON.Generics.EnumSumRep (line 38, column 29 - line 40, column 43): " + [v.constructor.name]);
      }
    };
  };
};

// output/Backend.Tool.Types/index.js
var genericEnumSumRepSum2 = /* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
  reflectSymbol: function() {
    return "NPM";
  }
}))(/* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
  reflectSymbol: function() {
    return "Spago";
  }
}))(/* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
  reflectSymbol: function() {
    return "Purs";
  }
}))(/* @__PURE__ */ genericEnumSumRepConstruc({
  reflectSymbol: function() {
    return "DhallToJSON";
  }
}))));
var genericEnumConstructor2 = /* @__PURE__ */ genericEnumConstructor(genericEnumNoArguments);
var genericTopConstructor2 = /* @__PURE__ */ genericTopConstructor(genericTopNoArguments);
var genericEnumSum2 = /* @__PURE__ */ genericEnumSum(genericEnumConstructor2)(genericTopConstructor2);
var genericBottomConstructor2 = /* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments);
var genericBottomSum2 = /* @__PURE__ */ genericBottomSum(genericBottomConstructor2);
var genericEnumSum1 = /* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(genericEnumConstructor2)(genericBottomConstructor2))(genericBottomSum2))(genericBottomSum2);
var NPM = /* @__PURE__ */ function() {
  function NPM2() {
  }
  ;
  NPM2.value = new NPM2();
  return NPM2;
}();
var Spago = /* @__PURE__ */ function() {
  function Spago2() {
  }
  ;
  Spago2.value = new Spago2();
  return Spago2;
}();
var Purs = /* @__PURE__ */ function() {
  function Purs2() {
  }
  ;
  Purs2.value = new Purs2();
  return Purs2;
}();
var DhallToJSON = /* @__PURE__ */ function() {
  function DhallToJSON2() {
  }
  ;
  DhallToJSON2.value = new DhallToJSON2();
  return DhallToJSON2;
}();
var writeForeignToolPath = writeForeignString;
var genericTool_ = {
  to: function(x) {
    if (x instanceof Inl) {
      return NPM.value;
    }
    ;
    if (x instanceof Inr && x.value0 instanceof Inl) {
      return Spago.value;
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
      return Purs.value;
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
      return DhallToJSON.value;
    }
    ;
    throw new Error("Failed pattern match at Backend.Tool.Types (line 32, column 1 - line 32, column 31): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof NPM) {
      return new Inl(NoArguments.value);
    }
    ;
    if (x instanceof Spago) {
      return new Inr(new Inl(NoArguments.value));
    }
    ;
    if (x instanceof Purs) {
      return new Inr(new Inr(new Inl(NoArguments.value)));
    }
    ;
    if (x instanceof DhallToJSON) {
      return new Inr(new Inr(new Inr(NoArguments.value)));
    }
    ;
    throw new Error("Failed pattern match at Backend.Tool.Types (line 32, column 1 - line 32, column 31): " + [x.constructor.name]);
  }
};
var writeForeignTool = {
  writeImpl: /* @__PURE__ */ genericWriteForeignEnum(genericTool_)(genericEnumSumRepSum2)
};
var eqTool = {
  eq: function(x) {
    return function(y) {
      if (x instanceof NPM && y instanceof NPM) {
        return true;
      }
      ;
      if (x instanceof Spago && y instanceof Spago) {
        return true;
      }
      ;
      if (x instanceof Purs && y instanceof Purs) {
        return true;
      }
      ;
      if (x instanceof DhallToJSON && y instanceof DhallToJSON) {
        return true;
      }
      ;
      return false;
    };
  }
};
var ordTool = {
  compare: function(x) {
    return function(y) {
      if (x instanceof NPM && y instanceof NPM) {
        return EQ.value;
      }
      ;
      if (x instanceof NPM) {
        return LT.value;
      }
      ;
      if (y instanceof NPM) {
        return GT.value;
      }
      ;
      if (x instanceof Spago && y instanceof Spago) {
        return EQ.value;
      }
      ;
      if (x instanceof Spago) {
        return LT.value;
      }
      ;
      if (y instanceof Spago) {
        return GT.value;
      }
      ;
      if (x instanceof Purs && y instanceof Purs) {
        return EQ.value;
      }
      ;
      if (x instanceof Purs) {
        return LT.value;
      }
      ;
      if (y instanceof Purs) {
        return GT.value;
      }
      ;
      if (x instanceof DhallToJSON && y instanceof DhallToJSON) {
        return EQ.value;
      }
      ;
      throw new Error("Failed pattern match at Backend.Tool.Types (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqTool;
  }
};
var enumTool = {
  succ: /* @__PURE__ */ genericSucc(genericTool_)(genericEnumSum1),
  pred: /* @__PURE__ */ genericPred(genericTool_)(genericEnumSum1),
  Ord0: function() {
    return ordTool;
  }
};
var boundedTool = {
  top: /* @__PURE__ */ genericTop(genericTool_)(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopConstructor2)))),
  bottom: /* @__PURE__ */ genericBottom(genericTool_)(genericBottomSum2),
  Ord0: function() {
    return ordTool;
  }
};
var toCommand = function(v) {
  if (v instanceof NPM) {
    return "npm";
  }
  ;
  if (v instanceof DhallToJSON) {
    return "dhall-to-json";
  }
  ;
  if (v instanceof Spago) {
    return "spago";
  }
  ;
  if (v instanceof Purs) {
    return "purs";
  }
  ;
  throw new Error("Failed pattern match at Backend.Tool.Types (line 19, column 13 - line 23, column 16): " + [v.constructor.name]);
};

// output/Yoga.JSON.Generics.TaggedSumRep/index.js
var bind5 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadIdentity));
var read$prime2 = /* @__PURE__ */ read$prime(/* @__PURE__ */ readForeignObject(readForeignForeign));
var fail4 = /* @__PURE__ */ fail(monadIdentity);
var pure5 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadIdentity));
var read$prime1 = /* @__PURE__ */ read$prime(readForeignString);
var map11 = /* @__PURE__ */ map(functorNonEmptyList);
var map12 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
var write4 = /* @__PURE__ */ write3(/* @__PURE__ */ writeForeignObject(writeForeignForeign));
var fromFoldable4 = /* @__PURE__ */ fromFoldable3(foldableArray);
var write1 = /* @__PURE__ */ write3(writeForeignString);
var alt4 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
var writeGenericTaggedSumRepN = {
  genericWriteForeignTaggedSumRep: function(v) {
    return function(v1) {
      return $$undefined;
    };
  }
};
var writeGenericTaggedSumRepA = function(dictWriteForeign) {
  var writeImpl5 = writeImpl(dictWriteForeign);
  return {
    genericWriteForeignTaggedSumRep: function(v) {
      return function(v1) {
        return writeImpl5(v1);
      };
    }
  };
};
var readGenericTaggedSumRepAr = function(dictReadForeign) {
  var readImpl5 = readImpl(dictReadForeign);
  return {
    genericReadForeignTaggedSumRep: function(v) {
      return function(f) {
        return map12(Argument)(readImpl5(f));
      };
    }
  };
};
var genericWriteForeignTaggedSumRep = function(dict) {
  return dict.genericWriteForeignTaggedSumRep;
};
var writeGenericTaggedSumRepC = function(dictWriteGenericTaggedSumRep) {
  var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
  return function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      genericWriteForeignTaggedSumRep: function(v) {
        return function(v1) {
          var name15 = v.toConstructorName(reflectSymbol2($$Proxy.value));
          return write4(fromFoldable4([new Tuple(v.typeTag, write1(name15)), new Tuple(v.valueTag, genericWriteForeignTaggedSumRep1(v)(v1))]));
        };
      }
    };
  };
};
var writeGenericTaggedSumRepS = function(dictWriteGenericTaggedSumRep) {
  var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
  return function(dictWriteGenericTaggedSumRep1) {
    var genericWriteForeignTaggedSumRep2 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep1);
    return {
      genericWriteForeignTaggedSumRep: function(options2) {
        return function(v) {
          if (v instanceof Inl) {
            return genericWriteForeignTaggedSumRep1(options2)(v.value0);
          }
          ;
          if (v instanceof Inr) {
            return genericWriteForeignTaggedSumRep2(options2)(v.value0);
          }
          ;
          throw new Error("Failed pattern match at Yoga.JSON.Generics.TaggedSumRep (line 106, column 45 - line 108, column 57): " + [v.constructor.name]);
        };
      }
    };
  };
};
var genericWriteForeignTaggedSum = function(dictGeneric) {
  var from3 = from(dictGeneric);
  return function(dictWriteGenericTaggedSumRep) {
    var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
    return function(options2) {
      return function(r) {
        return genericWriteForeignTaggedSumRep1(options2)(from3(r));
      };
    };
  };
};
var genericReadForeignTaggedSumRep = function(dict) {
  return dict.genericReadForeignTaggedSumRep;
};
var readGenericTaggedSumRepCo1 = function(dictReadGenericTaggedSumRep) {
  var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
  return function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      genericReadForeignTaggedSumRep: function(v) {
        return function(f) {
          var name15 = v.toConstructorName(reflectSymbol2($$Proxy.value));
          return bind5(read$prime2(f))(function(v1) {
            return bind5(maybe(fail4(new ErrorAtProperty(v.typeTag, new ForeignError("Missing type tag: " + v.typeTag))))(pure5)(lookup2(v.typeTag)(v1)))(function(typeFgn) {
              return bind5(read$prime1(typeFgn))(function(typeStr) {
                return bind5(maybe(fail4(new ErrorAtProperty(v.valueTag, new ForeignError("Missing value tag: " + v.valueTag))))(pure5)(lookup2(v.valueTag)(v1)))(function(value12) {
                  var $94 = typeStr === name15;
                  if ($94) {
                    return withExcept(map11(ErrorAtProperty.create(name15)))(map12(Constructor)(genericReadForeignTaggedSumRep1(v)(value12)));
                  }
                  ;
                  return fail4(new ForeignError("Wrong constructor name tag " + (typeStr + (" where " + (name15 + " was expected.")))));
                });
              });
            });
          });
        };
      }
    };
  };
};
var readGenericTaggedSumRepSu = function(dictReadGenericTaggedSumRep) {
  var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
  return function(dictReadGenericTaggedSumRep1) {
    var genericReadForeignTaggedSumRep2 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep1);
    return {
      genericReadForeignTaggedSumRep: function(options2) {
        return function(f) {
          return alt4(map12(Inl.create)(genericReadForeignTaggedSumRep1(options2)(f)))(map12(Inr.create)(genericReadForeignTaggedSumRep2(options2)(f)));
        };
      }
    };
  };
};
var genericReadForeignTaggedSum = function(dictGeneric) {
  var to2 = to(dictGeneric);
  return function(dictReadGenericTaggedSumRep) {
    var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
    return function(options2) {
      return function(f) {
        return map12(to2)(genericReadForeignTaggedSumRep1(options2)(f));
      };
    };
  };
};
var defaultOptions = {
  typeTag: "type",
  valueTag: "value",
  toConstructorName: /* @__PURE__ */ identity(categoryFn)
};

// output/Biz.IPC.GetInstalledTools.Types/index.js
var UnsupportedOperatingSystemIsSymbol = {
  reflectSymbol: function() {
    return "UnsupportedOperatingSystem";
  }
};
var ToolsResultIsSymbol = {
  reflectSymbol: function() {
    return "ToolsResult";
  }
};
var UnsupportedOperatingSystem = /* @__PURE__ */ function() {
  function UnsupportedOperatingSystem2() {
  }
  ;
  UnsupportedOperatingSystem2.value = new UnsupportedOperatingSystem2();
  return UnsupportedOperatingSystem2;
}();
var ToolsResult = /* @__PURE__ */ function() {
  function ToolsResult2(value0) {
    this.value0 = value0;
  }
  ;
  ToolsResult2.create = function(value0) {
    return new ToolsResult2(value0);
  };
  return ToolsResult2;
}();
var genericGetInstalledToolsR = {
  to: function(x) {
    if (x instanceof Inl) {
      return UnsupportedOperatingSystem.value;
    }
    ;
    if (x instanceof Inr) {
      return new ToolsResult(x.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.GetInstalledTools.Types (line 14, column 1 - line 14, column 50): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof UnsupportedOperatingSystem) {
      return new Inl(NoArguments.value);
    }
    ;
    if (x instanceof ToolsResult) {
      return new Inr(x.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.GetInstalledTools.Types (line 14, column 1 - line 14, column 50): " + [x.constructor.name]);
  }
};
var writeForeignGetInstalledT = {
  writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericGetInstalledToolsR)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(writeGenericTaggedSumRepN)(UnsupportedOperatingSystemIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignTuple(writeForeignTool)(/* @__PURE__ */ writeForeignMaybe(writeForeignToolPath)))))(ToolsResultIsSymbol)))(defaultOptions)
};

// output/Data.CodePoint.Unicode.Internal/index.js
var unsafeIndex2 = /* @__PURE__ */ unsafeIndex();
var NUMCAT_LU = /* @__PURE__ */ function() {
  function NUMCAT_LU2() {
  }
  ;
  NUMCAT_LU2.value = new NUMCAT_LU2();
  return NUMCAT_LU2;
}();
var NUMCAT_LL = /* @__PURE__ */ function() {
  function NUMCAT_LL2() {
  }
  ;
  NUMCAT_LL2.value = new NUMCAT_LL2();
  return NUMCAT_LL2;
}();
var NUMCAT_LT = /* @__PURE__ */ function() {
  function NUMCAT_LT2() {
  }
  ;
  NUMCAT_LT2.value = new NUMCAT_LT2();
  return NUMCAT_LT2;
}();
var NUMCAT_MN = /* @__PURE__ */ function() {
  function NUMCAT_MN2() {
  }
  ;
  NUMCAT_MN2.value = new NUMCAT_MN2();
  return NUMCAT_MN2;
}();
var NUMCAT_NL = /* @__PURE__ */ function() {
  function NUMCAT_NL2() {
  }
  ;
  NUMCAT_NL2.value = new NUMCAT_NL2();
  return NUMCAT_NL2;
}();
var NUMCAT_SO = /* @__PURE__ */ function() {
  function NUMCAT_SO2() {
  }
  ;
  NUMCAT_SO2.value = new NUMCAT_SO2();
  return NUMCAT_SO2;
}();
var NUMCAT_CN = /* @__PURE__ */ function() {
  function NUMCAT_CN2() {
  }
  ;
  NUMCAT_CN2.value = new NUMCAT_CN2();
  return NUMCAT_CN2;
}();
var numConvBlocks = 1332;
var gencatSO = 8192;
var rule170 = /* @__PURE__ */ function() {
  return {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: 0,
    lowdist: 26,
    titledist: 0
  };
}();
var rule171 = /* @__PURE__ */ function() {
  return {
    category: gencatSO,
    unicodeCat: NUMCAT_SO.value,
    possible: 1,
    updist: -26 | 0,
    lowdist: 0,
    titledist: -26 | 0
  };
}();
var gencatNL = 16777216;
var rule168 = /* @__PURE__ */ function() {
  return {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: 0,
    lowdist: 16,
    titledist: 0
  };
}();
var rule169 = /* @__PURE__ */ function() {
  return {
    category: gencatNL,
    unicodeCat: NUMCAT_NL.value,
    possible: 1,
    updist: -16 | 0,
    lowdist: 0,
    titledist: -16 | 0
  };
}();
var gencatMN = 2097152;
var rule93 = /* @__PURE__ */ function() {
  return {
    category: gencatMN,
    unicodeCat: NUMCAT_MN.value,
    possible: 1,
    updist: 84,
    lowdist: 0,
    titledist: 84
  };
}();
var gencatLU = 512;
var nullrule = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_CN.value,
    possible: 0,
    updist: 0,
    lowdist: 0,
    titledist: 0
  };
}();
var rule104 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 8,
    titledist: 0
  };
}();
var rule115 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -60 | 0,
    titledist: 0
  };
}();
var rule117 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7 | 0,
    titledist: 0
  };
}();
var rule118 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 80,
    titledist: 0
  };
}();
var rule120 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 15,
    titledist: 0
  };
}();
var rule122 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 48,
    titledist: 0
  };
}();
var rule125 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 7264,
    titledist: 0
  };
}();
var rule127 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 38864,
    titledist: 0
  };
}();
var rule137 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -3008 | 0,
    titledist: 0
  };
}();
var rule142 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7615 | 0,
    titledist: 0
  };
}();
var rule144 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
  };
}();
var rule153 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -74 | 0,
    titledist: 0
  };
}();
var rule156 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -86 | 0,
    titledist: 0
  };
}();
var rule157 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -100 | 0,
    titledist: 0
  };
}();
var rule158 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -112 | 0,
    titledist: 0
  };
}();
var rule159 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -128 | 0,
    titledist: 0
  };
}();
var rule160 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -126 | 0,
    titledist: 0
  };
}();
var rule163 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -7517 | 0,
    titledist: 0
  };
}();
var rule164 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8383 | 0,
    titledist: 0
  };
}();
var rule165 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -8262 | 0,
    titledist: 0
  };
}();
var rule166 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 28,
    titledist: 0
  };
}();
var rule172 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10743 | 0,
    titledist: 0
  };
}();
var rule173 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -3814 | 0,
    titledist: 0
  };
}();
var rule174 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10727 | 0,
    titledist: 0
  };
}();
var rule177 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10780 | 0,
    titledist: 0
  };
}();
var rule178 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10749 | 0,
    titledist: 0
  };
}();
var rule179 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10783 | 0,
    titledist: 0
  };
}();
var rule180 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10782 | 0,
    titledist: 0
  };
}();
var rule181 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -10815 | 0,
    titledist: 0
  };
}();
var rule183 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -35332 | 0,
    titledist: 0
  };
}();
var rule184 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42280 | 0,
    titledist: 0
  };
}();
var rule186 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42308 | 0,
    titledist: 0
  };
}();
var rule187 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42319 | 0,
    titledist: 0
  };
}();
var rule188 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42315 | 0,
    titledist: 0
  };
}();
var rule189 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42305 | 0,
    titledist: 0
  };
}();
var rule190 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42258 | 0,
    titledist: 0
  };
}();
var rule191 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42282 | 0,
    titledist: 0
  };
}();
var rule192 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42261 | 0,
    titledist: 0
  };
}();
var rule193 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 928,
    titledist: 0
  };
}();
var rule194 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -48 | 0,
    titledist: 0
  };
}();
var rule195 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -42307 | 0,
    titledist: 0
  };
}();
var rule196 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -35384 | 0,
    titledist: 0
  };
}();
var rule201 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 40,
    titledist: 0
  };
}();
var rule203 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 34,
    titledist: 0
  };
}();
var rule22 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 1,
    titledist: 0
  };
}();
var rule24 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -199 | 0,
    titledist: 0
  };
}();
var rule26 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -121 | 0,
    titledist: 0
  };
}();
var rule29 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 210,
    titledist: 0
  };
}();
var rule30 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 206,
    titledist: 0
  };
}();
var rule31 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 205,
    titledist: 0
  };
}();
var rule32 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 79,
    titledist: 0
  };
}();
var rule33 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 202,
    titledist: 0
  };
}();
var rule34 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 203,
    titledist: 0
  };
}();
var rule35 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 207,
    titledist: 0
  };
}();
var rule37 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 211,
    titledist: 0
  };
}();
var rule38 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 209,
    titledist: 0
  };
}();
var rule40 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 213,
    titledist: 0
  };
}();
var rule42 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 214,
    titledist: 0
  };
}();
var rule43 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 218,
    titledist: 0
  };
}();
var rule44 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 217,
    titledist: 0
  };
}();
var rule45 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 219,
    titledist: 0
  };
}();
var rule47 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 2,
    titledist: 1
  };
}();
var rule51 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -97 | 0,
    titledist: 0
  };
}();
var rule52 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -56 | 0,
    titledist: 0
  };
}();
var rule53 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -130 | 0,
    titledist: 0
  };
}();
var rule54 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10795,
    titledist: 0
  };
}();
var rule55 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -163 | 0,
    titledist: 0
  };
}();
var rule56 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 10792,
    titledist: 0
  };
}();
var rule58 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: -195 | 0,
    titledist: 0
  };
}();
var rule59 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 69,
    titledist: 0
  };
}();
var rule60 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 71,
    titledist: 0
  };
}();
var rule9 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 32,
    titledist: 0
  };
}();
var rule94 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 116,
    titledist: 0
  };
}();
var rule95 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 38,
    titledist: 0
  };
}();
var rule96 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 37,
    titledist: 0
  };
}();
var rule97 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 64,
    titledist: 0
  };
}();
var rule98 = /* @__PURE__ */ function() {
  return {
    category: gencatLU,
    unicodeCat: NUMCAT_LU.value,
    possible: 1,
    updist: 0,
    lowdist: 63,
    titledist: 0
  };
}();
var gencatLT = 524288;
var rule151 = /* @__PURE__ */ function() {
  return {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -8 | 0,
    titledist: 0
  };
}();
var rule154 = /* @__PURE__ */ function() {
  return {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: 0,
    lowdist: -9 | 0,
    titledist: 0
  };
}();
var rule48 = /* @__PURE__ */ function() {
  return {
    category: gencatLT,
    unicodeCat: NUMCAT_LT.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 1,
    titledist: 0
  };
}();
var gencatLL = 4096;
var rule100 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -37 | 0,
    lowdist: 0,
    titledist: -37 | 0
  };
}();
var rule101 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -31 | 0,
    lowdist: 0,
    titledist: -31 | 0
  };
}();
var rule102 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -64 | 0,
    lowdist: 0,
    titledist: -64 | 0
  };
}();
var rule103 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -63 | 0,
    lowdist: 0,
    titledist: -63 | 0
  };
}();
var rule105 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -62 | 0,
    lowdist: 0,
    titledist: -62 | 0
  };
}();
var rule106 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -57 | 0,
    lowdist: 0,
    titledist: -57 | 0
  };
}();
var rule108 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -47 | 0,
    lowdist: 0,
    titledist: -47 | 0
  };
}();
var rule109 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -54 | 0,
    lowdist: 0,
    titledist: -54 | 0
  };
}();
var rule110 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -8 | 0,
    lowdist: 0,
    titledist: -8 | 0
  };
}();
var rule111 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -86 | 0,
    lowdist: 0,
    titledist: -86 | 0
  };
}();
var rule112 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -80 | 0,
    lowdist: 0,
    titledist: -80 | 0
  };
}();
var rule113 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 7,
    lowdist: 0,
    titledist: 7
  };
}();
var rule114 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -116 | 0,
    lowdist: 0,
    titledist: -116 | 0
  };
}();
var rule116 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -96 | 0,
    lowdist: 0,
    titledist: -96 | 0
  };
}();
var rule12 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -32 | 0,
    lowdist: 0,
    titledist: -32 | 0
  };
}();
var rule121 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -15 | 0,
    lowdist: 0,
    titledist: -15 | 0
  };
}();
var rule123 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -48 | 0,
    lowdist: 0,
    titledist: -48 | 0
  };
}();
var rule126 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 3008,
    lowdist: 0,
    titledist: 0
  };
}();
var rule129 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6254 | 0,
    lowdist: 0,
    titledist: -6254 | 0
  };
}();
var rule130 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6253 | 0,
    lowdist: 0,
    titledist: -6253 | 0
  };
}();
var rule131 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6244 | 0,
    lowdist: 0,
    titledist: -6244 | 0
  };
}();
var rule132 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6242 | 0,
    lowdist: 0,
    titledist: -6242 | 0
  };
}();
var rule133 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6243 | 0,
    lowdist: 0,
    titledist: -6243 | 0
  };
}();
var rule134 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6236 | 0,
    lowdist: 0,
    titledist: -6236 | 0
  };
}();
var rule135 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -6181 | 0,
    lowdist: 0,
    titledist: -6181 | 0
  };
}();
var rule136 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35266,
    lowdist: 0,
    titledist: 35266
  };
}();
var rule138 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35332,
    lowdist: 0,
    titledist: 35332
  };
}();
var rule139 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 3814,
    lowdist: 0,
    titledist: 3814
  };
}();
var rule140 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 35384,
    lowdist: 0,
    titledist: 35384
  };
}();
var rule141 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -59 | 0,
    lowdist: 0,
    titledist: -59 | 0
  };
}();
var rule143 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 8,
    lowdist: 0,
    titledist: 8
  };
}();
var rule145 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 74,
    lowdist: 0,
    titledist: 74
  };
}();
var rule146 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 86,
    lowdist: 0,
    titledist: 86
  };
}();
var rule147 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 100,
    lowdist: 0,
    titledist: 100
  };
}();
var rule148 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 128,
    lowdist: 0,
    titledist: 128
  };
}();
var rule149 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 112,
    lowdist: 0,
    titledist: 112
  };
}();
var rule150 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 126,
    lowdist: 0,
    titledist: 126
  };
}();
var rule152 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 9,
    lowdist: 0,
    titledist: 9
  };
}();
var rule155 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7205 | 0,
    lowdist: 0,
    titledist: -7205 | 0
  };
}();
var rule167 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -28 | 0,
    lowdist: 0,
    titledist: -28 | 0
  };
}();
var rule175 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10795 | 0,
    lowdist: 0,
    titledist: -10795 | 0
  };
}();
var rule176 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -10792 | 0,
    lowdist: 0,
    titledist: -10792 | 0
  };
}();
var rule18 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 743,
    lowdist: 0,
    titledist: 743
  };
}();
var rule182 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -7264 | 0,
    lowdist: 0,
    titledist: -7264 | 0
  };
}();
var rule185 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 48,
    lowdist: 0,
    titledist: 48
  };
}();
var rule197 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -928 | 0,
    lowdist: 0,
    titledist: -928 | 0
  };
}();
var rule198 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -38864 | 0,
    lowdist: 0,
    titledist: -38864 | 0
  };
}();
var rule202 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -40 | 0,
    lowdist: 0,
    titledist: -40 | 0
  };
}();
var rule204 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -34 | 0,
    lowdist: 0,
    titledist: -34 | 0
  };
}();
var rule21 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 121,
    lowdist: 0,
    titledist: 121
  };
}();
var rule23 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -1 | 0,
    lowdist: 0,
    titledist: -1 | 0
  };
}();
var rule25 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -232 | 0,
    lowdist: 0,
    titledist: -232 | 0
  };
}();
var rule27 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -300 | 0,
    lowdist: 0,
    titledist: -300 | 0
  };
}();
var rule28 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 195,
    lowdist: 0,
    titledist: 195
  };
}();
var rule36 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 97,
    lowdist: 0,
    titledist: 97
  };
}();
var rule39 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 163,
    lowdist: 0,
    titledist: 163
  };
}();
var rule41 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 130,
    lowdist: 0,
    titledist: 130
  };
}();
var rule46 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 56,
    lowdist: 0,
    titledist: 56
  };
}();
var rule49 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -2 | 0,
    lowdist: 0,
    titledist: -1 | 0
  };
}();
var rule50 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -79 | 0,
    lowdist: 0,
    titledist: -79 | 0
  };
}();
var rule57 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10815,
    lowdist: 0,
    titledist: 10815
  };
}();
var rule61 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10783,
    lowdist: 0,
    titledist: 10783
  };
}();
var rule62 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10780,
    lowdist: 0,
    titledist: 10780
  };
}();
var rule63 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10782,
    lowdist: 0,
    titledist: 10782
  };
}();
var rule64 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -210 | 0,
    lowdist: 0,
    titledist: -210 | 0
  };
}();
var rule65 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -206 | 0,
    lowdist: 0,
    titledist: -206 | 0
  };
}();
var rule66 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -205 | 0,
    lowdist: 0,
    titledist: -205 | 0
  };
}();
var rule67 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -202 | 0,
    lowdist: 0,
    titledist: -202 | 0
  };
}();
var rule68 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -203 | 0,
    lowdist: 0,
    titledist: -203 | 0
  };
}();
var rule69 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42319,
    lowdist: 0,
    titledist: 42319
  };
}();
var rule70 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42315,
    lowdist: 0,
    titledist: 42315
  };
}();
var rule71 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -207 | 0,
    lowdist: 0,
    titledist: -207 | 0
  };
}();
var rule72 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42280,
    lowdist: 0,
    titledist: 42280
  };
}();
var rule73 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42308,
    lowdist: 0,
    titledist: 42308
  };
}();
var rule74 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -209 | 0,
    lowdist: 0,
    titledist: -209 | 0
  };
}();
var rule75 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -211 | 0,
    lowdist: 0,
    titledist: -211 | 0
  };
}();
var rule76 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10743,
    lowdist: 0,
    titledist: 10743
  };
}();
var rule77 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42305,
    lowdist: 0,
    titledist: 42305
  };
}();
var rule78 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10749,
    lowdist: 0,
    titledist: 10749
  };
}();
var rule79 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -213 | 0,
    lowdist: 0,
    titledist: -213 | 0
  };
}();
var rule80 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -214 | 0,
    lowdist: 0,
    titledist: -214 | 0
  };
}();
var rule81 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 10727,
    lowdist: 0,
    titledist: 10727
  };
}();
var rule82 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -218 | 0,
    lowdist: 0,
    titledist: -218 | 0
  };
}();
var rule83 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42307,
    lowdist: 0,
    titledist: 42307
  };
}();
var rule84 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42282,
    lowdist: 0,
    titledist: 42282
  };
}();
var rule85 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -69 | 0,
    lowdist: 0,
    titledist: -69 | 0
  };
}();
var rule86 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -217 | 0,
    lowdist: 0,
    titledist: -217 | 0
  };
}();
var rule87 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -71 | 0,
    lowdist: 0,
    titledist: -71 | 0
  };
}();
var rule88 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -219 | 0,
    lowdist: 0,
    titledist: -219 | 0
  };
}();
var rule89 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42261,
    lowdist: 0,
    titledist: 42261
  };
}();
var rule90 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: 42258,
    lowdist: 0,
    titledist: 42258
  };
}();
var rule99 = /* @__PURE__ */ function() {
  return {
    category: gencatLL,
    unicodeCat: NUMCAT_LL.value,
    possible: 1,
    updist: -38 | 0,
    lowdist: 0,
    titledist: -38 | 0
  };
}();
var convchars = [{
  start: 65,
  length: 26,
  convRule: rule9
}, {
  start: 97,
  length: 26,
  convRule: rule12
}, {
  start: 181,
  length: 1,
  convRule: rule18
}, {
  start: 192,
  length: 23,
  convRule: rule9
}, {
  start: 216,
  length: 7,
  convRule: rule9
}, {
  start: 224,
  length: 23,
  convRule: rule12
}, {
  start: 248,
  length: 7,
  convRule: rule12
}, {
  start: 255,
  length: 1,
  convRule: rule21
}, {
  start: 256,
  length: 1,
  convRule: rule22
}, {
  start: 257,
  length: 1,
  convRule: rule23
}, {
  start: 258,
  length: 1,
  convRule: rule22
}, {
  start: 259,
  length: 1,
  convRule: rule23
}, {
  start: 260,
  length: 1,
  convRule: rule22
}, {
  start: 261,
  length: 1,
  convRule: rule23
}, {
  start: 262,
  length: 1,
  convRule: rule22
}, {
  start: 263,
  length: 1,
  convRule: rule23
}, {
  start: 264,
  length: 1,
  convRule: rule22
}, {
  start: 265,
  length: 1,
  convRule: rule23
}, {
  start: 266,
  length: 1,
  convRule: rule22
}, {
  start: 267,
  length: 1,
  convRule: rule23
}, {
  start: 268,
  length: 1,
  convRule: rule22
}, {
  start: 269,
  length: 1,
  convRule: rule23
}, {
  start: 270,
  length: 1,
  convRule: rule22
}, {
  start: 271,
  length: 1,
  convRule: rule23
}, {
  start: 272,
  length: 1,
  convRule: rule22
}, {
  start: 273,
  length: 1,
  convRule: rule23
}, {
  start: 274,
  length: 1,
  convRule: rule22
}, {
  start: 275,
  length: 1,
  convRule: rule23
}, {
  start: 276,
  length: 1,
  convRule: rule22
}, {
  start: 277,
  length: 1,
  convRule: rule23
}, {
  start: 278,
  length: 1,
  convRule: rule22
}, {
  start: 279,
  length: 1,
  convRule: rule23
}, {
  start: 280,
  length: 1,
  convRule: rule22
}, {
  start: 281,
  length: 1,
  convRule: rule23
}, {
  start: 282,
  length: 1,
  convRule: rule22
}, {
  start: 283,
  length: 1,
  convRule: rule23
}, {
  start: 284,
  length: 1,
  convRule: rule22
}, {
  start: 285,
  length: 1,
  convRule: rule23
}, {
  start: 286,
  length: 1,
  convRule: rule22
}, {
  start: 287,
  length: 1,
  convRule: rule23
}, {
  start: 288,
  length: 1,
  convRule: rule22
}, {
  start: 289,
  length: 1,
  convRule: rule23
}, {
  start: 290,
  length: 1,
  convRule: rule22
}, {
  start: 291,
  length: 1,
  convRule: rule23
}, {
  start: 292,
  length: 1,
  convRule: rule22
}, {
  start: 293,
  length: 1,
  convRule: rule23
}, {
  start: 294,
  length: 1,
  convRule: rule22
}, {
  start: 295,
  length: 1,
  convRule: rule23
}, {
  start: 296,
  length: 1,
  convRule: rule22
}, {
  start: 297,
  length: 1,
  convRule: rule23
}, {
  start: 298,
  length: 1,
  convRule: rule22
}, {
  start: 299,
  length: 1,
  convRule: rule23
}, {
  start: 300,
  length: 1,
  convRule: rule22
}, {
  start: 301,
  length: 1,
  convRule: rule23
}, {
  start: 302,
  length: 1,
  convRule: rule22
}, {
  start: 303,
  length: 1,
  convRule: rule23
}, {
  start: 304,
  length: 1,
  convRule: rule24
}, {
  start: 305,
  length: 1,
  convRule: rule25
}, {
  start: 306,
  length: 1,
  convRule: rule22
}, {
  start: 307,
  length: 1,
  convRule: rule23
}, {
  start: 308,
  length: 1,
  convRule: rule22
}, {
  start: 309,
  length: 1,
  convRule: rule23
}, {
  start: 310,
  length: 1,
  convRule: rule22
}, {
  start: 311,
  length: 1,
  convRule: rule23
}, {
  start: 313,
  length: 1,
  convRule: rule22
}, {
  start: 314,
  length: 1,
  convRule: rule23
}, {
  start: 315,
  length: 1,
  convRule: rule22
}, {
  start: 316,
  length: 1,
  convRule: rule23
}, {
  start: 317,
  length: 1,
  convRule: rule22
}, {
  start: 318,
  length: 1,
  convRule: rule23
}, {
  start: 319,
  length: 1,
  convRule: rule22
}, {
  start: 320,
  length: 1,
  convRule: rule23
}, {
  start: 321,
  length: 1,
  convRule: rule22
}, {
  start: 322,
  length: 1,
  convRule: rule23
}, {
  start: 323,
  length: 1,
  convRule: rule22
}, {
  start: 324,
  length: 1,
  convRule: rule23
}, {
  start: 325,
  length: 1,
  convRule: rule22
}, {
  start: 326,
  length: 1,
  convRule: rule23
}, {
  start: 327,
  length: 1,
  convRule: rule22
}, {
  start: 328,
  length: 1,
  convRule: rule23
}, {
  start: 330,
  length: 1,
  convRule: rule22
}, {
  start: 331,
  length: 1,
  convRule: rule23
}, {
  start: 332,
  length: 1,
  convRule: rule22
}, {
  start: 333,
  length: 1,
  convRule: rule23
}, {
  start: 334,
  length: 1,
  convRule: rule22
}, {
  start: 335,
  length: 1,
  convRule: rule23
}, {
  start: 336,
  length: 1,
  convRule: rule22
}, {
  start: 337,
  length: 1,
  convRule: rule23
}, {
  start: 338,
  length: 1,
  convRule: rule22
}, {
  start: 339,
  length: 1,
  convRule: rule23
}, {
  start: 340,
  length: 1,
  convRule: rule22
}, {
  start: 341,
  length: 1,
  convRule: rule23
}, {
  start: 342,
  length: 1,
  convRule: rule22
}, {
  start: 343,
  length: 1,
  convRule: rule23
}, {
  start: 344,
  length: 1,
  convRule: rule22
}, {
  start: 345,
  length: 1,
  convRule: rule23
}, {
  start: 346,
  length: 1,
  convRule: rule22
}, {
  start: 347,
  length: 1,
  convRule: rule23
}, {
  start: 348,
  length: 1,
  convRule: rule22
}, {
  start: 349,
  length: 1,
  convRule: rule23
}, {
  start: 350,
  length: 1,
  convRule: rule22
}, {
  start: 351,
  length: 1,
  convRule: rule23
}, {
  start: 352,
  length: 1,
  convRule: rule22
}, {
  start: 353,
  length: 1,
  convRule: rule23
}, {
  start: 354,
  length: 1,
  convRule: rule22
}, {
  start: 355,
  length: 1,
  convRule: rule23
}, {
  start: 356,
  length: 1,
  convRule: rule22
}, {
  start: 357,
  length: 1,
  convRule: rule23
}, {
  start: 358,
  length: 1,
  convRule: rule22
}, {
  start: 359,
  length: 1,
  convRule: rule23
}, {
  start: 360,
  length: 1,
  convRule: rule22
}, {
  start: 361,
  length: 1,
  convRule: rule23
}, {
  start: 362,
  length: 1,
  convRule: rule22
}, {
  start: 363,
  length: 1,
  convRule: rule23
}, {
  start: 364,
  length: 1,
  convRule: rule22
}, {
  start: 365,
  length: 1,
  convRule: rule23
}, {
  start: 366,
  length: 1,
  convRule: rule22
}, {
  start: 367,
  length: 1,
  convRule: rule23
}, {
  start: 368,
  length: 1,
  convRule: rule22
}, {
  start: 369,
  length: 1,
  convRule: rule23
}, {
  start: 370,
  length: 1,
  convRule: rule22
}, {
  start: 371,
  length: 1,
  convRule: rule23
}, {
  start: 372,
  length: 1,
  convRule: rule22
}, {
  start: 373,
  length: 1,
  convRule: rule23
}, {
  start: 374,
  length: 1,
  convRule: rule22
}, {
  start: 375,
  length: 1,
  convRule: rule23
}, {
  start: 376,
  length: 1,
  convRule: rule26
}, {
  start: 377,
  length: 1,
  convRule: rule22
}, {
  start: 378,
  length: 1,
  convRule: rule23
}, {
  start: 379,
  length: 1,
  convRule: rule22
}, {
  start: 380,
  length: 1,
  convRule: rule23
}, {
  start: 381,
  length: 1,
  convRule: rule22
}, {
  start: 382,
  length: 1,
  convRule: rule23
}, {
  start: 383,
  length: 1,
  convRule: rule27
}, {
  start: 384,
  length: 1,
  convRule: rule28
}, {
  start: 385,
  length: 1,
  convRule: rule29
}, {
  start: 386,
  length: 1,
  convRule: rule22
}, {
  start: 387,
  length: 1,
  convRule: rule23
}, {
  start: 388,
  length: 1,
  convRule: rule22
}, {
  start: 389,
  length: 1,
  convRule: rule23
}, {
  start: 390,
  length: 1,
  convRule: rule30
}, {
  start: 391,
  length: 1,
  convRule: rule22
}, {
  start: 392,
  length: 1,
  convRule: rule23
}, {
  start: 393,
  length: 2,
  convRule: rule31
}, {
  start: 395,
  length: 1,
  convRule: rule22
}, {
  start: 396,
  length: 1,
  convRule: rule23
}, {
  start: 398,
  length: 1,
  convRule: rule32
}, {
  start: 399,
  length: 1,
  convRule: rule33
}, {
  start: 400,
  length: 1,
  convRule: rule34
}, {
  start: 401,
  length: 1,
  convRule: rule22
}, {
  start: 402,
  length: 1,
  convRule: rule23
}, {
  start: 403,
  length: 1,
  convRule: rule31
}, {
  start: 404,
  length: 1,
  convRule: rule35
}, {
  start: 405,
  length: 1,
  convRule: rule36
}, {
  start: 406,
  length: 1,
  convRule: rule37
}, {
  start: 407,
  length: 1,
  convRule: rule38
}, {
  start: 408,
  length: 1,
  convRule: rule22
}, {
  start: 409,
  length: 1,
  convRule: rule23
}, {
  start: 410,
  length: 1,
  convRule: rule39
}, {
  start: 412,
  length: 1,
  convRule: rule37
}, {
  start: 413,
  length: 1,
  convRule: rule40
}, {
  start: 414,
  length: 1,
  convRule: rule41
}, {
  start: 415,
  length: 1,
  convRule: rule42
}, {
  start: 416,
  length: 1,
  convRule: rule22
}, {
  start: 417,
  length: 1,
  convRule: rule23
}, {
  start: 418,
  length: 1,
  convRule: rule22
}, {
  start: 419,
  length: 1,
  convRule: rule23
}, {
  start: 420,
  length: 1,
  convRule: rule22
}, {
  start: 421,
  length: 1,
  convRule: rule23
}, {
  start: 422,
  length: 1,
  convRule: rule43
}, {
  start: 423,
  length: 1,
  convRule: rule22
}, {
  start: 424,
  length: 1,
  convRule: rule23
}, {
  start: 425,
  length: 1,
  convRule: rule43
}, {
  start: 428,
  length: 1,
  convRule: rule22
}, {
  start: 429,
  length: 1,
  convRule: rule23
}, {
  start: 430,
  length: 1,
  convRule: rule43
}, {
  start: 431,
  length: 1,
  convRule: rule22
}, {
  start: 432,
  length: 1,
  convRule: rule23
}, {
  start: 433,
  length: 2,
  convRule: rule44
}, {
  start: 435,
  length: 1,
  convRule: rule22
}, {
  start: 436,
  length: 1,
  convRule: rule23
}, {
  start: 437,
  length: 1,
  convRule: rule22
}, {
  start: 438,
  length: 1,
  convRule: rule23
}, {
  start: 439,
  length: 1,
  convRule: rule45
}, {
  start: 440,
  length: 1,
  convRule: rule22
}, {
  start: 441,
  length: 1,
  convRule: rule23
}, {
  start: 444,
  length: 1,
  convRule: rule22
}, {
  start: 445,
  length: 1,
  convRule: rule23
}, {
  start: 447,
  length: 1,
  convRule: rule46
}, {
  start: 452,
  length: 1,
  convRule: rule47
}, {
  start: 453,
  length: 1,
  convRule: rule48
}, {
  start: 454,
  length: 1,
  convRule: rule49
}, {
  start: 455,
  length: 1,
  convRule: rule47
}, {
  start: 456,
  length: 1,
  convRule: rule48
}, {
  start: 457,
  length: 1,
  convRule: rule49
}, {
  start: 458,
  length: 1,
  convRule: rule47
}, {
  start: 459,
  length: 1,
  convRule: rule48
}, {
  start: 460,
  length: 1,
  convRule: rule49
}, {
  start: 461,
  length: 1,
  convRule: rule22
}, {
  start: 462,
  length: 1,
  convRule: rule23
}, {
  start: 463,
  length: 1,
  convRule: rule22
}, {
  start: 464,
  length: 1,
  convRule: rule23
}, {
  start: 465,
  length: 1,
  convRule: rule22
}, {
  start: 466,
  length: 1,
  convRule: rule23
}, {
  start: 467,
  length: 1,
  convRule: rule22
}, {
  start: 468,
  length: 1,
  convRule: rule23
}, {
  start: 469,
  length: 1,
  convRule: rule22
}, {
  start: 470,
  length: 1,
  convRule: rule23
}, {
  start: 471,
  length: 1,
  convRule: rule22
}, {
  start: 472,
  length: 1,
  convRule: rule23
}, {
  start: 473,
  length: 1,
  convRule: rule22
}, {
  start: 474,
  length: 1,
  convRule: rule23
}, {
  start: 475,
  length: 1,
  convRule: rule22
}, {
  start: 476,
  length: 1,
  convRule: rule23
}, {
  start: 477,
  length: 1,
  convRule: rule50
}, {
  start: 478,
  length: 1,
  convRule: rule22
}, {
  start: 479,
  length: 1,
  convRule: rule23
}, {
  start: 480,
  length: 1,
  convRule: rule22
}, {
  start: 481,
  length: 1,
  convRule: rule23
}, {
  start: 482,
  length: 1,
  convRule: rule22
}, {
  start: 483,
  length: 1,
  convRule: rule23
}, {
  start: 484,
  length: 1,
  convRule: rule22
}, {
  start: 485,
  length: 1,
  convRule: rule23
}, {
  start: 486,
  length: 1,
  convRule: rule22
}, {
  start: 487,
  length: 1,
  convRule: rule23
}, {
  start: 488,
  length: 1,
  convRule: rule22
}, {
  start: 489,
  length: 1,
  convRule: rule23
}, {
  start: 490,
  length: 1,
  convRule: rule22
}, {
  start: 491,
  length: 1,
  convRule: rule23
}, {
  start: 492,
  length: 1,
  convRule: rule22
}, {
  start: 493,
  length: 1,
  convRule: rule23
}, {
  start: 494,
  length: 1,
  convRule: rule22
}, {
  start: 495,
  length: 1,
  convRule: rule23
}, {
  start: 497,
  length: 1,
  convRule: rule47
}, {
  start: 498,
  length: 1,
  convRule: rule48
}, {
  start: 499,
  length: 1,
  convRule: rule49
}, {
  start: 500,
  length: 1,
  convRule: rule22
}, {
  start: 501,
  length: 1,
  convRule: rule23
}, {
  start: 502,
  length: 1,
  convRule: rule51
}, {
  start: 503,
  length: 1,
  convRule: rule52
}, {
  start: 504,
  length: 1,
  convRule: rule22
}, {
  start: 505,
  length: 1,
  convRule: rule23
}, {
  start: 506,
  length: 1,
  convRule: rule22
}, {
  start: 507,
  length: 1,
  convRule: rule23
}, {
  start: 508,
  length: 1,
  convRule: rule22
}, {
  start: 509,
  length: 1,
  convRule: rule23
}, {
  start: 510,
  length: 1,
  convRule: rule22
}, {
  start: 511,
  length: 1,
  convRule: rule23
}, {
  start: 512,
  length: 1,
  convRule: rule22
}, {
  start: 513,
  length: 1,
  convRule: rule23
}, {
  start: 514,
  length: 1,
  convRule: rule22
}, {
  start: 515,
  length: 1,
  convRule: rule23
}, {
  start: 516,
  length: 1,
  convRule: rule22
}, {
  start: 517,
  length: 1,
  convRule: rule23
}, {
  start: 518,
  length: 1,
  convRule: rule22
}, {
  start: 519,
  length: 1,
  convRule: rule23
}, {
  start: 520,
  length: 1,
  convRule: rule22
}, {
  start: 521,
  length: 1,
  convRule: rule23
}, {
  start: 522,
  length: 1,
  convRule: rule22
}, {
  start: 523,
  length: 1,
  convRule: rule23
}, {
  start: 524,
  length: 1,
  convRule: rule22
}, {
  start: 525,
  length: 1,
  convRule: rule23
}, {
  start: 526,
  length: 1,
  convRule: rule22
}, {
  start: 527,
  length: 1,
  convRule: rule23
}, {
  start: 528,
  length: 1,
  convRule: rule22
}, {
  start: 529,
  length: 1,
  convRule: rule23
}, {
  start: 530,
  length: 1,
  convRule: rule22
}, {
  start: 531,
  length: 1,
  convRule: rule23
}, {
  start: 532,
  length: 1,
  convRule: rule22
}, {
  start: 533,
  length: 1,
  convRule: rule23
}, {
  start: 534,
  length: 1,
  convRule: rule22
}, {
  start: 535,
  length: 1,
  convRule: rule23
}, {
  start: 536,
  length: 1,
  convRule: rule22
}, {
  start: 537,
  length: 1,
  convRule: rule23
}, {
  start: 538,
  length: 1,
  convRule: rule22
}, {
  start: 539,
  length: 1,
  convRule: rule23
}, {
  start: 540,
  length: 1,
  convRule: rule22
}, {
  start: 541,
  length: 1,
  convRule: rule23
}, {
  start: 542,
  length: 1,
  convRule: rule22
}, {
  start: 543,
  length: 1,
  convRule: rule23
}, {
  start: 544,
  length: 1,
  convRule: rule53
}, {
  start: 546,
  length: 1,
  convRule: rule22
}, {
  start: 547,
  length: 1,
  convRule: rule23
}, {
  start: 548,
  length: 1,
  convRule: rule22
}, {
  start: 549,
  length: 1,
  convRule: rule23
}, {
  start: 550,
  length: 1,
  convRule: rule22
}, {
  start: 551,
  length: 1,
  convRule: rule23
}, {
  start: 552,
  length: 1,
  convRule: rule22
}, {
  start: 553,
  length: 1,
  convRule: rule23
}, {
  start: 554,
  length: 1,
  convRule: rule22
}, {
  start: 555,
  length: 1,
  convRule: rule23
}, {
  start: 556,
  length: 1,
  convRule: rule22
}, {
  start: 557,
  length: 1,
  convRule: rule23
}, {
  start: 558,
  length: 1,
  convRule: rule22
}, {
  start: 559,
  length: 1,
  convRule: rule23
}, {
  start: 560,
  length: 1,
  convRule: rule22
}, {
  start: 561,
  length: 1,
  convRule: rule23
}, {
  start: 562,
  length: 1,
  convRule: rule22
}, {
  start: 563,
  length: 1,
  convRule: rule23
}, {
  start: 570,
  length: 1,
  convRule: rule54
}, {
  start: 571,
  length: 1,
  convRule: rule22
}, {
  start: 572,
  length: 1,
  convRule: rule23
}, {
  start: 573,
  length: 1,
  convRule: rule55
}, {
  start: 574,
  length: 1,
  convRule: rule56
}, {
  start: 575,
  length: 2,
  convRule: rule57
}, {
  start: 577,
  length: 1,
  convRule: rule22
}, {
  start: 578,
  length: 1,
  convRule: rule23
}, {
  start: 579,
  length: 1,
  convRule: rule58
}, {
  start: 580,
  length: 1,
  convRule: rule59
}, {
  start: 581,
  length: 1,
  convRule: rule60
}, {
  start: 582,
  length: 1,
  convRule: rule22
}, {
  start: 583,
  length: 1,
  convRule: rule23
}, {
  start: 584,
  length: 1,
  convRule: rule22
}, {
  start: 585,
  length: 1,
  convRule: rule23
}, {
  start: 586,
  length: 1,
  convRule: rule22
}, {
  start: 587,
  length: 1,
  convRule: rule23
}, {
  start: 588,
  length: 1,
  convRule: rule22
}, {
  start: 589,
  length: 1,
  convRule: rule23
}, {
  start: 590,
  length: 1,
  convRule: rule22
}, {
  start: 591,
  length: 1,
  convRule: rule23
}, {
  start: 592,
  length: 1,
  convRule: rule61
}, {
  start: 593,
  length: 1,
  convRule: rule62
}, {
  start: 594,
  length: 1,
  convRule: rule63
}, {
  start: 595,
  length: 1,
  convRule: rule64
}, {
  start: 596,
  length: 1,
  convRule: rule65
}, {
  start: 598,
  length: 2,
  convRule: rule66
}, {
  start: 601,
  length: 1,
  convRule: rule67
}, {
  start: 603,
  length: 1,
  convRule: rule68
}, {
  start: 604,
  length: 1,
  convRule: rule69
}, {
  start: 608,
  length: 1,
  convRule: rule66
}, {
  start: 609,
  length: 1,
  convRule: rule70
}, {
  start: 611,
  length: 1,
  convRule: rule71
}, {
  start: 613,
  length: 1,
  convRule: rule72
}, {
  start: 614,
  length: 1,
  convRule: rule73
}, {
  start: 616,
  length: 1,
  convRule: rule74
}, {
  start: 617,
  length: 1,
  convRule: rule75
}, {
  start: 618,
  length: 1,
  convRule: rule73
}, {
  start: 619,
  length: 1,
  convRule: rule76
}, {
  start: 620,
  length: 1,
  convRule: rule77
}, {
  start: 623,
  length: 1,
  convRule: rule75
}, {
  start: 625,
  length: 1,
  convRule: rule78
}, {
  start: 626,
  length: 1,
  convRule: rule79
}, {
  start: 629,
  length: 1,
  convRule: rule80
}, {
  start: 637,
  length: 1,
  convRule: rule81
}, {
  start: 640,
  length: 1,
  convRule: rule82
}, {
  start: 642,
  length: 1,
  convRule: rule83
}, {
  start: 643,
  length: 1,
  convRule: rule82
}, {
  start: 647,
  length: 1,
  convRule: rule84
}, {
  start: 648,
  length: 1,
  convRule: rule82
}, {
  start: 649,
  length: 1,
  convRule: rule85
}, {
  start: 650,
  length: 2,
  convRule: rule86
}, {
  start: 652,
  length: 1,
  convRule: rule87
}, {
  start: 658,
  length: 1,
  convRule: rule88
}, {
  start: 669,
  length: 1,
  convRule: rule89
}, {
  start: 670,
  length: 1,
  convRule: rule90
}, {
  start: 837,
  length: 1,
  convRule: rule93
}, {
  start: 880,
  length: 1,
  convRule: rule22
}, {
  start: 881,
  length: 1,
  convRule: rule23
}, {
  start: 882,
  length: 1,
  convRule: rule22
}, {
  start: 883,
  length: 1,
  convRule: rule23
}, {
  start: 886,
  length: 1,
  convRule: rule22
}, {
  start: 887,
  length: 1,
  convRule: rule23
}, {
  start: 891,
  length: 3,
  convRule: rule41
}, {
  start: 895,
  length: 1,
  convRule: rule94
}, {
  start: 902,
  length: 1,
  convRule: rule95
}, {
  start: 904,
  length: 3,
  convRule: rule96
}, {
  start: 908,
  length: 1,
  convRule: rule97
}, {
  start: 910,
  length: 2,
  convRule: rule98
}, {
  start: 913,
  length: 17,
  convRule: rule9
}, {
  start: 931,
  length: 9,
  convRule: rule9
}, {
  start: 940,
  length: 1,
  convRule: rule99
}, {
  start: 941,
  length: 3,
  convRule: rule100
}, {
  start: 945,
  length: 17,
  convRule: rule12
}, {
  start: 962,
  length: 1,
  convRule: rule101
}, {
  start: 963,
  length: 9,
  convRule: rule12
}, {
  start: 972,
  length: 1,
  convRule: rule102
}, {
  start: 973,
  length: 2,
  convRule: rule103
}, {
  start: 975,
  length: 1,
  convRule: rule104
}, {
  start: 976,
  length: 1,
  convRule: rule105
}, {
  start: 977,
  length: 1,
  convRule: rule106
}, {
  start: 981,
  length: 1,
  convRule: rule108
}, {
  start: 982,
  length: 1,
  convRule: rule109
}, {
  start: 983,
  length: 1,
  convRule: rule110
}, {
  start: 984,
  length: 1,
  convRule: rule22
}, {
  start: 985,
  length: 1,
  convRule: rule23
}, {
  start: 986,
  length: 1,
  convRule: rule22
}, {
  start: 987,
  length: 1,
  convRule: rule23
}, {
  start: 988,
  length: 1,
  convRule: rule22
}, {
  start: 989,
  length: 1,
  convRule: rule23
}, {
  start: 990,
  length: 1,
  convRule: rule22
}, {
  start: 991,
  length: 1,
  convRule: rule23
}, {
  start: 992,
  length: 1,
  convRule: rule22
}, {
  start: 993,
  length: 1,
  convRule: rule23
}, {
  start: 994,
  length: 1,
  convRule: rule22
}, {
  start: 995,
  length: 1,
  convRule: rule23
}, {
  start: 996,
  length: 1,
  convRule: rule22
}, {
  start: 997,
  length: 1,
  convRule: rule23
}, {
  start: 998,
  length: 1,
  convRule: rule22
}, {
  start: 999,
  length: 1,
  convRule: rule23
}, {
  start: 1e3,
  length: 1,
  convRule: rule22
}, {
  start: 1001,
  length: 1,
  convRule: rule23
}, {
  start: 1002,
  length: 1,
  convRule: rule22
}, {
  start: 1003,
  length: 1,
  convRule: rule23
}, {
  start: 1004,
  length: 1,
  convRule: rule22
}, {
  start: 1005,
  length: 1,
  convRule: rule23
}, {
  start: 1006,
  length: 1,
  convRule: rule22
}, {
  start: 1007,
  length: 1,
  convRule: rule23
}, {
  start: 1008,
  length: 1,
  convRule: rule111
}, {
  start: 1009,
  length: 1,
  convRule: rule112
}, {
  start: 1010,
  length: 1,
  convRule: rule113
}, {
  start: 1011,
  length: 1,
  convRule: rule114
}, {
  start: 1012,
  length: 1,
  convRule: rule115
}, {
  start: 1013,
  length: 1,
  convRule: rule116
}, {
  start: 1015,
  length: 1,
  convRule: rule22
}, {
  start: 1016,
  length: 1,
  convRule: rule23
}, {
  start: 1017,
  length: 1,
  convRule: rule117
}, {
  start: 1018,
  length: 1,
  convRule: rule22
}, {
  start: 1019,
  length: 1,
  convRule: rule23
}, {
  start: 1021,
  length: 3,
  convRule: rule53
}, {
  start: 1024,
  length: 16,
  convRule: rule118
}, {
  start: 1040,
  length: 32,
  convRule: rule9
}, {
  start: 1072,
  length: 32,
  convRule: rule12
}, {
  start: 1104,
  length: 16,
  convRule: rule112
}, {
  start: 1120,
  length: 1,
  convRule: rule22
}, {
  start: 1121,
  length: 1,
  convRule: rule23
}, {
  start: 1122,
  length: 1,
  convRule: rule22
}, {
  start: 1123,
  length: 1,
  convRule: rule23
}, {
  start: 1124,
  length: 1,
  convRule: rule22
}, {
  start: 1125,
  length: 1,
  convRule: rule23
}, {
  start: 1126,
  length: 1,
  convRule: rule22
}, {
  start: 1127,
  length: 1,
  convRule: rule23
}, {
  start: 1128,
  length: 1,
  convRule: rule22
}, {
  start: 1129,
  length: 1,
  convRule: rule23
}, {
  start: 1130,
  length: 1,
  convRule: rule22
}, {
  start: 1131,
  length: 1,
  convRule: rule23
}, {
  start: 1132,
  length: 1,
  convRule: rule22
}, {
  start: 1133,
  length: 1,
  convRule: rule23
}, {
  start: 1134,
  length: 1,
  convRule: rule22
}, {
  start: 1135,
  length: 1,
  convRule: rule23
}, {
  start: 1136,
  length: 1,
  convRule: rule22
}, {
  start: 1137,
  length: 1,
  convRule: rule23
}, {
  start: 1138,
  length: 1,
  convRule: rule22
}, {
  start: 1139,
  length: 1,
  convRule: rule23
}, {
  start: 1140,
  length: 1,
  convRule: rule22
}, {
  start: 1141,
  length: 1,
  convRule: rule23
}, {
  start: 1142,
  length: 1,
  convRule: rule22
}, {
  start: 1143,
  length: 1,
  convRule: rule23
}, {
  start: 1144,
  length: 1,
  convRule: rule22
}, {
  start: 1145,
  length: 1,
  convRule: rule23
}, {
  start: 1146,
  length: 1,
  convRule: rule22
}, {
  start: 1147,
  length: 1,
  convRule: rule23
}, {
  start: 1148,
  length: 1,
  convRule: rule22
}, {
  start: 1149,
  length: 1,
  convRule: rule23
}, {
  start: 1150,
  length: 1,
  convRule: rule22
}, {
  start: 1151,
  length: 1,
  convRule: rule23
}, {
  start: 1152,
  length: 1,
  convRule: rule22
}, {
  start: 1153,
  length: 1,
  convRule: rule23
}, {
  start: 1162,
  length: 1,
  convRule: rule22
}, {
  start: 1163,
  length: 1,
  convRule: rule23
}, {
  start: 1164,
  length: 1,
  convRule: rule22
}, {
  start: 1165,
  length: 1,
  convRule: rule23
}, {
  start: 1166,
  length: 1,
  convRule: rule22
}, {
  start: 1167,
  length: 1,
  convRule: rule23
}, {
  start: 1168,
  length: 1,
  convRule: rule22
}, {
  start: 1169,
  length: 1,
  convRule: rule23
}, {
  start: 1170,
  length: 1,
  convRule: rule22
}, {
  start: 1171,
  length: 1,
  convRule: rule23
}, {
  start: 1172,
  length: 1,
  convRule: rule22
}, {
  start: 1173,
  length: 1,
  convRule: rule23
}, {
  start: 1174,
  length: 1,
  convRule: rule22
}, {
  start: 1175,
  length: 1,
  convRule: rule23
}, {
  start: 1176,
  length: 1,
  convRule: rule22
}, {
  start: 1177,
  length: 1,
  convRule: rule23
}, {
  start: 1178,
  length: 1,
  convRule: rule22
}, {
  start: 1179,
  length: 1,
  convRule: rule23
}, {
  start: 1180,
  length: 1,
  convRule: rule22
}, {
  start: 1181,
  length: 1,
  convRule: rule23
}, {
  start: 1182,
  length: 1,
  convRule: rule22
}, {
  start: 1183,
  length: 1,
  convRule: rule23
}, {
  start: 1184,
  length: 1,
  convRule: rule22
}, {
  start: 1185,
  length: 1,
  convRule: rule23
}, {
  start: 1186,
  length: 1,
  convRule: rule22
}, {
  start: 1187,
  length: 1,
  convRule: rule23
}, {
  start: 1188,
  length: 1,
  convRule: rule22
}, {
  start: 1189,
  length: 1,
  convRule: rule23
}, {
  start: 1190,
  length: 1,
  convRule: rule22
}, {
  start: 1191,
  length: 1,
  convRule: rule23
}, {
  start: 1192,
  length: 1,
  convRule: rule22
}, {
  start: 1193,
  length: 1,
  convRule: rule23
}, {
  start: 1194,
  length: 1,
  convRule: rule22
}, {
  start: 1195,
  length: 1,
  convRule: rule23
}, {
  start: 1196,
  length: 1,
  convRule: rule22
}, {
  start: 1197,
  length: 1,
  convRule: rule23
}, {
  start: 1198,
  length: 1,
  convRule: rule22
}, {
  start: 1199,
  length: 1,
  convRule: rule23
}, {
  start: 1200,
  length: 1,
  convRule: rule22
}, {
  start: 1201,
  length: 1,
  convRule: rule23
}, {
  start: 1202,
  length: 1,
  convRule: rule22
}, {
  start: 1203,
  length: 1,
  convRule: rule23
}, {
  start: 1204,
  length: 1,
  convRule: rule22
}, {
  start: 1205,
  length: 1,
  convRule: rule23
}, {
  start: 1206,
  length: 1,
  convRule: rule22
}, {
  start: 1207,
  length: 1,
  convRule: rule23
}, {
  start: 1208,
  length: 1,
  convRule: rule22
}, {
  start: 1209,
  length: 1,
  convRule: rule23
}, {
  start: 1210,
  length: 1,
  convRule: rule22
}, {
  start: 1211,
  length: 1,
  convRule: rule23
}, {
  start: 1212,
  length: 1,
  convRule: rule22
}, {
  start: 1213,
  length: 1,
  convRule: rule23
}, {
  start: 1214,
  length: 1,
  convRule: rule22
}, {
  start: 1215,
  length: 1,
  convRule: rule23
}, {
  start: 1216,
  length: 1,
  convRule: rule120
}, {
  start: 1217,
  length: 1,
  convRule: rule22
}, {
  start: 1218,
  length: 1,
  convRule: rule23
}, {
  start: 1219,
  length: 1,
  convRule: rule22
}, {
  start: 1220,
  length: 1,
  convRule: rule23
}, {
  start: 1221,
  length: 1,
  convRule: rule22
}, {
  start: 1222,
  length: 1,
  convRule: rule23
}, {
  start: 1223,
  length: 1,
  convRule: rule22
}, {
  start: 1224,
  length: 1,
  convRule: rule23
}, {
  start: 1225,
  length: 1,
  convRule: rule22
}, {
  start: 1226,
  length: 1,
  convRule: rule23
}, {
  start: 1227,
  length: 1,
  convRule: rule22
}, {
  start: 1228,
  length: 1,
  convRule: rule23
}, {
  start: 1229,
  length: 1,
  convRule: rule22
}, {
  start: 1230,
  length: 1,
  convRule: rule23
}, {
  start: 1231,
  length: 1,
  convRule: rule121
}, {
  start: 1232,
  length: 1,
  convRule: rule22
}, {
  start: 1233,
  length: 1,
  convRule: rule23
}, {
  start: 1234,
  length: 1,
  convRule: rule22
}, {
  start: 1235,
  length: 1,
  convRule: rule23
}, {
  start: 1236,
  length: 1,
  convRule: rule22
}, {
  start: 1237,
  length: 1,
  convRule: rule23
}, {
  start: 1238,
  length: 1,
  convRule: rule22
}, {
  start: 1239,
  length: 1,
  convRule: rule23
}, {
  start: 1240,
  length: 1,
  convRule: rule22
}, {
  start: 1241,
  length: 1,
  convRule: rule23
}, {
  start: 1242,
  length: 1,
  convRule: rule22
}, {
  start: 1243,
  length: 1,
  convRule: rule23
}, {
  start: 1244,
  length: 1,
  convRule: rule22
}, {
  start: 1245,
  length: 1,
  convRule: rule23
}, {
  start: 1246,
  length: 1,
  convRule: rule22
}, {
  start: 1247,
  length: 1,
  convRule: rule23
}, {
  start: 1248,
  length: 1,
  convRule: rule22
}, {
  start: 1249,
  length: 1,
  convRule: rule23
}, {
  start: 1250,
  length: 1,
  convRule: rule22
}, {
  start: 1251,
  length: 1,
  convRule: rule23
}, {
  start: 1252,
  length: 1,
  convRule: rule22
}, {
  start: 1253,
  length: 1,
  convRule: rule23
}, {
  start: 1254,
  length: 1,
  convRule: rule22
}, {
  start: 1255,
  length: 1,
  convRule: rule23
}, {
  start: 1256,
  length: 1,
  convRule: rule22
}, {
  start: 1257,
  length: 1,
  convRule: rule23
}, {
  start: 1258,
  length: 1,
  convRule: rule22
}, {
  start: 1259,
  length: 1,
  convRule: rule23
}, {
  start: 1260,
  length: 1,
  convRule: rule22
}, {
  start: 1261,
  length: 1,
  convRule: rule23
}, {
  start: 1262,
  length: 1,
  convRule: rule22
}, {
  start: 1263,
  length: 1,
  convRule: rule23
}, {
  start: 1264,
  length: 1,
  convRule: rule22
}, {
  start: 1265,
  length: 1,
  convRule: rule23
}, {
  start: 1266,
  length: 1,
  convRule: rule22
}, {
  start: 1267,
  length: 1,
  convRule: rule23
}, {
  start: 1268,
  length: 1,
  convRule: rule22
}, {
  start: 1269,
  length: 1,
  convRule: rule23
}, {
  start: 1270,
  length: 1,
  convRule: rule22
}, {
  start: 1271,
  length: 1,
  convRule: rule23
}, {
  start: 1272,
  length: 1,
  convRule: rule22
}, {
  start: 1273,
  length: 1,
  convRule: rule23
}, {
  start: 1274,
  length: 1,
  convRule: rule22
}, {
  start: 1275,
  length: 1,
  convRule: rule23
}, {
  start: 1276,
  length: 1,
  convRule: rule22
}, {
  start: 1277,
  length: 1,
  convRule: rule23
}, {
  start: 1278,
  length: 1,
  convRule: rule22
}, {
  start: 1279,
  length: 1,
  convRule: rule23
}, {
  start: 1280,
  length: 1,
  convRule: rule22
}, {
  start: 1281,
  length: 1,
  convRule: rule23
}, {
  start: 1282,
  length: 1,
  convRule: rule22
}, {
  start: 1283,
  length: 1,
  convRule: rule23
}, {
  start: 1284,
  length: 1,
  convRule: rule22
}, {
  start: 1285,
  length: 1,
  convRule: rule23
}, {
  start: 1286,
  length: 1,
  convRule: rule22
}, {
  start: 1287,
  length: 1,
  convRule: rule23
}, {
  start: 1288,
  length: 1,
  convRule: rule22
}, {
  start: 1289,
  length: 1,
  convRule: rule23
}, {
  start: 1290,
  length: 1,
  convRule: rule22
}, {
  start: 1291,
  length: 1,
  convRule: rule23
}, {
  start: 1292,
  length: 1,
  convRule: rule22
}, {
  start: 1293,
  length: 1,
  convRule: rule23
}, {
  start: 1294,
  length: 1,
  convRule: rule22
}, {
  start: 1295,
  length: 1,
  convRule: rule23
}, {
  start: 1296,
  length: 1,
  convRule: rule22
}, {
  start: 1297,
  length: 1,
  convRule: rule23
}, {
  start: 1298,
  length: 1,
  convRule: rule22
}, {
  start: 1299,
  length: 1,
  convRule: rule23
}, {
  start: 1300,
  length: 1,
  convRule: rule22
}, {
  start: 1301,
  length: 1,
  convRule: rule23
}, {
  start: 1302,
  length: 1,
  convRule: rule22
}, {
  start: 1303,
  length: 1,
  convRule: rule23
}, {
  start: 1304,
  length: 1,
  convRule: rule22
}, {
  start: 1305,
  length: 1,
  convRule: rule23
}, {
  start: 1306,
  length: 1,
  convRule: rule22
}, {
  start: 1307,
  length: 1,
  convRule: rule23
}, {
  start: 1308,
  length: 1,
  convRule: rule22
}, {
  start: 1309,
  length: 1,
  convRule: rule23
}, {
  start: 1310,
  length: 1,
  convRule: rule22
}, {
  start: 1311,
  length: 1,
  convRule: rule23
}, {
  start: 1312,
  length: 1,
  convRule: rule22
}, {
  start: 1313,
  length: 1,
  convRule: rule23
}, {
  start: 1314,
  length: 1,
  convRule: rule22
}, {
  start: 1315,
  length: 1,
  convRule: rule23
}, {
  start: 1316,
  length: 1,
  convRule: rule22
}, {
  start: 1317,
  length: 1,
  convRule: rule23
}, {
  start: 1318,
  length: 1,
  convRule: rule22
}, {
  start: 1319,
  length: 1,
  convRule: rule23
}, {
  start: 1320,
  length: 1,
  convRule: rule22
}, {
  start: 1321,
  length: 1,
  convRule: rule23
}, {
  start: 1322,
  length: 1,
  convRule: rule22
}, {
  start: 1323,
  length: 1,
  convRule: rule23
}, {
  start: 1324,
  length: 1,
  convRule: rule22
}, {
  start: 1325,
  length: 1,
  convRule: rule23
}, {
  start: 1326,
  length: 1,
  convRule: rule22
}, {
  start: 1327,
  length: 1,
  convRule: rule23
}, {
  start: 1329,
  length: 38,
  convRule: rule122
}, {
  start: 1377,
  length: 38,
  convRule: rule123
}, {
  start: 4256,
  length: 38,
  convRule: rule125
}, {
  start: 4295,
  length: 1,
  convRule: rule125
}, {
  start: 4301,
  length: 1,
  convRule: rule125
}, {
  start: 4304,
  length: 43,
  convRule: rule126
}, {
  start: 4349,
  length: 3,
  convRule: rule126
}, {
  start: 5024,
  length: 80,
  convRule: rule127
}, {
  start: 5104,
  length: 6,
  convRule: rule104
}, {
  start: 5112,
  length: 6,
  convRule: rule110
}, {
  start: 7296,
  length: 1,
  convRule: rule129
}, {
  start: 7297,
  length: 1,
  convRule: rule130
}, {
  start: 7298,
  length: 1,
  convRule: rule131
}, {
  start: 7299,
  length: 2,
  convRule: rule132
}, {
  start: 7301,
  length: 1,
  convRule: rule133
}, {
  start: 7302,
  length: 1,
  convRule: rule134
}, {
  start: 7303,
  length: 1,
  convRule: rule135
}, {
  start: 7304,
  length: 1,
  convRule: rule136
}, {
  start: 7312,
  length: 43,
  convRule: rule137
}, {
  start: 7357,
  length: 3,
  convRule: rule137
}, {
  start: 7545,
  length: 1,
  convRule: rule138
}, {
  start: 7549,
  length: 1,
  convRule: rule139
}, {
  start: 7566,
  length: 1,
  convRule: rule140
}, {
  start: 7680,
  length: 1,
  convRule: rule22
}, {
  start: 7681,
  length: 1,
  convRule: rule23
}, {
  start: 7682,
  length: 1,
  convRule: rule22
}, {
  start: 7683,
  length: 1,
  convRule: rule23
}, {
  start: 7684,
  length: 1,
  convRule: rule22
}, {
  start: 7685,
  length: 1,
  convRule: rule23
}, {
  start: 7686,
  length: 1,
  convRule: rule22
}, {
  start: 7687,
  length: 1,
  convRule: rule23
}, {
  start: 7688,
  length: 1,
  convRule: rule22
}, {
  start: 7689,
  length: 1,
  convRule: rule23
}, {
  start: 7690,
  length: 1,
  convRule: rule22
}, {
  start: 7691,
  length: 1,
  convRule: rule23
}, {
  start: 7692,
  length: 1,
  convRule: rule22
}, {
  start: 7693,
  length: 1,
  convRule: rule23
}, {
  start: 7694,
  length: 1,
  convRule: rule22
}, {
  start: 7695,
  length: 1,
  convRule: rule23
}, {
  start: 7696,
  length: 1,
  convRule: rule22
}, {
  start: 7697,
  length: 1,
  convRule: rule23
}, {
  start: 7698,
  length: 1,
  convRule: rule22
}, {
  start: 7699,
  length: 1,
  convRule: rule23
}, {
  start: 7700,
  length: 1,
  convRule: rule22
}, {
  start: 7701,
  length: 1,
  convRule: rule23
}, {
  start: 7702,
  length: 1,
  convRule: rule22
}, {
  start: 7703,
  length: 1,
  convRule: rule23
}, {
  start: 7704,
  length: 1,
  convRule: rule22
}, {
  start: 7705,
  length: 1,
  convRule: rule23
}, {
  start: 7706,
  length: 1,
  convRule: rule22
}, {
  start: 7707,
  length: 1,
  convRule: rule23
}, {
  start: 7708,
  length: 1,
  convRule: rule22
}, {
  start: 7709,
  length: 1,
  convRule: rule23
}, {
  start: 7710,
  length: 1,
  convRule: rule22
}, {
  start: 7711,
  length: 1,
  convRule: rule23
}, {
  start: 7712,
  length: 1,
  convRule: rule22
}, {
  start: 7713,
  length: 1,
  convRule: rule23
}, {
  start: 7714,
  length: 1,
  convRule: rule22
}, {
  start: 7715,
  length: 1,
  convRule: rule23
}, {
  start: 7716,
  length: 1,
  convRule: rule22
}, {
  start: 7717,
  length: 1,
  convRule: rule23
}, {
  start: 7718,
  length: 1,
  convRule: rule22
}, {
  start: 7719,
  length: 1,
  convRule: rule23
}, {
  start: 7720,
  length: 1,
  convRule: rule22
}, {
  start: 7721,
  length: 1,
  convRule: rule23
}, {
  start: 7722,
  length: 1,
  convRule: rule22
}, {
  start: 7723,
  length: 1,
  convRule: rule23
}, {
  start: 7724,
  length: 1,
  convRule: rule22
}, {
  start: 7725,
  length: 1,
  convRule: rule23
}, {
  start: 7726,
  length: 1,
  convRule: rule22
}, {
  start: 7727,
  length: 1,
  convRule: rule23
}, {
  start: 7728,
  length: 1,
  convRule: rule22
}, {
  start: 7729,
  length: 1,
  convRule: rule23
}, {
  start: 7730,
  length: 1,
  convRule: rule22
}, {
  start: 7731,
  length: 1,
  convRule: rule23
}, {
  start: 7732,
  length: 1,
  convRule: rule22
}, {
  start: 7733,
  length: 1,
  convRule: rule23
}, {
  start: 7734,
  length: 1,
  convRule: rule22
}, {
  start: 7735,
  length: 1,
  convRule: rule23
}, {
  start: 7736,
  length: 1,
  convRule: rule22
}, {
  start: 7737,
  length: 1,
  convRule: rule23
}, {
  start: 7738,
  length: 1,
  convRule: rule22
}, {
  start: 7739,
  length: 1,
  convRule: rule23
}, {
  start: 7740,
  length: 1,
  convRule: rule22
}, {
  start: 7741,
  length: 1,
  convRule: rule23
}, {
  start: 7742,
  length: 1,
  convRule: rule22
}, {
  start: 7743,
  length: 1,
  convRule: rule23
}, {
  start: 7744,
  length: 1,
  convRule: rule22
}, {
  start: 7745,
  length: 1,
  convRule: rule23
}, {
  start: 7746,
  length: 1,
  convRule: rule22
}, {
  start: 7747,
  length: 1,
  convRule: rule23
}, {
  start: 7748,
  length: 1,
  convRule: rule22
}, {
  start: 7749,
  length: 1,
  convRule: rule23
}, {
  start: 7750,
  length: 1,
  convRule: rule22
}, {
  start: 7751,
  length: 1,
  convRule: rule23
}, {
  start: 7752,
  length: 1,
  convRule: rule22
}, {
  start: 7753,
  length: 1,
  convRule: rule23
}, {
  start: 7754,
  length: 1,
  convRule: rule22
}, {
  start: 7755,
  length: 1,
  convRule: rule23
}, {
  start: 7756,
  length: 1,
  convRule: rule22
}, {
  start: 7757,
  length: 1,
  convRule: rule23
}, {
  start: 7758,
  length: 1,
  convRule: rule22
}, {
  start: 7759,
  length: 1,
  convRule: rule23
}, {
  start: 7760,
  length: 1,
  convRule: rule22
}, {
  start: 7761,
  length: 1,
  convRule: rule23
}, {
  start: 7762,
  length: 1,
  convRule: rule22
}, {
  start: 7763,
  length: 1,
  convRule: rule23
}, {
  start: 7764,
  length: 1,
  convRule: rule22
}, {
  start: 7765,
  length: 1,
  convRule: rule23
}, {
  start: 7766,
  length: 1,
  convRule: rule22
}, {
  start: 7767,
  length: 1,
  convRule: rule23
}, {
  start: 7768,
  length: 1,
  convRule: rule22
}, {
  start: 7769,
  length: 1,
  convRule: rule23
}, {
  start: 7770,
  length: 1,
  convRule: rule22
}, {
  start: 7771,
  length: 1,
  convRule: rule23
}, {
  start: 7772,
  length: 1,
  convRule: rule22
}, {
  start: 7773,
  length: 1,
  convRule: rule23
}, {
  start: 7774,
  length: 1,
  convRule: rule22
}, {
  start: 7775,
  length: 1,
  convRule: rule23
}, {
  start: 7776,
  length: 1,
  convRule: rule22
}, {
  start: 7777,
  length: 1,
  convRule: rule23
}, {
  start: 7778,
  length: 1,
  convRule: rule22
}, {
  start: 7779,
  length: 1,
  convRule: rule23
}, {
  start: 7780,
  length: 1,
  convRule: rule22
}, {
  start: 7781,
  length: 1,
  convRule: rule23
}, {
  start: 7782,
  length: 1,
  convRule: rule22
}, {
  start: 7783,
  length: 1,
  convRule: rule23
}, {
  start: 7784,
  length: 1,
  convRule: rule22
}, {
  start: 7785,
  length: 1,
  convRule: rule23
}, {
  start: 7786,
  length: 1,
  convRule: rule22
}, {
  start: 7787,
  length: 1,
  convRule: rule23
}, {
  start: 7788,
  length: 1,
  convRule: rule22
}, {
  start: 7789,
  length: 1,
  convRule: rule23
}, {
  start: 7790,
  length: 1,
  convRule: rule22
}, {
  start: 7791,
  length: 1,
  convRule: rule23
}, {
  start: 7792,
  length: 1,
  convRule: rule22
}, {
  start: 7793,
  length: 1,
  convRule: rule23
}, {
  start: 7794,
  length: 1,
  convRule: rule22
}, {
  start: 7795,
  length: 1,
  convRule: rule23
}, {
  start: 7796,
  length: 1,
  convRule: rule22
}, {
  start: 7797,
  length: 1,
  convRule: rule23
}, {
  start: 7798,
  length: 1,
  convRule: rule22
}, {
  start: 7799,
  length: 1,
  convRule: rule23
}, {
  start: 7800,
  length: 1,
  convRule: rule22
}, {
  start: 7801,
  length: 1,
  convRule: rule23
}, {
  start: 7802,
  length: 1,
  convRule: rule22
}, {
  start: 7803,
  length: 1,
  convRule: rule23
}, {
  start: 7804,
  length: 1,
  convRule: rule22
}, {
  start: 7805,
  length: 1,
  convRule: rule23
}, {
  start: 7806,
  length: 1,
  convRule: rule22
}, {
  start: 7807,
  length: 1,
  convRule: rule23
}, {
  start: 7808,
  length: 1,
  convRule: rule22
}, {
  start: 7809,
  length: 1,
  convRule: rule23
}, {
  start: 7810,
  length: 1,
  convRule: rule22
}, {
  start: 7811,
  length: 1,
  convRule: rule23
}, {
  start: 7812,
  length: 1,
  convRule: rule22
}, {
  start: 7813,
  length: 1,
  convRule: rule23
}, {
  start: 7814,
  length: 1,
  convRule: rule22
}, {
  start: 7815,
  length: 1,
  convRule: rule23
}, {
  start: 7816,
  length: 1,
  convRule: rule22
}, {
  start: 7817,
  length: 1,
  convRule: rule23
}, {
  start: 7818,
  length: 1,
  convRule: rule22
}, {
  start: 7819,
  length: 1,
  convRule: rule23
}, {
  start: 7820,
  length: 1,
  convRule: rule22
}, {
  start: 7821,
  length: 1,
  convRule: rule23
}, {
  start: 7822,
  length: 1,
  convRule: rule22
}, {
  start: 7823,
  length: 1,
  convRule: rule23
}, {
  start: 7824,
  length: 1,
  convRule: rule22
}, {
  start: 7825,
  length: 1,
  convRule: rule23
}, {
  start: 7826,
  length: 1,
  convRule: rule22
}, {
  start: 7827,
  length: 1,
  convRule: rule23
}, {
  start: 7828,
  length: 1,
  convRule: rule22
}, {
  start: 7829,
  length: 1,
  convRule: rule23
}, {
  start: 7835,
  length: 1,
  convRule: rule141
}, {
  start: 7838,
  length: 1,
  convRule: rule142
}, {
  start: 7840,
  length: 1,
  convRule: rule22
}, {
  start: 7841,
  length: 1,
  convRule: rule23
}, {
  start: 7842,
  length: 1,
  convRule: rule22
}, {
  start: 7843,
  length: 1,
  convRule: rule23
}, {
  start: 7844,
  length: 1,
  convRule: rule22
}, {
  start: 7845,
  length: 1,
  convRule: rule23
}, {
  start: 7846,
  length: 1,
  convRule: rule22
}, {
  start: 7847,
  length: 1,
  convRule: rule23
}, {
  start: 7848,
  length: 1,
  convRule: rule22
}, {
  start: 7849,
  length: 1,
  convRule: rule23
}, {
  start: 7850,
  length: 1,
  convRule: rule22
}, {
  start: 7851,
  length: 1,
  convRule: rule23
}, {
  start: 7852,
  length: 1,
  convRule: rule22
}, {
  start: 7853,
  length: 1,
  convRule: rule23
}, {
  start: 7854,
  length: 1,
  convRule: rule22
}, {
  start: 7855,
  length: 1,
  convRule: rule23
}, {
  start: 7856,
  length: 1,
  convRule: rule22
}, {
  start: 7857,
  length: 1,
  convRule: rule23
}, {
  start: 7858,
  length: 1,
  convRule: rule22
}, {
  start: 7859,
  length: 1,
  convRule: rule23
}, {
  start: 7860,
  length: 1,
  convRule: rule22
}, {
  start: 7861,
  length: 1,
  convRule: rule23
}, {
  start: 7862,
  length: 1,
  convRule: rule22
}, {
  start: 7863,
  length: 1,
  convRule: rule23
}, {
  start: 7864,
  length: 1,
  convRule: rule22
}, {
  start: 7865,
  length: 1,
  convRule: rule23
}, {
  start: 7866,
  length: 1,
  convRule: rule22
}, {
  start: 7867,
  length: 1,
  convRule: rule23
}, {
  start: 7868,
  length: 1,
  convRule: rule22
}, {
  start: 7869,
  length: 1,
  convRule: rule23
}, {
  start: 7870,
  length: 1,
  convRule: rule22
}, {
  start: 7871,
  length: 1,
  convRule: rule23
}, {
  start: 7872,
  length: 1,
  convRule: rule22
}, {
  start: 7873,
  length: 1,
  convRule: rule23
}, {
  start: 7874,
  length: 1,
  convRule: rule22
}, {
  start: 7875,
  length: 1,
  convRule: rule23
}, {
  start: 7876,
  length: 1,
  convRule: rule22
}, {
  start: 7877,
  length: 1,
  convRule: rule23
}, {
  start: 7878,
  length: 1,
  convRule: rule22
}, {
  start: 7879,
  length: 1,
  convRule: rule23
}, {
  start: 7880,
  length: 1,
  convRule: rule22
}, {
  start: 7881,
  length: 1,
  convRule: rule23
}, {
  start: 7882,
  length: 1,
  convRule: rule22
}, {
  start: 7883,
  length: 1,
  convRule: rule23
}, {
  start: 7884,
  length: 1,
  convRule: rule22
}, {
  start: 7885,
  length: 1,
  convRule: rule23
}, {
  start: 7886,
  length: 1,
  convRule: rule22
}, {
  start: 7887,
  length: 1,
  convRule: rule23
}, {
  start: 7888,
  length: 1,
  convRule: rule22
}, {
  start: 7889,
  length: 1,
  convRule: rule23
}, {
  start: 7890,
  length: 1,
  convRule: rule22
}, {
  start: 7891,
  length: 1,
  convRule: rule23
}, {
  start: 7892,
  length: 1,
  convRule: rule22
}, {
  start: 7893,
  length: 1,
  convRule: rule23
}, {
  start: 7894,
  length: 1,
  convRule: rule22
}, {
  start: 7895,
  length: 1,
  convRule: rule23
}, {
  start: 7896,
  length: 1,
  convRule: rule22
}, {
  start: 7897,
  length: 1,
  convRule: rule23
}, {
  start: 7898,
  length: 1,
  convRule: rule22
}, {
  start: 7899,
  length: 1,
  convRule: rule23
}, {
  start: 7900,
  length: 1,
  convRule: rule22
}, {
  start: 7901,
  length: 1,
  convRule: rule23
}, {
  start: 7902,
  length: 1,
  convRule: rule22
}, {
  start: 7903,
  length: 1,
  convRule: rule23
}, {
  start: 7904,
  length: 1,
  convRule: rule22
}, {
  start: 7905,
  length: 1,
  convRule: rule23
}, {
  start: 7906,
  length: 1,
  convRule: rule22
}, {
  start: 7907,
  length: 1,
  convRule: rule23
}, {
  start: 7908,
  length: 1,
  convRule: rule22
}, {
  start: 7909,
  length: 1,
  convRule: rule23
}, {
  start: 7910,
  length: 1,
  convRule: rule22
}, {
  start: 7911,
  length: 1,
  convRule: rule23
}, {
  start: 7912,
  length: 1,
  convRule: rule22
}, {
  start: 7913,
  length: 1,
  convRule: rule23
}, {
  start: 7914,
  length: 1,
  convRule: rule22
}, {
  start: 7915,
  length: 1,
  convRule: rule23
}, {
  start: 7916,
  length: 1,
  convRule: rule22
}, {
  start: 7917,
  length: 1,
  convRule: rule23
}, {
  start: 7918,
  length: 1,
  convRule: rule22
}, {
  start: 7919,
  length: 1,
  convRule: rule23
}, {
  start: 7920,
  length: 1,
  convRule: rule22
}, {
  start: 7921,
  length: 1,
  convRule: rule23
}, {
  start: 7922,
  length: 1,
  convRule: rule22
}, {
  start: 7923,
  length: 1,
  convRule: rule23
}, {
  start: 7924,
  length: 1,
  convRule: rule22
}, {
  start: 7925,
  length: 1,
  convRule: rule23
}, {
  start: 7926,
  length: 1,
  convRule: rule22
}, {
  start: 7927,
  length: 1,
  convRule: rule23
}, {
  start: 7928,
  length: 1,
  convRule: rule22
}, {
  start: 7929,
  length: 1,
  convRule: rule23
}, {
  start: 7930,
  length: 1,
  convRule: rule22
}, {
  start: 7931,
  length: 1,
  convRule: rule23
}, {
  start: 7932,
  length: 1,
  convRule: rule22
}, {
  start: 7933,
  length: 1,
  convRule: rule23
}, {
  start: 7934,
  length: 1,
  convRule: rule22
}, {
  start: 7935,
  length: 1,
  convRule: rule23
}, {
  start: 7936,
  length: 8,
  convRule: rule143
}, {
  start: 7944,
  length: 8,
  convRule: rule144
}, {
  start: 7952,
  length: 6,
  convRule: rule143
}, {
  start: 7960,
  length: 6,
  convRule: rule144
}, {
  start: 7968,
  length: 8,
  convRule: rule143
}, {
  start: 7976,
  length: 8,
  convRule: rule144
}, {
  start: 7984,
  length: 8,
  convRule: rule143
}, {
  start: 7992,
  length: 8,
  convRule: rule144
}, {
  start: 8e3,
  length: 6,
  convRule: rule143
}, {
  start: 8008,
  length: 6,
  convRule: rule144
}, {
  start: 8017,
  length: 1,
  convRule: rule143
}, {
  start: 8019,
  length: 1,
  convRule: rule143
}, {
  start: 8021,
  length: 1,
  convRule: rule143
}, {
  start: 8023,
  length: 1,
  convRule: rule143
}, {
  start: 8025,
  length: 1,
  convRule: rule144
}, {
  start: 8027,
  length: 1,
  convRule: rule144
}, {
  start: 8029,
  length: 1,
  convRule: rule144
}, {
  start: 8031,
  length: 1,
  convRule: rule144
}, {
  start: 8032,
  length: 8,
  convRule: rule143
}, {
  start: 8040,
  length: 8,
  convRule: rule144
}, {
  start: 8048,
  length: 2,
  convRule: rule145
}, {
  start: 8050,
  length: 4,
  convRule: rule146
}, {
  start: 8054,
  length: 2,
  convRule: rule147
}, {
  start: 8056,
  length: 2,
  convRule: rule148
}, {
  start: 8058,
  length: 2,
  convRule: rule149
}, {
  start: 8060,
  length: 2,
  convRule: rule150
}, {
  start: 8064,
  length: 8,
  convRule: rule143
}, {
  start: 8072,
  length: 8,
  convRule: rule151
}, {
  start: 8080,
  length: 8,
  convRule: rule143
}, {
  start: 8088,
  length: 8,
  convRule: rule151
}, {
  start: 8096,
  length: 8,
  convRule: rule143
}, {
  start: 8104,
  length: 8,
  convRule: rule151
}, {
  start: 8112,
  length: 2,
  convRule: rule143
}, {
  start: 8115,
  length: 1,
  convRule: rule152
}, {
  start: 8120,
  length: 2,
  convRule: rule144
}, {
  start: 8122,
  length: 2,
  convRule: rule153
}, {
  start: 8124,
  length: 1,
  convRule: rule154
}, {
  start: 8126,
  length: 1,
  convRule: rule155
}, {
  start: 8131,
  length: 1,
  convRule: rule152
}, {
  start: 8136,
  length: 4,
  convRule: rule156
}, {
  start: 8140,
  length: 1,
  convRule: rule154
}, {
  start: 8144,
  length: 2,
  convRule: rule143
}, {
  start: 8152,
  length: 2,
  convRule: rule144
}, {
  start: 8154,
  length: 2,
  convRule: rule157
}, {
  start: 8160,
  length: 2,
  convRule: rule143
}, {
  start: 8165,
  length: 1,
  convRule: rule113
}, {
  start: 8168,
  length: 2,
  convRule: rule144
}, {
  start: 8170,
  length: 2,
  convRule: rule158
}, {
  start: 8172,
  length: 1,
  convRule: rule117
}, {
  start: 8179,
  length: 1,
  convRule: rule152
}, {
  start: 8184,
  length: 2,
  convRule: rule159
}, {
  start: 8186,
  length: 2,
  convRule: rule160
}, {
  start: 8188,
  length: 1,
  convRule: rule154
}, {
  start: 8486,
  length: 1,
  convRule: rule163
}, {
  start: 8490,
  length: 1,
  convRule: rule164
}, {
  start: 8491,
  length: 1,
  convRule: rule165
}, {
  start: 8498,
  length: 1,
  convRule: rule166
}, {
  start: 8526,
  length: 1,
  convRule: rule167
}, {
  start: 8544,
  length: 16,
  convRule: rule168
}, {
  start: 8560,
  length: 16,
  convRule: rule169
}, {
  start: 8579,
  length: 1,
  convRule: rule22
}, {
  start: 8580,
  length: 1,
  convRule: rule23
}, {
  start: 9398,
  length: 26,
  convRule: rule170
}, {
  start: 9424,
  length: 26,
  convRule: rule171
}, {
  start: 11264,
  length: 47,
  convRule: rule122
}, {
  start: 11312,
  length: 47,
  convRule: rule123
}, {
  start: 11360,
  length: 1,
  convRule: rule22
}, {
  start: 11361,
  length: 1,
  convRule: rule23
}, {
  start: 11362,
  length: 1,
  convRule: rule172
}, {
  start: 11363,
  length: 1,
  convRule: rule173
}, {
  start: 11364,
  length: 1,
  convRule: rule174
}, {
  start: 11365,
  length: 1,
  convRule: rule175
}, {
  start: 11366,
  length: 1,
  convRule: rule176
}, {
  start: 11367,
  length: 1,
  convRule: rule22
}, {
  start: 11368,
  length: 1,
  convRule: rule23
}, {
  start: 11369,
  length: 1,
  convRule: rule22
}, {
  start: 11370,
  length: 1,
  convRule: rule23
}, {
  start: 11371,
  length: 1,
  convRule: rule22
}, {
  start: 11372,
  length: 1,
  convRule: rule23
}, {
  start: 11373,
  length: 1,
  convRule: rule177
}, {
  start: 11374,
  length: 1,
  convRule: rule178
}, {
  start: 11375,
  length: 1,
  convRule: rule179
}, {
  start: 11376,
  length: 1,
  convRule: rule180
}, {
  start: 11378,
  length: 1,
  convRule: rule22
}, {
  start: 11379,
  length: 1,
  convRule: rule23
}, {
  start: 11381,
  length: 1,
  convRule: rule22
}, {
  start: 11382,
  length: 1,
  convRule: rule23
}, {
  start: 11390,
  length: 2,
  convRule: rule181
}, {
  start: 11392,
  length: 1,
  convRule: rule22
}, {
  start: 11393,
  length: 1,
  convRule: rule23
}, {
  start: 11394,
  length: 1,
  convRule: rule22
}, {
  start: 11395,
  length: 1,
  convRule: rule23
}, {
  start: 11396,
  length: 1,
  convRule: rule22
}, {
  start: 11397,
  length: 1,
  convRule: rule23
}, {
  start: 11398,
  length: 1,
  convRule: rule22
}, {
  start: 11399,
  length: 1,
  convRule: rule23
}, {
  start: 11400,
  length: 1,
  convRule: rule22
}, {
  start: 11401,
  length: 1,
  convRule: rule23
}, {
  start: 11402,
  length: 1,
  convRule: rule22
}, {
  start: 11403,
  length: 1,
  convRule: rule23
}, {
  start: 11404,
  length: 1,
  convRule: rule22
}, {
  start: 11405,
  length: 1,
  convRule: rule23
}, {
  start: 11406,
  length: 1,
  convRule: rule22
}, {
  start: 11407,
  length: 1,
  convRule: rule23
}, {
  start: 11408,
  length: 1,
  convRule: rule22
}, {
  start: 11409,
  length: 1,
  convRule: rule23
}, {
  start: 11410,
  length: 1,
  convRule: rule22
}, {
  start: 11411,
  length: 1,
  convRule: rule23
}, {
  start: 11412,
  length: 1,
  convRule: rule22
}, {
  start: 11413,
  length: 1,
  convRule: rule23
}, {
  start: 11414,
  length: 1,
  convRule: rule22
}, {
  start: 11415,
  length: 1,
  convRule: rule23
}, {
  start: 11416,
  length: 1,
  convRule: rule22
}, {
  start: 11417,
  length: 1,
  convRule: rule23
}, {
  start: 11418,
  length: 1,
  convRule: rule22
}, {
  start: 11419,
  length: 1,
  convRule: rule23
}, {
  start: 11420,
  length: 1,
  convRule: rule22
}, {
  start: 11421,
  length: 1,
  convRule: rule23
}, {
  start: 11422,
  length: 1,
  convRule: rule22
}, {
  start: 11423,
  length: 1,
  convRule: rule23
}, {
  start: 11424,
  length: 1,
  convRule: rule22
}, {
  start: 11425,
  length: 1,
  convRule: rule23
}, {
  start: 11426,
  length: 1,
  convRule: rule22
}, {
  start: 11427,
  length: 1,
  convRule: rule23
}, {
  start: 11428,
  length: 1,
  convRule: rule22
}, {
  start: 11429,
  length: 1,
  convRule: rule23
}, {
  start: 11430,
  length: 1,
  convRule: rule22
}, {
  start: 11431,
  length: 1,
  convRule: rule23
}, {
  start: 11432,
  length: 1,
  convRule: rule22
}, {
  start: 11433,
  length: 1,
  convRule: rule23
}, {
  start: 11434,
  length: 1,
  convRule: rule22
}, {
  start: 11435,
  length: 1,
  convRule: rule23
}, {
  start: 11436,
  length: 1,
  convRule: rule22
}, {
  start: 11437,
  length: 1,
  convRule: rule23
}, {
  start: 11438,
  length: 1,
  convRule: rule22
}, {
  start: 11439,
  length: 1,
  convRule: rule23
}, {
  start: 11440,
  length: 1,
  convRule: rule22
}, {
  start: 11441,
  length: 1,
  convRule: rule23
}, {
  start: 11442,
  length: 1,
  convRule: rule22
}, {
  start: 11443,
  length: 1,
  convRule: rule23
}, {
  start: 11444,
  length: 1,
  convRule: rule22
}, {
  start: 11445,
  length: 1,
  convRule: rule23
}, {
  start: 11446,
  length: 1,
  convRule: rule22
}, {
  start: 11447,
  length: 1,
  convRule: rule23
}, {
  start: 11448,
  length: 1,
  convRule: rule22
}, {
  start: 11449,
  length: 1,
  convRule: rule23
}, {
  start: 11450,
  length: 1,
  convRule: rule22
}, {
  start: 11451,
  length: 1,
  convRule: rule23
}, {
  start: 11452,
  length: 1,
  convRule: rule22
}, {
  start: 11453,
  length: 1,
  convRule: rule23
}, {
  start: 11454,
  length: 1,
  convRule: rule22
}, {
  start: 11455,
  length: 1,
  convRule: rule23
}, {
  start: 11456,
  length: 1,
  convRule: rule22
}, {
  start: 11457,
  length: 1,
  convRule: rule23
}, {
  start: 11458,
  length: 1,
  convRule: rule22
}, {
  start: 11459,
  length: 1,
  convRule: rule23
}, {
  start: 11460,
  length: 1,
  convRule: rule22
}, {
  start: 11461,
  length: 1,
  convRule: rule23
}, {
  start: 11462,
  length: 1,
  convRule: rule22
}, {
  start: 11463,
  length: 1,
  convRule: rule23
}, {
  start: 11464,
  length: 1,
  convRule: rule22
}, {
  start: 11465,
  length: 1,
  convRule: rule23
}, {
  start: 11466,
  length: 1,
  convRule: rule22
}, {
  start: 11467,
  length: 1,
  convRule: rule23
}, {
  start: 11468,
  length: 1,
  convRule: rule22
}, {
  start: 11469,
  length: 1,
  convRule: rule23
}, {
  start: 11470,
  length: 1,
  convRule: rule22
}, {
  start: 11471,
  length: 1,
  convRule: rule23
}, {
  start: 11472,
  length: 1,
  convRule: rule22
}, {
  start: 11473,
  length: 1,
  convRule: rule23
}, {
  start: 11474,
  length: 1,
  convRule: rule22
}, {
  start: 11475,
  length: 1,
  convRule: rule23
}, {
  start: 11476,
  length: 1,
  convRule: rule22
}, {
  start: 11477,
  length: 1,
  convRule: rule23
}, {
  start: 11478,
  length: 1,
  convRule: rule22
}, {
  start: 11479,
  length: 1,
  convRule: rule23
}, {
  start: 11480,
  length: 1,
  convRule: rule22
}, {
  start: 11481,
  length: 1,
  convRule: rule23
}, {
  start: 11482,
  length: 1,
  convRule: rule22
}, {
  start: 11483,
  length: 1,
  convRule: rule23
}, {
  start: 11484,
  length: 1,
  convRule: rule22
}, {
  start: 11485,
  length: 1,
  convRule: rule23
}, {
  start: 11486,
  length: 1,
  convRule: rule22
}, {
  start: 11487,
  length: 1,
  convRule: rule23
}, {
  start: 11488,
  length: 1,
  convRule: rule22
}, {
  start: 11489,
  length: 1,
  convRule: rule23
}, {
  start: 11490,
  length: 1,
  convRule: rule22
}, {
  start: 11491,
  length: 1,
  convRule: rule23
}, {
  start: 11499,
  length: 1,
  convRule: rule22
}, {
  start: 11500,
  length: 1,
  convRule: rule23
}, {
  start: 11501,
  length: 1,
  convRule: rule22
}, {
  start: 11502,
  length: 1,
  convRule: rule23
}, {
  start: 11506,
  length: 1,
  convRule: rule22
}, {
  start: 11507,
  length: 1,
  convRule: rule23
}, {
  start: 11520,
  length: 38,
  convRule: rule182
}, {
  start: 11559,
  length: 1,
  convRule: rule182
}, {
  start: 11565,
  length: 1,
  convRule: rule182
}, {
  start: 42560,
  length: 1,
  convRule: rule22
}, {
  start: 42561,
  length: 1,
  convRule: rule23
}, {
  start: 42562,
  length: 1,
  convRule: rule22
}, {
  start: 42563,
  length: 1,
  convRule: rule23
}, {
  start: 42564,
  length: 1,
  convRule: rule22
}, {
  start: 42565,
  length: 1,
  convRule: rule23
}, {
  start: 42566,
  length: 1,
  convRule: rule22
}, {
  start: 42567,
  length: 1,
  convRule: rule23
}, {
  start: 42568,
  length: 1,
  convRule: rule22
}, {
  start: 42569,
  length: 1,
  convRule: rule23
}, {
  start: 42570,
  length: 1,
  convRule: rule22
}, {
  start: 42571,
  length: 1,
  convRule: rule23
}, {
  start: 42572,
  length: 1,
  convRule: rule22
}, {
  start: 42573,
  length: 1,
  convRule: rule23
}, {
  start: 42574,
  length: 1,
  convRule: rule22
}, {
  start: 42575,
  length: 1,
  convRule: rule23
}, {
  start: 42576,
  length: 1,
  convRule: rule22
}, {
  start: 42577,
  length: 1,
  convRule: rule23
}, {
  start: 42578,
  length: 1,
  convRule: rule22
}, {
  start: 42579,
  length: 1,
  convRule: rule23
}, {
  start: 42580,
  length: 1,
  convRule: rule22
}, {
  start: 42581,
  length: 1,
  convRule: rule23
}, {
  start: 42582,
  length: 1,
  convRule: rule22
}, {
  start: 42583,
  length: 1,
  convRule: rule23
}, {
  start: 42584,
  length: 1,
  convRule: rule22
}, {
  start: 42585,
  length: 1,
  convRule: rule23
}, {
  start: 42586,
  length: 1,
  convRule: rule22
}, {
  start: 42587,
  length: 1,
  convRule: rule23
}, {
  start: 42588,
  length: 1,
  convRule: rule22
}, {
  start: 42589,
  length: 1,
  convRule: rule23
}, {
  start: 42590,
  length: 1,
  convRule: rule22
}, {
  start: 42591,
  length: 1,
  convRule: rule23
}, {
  start: 42592,
  length: 1,
  convRule: rule22
}, {
  start: 42593,
  length: 1,
  convRule: rule23
}, {
  start: 42594,
  length: 1,
  convRule: rule22
}, {
  start: 42595,
  length: 1,
  convRule: rule23
}, {
  start: 42596,
  length: 1,
  convRule: rule22
}, {
  start: 42597,
  length: 1,
  convRule: rule23
}, {
  start: 42598,
  length: 1,
  convRule: rule22
}, {
  start: 42599,
  length: 1,
  convRule: rule23
}, {
  start: 42600,
  length: 1,
  convRule: rule22
}, {
  start: 42601,
  length: 1,
  convRule: rule23
}, {
  start: 42602,
  length: 1,
  convRule: rule22
}, {
  start: 42603,
  length: 1,
  convRule: rule23
}, {
  start: 42604,
  length: 1,
  convRule: rule22
}, {
  start: 42605,
  length: 1,
  convRule: rule23
}, {
  start: 42624,
  length: 1,
  convRule: rule22
}, {
  start: 42625,
  length: 1,
  convRule: rule23
}, {
  start: 42626,
  length: 1,
  convRule: rule22
}, {
  start: 42627,
  length: 1,
  convRule: rule23
}, {
  start: 42628,
  length: 1,
  convRule: rule22
}, {
  start: 42629,
  length: 1,
  convRule: rule23
}, {
  start: 42630,
  length: 1,
  convRule: rule22
}, {
  start: 42631,
  length: 1,
  convRule: rule23
}, {
  start: 42632,
  length: 1,
  convRule: rule22
}, {
  start: 42633,
  length: 1,
  convRule: rule23
}, {
  start: 42634,
  length: 1,
  convRule: rule22
}, {
  start: 42635,
  length: 1,
  convRule: rule23
}, {
  start: 42636,
  length: 1,
  convRule: rule22
}, {
  start: 42637,
  length: 1,
  convRule: rule23
}, {
  start: 42638,
  length: 1,
  convRule: rule22
}, {
  start: 42639,
  length: 1,
  convRule: rule23
}, {
  start: 42640,
  length: 1,
  convRule: rule22
}, {
  start: 42641,
  length: 1,
  convRule: rule23
}, {
  start: 42642,
  length: 1,
  convRule: rule22
}, {
  start: 42643,
  length: 1,
  convRule: rule23
}, {
  start: 42644,
  length: 1,
  convRule: rule22
}, {
  start: 42645,
  length: 1,
  convRule: rule23
}, {
  start: 42646,
  length: 1,
  convRule: rule22
}, {
  start: 42647,
  length: 1,
  convRule: rule23
}, {
  start: 42648,
  length: 1,
  convRule: rule22
}, {
  start: 42649,
  length: 1,
  convRule: rule23
}, {
  start: 42650,
  length: 1,
  convRule: rule22
}, {
  start: 42651,
  length: 1,
  convRule: rule23
}, {
  start: 42786,
  length: 1,
  convRule: rule22
}, {
  start: 42787,
  length: 1,
  convRule: rule23
}, {
  start: 42788,
  length: 1,
  convRule: rule22
}, {
  start: 42789,
  length: 1,
  convRule: rule23
}, {
  start: 42790,
  length: 1,
  convRule: rule22
}, {
  start: 42791,
  length: 1,
  convRule: rule23
}, {
  start: 42792,
  length: 1,
  convRule: rule22
}, {
  start: 42793,
  length: 1,
  convRule: rule23
}, {
  start: 42794,
  length: 1,
  convRule: rule22
}, {
  start: 42795,
  length: 1,
  convRule: rule23
}, {
  start: 42796,
  length: 1,
  convRule: rule22
}, {
  start: 42797,
  length: 1,
  convRule: rule23
}, {
  start: 42798,
  length: 1,
  convRule: rule22
}, {
  start: 42799,
  length: 1,
  convRule: rule23
}, {
  start: 42802,
  length: 1,
  convRule: rule22
}, {
  start: 42803,
  length: 1,
  convRule: rule23
}, {
  start: 42804,
  length: 1,
  convRule: rule22
}, {
  start: 42805,
  length: 1,
  convRule: rule23
}, {
  start: 42806,
  length: 1,
  convRule: rule22
}, {
  start: 42807,
  length: 1,
  convRule: rule23
}, {
  start: 42808,
  length: 1,
  convRule: rule22
}, {
  start: 42809,
  length: 1,
  convRule: rule23
}, {
  start: 42810,
  length: 1,
  convRule: rule22
}, {
  start: 42811,
  length: 1,
  convRule: rule23
}, {
  start: 42812,
  length: 1,
  convRule: rule22
}, {
  start: 42813,
  length: 1,
  convRule: rule23
}, {
  start: 42814,
  length: 1,
  convRule: rule22
}, {
  start: 42815,
  length: 1,
  convRule: rule23
}, {
  start: 42816,
  length: 1,
  convRule: rule22
}, {
  start: 42817,
  length: 1,
  convRule: rule23
}, {
  start: 42818,
  length: 1,
  convRule: rule22
}, {
  start: 42819,
  length: 1,
  convRule: rule23
}, {
  start: 42820,
  length: 1,
  convRule: rule22
}, {
  start: 42821,
  length: 1,
  convRule: rule23
}, {
  start: 42822,
  length: 1,
  convRule: rule22
}, {
  start: 42823,
  length: 1,
  convRule: rule23
}, {
  start: 42824,
  length: 1,
  convRule: rule22
}, {
  start: 42825,
  length: 1,
  convRule: rule23
}, {
  start: 42826,
  length: 1,
  convRule: rule22
}, {
  start: 42827,
  length: 1,
  convRule: rule23
}, {
  start: 42828,
  length: 1,
  convRule: rule22
}, {
  start: 42829,
  length: 1,
  convRule: rule23
}, {
  start: 42830,
  length: 1,
  convRule: rule22
}, {
  start: 42831,
  length: 1,
  convRule: rule23
}, {
  start: 42832,
  length: 1,
  convRule: rule22
}, {
  start: 42833,
  length: 1,
  convRule: rule23
}, {
  start: 42834,
  length: 1,
  convRule: rule22
}, {
  start: 42835,
  length: 1,
  convRule: rule23
}, {
  start: 42836,
  length: 1,
  convRule: rule22
}, {
  start: 42837,
  length: 1,
  convRule: rule23
}, {
  start: 42838,
  length: 1,
  convRule: rule22
}, {
  start: 42839,
  length: 1,
  convRule: rule23
}, {
  start: 42840,
  length: 1,
  convRule: rule22
}, {
  start: 42841,
  length: 1,
  convRule: rule23
}, {
  start: 42842,
  length: 1,
  convRule: rule22
}, {
  start: 42843,
  length: 1,
  convRule: rule23
}, {
  start: 42844,
  length: 1,
  convRule: rule22
}, {
  start: 42845,
  length: 1,
  convRule: rule23
}, {
  start: 42846,
  length: 1,
  convRule: rule22
}, {
  start: 42847,
  length: 1,
  convRule: rule23
}, {
  start: 42848,
  length: 1,
  convRule: rule22
}, {
  start: 42849,
  length: 1,
  convRule: rule23
}, {
  start: 42850,
  length: 1,
  convRule: rule22
}, {
  start: 42851,
  length: 1,
  convRule: rule23
}, {
  start: 42852,
  length: 1,
  convRule: rule22
}, {
  start: 42853,
  length: 1,
  convRule: rule23
}, {
  start: 42854,
  length: 1,
  convRule: rule22
}, {
  start: 42855,
  length: 1,
  convRule: rule23
}, {
  start: 42856,
  length: 1,
  convRule: rule22
}, {
  start: 42857,
  length: 1,
  convRule: rule23
}, {
  start: 42858,
  length: 1,
  convRule: rule22
}, {
  start: 42859,
  length: 1,
  convRule: rule23
}, {
  start: 42860,
  length: 1,
  convRule: rule22
}, {
  start: 42861,
  length: 1,
  convRule: rule23
}, {
  start: 42862,
  length: 1,
  convRule: rule22
}, {
  start: 42863,
  length: 1,
  convRule: rule23
}, {
  start: 42873,
  length: 1,
  convRule: rule22
}, {
  start: 42874,
  length: 1,
  convRule: rule23
}, {
  start: 42875,
  length: 1,
  convRule: rule22
}, {
  start: 42876,
  length: 1,
  convRule: rule23
}, {
  start: 42877,
  length: 1,
  convRule: rule183
}, {
  start: 42878,
  length: 1,
  convRule: rule22
}, {
  start: 42879,
  length: 1,
  convRule: rule23
}, {
  start: 42880,
  length: 1,
  convRule: rule22
}, {
  start: 42881,
  length: 1,
  convRule: rule23
}, {
  start: 42882,
  length: 1,
  convRule: rule22
}, {
  start: 42883,
  length: 1,
  convRule: rule23
}, {
  start: 42884,
  length: 1,
  convRule: rule22
}, {
  start: 42885,
  length: 1,
  convRule: rule23
}, {
  start: 42886,
  length: 1,
  convRule: rule22
}, {
  start: 42887,
  length: 1,
  convRule: rule23
}, {
  start: 42891,
  length: 1,
  convRule: rule22
}, {
  start: 42892,
  length: 1,
  convRule: rule23
}, {
  start: 42893,
  length: 1,
  convRule: rule184
}, {
  start: 42896,
  length: 1,
  convRule: rule22
}, {
  start: 42897,
  length: 1,
  convRule: rule23
}, {
  start: 42898,
  length: 1,
  convRule: rule22
}, {
  start: 42899,
  length: 1,
  convRule: rule23
}, {
  start: 42900,
  length: 1,
  convRule: rule185
}, {
  start: 42902,
  length: 1,
  convRule: rule22
}, {
  start: 42903,
  length: 1,
  convRule: rule23
}, {
  start: 42904,
  length: 1,
  convRule: rule22
}, {
  start: 42905,
  length: 1,
  convRule: rule23
}, {
  start: 42906,
  length: 1,
  convRule: rule22
}, {
  start: 42907,
  length: 1,
  convRule: rule23
}, {
  start: 42908,
  length: 1,
  convRule: rule22
}, {
  start: 42909,
  length: 1,
  convRule: rule23
}, {
  start: 42910,
  length: 1,
  convRule: rule22
}, {
  start: 42911,
  length: 1,
  convRule: rule23
}, {
  start: 42912,
  length: 1,
  convRule: rule22
}, {
  start: 42913,
  length: 1,
  convRule: rule23
}, {
  start: 42914,
  length: 1,
  convRule: rule22
}, {
  start: 42915,
  length: 1,
  convRule: rule23
}, {
  start: 42916,
  length: 1,
  convRule: rule22
}, {
  start: 42917,
  length: 1,
  convRule: rule23
}, {
  start: 42918,
  length: 1,
  convRule: rule22
}, {
  start: 42919,
  length: 1,
  convRule: rule23
}, {
  start: 42920,
  length: 1,
  convRule: rule22
}, {
  start: 42921,
  length: 1,
  convRule: rule23
}, {
  start: 42922,
  length: 1,
  convRule: rule186
}, {
  start: 42923,
  length: 1,
  convRule: rule187
}, {
  start: 42924,
  length: 1,
  convRule: rule188
}, {
  start: 42925,
  length: 1,
  convRule: rule189
}, {
  start: 42926,
  length: 1,
  convRule: rule186
}, {
  start: 42928,
  length: 1,
  convRule: rule190
}, {
  start: 42929,
  length: 1,
  convRule: rule191
}, {
  start: 42930,
  length: 1,
  convRule: rule192
}, {
  start: 42931,
  length: 1,
  convRule: rule193
}, {
  start: 42932,
  length: 1,
  convRule: rule22
}, {
  start: 42933,
  length: 1,
  convRule: rule23
}, {
  start: 42934,
  length: 1,
  convRule: rule22
}, {
  start: 42935,
  length: 1,
  convRule: rule23
}, {
  start: 42936,
  length: 1,
  convRule: rule22
}, {
  start: 42937,
  length: 1,
  convRule: rule23
}, {
  start: 42938,
  length: 1,
  convRule: rule22
}, {
  start: 42939,
  length: 1,
  convRule: rule23
}, {
  start: 42940,
  length: 1,
  convRule: rule22
}, {
  start: 42941,
  length: 1,
  convRule: rule23
}, {
  start: 42942,
  length: 1,
  convRule: rule22
}, {
  start: 42943,
  length: 1,
  convRule: rule23
}, {
  start: 42946,
  length: 1,
  convRule: rule22
}, {
  start: 42947,
  length: 1,
  convRule: rule23
}, {
  start: 42948,
  length: 1,
  convRule: rule194
}, {
  start: 42949,
  length: 1,
  convRule: rule195
}, {
  start: 42950,
  length: 1,
  convRule: rule196
}, {
  start: 42951,
  length: 1,
  convRule: rule22
}, {
  start: 42952,
  length: 1,
  convRule: rule23
}, {
  start: 42953,
  length: 1,
  convRule: rule22
}, {
  start: 42954,
  length: 1,
  convRule: rule23
}, {
  start: 42997,
  length: 1,
  convRule: rule22
}, {
  start: 42998,
  length: 1,
  convRule: rule23
}, {
  start: 43859,
  length: 1,
  convRule: rule197
}, {
  start: 43888,
  length: 80,
  convRule: rule198
}, {
  start: 65313,
  length: 26,
  convRule: rule9
}, {
  start: 65345,
  length: 26,
  convRule: rule12
}, {
  start: 66560,
  length: 40,
  convRule: rule201
}, {
  start: 66600,
  length: 40,
  convRule: rule202
}, {
  start: 66736,
  length: 36,
  convRule: rule201
}, {
  start: 66776,
  length: 36,
  convRule: rule202
}, {
  start: 68736,
  length: 51,
  convRule: rule97
}, {
  start: 68800,
  length: 51,
  convRule: rule102
}, {
  start: 71840,
  length: 32,
  convRule: rule9
}, {
  start: 71872,
  length: 32,
  convRule: rule12
}, {
  start: 93760,
  length: 32,
  convRule: rule9
}, {
  start: 93792,
  length: 32,
  convRule: rule12
}, {
  start: 125184,
  length: 34,
  convRule: rule203
}, {
  start: 125218,
  length: 34,
  convRule: rule204
}];
var bsearch = function(a3) {
  return function(array) {
    return function(size8) {
      return function(compare4) {
        var go2 = function($copy_i) {
          return function($copy_k) {
            var $tco_var_i = $copy_i;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(i3, k) {
              if (i3 > k || i3 >= length(array)) {
                $tco_done = true;
                return Nothing.value;
              }
              ;
              if (otherwise) {
                var j = floor2(toNumber(i3 + k | 0) / 2);
                var b3 = unsafeIndex2(array)(j);
                var v = compare4(a3)(b3);
                if (v instanceof EQ) {
                  $tco_done = true;
                  return new Just(b3);
                }
                ;
                if (v instanceof GT) {
                  $tco_var_i = j + 1 | 0;
                  $copy_k = k;
                  return;
                }
                ;
                $tco_var_i = i3;
                $copy_k = j - 1 | 0;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5622, column 3 - line 5632, column 30): " + [i3.constructor.name, k.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_i, $copy_k);
            }
            ;
            return $tco_result;
          };
        };
        return go2(0)(size8);
      };
    };
  };
};
var blkCmp = function(v) {
  return function(v1) {
    if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
      return EQ.value;
    }
    ;
    if (v.start > v1.start) {
      return GT.value;
    }
    ;
    if (otherwise) {
      return LT.value;
    }
    ;
    throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5598, column 1 - line 5598, column 45): " + [v.constructor.name, v1.constructor.name]);
  };
};
var getRule = function(blocks) {
  return function(unichar) {
    return function(size8) {
      var key = {
        start: unichar,
        length: 1,
        convRule: nullrule
      };
      var maybeCharBlock = bsearch(key)(blocks)(size8)(blkCmp);
      if (maybeCharBlock instanceof Nothing) {
        return Nothing.value;
      }
      ;
      if (maybeCharBlock instanceof Just) {
        return new Just(maybeCharBlock.value0.convRule);
      }
      ;
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5612, column 5 - line 5614, column 60): " + [maybeCharBlock.constructor.name]);
    };
  };
};
var caseConv = function(f) {
  return function($$char) {
    var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
    if (maybeConversionRule instanceof Nothing) {
      return $$char;
    }
    ;
    if (maybeConversionRule instanceof Just) {
      return $$char + f(maybeConversionRule.value0) | 0;
    }
    ;
    throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5727, column 5 - line 5729, column 53): " + [maybeConversionRule.constructor.name]);
  };
};
var uTowlower = /* @__PURE__ */ caseConv(function(v) {
  return v.lowdist;
});

// output/Data.CodePoint.Unicode.Internal.Casing/index.js
var compare2 = /* @__PURE__ */ compare(ordInt);
var zeroRec = function(code3) {
  return {
    code: code3,
    lower: [],
    title: [],
    upper: [],
    fold: 0,
    foldFull: []
  };
};
var rules = [{
  code: 65,
  lower: [],
  title: [],
  upper: [],
  fold: 97,
  foldFull: [97]
}, {
  code: 66,
  lower: [],
  title: [],
  upper: [],
  fold: 98,
  foldFull: [98]
}, {
  code: 67,
  lower: [],
  title: [],
  upper: [],
  fold: 99,
  foldFull: [99]
}, {
  code: 68,
  lower: [],
  title: [],
  upper: [],
  fold: 100,
  foldFull: [100]
}, {
  code: 69,
  lower: [],
  title: [],
  upper: [],
  fold: 101,
  foldFull: [101]
}, {
  code: 70,
  lower: [],
  title: [],
  upper: [],
  fold: 102,
  foldFull: [102]
}, {
  code: 71,
  lower: [],
  title: [],
  upper: [],
  fold: 103,
  foldFull: [103]
}, {
  code: 72,
  lower: [],
  title: [],
  upper: [],
  fold: 104,
  foldFull: [104]
}, {
  code: 73,
  lower: [],
  title: [],
  upper: [],
  fold: 105,
  foldFull: [105]
}, {
  code: 74,
  lower: [],
  title: [],
  upper: [],
  fold: 106,
  foldFull: [106]
}, {
  code: 75,
  lower: [],
  title: [],
  upper: [],
  fold: 107,
  foldFull: [107]
}, {
  code: 76,
  lower: [],
  title: [],
  upper: [],
  fold: 108,
  foldFull: [108]
}, {
  code: 77,
  lower: [],
  title: [],
  upper: [],
  fold: 109,
  foldFull: [109]
}, {
  code: 78,
  lower: [],
  title: [],
  upper: [],
  fold: 110,
  foldFull: [110]
}, {
  code: 79,
  lower: [],
  title: [],
  upper: [],
  fold: 111,
  foldFull: [111]
}, {
  code: 80,
  lower: [],
  title: [],
  upper: [],
  fold: 112,
  foldFull: [112]
}, {
  code: 81,
  lower: [],
  title: [],
  upper: [],
  fold: 113,
  foldFull: [113]
}, {
  code: 82,
  lower: [],
  title: [],
  upper: [],
  fold: 114,
  foldFull: [114]
}, {
  code: 83,
  lower: [],
  title: [],
  upper: [],
  fold: 115,
  foldFull: [115]
}, {
  code: 84,
  lower: [],
  title: [],
  upper: [],
  fold: 116,
  foldFull: [116]
}, {
  code: 85,
  lower: [],
  title: [],
  upper: [],
  fold: 117,
  foldFull: [117]
}, {
  code: 86,
  lower: [],
  title: [],
  upper: [],
  fold: 118,
  foldFull: [118]
}, {
  code: 87,
  lower: [],
  title: [],
  upper: [],
  fold: 119,
  foldFull: [119]
}, {
  code: 88,
  lower: [],
  title: [],
  upper: [],
  fold: 120,
  foldFull: [120]
}, {
  code: 89,
  lower: [],
  title: [],
  upper: [],
  fold: 121,
  foldFull: [121]
}, {
  code: 90,
  lower: [],
  title: [],
  upper: [],
  fold: 122,
  foldFull: [122]
}, {
  code: 181,
  lower: [],
  title: [],
  upper: [],
  fold: 956,
  foldFull: [956]
}, {
  code: 192,
  lower: [],
  title: [],
  upper: [],
  fold: 224,
  foldFull: [224]
}, {
  code: 193,
  lower: [],
  title: [],
  upper: [],
  fold: 225,
  foldFull: [225]
}, {
  code: 194,
  lower: [],
  title: [],
  upper: [],
  fold: 226,
  foldFull: [226]
}, {
  code: 195,
  lower: [],
  title: [],
  upper: [],
  fold: 227,
  foldFull: [227]
}, {
  code: 196,
  lower: [],
  title: [],
  upper: [],
  fold: 228,
  foldFull: [228]
}, {
  code: 197,
  lower: [],
  title: [],
  upper: [],
  fold: 229,
  foldFull: [229]
}, {
  code: 198,
  lower: [],
  title: [],
  upper: [],
  fold: 230,
  foldFull: [230]
}, {
  code: 199,
  lower: [],
  title: [],
  upper: [],
  fold: 231,
  foldFull: [231]
}, {
  code: 200,
  lower: [],
  title: [],
  upper: [],
  fold: 232,
  foldFull: [232]
}, {
  code: 201,
  lower: [],
  title: [],
  upper: [],
  fold: 233,
  foldFull: [233]
}, {
  code: 202,
  lower: [],
  title: [],
  upper: [],
  fold: 234,
  foldFull: [234]
}, {
  code: 203,
  lower: [],
  title: [],
  upper: [],
  fold: 235,
  foldFull: [235]
}, {
  code: 204,
  lower: [],
  title: [],
  upper: [],
  fold: 236,
  foldFull: [236]
}, {
  code: 205,
  lower: [],
  title: [],
  upper: [],
  fold: 237,
  foldFull: [237]
}, {
  code: 206,
  lower: [],
  title: [],
  upper: [],
  fold: 238,
  foldFull: [238]
}, {
  code: 207,
  lower: [],
  title: [],
  upper: [],
  fold: 239,
  foldFull: [239]
}, {
  code: 208,
  lower: [],
  title: [],
  upper: [],
  fold: 240,
  foldFull: [240]
}, {
  code: 209,
  lower: [],
  title: [],
  upper: [],
  fold: 241,
  foldFull: [241]
}, {
  code: 210,
  lower: [],
  title: [],
  upper: [],
  fold: 242,
  foldFull: [242]
}, {
  code: 211,
  lower: [],
  title: [],
  upper: [],
  fold: 243,
  foldFull: [243]
}, {
  code: 212,
  lower: [],
  title: [],
  upper: [],
  fold: 244,
  foldFull: [244]
}, {
  code: 213,
  lower: [],
  title: [],
  upper: [],
  fold: 245,
  foldFull: [245]
}, {
  code: 214,
  lower: [],
  title: [],
  upper: [],
  fold: 246,
  foldFull: [246]
}, {
  code: 216,
  lower: [],
  title: [],
  upper: [],
  fold: 248,
  foldFull: [248]
}, {
  code: 217,
  lower: [],
  title: [],
  upper: [],
  fold: 249,
  foldFull: [249]
}, {
  code: 218,
  lower: [],
  title: [],
  upper: [],
  fold: 250,
  foldFull: [250]
}, {
  code: 219,
  lower: [],
  title: [],
  upper: [],
  fold: 251,
  foldFull: [251]
}, {
  code: 220,
  lower: [],
  title: [],
  upper: [],
  fold: 252,
  foldFull: [252]
}, {
  code: 221,
  lower: [],
  title: [],
  upper: [],
  fold: 253,
  foldFull: [253]
}, {
  code: 222,
  lower: [],
  title: [],
  upper: [],
  fold: 254,
  foldFull: [254]
}, {
  code: 223,
  lower: [223],
  title: [83, 115],
  upper: [83, 83],
  fold: 0,
  foldFull: [115, 115]
}, {
  code: 223,
  lower: [223],
  title: [83, 115],
  upper: [83, 83],
  fold: 0,
  foldFull: [115, 115]
}, {
  code: 256,
  lower: [],
  title: [],
  upper: [],
  fold: 257,
  foldFull: [257]
}, {
  code: 258,
  lower: [],
  title: [],
  upper: [],
  fold: 259,
  foldFull: [259]
}, {
  code: 260,
  lower: [],
  title: [],
  upper: [],
  fold: 261,
  foldFull: [261]
}, {
  code: 262,
  lower: [],
  title: [],
  upper: [],
  fold: 263,
  foldFull: [263]
}, {
  code: 264,
  lower: [],
  title: [],
  upper: [],
  fold: 265,
  foldFull: [265]
}, {
  code: 266,
  lower: [],
  title: [],
  upper: [],
  fold: 267,
  foldFull: [267]
}, {
  code: 268,
  lower: [],
  title: [],
  upper: [],
  fold: 269,
  foldFull: [269]
}, {
  code: 270,
  lower: [],
  title: [],
  upper: [],
  fold: 271,
  foldFull: [271]
}, {
  code: 272,
  lower: [],
  title: [],
  upper: [],
  fold: 273,
  foldFull: [273]
}, {
  code: 274,
  lower: [],
  title: [],
  upper: [],
  fold: 275,
  foldFull: [275]
}, {
  code: 276,
  lower: [],
  title: [],
  upper: [],
  fold: 277,
  foldFull: [277]
}, {
  code: 278,
  lower: [],
  title: [],
  upper: [],
  fold: 279,
  foldFull: [279]
}, {
  code: 280,
  lower: [],
  title: [],
  upper: [],
  fold: 281,
  foldFull: [281]
}, {
  code: 282,
  lower: [],
  title: [],
  upper: [],
  fold: 283,
  foldFull: [283]
}, {
  code: 284,
  lower: [],
  title: [],
  upper: [],
  fold: 285,
  foldFull: [285]
}, {
  code: 286,
  lower: [],
  title: [],
  upper: [],
  fold: 287,
  foldFull: [287]
}, {
  code: 288,
  lower: [],
  title: [],
  upper: [],
  fold: 289,
  foldFull: [289]
}, {
  code: 290,
  lower: [],
  title: [],
  upper: [],
  fold: 291,
  foldFull: [291]
}, {
  code: 292,
  lower: [],
  title: [],
  upper: [],
  fold: 293,
  foldFull: [293]
}, {
  code: 294,
  lower: [],
  title: [],
  upper: [],
  fold: 295,
  foldFull: [295]
}, {
  code: 296,
  lower: [],
  title: [],
  upper: [],
  fold: 297,
  foldFull: [297]
}, {
  code: 298,
  lower: [],
  title: [],
  upper: [],
  fold: 299,
  foldFull: [299]
}, {
  code: 300,
  lower: [],
  title: [],
  upper: [],
  fold: 301,
  foldFull: [301]
}, {
  code: 302,
  lower: [],
  title: [],
  upper: [],
  fold: 303,
  foldFull: [303]
}, {
  code: 304,
  lower: [105, 775],
  title: [304],
  upper: [304],
  fold: 0,
  foldFull: [105, 775]
}, {
  code: 304,
  lower: [105, 775],
  title: [304],
  upper: [304],
  fold: 0,
  foldFull: [105, 775]
}, {
  code: 306,
  lower: [],
  title: [],
  upper: [],
  fold: 307,
  foldFull: [307]
}, {
  code: 308,
  lower: [],
  title: [],
  upper: [],
  fold: 309,
  foldFull: [309]
}, {
  code: 310,
  lower: [],
  title: [],
  upper: [],
  fold: 311,
  foldFull: [311]
}, {
  code: 313,
  lower: [],
  title: [],
  upper: [],
  fold: 314,
  foldFull: [314]
}, {
  code: 315,
  lower: [],
  title: [],
  upper: [],
  fold: 316,
  foldFull: [316]
}, {
  code: 317,
  lower: [],
  title: [],
  upper: [],
  fold: 318,
  foldFull: [318]
}, {
  code: 319,
  lower: [],
  title: [],
  upper: [],
  fold: 320,
  foldFull: [320]
}, {
  code: 321,
  lower: [],
  title: [],
  upper: [],
  fold: 322,
  foldFull: [322]
}, {
  code: 323,
  lower: [],
  title: [],
  upper: [],
  fold: 324,
  foldFull: [324]
}, {
  code: 325,
  lower: [],
  title: [],
  upper: [],
  fold: 326,
  foldFull: [326]
}, {
  code: 327,
  lower: [],
  title: [],
  upper: [],
  fold: 328,
  foldFull: [328]
}, {
  code: 329,
  lower: [329],
  title: [700, 78],
  upper: [700, 78],
  fold: 0,
  foldFull: [700, 110]
}, {
  code: 329,
  lower: [329],
  title: [700, 78],
  upper: [700, 78],
  fold: 0,
  foldFull: [700, 110]
}, {
  code: 330,
  lower: [],
  title: [],
  upper: [],
  fold: 331,
  foldFull: [331]
}, {
  code: 332,
  lower: [],
  title: [],
  upper: [],
  fold: 333,
  foldFull: [333]
}, {
  code: 334,
  lower: [],
  title: [],
  upper: [],
  fold: 335,
  foldFull: [335]
}, {
  code: 336,
  lower: [],
  title: [],
  upper: [],
  fold: 337,
  foldFull: [337]
}, {
  code: 338,
  lower: [],
  title: [],
  upper: [],
  fold: 339,
  foldFull: [339]
}, {
  code: 340,
  lower: [],
  title: [],
  upper: [],
  fold: 341,
  foldFull: [341]
}, {
  code: 342,
  lower: [],
  title: [],
  upper: [],
  fold: 343,
  foldFull: [343]
}, {
  code: 344,
  lower: [],
  title: [],
  upper: [],
  fold: 345,
  foldFull: [345]
}, {
  code: 346,
  lower: [],
  title: [],
  upper: [],
  fold: 347,
  foldFull: [347]
}, {
  code: 348,
  lower: [],
  title: [],
  upper: [],
  fold: 349,
  foldFull: [349]
}, {
  code: 350,
  lower: [],
  title: [],
  upper: [],
  fold: 351,
  foldFull: [351]
}, {
  code: 352,
  lower: [],
  title: [],
  upper: [],
  fold: 353,
  foldFull: [353]
}, {
  code: 354,
  lower: [],
  title: [],
  upper: [],
  fold: 355,
  foldFull: [355]
}, {
  code: 356,
  lower: [],
  title: [],
  upper: [],
  fold: 357,
  foldFull: [357]
}, {
  code: 358,
  lower: [],
  title: [],
  upper: [],
  fold: 359,
  foldFull: [359]
}, {
  code: 360,
  lower: [],
  title: [],
  upper: [],
  fold: 361,
  foldFull: [361]
}, {
  code: 362,
  lower: [],
  title: [],
  upper: [],
  fold: 363,
  foldFull: [363]
}, {
  code: 364,
  lower: [],
  title: [],
  upper: [],
  fold: 365,
  foldFull: [365]
}, {
  code: 366,
  lower: [],
  title: [],
  upper: [],
  fold: 367,
  foldFull: [367]
}, {
  code: 368,
  lower: [],
  title: [],
  upper: [],
  fold: 369,
  foldFull: [369]
}, {
  code: 370,
  lower: [],
  title: [],
  upper: [],
  fold: 371,
  foldFull: [371]
}, {
  code: 372,
  lower: [],
  title: [],
  upper: [],
  fold: 373,
  foldFull: [373]
}, {
  code: 374,
  lower: [],
  title: [],
  upper: [],
  fold: 375,
  foldFull: [375]
}, {
  code: 376,
  lower: [],
  title: [],
  upper: [],
  fold: 255,
  foldFull: [255]
}, {
  code: 377,
  lower: [],
  title: [],
  upper: [],
  fold: 378,
  foldFull: [378]
}, {
  code: 379,
  lower: [],
  title: [],
  upper: [],
  fold: 380,
  foldFull: [380]
}, {
  code: 381,
  lower: [],
  title: [],
  upper: [],
  fold: 382,
  foldFull: [382]
}, {
  code: 383,
  lower: [],
  title: [],
  upper: [],
  fold: 115,
  foldFull: [115]
}, {
  code: 385,
  lower: [],
  title: [],
  upper: [],
  fold: 595,
  foldFull: [595]
}, {
  code: 386,
  lower: [],
  title: [],
  upper: [],
  fold: 387,
  foldFull: [387]
}, {
  code: 388,
  lower: [],
  title: [],
  upper: [],
  fold: 389,
  foldFull: [389]
}, {
  code: 390,
  lower: [],
  title: [],
  upper: [],
  fold: 596,
  foldFull: [596]
}, {
  code: 391,
  lower: [],
  title: [],
  upper: [],
  fold: 392,
  foldFull: [392]
}, {
  code: 393,
  lower: [],
  title: [],
  upper: [],
  fold: 598,
  foldFull: [598]
}, {
  code: 394,
  lower: [],
  title: [],
  upper: [],
  fold: 599,
  foldFull: [599]
}, {
  code: 395,
  lower: [],
  title: [],
  upper: [],
  fold: 396,
  foldFull: [396]
}, {
  code: 398,
  lower: [],
  title: [],
  upper: [],
  fold: 477,
  foldFull: [477]
}, {
  code: 399,
  lower: [],
  title: [],
  upper: [],
  fold: 601,
  foldFull: [601]
}, {
  code: 400,
  lower: [],
  title: [],
  upper: [],
  fold: 603,
  foldFull: [603]
}, {
  code: 401,
  lower: [],
  title: [],
  upper: [],
  fold: 402,
  foldFull: [402]
}, {
  code: 403,
  lower: [],
  title: [],
  upper: [],
  fold: 608,
  foldFull: [608]
}, {
  code: 404,
  lower: [],
  title: [],
  upper: [],
  fold: 611,
  foldFull: [611]
}, {
  code: 406,
  lower: [],
  title: [],
  upper: [],
  fold: 617,
  foldFull: [617]
}, {
  code: 407,
  lower: [],
  title: [],
  upper: [],
  fold: 616,
  foldFull: [616]
}, {
  code: 408,
  lower: [],
  title: [],
  upper: [],
  fold: 409,
  foldFull: [409]
}, {
  code: 412,
  lower: [],
  title: [],
  upper: [],
  fold: 623,
  foldFull: [623]
}, {
  code: 413,
  lower: [],
  title: [],
  upper: [],
  fold: 626,
  foldFull: [626]
}, {
  code: 415,
  lower: [],
  title: [],
  upper: [],
  fold: 629,
  foldFull: [629]
}, {
  code: 416,
  lower: [],
  title: [],
  upper: [],
  fold: 417,
  foldFull: [417]
}, {
  code: 418,
  lower: [],
  title: [],
  upper: [],
  fold: 419,
  foldFull: [419]
}, {
  code: 420,
  lower: [],
  title: [],
  upper: [],
  fold: 421,
  foldFull: [421]
}, {
  code: 422,
  lower: [],
  title: [],
  upper: [],
  fold: 640,
  foldFull: [640]
}, {
  code: 423,
  lower: [],
  title: [],
  upper: [],
  fold: 424,
  foldFull: [424]
}, {
  code: 425,
  lower: [],
  title: [],
  upper: [],
  fold: 643,
  foldFull: [643]
}, {
  code: 428,
  lower: [],
  title: [],
  upper: [],
  fold: 429,
  foldFull: [429]
}, {
  code: 430,
  lower: [],
  title: [],
  upper: [],
  fold: 648,
  foldFull: [648]
}, {
  code: 431,
  lower: [],
  title: [],
  upper: [],
  fold: 432,
  foldFull: [432]
}, {
  code: 433,
  lower: [],
  title: [],
  upper: [],
  fold: 650,
  foldFull: [650]
}, {
  code: 434,
  lower: [],
  title: [],
  upper: [],
  fold: 651,
  foldFull: [651]
}, {
  code: 435,
  lower: [],
  title: [],
  upper: [],
  fold: 436,
  foldFull: [436]
}, {
  code: 437,
  lower: [],
  title: [],
  upper: [],
  fold: 438,
  foldFull: [438]
}, {
  code: 439,
  lower: [],
  title: [],
  upper: [],
  fold: 658,
  foldFull: [658]
}, {
  code: 440,
  lower: [],
  title: [],
  upper: [],
  fold: 441,
  foldFull: [441]
}, {
  code: 444,
  lower: [],
  title: [],
  upper: [],
  fold: 445,
  foldFull: [445]
}, {
  code: 452,
  lower: [],
  title: [],
  upper: [],
  fold: 454,
  foldFull: [454]
}, {
  code: 453,
  lower: [],
  title: [],
  upper: [],
  fold: 454,
  foldFull: [454]
}, {
  code: 455,
  lower: [],
  title: [],
  upper: [],
  fold: 457,
  foldFull: [457]
}, {
  code: 456,
  lower: [],
  title: [],
  upper: [],
  fold: 457,
  foldFull: [457]
}, {
  code: 458,
  lower: [],
  title: [],
  upper: [],
  fold: 460,
  foldFull: [460]
}, {
  code: 459,
  lower: [],
  title: [],
  upper: [],
  fold: 460,
  foldFull: [460]
}, {
  code: 461,
  lower: [],
  title: [],
  upper: [],
  fold: 462,
  foldFull: [462]
}, {
  code: 463,
  lower: [],
  title: [],
  upper: [],
  fold: 464,
  foldFull: [464]
}, {
  code: 465,
  lower: [],
  title: [],
  upper: [],
  fold: 466,
  foldFull: [466]
}, {
  code: 467,
  lower: [],
  title: [],
  upper: [],
  fold: 468,
  foldFull: [468]
}, {
  code: 469,
  lower: [],
  title: [],
  upper: [],
  fold: 470,
  foldFull: [470]
}, {
  code: 471,
  lower: [],
  title: [],
  upper: [],
  fold: 472,
  foldFull: [472]
}, {
  code: 473,
  lower: [],
  title: [],
  upper: [],
  fold: 474,
  foldFull: [474]
}, {
  code: 475,
  lower: [],
  title: [],
  upper: [],
  fold: 476,
  foldFull: [476]
}, {
  code: 478,
  lower: [],
  title: [],
  upper: [],
  fold: 479,
  foldFull: [479]
}, {
  code: 480,
  lower: [],
  title: [],
  upper: [],
  fold: 481,
  foldFull: [481]
}, {
  code: 482,
  lower: [],
  title: [],
  upper: [],
  fold: 483,
  foldFull: [483]
}, {
  code: 484,
  lower: [],
  title: [],
  upper: [],
  fold: 485,
  foldFull: [485]
}, {
  code: 486,
  lower: [],
  title: [],
  upper: [],
  fold: 487,
  foldFull: [487]
}, {
  code: 488,
  lower: [],
  title: [],
  upper: [],
  fold: 489,
  foldFull: [489]
}, {
  code: 490,
  lower: [],
  title: [],
  upper: [],
  fold: 491,
  foldFull: [491]
}, {
  code: 492,
  lower: [],
  title: [],
  upper: [],
  fold: 493,
  foldFull: [493]
}, {
  code: 494,
  lower: [],
  title: [],
  upper: [],
  fold: 495,
  foldFull: [495]
}, {
  code: 496,
  lower: [496],
  title: [74, 780],
  upper: [74, 780],
  fold: 0,
  foldFull: [106, 780]
}, {
  code: 496,
  lower: [496],
  title: [74, 780],
  upper: [74, 780],
  fold: 0,
  foldFull: [106, 780]
}, {
  code: 497,
  lower: [],
  title: [],
  upper: [],
  fold: 499,
  foldFull: [499]
}, {
  code: 498,
  lower: [],
  title: [],
  upper: [],
  fold: 499,
  foldFull: [499]
}, {
  code: 500,
  lower: [],
  title: [],
  upper: [],
  fold: 501,
  foldFull: [501]
}, {
  code: 502,
  lower: [],
  title: [],
  upper: [],
  fold: 405,
  foldFull: [405]
}, {
  code: 503,
  lower: [],
  title: [],
  upper: [],
  fold: 447,
  foldFull: [447]
}, {
  code: 504,
  lower: [],
  title: [],
  upper: [],
  fold: 505,
  foldFull: [505]
}, {
  code: 506,
  lower: [],
  title: [],
  upper: [],
  fold: 507,
  foldFull: [507]
}, {
  code: 508,
  lower: [],
  title: [],
  upper: [],
  fold: 509,
  foldFull: [509]
}, {
  code: 510,
  lower: [],
  title: [],
  upper: [],
  fold: 511,
  foldFull: [511]
}, {
  code: 512,
  lower: [],
  title: [],
  upper: [],
  fold: 513,
  foldFull: [513]
}, {
  code: 514,
  lower: [],
  title: [],
  upper: [],
  fold: 515,
  foldFull: [515]
}, {
  code: 516,
  lower: [],
  title: [],
  upper: [],
  fold: 517,
  foldFull: [517]
}, {
  code: 518,
  lower: [],
  title: [],
  upper: [],
  fold: 519,
  foldFull: [519]
}, {
  code: 520,
  lower: [],
  title: [],
  upper: [],
  fold: 521,
  foldFull: [521]
}, {
  code: 522,
  lower: [],
  title: [],
  upper: [],
  fold: 523,
  foldFull: [523]
}, {
  code: 524,
  lower: [],
  title: [],
  upper: [],
  fold: 525,
  foldFull: [525]
}, {
  code: 526,
  lower: [],
  title: [],
  upper: [],
  fold: 527,
  foldFull: [527]
}, {
  code: 528,
  lower: [],
  title: [],
  upper: [],
  fold: 529,
  foldFull: [529]
}, {
  code: 530,
  lower: [],
  title: [],
  upper: [],
  fold: 531,
  foldFull: [531]
}, {
  code: 532,
  lower: [],
  title: [],
  upper: [],
  fold: 533,
  foldFull: [533]
}, {
  code: 534,
  lower: [],
  title: [],
  upper: [],
  fold: 535,
  foldFull: [535]
}, {
  code: 536,
  lower: [],
  title: [],
  upper: [],
  fold: 537,
  foldFull: [537]
}, {
  code: 538,
  lower: [],
  title: [],
  upper: [],
  fold: 539,
  foldFull: [539]
}, {
  code: 540,
  lower: [],
  title: [],
  upper: [],
  fold: 541,
  foldFull: [541]
}, {
  code: 542,
  lower: [],
  title: [],
  upper: [],
  fold: 543,
  foldFull: [543]
}, {
  code: 544,
  lower: [],
  title: [],
  upper: [],
  fold: 414,
  foldFull: [414]
}, {
  code: 546,
  lower: [],
  title: [],
  upper: [],
  fold: 547,
  foldFull: [547]
}, {
  code: 548,
  lower: [],
  title: [],
  upper: [],
  fold: 549,
  foldFull: [549]
}, {
  code: 550,
  lower: [],
  title: [],
  upper: [],
  fold: 551,
  foldFull: [551]
}, {
  code: 552,
  lower: [],
  title: [],
  upper: [],
  fold: 553,
  foldFull: [553]
}, {
  code: 554,
  lower: [],
  title: [],
  upper: [],
  fold: 555,
  foldFull: [555]
}, {
  code: 556,
  lower: [],
  title: [],
  upper: [],
  fold: 557,
  foldFull: [557]
}, {
  code: 558,
  lower: [],
  title: [],
  upper: [],
  fold: 559,
  foldFull: [559]
}, {
  code: 560,
  lower: [],
  title: [],
  upper: [],
  fold: 561,
  foldFull: [561]
}, {
  code: 562,
  lower: [],
  title: [],
  upper: [],
  fold: 563,
  foldFull: [563]
}, {
  code: 570,
  lower: [],
  title: [],
  upper: [],
  fold: 11365,
  foldFull: [11365]
}, {
  code: 571,
  lower: [],
  title: [],
  upper: [],
  fold: 572,
  foldFull: [572]
}, {
  code: 573,
  lower: [],
  title: [],
  upper: [],
  fold: 410,
  foldFull: [410]
}, {
  code: 574,
  lower: [],
  title: [],
  upper: [],
  fold: 11366,
  foldFull: [11366]
}, {
  code: 577,
  lower: [],
  title: [],
  upper: [],
  fold: 578,
  foldFull: [578]
}, {
  code: 579,
  lower: [],
  title: [],
  upper: [],
  fold: 384,
  foldFull: [384]
}, {
  code: 580,
  lower: [],
  title: [],
  upper: [],
  fold: 649,
  foldFull: [649]
}, {
  code: 581,
  lower: [],
  title: [],
  upper: [],
  fold: 652,
  foldFull: [652]
}, {
  code: 582,
  lower: [],
  title: [],
  upper: [],
  fold: 583,
  foldFull: [583]
}, {
  code: 584,
  lower: [],
  title: [],
  upper: [],
  fold: 585,
  foldFull: [585]
}, {
  code: 586,
  lower: [],
  title: [],
  upper: [],
  fold: 587,
  foldFull: [587]
}, {
  code: 588,
  lower: [],
  title: [],
  upper: [],
  fold: 589,
  foldFull: [589]
}, {
  code: 590,
  lower: [],
  title: [],
  upper: [],
  fold: 591,
  foldFull: [591]
}, {
  code: 837,
  lower: [],
  title: [],
  upper: [],
  fold: 953,
  foldFull: [953]
}, {
  code: 880,
  lower: [],
  title: [],
  upper: [],
  fold: 881,
  foldFull: [881]
}, {
  code: 882,
  lower: [],
  title: [],
  upper: [],
  fold: 883,
  foldFull: [883]
}, {
  code: 886,
  lower: [],
  title: [],
  upper: [],
  fold: 887,
  foldFull: [887]
}, {
  code: 895,
  lower: [],
  title: [],
  upper: [],
  fold: 1011,
  foldFull: [1011]
}, {
  code: 902,
  lower: [],
  title: [],
  upper: [],
  fold: 940,
  foldFull: [940]
}, {
  code: 904,
  lower: [],
  title: [],
  upper: [],
  fold: 941,
  foldFull: [941]
}, {
  code: 905,
  lower: [],
  title: [],
  upper: [],
  fold: 942,
  foldFull: [942]
}, {
  code: 906,
  lower: [],
  title: [],
  upper: [],
  fold: 943,
  foldFull: [943]
}, {
  code: 908,
  lower: [],
  title: [],
  upper: [],
  fold: 972,
  foldFull: [972]
}, {
  code: 910,
  lower: [],
  title: [],
  upper: [],
  fold: 973,
  foldFull: [973]
}, {
  code: 911,
  lower: [],
  title: [],
  upper: [],
  fold: 974,
  foldFull: [974]
}, {
  code: 912,
  lower: [912],
  title: [921, 776, 769],
  upper: [921, 776, 769],
  fold: 0,
  foldFull: [953, 776, 769]
}, {
  code: 912,
  lower: [912],
  title: [921, 776, 769],
  upper: [921, 776, 769],
  fold: 0,
  foldFull: [953, 776, 769]
}, {
  code: 913,
  lower: [],
  title: [],
  upper: [],
  fold: 945,
  foldFull: [945]
}, {
  code: 914,
  lower: [],
  title: [],
  upper: [],
  fold: 946,
  foldFull: [946]
}, {
  code: 915,
  lower: [],
  title: [],
  upper: [],
  fold: 947,
  foldFull: [947]
}, {
  code: 916,
  lower: [],
  title: [],
  upper: [],
  fold: 948,
  foldFull: [948]
}, {
  code: 917,
  lower: [],
  title: [],
  upper: [],
  fold: 949,
  foldFull: [949]
}, {
  code: 918,
  lower: [],
  title: [],
  upper: [],
  fold: 950,
  foldFull: [950]
}, {
  code: 919,
  lower: [],
  title: [],
  upper: [],
  fold: 951,
  foldFull: [951]
}, {
  code: 920,
  lower: [],
  title: [],
  upper: [],
  fold: 952,
  foldFull: [952]
}, {
  code: 921,
  lower: [],
  title: [],
  upper: [],
  fold: 953,
  foldFull: [953]
}, {
  code: 922,
  lower: [],
  title: [],
  upper: [],
  fold: 954,
  foldFull: [954]
}, {
  code: 923,
  lower: [],
  title: [],
  upper: [],
  fold: 955,
  foldFull: [955]
}, {
  code: 924,
  lower: [],
  title: [],
  upper: [],
  fold: 956,
  foldFull: [956]
}, {
  code: 925,
  lower: [],
  title: [],
  upper: [],
  fold: 957,
  foldFull: [957]
}, {
  code: 926,
  lower: [],
  title: [],
  upper: [],
  fold: 958,
  foldFull: [958]
}, {
  code: 927,
  lower: [],
  title: [],
  upper: [],
  fold: 959,
  foldFull: [959]
}, {
  code: 928,
  lower: [],
  title: [],
  upper: [],
  fold: 960,
  foldFull: [960]
}, {
  code: 929,
  lower: [],
  title: [],
  upper: [],
  fold: 961,
  foldFull: [961]
}, {
  code: 931,
  lower: [],
  title: [],
  upper: [],
  fold: 963,
  foldFull: [963]
}, {
  code: 932,
  lower: [],
  title: [],
  upper: [],
  fold: 964,
  foldFull: [964]
}, {
  code: 933,
  lower: [],
  title: [],
  upper: [],
  fold: 965,
  foldFull: [965]
}, {
  code: 934,
  lower: [],
  title: [],
  upper: [],
  fold: 966,
  foldFull: [966]
}, {
  code: 935,
  lower: [],
  title: [],
  upper: [],
  fold: 967,
  foldFull: [967]
}, {
  code: 936,
  lower: [],
  title: [],
  upper: [],
  fold: 968,
  foldFull: [968]
}, {
  code: 937,
  lower: [],
  title: [],
  upper: [],
  fold: 969,
  foldFull: [969]
}, {
  code: 938,
  lower: [],
  title: [],
  upper: [],
  fold: 970,
  foldFull: [970]
}, {
  code: 939,
  lower: [],
  title: [],
  upper: [],
  fold: 971,
  foldFull: [971]
}, {
  code: 944,
  lower: [944],
  title: [933, 776, 769],
  upper: [933, 776, 769],
  fold: 0,
  foldFull: [965, 776, 769]
}, {
  code: 944,
  lower: [944],
  title: [933, 776, 769],
  upper: [933, 776, 769],
  fold: 0,
  foldFull: [965, 776, 769]
}, {
  code: 962,
  lower: [],
  title: [],
  upper: [],
  fold: 963,
  foldFull: [963]
}, {
  code: 975,
  lower: [],
  title: [],
  upper: [],
  fold: 983,
  foldFull: [983]
}, {
  code: 976,
  lower: [],
  title: [],
  upper: [],
  fold: 946,
  foldFull: [946]
}, {
  code: 977,
  lower: [],
  title: [],
  upper: [],
  fold: 952,
  foldFull: [952]
}, {
  code: 981,
  lower: [],
  title: [],
  upper: [],
  fold: 966,
  foldFull: [966]
}, {
  code: 982,
  lower: [],
  title: [],
  upper: [],
  fold: 960,
  foldFull: [960]
}, {
  code: 984,
  lower: [],
  title: [],
  upper: [],
  fold: 985,
  foldFull: [985]
}, {
  code: 986,
  lower: [],
  title: [],
  upper: [],
  fold: 987,
  foldFull: [987]
}, {
  code: 988,
  lower: [],
  title: [],
  upper: [],
  fold: 989,
  foldFull: [989]
}, {
  code: 990,
  lower: [],
  title: [],
  upper: [],
  fold: 991,
  foldFull: [991]
}, {
  code: 992,
  lower: [],
  title: [],
  upper: [],
  fold: 993,
  foldFull: [993]
}, {
  code: 994,
  lower: [],
  title: [],
  upper: [],
  fold: 995,
  foldFull: [995]
}, {
  code: 996,
  lower: [],
  title: [],
  upper: [],
  fold: 997,
  foldFull: [997]
}, {
  code: 998,
  lower: [],
  title: [],
  upper: [],
  fold: 999,
  foldFull: [999]
}, {
  code: 1e3,
  lower: [],
  title: [],
  upper: [],
  fold: 1001,
  foldFull: [1001]
}, {
  code: 1002,
  lower: [],
  title: [],
  upper: [],
  fold: 1003,
  foldFull: [1003]
}, {
  code: 1004,
  lower: [],
  title: [],
  upper: [],
  fold: 1005,
  foldFull: [1005]
}, {
  code: 1006,
  lower: [],
  title: [],
  upper: [],
  fold: 1007,
  foldFull: [1007]
}, {
  code: 1008,
  lower: [],
  title: [],
  upper: [],
  fold: 954,
  foldFull: [954]
}, {
  code: 1009,
  lower: [],
  title: [],
  upper: [],
  fold: 961,
  foldFull: [961]
}, {
  code: 1012,
  lower: [],
  title: [],
  upper: [],
  fold: 952,
  foldFull: [952]
}, {
  code: 1013,
  lower: [],
  title: [],
  upper: [],
  fold: 949,
  foldFull: [949]
}, {
  code: 1015,
  lower: [],
  title: [],
  upper: [],
  fold: 1016,
  foldFull: [1016]
}, {
  code: 1017,
  lower: [],
  title: [],
  upper: [],
  fold: 1010,
  foldFull: [1010]
}, {
  code: 1018,
  lower: [],
  title: [],
  upper: [],
  fold: 1019,
  foldFull: [1019]
}, {
  code: 1021,
  lower: [],
  title: [],
  upper: [],
  fold: 891,
  foldFull: [891]
}, {
  code: 1022,
  lower: [],
  title: [],
  upper: [],
  fold: 892,
  foldFull: [892]
}, {
  code: 1023,
  lower: [],
  title: [],
  upper: [],
  fold: 893,
  foldFull: [893]
}, {
  code: 1024,
  lower: [],
  title: [],
  upper: [],
  fold: 1104,
  foldFull: [1104]
}, {
  code: 1025,
  lower: [],
  title: [],
  upper: [],
  fold: 1105,
  foldFull: [1105]
}, {
  code: 1026,
  lower: [],
  title: [],
  upper: [],
  fold: 1106,
  foldFull: [1106]
}, {
  code: 1027,
  lower: [],
  title: [],
  upper: [],
  fold: 1107,
  foldFull: [1107]
}, {
  code: 1028,
  lower: [],
  title: [],
  upper: [],
  fold: 1108,
  foldFull: [1108]
}, {
  code: 1029,
  lower: [],
  title: [],
  upper: [],
  fold: 1109,
  foldFull: [1109]
}, {
  code: 1030,
  lower: [],
  title: [],
  upper: [],
  fold: 1110,
  foldFull: [1110]
}, {
  code: 1031,
  lower: [],
  title: [],
  upper: [],
  fold: 1111,
  foldFull: [1111]
}, {
  code: 1032,
  lower: [],
  title: [],
  upper: [],
  fold: 1112,
  foldFull: [1112]
}, {
  code: 1033,
  lower: [],
  title: [],
  upper: [],
  fold: 1113,
  foldFull: [1113]
}, {
  code: 1034,
  lower: [],
  title: [],
  upper: [],
  fold: 1114,
  foldFull: [1114]
}, {
  code: 1035,
  lower: [],
  title: [],
  upper: [],
  fold: 1115,
  foldFull: [1115]
}, {
  code: 1036,
  lower: [],
  title: [],
  upper: [],
  fold: 1116,
  foldFull: [1116]
}, {
  code: 1037,
  lower: [],
  title: [],
  upper: [],
  fold: 1117,
  foldFull: [1117]
}, {
  code: 1038,
  lower: [],
  title: [],
  upper: [],
  fold: 1118,
  foldFull: [1118]
}, {
  code: 1039,
  lower: [],
  title: [],
  upper: [],
  fold: 1119,
  foldFull: [1119]
}, {
  code: 1040,
  lower: [],
  title: [],
  upper: [],
  fold: 1072,
  foldFull: [1072]
}, {
  code: 1041,
  lower: [],
  title: [],
  upper: [],
  fold: 1073,
  foldFull: [1073]
}, {
  code: 1042,
  lower: [],
  title: [],
  upper: [],
  fold: 1074,
  foldFull: [1074]
}, {
  code: 1043,
  lower: [],
  title: [],
  upper: [],
  fold: 1075,
  foldFull: [1075]
}, {
  code: 1044,
  lower: [],
  title: [],
  upper: [],
  fold: 1076,
  foldFull: [1076]
}, {
  code: 1045,
  lower: [],
  title: [],
  upper: [],
  fold: 1077,
  foldFull: [1077]
}, {
  code: 1046,
  lower: [],
  title: [],
  upper: [],
  fold: 1078,
  foldFull: [1078]
}, {
  code: 1047,
  lower: [],
  title: [],
  upper: [],
  fold: 1079,
  foldFull: [1079]
}, {
  code: 1048,
  lower: [],
  title: [],
  upper: [],
  fold: 1080,
  foldFull: [1080]
}, {
  code: 1049,
  lower: [],
  title: [],
  upper: [],
  fold: 1081,
  foldFull: [1081]
}, {
  code: 1050,
  lower: [],
  title: [],
  upper: [],
  fold: 1082,
  foldFull: [1082]
}, {
  code: 1051,
  lower: [],
  title: [],
  upper: [],
  fold: 1083,
  foldFull: [1083]
}, {
  code: 1052,
  lower: [],
  title: [],
  upper: [],
  fold: 1084,
  foldFull: [1084]
}, {
  code: 1053,
  lower: [],
  title: [],
  upper: [],
  fold: 1085,
  foldFull: [1085]
}, {
  code: 1054,
  lower: [],
  title: [],
  upper: [],
  fold: 1086,
  foldFull: [1086]
}, {
  code: 1055,
  lower: [],
  title: [],
  upper: [],
  fold: 1087,
  foldFull: [1087]
}, {
  code: 1056,
  lower: [],
  title: [],
  upper: [],
  fold: 1088,
  foldFull: [1088]
}, {
  code: 1057,
  lower: [],
  title: [],
  upper: [],
  fold: 1089,
  foldFull: [1089]
}, {
  code: 1058,
  lower: [],
  title: [],
  upper: [],
  fold: 1090,
  foldFull: [1090]
}, {
  code: 1059,
  lower: [],
  title: [],
  upper: [],
  fold: 1091,
  foldFull: [1091]
}, {
  code: 1060,
  lower: [],
  title: [],
  upper: [],
  fold: 1092,
  foldFull: [1092]
}, {
  code: 1061,
  lower: [],
  title: [],
  upper: [],
  fold: 1093,
  foldFull: [1093]
}, {
  code: 1062,
  lower: [],
  title: [],
  upper: [],
  fold: 1094,
  foldFull: [1094]
}, {
  code: 1063,
  lower: [],
  title: [],
  upper: [],
  fold: 1095,
  foldFull: [1095]
}, {
  code: 1064,
  lower: [],
  title: [],
  upper: [],
  fold: 1096,
  foldFull: [1096]
}, {
  code: 1065,
  lower: [],
  title: [],
  upper: [],
  fold: 1097,
  foldFull: [1097]
}, {
  code: 1066,
  lower: [],
  title: [],
  upper: [],
  fold: 1098,
  foldFull: [1098]
}, {
  code: 1067,
  lower: [],
  title: [],
  upper: [],
  fold: 1099,
  foldFull: [1099]
}, {
  code: 1068,
  lower: [],
  title: [],
  upper: [],
  fold: 1100,
  foldFull: [1100]
}, {
  code: 1069,
  lower: [],
  title: [],
  upper: [],
  fold: 1101,
  foldFull: [1101]
}, {
  code: 1070,
  lower: [],
  title: [],
  upper: [],
  fold: 1102,
  foldFull: [1102]
}, {
  code: 1071,
  lower: [],
  title: [],
  upper: [],
  fold: 1103,
  foldFull: [1103]
}, {
  code: 1120,
  lower: [],
  title: [],
  upper: [],
  fold: 1121,
  foldFull: [1121]
}, {
  code: 1122,
  lower: [],
  title: [],
  upper: [],
  fold: 1123,
  foldFull: [1123]
}, {
  code: 1124,
  lower: [],
  title: [],
  upper: [],
  fold: 1125,
  foldFull: [1125]
}, {
  code: 1126,
  lower: [],
  title: [],
  upper: [],
  fold: 1127,
  foldFull: [1127]
}, {
  code: 1128,
  lower: [],
  title: [],
  upper: [],
  fold: 1129,
  foldFull: [1129]
}, {
  code: 1130,
  lower: [],
  title: [],
  upper: [],
  fold: 1131,
  foldFull: [1131]
}, {
  code: 1132,
  lower: [],
  title: [],
  upper: [],
  fold: 1133,
  foldFull: [1133]
}, {
  code: 1134,
  lower: [],
  title: [],
  upper: [],
  fold: 1135,
  foldFull: [1135]
}, {
  code: 1136,
  lower: [],
  title: [],
  upper: [],
  fold: 1137,
  foldFull: [1137]
}, {
  code: 1138,
  lower: [],
  title: [],
  upper: [],
  fold: 1139,
  foldFull: [1139]
}, {
  code: 1140,
  lower: [],
  title: [],
  upper: [],
  fold: 1141,
  foldFull: [1141]
}, {
  code: 1142,
  lower: [],
  title: [],
  upper: [],
  fold: 1143,
  foldFull: [1143]
}, {
  code: 1144,
  lower: [],
  title: [],
  upper: [],
  fold: 1145,
  foldFull: [1145]
}, {
  code: 1146,
  lower: [],
  title: [],
  upper: [],
  fold: 1147,
  foldFull: [1147]
}, {
  code: 1148,
  lower: [],
  title: [],
  upper: [],
  fold: 1149,
  foldFull: [1149]
}, {
  code: 1150,
  lower: [],
  title: [],
  upper: [],
  fold: 1151,
  foldFull: [1151]
}, {
  code: 1152,
  lower: [],
  title: [],
  upper: [],
  fold: 1153,
  foldFull: [1153]
}, {
  code: 1162,
  lower: [],
  title: [],
  upper: [],
  fold: 1163,
  foldFull: [1163]
}, {
  code: 1164,
  lower: [],
  title: [],
  upper: [],
  fold: 1165,
  foldFull: [1165]
}, {
  code: 1166,
  lower: [],
  title: [],
  upper: [],
  fold: 1167,
  foldFull: [1167]
}, {
  code: 1168,
  lower: [],
  title: [],
  upper: [],
  fold: 1169,
  foldFull: [1169]
}, {
  code: 1170,
  lower: [],
  title: [],
  upper: [],
  fold: 1171,
  foldFull: [1171]
}, {
  code: 1172,
  lower: [],
  title: [],
  upper: [],
  fold: 1173,
  foldFull: [1173]
}, {
  code: 1174,
  lower: [],
  title: [],
  upper: [],
  fold: 1175,
  foldFull: [1175]
}, {
  code: 1176,
  lower: [],
  title: [],
  upper: [],
  fold: 1177,
  foldFull: [1177]
}, {
  code: 1178,
  lower: [],
  title: [],
  upper: [],
  fold: 1179,
  foldFull: [1179]
}, {
  code: 1180,
  lower: [],
  title: [],
  upper: [],
  fold: 1181,
  foldFull: [1181]
}, {
  code: 1182,
  lower: [],
  title: [],
  upper: [],
  fold: 1183,
  foldFull: [1183]
}, {
  code: 1184,
  lower: [],
  title: [],
  upper: [],
  fold: 1185,
  foldFull: [1185]
}, {
  code: 1186,
  lower: [],
  title: [],
  upper: [],
  fold: 1187,
  foldFull: [1187]
}, {
  code: 1188,
  lower: [],
  title: [],
  upper: [],
  fold: 1189,
  foldFull: [1189]
}, {
  code: 1190,
  lower: [],
  title: [],
  upper: [],
  fold: 1191,
  foldFull: [1191]
}, {
  code: 1192,
  lower: [],
  title: [],
  upper: [],
  fold: 1193,
  foldFull: [1193]
}, {
  code: 1194,
  lower: [],
  title: [],
  upper: [],
  fold: 1195,
  foldFull: [1195]
}, {
  code: 1196,
  lower: [],
  title: [],
  upper: [],
  fold: 1197,
  foldFull: [1197]
}, {
  code: 1198,
  lower: [],
  title: [],
  upper: [],
  fold: 1199,
  foldFull: [1199]
}, {
  code: 1200,
  lower: [],
  title: [],
  upper: [],
  fold: 1201,
  foldFull: [1201]
}, {
  code: 1202,
  lower: [],
  title: [],
  upper: [],
  fold: 1203,
  foldFull: [1203]
}, {
  code: 1204,
  lower: [],
  title: [],
  upper: [],
  fold: 1205,
  foldFull: [1205]
}, {
  code: 1206,
  lower: [],
  title: [],
  upper: [],
  fold: 1207,
  foldFull: [1207]
}, {
  code: 1208,
  lower: [],
  title: [],
  upper: [],
  fold: 1209,
  foldFull: [1209]
}, {
  code: 1210,
  lower: [],
  title: [],
  upper: [],
  fold: 1211,
  foldFull: [1211]
}, {
  code: 1212,
  lower: [],
  title: [],
  upper: [],
  fold: 1213,
  foldFull: [1213]
}, {
  code: 1214,
  lower: [],
  title: [],
  upper: [],
  fold: 1215,
  foldFull: [1215]
}, {
  code: 1216,
  lower: [],
  title: [],
  upper: [],
  fold: 1231,
  foldFull: [1231]
}, {
  code: 1217,
  lower: [],
  title: [],
  upper: [],
  fold: 1218,
  foldFull: [1218]
}, {
  code: 1219,
  lower: [],
  title: [],
  upper: [],
  fold: 1220,
  foldFull: [1220]
}, {
  code: 1221,
  lower: [],
  title: [],
  upper: [],
  fold: 1222,
  foldFull: [1222]
}, {
  code: 1223,
  lower: [],
  title: [],
  upper: [],
  fold: 1224,
  foldFull: [1224]
}, {
  code: 1225,
  lower: [],
  title: [],
  upper: [],
  fold: 1226,
  foldFull: [1226]
}, {
  code: 1227,
  lower: [],
  title: [],
  upper: [],
  fold: 1228,
  foldFull: [1228]
}, {
  code: 1229,
  lower: [],
  title: [],
  upper: [],
  fold: 1230,
  foldFull: [1230]
}, {
  code: 1232,
  lower: [],
  title: [],
  upper: [],
  fold: 1233,
  foldFull: [1233]
}, {
  code: 1234,
  lower: [],
  title: [],
  upper: [],
  fold: 1235,
  foldFull: [1235]
}, {
  code: 1236,
  lower: [],
  title: [],
  upper: [],
  fold: 1237,
  foldFull: [1237]
}, {
  code: 1238,
  lower: [],
  title: [],
  upper: [],
  fold: 1239,
  foldFull: [1239]
}, {
  code: 1240,
  lower: [],
  title: [],
  upper: [],
  fold: 1241,
  foldFull: [1241]
}, {
  code: 1242,
  lower: [],
  title: [],
  upper: [],
  fold: 1243,
  foldFull: [1243]
}, {
  code: 1244,
  lower: [],
  title: [],
  upper: [],
  fold: 1245,
  foldFull: [1245]
}, {
  code: 1246,
  lower: [],
  title: [],
  upper: [],
  fold: 1247,
  foldFull: [1247]
}, {
  code: 1248,
  lower: [],
  title: [],
  upper: [],
  fold: 1249,
  foldFull: [1249]
}, {
  code: 1250,
  lower: [],
  title: [],
  upper: [],
  fold: 1251,
  foldFull: [1251]
}, {
  code: 1252,
  lower: [],
  title: [],
  upper: [],
  fold: 1253,
  foldFull: [1253]
}, {
  code: 1254,
  lower: [],
  title: [],
  upper: [],
  fold: 1255,
  foldFull: [1255]
}, {
  code: 1256,
  lower: [],
  title: [],
  upper: [],
  fold: 1257,
  foldFull: [1257]
}, {
  code: 1258,
  lower: [],
  title: [],
  upper: [],
  fold: 1259,
  foldFull: [1259]
}, {
  code: 1260,
  lower: [],
  title: [],
  upper: [],
  fold: 1261,
  foldFull: [1261]
}, {
  code: 1262,
  lower: [],
  title: [],
  upper: [],
  fold: 1263,
  foldFull: [1263]
}, {
  code: 1264,
  lower: [],
  title: [],
  upper: [],
  fold: 1265,
  foldFull: [1265]
}, {
  code: 1266,
  lower: [],
  title: [],
  upper: [],
  fold: 1267,
  foldFull: [1267]
}, {
  code: 1268,
  lower: [],
  title: [],
  upper: [],
  fold: 1269,
  foldFull: [1269]
}, {
  code: 1270,
  lower: [],
  title: [],
  upper: [],
  fold: 1271,
  foldFull: [1271]
}, {
  code: 1272,
  lower: [],
  title: [],
  upper: [],
  fold: 1273,
  foldFull: [1273]
}, {
  code: 1274,
  lower: [],
  title: [],
  upper: [],
  fold: 1275,
  foldFull: [1275]
}, {
  code: 1276,
  lower: [],
  title: [],
  upper: [],
  fold: 1277,
  foldFull: [1277]
}, {
  code: 1278,
  lower: [],
  title: [],
  upper: [],
  fold: 1279,
  foldFull: [1279]
}, {
  code: 1280,
  lower: [],
  title: [],
  upper: [],
  fold: 1281,
  foldFull: [1281]
}, {
  code: 1282,
  lower: [],
  title: [],
  upper: [],
  fold: 1283,
  foldFull: [1283]
}, {
  code: 1284,
  lower: [],
  title: [],
  upper: [],
  fold: 1285,
  foldFull: [1285]
}, {
  code: 1286,
  lower: [],
  title: [],
  upper: [],
  fold: 1287,
  foldFull: [1287]
}, {
  code: 1288,
  lower: [],
  title: [],
  upper: [],
  fold: 1289,
  foldFull: [1289]
}, {
  code: 1290,
  lower: [],
  title: [],
  upper: [],
  fold: 1291,
  foldFull: [1291]
}, {
  code: 1292,
  lower: [],
  title: [],
  upper: [],
  fold: 1293,
  foldFull: [1293]
}, {
  code: 1294,
  lower: [],
  title: [],
  upper: [],
  fold: 1295,
  foldFull: [1295]
}, {
  code: 1296,
  lower: [],
  title: [],
  upper: [],
  fold: 1297,
  foldFull: [1297]
}, {
  code: 1298,
  lower: [],
  title: [],
  upper: [],
  fold: 1299,
  foldFull: [1299]
}, {
  code: 1300,
  lower: [],
  title: [],
  upper: [],
  fold: 1301,
  foldFull: [1301]
}, {
  code: 1302,
  lower: [],
  title: [],
  upper: [],
  fold: 1303,
  foldFull: [1303]
}, {
  code: 1304,
  lower: [],
  title: [],
  upper: [],
  fold: 1305,
  foldFull: [1305]
}, {
  code: 1306,
  lower: [],
  title: [],
  upper: [],
  fold: 1307,
  foldFull: [1307]
}, {
  code: 1308,
  lower: [],
  title: [],
  upper: [],
  fold: 1309,
  foldFull: [1309]
}, {
  code: 1310,
  lower: [],
  title: [],
  upper: [],
  fold: 1311,
  foldFull: [1311]
}, {
  code: 1312,
  lower: [],
  title: [],
  upper: [],
  fold: 1313,
  foldFull: [1313]
}, {
  code: 1314,
  lower: [],
  title: [],
  upper: [],
  fold: 1315,
  foldFull: [1315]
}, {
  code: 1316,
  lower: [],
  title: [],
  upper: [],
  fold: 1317,
  foldFull: [1317]
}, {
  code: 1318,
  lower: [],
  title: [],
  upper: [],
  fold: 1319,
  foldFull: [1319]
}, {
  code: 1320,
  lower: [],
  title: [],
  upper: [],
  fold: 1321,
  foldFull: [1321]
}, {
  code: 1322,
  lower: [],
  title: [],
  upper: [],
  fold: 1323,
  foldFull: [1323]
}, {
  code: 1324,
  lower: [],
  title: [],
  upper: [],
  fold: 1325,
  foldFull: [1325]
}, {
  code: 1326,
  lower: [],
  title: [],
  upper: [],
  fold: 1327,
  foldFull: [1327]
}, {
  code: 1329,
  lower: [],
  title: [],
  upper: [],
  fold: 1377,
  foldFull: [1377]
}, {
  code: 1330,
  lower: [],
  title: [],
  upper: [],
  fold: 1378,
  foldFull: [1378]
}, {
  code: 1331,
  lower: [],
  title: [],
  upper: [],
  fold: 1379,
  foldFull: [1379]
}, {
  code: 1332,
  lower: [],
  title: [],
  upper: [],
  fold: 1380,
  foldFull: [1380]
}, {
  code: 1333,
  lower: [],
  title: [],
  upper: [],
  fold: 1381,
  foldFull: [1381]
}, {
  code: 1334,
  lower: [],
  title: [],
  upper: [],
  fold: 1382,
  foldFull: [1382]
}, {
  code: 1335,
  lower: [],
  title: [],
  upper: [],
  fold: 1383,
  foldFull: [1383]
}, {
  code: 1336,
  lower: [],
  title: [],
  upper: [],
  fold: 1384,
  foldFull: [1384]
}, {
  code: 1337,
  lower: [],
  title: [],
  upper: [],
  fold: 1385,
  foldFull: [1385]
}, {
  code: 1338,
  lower: [],
  title: [],
  upper: [],
  fold: 1386,
  foldFull: [1386]
}, {
  code: 1339,
  lower: [],
  title: [],
  upper: [],
  fold: 1387,
  foldFull: [1387]
}, {
  code: 1340,
  lower: [],
  title: [],
  upper: [],
  fold: 1388,
  foldFull: [1388]
}, {
  code: 1341,
  lower: [],
  title: [],
  upper: [],
  fold: 1389,
  foldFull: [1389]
}, {
  code: 1342,
  lower: [],
  title: [],
  upper: [],
  fold: 1390,
  foldFull: [1390]
}, {
  code: 1343,
  lower: [],
  title: [],
  upper: [],
  fold: 1391,
  foldFull: [1391]
}, {
  code: 1344,
  lower: [],
  title: [],
  upper: [],
  fold: 1392,
  foldFull: [1392]
}, {
  code: 1345,
  lower: [],
  title: [],
  upper: [],
  fold: 1393,
  foldFull: [1393]
}, {
  code: 1346,
  lower: [],
  title: [],
  upper: [],
  fold: 1394,
  foldFull: [1394]
}, {
  code: 1347,
  lower: [],
  title: [],
  upper: [],
  fold: 1395,
  foldFull: [1395]
}, {
  code: 1348,
  lower: [],
  title: [],
  upper: [],
  fold: 1396,
  foldFull: [1396]
}, {
  code: 1349,
  lower: [],
  title: [],
  upper: [],
  fold: 1397,
  foldFull: [1397]
}, {
  code: 1350,
  lower: [],
  title: [],
  upper: [],
  fold: 1398,
  foldFull: [1398]
}, {
  code: 1351,
  lower: [],
  title: [],
  upper: [],
  fold: 1399,
  foldFull: [1399]
}, {
  code: 1352,
  lower: [],
  title: [],
  upper: [],
  fold: 1400,
  foldFull: [1400]
}, {
  code: 1353,
  lower: [],
  title: [],
  upper: [],
  fold: 1401,
  foldFull: [1401]
}, {
  code: 1354,
  lower: [],
  title: [],
  upper: [],
  fold: 1402,
  foldFull: [1402]
}, {
  code: 1355,
  lower: [],
  title: [],
  upper: [],
  fold: 1403,
  foldFull: [1403]
}, {
  code: 1356,
  lower: [],
  title: [],
  upper: [],
  fold: 1404,
  foldFull: [1404]
}, {
  code: 1357,
  lower: [],
  title: [],
  upper: [],
  fold: 1405,
  foldFull: [1405]
}, {
  code: 1358,
  lower: [],
  title: [],
  upper: [],
  fold: 1406,
  foldFull: [1406]
}, {
  code: 1359,
  lower: [],
  title: [],
  upper: [],
  fold: 1407,
  foldFull: [1407]
}, {
  code: 1360,
  lower: [],
  title: [],
  upper: [],
  fold: 1408,
  foldFull: [1408]
}, {
  code: 1361,
  lower: [],
  title: [],
  upper: [],
  fold: 1409,
  foldFull: [1409]
}, {
  code: 1362,
  lower: [],
  title: [],
  upper: [],
  fold: 1410,
  foldFull: [1410]
}, {
  code: 1363,
  lower: [],
  title: [],
  upper: [],
  fold: 1411,
  foldFull: [1411]
}, {
  code: 1364,
  lower: [],
  title: [],
  upper: [],
  fold: 1412,
  foldFull: [1412]
}, {
  code: 1365,
  lower: [],
  title: [],
  upper: [],
  fold: 1413,
  foldFull: [1413]
}, {
  code: 1366,
  lower: [],
  title: [],
  upper: [],
  fold: 1414,
  foldFull: [1414]
}, {
  code: 1415,
  lower: [1415],
  title: [1333, 1410],
  upper: [1333, 1362],
  fold: 0,
  foldFull: [1381, 1410]
}, {
  code: 1415,
  lower: [1415],
  title: [1333, 1410],
  upper: [1333, 1362],
  fold: 0,
  foldFull: [1381, 1410]
}, {
  code: 4256,
  lower: [],
  title: [],
  upper: [],
  fold: 11520,
  foldFull: [11520]
}, {
  code: 4257,
  lower: [],
  title: [],
  upper: [],
  fold: 11521,
  foldFull: [11521]
}, {
  code: 4258,
  lower: [],
  title: [],
  upper: [],
  fold: 11522,
  foldFull: [11522]
}, {
  code: 4259,
  lower: [],
  title: [],
  upper: [],
  fold: 11523,
  foldFull: [11523]
}, {
  code: 4260,
  lower: [],
  title: [],
  upper: [],
  fold: 11524,
  foldFull: [11524]
}, {
  code: 4261,
  lower: [],
  title: [],
  upper: [],
  fold: 11525,
  foldFull: [11525]
}, {
  code: 4262,
  lower: [],
  title: [],
  upper: [],
  fold: 11526,
  foldFull: [11526]
}, {
  code: 4263,
  lower: [],
  title: [],
  upper: [],
  fold: 11527,
  foldFull: [11527]
}, {
  code: 4264,
  lower: [],
  title: [],
  upper: [],
  fold: 11528,
  foldFull: [11528]
}, {
  code: 4265,
  lower: [],
  title: [],
  upper: [],
  fold: 11529,
  foldFull: [11529]
}, {
  code: 4266,
  lower: [],
  title: [],
  upper: [],
  fold: 11530,
  foldFull: [11530]
}, {
  code: 4267,
  lower: [],
  title: [],
  upper: [],
  fold: 11531,
  foldFull: [11531]
}, {
  code: 4268,
  lower: [],
  title: [],
  upper: [],
  fold: 11532,
  foldFull: [11532]
}, {
  code: 4269,
  lower: [],
  title: [],
  upper: [],
  fold: 11533,
  foldFull: [11533]
}, {
  code: 4270,
  lower: [],
  title: [],
  upper: [],
  fold: 11534,
  foldFull: [11534]
}, {
  code: 4271,
  lower: [],
  title: [],
  upper: [],
  fold: 11535,
  foldFull: [11535]
}, {
  code: 4272,
  lower: [],
  title: [],
  upper: [],
  fold: 11536,
  foldFull: [11536]
}, {
  code: 4273,
  lower: [],
  title: [],
  upper: [],
  fold: 11537,
  foldFull: [11537]
}, {
  code: 4274,
  lower: [],
  title: [],
  upper: [],
  fold: 11538,
  foldFull: [11538]
}, {
  code: 4275,
  lower: [],
  title: [],
  upper: [],
  fold: 11539,
  foldFull: [11539]
}, {
  code: 4276,
  lower: [],
  title: [],
  upper: [],
  fold: 11540,
  foldFull: [11540]
}, {
  code: 4277,
  lower: [],
  title: [],
  upper: [],
  fold: 11541,
  foldFull: [11541]
}, {
  code: 4278,
  lower: [],
  title: [],
  upper: [],
  fold: 11542,
  foldFull: [11542]
}, {
  code: 4279,
  lower: [],
  title: [],
  upper: [],
  fold: 11543,
  foldFull: [11543]
}, {
  code: 4280,
  lower: [],
  title: [],
  upper: [],
  fold: 11544,
  foldFull: [11544]
}, {
  code: 4281,
  lower: [],
  title: [],
  upper: [],
  fold: 11545,
  foldFull: [11545]
}, {
  code: 4282,
  lower: [],
  title: [],
  upper: [],
  fold: 11546,
  foldFull: [11546]
}, {
  code: 4283,
  lower: [],
  title: [],
  upper: [],
  fold: 11547,
  foldFull: [11547]
}, {
  code: 4284,
  lower: [],
  title: [],
  upper: [],
  fold: 11548,
  foldFull: [11548]
}, {
  code: 4285,
  lower: [],
  title: [],
  upper: [],
  fold: 11549,
  foldFull: [11549]
}, {
  code: 4286,
  lower: [],
  title: [],
  upper: [],
  fold: 11550,
  foldFull: [11550]
}, {
  code: 4287,
  lower: [],
  title: [],
  upper: [],
  fold: 11551,
  foldFull: [11551]
}, {
  code: 4288,
  lower: [],
  title: [],
  upper: [],
  fold: 11552,
  foldFull: [11552]
}, {
  code: 4289,
  lower: [],
  title: [],
  upper: [],
  fold: 11553,
  foldFull: [11553]
}, {
  code: 4290,
  lower: [],
  title: [],
  upper: [],
  fold: 11554,
  foldFull: [11554]
}, {
  code: 4291,
  lower: [],
  title: [],
  upper: [],
  fold: 11555,
  foldFull: [11555]
}, {
  code: 4292,
  lower: [],
  title: [],
  upper: [],
  fold: 11556,
  foldFull: [11556]
}, {
  code: 4293,
  lower: [],
  title: [],
  upper: [],
  fold: 11557,
  foldFull: [11557]
}, {
  code: 4295,
  lower: [],
  title: [],
  upper: [],
  fold: 11559,
  foldFull: [11559]
}, {
  code: 4301,
  lower: [],
  title: [],
  upper: [],
  fold: 11565,
  foldFull: [11565]
}, {
  code: 5112,
  lower: [],
  title: [],
  upper: [],
  fold: 5104,
  foldFull: [5104]
}, {
  code: 5113,
  lower: [],
  title: [],
  upper: [],
  fold: 5105,
  foldFull: [5105]
}, {
  code: 5114,
  lower: [],
  title: [],
  upper: [],
  fold: 5106,
  foldFull: [5106]
}, {
  code: 5115,
  lower: [],
  title: [],
  upper: [],
  fold: 5107,
  foldFull: [5107]
}, {
  code: 5116,
  lower: [],
  title: [],
  upper: [],
  fold: 5108,
  foldFull: [5108]
}, {
  code: 5117,
  lower: [],
  title: [],
  upper: [],
  fold: 5109,
  foldFull: [5109]
}, {
  code: 7296,
  lower: [],
  title: [],
  upper: [],
  fold: 1074,
  foldFull: [1074]
}, {
  code: 7297,
  lower: [],
  title: [],
  upper: [],
  fold: 1076,
  foldFull: [1076]
}, {
  code: 7298,
  lower: [],
  title: [],
  upper: [],
  fold: 1086,
  foldFull: [1086]
}, {
  code: 7299,
  lower: [],
  title: [],
  upper: [],
  fold: 1089,
  foldFull: [1089]
}, {
  code: 7300,
  lower: [],
  title: [],
  upper: [],
  fold: 1090,
  foldFull: [1090]
}, {
  code: 7301,
  lower: [],
  title: [],
  upper: [],
  fold: 1090,
  foldFull: [1090]
}, {
  code: 7302,
  lower: [],
  title: [],
  upper: [],
  fold: 1098,
  foldFull: [1098]
}, {
  code: 7303,
  lower: [],
  title: [],
  upper: [],
  fold: 1123,
  foldFull: [1123]
}, {
  code: 7304,
  lower: [],
  title: [],
  upper: [],
  fold: 42571,
  foldFull: [42571]
}, {
  code: 7312,
  lower: [],
  title: [],
  upper: [],
  fold: 4304,
  foldFull: [4304]
}, {
  code: 7313,
  lower: [],
  title: [],
  upper: [],
  fold: 4305,
  foldFull: [4305]
}, {
  code: 7314,
  lower: [],
  title: [],
  upper: [],
  fold: 4306,
  foldFull: [4306]
}, {
  code: 7315,
  lower: [],
  title: [],
  upper: [],
  fold: 4307,
  foldFull: [4307]
}, {
  code: 7316,
  lower: [],
  title: [],
  upper: [],
  fold: 4308,
  foldFull: [4308]
}, {
  code: 7317,
  lower: [],
  title: [],
  upper: [],
  fold: 4309,
  foldFull: [4309]
}, {
  code: 7318,
  lower: [],
  title: [],
  upper: [],
  fold: 4310,
  foldFull: [4310]
}, {
  code: 7319,
  lower: [],
  title: [],
  upper: [],
  fold: 4311,
  foldFull: [4311]
}, {
  code: 7320,
  lower: [],
  title: [],
  upper: [],
  fold: 4312,
  foldFull: [4312]
}, {
  code: 7321,
  lower: [],
  title: [],
  upper: [],
  fold: 4313,
  foldFull: [4313]
}, {
  code: 7322,
  lower: [],
  title: [],
  upper: [],
  fold: 4314,
  foldFull: [4314]
}, {
  code: 7323,
  lower: [],
  title: [],
  upper: [],
  fold: 4315,
  foldFull: [4315]
}, {
  code: 7324,
  lower: [],
  title: [],
  upper: [],
  fold: 4316,
  foldFull: [4316]
}, {
  code: 7325,
  lower: [],
  title: [],
  upper: [],
  fold: 4317,
  foldFull: [4317]
}, {
  code: 7326,
  lower: [],
  title: [],
  upper: [],
  fold: 4318,
  foldFull: [4318]
}, {
  code: 7327,
  lower: [],
  title: [],
  upper: [],
  fold: 4319,
  foldFull: [4319]
}, {
  code: 7328,
  lower: [],
  title: [],
  upper: [],
  fold: 4320,
  foldFull: [4320]
}, {
  code: 7329,
  lower: [],
  title: [],
  upper: [],
  fold: 4321,
  foldFull: [4321]
}, {
  code: 7330,
  lower: [],
  title: [],
  upper: [],
  fold: 4322,
  foldFull: [4322]
}, {
  code: 7331,
  lower: [],
  title: [],
  upper: [],
  fold: 4323,
  foldFull: [4323]
}, {
  code: 7332,
  lower: [],
  title: [],
  upper: [],
  fold: 4324,
  foldFull: [4324]
}, {
  code: 7333,
  lower: [],
  title: [],
  upper: [],
  fold: 4325,
  foldFull: [4325]
}, {
  code: 7334,
  lower: [],
  title: [],
  upper: [],
  fold: 4326,
  foldFull: [4326]
}, {
  code: 7335,
  lower: [],
  title: [],
  upper: [],
  fold: 4327,
  foldFull: [4327]
}, {
  code: 7336,
  lower: [],
  title: [],
  upper: [],
  fold: 4328,
  foldFull: [4328]
}, {
  code: 7337,
  lower: [],
  title: [],
  upper: [],
  fold: 4329,
  foldFull: [4329]
}, {
  code: 7338,
  lower: [],
  title: [],
  upper: [],
  fold: 4330,
  foldFull: [4330]
}, {
  code: 7339,
  lower: [],
  title: [],
  upper: [],
  fold: 4331,
  foldFull: [4331]
}, {
  code: 7340,
  lower: [],
  title: [],
  upper: [],
  fold: 4332,
  foldFull: [4332]
}, {
  code: 7341,
  lower: [],
  title: [],
  upper: [],
  fold: 4333,
  foldFull: [4333]
}, {
  code: 7342,
  lower: [],
  title: [],
  upper: [],
  fold: 4334,
  foldFull: [4334]
}, {
  code: 7343,
  lower: [],
  title: [],
  upper: [],
  fold: 4335,
  foldFull: [4335]
}, {
  code: 7344,
  lower: [],
  title: [],
  upper: [],
  fold: 4336,
  foldFull: [4336]
}, {
  code: 7345,
  lower: [],
  title: [],
  upper: [],
  fold: 4337,
  foldFull: [4337]
}, {
  code: 7346,
  lower: [],
  title: [],
  upper: [],
  fold: 4338,
  foldFull: [4338]
}, {
  code: 7347,
  lower: [],
  title: [],
  upper: [],
  fold: 4339,
  foldFull: [4339]
}, {
  code: 7348,
  lower: [],
  title: [],
  upper: [],
  fold: 4340,
  foldFull: [4340]
}, {
  code: 7349,
  lower: [],
  title: [],
  upper: [],
  fold: 4341,
  foldFull: [4341]
}, {
  code: 7350,
  lower: [],
  title: [],
  upper: [],
  fold: 4342,
  foldFull: [4342]
}, {
  code: 7351,
  lower: [],
  title: [],
  upper: [],
  fold: 4343,
  foldFull: [4343]
}, {
  code: 7352,
  lower: [],
  title: [],
  upper: [],
  fold: 4344,
  foldFull: [4344]
}, {
  code: 7353,
  lower: [],
  title: [],
  upper: [],
  fold: 4345,
  foldFull: [4345]
}, {
  code: 7354,
  lower: [],
  title: [],
  upper: [],
  fold: 4346,
  foldFull: [4346]
}, {
  code: 7357,
  lower: [],
  title: [],
  upper: [],
  fold: 4349,
  foldFull: [4349]
}, {
  code: 7358,
  lower: [],
  title: [],
  upper: [],
  fold: 4350,
  foldFull: [4350]
}, {
  code: 7359,
  lower: [],
  title: [],
  upper: [],
  fold: 4351,
  foldFull: [4351]
}, {
  code: 7680,
  lower: [],
  title: [],
  upper: [],
  fold: 7681,
  foldFull: [7681]
}, {
  code: 7682,
  lower: [],
  title: [],
  upper: [],
  fold: 7683,
  foldFull: [7683]
}, {
  code: 7684,
  lower: [],
  title: [],
  upper: [],
  fold: 7685,
  foldFull: [7685]
}, {
  code: 7686,
  lower: [],
  title: [],
  upper: [],
  fold: 7687,
  foldFull: [7687]
}, {
  code: 7688,
  lower: [],
  title: [],
  upper: [],
  fold: 7689,
  foldFull: [7689]
}, {
  code: 7690,
  lower: [],
  title: [],
  upper: [],
  fold: 7691,
  foldFull: [7691]
}, {
  code: 7692,
  lower: [],
  title: [],
  upper: [],
  fold: 7693,
  foldFull: [7693]
}, {
  code: 7694,
  lower: [],
  title: [],
  upper: [],
  fold: 7695,
  foldFull: [7695]
}, {
  code: 7696,
  lower: [],
  title: [],
  upper: [],
  fold: 7697,
  foldFull: [7697]
}, {
  code: 7698,
  lower: [],
  title: [],
  upper: [],
  fold: 7699,
  foldFull: [7699]
}, {
  code: 7700,
  lower: [],
  title: [],
  upper: [],
  fold: 7701,
  foldFull: [7701]
}, {
  code: 7702,
  lower: [],
  title: [],
  upper: [],
  fold: 7703,
  foldFull: [7703]
}, {
  code: 7704,
  lower: [],
  title: [],
  upper: [],
  fold: 7705,
  foldFull: [7705]
}, {
  code: 7706,
  lower: [],
  title: [],
  upper: [],
  fold: 7707,
  foldFull: [7707]
}, {
  code: 7708,
  lower: [],
  title: [],
  upper: [],
  fold: 7709,
  foldFull: [7709]
}, {
  code: 7710,
  lower: [],
  title: [],
  upper: [],
  fold: 7711,
  foldFull: [7711]
}, {
  code: 7712,
  lower: [],
  title: [],
  upper: [],
  fold: 7713,
  foldFull: [7713]
}, {
  code: 7714,
  lower: [],
  title: [],
  upper: [],
  fold: 7715,
  foldFull: [7715]
}, {
  code: 7716,
  lower: [],
  title: [],
  upper: [],
  fold: 7717,
  foldFull: [7717]
}, {
  code: 7718,
  lower: [],
  title: [],
  upper: [],
  fold: 7719,
  foldFull: [7719]
}, {
  code: 7720,
  lower: [],
  title: [],
  upper: [],
  fold: 7721,
  foldFull: [7721]
}, {
  code: 7722,
  lower: [],
  title: [],
  upper: [],
  fold: 7723,
  foldFull: [7723]
}, {
  code: 7724,
  lower: [],
  title: [],
  upper: [],
  fold: 7725,
  foldFull: [7725]
}, {
  code: 7726,
  lower: [],
  title: [],
  upper: [],
  fold: 7727,
  foldFull: [7727]
}, {
  code: 7728,
  lower: [],
  title: [],
  upper: [],
  fold: 7729,
  foldFull: [7729]
}, {
  code: 7730,
  lower: [],
  title: [],
  upper: [],
  fold: 7731,
  foldFull: [7731]
}, {
  code: 7732,
  lower: [],
  title: [],
  upper: [],
  fold: 7733,
  foldFull: [7733]
}, {
  code: 7734,
  lower: [],
  title: [],
  upper: [],
  fold: 7735,
  foldFull: [7735]
}, {
  code: 7736,
  lower: [],
  title: [],
  upper: [],
  fold: 7737,
  foldFull: [7737]
}, {
  code: 7738,
  lower: [],
  title: [],
  upper: [],
  fold: 7739,
  foldFull: [7739]
}, {
  code: 7740,
  lower: [],
  title: [],
  upper: [],
  fold: 7741,
  foldFull: [7741]
}, {
  code: 7742,
  lower: [],
  title: [],
  upper: [],
  fold: 7743,
  foldFull: [7743]
}, {
  code: 7744,
  lower: [],
  title: [],
  upper: [],
  fold: 7745,
  foldFull: [7745]
}, {
  code: 7746,
  lower: [],
  title: [],
  upper: [],
  fold: 7747,
  foldFull: [7747]
}, {
  code: 7748,
  lower: [],
  title: [],
  upper: [],
  fold: 7749,
  foldFull: [7749]
}, {
  code: 7750,
  lower: [],
  title: [],
  upper: [],
  fold: 7751,
  foldFull: [7751]
}, {
  code: 7752,
  lower: [],
  title: [],
  upper: [],
  fold: 7753,
  foldFull: [7753]
}, {
  code: 7754,
  lower: [],
  title: [],
  upper: [],
  fold: 7755,
  foldFull: [7755]
}, {
  code: 7756,
  lower: [],
  title: [],
  upper: [],
  fold: 7757,
  foldFull: [7757]
}, {
  code: 7758,
  lower: [],
  title: [],
  upper: [],
  fold: 7759,
  foldFull: [7759]
}, {
  code: 7760,
  lower: [],
  title: [],
  upper: [],
  fold: 7761,
  foldFull: [7761]
}, {
  code: 7762,
  lower: [],
  title: [],
  upper: [],
  fold: 7763,
  foldFull: [7763]
}, {
  code: 7764,
  lower: [],
  title: [],
  upper: [],
  fold: 7765,
  foldFull: [7765]
}, {
  code: 7766,
  lower: [],
  title: [],
  upper: [],
  fold: 7767,
  foldFull: [7767]
}, {
  code: 7768,
  lower: [],
  title: [],
  upper: [],
  fold: 7769,
  foldFull: [7769]
}, {
  code: 7770,
  lower: [],
  title: [],
  upper: [],
  fold: 7771,
  foldFull: [7771]
}, {
  code: 7772,
  lower: [],
  title: [],
  upper: [],
  fold: 7773,
  foldFull: [7773]
}, {
  code: 7774,
  lower: [],
  title: [],
  upper: [],
  fold: 7775,
  foldFull: [7775]
}, {
  code: 7776,
  lower: [],
  title: [],
  upper: [],
  fold: 7777,
  foldFull: [7777]
}, {
  code: 7778,
  lower: [],
  title: [],
  upper: [],
  fold: 7779,
  foldFull: [7779]
}, {
  code: 7780,
  lower: [],
  title: [],
  upper: [],
  fold: 7781,
  foldFull: [7781]
}, {
  code: 7782,
  lower: [],
  title: [],
  upper: [],
  fold: 7783,
  foldFull: [7783]
}, {
  code: 7784,
  lower: [],
  title: [],
  upper: [],
  fold: 7785,
  foldFull: [7785]
}, {
  code: 7786,
  lower: [],
  title: [],
  upper: [],
  fold: 7787,
  foldFull: [7787]
}, {
  code: 7788,
  lower: [],
  title: [],
  upper: [],
  fold: 7789,
  foldFull: [7789]
}, {
  code: 7790,
  lower: [],
  title: [],
  upper: [],
  fold: 7791,
  foldFull: [7791]
}, {
  code: 7792,
  lower: [],
  title: [],
  upper: [],
  fold: 7793,
  foldFull: [7793]
}, {
  code: 7794,
  lower: [],
  title: [],
  upper: [],
  fold: 7795,
  foldFull: [7795]
}, {
  code: 7796,
  lower: [],
  title: [],
  upper: [],
  fold: 7797,
  foldFull: [7797]
}, {
  code: 7798,
  lower: [],
  title: [],
  upper: [],
  fold: 7799,
  foldFull: [7799]
}, {
  code: 7800,
  lower: [],
  title: [],
  upper: [],
  fold: 7801,
  foldFull: [7801]
}, {
  code: 7802,
  lower: [],
  title: [],
  upper: [],
  fold: 7803,
  foldFull: [7803]
}, {
  code: 7804,
  lower: [],
  title: [],
  upper: [],
  fold: 7805,
  foldFull: [7805]
}, {
  code: 7806,
  lower: [],
  title: [],
  upper: [],
  fold: 7807,
  foldFull: [7807]
}, {
  code: 7808,
  lower: [],
  title: [],
  upper: [],
  fold: 7809,
  foldFull: [7809]
}, {
  code: 7810,
  lower: [],
  title: [],
  upper: [],
  fold: 7811,
  foldFull: [7811]
}, {
  code: 7812,
  lower: [],
  title: [],
  upper: [],
  fold: 7813,
  foldFull: [7813]
}, {
  code: 7814,
  lower: [],
  title: [],
  upper: [],
  fold: 7815,
  foldFull: [7815]
}, {
  code: 7816,
  lower: [],
  title: [],
  upper: [],
  fold: 7817,
  foldFull: [7817]
}, {
  code: 7818,
  lower: [],
  title: [],
  upper: [],
  fold: 7819,
  foldFull: [7819]
}, {
  code: 7820,
  lower: [],
  title: [],
  upper: [],
  fold: 7821,
  foldFull: [7821]
}, {
  code: 7822,
  lower: [],
  title: [],
  upper: [],
  fold: 7823,
  foldFull: [7823]
}, {
  code: 7824,
  lower: [],
  title: [],
  upper: [],
  fold: 7825,
  foldFull: [7825]
}, {
  code: 7826,
  lower: [],
  title: [],
  upper: [],
  fold: 7827,
  foldFull: [7827]
}, {
  code: 7828,
  lower: [],
  title: [],
  upper: [],
  fold: 7829,
  foldFull: [7829]
}, {
  code: 7830,
  lower: [7830],
  title: [72, 817],
  upper: [72, 817],
  fold: 0,
  foldFull: [104, 817]
}, {
  code: 7830,
  lower: [7830],
  title: [72, 817],
  upper: [72, 817],
  fold: 0,
  foldFull: [104, 817]
}, {
  code: 7831,
  lower: [7831],
  title: [84, 776],
  upper: [84, 776],
  fold: 0,
  foldFull: [116, 776]
}, {
  code: 7831,
  lower: [7831],
  title: [84, 776],
  upper: [84, 776],
  fold: 0,
  foldFull: [116, 776]
}, {
  code: 7832,
  lower: [7832],
  title: [87, 778],
  upper: [87, 778],
  fold: 0,
  foldFull: [119, 778]
}, {
  code: 7832,
  lower: [7832],
  title: [87, 778],
  upper: [87, 778],
  fold: 0,
  foldFull: [119, 778]
}, {
  code: 7833,
  lower: [7833],
  title: [89, 778],
  upper: [89, 778],
  fold: 0,
  foldFull: [121, 778]
}, {
  code: 7833,
  lower: [7833],
  title: [89, 778],
  upper: [89, 778],
  fold: 0,
  foldFull: [121, 778]
}, {
  code: 7834,
  lower: [7834],
  title: [65, 702],
  upper: [65, 702],
  fold: 0,
  foldFull: [97, 702]
}, {
  code: 7834,
  lower: [7834],
  title: [65, 702],
  upper: [65, 702],
  fold: 0,
  foldFull: [97, 702]
}, {
  code: 7835,
  lower: [],
  title: [],
  upper: [],
  fold: 7777,
  foldFull: [7777]
}, {
  code: 7838,
  lower: [],
  title: [],
  upper: [],
  fold: 223,
  foldFull: [115, 115]
}, {
  code: 7840,
  lower: [],
  title: [],
  upper: [],
  fold: 7841,
  foldFull: [7841]
}, {
  code: 7842,
  lower: [],
  title: [],
  upper: [],
  fold: 7843,
  foldFull: [7843]
}, {
  code: 7844,
  lower: [],
  title: [],
  upper: [],
  fold: 7845,
  foldFull: [7845]
}, {
  code: 7846,
  lower: [],
  title: [],
  upper: [],
  fold: 7847,
  foldFull: [7847]
}, {
  code: 7848,
  lower: [],
  title: [],
  upper: [],
  fold: 7849,
  foldFull: [7849]
}, {
  code: 7850,
  lower: [],
  title: [],
  upper: [],
  fold: 7851,
  foldFull: [7851]
}, {
  code: 7852,
  lower: [],
  title: [],
  upper: [],
  fold: 7853,
  foldFull: [7853]
}, {
  code: 7854,
  lower: [],
  title: [],
  upper: [],
  fold: 7855,
  foldFull: [7855]
}, {
  code: 7856,
  lower: [],
  title: [],
  upper: [],
  fold: 7857,
  foldFull: [7857]
}, {
  code: 7858,
  lower: [],
  title: [],
  upper: [],
  fold: 7859,
  foldFull: [7859]
}, {
  code: 7860,
  lower: [],
  title: [],
  upper: [],
  fold: 7861,
  foldFull: [7861]
}, {
  code: 7862,
  lower: [],
  title: [],
  upper: [],
  fold: 7863,
  foldFull: [7863]
}, {
  code: 7864,
  lower: [],
  title: [],
  upper: [],
  fold: 7865,
  foldFull: [7865]
}, {
  code: 7866,
  lower: [],
  title: [],
  upper: [],
  fold: 7867,
  foldFull: [7867]
}, {
  code: 7868,
  lower: [],
  title: [],
  upper: [],
  fold: 7869,
  foldFull: [7869]
}, {
  code: 7870,
  lower: [],
  title: [],
  upper: [],
  fold: 7871,
  foldFull: [7871]
}, {
  code: 7872,
  lower: [],
  title: [],
  upper: [],
  fold: 7873,
  foldFull: [7873]
}, {
  code: 7874,
  lower: [],
  title: [],
  upper: [],
  fold: 7875,
  foldFull: [7875]
}, {
  code: 7876,
  lower: [],
  title: [],
  upper: [],
  fold: 7877,
  foldFull: [7877]
}, {
  code: 7878,
  lower: [],
  title: [],
  upper: [],
  fold: 7879,
  foldFull: [7879]
}, {
  code: 7880,
  lower: [],
  title: [],
  upper: [],
  fold: 7881,
  foldFull: [7881]
}, {
  code: 7882,
  lower: [],
  title: [],
  upper: [],
  fold: 7883,
  foldFull: [7883]
}, {
  code: 7884,
  lower: [],
  title: [],
  upper: [],
  fold: 7885,
  foldFull: [7885]
}, {
  code: 7886,
  lower: [],
  title: [],
  upper: [],
  fold: 7887,
  foldFull: [7887]
}, {
  code: 7888,
  lower: [],
  title: [],
  upper: [],
  fold: 7889,
  foldFull: [7889]
}, {
  code: 7890,
  lower: [],
  title: [],
  upper: [],
  fold: 7891,
  foldFull: [7891]
}, {
  code: 7892,
  lower: [],
  title: [],
  upper: [],
  fold: 7893,
  foldFull: [7893]
}, {
  code: 7894,
  lower: [],
  title: [],
  upper: [],
  fold: 7895,
  foldFull: [7895]
}, {
  code: 7896,
  lower: [],
  title: [],
  upper: [],
  fold: 7897,
  foldFull: [7897]
}, {
  code: 7898,
  lower: [],
  title: [],
  upper: [],
  fold: 7899,
  foldFull: [7899]
}, {
  code: 7900,
  lower: [],
  title: [],
  upper: [],
  fold: 7901,
  foldFull: [7901]
}, {
  code: 7902,
  lower: [],
  title: [],
  upper: [],
  fold: 7903,
  foldFull: [7903]
}, {
  code: 7904,
  lower: [],
  title: [],
  upper: [],
  fold: 7905,
  foldFull: [7905]
}, {
  code: 7906,
  lower: [],
  title: [],
  upper: [],
  fold: 7907,
  foldFull: [7907]
}, {
  code: 7908,
  lower: [],
  title: [],
  upper: [],
  fold: 7909,
  foldFull: [7909]
}, {
  code: 7910,
  lower: [],
  title: [],
  upper: [],
  fold: 7911,
  foldFull: [7911]
}, {
  code: 7912,
  lower: [],
  title: [],
  upper: [],
  fold: 7913,
  foldFull: [7913]
}, {
  code: 7914,
  lower: [],
  title: [],
  upper: [],
  fold: 7915,
  foldFull: [7915]
}, {
  code: 7916,
  lower: [],
  title: [],
  upper: [],
  fold: 7917,
  foldFull: [7917]
}, {
  code: 7918,
  lower: [],
  title: [],
  upper: [],
  fold: 7919,
  foldFull: [7919]
}, {
  code: 7920,
  lower: [],
  title: [],
  upper: [],
  fold: 7921,
  foldFull: [7921]
}, {
  code: 7922,
  lower: [],
  title: [],
  upper: [],
  fold: 7923,
  foldFull: [7923]
}, {
  code: 7924,
  lower: [],
  title: [],
  upper: [],
  fold: 7925,
  foldFull: [7925]
}, {
  code: 7926,
  lower: [],
  title: [],
  upper: [],
  fold: 7927,
  foldFull: [7927]
}, {
  code: 7928,
  lower: [],
  title: [],
  upper: [],
  fold: 7929,
  foldFull: [7929]
}, {
  code: 7930,
  lower: [],
  title: [],
  upper: [],
  fold: 7931,
  foldFull: [7931]
}, {
  code: 7932,
  lower: [],
  title: [],
  upper: [],
  fold: 7933,
  foldFull: [7933]
}, {
  code: 7934,
  lower: [],
  title: [],
  upper: [],
  fold: 7935,
  foldFull: [7935]
}, {
  code: 7944,
  lower: [],
  title: [],
  upper: [],
  fold: 7936,
  foldFull: [7936]
}, {
  code: 7945,
  lower: [],
  title: [],
  upper: [],
  fold: 7937,
  foldFull: [7937]
}, {
  code: 7946,
  lower: [],
  title: [],
  upper: [],
  fold: 7938,
  foldFull: [7938]
}, {
  code: 7947,
  lower: [],
  title: [],
  upper: [],
  fold: 7939,
  foldFull: [7939]
}, {
  code: 7948,
  lower: [],
  title: [],
  upper: [],
  fold: 7940,
  foldFull: [7940]
}, {
  code: 7949,
  lower: [],
  title: [],
  upper: [],
  fold: 7941,
  foldFull: [7941]
}, {
  code: 7950,
  lower: [],
  title: [],
  upper: [],
  fold: 7942,
  foldFull: [7942]
}, {
  code: 7951,
  lower: [],
  title: [],
  upper: [],
  fold: 7943,
  foldFull: [7943]
}, {
  code: 7960,
  lower: [],
  title: [],
  upper: [],
  fold: 7952,
  foldFull: [7952]
}, {
  code: 7961,
  lower: [],
  title: [],
  upper: [],
  fold: 7953,
  foldFull: [7953]
}, {
  code: 7962,
  lower: [],
  title: [],
  upper: [],
  fold: 7954,
  foldFull: [7954]
}, {
  code: 7963,
  lower: [],
  title: [],
  upper: [],
  fold: 7955,
  foldFull: [7955]
}, {
  code: 7964,
  lower: [],
  title: [],
  upper: [],
  fold: 7956,
  foldFull: [7956]
}, {
  code: 7965,
  lower: [],
  title: [],
  upper: [],
  fold: 7957,
  foldFull: [7957]
}, {
  code: 7976,
  lower: [],
  title: [],
  upper: [],
  fold: 7968,
  foldFull: [7968]
}, {
  code: 7977,
  lower: [],
  title: [],
  upper: [],
  fold: 7969,
  foldFull: [7969]
}, {
  code: 7978,
  lower: [],
  title: [],
  upper: [],
  fold: 7970,
  foldFull: [7970]
}, {
  code: 7979,
  lower: [],
  title: [],
  upper: [],
  fold: 7971,
  foldFull: [7971]
}, {
  code: 7980,
  lower: [],
  title: [],
  upper: [],
  fold: 7972,
  foldFull: [7972]
}, {
  code: 7981,
  lower: [],
  title: [],
  upper: [],
  fold: 7973,
  foldFull: [7973]
}, {
  code: 7982,
  lower: [],
  title: [],
  upper: [],
  fold: 7974,
  foldFull: [7974]
}, {
  code: 7983,
  lower: [],
  title: [],
  upper: [],
  fold: 7975,
  foldFull: [7975]
}, {
  code: 7992,
  lower: [],
  title: [],
  upper: [],
  fold: 7984,
  foldFull: [7984]
}, {
  code: 7993,
  lower: [],
  title: [],
  upper: [],
  fold: 7985,
  foldFull: [7985]
}, {
  code: 7994,
  lower: [],
  title: [],
  upper: [],
  fold: 7986,
  foldFull: [7986]
}, {
  code: 7995,
  lower: [],
  title: [],
  upper: [],
  fold: 7987,
  foldFull: [7987]
}, {
  code: 7996,
  lower: [],
  title: [],
  upper: [],
  fold: 7988,
  foldFull: [7988]
}, {
  code: 7997,
  lower: [],
  title: [],
  upper: [],
  fold: 7989,
  foldFull: [7989]
}, {
  code: 7998,
  lower: [],
  title: [],
  upper: [],
  fold: 7990,
  foldFull: [7990]
}, {
  code: 7999,
  lower: [],
  title: [],
  upper: [],
  fold: 7991,
  foldFull: [7991]
}, {
  code: 8008,
  lower: [],
  title: [],
  upper: [],
  fold: 8e3,
  foldFull: [8e3]
}, {
  code: 8009,
  lower: [],
  title: [],
  upper: [],
  fold: 8001,
  foldFull: [8001]
}, {
  code: 8010,
  lower: [],
  title: [],
  upper: [],
  fold: 8002,
  foldFull: [8002]
}, {
  code: 8011,
  lower: [],
  title: [],
  upper: [],
  fold: 8003,
  foldFull: [8003]
}, {
  code: 8012,
  lower: [],
  title: [],
  upper: [],
  fold: 8004,
  foldFull: [8004]
}, {
  code: 8013,
  lower: [],
  title: [],
  upper: [],
  fold: 8005,
  foldFull: [8005]
}, {
  code: 8016,
  lower: [8016],
  title: [933, 787],
  upper: [933, 787],
  fold: 0,
  foldFull: [965, 787]
}, {
  code: 8016,
  lower: [8016],
  title: [933, 787],
  upper: [933, 787],
  fold: 0,
  foldFull: [965, 787]
}, {
  code: 8018,
  lower: [8018],
  title: [933, 787, 768],
  upper: [933, 787, 768],
  fold: 0,
  foldFull: [965, 787, 768]
}, {
  code: 8018,
  lower: [8018],
  title: [933, 787, 768],
  upper: [933, 787, 768],
  fold: 0,
  foldFull: [965, 787, 768]
}, {
  code: 8020,
  lower: [8020],
  title: [933, 787, 769],
  upper: [933, 787, 769],
  fold: 0,
  foldFull: [965, 787, 769]
}, {
  code: 8020,
  lower: [8020],
  title: [933, 787, 769],
  upper: [933, 787, 769],
  fold: 0,
  foldFull: [965, 787, 769]
}, {
  code: 8022,
  lower: [8022],
  title: [933, 787, 834],
  upper: [933, 787, 834],
  fold: 0,
  foldFull: [965, 787, 834]
}, {
  code: 8022,
  lower: [8022],
  title: [933, 787, 834],
  upper: [933, 787, 834],
  fold: 0,
  foldFull: [965, 787, 834]
}, {
  code: 8025,
  lower: [],
  title: [],
  upper: [],
  fold: 8017,
  foldFull: [8017]
}, {
  code: 8027,
  lower: [],
  title: [],
  upper: [],
  fold: 8019,
  foldFull: [8019]
}, {
  code: 8029,
  lower: [],
  title: [],
  upper: [],
  fold: 8021,
  foldFull: [8021]
}, {
  code: 8031,
  lower: [],
  title: [],
  upper: [],
  fold: 8023,
  foldFull: [8023]
}, {
  code: 8040,
  lower: [],
  title: [],
  upper: [],
  fold: 8032,
  foldFull: [8032]
}, {
  code: 8041,
  lower: [],
  title: [],
  upper: [],
  fold: 8033,
  foldFull: [8033]
}, {
  code: 8042,
  lower: [],
  title: [],
  upper: [],
  fold: 8034,
  foldFull: [8034]
}, {
  code: 8043,
  lower: [],
  title: [],
  upper: [],
  fold: 8035,
  foldFull: [8035]
}, {
  code: 8044,
  lower: [],
  title: [],
  upper: [],
  fold: 8036,
  foldFull: [8036]
}, {
  code: 8045,
  lower: [],
  title: [],
  upper: [],
  fold: 8037,
  foldFull: [8037]
}, {
  code: 8046,
  lower: [],
  title: [],
  upper: [],
  fold: 8038,
  foldFull: [8038]
}, {
  code: 8047,
  lower: [],
  title: [],
  upper: [],
  fold: 8039,
  foldFull: [8039]
}, {
  code: 8064,
  lower: [8064],
  title: [8072],
  upper: [7944, 921],
  fold: 0,
  foldFull: [7936, 953]
}, {
  code: 8064,
  lower: [8064],
  title: [8072],
  upper: [7944, 921],
  fold: 0,
  foldFull: [7936, 953]
}, {
  code: 8065,
  lower: [8065],
  title: [8073],
  upper: [7945, 921],
  fold: 0,
  foldFull: [7937, 953]
}, {
  code: 8065,
  lower: [8065],
  title: [8073],
  upper: [7945, 921],
  fold: 0,
  foldFull: [7937, 953]
}, {
  code: 8066,
  lower: [8066],
  title: [8074],
  upper: [7946, 921],
  fold: 0,
  foldFull: [7938, 953]
}, {
  code: 8066,
  lower: [8066],
  title: [8074],
  upper: [7946, 921],
  fold: 0,
  foldFull: [7938, 953]
}, {
  code: 8067,
  lower: [8067],
  title: [8075],
  upper: [7947, 921],
  fold: 0,
  foldFull: [7939, 953]
}, {
  code: 8067,
  lower: [8067],
  title: [8075],
  upper: [7947, 921],
  fold: 0,
  foldFull: [7939, 953]
}, {
  code: 8068,
  lower: [8068],
  title: [8076],
  upper: [7948, 921],
  fold: 0,
  foldFull: [7940, 953]
}, {
  code: 8068,
  lower: [8068],
  title: [8076],
  upper: [7948, 921],
  fold: 0,
  foldFull: [7940, 953]
}, {
  code: 8069,
  lower: [8069],
  title: [8077],
  upper: [7949, 921],
  fold: 0,
  foldFull: [7941, 953]
}, {
  code: 8069,
  lower: [8069],
  title: [8077],
  upper: [7949, 921],
  fold: 0,
  foldFull: [7941, 953]
}, {
  code: 8070,
  lower: [8070],
  title: [8078],
  upper: [7950, 921],
  fold: 0,
  foldFull: [7942, 953]
}, {
  code: 8070,
  lower: [8070],
  title: [8078],
  upper: [7950, 921],
  fold: 0,
  foldFull: [7942, 953]
}, {
  code: 8071,
  lower: [8071],
  title: [8079],
  upper: [7951, 921],
  fold: 0,
  foldFull: [7943, 953]
}, {
  code: 8071,
  lower: [8071],
  title: [8079],
  upper: [7951, 921],
  fold: 0,
  foldFull: [7943, 953]
}, {
  code: 8072,
  lower: [8064],
  title: [8072],
  upper: [7944, 921],
  fold: 8064,
  foldFull: [7936, 953]
}, {
  code: 8072,
  lower: [8064],
  title: [8072],
  upper: [7944, 921],
  fold: 8064,
  foldFull: [7936, 953]
}, {
  code: 8073,
  lower: [8065],
  title: [8073],
  upper: [7945, 921],
  fold: 8065,
  foldFull: [7937, 953]
}, {
  code: 8073,
  lower: [8065],
  title: [8073],
  upper: [7945, 921],
  fold: 8065,
  foldFull: [7937, 953]
}, {
  code: 8074,
  lower: [8066],
  title: [8074],
  upper: [7946, 921],
  fold: 8066,
  foldFull: [7938, 953]
}, {
  code: 8074,
  lower: [8066],
  title: [8074],
  upper: [7946, 921],
  fold: 8066,
  foldFull: [7938, 953]
}, {
  code: 8075,
  lower: [8067],
  title: [8075],
  upper: [7947, 921],
  fold: 8067,
  foldFull: [7939, 953]
}, {
  code: 8075,
  lower: [8067],
  title: [8075],
  upper: [7947, 921],
  fold: 8067,
  foldFull: [7939, 953]
}, {
  code: 8076,
  lower: [8068],
  title: [8076],
  upper: [7948, 921],
  fold: 8068,
  foldFull: [7940, 953]
}, {
  code: 8076,
  lower: [8068],
  title: [8076],
  upper: [7948, 921],
  fold: 8068,
  foldFull: [7940, 953]
}, {
  code: 8077,
  lower: [8069],
  title: [8077],
  upper: [7949, 921],
  fold: 8069,
  foldFull: [7941, 953]
}, {
  code: 8077,
  lower: [8069],
  title: [8077],
  upper: [7949, 921],
  fold: 8069,
  foldFull: [7941, 953]
}, {
  code: 8078,
  lower: [8070],
  title: [8078],
  upper: [7950, 921],
  fold: 8070,
  foldFull: [7942, 953]
}, {
  code: 8078,
  lower: [8070],
  title: [8078],
  upper: [7950, 921],
  fold: 8070,
  foldFull: [7942, 953]
}, {
  code: 8079,
  lower: [8071],
  title: [8079],
  upper: [7951, 921],
  fold: 8071,
  foldFull: [7943, 953]
}, {
  code: 8079,
  lower: [8071],
  title: [8079],
  upper: [7951, 921],
  fold: 8071,
  foldFull: [7943, 953]
}, {
  code: 8080,
  lower: [8080],
  title: [8088],
  upper: [7976, 921],
  fold: 0,
  foldFull: [7968, 953]
}, {
  code: 8080,
  lower: [8080],
  title: [8088],
  upper: [7976, 921],
  fold: 0,
  foldFull: [7968, 953]
}, {
  code: 8081,
  lower: [8081],
  title: [8089],
  upper: [7977, 921],
  fold: 0,
  foldFull: [7969, 953]
}, {
  code: 8081,
  lower: [8081],
  title: [8089],
  upper: [7977, 921],
  fold: 0,
  foldFull: [7969, 953]
}, {
  code: 8082,
  lower: [8082],
  title: [8090],
  upper: [7978, 921],
  fold: 0,
  foldFull: [7970, 953]
}, {
  code: 8082,
  lower: [8082],
  title: [8090],
  upper: [7978, 921],
  fold: 0,
  foldFull: [7970, 953]
}, {
  code: 8083,
  lower: [8083],
  title: [8091],
  upper: [7979, 921],
  fold: 0,
  foldFull: [7971, 953]
}, {
  code: 8083,
  lower: [8083],
  title: [8091],
  upper: [7979, 921],
  fold: 0,
  foldFull: [7971, 953]
}, {
  code: 8084,
  lower: [8084],
  title: [8092],
  upper: [7980, 921],
  fold: 0,
  foldFull: [7972, 953]
}, {
  code: 8084,
  lower: [8084],
  title: [8092],
  upper: [7980, 921],
  fold: 0,
  foldFull: [7972, 953]
}, {
  code: 8085,
  lower: [8085],
  title: [8093],
  upper: [7981, 921],
  fold: 0,
  foldFull: [7973, 953]
}, {
  code: 8085,
  lower: [8085],
  title: [8093],
  upper: [7981, 921],
  fold: 0,
  foldFull: [7973, 953]
}, {
  code: 8086,
  lower: [8086],
  title: [8094],
  upper: [7982, 921],
  fold: 0,
  foldFull: [7974, 953]
}, {
  code: 8086,
  lower: [8086],
  title: [8094],
  upper: [7982, 921],
  fold: 0,
  foldFull: [7974, 953]
}, {
  code: 8087,
  lower: [8087],
  title: [8095],
  upper: [7983, 921],
  fold: 0,
  foldFull: [7975, 953]
}, {
  code: 8087,
  lower: [8087],
  title: [8095],
  upper: [7983, 921],
  fold: 0,
  foldFull: [7975, 953]
}, {
  code: 8088,
  lower: [8080],
  title: [8088],
  upper: [7976, 921],
  fold: 8080,
  foldFull: [7968, 953]
}, {
  code: 8088,
  lower: [8080],
  title: [8088],
  upper: [7976, 921],
  fold: 8080,
  foldFull: [7968, 953]
}, {
  code: 8089,
  lower: [8081],
  title: [8089],
  upper: [7977, 921],
  fold: 8081,
  foldFull: [7969, 953]
}, {
  code: 8089,
  lower: [8081],
  title: [8089],
  upper: [7977, 921],
  fold: 8081,
  foldFull: [7969, 953]
}, {
  code: 8090,
  lower: [8082],
  title: [8090],
  upper: [7978, 921],
  fold: 8082,
  foldFull: [7970, 953]
}, {
  code: 8090,
  lower: [8082],
  title: [8090],
  upper: [7978, 921],
  fold: 8082,
  foldFull: [7970, 953]
}, {
  code: 8091,
  lower: [8083],
  title: [8091],
  upper: [7979, 921],
  fold: 8083,
  foldFull: [7971, 953]
}, {
  code: 8091,
  lower: [8083],
  title: [8091],
  upper: [7979, 921],
  fold: 8083,
  foldFull: [7971, 953]
}, {
  code: 8092,
  lower: [8084],
  title: [8092],
  upper: [7980, 921],
  fold: 8084,
  foldFull: [7972, 953]
}, {
  code: 8092,
  lower: [8084],
  title: [8092],
  upper: [7980, 921],
  fold: 8084,
  foldFull: [7972, 953]
}, {
  code: 8093,
  lower: [8085],
  title: [8093],
  upper: [7981, 921],
  fold: 8085,
  foldFull: [7973, 953]
}, {
  code: 8093,
  lower: [8085],
  title: [8093],
  upper: [7981, 921],
  fold: 8085,
  foldFull: [7973, 953]
}, {
  code: 8094,
  lower: [8086],
  title: [8094],
  upper: [7982, 921],
  fold: 8086,
  foldFull: [7974, 953]
}, {
  code: 8094,
  lower: [8086],
  title: [8094],
  upper: [7982, 921],
  fold: 8086,
  foldFull: [7974, 953]
}, {
  code: 8095,
  lower: [8087],
  title: [8095],
  upper: [7983, 921],
  fold: 8087,
  foldFull: [7975, 953]
}, {
  code: 8095,
  lower: [8087],
  title: [8095],
  upper: [7983, 921],
  fold: 8087,
  foldFull: [7975, 953]
}, {
  code: 8096,
  lower: [8096],
  title: [8104],
  upper: [8040, 921],
  fold: 0,
  foldFull: [8032, 953]
}, {
  code: 8096,
  lower: [8096],
  title: [8104],
  upper: [8040, 921],
  fold: 0,
  foldFull: [8032, 953]
}, {
  code: 8097,
  lower: [8097],
  title: [8105],
  upper: [8041, 921],
  fold: 0,
  foldFull: [8033, 953]
}, {
  code: 8097,
  lower: [8097],
  title: [8105],
  upper: [8041, 921],
  fold: 0,
  foldFull: [8033, 953]
}, {
  code: 8098,
  lower: [8098],
  title: [8106],
  upper: [8042, 921],
  fold: 0,
  foldFull: [8034, 953]
}, {
  code: 8098,
  lower: [8098],
  title: [8106],
  upper: [8042, 921],
  fold: 0,
  foldFull: [8034, 953]
}, {
  code: 8099,
  lower: [8099],
  title: [8107],
  upper: [8043, 921],
  fold: 0,
  foldFull: [8035, 953]
}, {
  code: 8099,
  lower: [8099],
  title: [8107],
  upper: [8043, 921],
  fold: 0,
  foldFull: [8035, 953]
}, {
  code: 8100,
  lower: [8100],
  title: [8108],
  upper: [8044, 921],
  fold: 0,
  foldFull: [8036, 953]
}, {
  code: 8100,
  lower: [8100],
  title: [8108],
  upper: [8044, 921],
  fold: 0,
  foldFull: [8036, 953]
}, {
  code: 8101,
  lower: [8101],
  title: [8109],
  upper: [8045, 921],
  fold: 0,
  foldFull: [8037, 953]
}, {
  code: 8101,
  lower: [8101],
  title: [8109],
  upper: [8045, 921],
  fold: 0,
  foldFull: [8037, 953]
}, {
  code: 8102,
  lower: [8102],
  title: [8110],
  upper: [8046, 921],
  fold: 0,
  foldFull: [8038, 953]
}, {
  code: 8102,
  lower: [8102],
  title: [8110],
  upper: [8046, 921],
  fold: 0,
  foldFull: [8038, 953]
}, {
  code: 8103,
  lower: [8103],
  title: [8111],
  upper: [8047, 921],
  fold: 0,
  foldFull: [8039, 953]
}, {
  code: 8103,
  lower: [8103],
  title: [8111],
  upper: [8047, 921],
  fold: 0,
  foldFull: [8039, 953]
}, {
  code: 8104,
  lower: [8096],
  title: [8104],
  upper: [8040, 921],
  fold: 8096,
  foldFull: [8032, 953]
}, {
  code: 8104,
  lower: [8096],
  title: [8104],
  upper: [8040, 921],
  fold: 8096,
  foldFull: [8032, 953]
}, {
  code: 8105,
  lower: [8097],
  title: [8105],
  upper: [8041, 921],
  fold: 8097,
  foldFull: [8033, 953]
}, {
  code: 8105,
  lower: [8097],
  title: [8105],
  upper: [8041, 921],
  fold: 8097,
  foldFull: [8033, 953]
}, {
  code: 8106,
  lower: [8098],
  title: [8106],
  upper: [8042, 921],
  fold: 8098,
  foldFull: [8034, 953]
}, {
  code: 8106,
  lower: [8098],
  title: [8106],
  upper: [8042, 921],
  fold: 8098,
  foldFull: [8034, 953]
}, {
  code: 8107,
  lower: [8099],
  title: [8107],
  upper: [8043, 921],
  fold: 8099,
  foldFull: [8035, 953]
}, {
  code: 8107,
  lower: [8099],
  title: [8107],
  upper: [8043, 921],
  fold: 8099,
  foldFull: [8035, 953]
}, {
  code: 8108,
  lower: [8100],
  title: [8108],
  upper: [8044, 921],
  fold: 8100,
  foldFull: [8036, 953]
}, {
  code: 8108,
  lower: [8100],
  title: [8108],
  upper: [8044, 921],
  fold: 8100,
  foldFull: [8036, 953]
}, {
  code: 8109,
  lower: [8101],
  title: [8109],
  upper: [8045, 921],
  fold: 8101,
  foldFull: [8037, 953]
}, {
  code: 8109,
  lower: [8101],
  title: [8109],
  upper: [8045, 921],
  fold: 8101,
  foldFull: [8037, 953]
}, {
  code: 8110,
  lower: [8102],
  title: [8110],
  upper: [8046, 921],
  fold: 8102,
  foldFull: [8038, 953]
}, {
  code: 8110,
  lower: [8102],
  title: [8110],
  upper: [8046, 921],
  fold: 8102,
  foldFull: [8038, 953]
}, {
  code: 8111,
  lower: [8103],
  title: [8111],
  upper: [8047, 921],
  fold: 8103,
  foldFull: [8039, 953]
}, {
  code: 8111,
  lower: [8103],
  title: [8111],
  upper: [8047, 921],
  fold: 8103,
  foldFull: [8039, 953]
}, {
  code: 8114,
  lower: [8114],
  title: [8122, 837],
  upper: [8122, 921],
  fold: 0,
  foldFull: [8048, 953]
}, {
  code: 8114,
  lower: [8114],
  title: [8122, 837],
  upper: [8122, 921],
  fold: 0,
  foldFull: [8048, 953]
}, {
  code: 8115,
  lower: [8115],
  title: [8124],
  upper: [913, 921],
  fold: 0,
  foldFull: [945, 953]
}, {
  code: 8115,
  lower: [8115],
  title: [8124],
  upper: [913, 921],
  fold: 0,
  foldFull: [945, 953]
}, {
  code: 8116,
  lower: [8116],
  title: [902, 837],
  upper: [902, 921],
  fold: 0,
  foldFull: [940, 953]
}, {
  code: 8116,
  lower: [8116],
  title: [902, 837],
  upper: [902, 921],
  fold: 0,
  foldFull: [940, 953]
}, {
  code: 8118,
  lower: [8118],
  title: [913, 834],
  upper: [913, 834],
  fold: 0,
  foldFull: [945, 834]
}, {
  code: 8118,
  lower: [8118],
  title: [913, 834],
  upper: [913, 834],
  fold: 0,
  foldFull: [945, 834]
}, {
  code: 8119,
  lower: [8119],
  title: [913, 834, 837],
  upper: [913, 834, 921],
  fold: 0,
  foldFull: [945, 834, 953]
}, {
  code: 8119,
  lower: [8119],
  title: [913, 834, 837],
  upper: [913, 834, 921],
  fold: 0,
  foldFull: [945, 834, 953]
}, {
  code: 8120,
  lower: [],
  title: [],
  upper: [],
  fold: 8112,
  foldFull: [8112]
}, {
  code: 8121,
  lower: [],
  title: [],
  upper: [],
  fold: 8113,
  foldFull: [8113]
}, {
  code: 8122,
  lower: [],
  title: [],
  upper: [],
  fold: 8048,
  foldFull: [8048]
}, {
  code: 8123,
  lower: [],
  title: [],
  upper: [],
  fold: 8049,
  foldFull: [8049]
}, {
  code: 8124,
  lower: [8115],
  title: [8124],
  upper: [913, 921],
  fold: 8115,
  foldFull: [945, 953]
}, {
  code: 8124,
  lower: [8115],
  title: [8124],
  upper: [913, 921],
  fold: 8115,
  foldFull: [945, 953]
}, {
  code: 8126,
  lower: [],
  title: [],
  upper: [],
  fold: 953,
  foldFull: [953]
}, {
  code: 8130,
  lower: [8130],
  title: [8138, 837],
  upper: [8138, 921],
  fold: 0,
  foldFull: [8052, 953]
}, {
  code: 8130,
  lower: [8130],
  title: [8138, 837],
  upper: [8138, 921],
  fold: 0,
  foldFull: [8052, 953]
}, {
  code: 8131,
  lower: [8131],
  title: [8140],
  upper: [919, 921],
  fold: 0,
  foldFull: [951, 953]
}, {
  code: 8131,
  lower: [8131],
  title: [8140],
  upper: [919, 921],
  fold: 0,
  foldFull: [951, 953]
}, {
  code: 8132,
  lower: [8132],
  title: [905, 837],
  upper: [905, 921],
  fold: 0,
  foldFull: [942, 953]
}, {
  code: 8132,
  lower: [8132],
  title: [905, 837],
  upper: [905, 921],
  fold: 0,
  foldFull: [942, 953]
}, {
  code: 8134,
  lower: [8134],
  title: [919, 834],
  upper: [919, 834],
  fold: 0,
  foldFull: [951, 834]
}, {
  code: 8134,
  lower: [8134],
  title: [919, 834],
  upper: [919, 834],
  fold: 0,
  foldFull: [951, 834]
}, {
  code: 8135,
  lower: [8135],
  title: [919, 834, 837],
  upper: [919, 834, 921],
  fold: 0,
  foldFull: [951, 834, 953]
}, {
  code: 8135,
  lower: [8135],
  title: [919, 834, 837],
  upper: [919, 834, 921],
  fold: 0,
  foldFull: [951, 834, 953]
}, {
  code: 8136,
  lower: [],
  title: [],
  upper: [],
  fold: 8050,
  foldFull: [8050]
}, {
  code: 8137,
  lower: [],
  title: [],
  upper: [],
  fold: 8051,
  foldFull: [8051]
}, {
  code: 8138,
  lower: [],
  title: [],
  upper: [],
  fold: 8052,
  foldFull: [8052]
}, {
  code: 8139,
  lower: [],
  title: [],
  upper: [],
  fold: 8053,
  foldFull: [8053]
}, {
  code: 8140,
  lower: [8131],
  title: [8140],
  upper: [919, 921],
  fold: 8131,
  foldFull: [951, 953]
}, {
  code: 8140,
  lower: [8131],
  title: [8140],
  upper: [919, 921],
  fold: 8131,
  foldFull: [951, 953]
}, {
  code: 8146,
  lower: [8146],
  title: [921, 776, 768],
  upper: [921, 776, 768],
  fold: 0,
  foldFull: [953, 776, 768]
}, {
  code: 8146,
  lower: [8146],
  title: [921, 776, 768],
  upper: [921, 776, 768],
  fold: 0,
  foldFull: [953, 776, 768]
}, {
  code: 8147,
  lower: [8147],
  title: [921, 776, 769],
  upper: [921, 776, 769],
  fold: 0,
  foldFull: [953, 776, 769]
}, {
  code: 8147,
  lower: [8147],
  title: [921, 776, 769],
  upper: [921, 776, 769],
  fold: 0,
  foldFull: [953, 776, 769]
}, {
  code: 8150,
  lower: [8150],
  title: [921, 834],
  upper: [921, 834],
  fold: 0,
  foldFull: [953, 834]
}, {
  code: 8150,
  lower: [8150],
  title: [921, 834],
  upper: [921, 834],
  fold: 0,
  foldFull: [953, 834]
}, {
  code: 8151,
  lower: [8151],
  title: [921, 776, 834],
  upper: [921, 776, 834],
  fold: 0,
  foldFull: [953, 776, 834]
}, {
  code: 8151,
  lower: [8151],
  title: [921, 776, 834],
  upper: [921, 776, 834],
  fold: 0,
  foldFull: [953, 776, 834]
}, {
  code: 8152,
  lower: [],
  title: [],
  upper: [],
  fold: 8144,
  foldFull: [8144]
}, {
  code: 8153,
  lower: [],
  title: [],
  upper: [],
  fold: 8145,
  foldFull: [8145]
}, {
  code: 8154,
  lower: [],
  title: [],
  upper: [],
  fold: 8054,
  foldFull: [8054]
}, {
  code: 8155,
  lower: [],
  title: [],
  upper: [],
  fold: 8055,
  foldFull: [8055]
}, {
  code: 8162,
  lower: [8162],
  title: [933, 776, 768],
  upper: [933, 776, 768],
  fold: 0,
  foldFull: [965, 776, 768]
}, {
  code: 8162,
  lower: [8162],
  title: [933, 776, 768],
  upper: [933, 776, 768],
  fold: 0,
  foldFull: [965, 776, 768]
}, {
  code: 8163,
  lower: [8163],
  title: [933, 776, 769],
  upper: [933, 776, 769],
  fold: 0,
  foldFull: [965, 776, 769]
}, {
  code: 8163,
  lower: [8163],
  title: [933, 776, 769],
  upper: [933, 776, 769],
  fold: 0,
  foldFull: [965, 776, 769]
}, {
  code: 8164,
  lower: [8164],
  title: [929, 787],
  upper: [929, 787],
  fold: 0,
  foldFull: [961, 787]
}, {
  code: 8164,
  lower: [8164],
  title: [929, 787],
  upper: [929, 787],
  fold: 0,
  foldFull: [961, 787]
}, {
  code: 8166,
  lower: [8166],
  title: [933, 834],
  upper: [933, 834],
  fold: 0,
  foldFull: [965, 834]
}, {
  code: 8166,
  lower: [8166],
  title: [933, 834],
  upper: [933, 834],
  fold: 0,
  foldFull: [965, 834]
}, {
  code: 8167,
  lower: [8167],
  title: [933, 776, 834],
  upper: [933, 776, 834],
  fold: 0,
  foldFull: [965, 776, 834]
}, {
  code: 8167,
  lower: [8167],
  title: [933, 776, 834],
  upper: [933, 776, 834],
  fold: 0,
  foldFull: [965, 776, 834]
}, {
  code: 8168,
  lower: [],
  title: [],
  upper: [],
  fold: 8160,
  foldFull: [8160]
}, {
  code: 8169,
  lower: [],
  title: [],
  upper: [],
  fold: 8161,
  foldFull: [8161]
}, {
  code: 8170,
  lower: [],
  title: [],
  upper: [],
  fold: 8058,
  foldFull: [8058]
}, {
  code: 8171,
  lower: [],
  title: [],
  upper: [],
  fold: 8059,
  foldFull: [8059]
}, {
  code: 8172,
  lower: [],
  title: [],
  upper: [],
  fold: 8165,
  foldFull: [8165]
}, {
  code: 8178,
  lower: [8178],
  title: [8186, 837],
  upper: [8186, 921],
  fold: 0,
  foldFull: [8060, 953]
}, {
  code: 8178,
  lower: [8178],
  title: [8186, 837],
  upper: [8186, 921],
  fold: 0,
  foldFull: [8060, 953]
}, {
  code: 8179,
  lower: [8179],
  title: [8188],
  upper: [937, 921],
  fold: 0,
  foldFull: [969, 953]
}, {
  code: 8179,
  lower: [8179],
  title: [8188],
  upper: [937, 921],
  fold: 0,
  foldFull: [969, 953]
}, {
  code: 8180,
  lower: [8180],
  title: [911, 837],
  upper: [911, 921],
  fold: 0,
  foldFull: [974, 953]
}, {
  code: 8180,
  lower: [8180],
  title: [911, 837],
  upper: [911, 921],
  fold: 0,
  foldFull: [974, 953]
}, {
  code: 8182,
  lower: [8182],
  title: [937, 834],
  upper: [937, 834],
  fold: 0,
  foldFull: [969, 834]
}, {
  code: 8182,
  lower: [8182],
  title: [937, 834],
  upper: [937, 834],
  fold: 0,
  foldFull: [969, 834]
}, {
  code: 8183,
  lower: [8183],
  title: [937, 834, 837],
  upper: [937, 834, 921],
  fold: 0,
  foldFull: [969, 834, 953]
}, {
  code: 8183,
  lower: [8183],
  title: [937, 834, 837],
  upper: [937, 834, 921],
  fold: 0,
  foldFull: [969, 834, 953]
}, {
  code: 8184,
  lower: [],
  title: [],
  upper: [],
  fold: 8056,
  foldFull: [8056]
}, {
  code: 8185,
  lower: [],
  title: [],
  upper: [],
  fold: 8057,
  foldFull: [8057]
}, {
  code: 8186,
  lower: [],
  title: [],
  upper: [],
  fold: 8060,
  foldFull: [8060]
}, {
  code: 8187,
  lower: [],
  title: [],
  upper: [],
  fold: 8061,
  foldFull: [8061]
}, {
  code: 8188,
  lower: [8179],
  title: [8188],
  upper: [937, 921],
  fold: 8179,
  foldFull: [969, 953]
}, {
  code: 8188,
  lower: [8179],
  title: [8188],
  upper: [937, 921],
  fold: 8179,
  foldFull: [969, 953]
}, {
  code: 8486,
  lower: [],
  title: [],
  upper: [],
  fold: 969,
  foldFull: [969]
}, {
  code: 8490,
  lower: [],
  title: [],
  upper: [],
  fold: 107,
  foldFull: [107]
}, {
  code: 8491,
  lower: [],
  title: [],
  upper: [],
  fold: 229,
  foldFull: [229]
}, {
  code: 8498,
  lower: [],
  title: [],
  upper: [],
  fold: 8526,
  foldFull: [8526]
}, {
  code: 8544,
  lower: [],
  title: [],
  upper: [],
  fold: 8560,
  foldFull: [8560]
}, {
  code: 8545,
  lower: [],
  title: [],
  upper: [],
  fold: 8561,
  foldFull: [8561]
}, {
  code: 8546,
  lower: [],
  title: [],
  upper: [],
  fold: 8562,
  foldFull: [8562]
}, {
  code: 8547,
  lower: [],
  title: [],
  upper: [],
  fold: 8563,
  foldFull: [8563]
}, {
  code: 8548,
  lower: [],
  title: [],
  upper: [],
  fold: 8564,
  foldFull: [8564]
}, {
  code: 8549,
  lower: [],
  title: [],
  upper: [],
  fold: 8565,
  foldFull: [8565]
}, {
  code: 8550,
  lower: [],
  title: [],
  upper: [],
  fold: 8566,
  foldFull: [8566]
}, {
  code: 8551,
  lower: [],
  title: [],
  upper: [],
  fold: 8567,
  foldFull: [8567]
}, {
  code: 8552,
  lower: [],
  title: [],
  upper: [],
  fold: 8568,
  foldFull: [8568]
}, {
  code: 8553,
  lower: [],
  title: [],
  upper: [],
  fold: 8569,
  foldFull: [8569]
}, {
  code: 8554,
  lower: [],
  title: [],
  upper: [],
  fold: 8570,
  foldFull: [8570]
}, {
  code: 8555,
  lower: [],
  title: [],
  upper: [],
  fold: 8571,
  foldFull: [8571]
}, {
  code: 8556,
  lower: [],
  title: [],
  upper: [],
  fold: 8572,
  foldFull: [8572]
}, {
  code: 8557,
  lower: [],
  title: [],
  upper: [],
  fold: 8573,
  foldFull: [8573]
}, {
  code: 8558,
  lower: [],
  title: [],
  upper: [],
  fold: 8574,
  foldFull: [8574]
}, {
  code: 8559,
  lower: [],
  title: [],
  upper: [],
  fold: 8575,
  foldFull: [8575]
}, {
  code: 8579,
  lower: [],
  title: [],
  upper: [],
  fold: 8580,
  foldFull: [8580]
}, {
  code: 9398,
  lower: [],
  title: [],
  upper: [],
  fold: 9424,
  foldFull: [9424]
}, {
  code: 9399,
  lower: [],
  title: [],
  upper: [],
  fold: 9425,
  foldFull: [9425]
}, {
  code: 9400,
  lower: [],
  title: [],
  upper: [],
  fold: 9426,
  foldFull: [9426]
}, {
  code: 9401,
  lower: [],
  title: [],
  upper: [],
  fold: 9427,
  foldFull: [9427]
}, {
  code: 9402,
  lower: [],
  title: [],
  upper: [],
  fold: 9428,
  foldFull: [9428]
}, {
  code: 9403,
  lower: [],
  title: [],
  upper: [],
  fold: 9429,
  foldFull: [9429]
}, {
  code: 9404,
  lower: [],
  title: [],
  upper: [],
  fold: 9430,
  foldFull: [9430]
}, {
  code: 9405,
  lower: [],
  title: [],
  upper: [],
  fold: 9431,
  foldFull: [9431]
}, {
  code: 9406,
  lower: [],
  title: [],
  upper: [],
  fold: 9432,
  foldFull: [9432]
}, {
  code: 9407,
  lower: [],
  title: [],
  upper: [],
  fold: 9433,
  foldFull: [9433]
}, {
  code: 9408,
  lower: [],
  title: [],
  upper: [],
  fold: 9434,
  foldFull: [9434]
}, {
  code: 9409,
  lower: [],
  title: [],
  upper: [],
  fold: 9435,
  foldFull: [9435]
}, {
  code: 9410,
  lower: [],
  title: [],
  upper: [],
  fold: 9436,
  foldFull: [9436]
}, {
  code: 9411,
  lower: [],
  title: [],
  upper: [],
  fold: 9437,
  foldFull: [9437]
}, {
  code: 9412,
  lower: [],
  title: [],
  upper: [],
  fold: 9438,
  foldFull: [9438]
}, {
  code: 9413,
  lower: [],
  title: [],
  upper: [],
  fold: 9439,
  foldFull: [9439]
}, {
  code: 9414,
  lower: [],
  title: [],
  upper: [],
  fold: 9440,
  foldFull: [9440]
}, {
  code: 9415,
  lower: [],
  title: [],
  upper: [],
  fold: 9441,
  foldFull: [9441]
}, {
  code: 9416,
  lower: [],
  title: [],
  upper: [],
  fold: 9442,
  foldFull: [9442]
}, {
  code: 9417,
  lower: [],
  title: [],
  upper: [],
  fold: 9443,
  foldFull: [9443]
}, {
  code: 9418,
  lower: [],
  title: [],
  upper: [],
  fold: 9444,
  foldFull: [9444]
}, {
  code: 9419,
  lower: [],
  title: [],
  upper: [],
  fold: 9445,
  foldFull: [9445]
}, {
  code: 9420,
  lower: [],
  title: [],
  upper: [],
  fold: 9446,
  foldFull: [9446]
}, {
  code: 9421,
  lower: [],
  title: [],
  upper: [],
  fold: 9447,
  foldFull: [9447]
}, {
  code: 9422,
  lower: [],
  title: [],
  upper: [],
  fold: 9448,
  foldFull: [9448]
}, {
  code: 9423,
  lower: [],
  title: [],
  upper: [],
  fold: 9449,
  foldFull: [9449]
}, {
  code: 11264,
  lower: [],
  title: [],
  upper: [],
  fold: 11312,
  foldFull: [11312]
}, {
  code: 11265,
  lower: [],
  title: [],
  upper: [],
  fold: 11313,
  foldFull: [11313]
}, {
  code: 11266,
  lower: [],
  title: [],
  upper: [],
  fold: 11314,
  foldFull: [11314]
}, {
  code: 11267,
  lower: [],
  title: [],
  upper: [],
  fold: 11315,
  foldFull: [11315]
}, {
  code: 11268,
  lower: [],
  title: [],
  upper: [],
  fold: 11316,
  foldFull: [11316]
}, {
  code: 11269,
  lower: [],
  title: [],
  upper: [],
  fold: 11317,
  foldFull: [11317]
}, {
  code: 11270,
  lower: [],
  title: [],
  upper: [],
  fold: 11318,
  foldFull: [11318]
}, {
  code: 11271,
  lower: [],
  title: [],
  upper: [],
  fold: 11319,
  foldFull: [11319]
}, {
  code: 11272,
  lower: [],
  title: [],
  upper: [],
  fold: 11320,
  foldFull: [11320]
}, {
  code: 11273,
  lower: [],
  title: [],
  upper: [],
  fold: 11321,
  foldFull: [11321]
}, {
  code: 11274,
  lower: [],
  title: [],
  upper: [],
  fold: 11322,
  foldFull: [11322]
}, {
  code: 11275,
  lower: [],
  title: [],
  upper: [],
  fold: 11323,
  foldFull: [11323]
}, {
  code: 11276,
  lower: [],
  title: [],
  upper: [],
  fold: 11324,
  foldFull: [11324]
}, {
  code: 11277,
  lower: [],
  title: [],
  upper: [],
  fold: 11325,
  foldFull: [11325]
}, {
  code: 11278,
  lower: [],
  title: [],
  upper: [],
  fold: 11326,
  foldFull: [11326]
}, {
  code: 11279,
  lower: [],
  title: [],
  upper: [],
  fold: 11327,
  foldFull: [11327]
}, {
  code: 11280,
  lower: [],
  title: [],
  upper: [],
  fold: 11328,
  foldFull: [11328]
}, {
  code: 11281,
  lower: [],
  title: [],
  upper: [],
  fold: 11329,
  foldFull: [11329]
}, {
  code: 11282,
  lower: [],
  title: [],
  upper: [],
  fold: 11330,
  foldFull: [11330]
}, {
  code: 11283,
  lower: [],
  title: [],
  upper: [],
  fold: 11331,
  foldFull: [11331]
}, {
  code: 11284,
  lower: [],
  title: [],
  upper: [],
  fold: 11332,
  foldFull: [11332]
}, {
  code: 11285,
  lower: [],
  title: [],
  upper: [],
  fold: 11333,
  foldFull: [11333]
}, {
  code: 11286,
  lower: [],
  title: [],
  upper: [],
  fold: 11334,
  foldFull: [11334]
}, {
  code: 11287,
  lower: [],
  title: [],
  upper: [],
  fold: 11335,
  foldFull: [11335]
}, {
  code: 11288,
  lower: [],
  title: [],
  upper: [],
  fold: 11336,
  foldFull: [11336]
}, {
  code: 11289,
  lower: [],
  title: [],
  upper: [],
  fold: 11337,
  foldFull: [11337]
}, {
  code: 11290,
  lower: [],
  title: [],
  upper: [],
  fold: 11338,
  foldFull: [11338]
}, {
  code: 11291,
  lower: [],
  title: [],
  upper: [],
  fold: 11339,
  foldFull: [11339]
}, {
  code: 11292,
  lower: [],
  title: [],
  upper: [],
  fold: 11340,
  foldFull: [11340]
}, {
  code: 11293,
  lower: [],
  title: [],
  upper: [],
  fold: 11341,
  foldFull: [11341]
}, {
  code: 11294,
  lower: [],
  title: [],
  upper: [],
  fold: 11342,
  foldFull: [11342]
}, {
  code: 11295,
  lower: [],
  title: [],
  upper: [],
  fold: 11343,
  foldFull: [11343]
}, {
  code: 11296,
  lower: [],
  title: [],
  upper: [],
  fold: 11344,
  foldFull: [11344]
}, {
  code: 11297,
  lower: [],
  title: [],
  upper: [],
  fold: 11345,
  foldFull: [11345]
}, {
  code: 11298,
  lower: [],
  title: [],
  upper: [],
  fold: 11346,
  foldFull: [11346]
}, {
  code: 11299,
  lower: [],
  title: [],
  upper: [],
  fold: 11347,
  foldFull: [11347]
}, {
  code: 11300,
  lower: [],
  title: [],
  upper: [],
  fold: 11348,
  foldFull: [11348]
}, {
  code: 11301,
  lower: [],
  title: [],
  upper: [],
  fold: 11349,
  foldFull: [11349]
}, {
  code: 11302,
  lower: [],
  title: [],
  upper: [],
  fold: 11350,
  foldFull: [11350]
}, {
  code: 11303,
  lower: [],
  title: [],
  upper: [],
  fold: 11351,
  foldFull: [11351]
}, {
  code: 11304,
  lower: [],
  title: [],
  upper: [],
  fold: 11352,
  foldFull: [11352]
}, {
  code: 11305,
  lower: [],
  title: [],
  upper: [],
  fold: 11353,
  foldFull: [11353]
}, {
  code: 11306,
  lower: [],
  title: [],
  upper: [],
  fold: 11354,
  foldFull: [11354]
}, {
  code: 11307,
  lower: [],
  title: [],
  upper: [],
  fold: 11355,
  foldFull: [11355]
}, {
  code: 11308,
  lower: [],
  title: [],
  upper: [],
  fold: 11356,
  foldFull: [11356]
}, {
  code: 11309,
  lower: [],
  title: [],
  upper: [],
  fold: 11357,
  foldFull: [11357]
}, {
  code: 11310,
  lower: [],
  title: [],
  upper: [],
  fold: 11358,
  foldFull: [11358]
}, {
  code: 11360,
  lower: [],
  title: [],
  upper: [],
  fold: 11361,
  foldFull: [11361]
}, {
  code: 11362,
  lower: [],
  title: [],
  upper: [],
  fold: 619,
  foldFull: [619]
}, {
  code: 11363,
  lower: [],
  title: [],
  upper: [],
  fold: 7549,
  foldFull: [7549]
}, {
  code: 11364,
  lower: [],
  title: [],
  upper: [],
  fold: 637,
  foldFull: [637]
}, {
  code: 11367,
  lower: [],
  title: [],
  upper: [],
  fold: 11368,
  foldFull: [11368]
}, {
  code: 11369,
  lower: [],
  title: [],
  upper: [],
  fold: 11370,
  foldFull: [11370]
}, {
  code: 11371,
  lower: [],
  title: [],
  upper: [],
  fold: 11372,
  foldFull: [11372]
}, {
  code: 11373,
  lower: [],
  title: [],
  upper: [],
  fold: 593,
  foldFull: [593]
}, {
  code: 11374,
  lower: [],
  title: [],
  upper: [],
  fold: 625,
  foldFull: [625]
}, {
  code: 11375,
  lower: [],
  title: [],
  upper: [],
  fold: 592,
  foldFull: [592]
}, {
  code: 11376,
  lower: [],
  title: [],
  upper: [],
  fold: 594,
  foldFull: [594]
}, {
  code: 11378,
  lower: [],
  title: [],
  upper: [],
  fold: 11379,
  foldFull: [11379]
}, {
  code: 11381,
  lower: [],
  title: [],
  upper: [],
  fold: 11382,
  foldFull: [11382]
}, {
  code: 11390,
  lower: [],
  title: [],
  upper: [],
  fold: 575,
  foldFull: [575]
}, {
  code: 11391,
  lower: [],
  title: [],
  upper: [],
  fold: 576,
  foldFull: [576]
}, {
  code: 11392,
  lower: [],
  title: [],
  upper: [],
  fold: 11393,
  foldFull: [11393]
}, {
  code: 11394,
  lower: [],
  title: [],
  upper: [],
  fold: 11395,
  foldFull: [11395]
}, {
  code: 11396,
  lower: [],
  title: [],
  upper: [],
  fold: 11397,
  foldFull: [11397]
}, {
  code: 11398,
  lower: [],
  title: [],
  upper: [],
  fold: 11399,
  foldFull: [11399]
}, {
  code: 11400,
  lower: [],
  title: [],
  upper: [],
  fold: 11401,
  foldFull: [11401]
}, {
  code: 11402,
  lower: [],
  title: [],
  upper: [],
  fold: 11403,
  foldFull: [11403]
}, {
  code: 11404,
  lower: [],
  title: [],
  upper: [],
  fold: 11405,
  foldFull: [11405]
}, {
  code: 11406,
  lower: [],
  title: [],
  upper: [],
  fold: 11407,
  foldFull: [11407]
}, {
  code: 11408,
  lower: [],
  title: [],
  upper: [],
  fold: 11409,
  foldFull: [11409]
}, {
  code: 11410,
  lower: [],
  title: [],
  upper: [],
  fold: 11411,
  foldFull: [11411]
}, {
  code: 11412,
  lower: [],
  title: [],
  upper: [],
  fold: 11413,
  foldFull: [11413]
}, {
  code: 11414,
  lower: [],
  title: [],
  upper: [],
  fold: 11415,
  foldFull: [11415]
}, {
  code: 11416,
  lower: [],
  title: [],
  upper: [],
  fold: 11417,
  foldFull: [11417]
}, {
  code: 11418,
  lower: [],
  title: [],
  upper: [],
  fold: 11419,
  foldFull: [11419]
}, {
  code: 11420,
  lower: [],
  title: [],
  upper: [],
  fold: 11421,
  foldFull: [11421]
}, {
  code: 11422,
  lower: [],
  title: [],
  upper: [],
  fold: 11423,
  foldFull: [11423]
}, {
  code: 11424,
  lower: [],
  title: [],
  upper: [],
  fold: 11425,
  foldFull: [11425]
}, {
  code: 11426,
  lower: [],
  title: [],
  upper: [],
  fold: 11427,
  foldFull: [11427]
}, {
  code: 11428,
  lower: [],
  title: [],
  upper: [],
  fold: 11429,
  foldFull: [11429]
}, {
  code: 11430,
  lower: [],
  title: [],
  upper: [],
  fold: 11431,
  foldFull: [11431]
}, {
  code: 11432,
  lower: [],
  title: [],
  upper: [],
  fold: 11433,
  foldFull: [11433]
}, {
  code: 11434,
  lower: [],
  title: [],
  upper: [],
  fold: 11435,
  foldFull: [11435]
}, {
  code: 11436,
  lower: [],
  title: [],
  upper: [],
  fold: 11437,
  foldFull: [11437]
}, {
  code: 11438,
  lower: [],
  title: [],
  upper: [],
  fold: 11439,
  foldFull: [11439]
}, {
  code: 11440,
  lower: [],
  title: [],
  upper: [],
  fold: 11441,
  foldFull: [11441]
}, {
  code: 11442,
  lower: [],
  title: [],
  upper: [],
  fold: 11443,
  foldFull: [11443]
}, {
  code: 11444,
  lower: [],
  title: [],
  upper: [],
  fold: 11445,
  foldFull: [11445]
}, {
  code: 11446,
  lower: [],
  title: [],
  upper: [],
  fold: 11447,
  foldFull: [11447]
}, {
  code: 11448,
  lower: [],
  title: [],
  upper: [],
  fold: 11449,
  foldFull: [11449]
}, {
  code: 11450,
  lower: [],
  title: [],
  upper: [],
  fold: 11451,
  foldFull: [11451]
}, {
  code: 11452,
  lower: [],
  title: [],
  upper: [],
  fold: 11453,
  foldFull: [11453]
}, {
  code: 11454,
  lower: [],
  title: [],
  upper: [],
  fold: 11455,
  foldFull: [11455]
}, {
  code: 11456,
  lower: [],
  title: [],
  upper: [],
  fold: 11457,
  foldFull: [11457]
}, {
  code: 11458,
  lower: [],
  title: [],
  upper: [],
  fold: 11459,
  foldFull: [11459]
}, {
  code: 11460,
  lower: [],
  title: [],
  upper: [],
  fold: 11461,
  foldFull: [11461]
}, {
  code: 11462,
  lower: [],
  title: [],
  upper: [],
  fold: 11463,
  foldFull: [11463]
}, {
  code: 11464,
  lower: [],
  title: [],
  upper: [],
  fold: 11465,
  foldFull: [11465]
}, {
  code: 11466,
  lower: [],
  title: [],
  upper: [],
  fold: 11467,
  foldFull: [11467]
}, {
  code: 11468,
  lower: [],
  title: [],
  upper: [],
  fold: 11469,
  foldFull: [11469]
}, {
  code: 11470,
  lower: [],
  title: [],
  upper: [],
  fold: 11471,
  foldFull: [11471]
}, {
  code: 11472,
  lower: [],
  title: [],
  upper: [],
  fold: 11473,
  foldFull: [11473]
}, {
  code: 11474,
  lower: [],
  title: [],
  upper: [],
  fold: 11475,
  foldFull: [11475]
}, {
  code: 11476,
  lower: [],
  title: [],
  upper: [],
  fold: 11477,
  foldFull: [11477]
}, {
  code: 11478,
  lower: [],
  title: [],
  upper: [],
  fold: 11479,
  foldFull: [11479]
}, {
  code: 11480,
  lower: [],
  title: [],
  upper: [],
  fold: 11481,
  foldFull: [11481]
}, {
  code: 11482,
  lower: [],
  title: [],
  upper: [],
  fold: 11483,
  foldFull: [11483]
}, {
  code: 11484,
  lower: [],
  title: [],
  upper: [],
  fold: 11485,
  foldFull: [11485]
}, {
  code: 11486,
  lower: [],
  title: [],
  upper: [],
  fold: 11487,
  foldFull: [11487]
}, {
  code: 11488,
  lower: [],
  title: [],
  upper: [],
  fold: 11489,
  foldFull: [11489]
}, {
  code: 11490,
  lower: [],
  title: [],
  upper: [],
  fold: 11491,
  foldFull: [11491]
}, {
  code: 11499,
  lower: [],
  title: [],
  upper: [],
  fold: 11500,
  foldFull: [11500]
}, {
  code: 11501,
  lower: [],
  title: [],
  upper: [],
  fold: 11502,
  foldFull: [11502]
}, {
  code: 11506,
  lower: [],
  title: [],
  upper: [],
  fold: 11507,
  foldFull: [11507]
}, {
  code: 42560,
  lower: [],
  title: [],
  upper: [],
  fold: 42561,
  foldFull: [42561]
}, {
  code: 42562,
  lower: [],
  title: [],
  upper: [],
  fold: 42563,
  foldFull: [42563]
}, {
  code: 42564,
  lower: [],
  title: [],
  upper: [],
  fold: 42565,
  foldFull: [42565]
}, {
  code: 42566,
  lower: [],
  title: [],
  upper: [],
  fold: 42567,
  foldFull: [42567]
}, {
  code: 42568,
  lower: [],
  title: [],
  upper: [],
  fold: 42569,
  foldFull: [42569]
}, {
  code: 42570,
  lower: [],
  title: [],
  upper: [],
  fold: 42571,
  foldFull: [42571]
}, {
  code: 42572,
  lower: [],
  title: [],
  upper: [],
  fold: 42573,
  foldFull: [42573]
}, {
  code: 42574,
  lower: [],
  title: [],
  upper: [],
  fold: 42575,
  foldFull: [42575]
}, {
  code: 42576,
  lower: [],
  title: [],
  upper: [],
  fold: 42577,
  foldFull: [42577]
}, {
  code: 42578,
  lower: [],
  title: [],
  upper: [],
  fold: 42579,
  foldFull: [42579]
}, {
  code: 42580,
  lower: [],
  title: [],
  upper: [],
  fold: 42581,
  foldFull: [42581]
}, {
  code: 42582,
  lower: [],
  title: [],
  upper: [],
  fold: 42583,
  foldFull: [42583]
}, {
  code: 42584,
  lower: [],
  title: [],
  upper: [],
  fold: 42585,
  foldFull: [42585]
}, {
  code: 42586,
  lower: [],
  title: [],
  upper: [],
  fold: 42587,
  foldFull: [42587]
}, {
  code: 42588,
  lower: [],
  title: [],
  upper: [],
  fold: 42589,
  foldFull: [42589]
}, {
  code: 42590,
  lower: [],
  title: [],
  upper: [],
  fold: 42591,
  foldFull: [42591]
}, {
  code: 42592,
  lower: [],
  title: [],
  upper: [],
  fold: 42593,
  foldFull: [42593]
}, {
  code: 42594,
  lower: [],
  title: [],
  upper: [],
  fold: 42595,
  foldFull: [42595]
}, {
  code: 42596,
  lower: [],
  title: [],
  upper: [],
  fold: 42597,
  foldFull: [42597]
}, {
  code: 42598,
  lower: [],
  title: [],
  upper: [],
  fold: 42599,
  foldFull: [42599]
}, {
  code: 42600,
  lower: [],
  title: [],
  upper: [],
  fold: 42601,
  foldFull: [42601]
}, {
  code: 42602,
  lower: [],
  title: [],
  upper: [],
  fold: 42603,
  foldFull: [42603]
}, {
  code: 42604,
  lower: [],
  title: [],
  upper: [],
  fold: 42605,
  foldFull: [42605]
}, {
  code: 42624,
  lower: [],
  title: [],
  upper: [],
  fold: 42625,
  foldFull: [42625]
}, {
  code: 42626,
  lower: [],
  title: [],
  upper: [],
  fold: 42627,
  foldFull: [42627]
}, {
  code: 42628,
  lower: [],
  title: [],
  upper: [],
  fold: 42629,
  foldFull: [42629]
}, {
  code: 42630,
  lower: [],
  title: [],
  upper: [],
  fold: 42631,
  foldFull: [42631]
}, {
  code: 42632,
  lower: [],
  title: [],
  upper: [],
  fold: 42633,
  foldFull: [42633]
}, {
  code: 42634,
  lower: [],
  title: [],
  upper: [],
  fold: 42635,
  foldFull: [42635]
}, {
  code: 42636,
  lower: [],
  title: [],
  upper: [],
  fold: 42637,
  foldFull: [42637]
}, {
  code: 42638,
  lower: [],
  title: [],
  upper: [],
  fold: 42639,
  foldFull: [42639]
}, {
  code: 42640,
  lower: [],
  title: [],
  upper: [],
  fold: 42641,
  foldFull: [42641]
}, {
  code: 42642,
  lower: [],
  title: [],
  upper: [],
  fold: 42643,
  foldFull: [42643]
}, {
  code: 42644,
  lower: [],
  title: [],
  upper: [],
  fold: 42645,
  foldFull: [42645]
}, {
  code: 42646,
  lower: [],
  title: [],
  upper: [],
  fold: 42647,
  foldFull: [42647]
}, {
  code: 42648,
  lower: [],
  title: [],
  upper: [],
  fold: 42649,
  foldFull: [42649]
}, {
  code: 42650,
  lower: [],
  title: [],
  upper: [],
  fold: 42651,
  foldFull: [42651]
}, {
  code: 42786,
  lower: [],
  title: [],
  upper: [],
  fold: 42787,
  foldFull: [42787]
}, {
  code: 42788,
  lower: [],
  title: [],
  upper: [],
  fold: 42789,
  foldFull: [42789]
}, {
  code: 42790,
  lower: [],
  title: [],
  upper: [],
  fold: 42791,
  foldFull: [42791]
}, {
  code: 42792,
  lower: [],
  title: [],
  upper: [],
  fold: 42793,
  foldFull: [42793]
}, {
  code: 42794,
  lower: [],
  title: [],
  upper: [],
  fold: 42795,
  foldFull: [42795]
}, {
  code: 42796,
  lower: [],
  title: [],
  upper: [],
  fold: 42797,
  foldFull: [42797]
}, {
  code: 42798,
  lower: [],
  title: [],
  upper: [],
  fold: 42799,
  foldFull: [42799]
}, {
  code: 42802,
  lower: [],
  title: [],
  upper: [],
  fold: 42803,
  foldFull: [42803]
}, {
  code: 42804,
  lower: [],
  title: [],
  upper: [],
  fold: 42805,
  foldFull: [42805]
}, {
  code: 42806,
  lower: [],
  title: [],
  upper: [],
  fold: 42807,
  foldFull: [42807]
}, {
  code: 42808,
  lower: [],
  title: [],
  upper: [],
  fold: 42809,
  foldFull: [42809]
}, {
  code: 42810,
  lower: [],
  title: [],
  upper: [],
  fold: 42811,
  foldFull: [42811]
}, {
  code: 42812,
  lower: [],
  title: [],
  upper: [],
  fold: 42813,
  foldFull: [42813]
}, {
  code: 42814,
  lower: [],
  title: [],
  upper: [],
  fold: 42815,
  foldFull: [42815]
}, {
  code: 42816,
  lower: [],
  title: [],
  upper: [],
  fold: 42817,
  foldFull: [42817]
}, {
  code: 42818,
  lower: [],
  title: [],
  upper: [],
  fold: 42819,
  foldFull: [42819]
}, {
  code: 42820,
  lower: [],
  title: [],
  upper: [],
  fold: 42821,
  foldFull: [42821]
}, {
  code: 42822,
  lower: [],
  title: [],
  upper: [],
  fold: 42823,
  foldFull: [42823]
}, {
  code: 42824,
  lower: [],
  title: [],
  upper: [],
  fold: 42825,
  foldFull: [42825]
}, {
  code: 42826,
  lower: [],
  title: [],
  upper: [],
  fold: 42827,
  foldFull: [42827]
}, {
  code: 42828,
  lower: [],
  title: [],
  upper: [],
  fold: 42829,
  foldFull: [42829]
}, {
  code: 42830,
  lower: [],
  title: [],
  upper: [],
  fold: 42831,
  foldFull: [42831]
}, {
  code: 42832,
  lower: [],
  title: [],
  upper: [],
  fold: 42833,
  foldFull: [42833]
}, {
  code: 42834,
  lower: [],
  title: [],
  upper: [],
  fold: 42835,
  foldFull: [42835]
}, {
  code: 42836,
  lower: [],
  title: [],
  upper: [],
  fold: 42837,
  foldFull: [42837]
}, {
  code: 42838,
  lower: [],
  title: [],
  upper: [],
  fold: 42839,
  foldFull: [42839]
}, {
  code: 42840,
  lower: [],
  title: [],
  upper: [],
  fold: 42841,
  foldFull: [42841]
}, {
  code: 42842,
  lower: [],
  title: [],
  upper: [],
  fold: 42843,
  foldFull: [42843]
}, {
  code: 42844,
  lower: [],
  title: [],
  upper: [],
  fold: 42845,
  foldFull: [42845]
}, {
  code: 42846,
  lower: [],
  title: [],
  upper: [],
  fold: 42847,
  foldFull: [42847]
}, {
  code: 42848,
  lower: [],
  title: [],
  upper: [],
  fold: 42849,
  foldFull: [42849]
}, {
  code: 42850,
  lower: [],
  title: [],
  upper: [],
  fold: 42851,
  foldFull: [42851]
}, {
  code: 42852,
  lower: [],
  title: [],
  upper: [],
  fold: 42853,
  foldFull: [42853]
}, {
  code: 42854,
  lower: [],
  title: [],
  upper: [],
  fold: 42855,
  foldFull: [42855]
}, {
  code: 42856,
  lower: [],
  title: [],
  upper: [],
  fold: 42857,
  foldFull: [42857]
}, {
  code: 42858,
  lower: [],
  title: [],
  upper: [],
  fold: 42859,
  foldFull: [42859]
}, {
  code: 42860,
  lower: [],
  title: [],
  upper: [],
  fold: 42861,
  foldFull: [42861]
}, {
  code: 42862,
  lower: [],
  title: [],
  upper: [],
  fold: 42863,
  foldFull: [42863]
}, {
  code: 42873,
  lower: [],
  title: [],
  upper: [],
  fold: 42874,
  foldFull: [42874]
}, {
  code: 42875,
  lower: [],
  title: [],
  upper: [],
  fold: 42876,
  foldFull: [42876]
}, {
  code: 42877,
  lower: [],
  title: [],
  upper: [],
  fold: 7545,
  foldFull: [7545]
}, {
  code: 42878,
  lower: [],
  title: [],
  upper: [],
  fold: 42879,
  foldFull: [42879]
}, {
  code: 42880,
  lower: [],
  title: [],
  upper: [],
  fold: 42881,
  foldFull: [42881]
}, {
  code: 42882,
  lower: [],
  title: [],
  upper: [],
  fold: 42883,
  foldFull: [42883]
}, {
  code: 42884,
  lower: [],
  title: [],
  upper: [],
  fold: 42885,
  foldFull: [42885]
}, {
  code: 42886,
  lower: [],
  title: [],
  upper: [],
  fold: 42887,
  foldFull: [42887]
}, {
  code: 42891,
  lower: [],
  title: [],
  upper: [],
  fold: 42892,
  foldFull: [42892]
}, {
  code: 42893,
  lower: [],
  title: [],
  upper: [],
  fold: 613,
  foldFull: [613]
}, {
  code: 42896,
  lower: [],
  title: [],
  upper: [],
  fold: 42897,
  foldFull: [42897]
}, {
  code: 42898,
  lower: [],
  title: [],
  upper: [],
  fold: 42899,
  foldFull: [42899]
}, {
  code: 42902,
  lower: [],
  title: [],
  upper: [],
  fold: 42903,
  foldFull: [42903]
}, {
  code: 42904,
  lower: [],
  title: [],
  upper: [],
  fold: 42905,
  foldFull: [42905]
}, {
  code: 42906,
  lower: [],
  title: [],
  upper: [],
  fold: 42907,
  foldFull: [42907]
}, {
  code: 42908,
  lower: [],
  title: [],
  upper: [],
  fold: 42909,
  foldFull: [42909]
}, {
  code: 42910,
  lower: [],
  title: [],
  upper: [],
  fold: 42911,
  foldFull: [42911]
}, {
  code: 42912,
  lower: [],
  title: [],
  upper: [],
  fold: 42913,
  foldFull: [42913]
}, {
  code: 42914,
  lower: [],
  title: [],
  upper: [],
  fold: 42915,
  foldFull: [42915]
}, {
  code: 42916,
  lower: [],
  title: [],
  upper: [],
  fold: 42917,
  foldFull: [42917]
}, {
  code: 42918,
  lower: [],
  title: [],
  upper: [],
  fold: 42919,
  foldFull: [42919]
}, {
  code: 42920,
  lower: [],
  title: [],
  upper: [],
  fold: 42921,
  foldFull: [42921]
}, {
  code: 42922,
  lower: [],
  title: [],
  upper: [],
  fold: 614,
  foldFull: [614]
}, {
  code: 42923,
  lower: [],
  title: [],
  upper: [],
  fold: 604,
  foldFull: [604]
}, {
  code: 42924,
  lower: [],
  title: [],
  upper: [],
  fold: 609,
  foldFull: [609]
}, {
  code: 42925,
  lower: [],
  title: [],
  upper: [],
  fold: 620,
  foldFull: [620]
}, {
  code: 42926,
  lower: [],
  title: [],
  upper: [],
  fold: 618,
  foldFull: [618]
}, {
  code: 42928,
  lower: [],
  title: [],
  upper: [],
  fold: 670,
  foldFull: [670]
}, {
  code: 42929,
  lower: [],
  title: [],
  upper: [],
  fold: 647,
  foldFull: [647]
}, {
  code: 42930,
  lower: [],
  title: [],
  upper: [],
  fold: 669,
  foldFull: [669]
}, {
  code: 42931,
  lower: [],
  title: [],
  upper: [],
  fold: 43859,
  foldFull: [43859]
}, {
  code: 42932,
  lower: [],
  title: [],
  upper: [],
  fold: 42933,
  foldFull: [42933]
}, {
  code: 42934,
  lower: [],
  title: [],
  upper: [],
  fold: 42935,
  foldFull: [42935]
}, {
  code: 42936,
  lower: [],
  title: [],
  upper: [],
  fold: 42937,
  foldFull: [42937]
}, {
  code: 42938,
  lower: [],
  title: [],
  upper: [],
  fold: 42939,
  foldFull: [42939]
}, {
  code: 42940,
  lower: [],
  title: [],
  upper: [],
  fold: 42941,
  foldFull: [42941]
}, {
  code: 42942,
  lower: [],
  title: [],
  upper: [],
  fold: 42943,
  foldFull: [42943]
}, {
  code: 42946,
  lower: [],
  title: [],
  upper: [],
  fold: 42947,
  foldFull: [42947]
}, {
  code: 42948,
  lower: [],
  title: [],
  upper: [],
  fold: 42900,
  foldFull: [42900]
}, {
  code: 42949,
  lower: [],
  title: [],
  upper: [],
  fold: 642,
  foldFull: [642]
}, {
  code: 42950,
  lower: [],
  title: [],
  upper: [],
  fold: 7566,
  foldFull: [7566]
}, {
  code: 42951,
  lower: [],
  title: [],
  upper: [],
  fold: 42952,
  foldFull: [42952]
}, {
  code: 42953,
  lower: [],
  title: [],
  upper: [],
  fold: 42954,
  foldFull: [42954]
}, {
  code: 42997,
  lower: [],
  title: [],
  upper: [],
  fold: 42998,
  foldFull: [42998]
}, {
  code: 43888,
  lower: [],
  title: [],
  upper: [],
  fold: 5024,
  foldFull: [5024]
}, {
  code: 43889,
  lower: [],
  title: [],
  upper: [],
  fold: 5025,
  foldFull: [5025]
}, {
  code: 43890,
  lower: [],
  title: [],
  upper: [],
  fold: 5026,
  foldFull: [5026]
}, {
  code: 43891,
  lower: [],
  title: [],
  upper: [],
  fold: 5027,
  foldFull: [5027]
}, {
  code: 43892,
  lower: [],
  title: [],
  upper: [],
  fold: 5028,
  foldFull: [5028]
}, {
  code: 43893,
  lower: [],
  title: [],
  upper: [],
  fold: 5029,
  foldFull: [5029]
}, {
  code: 43894,
  lower: [],
  title: [],
  upper: [],
  fold: 5030,
  foldFull: [5030]
}, {
  code: 43895,
  lower: [],
  title: [],
  upper: [],
  fold: 5031,
  foldFull: [5031]
}, {
  code: 43896,
  lower: [],
  title: [],
  upper: [],
  fold: 5032,
  foldFull: [5032]
}, {
  code: 43897,
  lower: [],
  title: [],
  upper: [],
  fold: 5033,
  foldFull: [5033]
}, {
  code: 43898,
  lower: [],
  title: [],
  upper: [],
  fold: 5034,
  foldFull: [5034]
}, {
  code: 43899,
  lower: [],
  title: [],
  upper: [],
  fold: 5035,
  foldFull: [5035]
}, {
  code: 43900,
  lower: [],
  title: [],
  upper: [],
  fold: 5036,
  foldFull: [5036]
}, {
  code: 43901,
  lower: [],
  title: [],
  upper: [],
  fold: 5037,
  foldFull: [5037]
}, {
  code: 43902,
  lower: [],
  title: [],
  upper: [],
  fold: 5038,
  foldFull: [5038]
}, {
  code: 43903,
  lower: [],
  title: [],
  upper: [],
  fold: 5039,
  foldFull: [5039]
}, {
  code: 43904,
  lower: [],
  title: [],
  upper: [],
  fold: 5040,
  foldFull: [5040]
}, {
  code: 43905,
  lower: [],
  title: [],
  upper: [],
  fold: 5041,
  foldFull: [5041]
}, {
  code: 43906,
  lower: [],
  title: [],
  upper: [],
  fold: 5042,
  foldFull: [5042]
}, {
  code: 43907,
  lower: [],
  title: [],
  upper: [],
  fold: 5043,
  foldFull: [5043]
}, {
  code: 43908,
  lower: [],
  title: [],
  upper: [],
  fold: 5044,
  foldFull: [5044]
}, {
  code: 43909,
  lower: [],
  title: [],
  upper: [],
  fold: 5045,
  foldFull: [5045]
}, {
  code: 43910,
  lower: [],
  title: [],
  upper: [],
  fold: 5046,
  foldFull: [5046]
}, {
  code: 43911,
  lower: [],
  title: [],
  upper: [],
  fold: 5047,
  foldFull: [5047]
}, {
  code: 43912,
  lower: [],
  title: [],
  upper: [],
  fold: 5048,
  foldFull: [5048]
}, {
  code: 43913,
  lower: [],
  title: [],
  upper: [],
  fold: 5049,
  foldFull: [5049]
}, {
  code: 43914,
  lower: [],
  title: [],
  upper: [],
  fold: 5050,
  foldFull: [5050]
}, {
  code: 43915,
  lower: [],
  title: [],
  upper: [],
  fold: 5051,
  foldFull: [5051]
}, {
  code: 43916,
  lower: [],
  title: [],
  upper: [],
  fold: 5052,
  foldFull: [5052]
}, {
  code: 43917,
  lower: [],
  title: [],
  upper: [],
  fold: 5053,
  foldFull: [5053]
}, {
  code: 43918,
  lower: [],
  title: [],
  upper: [],
  fold: 5054,
  foldFull: [5054]
}, {
  code: 43919,
  lower: [],
  title: [],
  upper: [],
  fold: 5055,
  foldFull: [5055]
}, {
  code: 43920,
  lower: [],
  title: [],
  upper: [],
  fold: 5056,
  foldFull: [5056]
}, {
  code: 43921,
  lower: [],
  title: [],
  upper: [],
  fold: 5057,
  foldFull: [5057]
}, {
  code: 43922,
  lower: [],
  title: [],
  upper: [],
  fold: 5058,
  foldFull: [5058]
}, {
  code: 43923,
  lower: [],
  title: [],
  upper: [],
  fold: 5059,
  foldFull: [5059]
}, {
  code: 43924,
  lower: [],
  title: [],
  upper: [],
  fold: 5060,
  foldFull: [5060]
}, {
  code: 43925,
  lower: [],
  title: [],
  upper: [],
  fold: 5061,
  foldFull: [5061]
}, {
  code: 43926,
  lower: [],
  title: [],
  upper: [],
  fold: 5062,
  foldFull: [5062]
}, {
  code: 43927,
  lower: [],
  title: [],
  upper: [],
  fold: 5063,
  foldFull: [5063]
}, {
  code: 43928,
  lower: [],
  title: [],
  upper: [],
  fold: 5064,
  foldFull: [5064]
}, {
  code: 43929,
  lower: [],
  title: [],
  upper: [],
  fold: 5065,
  foldFull: [5065]
}, {
  code: 43930,
  lower: [],
  title: [],
  upper: [],
  fold: 5066,
  foldFull: [5066]
}, {
  code: 43931,
  lower: [],
  title: [],
  upper: [],
  fold: 5067,
  foldFull: [5067]
}, {
  code: 43932,
  lower: [],
  title: [],
  upper: [],
  fold: 5068,
  foldFull: [5068]
}, {
  code: 43933,
  lower: [],
  title: [],
  upper: [],
  fold: 5069,
  foldFull: [5069]
}, {
  code: 43934,
  lower: [],
  title: [],
  upper: [],
  fold: 5070,
  foldFull: [5070]
}, {
  code: 43935,
  lower: [],
  title: [],
  upper: [],
  fold: 5071,
  foldFull: [5071]
}, {
  code: 43936,
  lower: [],
  title: [],
  upper: [],
  fold: 5072,
  foldFull: [5072]
}, {
  code: 43937,
  lower: [],
  title: [],
  upper: [],
  fold: 5073,
  foldFull: [5073]
}, {
  code: 43938,
  lower: [],
  title: [],
  upper: [],
  fold: 5074,
  foldFull: [5074]
}, {
  code: 43939,
  lower: [],
  title: [],
  upper: [],
  fold: 5075,
  foldFull: [5075]
}, {
  code: 43940,
  lower: [],
  title: [],
  upper: [],
  fold: 5076,
  foldFull: [5076]
}, {
  code: 43941,
  lower: [],
  title: [],
  upper: [],
  fold: 5077,
  foldFull: [5077]
}, {
  code: 43942,
  lower: [],
  title: [],
  upper: [],
  fold: 5078,
  foldFull: [5078]
}, {
  code: 43943,
  lower: [],
  title: [],
  upper: [],
  fold: 5079,
  foldFull: [5079]
}, {
  code: 43944,
  lower: [],
  title: [],
  upper: [],
  fold: 5080,
  foldFull: [5080]
}, {
  code: 43945,
  lower: [],
  title: [],
  upper: [],
  fold: 5081,
  foldFull: [5081]
}, {
  code: 43946,
  lower: [],
  title: [],
  upper: [],
  fold: 5082,
  foldFull: [5082]
}, {
  code: 43947,
  lower: [],
  title: [],
  upper: [],
  fold: 5083,
  foldFull: [5083]
}, {
  code: 43948,
  lower: [],
  title: [],
  upper: [],
  fold: 5084,
  foldFull: [5084]
}, {
  code: 43949,
  lower: [],
  title: [],
  upper: [],
  fold: 5085,
  foldFull: [5085]
}, {
  code: 43950,
  lower: [],
  title: [],
  upper: [],
  fold: 5086,
  foldFull: [5086]
}, {
  code: 43951,
  lower: [],
  title: [],
  upper: [],
  fold: 5087,
  foldFull: [5087]
}, {
  code: 43952,
  lower: [],
  title: [],
  upper: [],
  fold: 5088,
  foldFull: [5088]
}, {
  code: 43953,
  lower: [],
  title: [],
  upper: [],
  fold: 5089,
  foldFull: [5089]
}, {
  code: 43954,
  lower: [],
  title: [],
  upper: [],
  fold: 5090,
  foldFull: [5090]
}, {
  code: 43955,
  lower: [],
  title: [],
  upper: [],
  fold: 5091,
  foldFull: [5091]
}, {
  code: 43956,
  lower: [],
  title: [],
  upper: [],
  fold: 5092,
  foldFull: [5092]
}, {
  code: 43957,
  lower: [],
  title: [],
  upper: [],
  fold: 5093,
  foldFull: [5093]
}, {
  code: 43958,
  lower: [],
  title: [],
  upper: [],
  fold: 5094,
  foldFull: [5094]
}, {
  code: 43959,
  lower: [],
  title: [],
  upper: [],
  fold: 5095,
  foldFull: [5095]
}, {
  code: 43960,
  lower: [],
  title: [],
  upper: [],
  fold: 5096,
  foldFull: [5096]
}, {
  code: 43961,
  lower: [],
  title: [],
  upper: [],
  fold: 5097,
  foldFull: [5097]
}, {
  code: 43962,
  lower: [],
  title: [],
  upper: [],
  fold: 5098,
  foldFull: [5098]
}, {
  code: 43963,
  lower: [],
  title: [],
  upper: [],
  fold: 5099,
  foldFull: [5099]
}, {
  code: 43964,
  lower: [],
  title: [],
  upper: [],
  fold: 5100,
  foldFull: [5100]
}, {
  code: 43965,
  lower: [],
  title: [],
  upper: [],
  fold: 5101,
  foldFull: [5101]
}, {
  code: 43966,
  lower: [],
  title: [],
  upper: [],
  fold: 5102,
  foldFull: [5102]
}, {
  code: 43967,
  lower: [],
  title: [],
  upper: [],
  fold: 5103,
  foldFull: [5103]
}, {
  code: 64256,
  lower: [64256],
  title: [70, 102],
  upper: [70, 70],
  fold: 0,
  foldFull: [102, 102]
}, {
  code: 64256,
  lower: [64256],
  title: [70, 102],
  upper: [70, 70],
  fold: 0,
  foldFull: [102, 102]
}, {
  code: 64257,
  lower: [64257],
  title: [70, 105],
  upper: [70, 73],
  fold: 0,
  foldFull: [102, 105]
}, {
  code: 64257,
  lower: [64257],
  title: [70, 105],
  upper: [70, 73],
  fold: 0,
  foldFull: [102, 105]
}, {
  code: 64258,
  lower: [64258],
  title: [70, 108],
  upper: [70, 76],
  fold: 0,
  foldFull: [102, 108]
}, {
  code: 64258,
  lower: [64258],
  title: [70, 108],
  upper: [70, 76],
  fold: 0,
  foldFull: [102, 108]
}, {
  code: 64259,
  lower: [64259],
  title: [70, 102, 105],
  upper: [70, 70, 73],
  fold: 0,
  foldFull: [102, 102, 105]
}, {
  code: 64259,
  lower: [64259],
  title: [70, 102, 105],
  upper: [70, 70, 73],
  fold: 0,
  foldFull: [102, 102, 105]
}, {
  code: 64260,
  lower: [64260],
  title: [70, 102, 108],
  upper: [70, 70, 76],
  fold: 0,
  foldFull: [102, 102, 108]
}, {
  code: 64260,
  lower: [64260],
  title: [70, 102, 108],
  upper: [70, 70, 76],
  fold: 0,
  foldFull: [102, 102, 108]
}, {
  code: 64261,
  lower: [64261],
  title: [83, 116],
  upper: [83, 84],
  fold: 0,
  foldFull: [115, 116]
}, {
  code: 64261,
  lower: [64261],
  title: [83, 116],
  upper: [83, 84],
  fold: 0,
  foldFull: [115, 116]
}, {
  code: 64262,
  lower: [64262],
  title: [83, 116],
  upper: [83, 84],
  fold: 0,
  foldFull: [115, 116]
}, {
  code: 64262,
  lower: [64262],
  title: [83, 116],
  upper: [83, 84],
  fold: 0,
  foldFull: [115, 116]
}, {
  code: 64275,
  lower: [64275],
  title: [1348, 1398],
  upper: [1348, 1350],
  fold: 0,
  foldFull: [1396, 1398]
}, {
  code: 64275,
  lower: [64275],
  title: [1348, 1398],
  upper: [1348, 1350],
  fold: 0,
  foldFull: [1396, 1398]
}, {
  code: 64276,
  lower: [64276],
  title: [1348, 1381],
  upper: [1348, 1333],
  fold: 0,
  foldFull: [1396, 1381]
}, {
  code: 64276,
  lower: [64276],
  title: [1348, 1381],
  upper: [1348, 1333],
  fold: 0,
  foldFull: [1396, 1381]
}, {
  code: 64277,
  lower: [64277],
  title: [1348, 1387],
  upper: [1348, 1339],
  fold: 0,
  foldFull: [1396, 1387]
}, {
  code: 64277,
  lower: [64277],
  title: [1348, 1387],
  upper: [1348, 1339],
  fold: 0,
  foldFull: [1396, 1387]
}, {
  code: 64278,
  lower: [64278],
  title: [1358, 1398],
  upper: [1358, 1350],
  fold: 0,
  foldFull: [1406, 1398]
}, {
  code: 64278,
  lower: [64278],
  title: [1358, 1398],
  upper: [1358, 1350],
  fold: 0,
  foldFull: [1406, 1398]
}, {
  code: 64279,
  lower: [64279],
  title: [1348, 1389],
  upper: [1348, 1341],
  fold: 0,
  foldFull: [1396, 1389]
}, {
  code: 64279,
  lower: [64279],
  title: [1348, 1389],
  upper: [1348, 1341],
  fold: 0,
  foldFull: [1396, 1389]
}, {
  code: 65313,
  lower: [],
  title: [],
  upper: [],
  fold: 65345,
  foldFull: [65345]
}, {
  code: 65314,
  lower: [],
  title: [],
  upper: [],
  fold: 65346,
  foldFull: [65346]
}, {
  code: 65315,
  lower: [],
  title: [],
  upper: [],
  fold: 65347,
  foldFull: [65347]
}, {
  code: 65316,
  lower: [],
  title: [],
  upper: [],
  fold: 65348,
  foldFull: [65348]
}, {
  code: 65317,
  lower: [],
  title: [],
  upper: [],
  fold: 65349,
  foldFull: [65349]
}, {
  code: 65318,
  lower: [],
  title: [],
  upper: [],
  fold: 65350,
  foldFull: [65350]
}, {
  code: 65319,
  lower: [],
  title: [],
  upper: [],
  fold: 65351,
  foldFull: [65351]
}, {
  code: 65320,
  lower: [],
  title: [],
  upper: [],
  fold: 65352,
  foldFull: [65352]
}, {
  code: 65321,
  lower: [],
  title: [],
  upper: [],
  fold: 65353,
  foldFull: [65353]
}, {
  code: 65322,
  lower: [],
  title: [],
  upper: [],
  fold: 65354,
  foldFull: [65354]
}, {
  code: 65323,
  lower: [],
  title: [],
  upper: [],
  fold: 65355,
  foldFull: [65355]
}, {
  code: 65324,
  lower: [],
  title: [],
  upper: [],
  fold: 65356,
  foldFull: [65356]
}, {
  code: 65325,
  lower: [],
  title: [],
  upper: [],
  fold: 65357,
  foldFull: [65357]
}, {
  code: 65326,
  lower: [],
  title: [],
  upper: [],
  fold: 65358,
  foldFull: [65358]
}, {
  code: 65327,
  lower: [],
  title: [],
  upper: [],
  fold: 65359,
  foldFull: [65359]
}, {
  code: 65328,
  lower: [],
  title: [],
  upper: [],
  fold: 65360,
  foldFull: [65360]
}, {
  code: 65329,
  lower: [],
  title: [],
  upper: [],
  fold: 65361,
  foldFull: [65361]
}, {
  code: 65330,
  lower: [],
  title: [],
  upper: [],
  fold: 65362,
  foldFull: [65362]
}, {
  code: 65331,
  lower: [],
  title: [],
  upper: [],
  fold: 65363,
  foldFull: [65363]
}, {
  code: 65332,
  lower: [],
  title: [],
  upper: [],
  fold: 65364,
  foldFull: [65364]
}, {
  code: 65333,
  lower: [],
  title: [],
  upper: [],
  fold: 65365,
  foldFull: [65365]
}, {
  code: 65334,
  lower: [],
  title: [],
  upper: [],
  fold: 65366,
  foldFull: [65366]
}, {
  code: 65335,
  lower: [],
  title: [],
  upper: [],
  fold: 65367,
  foldFull: [65367]
}, {
  code: 65336,
  lower: [],
  title: [],
  upper: [],
  fold: 65368,
  foldFull: [65368]
}, {
  code: 65337,
  lower: [],
  title: [],
  upper: [],
  fold: 65369,
  foldFull: [65369]
}, {
  code: 65338,
  lower: [],
  title: [],
  upper: [],
  fold: 65370,
  foldFull: [65370]
}, {
  code: 66560,
  lower: [],
  title: [],
  upper: [],
  fold: 66600,
  foldFull: [66600]
}, {
  code: 66561,
  lower: [],
  title: [],
  upper: [],
  fold: 66601,
  foldFull: [66601]
}, {
  code: 66562,
  lower: [],
  title: [],
  upper: [],
  fold: 66602,
  foldFull: [66602]
}, {
  code: 66563,
  lower: [],
  title: [],
  upper: [],
  fold: 66603,
  foldFull: [66603]
}, {
  code: 66564,
  lower: [],
  title: [],
  upper: [],
  fold: 66604,
  foldFull: [66604]
}, {
  code: 66565,
  lower: [],
  title: [],
  upper: [],
  fold: 66605,
  foldFull: [66605]
}, {
  code: 66566,
  lower: [],
  title: [],
  upper: [],
  fold: 66606,
  foldFull: [66606]
}, {
  code: 66567,
  lower: [],
  title: [],
  upper: [],
  fold: 66607,
  foldFull: [66607]
}, {
  code: 66568,
  lower: [],
  title: [],
  upper: [],
  fold: 66608,
  foldFull: [66608]
}, {
  code: 66569,
  lower: [],
  title: [],
  upper: [],
  fold: 66609,
  foldFull: [66609]
}, {
  code: 66570,
  lower: [],
  title: [],
  upper: [],
  fold: 66610,
  foldFull: [66610]
}, {
  code: 66571,
  lower: [],
  title: [],
  upper: [],
  fold: 66611,
  foldFull: [66611]
}, {
  code: 66572,
  lower: [],
  title: [],
  upper: [],
  fold: 66612,
  foldFull: [66612]
}, {
  code: 66573,
  lower: [],
  title: [],
  upper: [],
  fold: 66613,
  foldFull: [66613]
}, {
  code: 66574,
  lower: [],
  title: [],
  upper: [],
  fold: 66614,
  foldFull: [66614]
}, {
  code: 66575,
  lower: [],
  title: [],
  upper: [],
  fold: 66615,
  foldFull: [66615]
}, {
  code: 66576,
  lower: [],
  title: [],
  upper: [],
  fold: 66616,
  foldFull: [66616]
}, {
  code: 66577,
  lower: [],
  title: [],
  upper: [],
  fold: 66617,
  foldFull: [66617]
}, {
  code: 66578,
  lower: [],
  title: [],
  upper: [],
  fold: 66618,
  foldFull: [66618]
}, {
  code: 66579,
  lower: [],
  title: [],
  upper: [],
  fold: 66619,
  foldFull: [66619]
}, {
  code: 66580,
  lower: [],
  title: [],
  upper: [],
  fold: 66620,
  foldFull: [66620]
}, {
  code: 66581,
  lower: [],
  title: [],
  upper: [],
  fold: 66621,
  foldFull: [66621]
}, {
  code: 66582,
  lower: [],
  title: [],
  upper: [],
  fold: 66622,
  foldFull: [66622]
}, {
  code: 66583,
  lower: [],
  title: [],
  upper: [],
  fold: 66623,
  foldFull: [66623]
}, {
  code: 66584,
  lower: [],
  title: [],
  upper: [],
  fold: 66624,
  foldFull: [66624]
}, {
  code: 66585,
  lower: [],
  title: [],
  upper: [],
  fold: 66625,
  foldFull: [66625]
}, {
  code: 66586,
  lower: [],
  title: [],
  upper: [],
  fold: 66626,
  foldFull: [66626]
}, {
  code: 66587,
  lower: [],
  title: [],
  upper: [],
  fold: 66627,
  foldFull: [66627]
}, {
  code: 66588,
  lower: [],
  title: [],
  upper: [],
  fold: 66628,
  foldFull: [66628]
}, {
  code: 66589,
  lower: [],
  title: [],
  upper: [],
  fold: 66629,
  foldFull: [66629]
}, {
  code: 66590,
  lower: [],
  title: [],
  upper: [],
  fold: 66630,
  foldFull: [66630]
}, {
  code: 66591,
  lower: [],
  title: [],
  upper: [],
  fold: 66631,
  foldFull: [66631]
}, {
  code: 66592,
  lower: [],
  title: [],
  upper: [],
  fold: 66632,
  foldFull: [66632]
}, {
  code: 66593,
  lower: [],
  title: [],
  upper: [],
  fold: 66633,
  foldFull: [66633]
}, {
  code: 66594,
  lower: [],
  title: [],
  upper: [],
  fold: 66634,
  foldFull: [66634]
}, {
  code: 66595,
  lower: [],
  title: [],
  upper: [],
  fold: 66635,
  foldFull: [66635]
}, {
  code: 66596,
  lower: [],
  title: [],
  upper: [],
  fold: 66636,
  foldFull: [66636]
}, {
  code: 66597,
  lower: [],
  title: [],
  upper: [],
  fold: 66637,
  foldFull: [66637]
}, {
  code: 66598,
  lower: [],
  title: [],
  upper: [],
  fold: 66638,
  foldFull: [66638]
}, {
  code: 66599,
  lower: [],
  title: [],
  upper: [],
  fold: 66639,
  foldFull: [66639]
}, {
  code: 66736,
  lower: [],
  title: [],
  upper: [],
  fold: 66776,
  foldFull: [66776]
}, {
  code: 66737,
  lower: [],
  title: [],
  upper: [],
  fold: 66777,
  foldFull: [66777]
}, {
  code: 66738,
  lower: [],
  title: [],
  upper: [],
  fold: 66778,
  foldFull: [66778]
}, {
  code: 66739,
  lower: [],
  title: [],
  upper: [],
  fold: 66779,
  foldFull: [66779]
}, {
  code: 66740,
  lower: [],
  title: [],
  upper: [],
  fold: 66780,
  foldFull: [66780]
}, {
  code: 66741,
  lower: [],
  title: [],
  upper: [],
  fold: 66781,
  foldFull: [66781]
}, {
  code: 66742,
  lower: [],
  title: [],
  upper: [],
  fold: 66782,
  foldFull: [66782]
}, {
  code: 66743,
  lower: [],
  title: [],
  upper: [],
  fold: 66783,
  foldFull: [66783]
}, {
  code: 66744,
  lower: [],
  title: [],
  upper: [],
  fold: 66784,
  foldFull: [66784]
}, {
  code: 66745,
  lower: [],
  title: [],
  upper: [],
  fold: 66785,
  foldFull: [66785]
}, {
  code: 66746,
  lower: [],
  title: [],
  upper: [],
  fold: 66786,
  foldFull: [66786]
}, {
  code: 66747,
  lower: [],
  title: [],
  upper: [],
  fold: 66787,
  foldFull: [66787]
}, {
  code: 66748,
  lower: [],
  title: [],
  upper: [],
  fold: 66788,
  foldFull: [66788]
}, {
  code: 66749,
  lower: [],
  title: [],
  upper: [],
  fold: 66789,
  foldFull: [66789]
}, {
  code: 66750,
  lower: [],
  title: [],
  upper: [],
  fold: 66790,
  foldFull: [66790]
}, {
  code: 66751,
  lower: [],
  title: [],
  upper: [],
  fold: 66791,
  foldFull: [66791]
}, {
  code: 66752,
  lower: [],
  title: [],
  upper: [],
  fold: 66792,
  foldFull: [66792]
}, {
  code: 66753,
  lower: [],
  title: [],
  upper: [],
  fold: 66793,
  foldFull: [66793]
}, {
  code: 66754,
  lower: [],
  title: [],
  upper: [],
  fold: 66794,
  foldFull: [66794]
}, {
  code: 66755,
  lower: [],
  title: [],
  upper: [],
  fold: 66795,
  foldFull: [66795]
}, {
  code: 66756,
  lower: [],
  title: [],
  upper: [],
  fold: 66796,
  foldFull: [66796]
}, {
  code: 66757,
  lower: [],
  title: [],
  upper: [],
  fold: 66797,
  foldFull: [66797]
}, {
  code: 66758,
  lower: [],
  title: [],
  upper: [],
  fold: 66798,
  foldFull: [66798]
}, {
  code: 66759,
  lower: [],
  title: [],
  upper: [],
  fold: 66799,
  foldFull: [66799]
}, {
  code: 66760,
  lower: [],
  title: [],
  upper: [],
  fold: 66800,
  foldFull: [66800]
}, {
  code: 66761,
  lower: [],
  title: [],
  upper: [],
  fold: 66801,
  foldFull: [66801]
}, {
  code: 66762,
  lower: [],
  title: [],
  upper: [],
  fold: 66802,
  foldFull: [66802]
}, {
  code: 66763,
  lower: [],
  title: [],
  upper: [],
  fold: 66803,
  foldFull: [66803]
}, {
  code: 66764,
  lower: [],
  title: [],
  upper: [],
  fold: 66804,
  foldFull: [66804]
}, {
  code: 66765,
  lower: [],
  title: [],
  upper: [],
  fold: 66805,
  foldFull: [66805]
}, {
  code: 66766,
  lower: [],
  title: [],
  upper: [],
  fold: 66806,
  foldFull: [66806]
}, {
  code: 66767,
  lower: [],
  title: [],
  upper: [],
  fold: 66807,
  foldFull: [66807]
}, {
  code: 66768,
  lower: [],
  title: [],
  upper: [],
  fold: 66808,
  foldFull: [66808]
}, {
  code: 66769,
  lower: [],
  title: [],
  upper: [],
  fold: 66809,
  foldFull: [66809]
}, {
  code: 66770,
  lower: [],
  title: [],
  upper: [],
  fold: 66810,
  foldFull: [66810]
}, {
  code: 66771,
  lower: [],
  title: [],
  upper: [],
  fold: 66811,
  foldFull: [66811]
}, {
  code: 68736,
  lower: [],
  title: [],
  upper: [],
  fold: 68800,
  foldFull: [68800]
}, {
  code: 68737,
  lower: [],
  title: [],
  upper: [],
  fold: 68801,
  foldFull: [68801]
}, {
  code: 68738,
  lower: [],
  title: [],
  upper: [],
  fold: 68802,
  foldFull: [68802]
}, {
  code: 68739,
  lower: [],
  title: [],
  upper: [],
  fold: 68803,
  foldFull: [68803]
}, {
  code: 68740,
  lower: [],
  title: [],
  upper: [],
  fold: 68804,
  foldFull: [68804]
}, {
  code: 68741,
  lower: [],
  title: [],
  upper: [],
  fold: 68805,
  foldFull: [68805]
}, {
  code: 68742,
  lower: [],
  title: [],
  upper: [],
  fold: 68806,
  foldFull: [68806]
}, {
  code: 68743,
  lower: [],
  title: [],
  upper: [],
  fold: 68807,
  foldFull: [68807]
}, {
  code: 68744,
  lower: [],
  title: [],
  upper: [],
  fold: 68808,
  foldFull: [68808]
}, {
  code: 68745,
  lower: [],
  title: [],
  upper: [],
  fold: 68809,
  foldFull: [68809]
}, {
  code: 68746,
  lower: [],
  title: [],
  upper: [],
  fold: 68810,
  foldFull: [68810]
}, {
  code: 68747,
  lower: [],
  title: [],
  upper: [],
  fold: 68811,
  foldFull: [68811]
}, {
  code: 68748,
  lower: [],
  title: [],
  upper: [],
  fold: 68812,
  foldFull: [68812]
}, {
  code: 68749,
  lower: [],
  title: [],
  upper: [],
  fold: 68813,
  foldFull: [68813]
}, {
  code: 68750,
  lower: [],
  title: [],
  upper: [],
  fold: 68814,
  foldFull: [68814]
}, {
  code: 68751,
  lower: [],
  title: [],
  upper: [],
  fold: 68815,
  foldFull: [68815]
}, {
  code: 68752,
  lower: [],
  title: [],
  upper: [],
  fold: 68816,
  foldFull: [68816]
}, {
  code: 68753,
  lower: [],
  title: [],
  upper: [],
  fold: 68817,
  foldFull: [68817]
}, {
  code: 68754,
  lower: [],
  title: [],
  upper: [],
  fold: 68818,
  foldFull: [68818]
}, {
  code: 68755,
  lower: [],
  title: [],
  upper: [],
  fold: 68819,
  foldFull: [68819]
}, {
  code: 68756,
  lower: [],
  title: [],
  upper: [],
  fold: 68820,
  foldFull: [68820]
}, {
  code: 68757,
  lower: [],
  title: [],
  upper: [],
  fold: 68821,
  foldFull: [68821]
}, {
  code: 68758,
  lower: [],
  title: [],
  upper: [],
  fold: 68822,
  foldFull: [68822]
}, {
  code: 68759,
  lower: [],
  title: [],
  upper: [],
  fold: 68823,
  foldFull: [68823]
}, {
  code: 68760,
  lower: [],
  title: [],
  upper: [],
  fold: 68824,
  foldFull: [68824]
}, {
  code: 68761,
  lower: [],
  title: [],
  upper: [],
  fold: 68825,
  foldFull: [68825]
}, {
  code: 68762,
  lower: [],
  title: [],
  upper: [],
  fold: 68826,
  foldFull: [68826]
}, {
  code: 68763,
  lower: [],
  title: [],
  upper: [],
  fold: 68827,
  foldFull: [68827]
}, {
  code: 68764,
  lower: [],
  title: [],
  upper: [],
  fold: 68828,
  foldFull: [68828]
}, {
  code: 68765,
  lower: [],
  title: [],
  upper: [],
  fold: 68829,
  foldFull: [68829]
}, {
  code: 68766,
  lower: [],
  title: [],
  upper: [],
  fold: 68830,
  foldFull: [68830]
}, {
  code: 68767,
  lower: [],
  title: [],
  upper: [],
  fold: 68831,
  foldFull: [68831]
}, {
  code: 68768,
  lower: [],
  title: [],
  upper: [],
  fold: 68832,
  foldFull: [68832]
}, {
  code: 68769,
  lower: [],
  title: [],
  upper: [],
  fold: 68833,
  foldFull: [68833]
}, {
  code: 68770,
  lower: [],
  title: [],
  upper: [],
  fold: 68834,
  foldFull: [68834]
}, {
  code: 68771,
  lower: [],
  title: [],
  upper: [],
  fold: 68835,
  foldFull: [68835]
}, {
  code: 68772,
  lower: [],
  title: [],
  upper: [],
  fold: 68836,
  foldFull: [68836]
}, {
  code: 68773,
  lower: [],
  title: [],
  upper: [],
  fold: 68837,
  foldFull: [68837]
}, {
  code: 68774,
  lower: [],
  title: [],
  upper: [],
  fold: 68838,
  foldFull: [68838]
}, {
  code: 68775,
  lower: [],
  title: [],
  upper: [],
  fold: 68839,
  foldFull: [68839]
}, {
  code: 68776,
  lower: [],
  title: [],
  upper: [],
  fold: 68840,
  foldFull: [68840]
}, {
  code: 68777,
  lower: [],
  title: [],
  upper: [],
  fold: 68841,
  foldFull: [68841]
}, {
  code: 68778,
  lower: [],
  title: [],
  upper: [],
  fold: 68842,
  foldFull: [68842]
}, {
  code: 68779,
  lower: [],
  title: [],
  upper: [],
  fold: 68843,
  foldFull: [68843]
}, {
  code: 68780,
  lower: [],
  title: [],
  upper: [],
  fold: 68844,
  foldFull: [68844]
}, {
  code: 68781,
  lower: [],
  title: [],
  upper: [],
  fold: 68845,
  foldFull: [68845]
}, {
  code: 68782,
  lower: [],
  title: [],
  upper: [],
  fold: 68846,
  foldFull: [68846]
}, {
  code: 68783,
  lower: [],
  title: [],
  upper: [],
  fold: 68847,
  foldFull: [68847]
}, {
  code: 68784,
  lower: [],
  title: [],
  upper: [],
  fold: 68848,
  foldFull: [68848]
}, {
  code: 68785,
  lower: [],
  title: [],
  upper: [],
  fold: 68849,
  foldFull: [68849]
}, {
  code: 68786,
  lower: [],
  title: [],
  upper: [],
  fold: 68850,
  foldFull: [68850]
}, {
  code: 71840,
  lower: [],
  title: [],
  upper: [],
  fold: 71872,
  foldFull: [71872]
}, {
  code: 71841,
  lower: [],
  title: [],
  upper: [],
  fold: 71873,
  foldFull: [71873]
}, {
  code: 71842,
  lower: [],
  title: [],
  upper: [],
  fold: 71874,
  foldFull: [71874]
}, {
  code: 71843,
  lower: [],
  title: [],
  upper: [],
  fold: 71875,
  foldFull: [71875]
}, {
  code: 71844,
  lower: [],
  title: [],
  upper: [],
  fold: 71876,
  foldFull: [71876]
}, {
  code: 71845,
  lower: [],
  title: [],
  upper: [],
  fold: 71877,
  foldFull: [71877]
}, {
  code: 71846,
  lower: [],
  title: [],
  upper: [],
  fold: 71878,
  foldFull: [71878]
}, {
  code: 71847,
  lower: [],
  title: [],
  upper: [],
  fold: 71879,
  foldFull: [71879]
}, {
  code: 71848,
  lower: [],
  title: [],
  upper: [],
  fold: 71880,
  foldFull: [71880]
}, {
  code: 71849,
  lower: [],
  title: [],
  upper: [],
  fold: 71881,
  foldFull: [71881]
}, {
  code: 71850,
  lower: [],
  title: [],
  upper: [],
  fold: 71882,
  foldFull: [71882]
}, {
  code: 71851,
  lower: [],
  title: [],
  upper: [],
  fold: 71883,
  foldFull: [71883]
}, {
  code: 71852,
  lower: [],
  title: [],
  upper: [],
  fold: 71884,
  foldFull: [71884]
}, {
  code: 71853,
  lower: [],
  title: [],
  upper: [],
  fold: 71885,
  foldFull: [71885]
}, {
  code: 71854,
  lower: [],
  title: [],
  upper: [],
  fold: 71886,
  foldFull: [71886]
}, {
  code: 71855,
  lower: [],
  title: [],
  upper: [],
  fold: 71887,
  foldFull: [71887]
}, {
  code: 71856,
  lower: [],
  title: [],
  upper: [],
  fold: 71888,
  foldFull: [71888]
}, {
  code: 71857,
  lower: [],
  title: [],
  upper: [],
  fold: 71889,
  foldFull: [71889]
}, {
  code: 71858,
  lower: [],
  title: [],
  upper: [],
  fold: 71890,
  foldFull: [71890]
}, {
  code: 71859,
  lower: [],
  title: [],
  upper: [],
  fold: 71891,
  foldFull: [71891]
}, {
  code: 71860,
  lower: [],
  title: [],
  upper: [],
  fold: 71892,
  foldFull: [71892]
}, {
  code: 71861,
  lower: [],
  title: [],
  upper: [],
  fold: 71893,
  foldFull: [71893]
}, {
  code: 71862,
  lower: [],
  title: [],
  upper: [],
  fold: 71894,
  foldFull: [71894]
}, {
  code: 71863,
  lower: [],
  title: [],
  upper: [],
  fold: 71895,
  foldFull: [71895]
}, {
  code: 71864,
  lower: [],
  title: [],
  upper: [],
  fold: 71896,
  foldFull: [71896]
}, {
  code: 71865,
  lower: [],
  title: [],
  upper: [],
  fold: 71897,
  foldFull: [71897]
}, {
  code: 71866,
  lower: [],
  title: [],
  upper: [],
  fold: 71898,
  foldFull: [71898]
}, {
  code: 71867,
  lower: [],
  title: [],
  upper: [],
  fold: 71899,
  foldFull: [71899]
}, {
  code: 71868,
  lower: [],
  title: [],
  upper: [],
  fold: 71900,
  foldFull: [71900]
}, {
  code: 71869,
  lower: [],
  title: [],
  upper: [],
  fold: 71901,
  foldFull: [71901]
}, {
  code: 71870,
  lower: [],
  title: [],
  upper: [],
  fold: 71902,
  foldFull: [71902]
}, {
  code: 71871,
  lower: [],
  title: [],
  upper: [],
  fold: 71903,
  foldFull: [71903]
}, {
  code: 93760,
  lower: [],
  title: [],
  upper: [],
  fold: 93792,
  foldFull: [93792]
}, {
  code: 93761,
  lower: [],
  title: [],
  upper: [],
  fold: 93793,
  foldFull: [93793]
}, {
  code: 93762,
  lower: [],
  title: [],
  upper: [],
  fold: 93794,
  foldFull: [93794]
}, {
  code: 93763,
  lower: [],
  title: [],
  upper: [],
  fold: 93795,
  foldFull: [93795]
}, {
  code: 93764,
  lower: [],
  title: [],
  upper: [],
  fold: 93796,
  foldFull: [93796]
}, {
  code: 93765,
  lower: [],
  title: [],
  upper: [],
  fold: 93797,
  foldFull: [93797]
}, {
  code: 93766,
  lower: [],
  title: [],
  upper: [],
  fold: 93798,
  foldFull: [93798]
}, {
  code: 93767,
  lower: [],
  title: [],
  upper: [],
  fold: 93799,
  foldFull: [93799]
}, {
  code: 93768,
  lower: [],
  title: [],
  upper: [],
  fold: 93800,
  foldFull: [93800]
}, {
  code: 93769,
  lower: [],
  title: [],
  upper: [],
  fold: 93801,
  foldFull: [93801]
}, {
  code: 93770,
  lower: [],
  title: [],
  upper: [],
  fold: 93802,
  foldFull: [93802]
}, {
  code: 93771,
  lower: [],
  title: [],
  upper: [],
  fold: 93803,
  foldFull: [93803]
}, {
  code: 93772,
  lower: [],
  title: [],
  upper: [],
  fold: 93804,
  foldFull: [93804]
}, {
  code: 93773,
  lower: [],
  title: [],
  upper: [],
  fold: 93805,
  foldFull: [93805]
}, {
  code: 93774,
  lower: [],
  title: [],
  upper: [],
  fold: 93806,
  foldFull: [93806]
}, {
  code: 93775,
  lower: [],
  title: [],
  upper: [],
  fold: 93807,
  foldFull: [93807]
}, {
  code: 93776,
  lower: [],
  title: [],
  upper: [],
  fold: 93808,
  foldFull: [93808]
}, {
  code: 93777,
  lower: [],
  title: [],
  upper: [],
  fold: 93809,
  foldFull: [93809]
}, {
  code: 93778,
  lower: [],
  title: [],
  upper: [],
  fold: 93810,
  foldFull: [93810]
}, {
  code: 93779,
  lower: [],
  title: [],
  upper: [],
  fold: 93811,
  foldFull: [93811]
}, {
  code: 93780,
  lower: [],
  title: [],
  upper: [],
  fold: 93812,
  foldFull: [93812]
}, {
  code: 93781,
  lower: [],
  title: [],
  upper: [],
  fold: 93813,
  foldFull: [93813]
}, {
  code: 93782,
  lower: [],
  title: [],
  upper: [],
  fold: 93814,
  foldFull: [93814]
}, {
  code: 93783,
  lower: [],
  title: [],
  upper: [],
  fold: 93815,
  foldFull: [93815]
}, {
  code: 93784,
  lower: [],
  title: [],
  upper: [],
  fold: 93816,
  foldFull: [93816]
}, {
  code: 93785,
  lower: [],
  title: [],
  upper: [],
  fold: 93817,
  foldFull: [93817]
}, {
  code: 93786,
  lower: [],
  title: [],
  upper: [],
  fold: 93818,
  foldFull: [93818]
}, {
  code: 93787,
  lower: [],
  title: [],
  upper: [],
  fold: 93819,
  foldFull: [93819]
}, {
  code: 93788,
  lower: [],
  title: [],
  upper: [],
  fold: 93820,
  foldFull: [93820]
}, {
  code: 93789,
  lower: [],
  title: [],
  upper: [],
  fold: 93821,
  foldFull: [93821]
}, {
  code: 93790,
  lower: [],
  title: [],
  upper: [],
  fold: 93822,
  foldFull: [93822]
}, {
  code: 93791,
  lower: [],
  title: [],
  upper: [],
  fold: 93823,
  foldFull: [93823]
}, {
  code: 125184,
  lower: [],
  title: [],
  upper: [],
  fold: 125218,
  foldFull: [125218]
}, {
  code: 125185,
  lower: [],
  title: [],
  upper: [],
  fold: 125219,
  foldFull: [125219]
}, {
  code: 125186,
  lower: [],
  title: [],
  upper: [],
  fold: 125220,
  foldFull: [125220]
}, {
  code: 125187,
  lower: [],
  title: [],
  upper: [],
  fold: 125221,
  foldFull: [125221]
}, {
  code: 125188,
  lower: [],
  title: [],
  upper: [],
  fold: 125222,
  foldFull: [125222]
}, {
  code: 125189,
  lower: [],
  title: [],
  upper: [],
  fold: 125223,
  foldFull: [125223]
}, {
  code: 125190,
  lower: [],
  title: [],
  upper: [],
  fold: 125224,
  foldFull: [125224]
}, {
  code: 125191,
  lower: [],
  title: [],
  upper: [],
  fold: 125225,
  foldFull: [125225]
}, {
  code: 125192,
  lower: [],
  title: [],
  upper: [],
  fold: 125226,
  foldFull: [125226]
}, {
  code: 125193,
  lower: [],
  title: [],
  upper: [],
  fold: 125227,
  foldFull: [125227]
}, {
  code: 125194,
  lower: [],
  title: [],
  upper: [],
  fold: 125228,
  foldFull: [125228]
}, {
  code: 125195,
  lower: [],
  title: [],
  upper: [],
  fold: 125229,
  foldFull: [125229]
}, {
  code: 125196,
  lower: [],
  title: [],
  upper: [],
  fold: 125230,
  foldFull: [125230]
}, {
  code: 125197,
  lower: [],
  title: [],
  upper: [],
  fold: 125231,
  foldFull: [125231]
}, {
  code: 125198,
  lower: [],
  title: [],
  upper: [],
  fold: 125232,
  foldFull: [125232]
}, {
  code: 125199,
  lower: [],
  title: [],
  upper: [],
  fold: 125233,
  foldFull: [125233]
}, {
  code: 125200,
  lower: [],
  title: [],
  upper: [],
  fold: 125234,
  foldFull: [125234]
}, {
  code: 125201,
  lower: [],
  title: [],
  upper: [],
  fold: 125235,
  foldFull: [125235]
}, {
  code: 125202,
  lower: [],
  title: [],
  upper: [],
  fold: 125236,
  foldFull: [125236]
}, {
  code: 125203,
  lower: [],
  title: [],
  upper: [],
  fold: 125237,
  foldFull: [125237]
}, {
  code: 125204,
  lower: [],
  title: [],
  upper: [],
  fold: 125238,
  foldFull: [125238]
}, {
  code: 125205,
  lower: [],
  title: [],
  upper: [],
  fold: 125239,
  foldFull: [125239]
}, {
  code: 125206,
  lower: [],
  title: [],
  upper: [],
  fold: 125240,
  foldFull: [125240]
}, {
  code: 125207,
  lower: [],
  title: [],
  upper: [],
  fold: 125241,
  foldFull: [125241]
}, {
  code: 125208,
  lower: [],
  title: [],
  upper: [],
  fold: 125242,
  foldFull: [125242]
}, {
  code: 125209,
  lower: [],
  title: [],
  upper: [],
  fold: 125243,
  foldFull: [125243]
}, {
  code: 125210,
  lower: [],
  title: [],
  upper: [],
  fold: 125244,
  foldFull: [125244]
}, {
  code: 125211,
  lower: [],
  title: [],
  upper: [],
  fold: 125245,
  foldFull: [125245]
}, {
  code: 125212,
  lower: [],
  title: [],
  upper: [],
  fold: 125246,
  foldFull: [125246]
}, {
  code: 125213,
  lower: [],
  title: [],
  upper: [],
  fold: 125247,
  foldFull: [125247]
}, {
  code: 125214,
  lower: [],
  title: [],
  upper: [],
  fold: 125248,
  foldFull: [125248]
}, {
  code: 125215,
  lower: [],
  title: [],
  upper: [],
  fold: 125249,
  foldFull: [125249]
}, {
  code: 125216,
  lower: [],
  title: [],
  upper: [],
  fold: 125250,
  foldFull: [125250]
}, {
  code: 125217,
  lower: [],
  title: [],
  upper: [],
  fold: 125251,
  foldFull: [125251]
}];
var recCmp = function(v) {
  return function(v1) {
    return compare2(v.code)(v1.code);
  };
};
var findRule = function(code3) {
  var v = bsearch(zeroRec(code3))(rules)(length(rules))(recCmp);
  if (v instanceof Nothing) {
    return zeroRec(code3);
  }
  ;
  if (v instanceof Just) {
    return v.value0;
  }
  ;
  throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal.Casing (line 1627, column 17 - line 1629, column 14): " + [v.constructor.name]);
};
var lower = function(code3) {
  var lowered = findRule(code3).lower;
  var $13 = $$null(lowered);
  if ($13) {
    return [uTowlower(code3)];
  }
  ;
  return lowered;
};

// output/Data.String.CodePoints/foreign.js
var hasArrayFrom = typeof Array.from === "function";
var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
var hasCodePointAt = typeof String.prototype.codePointAt === "function";
var _unsafeCodePointAt0 = function(fallback) {
  return hasCodePointAt ? function(str2) {
    return str2.codePointAt(0);
  } : fallback;
};
var _fromCodePointArray = function(singleton7) {
  return hasFromCodePoint ? function(cps) {
    if (cps.length < 1e4) {
      return String.fromCodePoint.apply(String, cps);
    }
    return cps.map(singleton7).join("");
  } : function(cps) {
    return cps.map(singleton7).join("");
  };
};
var _toCodePointArray = function(fallback) {
  return function(unsafeCodePointAt02) {
    if (hasArrayFrom) {
      return function(str2) {
        return Array.from(str2, unsafeCodePointAt02);
      };
    }
    return fallback;
  };
};

// output/Data.String.Common/foreign.js
var trim = function(s2) {
  return s2.trim();
};
var joinWith = function(s2) {
  return function(xs) {
    return xs.join(s2);
  };
};

// output/Data.String.CodePoints/index.js
var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
var map13 = /* @__PURE__ */ map(functorMaybe);
var unfoldr2 = /* @__PURE__ */ unfoldr(unfoldableArray);
var div2 = /* @__PURE__ */ div(euclideanRingInt);
var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
var unsurrogate = function(lead) {
  return function(trail) {
    return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
  };
};
var isTrail = function(cu) {
  return 56320 <= cu && cu <= 57343;
};
var isLead = function(cu) {
  return 55296 <= cu && cu <= 56319;
};
var uncons3 = function(s2) {
  var v = length3(s2);
  if (v === 0) {
    return Nothing.value;
  }
  ;
  if (v === 1) {
    return new Just({
      head: fromEnum2(charAt(0)(s2)),
      tail: ""
    });
  }
  ;
  var cu1 = fromEnum2(charAt(1)(s2));
  var cu0 = fromEnum2(charAt(0)(s2));
  var $42 = isLead(cu0) && isTrail(cu1);
  if ($42) {
    return new Just({
      head: unsurrogate(cu0)(cu1),
      tail: drop3(2)(s2)
    });
  }
  ;
  return new Just({
    head: cu0,
    tail: drop3(1)(s2)
  });
};
var unconsButWithTuple = function(s2) {
  return map13(function(v) {
    return new Tuple(v.head, v.tail);
  })(uncons3(s2));
};
var toCodePointArrayFallback = function(s2) {
  return unfoldr2(unconsButWithTuple)(s2);
};
var unsafeCodePointAt0Fallback = function(s2) {
  var cu0 = fromEnum2(charAt(0)(s2));
  var $46 = isLead(cu0) && length3(s2) > 1;
  if ($46) {
    var cu1 = fromEnum2(charAt(1)(s2));
    var $47 = isTrail(cu1);
    if ($47) {
      return unsurrogate(cu0)(cu1);
    }
    ;
    return cu0;
  }
  ;
  return cu0;
};
var unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
var toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
var fromCharCode2 = /* @__PURE__ */ function() {
  var $74 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
  return function($75) {
    return singleton5($74($75));
  };
}();
var singletonFallback = function(v) {
  if (v <= 65535) {
    return fromCharCode2(v);
  }
  ;
  var lead = div2(v - 65536 | 0)(1024) + 55296 | 0;
  var trail = mod2(v - 65536 | 0)(1024) + 56320 | 0;
  return fromCharCode2(lead) + fromCharCode2(trail);
};
var fromCodePointArray = /* @__PURE__ */ _fromCodePointArray(singletonFallback);

// output/Data.CodePoint.Unicode/index.js
var modifyFull = unsafeCoerce2;
var toLower2 = /* @__PURE__ */ modifyFull(lower);

// output/Data.String.Regex/foreign.js
var regexImpl = function(left4) {
  return function(right3) {
    return function(s1) {
      return function(s2) {
        try {
          return right3(new RegExp(s1, s2));
        } catch (e) {
          return left4(e.message);
        }
      };
    };
  };
};
var test = function(r) {
  return function(s2) {
    var lastIndex = r.lastIndex;
    var result = r.test(s2);
    r.lastIndex = lastIndex;
    return result;
  };
};
var _match = function(just) {
  return function(nothing) {
    return function(r) {
      return function(s2) {
        var m = s2.match(r);
        if (m == null || m.length === 0) {
          return nothing;
        } else {
          for (var i3 = 0; i3 < m.length; i3++) {
            m[i3] = m[i3] == null ? nothing : just(m[i3]);
          }
          return just(m);
        }
      };
    };
  };
};

// output/Data.String.Regex.Flags/index.js
var global2 = {
  global: true,
  ignoreCase: false,
  multiline: false,
  dotAll: false,
  sticky: false,
  unicode: false
};

// output/Data.String.Regex/index.js
var renderFlags = function(v) {
  return function() {
    if (v.global) {
      return "g";
    }
    ;
    return "";
  }() + (function() {
    if (v.ignoreCase) {
      return "i";
    }
    ;
    return "";
  }() + (function() {
    if (v.multiline) {
      return "m";
    }
    ;
    return "";
  }() + (function() {
    if (v.dotAll) {
      return "s";
    }
    ;
    return "";
  }() + (function() {
    if (v.sticky) {
      return "y";
    }
    ;
    return "";
  }() + function() {
    if (v.unicode) {
      return "u";
    }
    ;
    return "";
  }()))));
};
var regex = function(s2) {
  return function(f) {
    return regexImpl(Left.create)(Right.create)(s2)(renderFlags(f));
  };
};
var match2 = /* @__PURE__ */ function() {
  return _match(Just.create)(Nothing.value);
}();

// output/Data.String.Regex.Unsafe/index.js
var identity8 = /* @__PURE__ */ identity(categoryFn);
var unsafeRegex = function(s2) {
  return function(f) {
    return either(unsafeCrashWith)(identity8)(regex(s2)(f));
  };
};

// output/Data.String.Unicode/index.js
var bindFlipped5 = /* @__PURE__ */ bindFlipped(bindArray);
var convertFull = function(f) {
  var $4 = bindFlipped5(f);
  return function($5) {
    return fromCodePointArray($4(toCodePointArray($5)));
  };
};
var toLower3 = /* @__PURE__ */ convertFull(toLower2);

// output/Data.String.Extra/index.js
var foldMap3 = /* @__PURE__ */ foldMap(foldableMaybe);
var foldMap22 = /* @__PURE__ */ foldMap3(monoidArray);
var map14 = /* @__PURE__ */ map(functorArray);
var regexGlobal = function(regexStr) {
  return unsafeRegex(regexStr)(global2);
};
var regexHasASCIIWords = /* @__PURE__ */ regexGlobal("[^\0-/:-@[-`{-\x7F]+");
var regexHasUnicodeWords = /* @__PURE__ */ regexGlobal("[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]");
var regexUnicodeWords = /* @__PURE__ */ function() {
  var rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]";
  var rsOptVar = "[\\ufe0e\\ufe0f]?";
  var rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]";
  var rsDingbat = "[\\u2700-\\u27bf]";
  var rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
  var rsBreak = "[" + (rsBreakRange + "]");
  var rsMisc = "[^" + ("\\ud800-\\udfff" + (rsBreakRange + "\\d\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]"));
  var rsMiscLower = "(?:" + (rsLower + ("|" + (rsMisc + ")")));
  var rsMiscUpper = "(?:" + (rsUpper + ("|" + (rsMisc + ")")));
  var rsNonAstral = "[^\\ud800-\\udfff]";
  var rsOptContrLower = "(?:['\\u2019](?:d|ll|m|re|s|t|ve))?";
  var rsOptContrUpper = "(?:['\\u2019](?:D|LL|M|RE|S|T|VE))?";
  var rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\u1ab0-\\u1aff\\u1dc0-\\u1dff";
  var rsCombo = "[" + (rsComboRange + "]");
  var rsModifier = "(?:" + (rsCombo + "|\\ud83c[\\udffb-\\udfff])");
  var reOptMod = rsModifier + "?";
  var rsOptJoin = "(?:" + ("\\u200d" + ("(?:" + (rsNonAstral + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + (rsOptVar + (reOptMod + ")*"))))))))));
  var rsSeq = rsOptVar + (reOptMod + rsOptJoin);
  var rsEmoji = "(?:" + (rsDingbat + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + rsSeq))))));
  return regexGlobal(joinWith("|")([rsUpper + ("?" + (rsLower + ("+" + (rsOptContrLower + ("(?=" + (rsBreak + ("|" + (rsUpper + "|$)")))))))), rsMiscUpper + ("+" + (rsOptContrUpper + ("(?=" + (rsBreak + ("|" + (rsUpper + (rsMiscLower + "|$)"))))))), rsUpper + ("?" + (rsMiscLower + ("+" + rsOptContrLower))), rsUpper + ("+" + rsOptContrUpper), "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", "\\d+", rsEmoji]));
}();
var unicodeWords = /* @__PURE__ */ function() {
  var $19 = foldMap22(catMaybes2);
  var $20 = match2(regexUnicodeWords);
  return function($21) {
    return $19($20($21));
  };
}();
var hasUnicodeWords = /* @__PURE__ */ test(regexHasUnicodeWords);
var asciiWords = /* @__PURE__ */ function() {
  var $22 = foldMap22(catMaybes2);
  var $23 = match2(regexHasASCIIWords);
  return function($24) {
    return $22($23($24));
  };
}();
var words = function(string) {
  var $13 = hasUnicodeWords(string);
  if ($13) {
    return unicodeWords(string);
  }
  ;
  return asciiWords(string);
};
var kebabCase = /* @__PURE__ */ function() {
  var $25 = joinWith("-");
  var $26 = map14(toLower3);
  return function($27) {
    return $25($26(words($27)));
  };
}();

// output/Biz.PureScriptSolutionDefinition.Types/index.js
var TestIsSymbol = {
  reflectSymbol: function() {
    return "Test";
  }
};
var BuildIsSymbol = {
  reflectSymbol: function() {
    return "Build";
  }
};
var genericEnumSumRepSum3 = /* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc(TestIsSymbol))(/* @__PURE__ */ genericEnumSumRepConstruc(BuildIsSymbol));
var entrypointsIsSymbol = {
  reflectSymbol: function() {
    return "entrypoints";
  }
};
var rootIsSymbol = {
  reflectSymbol: function() {
    return "root";
  }
};
var build_commandIsSymbol = {
  reflectSymbol: function() {
    return "build_command";
  }
};
var spago_fileIsSymbol = {
  reflectSymbol: function() {
    return "spago_file";
  }
};
var typeIsSymbol = {
  reflectSymbol: function() {
    return "type";
  }
};
var SpagoAppIsSymbol = {
  reflectSymbol: function() {
    return "SpagoApp";
  }
};
var SpagoLibraryIsSymbol = {
  reflectSymbol: function() {
    return "SpagoLibrary";
  }
};
var readForeignRecord2 = /* @__PURE__ */ readForeignRecord();
var writeForeignRecord2 = /* @__PURE__ */ writeForeignRecord();
var Test = /* @__PURE__ */ function() {
  function Test2() {
  }
  ;
  Test2.value = new Test2();
  return Test2;
}();
var Build = /* @__PURE__ */ function() {
  function Build2() {
  }
  ;
  Build2.value = new Build2();
  return Build2;
}();
var SpagoApp = /* @__PURE__ */ function() {
  function SpagoApp2(value0) {
    this.value0 = value0;
  }
  ;
  SpagoApp2.create = function(value0) {
    return new SpagoApp2(value0);
  };
  return SpagoApp2;
}();
var SpagoLibrary = /* @__PURE__ */ function() {
  function SpagoLibrary2(value0) {
    this.value0 = value0;
  }
  ;
  SpagoLibrary2.create = function(value0) {
    return new SpagoLibrary2(value0);
  };
  return SpagoLibrary2;
}();
var genericPureScriptProjectD = {
  to: function(x) {
    if (x instanceof Inl) {
      return new SpagoApp(x.value0);
    }
    ;
    if (x instanceof Inr) {
      return new SpagoLibrary(x.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 60, column 1 - line 60, column 54): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof SpagoApp) {
      return new Inl(x.value0);
    }
    ;
    if (x instanceof SpagoLibrary) {
      return new Inr(x.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 60, column 1 - line 60, column 54): " + [x.constructor.name]);
  }
};
var genericEntryPointType_ = {
  to: function(x) {
    if (x instanceof Inl) {
      return Test.value;
    }
    ;
    if (x instanceof Inr) {
      return Build.value;
    }
    ;
    throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 48, column 1 - line 48, column 41): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof Test) {
      return new Inl(NoArguments.value);
    }
    ;
    if (x instanceof Build) {
      return new Inr(NoArguments.value);
    }
    ;
    throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 48, column 1 - line 48, column 41): " + [x.constructor.name]);
  }
};
var readForeignEntryPointType = {
  readImpl: /* @__PURE__ */ genericReadForeignEnum(genericEntryPointType_)(genericEnumSumRepSum3)
};
var readGenericTaggedSumRepCo12 = /* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignRecord2(/* @__PURE__ */ readForeignFieldsCons(entrypointsIsSymbol)(/* @__PURE__ */ readForeignArray(/* @__PURE__ */ readForeignRecord2(/* @__PURE__ */ readForeignFieldsCons(build_commandIsSymbol)(/* @__PURE__ */ readForeignMaybe(readForeignString))(/* @__PURE__ */ readForeignFieldsCons(spago_fileIsSymbol)(readForeignString)(/* @__PURE__ */ readForeignFieldsCons(typeIsSymbol)(readForeignEntryPointType)(readForeignFieldsNilRowRo)()())()())()())))(/* @__PURE__ */ readForeignFieldsCons(rootIsSymbol)(readForeignString)(readForeignFieldsNilRowRo)()())()())));
var writeForeignEntryPointTyp = {
  writeImpl: /* @__PURE__ */ genericWriteForeignEnum(genericEntryPointType_)(genericEnumSumRepSum3)
};
var writeGenericTaggedSumRepC2 = /* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignRecord2(/* @__PURE__ */ writeForeignFieldsCons(entrypointsIsSymbol)(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignRecord2(/* @__PURE__ */ writeForeignFieldsCons(build_commandIsSymbol)(/* @__PURE__ */ writeForeignMaybe(writeForeignString))(/* @__PURE__ */ writeForeignFieldsCons(spago_fileIsSymbol)(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(typeIsSymbol)(writeForeignEntryPointTyp)(writeForeignFieldsNilRowR)()()())()()())()()())))(/* @__PURE__ */ writeForeignFieldsCons(rootIsSymbol)(writeForeignString)(writeForeignFieldsNilRowR)()()())()()())));
var serialisationConfig = {
  typeTag: "type",
  valueTag: "definition",
  toConstructorName: kebabCase
};
var readForeignPureScriptProj = {
  readImpl: /* @__PURE__ */ genericReadForeignTaggedSum(genericPureScriptProjectD)(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo12(SpagoAppIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepCo12(SpagoLibraryIsSymbol)))(serialisationConfig)
};
var writeForeignPureScriptPro = {
  writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericPureScriptProjectD)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC2(SpagoAppIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC2(SpagoLibraryIsSymbol)))(serialisationConfig)
};
var pureScriptSolutionFileName = ".purescript-solution.json";

// output/Biz.Spago.Types/index.js
var writeForeignVersion = writeForeignString;
var writeForeignSourceGlob = writeForeignString;
var writeForeignRepository = writeForeignString;
var writeForeignProjectName = writeForeignString;
var readForeignVersion = readForeignString;
var readForeignSourceGlob = readForeignString;
var readForeignRepository = readForeignString;
var readForeignProjectName = readForeignString;

// output/Electron.Types/index.js
var Channel = function(x) {
  return x;
};
var writeForeignChannel = writeForeignString;
var showProtocol = {
  show: function(v) {
    return v;
  }
};

// output/Biz.IPC.Message.Types/index.js
var invalidSpagoDhallIsSymbol = {
  reflectSymbol: function() {
    return "invalidSpagoDhall";
  }
};
var noSpagoDhallIsSymbol = {
  reflectSymbol: function() {
    return "noSpagoDhall";
  }
};
var nothingSelectedIsSymbol = {
  reflectSymbol: function() {
    return "nothingSelected";
  }
};
var validSpagoDhallIsSymbol = {
  reflectSymbol: function() {
    return "validSpagoDhall";
  }
};
var dependenciesIsSymbol = {
  reflectSymbol: function() {
    return "dependencies";
  }
};
var nameIsSymbol = {
  reflectSymbol: function() {
    return "name";
  }
};
var packagesIsSymbol = {
  reflectSymbol: function() {
    return "packages";
  }
};
var repoIsSymbol = {
  reflectSymbol: function() {
    return "repo";
  }
};
var versionIsSymbol = {
  reflectSymbol: function() {
    return "version";
  }
};
var repositoryIsSymbol = {
  reflectSymbol: function() {
    return "repository";
  }
};
var sourcesIsSymbol = {
  reflectSymbol: function() {
    return "sources";
  }
};
var ShowFolderSelectorResponseIsSymbol = {
  reflectSymbol: function() {
    return "ShowFolderSelectorResponse";
  }
};
var UserSelectedFileIsSymbol = {
  reflectSymbol: function() {
    return "UserSelectedFile";
  }
};
var GetInstalledToolsResponseIsSymbol = {
  reflectSymbol: function() {
    return "GetInstalledToolsResponse";
  }
};
var projectsIsSymbol = {
  reflectSymbol: function() {
    return "projects";
  }
};
var GetPureScriptSolutionDefinitionsResponseIsSymbol = {
  reflectSymbol: function() {
    return "GetPureScriptSolutionDefinitionsResponse";
  }
};
var writeForeignRecord3 = /* @__PURE__ */ writeForeignRecord();
var writeForeignRecord1 = /* @__PURE__ */ writeForeignRecord3(writeForeignFieldsNilRowR);
var writeForeignFieldsCons2 = /* @__PURE__ */ writeForeignFieldsCons(dependenciesIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignProjectName));
var writeForeignFieldsCons1 = /* @__PURE__ */ writeForeignFieldsCons(nameIsSymbol);
var writeForeignMaybe2 = /* @__PURE__ */ writeForeignMaybe(writeForeignString);
var genericEnumConstructor3 = /* @__PURE__ */ genericEnumConstructor(genericEnumNoArguments);
var genericTopConstructor3 = /* @__PURE__ */ genericTopConstructor(genericTopNoArguments);
var genericEnumSum3 = /* @__PURE__ */ genericEnumSum(genericEnumConstructor3)(genericTopConstructor3);
var genericBottomConstructor3 = /* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments);
var genericBottomSum3 = /* @__PURE__ */ genericBottomSum(genericBottomConstructor3);
var genericEnumSum12 = /* @__PURE__ */ genericEnumSum3(/* @__PURE__ */ genericEnumSum3(/* @__PURE__ */ genericEnumSum3(genericEnumConstructor3)(genericBottomConstructor3))(genericBottomSum3))(genericBottomSum3);
var genericTopSum2 = /* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopConstructor3)));
var ShowFolderSelectorChannel = /* @__PURE__ */ function() {
  function ShowFolderSelectorChannel2() {
  }
  ;
  ShowFolderSelectorChannel2.value = new ShowFolderSelectorChannel2();
  return ShowFolderSelectorChannel2;
}();
var ShowOpenDialogChannel = /* @__PURE__ */ function() {
  function ShowOpenDialogChannel2() {
  }
  ;
  ShowOpenDialogChannel2.value = new ShowOpenDialogChannel2();
  return ShowOpenDialogChannel2;
}();
var GetInstalledToolsChannel = /* @__PURE__ */ function() {
  function GetInstalledToolsChannel2() {
  }
  ;
  GetInstalledToolsChannel2.value = new GetInstalledToolsChannel2();
  return GetInstalledToolsChannel2;
}();
var GetPureScriptSolutionDefinitionsChannel = /* @__PURE__ */ function() {
  function GetPureScriptSolutionDefinitionsChannel2() {
  }
  ;
  GetPureScriptSolutionDefinitionsChannel2.value = new GetPureScriptSolutionDefinitionsChannel2();
  return GetPureScriptSolutionDefinitionsChannel2;
}();
var ShowFolderSelectorResponse = /* @__PURE__ */ function() {
  function ShowFolderSelectorResponse2(value0) {
    this.value0 = value0;
  }
  ;
  ShowFolderSelectorResponse2.create = function(value0) {
    return new ShowFolderSelectorResponse2(value0);
  };
  return ShowFolderSelectorResponse2;
}();
var UserSelectedFile = /* @__PURE__ */ function() {
  function UserSelectedFile2(value0) {
    this.value0 = value0;
  }
  ;
  UserSelectedFile2.create = function(value0) {
    return new UserSelectedFile2(value0);
  };
  return UserSelectedFile2;
}();
var GetInstalledToolsResponse = /* @__PURE__ */ function() {
  function GetInstalledToolsResponse2(value0) {
    this.value0 = value0;
  }
  ;
  GetInstalledToolsResponse2.create = function(value0) {
    return new GetInstalledToolsResponse2(value0);
  };
  return GetInstalledToolsResponse2;
}();
var GetPureScriptSolutionDefinitionsResponse = /* @__PURE__ */ function() {
  function GetPureScriptSolutionDefinitionsResponse2(value0) {
    this.value0 = value0;
  }
  ;
  GetPureScriptSolutionDefinitionsResponse2.create = function(value0) {
    return new GetPureScriptSolutionDefinitionsResponse2(value0);
  };
  return GetPureScriptSolutionDefinitionsResponse2;
}();
var ShowFolderSelectorResponseChannel = /* @__PURE__ */ function() {
  function ShowFolderSelectorResponseChannel2() {
  }
  ;
  ShowFolderSelectorResponseChannel2.value = new ShowFolderSelectorResponseChannel2();
  return ShowFolderSelectorResponseChannel2;
}();
var ShowOpenDialogResponseChannel = /* @__PURE__ */ function() {
  function ShowOpenDialogResponseChannel2() {
  }
  ;
  ShowOpenDialogResponseChannel2.value = new ShowOpenDialogResponseChannel2();
  return ShowOpenDialogResponseChannel2;
}();
var GetInstalledToolsResponseChannel = /* @__PURE__ */ function() {
  function GetInstalledToolsResponseChannel2() {
  }
  ;
  GetInstalledToolsResponseChannel2.value = new GetInstalledToolsResponseChannel2();
  return GetInstalledToolsResponseChannel2;
}();
var GetPureScriptSolutionDefinitionsResponseChannel = /* @__PURE__ */ function() {
  function GetPureScriptSolutionDefinitionsResponseChannel2() {
  }
  ;
  GetPureScriptSolutionDefinitionsResponseChannel2.value = new GetPureScriptSolutionDefinitionsResponseChannel2();
  return GetPureScriptSolutionDefinitionsResponseChannel2;
}();
var genericRendererToMainChan = {
  to: function(x) {
    if (x instanceof Inl) {
      return ShowFolderSelectorChannel.value;
    }
    ;
    if (x instanceof Inr && x.value0 instanceof Inl) {
      return ShowOpenDialogChannel.value;
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
      return GetInstalledToolsChannel.value;
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
      return GetPureScriptSolutionDefinitionsChannel.value;
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 101, column 1 - line 101, column 48): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof ShowFolderSelectorChannel) {
      return new Inl(NoArguments.value);
    }
    ;
    if (x instanceof ShowOpenDialogChannel) {
      return new Inr(new Inl(NoArguments.value));
    }
    ;
    if (x instanceof GetInstalledToolsChannel) {
      return new Inr(new Inr(new Inl(NoArguments.value)));
    }
    ;
    if (x instanceof GetPureScriptSolutionDefinitionsChannel) {
      return new Inr(new Inr(new Inr(NoArguments.value)));
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 101, column 1 - line 101, column 48): " + [x.constructor.name]);
  }
};
var genericMessageToRenderer_ = {
  to: function(x) {
    if (x instanceof Inl) {
      return new ShowFolderSelectorResponse(x.value0);
    }
    ;
    if (x instanceof Inr && x.value0 instanceof Inl) {
      return new UserSelectedFile(x.value0.value0);
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inl)) {
      return new GetInstalledToolsResponse(x.value0.value0.value0);
    }
    ;
    if (x instanceof Inr && (x.value0 instanceof Inr && x.value0.value0 instanceof Inr)) {
      return new GetPureScriptSolutionDefinitionsResponse(x.value0.value0.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 78, column 1 - line 78, column 44): " + [x.constructor.name]);
  },
  from: function(x) {
    if (x instanceof ShowFolderSelectorResponse) {
      return new Inl(x.value0);
    }
    ;
    if (x instanceof UserSelectedFile) {
      return new Inr(new Inl(x.value0));
    }
    ;
    if (x instanceof GetInstalledToolsResponse) {
      return new Inr(new Inr(new Inl(x.value0)));
    }
    ;
    if (x instanceof GetPureScriptSolutionDefinitionsResponse) {
      return new Inr(new Inr(new Inr(x.value0)));
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 78, column 1 - line 78, column 44): " + [x.constructor.name]);
  }
};
var writeForeignMessageToRend = {
  writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericMessageToRenderer_)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignVariant()(/* @__PURE__ */ writeForeignVariantCons(invalidSpagoDhallIsSymbol)(writeForeignString)()(/* @__PURE__ */ writeForeignVariantCons(noSpagoDhallIsSymbol)(writeForeignRecord1)()(/* @__PURE__ */ writeForeignVariantCons(nothingSelectedIsSymbol)(writeForeignRecord1)()(/* @__PURE__ */ writeForeignVariantCons(validSpagoDhallIsSymbol)(/* @__PURE__ */ writeForeignRecord3(/* @__PURE__ */ writeForeignFieldsCons2(/* @__PURE__ */ writeForeignFieldsCons1(writeForeignProjectName)(/* @__PURE__ */ writeForeignFieldsCons(packagesIsSymbol)(/* @__PURE__ */ writeForeignObject(/* @__PURE__ */ writeForeignRecord3(/* @__PURE__ */ writeForeignFieldsCons2(/* @__PURE__ */ writeForeignFieldsCons(repoIsSymbol)(writeForeignRepository)(/* @__PURE__ */ writeForeignFieldsCons(versionIsSymbol)(writeForeignVersion)(writeForeignFieldsNilRowR)()()())()()())()()())))(/* @__PURE__ */ writeForeignFieldsCons(repositoryIsSymbol)(/* @__PURE__ */ writeForeignMaybe(writeForeignRepository))(/* @__PURE__ */ writeForeignFieldsCons(sourcesIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignSourceGlob))(writeForeignFieldsNilRowR)()()())()()())()()())()()())()()()))()(writeForeignVariantNilRow)))))))(ShowFolderSelectorResponseIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignMaybe2))(UserSelectedFileIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignGetInstalledT))(GetInstalledToolsResponseIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignTuple(writeForeignString)(/* @__PURE__ */ writeForeignRecord3(/* @__PURE__ */ writeForeignFieldsCons1(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(projectsIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignPureScriptPro))(writeForeignFieldsNilRowR)()()())()()())))))(GetPureScriptSolutionDefinitionsResponseIsSymbol)))))(defaultOptions)
};
var eqRendererToMainChannel = {
  eq: function(x) {
    return function(y) {
      if (x instanceof ShowFolderSelectorChannel && y instanceof ShowFolderSelectorChannel) {
        return true;
      }
      ;
      if (x instanceof ShowOpenDialogChannel && y instanceof ShowOpenDialogChannel) {
        return true;
      }
      ;
      if (x instanceof GetInstalledToolsChannel && y instanceof GetInstalledToolsChannel) {
        return true;
      }
      ;
      if (x instanceof GetPureScriptSolutionDefinitionsChannel && y instanceof GetPureScriptSolutionDefinitionsChannel) {
        return true;
      }
      ;
      return false;
    };
  }
};
var ordRendererToMainChannel = {
  compare: function(x) {
    return function(y) {
      if (x instanceof ShowFolderSelectorChannel && y instanceof ShowFolderSelectorChannel) {
        return EQ.value;
      }
      ;
      if (x instanceof ShowFolderSelectorChannel) {
        return LT.value;
      }
      ;
      if (y instanceof ShowFolderSelectorChannel) {
        return GT.value;
      }
      ;
      if (x instanceof ShowOpenDialogChannel && y instanceof ShowOpenDialogChannel) {
        return EQ.value;
      }
      ;
      if (x instanceof ShowOpenDialogChannel) {
        return LT.value;
      }
      ;
      if (y instanceof ShowOpenDialogChannel) {
        return GT.value;
      }
      ;
      if (x instanceof GetInstalledToolsChannel && y instanceof GetInstalledToolsChannel) {
        return EQ.value;
      }
      ;
      if (x instanceof GetInstalledToolsChannel) {
        return LT.value;
      }
      ;
      if (y instanceof GetInstalledToolsChannel) {
        return GT.value;
      }
      ;
      if (x instanceof GetPureScriptSolutionDefinitionsChannel && y instanceof GetPureScriptSolutionDefinitionsChannel) {
        return EQ.value;
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
    };
  },
  Eq0: function() {
    return eqRendererToMainChannel;
  }
};
var enumRendererToMainChannel = {
  succ: /* @__PURE__ */ genericSucc(genericRendererToMainChan)(genericEnumSum12),
  pred: /* @__PURE__ */ genericPred(genericRendererToMainChan)(genericEnumSum12),
  Ord0: function() {
    return ordRendererToMainChannel;
  }
};
var boundedRendererToMainChan = {
  top: /* @__PURE__ */ genericTop(genericRendererToMainChan)(genericTopSum2),
  bottom: /* @__PURE__ */ genericBottom(genericRendererToMainChan)(genericBottomSum3),
  Ord0: function() {
    return ordRendererToMainChannel;
  }
};
var rendererToMainChannelName = function($659) {
  return Channel(function(v) {
    if (v instanceof ShowFolderSelectorChannel) {
      return "show-folder-selector";
    }
    ;
    if (v instanceof ShowOpenDialogChannel) {
      return "ask-user-to-select-folder";
    }
    ;
    if (v instanceof GetInstalledToolsChannel) {
      return "get-installed-tools";
    }
    ;
    if (v instanceof GetPureScriptSolutionDefinitionsChannel) {
      return "get-app-settings";
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 36, column 41 - line 40, column 63): " + [v.constructor.name]);
  }($659));
};
var messageToRendererToChannel = function(v) {
  if (v instanceof ShowFolderSelectorResponse) {
    return ShowFolderSelectorResponseChannel.value;
  }
  ;
  if (v instanceof UserSelectedFile) {
    return ShowOpenDialogResponseChannel.value;
  }
  ;
  if (v instanceof GetInstalledToolsResponse) {
    return GetInstalledToolsResponseChannel.value;
  }
  ;
  if (v instanceof GetPureScriptSolutionDefinitionsResponse) {
    return GetInstalledToolsResponseChannel.value;
  }
  ;
  throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 50, column 30 - line 54, column 80): " + [v.constructor.name]);
};
var mainToRendererChannelName = function($660) {
  return Channel(function(v) {
    if (v instanceof ShowFolderSelectorResponseChannel) {
      return "show-folder-selector-response";
    }
    ;
    if (v instanceof ShowOpenDialogResponseChannel) {
      return "ask-user-to-select-folder-response";
    }
    ;
    if (v instanceof GetInstalledToolsResponseChannel) {
      return "get-installed-tools-response";
    }
    ;
    if (v instanceof GetPureScriptSolutionDefinitionsResponseChannel) {
      return "get-app-settings-response";
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 43, column 41 - line 47, column 80): " + [v.constructor.name]);
  }($660));
};

// output/Backend.OperatingSystem.Types/index.js
var MacOS = /* @__PURE__ */ function() {
  function MacOS2() {
  }
  ;
  MacOS2.value = new MacOS2();
  return MacOS2;
}();
var Linux = /* @__PURE__ */ function() {
  function Linux3() {
  }
  ;
  Linux3.value = new Linux3();
  return Linux3;
}();
var Windows = /* @__PURE__ */ function() {
  function Windows2() {
  }
  ;
  Windows2.value = new Windows2();
  return Windows2;
}();

// output/Effect.Aff/foreign.js
var Aff = function() {
  var EMPTY = {};
  var PURE = "Pure";
  var THROW = "Throw";
  var CATCH = "Catch";
  var SYNC = "Sync";
  var ASYNC = "Async";
  var BIND = "Bind";
  var BRACKET = "Bracket";
  var FORK = "Fork";
  var SEQ = "Sequential";
  var MAP = "Map";
  var APPLY = "Apply";
  var ALT = "Alt";
  var CONS = "Cons";
  var RESUME = "Resume";
  var RELEASE = "Release";
  var FINALIZER = "Finalizer";
  var FINALIZED = "Finalized";
  var FORKED = "Forked";
  var FIBER = "Fiber";
  var THUNK = "Thunk";
  function Aff2(tag, _1, _2, _3) {
    this.tag = tag;
    this._1 = _1;
    this._2 = _2;
    this._3 = _3;
  }
  function AffCtr(tag) {
    var fn = function(_1, _2, _3) {
      return new Aff2(tag, _1, _2, _3);
    };
    fn.tag = tag;
    return fn;
  }
  function nonCanceler2(error3) {
    return new Aff2(PURE, void 0);
  }
  function runEff(eff) {
    try {
      eff();
    } catch (error3) {
      setTimeout(function() {
        throw error3;
      }, 0);
    }
  }
  function runSync(left4, right3, eff) {
    try {
      return right3(eff());
    } catch (error3) {
      return left4(error3);
    }
  }
  function runAsync(left4, eff, k) {
    try {
      return eff(k)();
    } catch (error3) {
      k(left4(error3))();
      return nonCanceler2;
    }
  }
  var Scheduler = function() {
    var limit = 1024;
    var size8 = 0;
    var ix = 0;
    var queue = new Array(limit);
    var draining = false;
    function drain() {
      var thunk;
      draining = true;
      while (size8 !== 0) {
        size8--;
        thunk = queue[ix];
        queue[ix] = void 0;
        ix = (ix + 1) % limit;
        thunk();
      }
      draining = false;
    }
    return {
      isDraining: function() {
        return draining;
      },
      enqueue: function(cb2) {
        var i3, tmp;
        if (size8 === limit) {
          tmp = draining;
          drain();
          draining = tmp;
        }
        queue[(ix + size8) % limit] = cb2;
        size8++;
        if (!draining) {
          drain();
        }
      }
    };
  }();
  function Supervisor(util) {
    var fibers = {};
    var fiberId = 0;
    var count = 0;
    return {
      register: function(fiber) {
        var fid = fiberId++;
        fiber.onComplete({
          rethrow: true,
          handler: function(result) {
            return function() {
              count--;
              delete fibers[fid];
            };
          }
        })();
        fibers[fid] = fiber;
        count++;
      },
      isEmpty: function() {
        return count === 0;
      },
      killAll: function(killError, cb2) {
        return function() {
          if (count === 0) {
            return cb2();
          }
          var killCount = 0;
          var kills = {};
          function kill2(fid) {
            kills[fid] = fibers[fid].kill(killError, function(result) {
              return function() {
                delete kills[fid];
                killCount--;
                if (util.isLeft(result) && util.fromLeft(result)) {
                  setTimeout(function() {
                    throw util.fromLeft(result);
                  }, 0);
                }
                if (killCount === 0) {
                  cb2();
                }
              };
            })();
          }
          for (var k in fibers) {
            if (fibers.hasOwnProperty(k)) {
              killCount++;
              kill2(k);
            }
          }
          fibers = {};
          fiberId = 0;
          count = 0;
          return function(error3) {
            return new Aff2(SYNC, function() {
              for (var k2 in kills) {
                if (kills.hasOwnProperty(k2)) {
                  kills[k2]();
                }
              }
            });
          };
        };
      }
    };
  }
  var SUSPENDED = 0;
  var CONTINUE = 1;
  var STEP_BIND = 2;
  var STEP_RESULT = 3;
  var PENDING = 4;
  var RETURN = 5;
  var COMPLETED = 6;
  function Fiber(util, supervisor, aff) {
    var runTick = 0;
    var status = SUSPENDED;
    var step3 = aff;
    var fail5 = null;
    var interrupt = null;
    var bhead = null;
    var btail = null;
    var attempts = null;
    var bracketCount = 0;
    var joinId = 0;
    var joins = null;
    var rethrow = true;
    function run3(localRunTick) {
      var tmp, result, attempt;
      while (true) {
        tmp = null;
        result = null;
        attempt = null;
        switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step3 = bhead(step3);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail5 = util.left(e);
              step3 = null;
            }
            break;
          case STEP_RESULT:
            if (util.isLeft(step3)) {
              status = RETURN;
              fail5 = step3;
              step3 = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step3 = util.fromRight(step3);
            }
            break;
          case CONTINUE:
            switch (step3.tag) {
              case BIND:
                if (bhead) {
                  btail = new Aff2(CONS, bhead, btail);
                }
                bhead = step3._2;
                status = CONTINUE;
                step3 = step3._1;
                break;
              case PURE:
                if (bhead === null) {
                  status = RETURN;
                  step3 = util.right(step3._1);
                } else {
                  status = STEP_BIND;
                  step3 = step3._1;
                }
                break;
              case SYNC:
                status = STEP_RESULT;
                step3 = runSync(util.left, util.right, step3._1);
                break;
              case ASYNC:
                status = PENDING;
                step3 = runAsync(util.left, step3._1, function(result2) {
                  return function() {
                    if (runTick !== localRunTick) {
                      return;
                    }
                    runTick++;
                    Scheduler.enqueue(function() {
                      if (runTick !== localRunTick + 1) {
                        return;
                      }
                      status = STEP_RESULT;
                      step3 = result2;
                      run3(runTick);
                    });
                  };
                });
                return;
              case THROW:
                status = RETURN;
                fail5 = util.left(step3._1);
                step3 = null;
                break;
              case CATCH:
                if (bhead === null) {
                  attempts = new Aff2(CONS, step3, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status = CONTINUE;
                step3 = step3._1;
                break;
              case BRACKET:
                bracketCount++;
                if (bhead === null) {
                  attempts = new Aff2(CONS, step3, attempts, interrupt);
                } else {
                  attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                }
                bhead = null;
                btail = null;
                status = CONTINUE;
                step3 = step3._1;
                break;
              case FORK:
                status = STEP_RESULT;
                tmp = Fiber(util, supervisor, step3._2);
                if (supervisor) {
                  supervisor.register(tmp);
                }
                if (step3._1) {
                  tmp.run();
                }
                step3 = util.right(tmp);
                break;
              case SEQ:
                status = CONTINUE;
                step3 = sequential2(util, supervisor, step3._1);
                break;
            }
            break;
          case RETURN:
            bhead = null;
            btail = null;
            if (attempts === null) {
              status = COMPLETED;
              step3 = interrupt || fail5 || step3;
            } else {
              tmp = attempts._3;
              attempt = attempts._1;
              attempts = attempts._2;
              switch (attempt.tag) {
                case CATCH:
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    status = RETURN;
                  } else if (fail5) {
                    status = CONTINUE;
                    step3 = attempt._2(util.fromLeft(fail5));
                    fail5 = null;
                  }
                  break;
                case RESUME:
                  if (interrupt && interrupt !== tmp && bracketCount === 0 || fail5) {
                    status = RETURN;
                  } else {
                    bhead = attempt._1;
                    btail = attempt._2;
                    status = STEP_BIND;
                    step3 = util.fromRight(step3);
                  }
                  break;
                case BRACKET:
                  bracketCount--;
                  if (fail5 === null) {
                    result = util.fromRight(step3);
                    attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                    if (interrupt === tmp || bracketCount > 0) {
                      status = CONTINUE;
                      step3 = attempt._3(result);
                    }
                  }
                  break;
                case RELEASE:
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail5), attempts, interrupt);
                  status = CONTINUE;
                  if (interrupt && interrupt !== tmp && bracketCount === 0) {
                    step3 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                  } else if (fail5) {
                    step3 = attempt._1.failed(util.fromLeft(fail5))(attempt._2);
                  } else {
                    step3 = attempt._1.completed(util.fromRight(step3))(attempt._2);
                  }
                  fail5 = null;
                  bracketCount++;
                  break;
                case FINALIZER:
                  bracketCount++;
                  attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail5), attempts, interrupt);
                  status = CONTINUE;
                  step3 = attempt._1;
                  break;
                case FINALIZED:
                  bracketCount--;
                  status = RETURN;
                  step3 = attempt._1;
                  fail5 = attempt._2;
                  break;
              }
            }
            break;
          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step3));
              }
            }
            joins = null;
            if (interrupt && fail5) {
              setTimeout(function() {
                throw util.fromLeft(fail5);
              }, 0);
            } else if (util.isLeft(step3) && rethrow) {
              setTimeout(function() {
                if (rethrow) {
                  throw util.fromLeft(step3);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING:
            return;
        }
      }
    }
    function onComplete(join3) {
      return function() {
        if (status === COMPLETED) {
          rethrow = rethrow && join3.rethrow;
          join3.handler(step3)();
          return function() {
          };
        }
        var jid = joinId++;
        joins = joins || {};
        joins[jid] = join3;
        return function() {
          if (joins !== null) {
            delete joins[jid];
          }
        };
      };
    }
    function kill2(error3, cb2) {
      return function() {
        if (status === COMPLETED) {
          cb2(util.right(void 0))();
          return function() {
          };
        }
        var canceler = onComplete({
          rethrow: false,
          handler: function() {
            return cb2(util.right(void 0));
          }
        })();
        switch (status) {
          case SUSPENDED:
            interrupt = util.left(error3);
            status = COMPLETED;
            step3 = interrupt;
            run3(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error3);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error3)), attempts, interrupt);
              }
              status = RETURN;
              step3 = null;
              fail5 = null;
              run3(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error3);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step3 = null;
              fail5 = null;
            }
        }
        return canceler;
      };
    }
    function join2(cb2) {
      return function() {
        var canceler = onComplete({
          rethrow: false,
          handler: cb2
        })();
        if (status === SUSPENDED) {
          run3(runTick);
        }
        return canceler;
      };
    }
    return {
      kill: kill2,
      join: join2,
      onComplete,
      isSuspended: function() {
        return status === SUSPENDED;
      },
      run: function() {
        if (status === SUSPENDED) {
          if (!Scheduler.isDraining()) {
            Scheduler.enqueue(function() {
              run3(runTick);
            });
          } else {
            run3(runTick);
          }
        }
      }
    };
  }
  function runPar(util, supervisor, par, cb2) {
    var fiberId = 0;
    var fibers = {};
    var killId = 0;
    var kills = {};
    var early = new Error("[ParAff] Early exit");
    var interrupt = null;
    var root = EMPTY;
    function kill2(error3, par2, cb3) {
      var step3 = par2;
      var head6 = null;
      var tail2 = null;
      var count = 0;
      var kills2 = {};
      var tmp, kid;
      loop:
        while (true) {
          tmp = null;
          switch (step3.tag) {
            case FORKED:
              if (step3._3 === EMPTY) {
                tmp = fibers[step3._1];
                kills2[count++] = tmp.kill(error3, function(result) {
                  return function() {
                    count--;
                    if (count === 0) {
                      cb3(result)();
                    }
                  };
                });
              }
              if (head6 === null) {
                break loop;
              }
              step3 = head6._2;
              if (tail2 === null) {
                head6 = null;
              } else {
                head6 = tail2._1;
                tail2 = tail2._2;
              }
              break;
            case MAP:
              step3 = step3._2;
              break;
            case APPLY:
            case ALT:
              if (head6) {
                tail2 = new Aff2(CONS, head6, tail2);
              }
              head6 = step3;
              step3 = step3._1;
              break;
          }
        }
      if (count === 0) {
        cb3(util.right(void 0))();
      } else {
        kid = 0;
        tmp = count;
        for (; kid < tmp; kid++) {
          kills2[kid] = kills2[kid]();
        }
      }
      return kills2;
    }
    function join2(result, head6, tail2) {
      var fail5, step3, lhs, rhs, tmp, kid;
      if (util.isLeft(result)) {
        fail5 = result;
        step3 = null;
      } else {
        step3 = result;
        fail5 = null;
      }
      loop:
        while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;
          if (interrupt !== null) {
            return;
          }
          if (head6 === null) {
            cb2(fail5 || step3)();
            return;
          }
          if (head6._3 !== EMPTY) {
            return;
          }
          switch (head6.tag) {
            case MAP:
              if (fail5 === null) {
                head6._3 = util.right(head6._1(util.fromRight(step3)));
                step3 = head6._3;
              } else {
                head6._3 = fail5;
              }
              break;
            case APPLY:
              lhs = head6._1._3;
              rhs = head6._2._3;
              if (fail5) {
                head6._3 = fail5;
                tmp = true;
                kid = killId++;
                kills[kid] = kill2(early, fail5 === lhs ? head6._2 : head6._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail2 === null) {
                      join2(fail5, null, null);
                    } else {
                      join2(fail5, tail2._1, tail2._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              } else if (lhs === EMPTY || rhs === EMPTY) {
                return;
              } else {
                step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                head6._3 = step3;
              }
              break;
            case ALT:
              lhs = head6._1._3;
              rhs = head6._2._3;
              if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                return;
              }
              if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                fail5 = step3 === lhs ? rhs : lhs;
                step3 = null;
                head6._3 = fail5;
              } else {
                head6._3 = step3;
                tmp = true;
                kid = killId++;
                kills[kid] = kill2(early, step3 === lhs ? head6._2 : head6._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail2 === null) {
                      join2(step3, null, null);
                    } else {
                      join2(step3, tail2._1, tail2._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              }
              break;
          }
          if (tail2 === null) {
            head6 = null;
          } else {
            head6 = tail2._1;
            tail2 = tail2._2;
          }
        }
    }
    function resolve2(fiber) {
      return function(result) {
        return function() {
          delete fibers[fiber._1];
          fiber._3 = result;
          join2(result, fiber._2._1, fiber._2._2);
        };
      };
    }
    function run3() {
      var status = CONTINUE;
      var step3 = par;
      var head6 = null;
      var tail2 = null;
      var tmp, fid;
      loop:
        while (true) {
          tmp = null;
          fid = null;
          switch (status) {
            case CONTINUE:
              switch (step3.tag) {
                case MAP:
                  if (head6) {
                    tail2 = new Aff2(CONS, head6, tail2);
                  }
                  head6 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                  step3 = step3._2;
                  break;
                case APPLY:
                  if (head6) {
                    tail2 = new Aff2(CONS, head6, tail2);
                  }
                  head6 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                case ALT:
                  if (head6) {
                    tail2 = new Aff2(CONS, head6, tail2);
                  }
                  head6 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                  step3 = step3._1;
                  break;
                default:
                  fid = fiberId++;
                  status = RETURN;
                  tmp = step3;
                  step3 = new Aff2(FORKED, fid, new Aff2(CONS, head6, tail2), EMPTY);
                  tmp = Fiber(util, supervisor, tmp);
                  tmp.onComplete({
                    rethrow: false,
                    handler: resolve2(step3)
                  })();
                  fibers[fid] = tmp;
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
              }
              break;
            case RETURN:
              if (head6 === null) {
                break loop;
              }
              if (head6._1 === EMPTY) {
                head6._1 = step3;
                status = CONTINUE;
                step3 = head6._2;
                head6._2 = EMPTY;
              } else {
                head6._2 = step3;
                step3 = head6;
                if (tail2 === null) {
                  head6 = null;
                } else {
                  head6 = tail2._1;
                  tail2 = tail2._2;
                }
              }
          }
        }
      root = step3;
      for (fid = 0; fid < fiberId; fid++) {
        fibers[fid].run();
      }
    }
    function cancel(error3, cb3) {
      interrupt = util.left(error3);
      var innerKills;
      for (var kid in kills) {
        if (kills.hasOwnProperty(kid)) {
          innerKills = kills[kid];
          for (kid in innerKills) {
            if (innerKills.hasOwnProperty(kid)) {
              innerKills[kid]();
            }
          }
        }
      }
      kills = null;
      var newKills = kill2(error3, root, cb3);
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            for (var kid2 in newKills) {
              if (newKills.hasOwnProperty(kid2)) {
                newKills[kid2]();
              }
            }
            return nonCanceler2;
          };
        });
      };
    }
    run3();
    return function(killError) {
      return new Aff2(ASYNC, function(killCb) {
        return function() {
          return cancel(killError, killCb);
        };
      });
    };
  }
  function sequential2(util, supervisor, par) {
    return new Aff2(ASYNC, function(cb2) {
      return function() {
        return runPar(util, supervisor, par, cb2);
      };
    });
  }
  Aff2.EMPTY = EMPTY;
  Aff2.Pure = AffCtr(PURE);
  Aff2.Throw = AffCtr(THROW);
  Aff2.Catch = AffCtr(CATCH);
  Aff2.Sync = AffCtr(SYNC);
  Aff2.Async = AffCtr(ASYNC);
  Aff2.Bind = AffCtr(BIND);
  Aff2.Bracket = AffCtr(BRACKET);
  Aff2.Fork = AffCtr(FORK);
  Aff2.Seq = AffCtr(SEQ);
  Aff2.ParMap = AffCtr(MAP);
  Aff2.ParApply = AffCtr(APPLY);
  Aff2.ParAlt = AffCtr(ALT);
  Aff2.Fiber = Fiber;
  Aff2.Supervisor = Supervisor;
  Aff2.Scheduler = Scheduler;
  Aff2.nonCanceler = nonCanceler2;
  return Aff2;
}();
var _pure = Aff.Pure;
var _throwError = Aff.Throw;
function _map(f) {
  return function(aff) {
    if (aff.tag === Aff.Pure.tag) {
      return Aff.Pure(f(aff._1));
    } else {
      return Aff.Bind(aff, function(value12) {
        return Aff.Pure(f(value12));
      });
    }
  };
}
function _bind(aff) {
  return function(k) {
    return Aff.Bind(aff, k);
  };
}
var _liftEffect = Aff.Sync;
function _parAffMap(f) {
  return function(aff) {
    return Aff.ParMap(f, aff);
  };
}
function _parAffApply(aff1) {
  return function(aff2) {
    return Aff.ParApply(aff1, aff2);
  };
}
var makeAff = Aff.Async;
function _makeFiber(util, aff) {
  return function() {
    return Aff.Fiber(util, null, aff);
  };
}
var _delay = function() {
  function setDelay(n, k) {
    if (n === 0 && typeof setImmediate !== "undefined") {
      return setImmediate(k);
    } else {
      return setTimeout(k, n);
    }
  }
  function clearDelay(n, t) {
    if (n === 0 && typeof clearImmediate !== "undefined") {
      return clearImmediate(t);
    } else {
      return clearTimeout(t);
    }
  }
  return function(right3, ms) {
    return Aff.Async(function(cb2) {
      return function() {
        var timer = setDelay(ms, cb2(right3()));
        return function() {
          return Aff.Sync(function() {
            return right3(clearDelay(ms, timer));
          });
        };
      };
    });
  };
}();
var _sequential = Aff.Seq;

// output/Control.Monad.Maybe.Trans/index.js
var map15 = /* @__PURE__ */ map(functorMaybe);
var MaybeT = function(x) {
  return x;
};
var runMaybeT = function(v) {
  return v;
};
var functorMaybeT = function(dictFunctor) {
  var map110 = map(dictFunctor);
  return {
    map: function(f) {
      return function(v) {
        return map110(map15(f))(v);
      };
    }
  };
};
var monadMaybeT = function(dictMonad) {
  return {
    Applicative0: function() {
      return applicativeMaybeT(dictMonad);
    },
    Bind1: function() {
      return bindMaybeT(dictMonad);
    }
  };
};
var bindMaybeT = function(dictMonad) {
  var bind32 = bind(dictMonad.Bind1());
  var pure33 = pure(dictMonad.Applicative0());
  return {
    bind: function(v) {
      return function(f) {
        return bind32(v)(function(v1) {
          if (v1 instanceof Nothing) {
            return pure33(Nothing.value);
          }
          ;
          if (v1 instanceof Just) {
            var v2 = f(v1.value0);
            return v2;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [v1.constructor.name]);
        });
      };
    },
    Apply0: function() {
      return applyMaybeT(dictMonad);
    }
  };
};
var applyMaybeT = function(dictMonad) {
  var functorMaybeT1 = functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
  return {
    apply: ap(monadMaybeT(dictMonad)),
    Functor0: function() {
      return functorMaybeT1;
    }
  };
};
var applicativeMaybeT = function(dictMonad) {
  return {
    pure: function() {
      var $159 = pure(dictMonad.Applicative0());
      return function($160) {
        return MaybeT($159(Just.create($160)));
      };
    }(),
    Apply0: function() {
      return applyMaybeT(dictMonad);
    }
  };
};

// output/Type.Equality/index.js
var refl = {
  proof: function(a3) {
    return a3;
  },
  Coercible0: function() {
    return void 0;
  }
};

// output/Control.Parallel.Class/index.js
var sequential = function(dict) {
  return dict.sequential;
};
var parallel = function(dict) {
  return dict.parallel;
};

// output/Control.Parallel/index.js
var identity9 = /* @__PURE__ */ identity(categoryFn);
var parTraverse_ = function(dictParallel) {
  var sequential2 = sequential(dictParallel);
  var traverse_3 = traverse_(dictParallel.Applicative1());
  var parallel2 = parallel(dictParallel);
  return function(dictFoldable) {
    var traverse_1 = traverse_3(dictFoldable);
    return function(f) {
      var $48 = traverse_1(function($50) {
        return parallel2(f($50));
      });
      return function($49) {
        return sequential2($48($49));
      };
    };
  };
};
var parSequence_ = function(dictParallel) {
  var parTraverse_1 = parTraverse_(dictParallel);
  return function(dictFoldable) {
    return parTraverse_1(dictFoldable)(identity9);
  };
};

// output/Data.Time.Duration/index.js
var identity10 = /* @__PURE__ */ identity(categoryFn);
var fromDuration = function(dict) {
  return dict.fromDuration;
};
var durationMilliseconds = {
  fromDuration: identity10,
  toDuration: identity10
};

// output/Effect.Aff/index.js
var $runtime_lazy3 = function(name15, moduleName, init3) {
  var state3 = 0;
  var val;
  return function(lineNumber) {
    if (state3 === 2)
      return val;
    if (state3 === 1)
      throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
    state3 = 1;
    val = init3();
    state3 = 2;
    return val;
  };
};
var pure6 = /* @__PURE__ */ pure(applicativeEffect);
var $$void4 = /* @__PURE__ */ $$void(functorEffect);
var map16 = /* @__PURE__ */ map(functorEffect);
var Canceler = function(x) {
  return x;
};
var functorParAff = {
  map: _parAffMap
};
var functorAff = {
  map: _map
};
var ffiUtil = /* @__PURE__ */ function() {
  var unsafeFromRight = function(v) {
    if (v instanceof Right) {
      return v.value0;
    }
    ;
    if (v instanceof Left) {
      return unsafeCrashWith("unsafeFromRight: Left");
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 407, column 21 - line 409, column 54): " + [v.constructor.name]);
  };
  var unsafeFromLeft = function(v) {
    if (v instanceof Left) {
      return v.value0;
    }
    ;
    if (v instanceof Right) {
      return unsafeCrashWith("unsafeFromLeft: Right");
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 402, column 20 - line 404, column 55): " + [v.constructor.name]);
  };
  var isLeft = function(v) {
    if (v instanceof Left) {
      return true;
    }
    ;
    if (v instanceof Right) {
      return false;
    }
    ;
    throw new Error("Failed pattern match at Effect.Aff (line 397, column 12 - line 399, column 21): " + [v.constructor.name]);
  };
  return {
    isLeft,
    fromLeft: unsafeFromLeft,
    fromRight: unsafeFromRight,
    left: Left.create,
    right: Right.create
  };
}();
var makeFiber = function(aff) {
  return _makeFiber(ffiUtil, aff);
};
var launchAff = function(aff) {
  return function __do6() {
    var fiber = makeFiber(aff)();
    fiber.run();
    return fiber;
  };
};
var launchAff_ = function($73) {
  return $$void4(launchAff($73));
};
var delay = function(v) {
  return _delay(Right.create, v);
};
var applyParAff = {
  apply: _parAffApply,
  Functor0: function() {
    return functorParAff;
  }
};
var monadAff = {
  Applicative0: function() {
    return applicativeAff;
  },
  Bind1: function() {
    return bindAff;
  }
};
var bindAff = {
  bind: _bind,
  Apply0: function() {
    return $lazy_applyAff(0);
  }
};
var applicativeAff = {
  pure: _pure,
  Apply0: function() {
    return $lazy_applyAff(0);
  }
};
var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy3("applyAff", "Effect.Aff", function() {
  return {
    apply: ap(monadAff),
    Functor0: function() {
      return functorAff;
    }
  };
});
var applyAff = /* @__PURE__ */ $lazy_applyAff(71);
var pure22 = /* @__PURE__ */ pure(applicativeAff);
var bind1 = /* @__PURE__ */ bind(bindAff);
var monadEffectAff = {
  liftEffect: _liftEffect,
  Monad0: function() {
    return monadAff;
  }
};
var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
var effectCanceler = function($74) {
  return Canceler($$const(liftEffect2($74)));
};
var killFiber = function(e) {
  return function(v) {
    return bind1(liftEffect2(v.isSuspended))(function(suspended) {
      if (suspended) {
        return liftEffect2($$void4(v.kill(e, $$const(pure6(unit)))));
      }
      ;
      return makeAff(function(k) {
        return map16(effectCanceler)(v.kill(e, k));
      });
    });
  };
};
var monadThrowAff = {
  throwError: _throwError,
  Monad0: function() {
    return monadAff;
  }
};
var parallelAff = {
  parallel: unsafeCoerce2,
  sequential: _sequential,
  Monad0: function() {
    return monadAff;
  },
  Applicative1: function() {
    return $lazy_applicativeParAff(0);
  }
};
var $lazy_applicativeParAff = /* @__PURE__ */ $runtime_lazy3("applicativeParAff", "Effect.Aff", function() {
  return {
    pure: function() {
      var $79 = parallel(parallelAff);
      return function($80) {
        return $79(pure22($80));
      };
    }(),
    Apply0: function() {
      return applyParAff;
    }
  };
});
var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(foldableArray);
var semigroupCanceler = {
  append: function(v) {
    return function(v1) {
      return function(err) {
        return parSequence_2([v(err), v1(err)]);
      };
    };
  }
};
var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure22(unit));
var monoidCanceler = {
  mempty: nonCanceler,
  Semigroup0: function() {
    return semigroupCanceler;
  }
};

// output/Node.ChildProcess/foreign.js
var import_child_process = require("child_process");
function unsafeFromNullable(msg) {
  return (x) => {
    if (x === null)
      throw new Error(msg);
    return x;
  };
}
function spawnImpl(command) {
  return (args) => (opts) => () => (0, import_child_process.spawn)(command, args, opts);
}
function mkOnExit(mkChildExit) {
  return function onExit3(cp) {
    return (cb2) => () => {
      cp.on("exit", (code3, signal) => {
        cb2(mkChildExit(code3)(signal))();
      });
    };
  };
}
function onError(cp) {
  return (cb2) => () => {
    cp.on("error", (err) => {
      cb2(err)();
    });
  };
}
var _undefined2 = void 0;

// output/Data.Posix.Signal/index.js
var SIGABRT = /* @__PURE__ */ function() {
  function SIGABRT2() {
  }
  ;
  SIGABRT2.value = new SIGABRT2();
  return SIGABRT2;
}();
var SIGALRM = /* @__PURE__ */ function() {
  function SIGALRM2() {
  }
  ;
  SIGALRM2.value = new SIGALRM2();
  return SIGALRM2;
}();
var SIGBUS = /* @__PURE__ */ function() {
  function SIGBUS2() {
  }
  ;
  SIGBUS2.value = new SIGBUS2();
  return SIGBUS2;
}();
var SIGCHLD = /* @__PURE__ */ function() {
  function SIGCHLD2() {
  }
  ;
  SIGCHLD2.value = new SIGCHLD2();
  return SIGCHLD2;
}();
var SIGCLD = /* @__PURE__ */ function() {
  function SIGCLD2() {
  }
  ;
  SIGCLD2.value = new SIGCLD2();
  return SIGCLD2;
}();
var SIGCONT = /* @__PURE__ */ function() {
  function SIGCONT2() {
  }
  ;
  SIGCONT2.value = new SIGCONT2();
  return SIGCONT2;
}();
var SIGEMT = /* @__PURE__ */ function() {
  function SIGEMT2() {
  }
  ;
  SIGEMT2.value = new SIGEMT2();
  return SIGEMT2;
}();
var SIGFPE = /* @__PURE__ */ function() {
  function SIGFPE2() {
  }
  ;
  SIGFPE2.value = new SIGFPE2();
  return SIGFPE2;
}();
var SIGHUP = /* @__PURE__ */ function() {
  function SIGHUP2() {
  }
  ;
  SIGHUP2.value = new SIGHUP2();
  return SIGHUP2;
}();
var SIGILL = /* @__PURE__ */ function() {
  function SIGILL2() {
  }
  ;
  SIGILL2.value = new SIGILL2();
  return SIGILL2;
}();
var SIGINFO = /* @__PURE__ */ function() {
  function SIGINFO2() {
  }
  ;
  SIGINFO2.value = new SIGINFO2();
  return SIGINFO2;
}();
var SIGINT = /* @__PURE__ */ function() {
  function SIGINT2() {
  }
  ;
  SIGINT2.value = new SIGINT2();
  return SIGINT2;
}();
var SIGIO = /* @__PURE__ */ function() {
  function SIGIO2() {
  }
  ;
  SIGIO2.value = new SIGIO2();
  return SIGIO2;
}();
var SIGIOT = /* @__PURE__ */ function() {
  function SIGIOT2() {
  }
  ;
  SIGIOT2.value = new SIGIOT2();
  return SIGIOT2;
}();
var SIGKILL = /* @__PURE__ */ function() {
  function SIGKILL2() {
  }
  ;
  SIGKILL2.value = new SIGKILL2();
  return SIGKILL2;
}();
var SIGLOST = /* @__PURE__ */ function() {
  function SIGLOST2() {
  }
  ;
  SIGLOST2.value = new SIGLOST2();
  return SIGLOST2;
}();
var SIGPIPE = /* @__PURE__ */ function() {
  function SIGPIPE2() {
  }
  ;
  SIGPIPE2.value = new SIGPIPE2();
  return SIGPIPE2;
}();
var SIGPOLL = /* @__PURE__ */ function() {
  function SIGPOLL2() {
  }
  ;
  SIGPOLL2.value = new SIGPOLL2();
  return SIGPOLL2;
}();
var SIGPROF = /* @__PURE__ */ function() {
  function SIGPROF2() {
  }
  ;
  SIGPROF2.value = new SIGPROF2();
  return SIGPROF2;
}();
var SIGPWR = /* @__PURE__ */ function() {
  function SIGPWR2() {
  }
  ;
  SIGPWR2.value = new SIGPWR2();
  return SIGPWR2;
}();
var SIGQUIT = /* @__PURE__ */ function() {
  function SIGQUIT2() {
  }
  ;
  SIGQUIT2.value = new SIGQUIT2();
  return SIGQUIT2;
}();
var SIGSEGV = /* @__PURE__ */ function() {
  function SIGSEGV2() {
  }
  ;
  SIGSEGV2.value = new SIGSEGV2();
  return SIGSEGV2;
}();
var SIGSTKFLT = /* @__PURE__ */ function() {
  function SIGSTKFLT2() {
  }
  ;
  SIGSTKFLT2.value = new SIGSTKFLT2();
  return SIGSTKFLT2;
}();
var SIGSTOP = /* @__PURE__ */ function() {
  function SIGSTOP2() {
  }
  ;
  SIGSTOP2.value = new SIGSTOP2();
  return SIGSTOP2;
}();
var SIGSYS = /* @__PURE__ */ function() {
  function SIGSYS2() {
  }
  ;
  SIGSYS2.value = new SIGSYS2();
  return SIGSYS2;
}();
var SIGTERM = /* @__PURE__ */ function() {
  function SIGTERM2() {
  }
  ;
  SIGTERM2.value = new SIGTERM2();
  return SIGTERM2;
}();
var SIGTRAP = /* @__PURE__ */ function() {
  function SIGTRAP2() {
  }
  ;
  SIGTRAP2.value = new SIGTRAP2();
  return SIGTRAP2;
}();
var SIGTSTP = /* @__PURE__ */ function() {
  function SIGTSTP2() {
  }
  ;
  SIGTSTP2.value = new SIGTSTP2();
  return SIGTSTP2;
}();
var SIGTTIN = /* @__PURE__ */ function() {
  function SIGTTIN2() {
  }
  ;
  SIGTTIN2.value = new SIGTTIN2();
  return SIGTTIN2;
}();
var SIGTTOU = /* @__PURE__ */ function() {
  function SIGTTOU2() {
  }
  ;
  SIGTTOU2.value = new SIGTTOU2();
  return SIGTTOU2;
}();
var SIGUNUSED = /* @__PURE__ */ function() {
  function SIGUNUSED2() {
  }
  ;
  SIGUNUSED2.value = new SIGUNUSED2();
  return SIGUNUSED2;
}();
var SIGURG = /* @__PURE__ */ function() {
  function SIGURG2() {
  }
  ;
  SIGURG2.value = new SIGURG2();
  return SIGURG2;
}();
var SIGUSR1 = /* @__PURE__ */ function() {
  function SIGUSR12() {
  }
  ;
  SIGUSR12.value = new SIGUSR12();
  return SIGUSR12;
}();
var SIGUSR2 = /* @__PURE__ */ function() {
  function SIGUSR22() {
  }
  ;
  SIGUSR22.value = new SIGUSR22();
  return SIGUSR22;
}();
var SIGVTALRM = /* @__PURE__ */ function() {
  function SIGVTALRM2() {
  }
  ;
  SIGVTALRM2.value = new SIGVTALRM2();
  return SIGVTALRM2;
}();
var SIGWINCH = /* @__PURE__ */ function() {
  function SIGWINCH2() {
  }
  ;
  SIGWINCH2.value = new SIGWINCH2();
  return SIGWINCH2;
}();
var SIGXCPU = /* @__PURE__ */ function() {
  function SIGXCPU2() {
  }
  ;
  SIGXCPU2.value = new SIGXCPU2();
  return SIGXCPU2;
}();
var SIGXFSZ = /* @__PURE__ */ function() {
  function SIGXFSZ2() {
  }
  ;
  SIGXFSZ2.value = new SIGXFSZ2();
  return SIGXFSZ2;
}();
var toString = function(s2) {
  if (s2 instanceof SIGABRT) {
    return "SIGABRT";
  }
  ;
  if (s2 instanceof SIGALRM) {
    return "SIGALRM";
  }
  ;
  if (s2 instanceof SIGBUS) {
    return "SIGBUS";
  }
  ;
  if (s2 instanceof SIGCHLD) {
    return "SIGCHLD";
  }
  ;
  if (s2 instanceof SIGCLD) {
    return "SIGCLD";
  }
  ;
  if (s2 instanceof SIGCONT) {
    return "SIGCONT";
  }
  ;
  if (s2 instanceof SIGEMT) {
    return "SIGEMT";
  }
  ;
  if (s2 instanceof SIGFPE) {
    return "SIGFPE";
  }
  ;
  if (s2 instanceof SIGHUP) {
    return "SIGHUP";
  }
  ;
  if (s2 instanceof SIGILL) {
    return "SIGILL";
  }
  ;
  if (s2 instanceof SIGINFO) {
    return "SIGINFO";
  }
  ;
  if (s2 instanceof SIGINT) {
    return "SIGINT";
  }
  ;
  if (s2 instanceof SIGIO) {
    return "SIGIO";
  }
  ;
  if (s2 instanceof SIGIOT) {
    return "SIGIOT";
  }
  ;
  if (s2 instanceof SIGKILL) {
    return "SIGKILL";
  }
  ;
  if (s2 instanceof SIGLOST) {
    return "SIGLOST";
  }
  ;
  if (s2 instanceof SIGPIPE) {
    return "SIGPIPE";
  }
  ;
  if (s2 instanceof SIGPOLL) {
    return "SIGPOLL";
  }
  ;
  if (s2 instanceof SIGPROF) {
    return "SIGPROF";
  }
  ;
  if (s2 instanceof SIGPWR) {
    return "SIGPWR";
  }
  ;
  if (s2 instanceof SIGQUIT) {
    return "SIGQUIT";
  }
  ;
  if (s2 instanceof SIGSEGV) {
    return "SIGSEGV";
  }
  ;
  if (s2 instanceof SIGSTKFLT) {
    return "SIGSTKFLT";
  }
  ;
  if (s2 instanceof SIGSTOP) {
    return "SIGSTOP";
  }
  ;
  if (s2 instanceof SIGSYS) {
    return "SIGSYS";
  }
  ;
  if (s2 instanceof SIGTERM) {
    return "SIGTERM";
  }
  ;
  if (s2 instanceof SIGTRAP) {
    return "SIGTRAP";
  }
  ;
  if (s2 instanceof SIGTSTP) {
    return "SIGTSTP";
  }
  ;
  if (s2 instanceof SIGTTIN) {
    return "SIGTTIN";
  }
  ;
  if (s2 instanceof SIGTTOU) {
    return "SIGTTOU";
  }
  ;
  if (s2 instanceof SIGUNUSED) {
    return "SIGUNUSED";
  }
  ;
  if (s2 instanceof SIGURG) {
    return "SIGURG";
  }
  ;
  if (s2 instanceof SIGUSR1) {
    return "SIGUSR1";
  }
  ;
  if (s2 instanceof SIGUSR2) {
    return "SIGUSR2";
  }
  ;
  if (s2 instanceof SIGVTALRM) {
    return "SIGVTALRM";
  }
  ;
  if (s2 instanceof SIGWINCH) {
    return "SIGWINCH";
  }
  ;
  if (s2 instanceof SIGXCPU) {
    return "SIGXCPU";
  }
  ;
  if (s2 instanceof SIGXFSZ) {
    return "SIGXFSZ";
  }
  ;
  throw new Error("Failed pattern match at Data.Posix.Signal (line 48, column 14 - line 86, column 24): " + [s2.constructor.name]);
};
var fromString2 = function(s2) {
  if (s2 === "SIGABRT") {
    return new Just(SIGABRT.value);
  }
  ;
  if (s2 === "SIGALRM") {
    return new Just(SIGALRM.value);
  }
  ;
  if (s2 === "SIGBUS") {
    return new Just(SIGBUS.value);
  }
  ;
  if (s2 === "SIGCHLD") {
    return new Just(SIGCHLD.value);
  }
  ;
  if (s2 === "SIGCLD") {
    return new Just(SIGCLD.value);
  }
  ;
  if (s2 === "SIGCONT") {
    return new Just(SIGCONT.value);
  }
  ;
  if (s2 === "SIGEMT") {
    return new Just(SIGEMT.value);
  }
  ;
  if (s2 === "SIGFPE") {
    return new Just(SIGFPE.value);
  }
  ;
  if (s2 === "SIGHUP") {
    return new Just(SIGHUP.value);
  }
  ;
  if (s2 === "SIGILL") {
    return new Just(SIGILL.value);
  }
  ;
  if (s2 === "SIGINFO") {
    return new Just(SIGINFO.value);
  }
  ;
  if (s2 === "SIGINT") {
    return new Just(SIGINT.value);
  }
  ;
  if (s2 === "SIGIO") {
    return new Just(SIGIO.value);
  }
  ;
  if (s2 === "SIGIOT") {
    return new Just(SIGIOT.value);
  }
  ;
  if (s2 === "SIGKILL") {
    return new Just(SIGKILL.value);
  }
  ;
  if (s2 === "SIGLOST") {
    return new Just(SIGLOST.value);
  }
  ;
  if (s2 === "SIGPIPE") {
    return new Just(SIGPIPE.value);
  }
  ;
  if (s2 === "SIGPOLL") {
    return new Just(SIGPOLL.value);
  }
  ;
  if (s2 === "SIGPROF") {
    return new Just(SIGPROF.value);
  }
  ;
  if (s2 === "SIGPWR") {
    return new Just(SIGPWR.value);
  }
  ;
  if (s2 === "SIGQUIT") {
    return new Just(SIGQUIT.value);
  }
  ;
  if (s2 === "SIGSEGV") {
    return new Just(SIGSEGV.value);
  }
  ;
  if (s2 === "SIGSTKFLT") {
    return new Just(SIGSTKFLT.value);
  }
  ;
  if (s2 === "SIGSTOP") {
    return new Just(SIGSTOP.value);
  }
  ;
  if (s2 === "SIGSYS") {
    return new Just(SIGSYS.value);
  }
  ;
  if (s2 === "SIGTERM") {
    return new Just(SIGTERM.value);
  }
  ;
  if (s2 === "SIGTRAP") {
    return new Just(SIGTRAP.value);
  }
  ;
  if (s2 === "SIGTSTP") {
    return new Just(SIGTSTP.value);
  }
  ;
  if (s2 === "SIGTTIN") {
    return new Just(SIGTTIN.value);
  }
  ;
  if (s2 === "SIGTTOU") {
    return new Just(SIGTTOU.value);
  }
  ;
  if (s2 === "SIGUNUSED") {
    return new Just(SIGUNUSED.value);
  }
  ;
  if (s2 === "SIGURG") {
    return new Just(SIGURG.value);
  }
  ;
  if (s2 === "SIGUSR1") {
    return new Just(SIGUSR1.value);
  }
  ;
  if (s2 === "SIGUSR2") {
    return new Just(SIGUSR2.value);
  }
  ;
  if (s2 === "SIGVTALRM") {
    return new Just(SIGVTALRM.value);
  }
  ;
  if (s2 === "SIGWINCH") {
    return new Just(SIGWINCH.value);
  }
  ;
  if (s2 === "SIGXCPU") {
    return new Just(SIGXCPU.value);
  }
  ;
  if (s2 === "SIGXFSZ") {
    return new Just(SIGXFSZ.value);
  }
  ;
  return Nothing.value;
};

// output/Effect.Exception.Unsafe/index.js
var unsafeThrowException = function($1) {
  return unsafePerformEffect(throwException($1));
};
var unsafeThrow = function($2) {
  return unsafeThrowException(error($2));
};

// output/Node.Encoding/index.js
var ASCII = /* @__PURE__ */ function() {
  function ASCII2() {
  }
  ;
  ASCII2.value = new ASCII2();
  return ASCII2;
}();
var UTF8 = /* @__PURE__ */ function() {
  function UTF82() {
  }
  ;
  UTF82.value = new UTF82();
  return UTF82;
}();
var UTF16LE = /* @__PURE__ */ function() {
  function UTF16LE2() {
  }
  ;
  UTF16LE2.value = new UTF16LE2();
  return UTF16LE2;
}();
var UCS2 = /* @__PURE__ */ function() {
  function UCS22() {
  }
  ;
  UCS22.value = new UCS22();
  return UCS22;
}();
var Base64 = /* @__PURE__ */ function() {
  function Base642() {
  }
  ;
  Base642.value = new Base642();
  return Base642;
}();
var Latin1 = /* @__PURE__ */ function() {
  function Latin12() {
  }
  ;
  Latin12.value = new Latin12();
  return Latin12;
}();
var Binary = /* @__PURE__ */ function() {
  function Binary2() {
  }
  ;
  Binary2.value = new Binary2();
  return Binary2;
}();
var Hex = /* @__PURE__ */ function() {
  function Hex2() {
  }
  ;
  Hex2.value = new Hex2();
  return Hex2;
}();
var showEncoding = {
  show: function(v) {
    if (v instanceof ASCII) {
      return "ASCII";
    }
    ;
    if (v instanceof UTF8) {
      return "UTF8";
    }
    ;
    if (v instanceof UTF16LE) {
      return "UTF16LE";
    }
    ;
    if (v instanceof UCS2) {
      return "UCS2";
    }
    ;
    if (v instanceof Base64) {
      return "Base64";
    }
    ;
    if (v instanceof Latin1) {
      return "Latin1";
    }
    ;
    if (v instanceof Binary) {
      return "Binary";
    }
    ;
    if (v instanceof Hex) {
      return "Hex";
    }
    ;
    throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 27, column 23): " + [v.constructor.name]);
  }
};
var encodingToNode = function(v) {
  if (v instanceof ASCII) {
    return "ascii";
  }
  ;
  if (v instanceof UTF8) {
    return "utf8";
  }
  ;
  if (v instanceof UTF16LE) {
    return "utf16le";
  }
  ;
  if (v instanceof UCS2) {
    return "ucs2";
  }
  ;
  if (v instanceof Base64) {
    return "base64";
  }
  ;
  if (v instanceof Latin1) {
    return "latin1";
  }
  ;
  if (v instanceof Binary) {
    return "binary";
  }
  ;
  if (v instanceof Hex) {
    return "hex";
  }
  ;
  throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [v.constructor.name]);
};

// output/Node.ChildProcess/index.js
var map17 = /* @__PURE__ */ map(functorArray);
var map18 = /* @__PURE__ */ map(functorMaybe);
var composeKleisli2 = /* @__PURE__ */ composeKleisli(bindMaybe);
var alt5 = /* @__PURE__ */ alt(altMaybe);
var Pipe = /* @__PURE__ */ function() {
  function Pipe2() {
  }
  ;
  Pipe2.value = new Pipe2();
  return Pipe2;
}();
var Ignore = /* @__PURE__ */ function() {
  function Ignore2() {
  }
  ;
  Ignore2.value = new Ignore2();
  return Ignore2;
}();
var ShareStream = /* @__PURE__ */ function() {
  function ShareStream2(value0) {
    this.value0 = value0;
  }
  ;
  ShareStream2.create = function(value0) {
    return new ShareStream2(value0);
  };
  return ShareStream2;
}();
var ShareFD = /* @__PURE__ */ function() {
  function ShareFD2(value0) {
    this.value0 = value0;
  }
  ;
  ShareFD2.create = function(value0) {
    return new ShareFD2(value0);
  };
  return ShareFD2;
}();
var Normally = /* @__PURE__ */ function() {
  function Normally2(value0) {
    this.value0 = value0;
  }
  ;
  Normally2.create = function(value0) {
    return new Normally2(value0);
  };
  return Normally2;
}();
var BySignal = /* @__PURE__ */ function() {
  function BySignal2(value0) {
    this.value0 = value0;
  }
  ;
  BySignal2.create = function(value0) {
    return new BySignal2(value0);
  };
  return BySignal2;
}();
var toStandardError = unsafeCoerce2;
var toActualStdIOBehaviour = function(b3) {
  if (b3 instanceof Pipe) {
    return "pipe";
  }
  ;
  if (b3 instanceof Ignore) {
    return "ignore";
  }
  ;
  if (b3 instanceof ShareFD) {
    return b3.value0;
  }
  ;
  if (b3 instanceof ShareStream) {
    return b3.value0;
  }
  ;
  throw new Error("Failed pattern match at Node.ChildProcess (line 517, column 28 - line 521, column 33): " + [b3.constructor.name]);
};
var toActualStdIOOptions = /* @__PURE__ */ map17(/* @__PURE__ */ function() {
  var $38 = map18(toActualStdIOBehaviour);
  return function($39) {
    return toNullable($38($39));
  };
}());
var spawn2 = function(cmd) {
  return function(args) {
    var convertOpts = function(opts) {
      return {
        cwd: fromMaybe(_undefined2)(opts.cwd),
        stdio: toActualStdIOOptions(opts.stdio),
        env: toNullable(opts.env),
        detached: opts.detached,
        uid: fromMaybe(_undefined2)(opts.uid),
        gid: fromMaybe(_undefined2)(opts.gid)
      };
    };
    var $40 = spawnImpl(cmd)(args);
    return function($41) {
      return $40(convertOpts($41));
    };
  };
};
var runChildProcess = function(v) {
  return v;
};
var pipe = /* @__PURE__ */ function() {
  return map17(Just.create)([Pipe.value, Pipe.value, Pipe.value]);
}();
var mkExit = function(code3) {
  return function(signal) {
    var fromSignal = composeKleisli2(toMaybe)(function() {
      var $43 = map18(BySignal.create);
      return function($44) {
        return $43(fromString2($44));
      };
    }());
    var fromCode = function() {
      var $45 = map18(Normally.create);
      return function($46) {
        return $45(toMaybe($46));
      };
    }();
    var v = alt5(fromCode(code3))(fromSignal(signal));
    if (v instanceof Just) {
      return v.value0;
    }
    ;
    if (v instanceof Nothing) {
      return unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
    }
    ;
    throw new Error("Failed pattern match at Node.ChildProcess (line 170, column 3 - line 172, column 73): " + [v.constructor.name]);
  };
};
var onExit = /* @__PURE__ */ mkOnExit(mkExit);
var mkEffect = unsafeCoerce2;
var missingStream = function(str2) {
  return "Node.ChildProcess: stream not available: " + (str2 + "\nThis is probably because you passed something other than Pipe to the stdio option when you spawned it.");
};
var stderr = /* @__PURE__ */ function() {
  var $47 = unsafeFromNullable(missingStream("stderr"));
  return function($48) {
    return $47(function(v) {
      return v.stderr;
    }(runChildProcess($48)));
  };
}();
var stdin = /* @__PURE__ */ function() {
  var $49 = unsafeFromNullable(missingStream("stdin"));
  return function($50) {
    return $49(function(v) {
      return v.stdin;
    }(runChildProcess($50)));
  };
}();
var stdout = /* @__PURE__ */ function() {
  var $51 = unsafeFromNullable(missingStream("stdout"));
  return function($52) {
    return $51(function(v) {
      return v.stdout;
    }(runChildProcess($52)));
  };
}();
var kill = function(sig) {
  return function(v) {
    return mkEffect(function(v1) {
      return v.kill(toString(sig));
    });
  };
};
var defaultSpawnOptions = /* @__PURE__ */ function() {
  return {
    cwd: Nothing.value,
    stdio: pipe,
    env: Nothing.value,
    detached: false,
    uid: Nothing.value,
    gid: Nothing.value
  };
}();

// output/Node.Stream/foreign.js
function readChunkImpl(Left3) {
  return (Right3) => (chunk) => {
    if (chunk instanceof Buffer) {
      return Right3(chunk);
    } else if (typeof chunk === "string") {
      return Left3(chunk);
    } else {
      throw new Error("Node.Stream.readChunkImpl: Unrecognised chunk type; expected String or Buffer, got: " + chunk);
    }
  };
}
function onDataEitherImpl(readChunk2) {
  return (r) => (f) => () => {
    r.on("data", (data) => {
      f(readChunk2(data))();
    });
  };
}
function writeStringImpl(w) {
  return (enc) => (s2) => (done) => () => w.write(s2, enc, done);
}
function endImpl(w) {
  return (done) => () => {
    w.end(null, null, done);
  };
}

// output/Node.Buffer.Class/index.js
var toString2 = function(dict) {
  return dict.toString;
};

// output/Node.Buffer.Internal/foreign.js
function copyAll(a3) {
  return () => {
    return Buffer.from(a3);
  };
}
function writeInternal(ty) {
  return (value12) => {
    return (offset) => {
      return (buf) => {
        return () => {
          buf["write" + ty](value12, offset);
        };
      };
    };
  };
}
function writeStringInternal(encoding2) {
  return (offset) => {
    return (length8) => {
      return (value12) => {
        return (buff) => {
          return () => {
            return buff.write(value12, offset, length8, encoding2);
          };
        };
      };
    };
  };
}
function setAtOffset(value12) {
  return (offset) => {
    return (buff) => {
      return () => {
        buff[offset] = value12;
      };
    };
  };
}
function copy(srcStart) {
  return (srcEnd) => {
    return (src9) => {
      return (targStart) => {
        return (targ) => {
          return () => {
            return src9.copy(targ, targStart, srcStart, srcEnd);
          };
        };
      };
    };
  };
}
function fill(octet) {
  return (start2) => {
    return (end2) => {
      return (buf) => {
        return () => {
          buf.fill(octet, start2, end2);
        };
      };
    };
  };
}

// output/Node.Buffer.Immutable/foreign.js
function create(size8) {
  return Buffer.alloc(size8);
}
function fromArray2(octets) {
  return Buffer.from(octets);
}
function size2(buff) {
  return buff.length;
}
function toArray2(buff) {
  var json = buff.toJSON();
  return json.data || json;
}
function toArrayBuffer(buff) {
  return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
}
function fromArrayBuffer(ab) {
  return Buffer.from(ab);
}
function fromStringImpl2(str2) {
  return (encoding2) => {
    return Buffer.from(str2, encoding2);
  };
}
function readImpl3(ty) {
  return (offset) => {
    return (buf) => {
      return buf["read" + ty](offset);
    };
  };
}
function readStringImpl(enc) {
  return (start2) => {
    return (end2) => {
      return (buff) => {
        return buff.toString(enc, start2, end2);
      };
    };
  };
}
function getAtOffsetImpl(just) {
  return (nothing) => {
    return (offset) => {
      return (buff) => {
        var octet = buff[offset];
        return octet == null ? nothing : just(octet);
      };
    };
  };
}
function toStringImpl(enc) {
  return (buff) => {
    return buff.toString(enc);
  };
}
function slice3(start2) {
  return (end2) => {
    return (buff) => {
      return buff.slice(start2, end2);
    };
  };
}
function concat2(buffs) {
  return Buffer.concat(buffs);
}
function concatToLength(buffs) {
  return (totalLength) => {
    return Buffer.concat(buffs, totalLength);
  };
}

// output/Node.Buffer.Types/index.js
var UInt8 = /* @__PURE__ */ function() {
  function UInt82() {
  }
  ;
  UInt82.value = new UInt82();
  return UInt82;
}();
var UInt16LE = /* @__PURE__ */ function() {
  function UInt16LE2() {
  }
  ;
  UInt16LE2.value = new UInt16LE2();
  return UInt16LE2;
}();
var UInt16BE = /* @__PURE__ */ function() {
  function UInt16BE2() {
  }
  ;
  UInt16BE2.value = new UInt16BE2();
  return UInt16BE2;
}();
var UInt32LE = /* @__PURE__ */ function() {
  function UInt32LE2() {
  }
  ;
  UInt32LE2.value = new UInt32LE2();
  return UInt32LE2;
}();
var UInt32BE = /* @__PURE__ */ function() {
  function UInt32BE2() {
  }
  ;
  UInt32BE2.value = new UInt32BE2();
  return UInt32BE2;
}();
var Int8 = /* @__PURE__ */ function() {
  function Int82() {
  }
  ;
  Int82.value = new Int82();
  return Int82;
}();
var Int16LE = /* @__PURE__ */ function() {
  function Int16LE2() {
  }
  ;
  Int16LE2.value = new Int16LE2();
  return Int16LE2;
}();
var Int16BE = /* @__PURE__ */ function() {
  function Int16BE2() {
  }
  ;
  Int16BE2.value = new Int16BE2();
  return Int16BE2;
}();
var Int32LE = /* @__PURE__ */ function() {
  function Int32LE2() {
  }
  ;
  Int32LE2.value = new Int32LE2();
  return Int32LE2;
}();
var Int32BE = /* @__PURE__ */ function() {
  function Int32BE2() {
  }
  ;
  Int32BE2.value = new Int32BE2();
  return Int32BE2;
}();
var FloatLE = /* @__PURE__ */ function() {
  function FloatLE2() {
  }
  ;
  FloatLE2.value = new FloatLE2();
  return FloatLE2;
}();
var FloatBE = /* @__PURE__ */ function() {
  function FloatBE2() {
  }
  ;
  FloatBE2.value = new FloatBE2();
  return FloatBE2;
}();
var DoubleLE = /* @__PURE__ */ function() {
  function DoubleLE2() {
  }
  ;
  DoubleLE2.value = new DoubleLE2();
  return DoubleLE2;
}();
var DoubleBE = /* @__PURE__ */ function() {
  function DoubleBE2() {
  }
  ;
  DoubleBE2.value = new DoubleBE2();
  return DoubleBE2;
}();
var showBufferValueType = {
  show: function(v) {
    if (v instanceof UInt8) {
      return "UInt8";
    }
    ;
    if (v instanceof UInt16LE) {
      return "UInt16LE";
    }
    ;
    if (v instanceof UInt16BE) {
      return "UInt16BE";
    }
    ;
    if (v instanceof UInt32LE) {
      return "UInt32LE";
    }
    ;
    if (v instanceof UInt32BE) {
      return "UInt32BE";
    }
    ;
    if (v instanceof Int8) {
      return "Int8";
    }
    ;
    if (v instanceof Int16LE) {
      return "Int16LE";
    }
    ;
    if (v instanceof Int16BE) {
      return "Int16BE";
    }
    ;
    if (v instanceof Int32LE) {
      return "Int32LE";
    }
    ;
    if (v instanceof Int32BE) {
      return "Int32BE";
    }
    ;
    if (v instanceof FloatLE) {
      return "FloatLE";
    }
    ;
    if (v instanceof FloatBE) {
      return "FloatBE";
    }
    ;
    if (v instanceof DoubleLE) {
      return "DoubleLE";
    }
    ;
    if (v instanceof DoubleBE) {
      return "DoubleBE";
    }
    ;
    throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 47, column 29): " + [v.constructor.name]);
  }
};

// output/Node.Buffer.Immutable/index.js
var toString3 = function($7) {
  return toStringImpl(encodingToNode($7));
};
var readString2 = function($8) {
  return readStringImpl(encodingToNode($8));
};
var read4 = /* @__PURE__ */ function() {
  var $9 = show(showBufferValueType);
  return function($10) {
    return readImpl3($9($10));
  };
}();
var getAtOffset = /* @__PURE__ */ function() {
  return getAtOffsetImpl(Just.create)(Nothing.value);
}();
var fromString3 = function(str2) {
  var $11 = fromStringImpl2(str2);
  return function($12) {
    return $11(encodingToNode($12));
  };
};
var concat$prime = concatToLength;

// output/Node.Buffer.Internal/index.js
var show3 = /* @__PURE__ */ show(showBufferValueType);
var writeString = function(dictMonad) {
  return function($43) {
    return writeStringInternal(encodingToNode($43));
  };
};
var write5 = function(dictMonad) {
  return function($44) {
    return writeInternal(show3($44));
  };
};
var unsafeThaw2 = function(dictMonad) {
  var $45 = pure(dictMonad.Applicative0());
  return function($46) {
    return $45($46);
  };
};
var usingToImmutable = function(dictMonad) {
  var unsafeThaw1 = unsafeThaw2(dictMonad);
  return function(f) {
    return function(x) {
      return unsafeThaw1(f(x));
    };
  };
};
var unsafeFreeze2 = function(dictMonad) {
  var $47 = pure(dictMonad.Applicative0());
  return function($48) {
    return $47($48);
  };
};
var usingFromImmutable = function(dictMonad) {
  var map35 = map(dictMonad.Bind1().Apply0().Functor0());
  var unsafeFreeze1 = unsafeFreeze2(dictMonad);
  return function(f) {
    return function(buf) {
      return map35(f)(unsafeFreeze1(buf));
    };
  };
};
var toString4 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(m) {
    return usingFromImmutable1(toString3(m));
  };
};
var toArrayBuffer2 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(toArrayBuffer);
};
var toArray3 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(toArray2);
};
var slice4 = slice3;
var size3 = function(dictMonad) {
  return usingFromImmutable(dictMonad)(size2);
};
var readString3 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(m) {
    return function(o) {
      return function(o$prime) {
        return usingFromImmutable1(readString2(m)(o)(o$prime));
      };
    };
  };
};
var read5 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(t) {
    return function(o) {
      return usingFromImmutable1(read4(t)(o));
    };
  };
};
var getAtOffset2 = function(dictMonad) {
  var usingFromImmutable1 = usingFromImmutable(dictMonad);
  return function(o) {
    return usingFromImmutable1(getAtOffset(o));
  };
};
var fromString4 = function(dictMonad) {
  var usingToImmutable1 = usingToImmutable(dictMonad);
  return function(s2) {
    return usingToImmutable1(fromString3(s2));
  };
};
var fromArrayBuffer2 = function(dictMonad) {
  return usingToImmutable(dictMonad)(fromArrayBuffer);
};
var fromArray3 = function(dictMonad) {
  return usingToImmutable(dictMonad)(fromArray2);
};
var create2 = function(dictMonad) {
  return usingToImmutable(dictMonad)(create);
};
var concat$prime2 = function(dictMonad) {
  return function(arrs) {
    return function(n) {
      return function(v) {
        return concat$prime(arrs)(n);
      };
    };
  };
};
var concat3 = function(arrs) {
  return function(v) {
    return concat2(arrs);
  };
};

// output/Node.Buffer/index.js
var mutableBufferEffect = {
  create: /* @__PURE__ */ create2(monadEffect),
  freeze: copyAll,
  unsafeFreeze: /* @__PURE__ */ unsafeFreeze2(monadEffect),
  thaw: copyAll,
  unsafeThaw: /* @__PURE__ */ unsafeThaw2(monadEffect),
  fromArray: /* @__PURE__ */ fromArray3(monadEffect),
  fromString: /* @__PURE__ */ fromString4(monadEffect),
  fromArrayBuffer: /* @__PURE__ */ fromArrayBuffer2(monadEffect),
  toArrayBuffer: /* @__PURE__ */ toArrayBuffer2(monadEffect),
  read: /* @__PURE__ */ read5(monadEffect),
  readString: /* @__PURE__ */ readString3(monadEffect),
  toString: /* @__PURE__ */ toString4(monadEffect),
  write: /* @__PURE__ */ write5(monadEffect),
  writeString: /* @__PURE__ */ writeString(monadEffect),
  toArray: /* @__PURE__ */ toArray3(monadEffect),
  getAtOffset: /* @__PURE__ */ getAtOffset2(monadEffect),
  setAtOffset,
  slice: slice4,
  size: /* @__PURE__ */ size3(monadEffect),
  concat: concat3,
  "concat'": /* @__PURE__ */ concat$prime2(monadEffect),
  copy,
  fill,
  Monad0: function() {
    return monadEffect;
  }
};

// output/Node.Stream/index.js
var show4 = /* @__PURE__ */ show(showEncoding);
var pure7 = /* @__PURE__ */ pure(applicativeEffect);
var toString5 = /* @__PURE__ */ toString2(mutableBufferEffect);
var composeKleisliFlipped3 = /* @__PURE__ */ composeKleisliFlipped(bindEffect);
var writeString3 = function(w) {
  return function(enc) {
    return function(s2) {
      return function(cb2) {
        return writeStringImpl(w)(show4(enc))(s2)(function($20) {
          return cb2(toMaybe($20))();
        });
      };
    };
  };
};
var readChunk = /* @__PURE__ */ function() {
  return readChunkImpl(Left.create)(Right.create);
}();
var onDataEither = function(r) {
  return function(cb2) {
    return onDataEitherImpl(readChunk)(r)(cb2);
  };
};
var onData = function(r) {
  return function(cb2) {
    var fromEither2 = function(x) {
      if (x instanceof Left) {
        return $$throw("Stream encoding should not be set");
      }
      ;
      if (x instanceof Right) {
        return pure7(x.value0);
      }
      ;
      throw new Error("Failed pattern match at Node.Stream (line 97, column 5 - line 101, column 17): " + [x.constructor.name]);
    };
    return onDataEither(r)(composeKleisliFlipped3(cb2)(fromEither2));
  };
};
var onDataString = function(r) {
  return function(enc) {
    return function(cb2) {
      return onData(r)(composeKleisliFlipped3(cb2)(toString5(enc)));
    };
  };
};
var end = function(w) {
  return function(cb2) {
    return endImpl(w)(function($22) {
      return cb2(toMaybe($22))();
    });
  };
};

// output/Sunde/index.js
var $$void5 = /* @__PURE__ */ $$void(functorEffect);
var mempty2 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(/* @__PURE__ */ monoidEffect(monoidUnit)));
var pure12 = /* @__PURE__ */ pure(applicativeEither);
var spawn$prime = function(encoding2) {
  return function(killSignal) {
    return function(v) {
      return function(options2) {
        return makeAff(function(cb2) {
          return function __do6() {
            var stdoutRef = $$new("")();
            var stderrRef = $$new("")();
            var process4 = spawn2(v.cmd)(v.args)(options2)();
            (function() {
              if (v.stdin instanceof Just) {
                var write8 = stdin(process4);
                return $$void5(writeString3(write8)(UTF8.value)(v.stdin.value0)($$const(end(write8)(mempty2))))();
              }
              ;
              if (v.stdin instanceof Nothing) {
                return unit;
              }
              ;
              throw new Error("Failed pattern match at Sunde (line 41, column 3 - line 46, column 25): " + [v.stdin.constructor.name]);
            })();
            onDataString(stdout(process4))(encoding2)(function(string) {
              return modify_(function(v1) {
                return v1 + string;
              })(stdoutRef);
            })();
            onDataString(stderr(process4))(encoding2)(function(string) {
              return modify_(function(v1) {
                return v1 + string;
              })(stderrRef);
            })();
            onError(process4)(function($23) {
              return cb2(Left.create(toStandardError($23)));
            })();
            onExit(process4)(function(exit5) {
              return function __do7() {
                var stdout2 = read(stdoutRef)();
                var stderr2 = read(stderrRef)();
                return cb2(pure12({
                  stdout: stdout2,
                  stderr: stderr2,
                  exit: exit5
                }))();
              };
            })();
            return effectCanceler($$void5(kill(killSignal)(process4)));
          };
        });
      };
    };
  };
};
var spawn3 = /* @__PURE__ */ function() {
  return spawn$prime(UTF8.value)(SIGTERM.value);
}();

// output/Backend.CheckTools/index.js
var map19 = /* @__PURE__ */ map(functorAff);
var enumFromTo2 = /* @__PURE__ */ enumFromTo(enumTool)(unfoldable1Array);
var bottom4 = /* @__PURE__ */ bottom(boundedTool);
var top4 = /* @__PURE__ */ top(boundedTool);
var traverse2 = /* @__PURE__ */ traverse(traversableArray)(applicativeAff);
var which = function(os) {
  return function(tool) {
    var cmd = function() {
      if (os instanceof Windows) {
        return "where.exe";
      }
      ;
      if (os instanceof Linux) {
        return "which";
      }
      ;
      if (os instanceof MacOS) {
        return "which";
      }
      ;
      throw new Error("Failed pattern match at Backend.CheckTools (line 41, column 9 - line 44, column 20): " + [os.constructor.name]);
    }();
    var arg = toCommand(tool);
    var spawnCmd = spawn3({
      cmd,
      args: [arg],
      stdin: Nothing.value
    })(defaultSpawnOptions);
    return map19(function(v) {
      if (v.exit instanceof Normally && v.exit.value0 === 0) {
        return new Just(trim(v.stdout));
      }
      ;
      return Nothing.value;
    })(spawnCmd);
  };
};
var getToolsWithPaths = function(os) {
  var getOS = function(tool) {
    return map19(function(v) {
      return new Tuple(tool, v);
    })(which(os)(tool));
  };
  var allTools = enumFromTo2(bottom4)(top4);
  return traverse2(getOS)(allTools);
};

// output/Node.Platform/index.js
var AIX = /* @__PURE__ */ function() {
  function AIX2() {
  }
  ;
  AIX2.value = new AIX2();
  return AIX2;
}();
var Darwin = /* @__PURE__ */ function() {
  function Darwin2() {
  }
  ;
  Darwin2.value = new Darwin2();
  return Darwin2;
}();
var FreeBSD = /* @__PURE__ */ function() {
  function FreeBSD2() {
  }
  ;
  FreeBSD2.value = new FreeBSD2();
  return FreeBSD2;
}();
var Linux2 = /* @__PURE__ */ function() {
  function Linux3() {
  }
  ;
  Linux3.value = new Linux3();
  return Linux3;
}();
var OpenBSD = /* @__PURE__ */ function() {
  function OpenBSD2() {
  }
  ;
  OpenBSD2.value = new OpenBSD2();
  return OpenBSD2;
}();
var SunOS = /* @__PURE__ */ function() {
  function SunOS2() {
  }
  ;
  SunOS2.value = new SunOS2();
  return SunOS2;
}();
var Win32 = /* @__PURE__ */ function() {
  function Win322() {
  }
  ;
  Win322.value = new Win322();
  return Win322;
}();
var Android = /* @__PURE__ */ function() {
  function Android2() {
  }
  ;
  Android2.value = new Android2();
  return Android2;
}();
var fromString6 = function(v) {
  if (v === "aix") {
    return new Just(AIX.value);
  }
  ;
  if (v === "darwin") {
    return new Just(Darwin.value);
  }
  ;
  if (v === "freebsd") {
    return new Just(FreeBSD.value);
  }
  ;
  if (v === "linux") {
    return new Just(Linux2.value);
  }
  ;
  if (v === "openbsd") {
    return new Just(OpenBSD.value);
  }
  ;
  if (v === "sunos") {
    return new Just(SunOS.value);
  }
  ;
  if (v === "win32") {
    return new Just(Win32.value);
  }
  ;
  if (v === "android") {
    return new Just(Android.value);
  }
  ;
  return Nothing.value;
};

// output/Node.Process/foreign.js
var import_process = __toESM(require("process"), 1);

// output/Node.Process/index.js
var platformStr = /* @__PURE__ */ function() {
  return import_process.default.platform;
}();
var platform = /* @__PURE__ */ fromString6(platformStr);

// output/Backend.OperatingSystem/index.js
var operatingSystem\u0294 = /* @__PURE__ */ bind(bindMaybe)(platform)(function(v) {
  if (v instanceof Linux2) {
    return new Just(Linux.value);
  }
  ;
  if (v instanceof Darwin) {
    return new Just(MacOS.value);
  }
  ;
  if (v instanceof Win32) {
    return new Just(Windows.value);
  }
  ;
  return Nothing.value;
});

// output/Node.FS.Async/foreign.js
var import_fs = require("fs");
function handleCallbackImpl(left4, right3, f) {
  return function(err, value12) {
    if (err) {
      f(left4(err))();
    } else {
      f(right3(value12))();
    }
  };
}

// output/Node.FS.Internal/index.js
var mkEffect2 = unsafeCoerce2;

// output/Node.FS.Async/index.js
var show5 = /* @__PURE__ */ show(showEncoding);
var handleCallback = function(cb2) {
  return handleCallbackImpl(Left.create, Right.create, cb2);
};
var readTextFile = function(encoding2) {
  return function(file) {
    return function(cb2) {
      return mkEffect2(function(v) {
        return import_fs.readFile(file, {
          encoding: show5(encoding2)
        }, handleCallback(cb2));
      });
    };
  };
};
var writeTextFile = function(encoding2) {
  return function(file) {
    return function(buff) {
      return function(cb2) {
        return mkEffect2(function(v) {
          return import_fs.writeFile(file, buff, {
            encoding: show5(encoding2)
          }, handleCallback(cb2));
        });
      };
    };
  };
};

// output/Node.FS.Aff/index.js
var voidLeft3 = /* @__PURE__ */ voidLeft(functorEffect);
var toAff = function(p2) {
  return makeAff(function(k) {
    return voidLeft3(p2(k))(nonCanceler);
  });
};
var toAff2 = function(f) {
  return function(a3) {
    return function(b3) {
      return toAff(f(a3)(b3));
    };
  };
};
var toAff3 = function(f) {
  return function(a3) {
    return function(b3) {
      return function(c2) {
        return toAff(f(a3)(b3)(c2));
      };
    };
  };
};
var writeTextFile2 = /* @__PURE__ */ toAff3(writeTextFile);
var readTextFile2 = /* @__PURE__ */ toAff2(readTextFile);

// output/Node.FS.Sync/foreign.js
var import_fs2 = require("fs");

// output/Node.FS.Sync/index.js
var exists = function(file) {
  return mkEffect2(function(v) {
    return import_fs2.existsSync(file);
  });
};

// output/Node.Path/foreign.js
var import_path = __toESM(require("path"), 1);
var normalize = import_path.default.normalize;
function concat5(segments) {
  return import_path.default.join.apply(this, segments);
}
var basename = import_path.default.basename;
var extname = import_path.default.extname;
var sep = import_path.default.sep;
var delimiter = import_path.default.delimiter;
var parse2 = import_path.default.parse;
var isAbsolute = import_path.default.isAbsolute;

// output/Backend.PureScriptSolutionDefinition/index.js
var bind6 = /* @__PURE__ */ bind(bindAff);
var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
var discard2 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var when2 = /* @__PURE__ */ when(applicativeAff);
var throwError2 = /* @__PURE__ */ throwError(monadThrowAff);
var readJSON2 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignRecord()(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "name";
  }
})(readForeignString)(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "projects";
  }
})(/* @__PURE__ */ readForeignArray(readForeignPureScriptProj))(readForeignFieldsNilRowRo)()())()()));
var show6 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
var pure8 = /* @__PURE__ */ pure(applicativeAff);
var readSolutionDefinition = function(dir2) {
  var path5 = concat5([dir2, pureScriptSolutionFileName]);
  return bind6(liftEffect3(exists(path5)))(function(fileExists) {
    return discard2(when2(!fileExists)(throwError2(error("No .purescript-solution.json file in " + path5))))(function() {
      return bind6(readTextFile2(UTF8.value)(path5))(function(strFile) {
        var v = readJSON2(strFile);
        if (v instanceof Left) {
          return throwError2(error("Invalid .purescript-solution.json file:\n" + show6(v.value0)));
        }
        ;
        if (v instanceof Right) {
          return pure8(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Backend.PureScriptSolutionDefinition (line 24, column 3 - line 28, column 30): " + [v.constructor.name]);
      });
    });
  });
};

// output/Biz.IPC.SelectFolder.Types/index.js
var inj3 = /* @__PURE__ */ inj();
var inj1 = /* @__PURE__ */ inj3({
  reflectSymbol: function() {
    return "invalidSpagoDhall";
  }
});
var intercalate7 = /* @__PURE__ */ intercalate2(foldableNonEmptyList)(monoidString);
var map20 = /* @__PURE__ */ map(functorNonEmptyList);
var validSpagoDhallKey = /* @__PURE__ */ function() {
  return $$Proxy.value;
}();
var validSpagoDhall = /* @__PURE__ */ inj3({
  reflectSymbol: function() {
    return "validSpagoDhall";
  }
})(validSpagoDhallKey);
var nothingSelectedKey = /* @__PURE__ */ function() {
  return $$Proxy.value;
}();
var nothingSelected = /* @__PURE__ */ inj3({
  reflectSymbol: function() {
    return "nothingSelected";
  }
})(nothingSelectedKey)({});
var noSpagoDhallKey = /* @__PURE__ */ function() {
  return $$Proxy.value;
}();
var noSpagoDhall = /* @__PURE__ */ inj3({
  reflectSymbol: function() {
    return "noSpagoDhall";
  }
})(noSpagoDhallKey)({});
var invalidSpagoDhallKey = /* @__PURE__ */ function() {
  return $$Proxy.value;
}();
var invalidSpagoDhall = function(errs) {
  return inj1(invalidSpagoDhallKey)(intercalate7("\n")(map20(renderForeignError)(errs)));
};

// output/Biz.Github.Types/index.js
var writeForeignPersonalAcces = writeForeignString;
var readForeignPersonalAccess = readForeignString;

// output/Biz.Preferences.Types/index.js
var defaultAppPreferences = /* @__PURE__ */ function() {
  return {
    solutions: [],
    githubPersonalAccessToken: Nothing.value
  };
}();

// output/Electron/foreign.js
var import_electron = require("electron");
var whenReadyImpl = () => import_electron.app.whenReady();
var newBrowserWindow = (config) => () => new import_electron.BrowserWindow(config);
var loadFileImpl = (name15) => (browserWindow) => () => browserWindow.loadFile(name15);
var onIPCMainMessage = (listener) => (channel) => () => {
  import_electron.ipcMain.on(channel, listener);
};
var showOpenDialogImpl = (options2) => (window2) => () => import_electron.dialog.showOpenDialog(window2, options2);
var sendToWebContentsImpl = (message2) => (channel) => (win) => () => {
  win.webContents.send(channel, message2);
};
var getUserDataDirectory = () => import_electron.app.getPath("userData");
var isDefaultProtocolClient = (protocol2) => () => import_electron.app.isDefaultProtocolClient(protocol2);
var setAsDefaultProtocolClient = (protocol2) => () => import_electron.app.setAsDefaultProtocolClient(protocol2);
var onBeforeRedirectRequest = (redirectUri) => (urlCallback) => () => {
  const filter5 = {
    urls: [redirectUri + "*"]
  };
  session.defaultSession.webRequest.onBeforeRequest(filter5, (details2, callback2) => {
    const url2 = details2.url;
    urlCallback(url2)();
    callback2({
      cancel: false
    });
  });
};

// output/Control.Promise/foreign.js
function thenImpl(promise2) {
  return function(errCB) {
    return function(succCB) {
      return function() {
        promise2.then(succCB, errCB);
      };
    };
  };
}

// output/Control.Promise/index.js
var voidRight2 = /* @__PURE__ */ voidRight(functorEffect);
var mempty3 = /* @__PURE__ */ mempty(monoidCanceler);
var identity11 = /* @__PURE__ */ identity(categoryFn);
var alt6 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
var unsafeReadTagged2 = /* @__PURE__ */ unsafeReadTagged(monadIdentity);
var map21 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
var readString5 = /* @__PURE__ */ readString(monadIdentity);
var bind7 = /* @__PURE__ */ bind(bindAff);
var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectAff);
var toAff$prime = function(customCoerce) {
  return function(p2) {
    return makeAff(function(cb2) {
      return voidRight2(mempty3)(thenImpl(p2)(function($14) {
        return cb2(Left.create(customCoerce($14)))();
      })(function($15) {
        return cb2(Right.create($15))();
      }));
    });
  };
};
var coerce3 = function(fn) {
  return either(function(v) {
    return error("Promise failed, couldn't extract JS Error or String");
  })(identity11)(runExcept(alt6(unsafeReadTagged2("Error")(fn))(map21(error)(readString5(fn)))));
};
var toAff4 = /* @__PURE__ */ toAff$prime(coerce3);
var toAffE = function(f) {
  return bind7(liftEffect4(f))(toAff4);
};

// output/Untagged.Castable/index.js
var cast = function() {
  return unsafeCoerce2;
};

// output/Electron/index.js
var cast2 = /* @__PURE__ */ cast();
var waitUntilAppReady = /* @__PURE__ */ toAffE(whenReadyImpl);
var showOpenDialog = function() {
  return function(options2) {
    return function(win) {
      return toAffE(showOpenDialogImpl(cast2(options2))(win));
    };
  };
};
var sendToWebContents = function(dictWriteForeign) {
  var write8 = write3(dictWriteForeign);
  return function(msg) {
    return function(channel) {
      return function(window2) {
        return sendToWebContentsImpl(write8(msg))(channel)(window2);
      };
    };
  };
};
var openDirectory = "openDirectory";
var loadFile = function(s2) {
  return function(bw) {
    return toAffE(loadFileImpl(s2)(bw));
  };
};

// output/Biz.Preferences/index.js
var map23 = /* @__PURE__ */ map(functorEffect);
var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectEffect);
var bind8 = /* @__PURE__ */ bind(bindAff);
var githubPersonalAccessTokenIsSymbol = {
  reflectSymbol: function() {
    return "githubPersonalAccessToken";
  }
};
var solutionsIsSymbol = {
  reflectSymbol: function() {
    return "solutions";
  }
};
var writeJSON2 = /* @__PURE__ */ writeJSON(/* @__PURE__ */ writeForeignRecord()(/* @__PURE__ */ writeForeignFieldsCons(githubPersonalAccessTokenIsSymbol)(/* @__PURE__ */ writeForeignMaybe(writeForeignPersonalAcces))(/* @__PURE__ */ writeForeignFieldsCons(solutionsIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignString))(writeForeignFieldsNilRowR)()()())()()()));
var liftEffect1 = /* @__PURE__ */ liftEffect(monadEffectAff);
var discard3 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var when3 = /* @__PURE__ */ when(applicativeAff);
var readJSON3 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignRecord()(/* @__PURE__ */ readForeignFieldsCons(githubPersonalAccessTokenIsSymbol)(/* @__PURE__ */ readForeignMaybe(readForeignPersonalAccess))(/* @__PURE__ */ readForeignFieldsCons(solutionsIsSymbol)(/* @__PURE__ */ readForeignArray(readForeignString))(readForeignFieldsNilRowRo)()())()()));
var throwError3 = /* @__PURE__ */ throwError(monadThrowAff);
var show7 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
var pure9 = /* @__PURE__ */ pure(applicativeAff);
var getPreferencesFilePath = function(dictMonadEffect) {
  return liftEffect(dictMonadEffect)(map23(function(v) {
    return concat5([v, "settings.json"]);
  })(liftEffect5(getUserDataDirectory)));
};
var getPreferencesFilePath1 = /* @__PURE__ */ getPreferencesFilePath(monadEffectAff);
var writeAppPreferences = function(settings) {
  return bind8(getPreferencesFilePath1)(function(settingsFilePath) {
    return writeTextFile2(UTF8.value)(settingsFilePath)(writeJSON2(settings));
  });
};
var readAppPreferences = /* @__PURE__ */ bind8(getPreferencesFilePath1)(function(settingsFilePath) {
  return bind8(liftEffect1(exists(settingsFilePath)))(function(settingsFileExists) {
    return discard3(when3(!settingsFileExists)(writeAppPreferences(defaultAppPreferences)))(function() {
      return bind8(readTextFile2(UTF8.value)(settingsFilePath))(function(textContent2) {
        var v = readJSON3(textContent2);
        if (v instanceof Left) {
          return throwError3(error(show7(v.value0)));
        }
        ;
        if (v instanceof Right) {
          return pure9(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Biz.Preferences (line 34, column 3 - line 36, column 35): " + [v.constructor.name]);
      });
    });
  });
});

// output/Biz.IPC.MessageToMainHandler/index.js
var bind9 = /* @__PURE__ */ bind(bindAff);
var showOpenDialog1 = /* @__PURE__ */ showOpenDialog();
var map24 = /* @__PURE__ */ map(functorAff);
var pure10 = /* @__PURE__ */ pure(applicativeAff);
var liftEffect6 = /* @__PURE__ */ liftEffect(monadEffectAff);
var readForeignRecord3 = /* @__PURE__ */ readForeignRecord();
var readForeignFieldsCons2 = /* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "dependencies";
  }
})(/* @__PURE__ */ readForeignArray(readForeignProjectName));
var readJSON4 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons2(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "name";
  }
})(readForeignProjectName)(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "packages";
  }
})(/* @__PURE__ */ readForeignObject(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons2(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "repo";
  }
})(readForeignRepository)(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "version";
  }
})(readForeignVersion)(readForeignFieldsNilRowRo)()())()())()())))(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "repository";
  }
})(/* @__PURE__ */ readForeignMaybe(readForeignRepository))(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "sources";
  }
})(/* @__PURE__ */ readForeignArray(readForeignSourceGlob))(readForeignFieldsNilRowRo)()())()())()())()())()()));
var $$for2 = /* @__PURE__ */ $$for(applicativeAff)(traversableArray);
var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
var sendToWebContents2 = /* @__PURE__ */ sendToWebContents(writeForeignMessageToRend);
var showOpenDialog2 = function(window2) {
  return bind9(showOpenDialog1({
    properties: [openDirectory]
  })(window2))(function(result) {
    return map24(UserSelectedFile.create)(function() {
      var v = function(v1) {
        return pure10(Nothing.value);
      };
      if (!result.canceled) {
        if (result.filePaths.length === 1) {
          return map24(Just.create)(readTextFile2(UTF8.value)(result["filePaths"][0]));
        }
        ;
        return v(true);
      }
      ;
      return v(true);
    }());
  });
};
var showFolderSelector = function(window2) {
  return bind9(showOpenDialog1({
    properties: [openDirectory]
  })(window2))(function(result) {
    return bind9(function() {
      var v = function(v1) {
        return pure10(nothingSelected);
      };
      if (!result.canceled) {
        var $81 = fromArray(result.filePaths);
        if ($81 instanceof Just) {
          var spagoPath = concat5([head2($81.value0), "spago.dhall"]);
          return bind9(liftEffect6(exists(spagoPath)))(function(pathExists\u0294) {
            var packagesPath = concat5([head2($81.value0), "packages.dhall"]);
            return bind9(liftEffect6(exists(packagesPath)))(function(path2Exists\u0294) {
              var $82 = !pathExists\u0294 || !path2Exists\u0294;
              if ($82) {
                return pure10(noSpagoDhall);
              }
              ;
              return bind9(readTextFile2(UTF8.value)(spagoPath))(function(spagoDhall) {
                return bind9(spawn3({
                  cmd: "dhall-to-json",
                  args: [],
                  stdin: new Just(spagoDhall)
                })(defaultSpawnOptions))(function(v1) {
                  return pure10(either(invalidSpagoDhall)(validSpagoDhall)(readJSON4(v1.stdout)));
                });
              });
            });
          });
        }
        ;
        return v(true);
      }
      ;
      return v(true);
    }())(function(v) {
      return pure10(new ShowFolderSelectorResponse(v));
    });
  });
};
var getProjectDefinitions = /* @__PURE__ */ bind9(readAppPreferences)(function(prefs) {
  return bind9($$for2(prefs.solutions)(function(fp) {
    return map24(function(v) {
      return new Tuple(fp, v);
    })(readSolutionDefinition(fp));
  }))(function(projects) {
    return pure10(new GetPureScriptSolutionDefinitionsResponse(projects));
  });
});
var getInstalledTools = /* @__PURE__ */ function() {
  return map24(GetInstalledToolsResponse.create)(maybe(pure10(UnsupportedOperatingSystem.value))(map24(ToolsResult.create))(mapFlipped(functorMaybe)(operatingSystem\u0294)(getToolsWithPaths)));
}();
var handleMessageToMain = function(window2) {
  return function(incomingChannel) {
    return bind9(function() {
      if (incomingChannel instanceof ShowFolderSelectorChannel) {
        return map24(Just.create)(showFolderSelector(window2));
      }
      ;
      if (incomingChannel instanceof ShowOpenDialogChannel) {
        return map24(Just.create)(showOpenDialog2(window2));
      }
      ;
      if (incomingChannel instanceof GetInstalledToolsChannel) {
        return map24(Just.create)(getInstalledTools);
      }
      ;
      if (incomingChannel instanceof GetPureScriptSolutionDefinitionsChannel) {
        return map24(Just.create)(getProjectDefinitions);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.MessageToMainHandler (line 33, column 15 - line 37, column 77): " + [incomingChannel.constructor.name]);
    }())(function(response\u0294) {
      return liftEffect6(for_2(response\u0294)(function(v) {
        return sendToWebContents2(v)(mainToRendererChannelName(messageToRendererToChannel(v)))(window2);
      }));
    });
  };
};

// output/Web.Event.EventTarget/foreign.js
function eventListener(fn) {
  return function() {
    return function(event) {
      return fn(event)();
    };
  };
}
function addEventListener(type) {
  return function(listener) {
    return function(useCapture) {
      return function(target5) {
        return function() {
          return target5.addEventListener(type, listener, useCapture);
        };
      };
    };
  };
}
function removeEventListener2(type) {
  return function(listener) {
    return function(useCapture) {
      return function(target5) {
        return function() {
          return target5.removeEventListener(type, listener, useCapture);
        };
      };
    };
  };
}

// output/Backend.IPC.Handler/index.js
var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorArray);
var enumFromTo3 = /* @__PURE__ */ enumFromTo(enumRendererToMainChannel)(unfoldable1Array);
var bottom5 = /* @__PURE__ */ bottom(boundedRendererToMainChan);
var top5 = /* @__PURE__ */ top(boundedRendererToMainChan);
var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableArray);
var registerHandler = function(channel) {
  return function(handle) {
    return function __do6() {
      var listener = eventListener($$const(launchAff_(handle)))();
      return onIPCMainMessage(listener)(rendererToMainChannelName(channel))();
    };
  };
};
var registerAllHandlers = function(window2) {
  var allHandlers = mapFlipped2(enumFromTo3(bottom5)(top5))(function(channel) {
    var handler2 = handleMessageToMain(window2)(channel);
    return new Tuple(channel, handler2);
  });
  return for_3(allHandlers)(uncurry(registerHandler));
};

// output/Biz.Protocol/index.js
var duckProtocol = "duck";

// output/Backend.Protocol/index.js
var unless2 = /* @__PURE__ */ unless(applicativeEffect);
var show8 = /* @__PURE__ */ show(showProtocol);
var registerProtocol = function __do() {
  var protocolIsRegistered = liftEffect(monadEffectEffect)(isDefaultProtocolClient(duckProtocol))();
  return unless2(protocolIsRegistered)(function __do6() {
    var registeredNow = setAsDefaultProtocolClient(duckProtocol)();
    return unless2(registeredNow)(unsafeCrashWith("Failed to set " + (show8(duckProtocol) + " to be handle by this application")))();
  })();
};

// output/Biz.Github/index.js
var redirectURL = "duck://127.0.0.1/oauth/github/redirect";

// output/Effect.Console/foreign.js
var log2 = function(s2) {
  return function() {
    console.log(s2);
  };
};

// output/Effect.Class.Console/index.js
var log3 = function(dictMonadEffect) {
  var $51 = liftEffect(dictMonadEffect);
  return function($52) {
    return $51(log2($52));
  };
};

// output/React.Basic.DOM.Server/foreign.js
var import_server = __toESM(require_server_node(), 1);
var renderToString = import_server.default.renderToString;
var renderToStaticMarkup = import_server.default.renderToStaticMarkup;

// output/React.Basic.DOM/foreign.js
var import_react_dom = __toESM(require_react_dom(), 1);
var createPortal = (jsx3) => (node) => import_react_dom.default.createPortal(jsx3, node);

// output/React.Basic/foreign.js
var import_react = __toESM(require_react(), 1);
var createElement = import_react.createElement;
var Fragment = import_react.Fragment;
var empty4 = null;
function element(component25) {
  return (props) => Array.isArray(props.children) ? createElement.apply(null, [component25, props].concat(props.children)) : createElement(component25, props);
}
function fragment(children2) {
  return createElement.apply(null, [Fragment, null].concat(children2));
}

// output/React.Basic/index.js
var semigroupJSX = {
  append: function(a3) {
    return function(b3) {
      return fragment([a3, b3]);
    };
  }
};
var monoidJSX = {
  mempty: empty4,
  Semigroup0: function() {
    return semigroupJSX;
  }
};

// output/React.Basic.DOM.Internal/foreign.js
var import_react2 = __toESM(require_react(), 1);
var mergeStyles = (styles) => Object.assign.apply(null, [{}].concat(styles));
var unsafeCreateDOMComponent_ = (createElement9) => (el8) => {
  const flattenDataProp2 = (props, ref) => {
    var data = null;
    if (props._data != null) {
      data = { _data: void 0 };
      Object.entries(props._data).forEach(function(entry) {
        data["data-" + entry[0]] = entry[1];
      });
    }
    var aria = null;
    if (props._aria != null) {
      aria = { _aria: void 0 };
      Object.entries(props._aria).forEach(function(entry) {
        aria["aria-" + entry[0]] = entry[1];
      });
    }
    return Object.assign({ ref }, props, data, aria);
  };
  return () => {
    const c2 = import_react2.default.forwardRef((props, ref) => createElement9(el8)(flattenDataProp2(props, ref)));
    c2.displayName = el8;
    return c2;
  };
};

// output/React.Basic.DOM.Internal/index.js
var unsafeCreateDOMComponent = /* @__PURE__ */ unsafeCreateDOMComponent_(element);
var semigroupCSS = {
  append: function(a3) {
    return function(b3) {
      return mergeStyles([b3, a3]);
    };
  }
};
var css = unsafeCoerce2;
var monoidCSS = {
  mempty: /* @__PURE__ */ css({}),
  Semigroup0: function() {
    return semigroupCSS;
  }
};

// output/React.Basic.DOM.Generated/index.js
var _ul$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("ul"));
var ul$prime = function() {
  return _ul$prime;
};
var ul$prime1 = /* @__PURE__ */ ul$prime();
var ul = function() {
  return element(ul$prime1);
};
var ul1 = /* @__PURE__ */ ul();
var ul_ = function(children2) {
  return ul1({
    children: children2
  });
};
var _span$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("span"));
var span$prime = function() {
  return _span$prime;
};
var _li$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("li"));
var li$prime = function() {
  return _li$prime;
};
var li$prime1 = /* @__PURE__ */ li$prime();
var li = function() {
  return element(li$prime1);
};
var li1 = /* @__PURE__ */ li();
var li_ = function(children2) {
  return li1({
    children: children2
  });
};
var _label$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("label"));
var label$prime = function() {
  return _label$prime;
};
var _h3$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h3"));
var h3$prime = function() {
  return _h3$prime;
};
var h3$prime1 = /* @__PURE__ */ h3$prime();
var h3 = function() {
  return element(h3$prime1);
};
var h31 = /* @__PURE__ */ h3();
var h3_ = function(children2) {
  return h31({
    children: children2
  });
};
var _h2$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h2"));
var h2$prime = function() {
  return _h2$prime;
};
var _h1$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h1"));
var h1$prime = function() {
  return _h1$prime;
};
var h1$prime1 = /* @__PURE__ */ h1$prime();
var h1 = function() {
  return element(h1$prime1);
};
var h11 = /* @__PURE__ */ h1();
var h1_ = function(children2) {
  return h11({
    children: children2
  });
};
var _div$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("div"));
var div$prime = function() {
  return _div$prime;
};
var div$prime1 = /* @__PURE__ */ div$prime();
var div3 = function() {
  return element(div$prime1);
};
var div1 = /* @__PURE__ */ div3();
var div_ = function(children2) {
  return div1({
    children: children2
  });
};
var _code$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("code"));
var code$prime = function() {
  return _code$prime;
};
var _a$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("a"));
var a$prime = function() {
  return _a$prime;
};

// output/React.Basic.DOM/index.js
var text = unsafeCoerce2;

// output/React.Basic.Hooks/foreign.js
var import_react3 = __toESM(require_react(), 1);
var useEqCache = (eq5, a3) => {
  const memoRef = import_react3.default.useRef(a3);
  if (memoRef.current !== a3 && !eq5(memoRef.current, a3)) {
    memoRef.current = a3;
  }
  return memoRef.current;
};
function reactChildrenToArray(children2) {
  return import_react3.default.Children.toArray(children2);
}
var memo_ = import_react3.default.memo;
var memoEq_ = import_react3.default.memo;
function useState_(tuple, initialState) {
  const [state3, setState] = import_react3.default.useState(typeof initialState === "function" ? () => initialState : initialState);
  if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) {
    setState.$$reactBasicHooks$$cachedSetState = (update) => () => setState(update);
  }
  return tuple(state3, setState.$$reactBasicHooks$$cachedSetState);
}
function useEffect_(eq5, deps, effect) {
  const memoizedKey = useEqCache(eq5, deps);
  import_react3.default.useEffect(effect, [memoizedKey]);
}
function useEffectAlways_(effect) {
  return import_react3.default.useEffect(effect);
}
function useLayoutEffectAlways_(effect) {
  return import_react3.default.useLayoutEffect(effect);
}
var useRef_ = import_react3.default.useRef;
function readRef_(ref) {
  return ref.current;
}
function writeRef_(ref, a3) {
  ref.current = a3;
}
var useContext_ = import_react3.default.useContext;
var useDebugValue_ = import_react3.default.useDebugValue;
var useId_ = import_react3.default.useId;
var useDeferredValue_ = import_react3.default.useDeferredValue;
var useSyncExternalStore2_ = import_react3.default.useSyncExternalStore;
var useSyncExternalStore3_ = import_react3.default.useSyncExternalStore;
function unsafeSetDisplayName(displayName2, component25) {
  component25.displayName = displayName2;
  component25.toString = () => displayName2;
  return component25;
}

// output/Control.Bind.Indexed/index.js
var ibind = function(dict) {
  return dict.ibind;
};

// output/React.Basic.Hooks.Internal/index.js
var map26 = /* @__PURE__ */ map(functorEffect);
var apply4 = /* @__PURE__ */ apply(applyEffect);
var pure11 = /* @__PURE__ */ pure(applicativeEffect);
var Render = function(x) {
  return x;
};
var unsafeHook = Render;
var ixFunctorRender = {
  imap: function(f) {
    return function(v) {
      return map26(f)(v);
    };
  }
};
var ixApplyRender = {
  iapply: function(v) {
    return function(v1) {
      return apply4(v)(v1);
    };
  },
  IxFunctor0: function() {
    return ixFunctorRender;
  }
};
var ixBindRender = {
  ibind: function(v) {
    return function(f) {
      return function __do6() {
        var a3 = v();
        var v1 = f(a3);
        return v1();
      };
    };
  },
  IxApply0: function() {
    return ixApplyRender;
  }
};
var functorRender = {
  map: function(f) {
    return function(v) {
      return map26(f)(v);
    };
  }
};
var discard4 = function(dictIxBind) {
  return ibind(dictIxBind);
};
var coerceHook = function() {
  return function(v) {
    return v;
  };
};
var bind10 = function(dictIxBind) {
  return ibind(dictIxBind);
};
var applyRender = function(dictTypeEquals) {
  return {
    apply: function(v) {
      return function(v1) {
        return apply4(v)(v1);
      };
    },
    Functor0: function() {
      return functorRender;
    }
  };
};
var applicativeRender = function(dictTypeEquals) {
  var applyRender1 = applyRender(dictTypeEquals);
  return {
    pure: function(a3) {
      return pure11(a3);
    },
    Apply0: function() {
      return applyRender1;
    }
  };
};

// output/Unsafe.Reference/foreign.js
function reallyUnsafeRefEq(a3) {
  return function(b3) {
    return a3 === b3;
  };
}

// output/React.Basic.Hooks/index.js
var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorRender);
var rmap2 = /* @__PURE__ */ rmap(bifunctorTuple);
var map27 = /* @__PURE__ */ map(functorEffect);
var writeRef = /* @__PURE__ */ runEffectFn2(writeRef_);
var useState = function(initialState) {
  return unsafeHook(function() {
    return useState_(mkFn2(Tuple.create), initialState);
  });
};
var useState$prime = function(initialState) {
  return mapFlipped3(useState(initialState))(rmap2(function(v) {
    return function($36) {
      return v($$const($36));
    };
  }));
};
var useRef = function(initialValue) {
  return unsafeHook(function() {
    return useRef_(initialValue);
  });
};
var useLayoutEffectAlways = function(effect) {
  return unsafeHook(function() {
    return useLayoutEffectAlways_(effect);
  });
};
var useEffectOnce = function(effect) {
  return unsafeHook(function() {
    return useEffect_(function(v, v1) {
      return true;
    }, unit, effect);
  });
};
var useEffectAlways = function(effect) {
  return unsafeHook(function() {
    return useEffectAlways_(effect);
  });
};
var unsafeReactFunctionComponent = unsafeCoerce2;
var unsafeDiscardRenderEffects = unsafeCoerce2;
var unsafeReactComponent = function() {
  return function() {
    return function(name15) {
      return function(renderFn) {
        var c2 = unsafeReactFunctionComponent(function(props) {
          return unsafeDiscardRenderEffects(renderFn(props))();
        });
        return function() {
          return unsafeSetDisplayName(name15, c2);
        };
      };
    };
  };
};
var unsafeReactComponent1 = /* @__PURE__ */ unsafeReactComponent()();
var readRef = /* @__PURE__ */ runEffectFn1(readRef_);
var readRefMaybe = function(a3) {
  return map27(toMaybe)(readRef(a3));
};
var reactComponent = function() {
  return function() {
    return function() {
      return unsafeReactComponent1;
    };
  };
};
var reactComponent1 = /* @__PURE__ */ reactComponent()()();
var reactChildrenFromArray = unsafeCoerce2;
var component = function(name15) {
  return function(renderFn) {
    return function __do6() {
      var c2 = reactComponent1(name15)(function($38) {
        return renderFn(function(v) {
          return v.nested;
        }($38));
      })();
      var $39 = element(c2);
      return function($40) {
        return $39(function(v) {
          return {
            nested: v
          };
        }($40));
      };
    };
  };
};

// output/Uncurried.RWSET/index.js
var More = /* @__PURE__ */ function() {
  function More2(value0) {
    this.value0 = value0;
  }
  ;
  More2.create = function(value0) {
    return new More2(value0);
  };
  return More2;
}();
var Lift = /* @__PURE__ */ function() {
  function Lift2(value0) {
    this.value0 = value0;
  }
  ;
  Lift2.create = function(value0) {
    return new Lift2(value0);
  };
  return Lift2;
}();
var Stop = /* @__PURE__ */ function() {
  function Stop2(value0, value1, value22) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
  }
  ;
  Stop2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return new Stop2(value0, value1, value22);
      };
    };
  };
  return Stop2;
}();
var monadTransRWSET = function(dictMonoid) {
  var mempty10 = mempty(dictMonoid);
  return {
    lift: function(dictMonad) {
      var map110 = map(dictMonad.Bind1().Apply0().Functor0());
      return function(m) {
        return function(v, state3, v1, lift$prime, v2, done) {
          return lift$prime(map110(function(a3) {
            return function(v3) {
              return done(state3, a3, mempty10);
            };
          })(m));
        };
      };
    }
  };
};
var functorRWSET = {
  map: function(f) {
    return function(v) {
      return function(environment, state0, more, lift$prime, error3, done) {
        return more(function(v1) {
          return v(environment, state0, more, lift$prime, error3, function(state1, a3, w) {
            return more(function(v2) {
              return done(state1, f(a3), w);
            });
          });
        });
      };
    };
  }
};
var applyRWSET = function(dictMonoid) {
  var append11 = append(dictMonoid.Semigroup0());
  return {
    apply: function(v) {
      return function(v1) {
        return function(environment, state0, more, lift$prime, error3, done) {
          return more(function(v2) {
            return v(environment, state0, more, lift$prime, error3, function(state1, f, w0) {
              return more(function(v3) {
                return v1(environment, state1, more, lift$prime, error3, function(state22, a3, w1) {
                  return more(function(v4) {
                    return done(state22, f(a3), append11(w0)(w1));
                  });
                });
              });
            });
          });
        };
      };
    },
    Functor0: function() {
      return functorRWSET;
    }
  };
};
var bindRWSET = function(dictMonoid) {
  var append11 = append(dictMonoid.Semigroup0());
  var applyRWSET1 = applyRWSET(dictMonoid);
  return {
    bind: function(v) {
      return function(f) {
        return function(environment, state0, more, lift$prime, error3, done) {
          return more(function(v1) {
            return v(environment, state0, more, lift$prime, error3, function(state1, x, w0) {
              return more(function(v2) {
                var v3 = f(x);
                return v3(environment, state1, more, lift$prime, error3, function(state22, y, w1) {
                  return more(function(v4) {
                    return done(state22, y, append11(w0)(w1));
                  });
                });
              });
            });
          });
        };
      };
    },
    Apply0: function() {
      return applyRWSET1;
    }
  };
};
var applicativeRWSET = function(dictMonoid) {
  var mempty10 = mempty(dictMonoid);
  var applyRWSET1 = applyRWSET(dictMonoid);
  return {
    pure: function(a3) {
      return function(v, state3, v1, v2, v3, done) {
        return done(state3, a3, mempty10);
      };
    },
    Apply0: function() {
      return applyRWSET1;
    }
  };
};
var monadRWSET = function(dictMonoid) {
  var applicativeRWSET1 = applicativeRWSET(dictMonoid);
  var bindRWSET1 = bindRWSET(dictMonoid);
  return {
    Applicative0: function() {
      return applicativeRWSET1;
    },
    Bind1: function() {
      return bindRWSET1;
    }
  };
};
var monadAskRWSET = function(dictMonoid) {
  var mempty10 = mempty(dictMonoid);
  var monadRWSET1 = monadRWSET(dictMonoid);
  return {
    ask: function(environment, state3, v, v1, v2, done) {
      return done(state3, environment, mempty10);
    },
    Monad0: function() {
      return monadRWSET1;
    }
  };
};
var monadEffectRWSET = function(dictMonoid) {
  var lift3 = lift(monadTransRWSET(dictMonoid));
  var monadRWSET1 = monadRWSET(dictMonoid);
  return function(dictMonadEffect) {
    return {
      liftEffect: function() {
        var $258 = lift3(dictMonadEffect.Monad0());
        var $259 = liftEffect(dictMonadEffect);
        return function($260) {
          return $258($259($260));
        };
      }(),
      Monad0: function() {
        return monadRWSET1;
      }
    };
  };
};
var runRWSET = function(dictMonadRec) {
  var Monad0 = dictMonadRec.Monad0();
  var map110 = map(Monad0.Bind1().Apply0().Functor0());
  var pure33 = pure(Monad0.Applicative0());
  var tailRecM3 = tailRecM(dictMonadRec);
  return function(r) {
    return function(s2) {
      return function(v) {
        var go2 = function($copy_step) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(step3) {
            var v1 = step3(unit);
            if (v1 instanceof More) {
              $copy_step = v1.value0;
              return;
            }
            ;
            if (v1 instanceof Lift) {
              $tco_done = true;
              return map110(Loop.create)(v1.value0);
            }
            ;
            if (v1 instanceof Stop) {
              $tco_done = true;
              return pure33(new Done(new Tuple(v1.value0, new Tuple(v1.value1, v1.value2))));
            }
            ;
            throw new Error("Failed pattern match at Uncurried.RWSET (line 252, column 15 - line 258, column 35): " + [v1.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_step);
          }
          ;
          return $tco_result;
        };
        return tailRecM3(go2)(function(v1) {
          return v(r, s2, More.create, Lift.create, function(s$prime2, e, w) {
            return new Stop(s$prime2, new Left(e), w);
          }, function(s$prime2, a3, w) {
            return new Stop(s$prime2, new Right(a3), w);
          });
        });
      };
    };
  };
};

// output/Uncurried.ReaderT/index.js
var monadEffectRWSET2 = /* @__PURE__ */ monadEffectRWSET(monoidUnit);
var monadEffectReaderT = function(dictMonadEffect) {
  return monadEffectRWSET2(dictMonadEffect);
};
var monadAskReaderT = /* @__PURE__ */ monadAskRWSET(monoidUnit);
var functorReaderT = functorRWSET;
var bindReaderT = /* @__PURE__ */ bindRWSET(monoidUnit);
var runReaderT = function(dictMonadRec) {
  var map35 = map(dictMonadRec.Monad0().Bind1().Apply0().Functor0());
  var runRWSET2 = runRWSET(dictMonadRec);
  return function(r) {
    return function(v) {
      var go2 = function(v1) {
        if (v1.value1.value0 instanceof Left) {
          return absurd(v1.value1.value0.value0);
        }
        ;
        if (v1.value1.value0 instanceof Right) {
          return v1.value1.value0.value0;
        }
        ;
        throw new Error("Failed pattern match at Uncurried.ReaderT (line 40, column 5 - line 44, column 10): " + [v1.value1.value0.constructor.name]);
      };
      return map35(go2)(runRWSET2(r)(unit)(v));
    };
  };
};

// output/UI.Component/index.js
var bind11 = /* @__PURE__ */ bind(bindReaderT);
var ask2 = /* @__PURE__ */ ask(monadAskReaderT);
var liftEffect7 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
var runComponent = /* @__PURE__ */ runReaderT(monadRecEffect);
var component2 = function(name15) {
  return function(render) {
    return bind11(ask2)(function() {
      var $6 = component(name15);
      return function($7) {
        return liftEffect7($6(render($7)));
      };
    }());
  };
};

// output/ElectronAPI/foreign.js
var on4 = (channel) => (handler2) => () => window.electronAPI.on(channel, handler2);
var removeListener = (channel) => (handler2) => {
  window.electronAPI.removeListener(channel, handler2);
  return {};
};

// output/ElectronAPI/index.js
var pure13 = /* @__PURE__ */ pure(applicativeEffect);
var mkListener = function(callback2) {
  return pure13(mkEffectFn2(callback2));
};

// output/UI.PostMessage/foreign.js
var postMessageImpl = (message2) => () => window.postMessage(message2);

// output/UI.PostMessage/index.js
var postMessage = function(dictWriteForeign) {
  var $3 = write3(dictWriteForeign);
  return function($4) {
    return postMessageImpl($3($4));
  };
};

// output/Yoga.Block.Organism.NotificationCentre.Types/index.js
var compare3 = /* @__PURE__ */ compare(ordInt);
var NotificationAdded = /* @__PURE__ */ function() {
  function NotificationAdded2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  NotificationAdded2.create = function(value0) {
    return function(value1) {
      return new NotificationAdded2(value0, value1);
    };
  };
  return NotificationAdded2;
}();
var NotificationDismissed = /* @__PURE__ */ function() {
  function NotificationDismissed2(value0) {
    this.value0 = value0;
  }
  ;
  NotificationDismissed2.create = function(value0) {
    return new NotificationDismissed2(value0);
  };
  return NotificationDismissed2;
}();
var eqSubscriberId = {
  eq: function(x) {
    return function(y) {
      return x === y;
    };
  }
};
var ordSubscriberId = {
  compare: function(x) {
    return function(y) {
      return compare3(x)(y);
    };
  },
  Eq0: function() {
    return eqSubscriberId;
  }
};
var eqNotificationId = {
  eq: function(x) {
    return function(y) {
      return x === y;
    };
  }
};
var ordNotificationId = {
  compare: function(x) {
    return function(y) {
      return compare3(x)(y);
    };
  },
  Eq0: function() {
    return eqNotificationId;
  }
};

// output/Yoga.Block.Organism.NotificationCentre/index.js
var $$delete4 = /* @__PURE__ */ $$delete2(ordNotificationId);
var traverse_2 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMap);
var map28 = /* @__PURE__ */ map(functorEffect);
var wrap2 = /* @__PURE__ */ wrap();
var insert7 = /* @__PURE__ */ insert2(ordSubscriberId);
var delete1 = /* @__PURE__ */ $$delete2(ordSubscriberId);
var insert1 = /* @__PURE__ */ insert2(ordNotificationId);
var for_4 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
var applySecond2 = /* @__PURE__ */ applySecond(applyAff);
var liftEffect8 = /* @__PURE__ */ liftEffect(monadEffectAff);
var removeNotification = function(notificationsRef) {
  return function(subscribersRef) {
    return function(id3) {
      return function __do6() {
        modify_($$delete4(id3))(notificationsRef)();
        var subscribers = read(subscribersRef)();
        return traverse_2(function(v) {
          return v(new NotificationDismissed(id3));
        })(subscribers)();
      };
    };
  };
};
var mkGenerateId = function() {
  return map28(function(v) {
    return map28(wrap2)(modify(function(v1) {
      return v1 + 1 | 0;
    })(v));
  })($$new(0));
};
var mkGenerateId1 = /* @__PURE__ */ mkGenerateId();
var mkSubscribe = function(subscribersRef) {
  return function __do6() {
    var generateId = mkGenerateId1();
    return function(callback2) {
      return function __do7() {
        var id3 = generateId();
        modify_(insert7(id3)(callback2))(subscribersRef)();
        var unsubscribe = modify_(delete1(id3))(subscribersRef);
        return unsubscribe;
      };
    };
  };
};
var mkEnqueueNotification = function(notificationsRef) {
  return function(subscribersRef) {
    return function __do6() {
      var generateId = mkGenerateId1();
      return function(n) {
        return function __do7() {
          var id3 = generateId();
          modify_(insert1(id3)(n))(notificationsRef)();
          var remove = removeNotification(notificationsRef)(subscribersRef)(id3);
          var subscribers = read(subscribersRef)();
          traverse_2(function(v) {
            return v(new NotificationAdded(id3, n.render({
              dismiss: remove
            })));
          })(subscribers)();
          return for_4(n.autoHideAfter)(function(hideAfter) {
            return launchAff_(applySecond2(delay(hideAfter))(liftEffect8(remove)));
          })();
        };
      };
    };
  };
};
var mkNotificationCentre = function __do2() {
  var notificationsRef = $$new(empty2)();
  var subscribersRef = $$new(empty2)();
  var enqueueNotification = mkEnqueueNotification(notificationsRef)(subscribersRef)();
  var subscribe = mkSubscribe(subscribersRef)();
  return {
    enqueueNotification,
    subscribe
  };
};

// output/UI.Ctx.Electron/index.js
var postMessage2 = /* @__PURE__ */ postMessage(/* @__PURE__ */ writeForeignRecord()(/* @__PURE__ */ writeForeignFieldsCons({
  reflectSymbol: function() {
    return "data";
  }
})(writeForeignForeign)(/* @__PURE__ */ writeForeignFieldsCons({
  reflectSymbol: function() {
    return "type";
  }
})(writeForeignChannel)(writeForeignFieldsNilRowR)()()())()()()));
var mkElectronCtx = /* @__PURE__ */ map(functorEffect)(function(v) {
  return {
    registerListener: function($21) {
      return on4(mainToRendererChannelName($21));
    },
    removeListener: function($22) {
      return removeListener(mainToRendererChannelName($22));
    },
    postMessage: function(c2) {
      return function(f) {
        return postMessage2({
          type: rendererToMainChannelName(c2),
          data: f
        });
      };
    },
    notificationCentre: v
  };
})(mkNotificationCentre);

// output/React.Basic.Emotion/foreign.js
var import_react4 = __toESM(require_emotion_react_cjs(), 1);
var createElement2 = import_react4.jsx;
var emptyStyle = void 0;
var emptyStyleProperty = void 0;
var flattenDataProp = (component25, props) => {
  let data = null;
  if (typeof component25 === "string" && props._data != null) {
    data = { _data: void 0 };
    Object.entries(props._data).forEach(function(entry) {
      data["data-" + entry[0]] = entry[1];
    });
  }
  return data == null ? props : Object.assign({}, props, data);
};
function element_(component25, props, areChildrenDynamic) {
  const args = [component25, flattenDataProp(component25, props)];
  return createElement2.apply(null, areChildrenDynamic || props.children == null ? args : args.concat(props.children));
}
var global3 = import_react4.Global;
var css_ = import_react4.css;
var keyframes_ = import_react4.keyframes;

// output/Color/index.js
var clamp2 = /* @__PURE__ */ clamp(ordInt);
var max3 = /* @__PURE__ */ max(ordInt);
var min3 = /* @__PURE__ */ min(ordInt);
var clamp1 = /* @__PURE__ */ clamp(ordNumber);
var show9 = /* @__PURE__ */ show(showNumber);
var show12 = /* @__PURE__ */ show(showInt);
var HSLA = /* @__PURE__ */ function() {
  function HSLA2(value0, value1, value22, value32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value22;
    this.value3 = value32;
  }
  ;
  HSLA2.create = function(value0) {
    return function(value1) {
      return function(value22) {
        return function(value32) {
          return new HSLA2(value0, value1, value22, value32);
        };
      };
    };
  };
  return HSLA2;
}();
var modPos = function(x) {
  return function(y) {
    return remainder(remainder(x)(y) + y)(y);
  };
};
var rgba = function(red$prime) {
  return function(green$prime) {
    return function(blue$prime) {
      return function(alpha2) {
        var red = clamp2(0)(255)(red$prime);
        var r = toNumber(red) / 255;
        var green = clamp2(0)(255)(green$prime);
        var g2 = toNumber(green) / 255;
        var blue = clamp2(0)(255)(blue$prime);
        var maxChroma = max3(max3(red)(green))(blue);
        var minChroma = min3(min3(red)(green))(blue);
        var chroma = maxChroma - minChroma | 0;
        var chroma$prime = toNumber(chroma) / 255;
        var lightness2 = toNumber(maxChroma + minChroma | 0) / (255 * 2);
        var saturation = function() {
          if (chroma === 0) {
            return 0;
          }
          ;
          if (otherwise) {
            return chroma$prime / (1 - abs2(2 * lightness2 - 1));
          }
          ;
          throw new Error("Failed pattern match at Color (line 160, column 3 - line 162, column 64): " + []);
        }();
        var b3 = toNumber(blue) / 255;
        var hue$prime = function(v) {
          if (v === 0) {
            return 0;
          }
          ;
          if (maxChroma === red) {
            return modPos((g2 - b3) / chroma$prime)(6);
          }
          ;
          if (maxChroma === green) {
            return (b3 - r) / chroma$prime + 2;
          }
          ;
          if (otherwise) {
            return (r - g2) / chroma$prime + 4;
          }
          ;
          throw new Error("Failed pattern match at Color (line 150, column 3 - line 150, column 15): " + [v.constructor.name]);
        };
        var hue = 60 * hue$prime(chroma);
        return new HSLA(hue, saturation, lightness2, alpha2);
      };
    };
  };
};
var rgb = function(r) {
  return function(g2) {
    return function(b3) {
      return rgba(r)(g2)(b3)(1);
    };
  };
};
var rgba$prime = function(r) {
  return function(g2) {
    return function(b3) {
      return function(a3) {
        return rgba(round2(r * 255))(round2(g2 * 255))(round2(b3 * 255))(a3);
      };
    };
  };
};
var hsla = function(h) {
  return function(s2) {
    return function(l) {
      return function(a3) {
        var s$prime2 = clamp1(0)(1)(s2);
        var l$prime = clamp1(0)(1)(l);
        var a$prime3 = clamp1(0)(1)(a3);
        return new HSLA(h, s$prime2, l$prime, a$prime3);
      };
    };
  };
};
var lighten = function(f) {
  return function(v) {
    return hsla(v.value0)(v.value1)(v.value2 + f)(v.value3);
  };
};
var rotateHue = function(angle) {
  return function(v) {
    return hsla(v.value0 + angle)(v.value1)(v.value2)(v.value3);
  };
};
var saturate = function(f) {
  return function(v) {
    return hsla(v.value0)(v.value1 + f)(v.value2)(v.value3);
  };
};
var hsl = function(h) {
  return function(s2) {
    return function(l) {
      return hsla(h)(s2)(l)(1);
    };
  };
};
var white = /* @__PURE__ */ hsl(0)(0)(1);
var fromInt = function(m) {
  var n = clamp2(0)(16777215)(m);
  var r = n >> 16 & 255;
  var g2 = n >> 8 & 255;
  var b3 = n & 255;
  return rgb(r)(g2)(b3);
};
var desaturate = function(f) {
  return saturate(-f);
};
var darken = function(f) {
  return lighten(-f);
};
var cssStringHSLA = function(v) {
  var toString9 = function(n) {
    return show9(toNumber(round2(100 * n)) / 100);
  };
  var saturation = toString9(v.value1 * 100) + "%";
  var lightness2 = toString9(v.value2 * 100) + "%";
  var hue = toString9(v.value0);
  var alpha2 = show9(v.value3);
  var $113 = v.value3 === 1;
  if ($113) {
    return "hsl(" + (hue + (", " + (saturation + (", " + (lightness2 + ")")))));
  }
  ;
  return "hsla(" + (hue + (", " + (saturation + (", " + (lightness2 + (", " + (alpha2 + ")")))))));
};
var clipHue = function(v) {
  var $119 = v === 360;
  if ($119) {
    return v;
  }
  ;
  return modPos(v)(360);
};
var toRGBA$prime = function(v) {
  var h$prime = clipHue(v.value0) / 60;
  var chr = (1 - abs2(2 * v.value2 - 1)) * v.value1;
  var m = v.value2 - chr / 2;
  var x = chr * (1 - abs2(remainder(h$prime)(2) - 1));
  var col3 = function() {
    if (h$prime < 1) {
      return {
        r: chr,
        g: x,
        b: 0
      };
    }
    ;
    if (1 <= h$prime && h$prime < 2) {
      return {
        r: x,
        g: chr,
        b: 0
      };
    }
    ;
    if (2 <= h$prime && h$prime < 3) {
      return {
        r: 0,
        g: chr,
        b: x
      };
    }
    ;
    if (3 <= h$prime && h$prime < 4) {
      return {
        r: 0,
        g: x,
        b: chr
      };
    }
    ;
    if (4 <= h$prime && h$prime < 5) {
      return {
        r: x,
        g: 0,
        b: chr
      };
    }
    ;
    if (otherwise) {
      return {
        r: chr,
        g: 0,
        b: x
      };
    }
    ;
    throw new Error("Failed pattern match at Color (line 356, column 3 - line 362, column 43): " + []);
  }();
  return {
    r: col3.r + m,
    g: col3.g + m,
    b: col3.b + m,
    a: v.value3
  };
};
var toRGBA = function(col3) {
  var c2 = toRGBA$prime(col3);
  var g2 = round2(255 * c2.g);
  var r = round2(255 * c2.r);
  var b3 = round2(255 * c2.b);
  return {
    r,
    g: g2,
    b: b3,
    a: c2.a
  };
};
var cssStringRGBA = function(col3) {
  var c2 = toRGBA(col3);
  var green = show12(c2.g);
  var red = show12(c2.r);
  var blue = show12(c2.b);
  var alpha2 = show9(c2.a);
  var $146 = c2.a === 1;
  if ($146) {
    return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
  }
  ;
  return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha2 + ")")))))));
};

// output/Data.Number.Format/foreign.js
function wrap3(method2) {
  return function(d) {
    return function(num2) {
      return method2.apply(num2, [d]);
    };
  };
}
var toPrecisionNative = wrap3(Number.prototype.toPrecision);
var toFixedNative = wrap3(Number.prototype.toFixed);
var toExponentialNative = wrap3(Number.prototype.toExponential);
function toString6(num2) {
  return num2.toString();
}

// output/React.Basic.Emotion/index.js
var readArray3 = /* @__PURE__ */ readArray(monadIdentity);
var append12 = /* @__PURE__ */ append(semigroupArray);
var fromHomogeneous2 = /* @__PURE__ */ fromHomogeneous();
var str = unsafeCoerce2;
var toUnitWith = function(f) {
  return function(s2) {
    return function(a3) {
      return str(f(a3) + s2);
    };
  };
};
var vh = /* @__PURE__ */ toUnitWith(toString6)("vh");
var vw = /* @__PURE__ */ toUnitWith(toString6)("vw");
var $$var2 = function(n) {
  return str("var(" + (n + ")"));
};
var visible = /* @__PURE__ */ str("visible");
var wrap4 = /* @__PURE__ */ str("wrap");
var solid = /* @__PURE__ */ str("solid");
var row = /* @__PURE__ */ str("row");
var rem2 = /* @__PURE__ */ toUnitWith(toString6)("rem");
var relative2 = /* @__PURE__ */ str("relative");
var px = /* @__PURE__ */ toUnitWith(/* @__PURE__ */ toStringAs(decimal))("px");
var percent = /* @__PURE__ */ toUnitWith(toString6)("%");
var num = unsafeCoerce2;
var none = /* @__PURE__ */ str("none");
var nested = unsafeCoerce2;
var merge = unsafeCoerce2;
var semigroupStyle = {
  append: function(x) {
    return function(y) {
      var yF = unsafeToForeign(y);
      var xF = unsafeToForeign(x);
      var v = runExcept(readArray3(yF));
      var v1 = runExcept(readArray3(xF));
      if (v1 instanceof Right && v instanceof Right) {
        return merge(append12(v1.value0)(v.value0));
      }
      ;
      if (v1 instanceof Left && v instanceof Right) {
        return merge(cons2(x)(v.value0));
      }
      ;
      if (v1 instanceof Right && v instanceof Left) {
        return merge(snoc(v1.value0)(y));
      }
      ;
      if (v1 instanceof Left && v instanceof Left) {
        return merge([x, y]);
      }
      ;
      throw new Error("Failed pattern match at React.Basic.Emotion (line 99, column 7 - line 103, column 41): " + [v1.constructor.name, v.constructor.name]);
    };
  }
};
var monoidStyle = {
  mempty: emptyStyle,
  Semigroup0: function() {
    return semigroupStyle;
  }
};
var manipulation = /* @__PURE__ */ str("manipulation");
var keyframes2 = function() {
  return function($39) {
    return keyframes_(fromHomogeneous2($39));
  };
};
var $$int = unsafeCoerce2;
var inlineFlex = /* @__PURE__ */ str("inline-flex");
var inherit = /* @__PURE__ */ str("inherit");
var hidden = /* @__PURE__ */ str("hidden");
var flexStart = /* @__PURE__ */ str("flex-start");
var flex = /* @__PURE__ */ str("flex");
var fixed = /* @__PURE__ */ str("fixed");
var fallbacks = unsafeCoerce2;
var semigroupStyleProperty = {
  append: function(x) {
    return function(y) {
      var yF = unsafeToForeign(y);
      var xF = unsafeToForeign(x);
      var v = runExcept(readArray3(yF));
      var v1 = runExcept(readArray3(xF));
      if (v1 instanceof Right && v instanceof Right) {
        return fallbacks(append12(v1.value0)(v.value0));
      }
      ;
      if (v1 instanceof Left && v instanceof Right) {
        return fallbacks(cons2(x)(v.value0));
      }
      ;
      if (v1 instanceof Right && v instanceof Left) {
        return fallbacks(snoc(v1.value0)(y));
      }
      ;
      if (v1 instanceof Left && v instanceof Left) {
        return fallbacks([x, y]);
      }
      ;
      throw new Error("Failed pattern match at React.Basic.Emotion (line 125, column 7 - line 129, column 45): " + [v1.constructor.name, v.constructor.name]);
    };
  }
};
var monoidStyleProperty = {
  mempty: emptyStyleProperty,
  Semigroup0: function() {
    return semigroupStyleProperty;
  }
};
var em2 = /* @__PURE__ */ toUnitWith(toString6)("em");
var element2 = /* @__PURE__ */ runFn2(element_);
var css3 = function() {
  return function($40) {
    return css_(fromHomogeneous2($40));
  };
};
var contentBox = /* @__PURE__ */ str("content-box");
var column = /* @__PURE__ */ str("column");
var color = function($41) {
  return str(cssStringHSLA($41));
};
var ch = /* @__PURE__ */ toUnitWith(toString6)("ch");
var center = /* @__PURE__ */ str("center");
var borderBox = /* @__PURE__ */ str("border-box");
var baseline = /* @__PURE__ */ str("baseline");
var auto = /* @__PURE__ */ str("auto");
var absolute = /* @__PURE__ */ str("absolute");

// output/Fahrtwind.Layer/index.js
var css4 = /* @__PURE__ */ css3();
var show10 = /* @__PURE__ */ show(showInt);
var zIndex = function(n) {
  return css4({
    zIndex: str(show10(n))
  });
};

// output/Fahrtwind.Style.Color.Background/index.js
var css5 = /* @__PURE__ */ css3();
var background$prime = function($26) {
  return css5(function(v) {
    return {
      backgroundColor: v
    };
  }($26));
};

// output/Fahrtwind.Style.Color.Tailwind/index.js
var white2 = white;
var violet = {
  "_50": /* @__PURE__ */ fromInt(16118783),
  "_100": /* @__PURE__ */ fromInt(15591934),
  "_200": /* @__PURE__ */ fromInt(14538494),
  "_300": /* @__PURE__ */ fromInt(12891645),
  "_400": /* @__PURE__ */ fromInt(10980346),
  "_500": /* @__PURE__ */ fromInt(9133302),
  "_600": /* @__PURE__ */ fromInt(8141549),
  "_700": /* @__PURE__ */ fromInt(7153881),
  "_800": /* @__PURE__ */ fromInt(5972406),
  "_900": /* @__PURE__ */ fromInt(4988309)
};
var gray = {
  "_50": /* @__PURE__ */ fromInt(16448250),
  "_100": /* @__PURE__ */ fromInt(16053493),
  "_200": /* @__PURE__ */ fromInt(15000807),
  "_300": /* @__PURE__ */ fromInt(13948120),
  "_400": /* @__PURE__ */ fromInt(10592682),
  "_500": /* @__PURE__ */ fromInt(7434618),
  "_600": /* @__PURE__ */ fromInt(5395035),
  "_700": /* @__PURE__ */ fromInt(4144966),
  "_800": /* @__PURE__ */ fromInt(2565930),
  "_900": /* @__PURE__ */ fromInt(1579035)
};

// output/Fahrtwind.Style.Global/index.js
var css6 = /* @__PURE__ */ css3();
var intercalate8 = /* @__PURE__ */ intercalate3(monoidString);
var show11 = /* @__PURE__ */ show(showString);
var variables = /* @__PURE__ */ function() {
  return css6({
    "--plm-highlight-colour": color(violet["_500"]),
    "--plm-highlightText-colour": color(violet["_50"]),
    "--plm-inputBorder-colour": str("transparent"),
    "--plm-inputBackground-colour": color(gray["_100"]),
    "--plm-inputIcon-colour": color(gray["_400"]),
    "--plm-inputText-colour": color(darken(0.05)(gray["_700"])),
    "--plm-popupBackground-colour": color(white2),
    "--plm-inputBorderActive-colour": $$var2("--plm-highlight-colour"),
    "--plm-inputSelectOption-colour": color(gray["_200"]),
    "--plm-inputSelectOptionText-colour": color(gray["_800"])
  });
}();
var nest = function() {
  return function() {
    return function($10) {
      return nested(css6($10));
    };
  };
};
var nest1 = /* @__PURE__ */ nest()();
var globalStyles = /* @__PURE__ */ function() {
  return css6({
    ":root": nested(append(semigroupStyle)(variables)(css6({
      "*, ::before, ::after": nest1({
        boxSizing: borderBox,
        borderWidth: str("0"),
        borderStyle: solid,
        borderColor: str("currentColor")
      })
    }))),
    html: nest1({
      tabSize: str("4"),
      MozTabSize: str("4"),
      lineHeight: str("1.5"),
      WebkitTextSizeAdjust: str("100%"),
      fontFamily: str(intercalate8(",")([show11("Inter var experimental"), show11("Inter var"), "Inter", "system-ui", "-apple-system", "'Segoe UI'", "Roboto", "Helvetica", "Arial", "sans-serif", "'Apple Color Emoji'", "'Segoe UI Emoji'"]))
    }),
    body: nest1({
      margin: str("0"),
      lineHeight: inherit,
      fontFamily: inherit
    }),
    hr: nest1({
      height: str("0"),
      color: inherit,
      borderTopWidth: px(1)
    }),
    "abbr[title]": nest1({
      textDecoration: str("underline dotted"),
      WebkitTextDecoration: str("underline dotted")
    }),
    "b,strong": nest1({
      fontWeight: str("bolder")
    }),
    "code, kbd, samp, pre": nest1({
      fontSize: em2(1),
      fontFamily: str(intercalate8(",")(["ui-monospace", "SFMono-Regular", "Consolas", "'Liberation Mono'", "Menlo", "monospace"]))
    }),
    small: nest1({
      fontSize: percent(80)
    }),
    "sub,sup": nest1({
      fontSize: percent(75),
      lineHeight: str("0"),
      position: relative2,
      verticalAlign: baseline
    }),
    sub: nest1({
      bottom: em2(-0.25)
    }),
    sup: nest1({
      bottom: em2(-0.5)
    }),
    table: nest1({
      textIndent: str("0"),
      borderColor: inherit,
      borderCollapse: str("collapse")
    }),
    "button,input,optgroup,select,textarea": nest1({
      fontFamily: inherit,
      fontSize: percent(100),
      lineHeight: str("1.15"),
      margin: str("0")
    }),
    "button, select": nest1({
      textTransform: none
    }),
    "button, [type='button'], [type='reset'], [type='submit']": nest1({
      WebkitAppearance: str("button")
    }),
    "::MozFocusInner": nest1({
      borderStyle: none,
      padding: str("0")
    }),
    "::MozFocusring": nest1({
      outline: str("1px dotted ButtonText")
    }),
    ":MozUIInvalid": nest1({
      boxShadow: none
    }),
    legend: nest1({
      padding: str("0")
    }),
    progress: nest1({
      verticalAlign: baseline
    }),
    "::WebkitInnerSpinButton, ::WebkitOuterSpinButton": nest1({
      height: auto
    }),
    "[type='search']": nest1({
      WebkitAppearance: str("textfield"),
      outlineOffset: px(-2 | 0)
    }),
    "::WebkitSearchDecoration": nest1({
      WebkitAppearance: none
    }),
    "::WebkitFileUploadButton": nest1({
      WebkitAppearance: str("button"),
      font: inherit
    }),
    summary: nest1({
      display: str("list-item")
    }),
    "blockquote, dl, dd, h1, h2, h3, h4, h5, h6, hr, figure, p, pre": nest1({
      margin: str("0")
    }),
    button: nest1({
      backgroundColor: str("transparent"),
      backgroundImage: none
    }),
    fieldset: nest1({
      margin: str("0"),
      padding: str("0")
    }),
    "ol, ul": nest1({
      listStyle: none,
      margin: str("0"),
      padding: str("0")
    }),
    img: nest1({
      borderStyle: solid
    }),
    textarea: nest1({
      resize: str("vertical")
    }),
    "input::placeholder, textarea::placeholder": nest1({
      opacity: str("1"),
      color: str("#9ca3af")
    }),
    'button, [role="button"]': nest1({
      cursor: str("pointer")
    }),
    "h1,h2,h3,h4,h5,h6": nest1({
      fontSize: inherit,
      fontWeight: inherit
    }),
    a: nest1({
      color: inherit,
      textDecoration: inherit
    }),
    "button, input, optgroup, selecct, textarea": nest1({
      padding: str("0"),
      lineHeight: inherit,
      color: inherit
    }),
    "img, svg, video, canvas, audio, iframe, embed, object": nest1({
      display: str("block"),
      verticalAlign: str("middle")
    }),
    "img, video": nest1({
      maxWidth: str("100%"),
      height: auto
    })
  });
}();

// output/Fahrtwind.Style.Inset/index.js
var css7 = /* @__PURE__ */ css3();
var top$prime = function($7) {
  return css7(function(v) {
    return {
      top: v
    };
  }($7));
};
var top6 = function($8) {
  return top$prime(px($8));
};
var right$prime = function($9) {
  return css7(function(v) {
    return {
      right: v
    };
  }($9));
};
var right = function($10) {
  return right$prime(px($10));
};
var left$prime = function($11) {
  return css7(function(v) {
    return {
      left: v
    };
  }($11));
};
var left = function($12) {
  return left$prime(px($12));
};
var bottom$prime = function($13) {
  return css7(function(v) {
    return {
      bottom: v
    };
  }($13));
};
var bottom6 = function($14) {
  return bottom$prime(px($14));
};

// output/Fahrtwind.Style.Overflow/index.js
var css8 = /* @__PURE__ */ css3();
var overflowVisible = /* @__PURE__ */ css8({
  overflow: visible
});
var overflowHidden = /* @__PURE__ */ css8({
  overflow: hidden
});

// output/Fahrtwind.Style.PointerEvents/index.js
var css9 = /* @__PURE__ */ css3();
var pointerEventsNone = /* @__PURE__ */ css9({
  pointerEvents: none
});
var pointerEventsAuto = /* @__PURE__ */ css9({
  pointerEvents: auto
});
var ignoreClicks = pointerEventsNone;
var acceptClicks = pointerEventsAuto;

// output/Fahrtwind.Style.Position/index.js
var css10 = /* @__PURE__ */ css3();
var positionFixed = /* @__PURE__ */ css10({
  position: fixed
});
var positionAbsolute = /* @__PURE__ */ css10({
  position: absolute
});

// output/Fahrtwind.Style.Size/index.js
var css11 = /* @__PURE__ */ css3();
var widthAndHeight$prime = function(wh) {
  return css11({
    width: wh,
    height: wh
  });
};
var widthAndHeight = function(wh) {
  return widthAndHeight$prime(px(wh));
};
var width$prime = function($9) {
  return css11(function(v) {
    return {
      width: v
    };
  }($9));
};
var width = function($10) {
  return width$prime(px($10));
};
var screenWidth = /* @__PURE__ */ vw(100);
var widthScreen = /* @__PURE__ */ width$prime(screenWidth);
var screenHeight = /* @__PURE__ */ vh(100);
var height$prime = function($19) {
  return css11(function(v) {
    return {
      height: v
    };
  }($19));
};
var heightScreen = /* @__PURE__ */ height$prime(screenHeight);
var height = function($20) {
  return height$prime(px($20));
};
var full = /* @__PURE__ */ percent(100);
var heightFull = /* @__PURE__ */ height$prime(full);
var widthFull = /* @__PURE__ */ width$prime(full);

// output/Plumage.Util.HTML/index.js
var div$prime2 = /* @__PURE__ */ div$prime();
var jsx2 = function(component25) {
  return function(className2) {
    return function(css33) {
      return function(children2) {
        return element2(component25)({
          className: className2,
          css: css33,
          children: children2
        });
      };
    };
  };
};
var jsx_ = function(component25) {
  return jsx2(component25)("");
};
var div_2 = /* @__PURE__ */ jsx_(div$prime2);
var div4 = /* @__PURE__ */ jsx2(div$prime2);

// output/Yoga/index.js
var insert8 = /* @__PURE__ */ insert4({
  reflectSymbol: function() {
    return "children";
  }
})()();
var div$prime3 = /* @__PURE__ */ div$prime();
var styledLeaf = element2;
var styled = function() {
  return function(x) {
    return function(props) {
      return function(children2) {
        return element2(x)(insert8($$Proxy.value)(children2)(props));
      };
    };
  };
};
var leaf = function() {
  return function(x) {
    return function(props) {
      return element(x)(props);
    };
  };
};
var el = function() {
  return function(x) {
    return function(props) {
      return function(children2) {
        return element(x)(insert8($$Proxy.value)(children2)(props));
      };
    };
  };
};
var div5 = function() {
  return div$prime3;
};

// output/Heterogeneous.Mapping/index.js
var identity12 = /* @__PURE__ */ identity(categoryBuilder);
var compose12 = /* @__PURE__ */ compose(semigroupoidBuilder);
var modify5 = /* @__PURE__ */ modify4()();
var ConstMapping = function(x) {
  return x;
};
var mappingWithIndex = function(dict) {
  return dict.mappingWithIndex;
};
var mappingFunction = {
  mapping: function(k) {
    return k;
  }
};
var mapping = function(dict) {
  return dict.mapping;
};
var mapRecordWithIndexNil = {
  mapRecordWithIndexBuilder: function(v) {
    return function(v1) {
      return identity12;
    };
  }
};
var mapRecordWithIndexBuilder = function(dict) {
  return dict.mapRecordWithIndexBuilder;
};
var mapRecordWithIndexCons = function(dictIsSymbol) {
  var modify1 = modify5(dictIsSymbol);
  return function(dictMappingWithIndex) {
    var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
    return function(dictMapRecordWithIndex) {
      var mapRecordWithIndexBuilder1 = mapRecordWithIndexBuilder(dictMapRecordWithIndex);
      return function() {
        return function() {
          return {
            mapRecordWithIndexBuilder: function(v) {
              return function(f) {
                return compose12(modify1($$Proxy.value)(mappingWithIndex1(f)($$Proxy.value)))(mapRecordWithIndexBuilder1($$Proxy.value)(f));
              };
            }
          };
        };
      };
    };
  };
};
var hmapWithIndexRecord = function() {
  return function(dictMapRecordWithIndex) {
    return {
      hmapWithIndex: function() {
        var $102 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)($$Proxy.value);
        return function($103) {
          return build($102($103));
        };
      }()
    };
  };
};
var hmapWithIndex = function(dict) {
  return dict.hmapWithIndex;
};
var hmapRecord = function() {
  return function(dictMapRecordWithIndex) {
    return {
      hmap: function() {
        var $108 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)($$Proxy.value);
        return function($109) {
          return build($108(ConstMapping($109)));
        };
      }()
    };
  };
};
var hmap = function(dict) {
  return dict.hmap;
};
var constMapping = function(dictMapping) {
  var mapping1 = mapping(dictMapping);
  return {
    mappingWithIndex: function(v) {
      return function(v1) {
        return mapping1(v);
      };
    }
  };
};

// output/Record.Extra/index.js
var identity13 = /* @__PURE__ */ identity(categoryBuilder);
var insert9 = /* @__PURE__ */ insert5()();
var compose2 = /* @__PURE__ */ compose(semigroupoidBuilder);
var mempty4 = /* @__PURE__ */ mempty(monoidList);
var nilKeys = {
  keysImpl: function(v) {
    return mempty4;
  }
};
var mapRecordNil = {
  mapRecordBuilder: function(v) {
    return function(v1) {
      return function(v2) {
        return identity13;
      };
    };
  }
};
var mapRecordBuilder = function(dict) {
  return dict.mapRecordBuilder;
};
var mapRecordCons = function(dictIsSymbol) {
  var get3 = get(dictIsSymbol)();
  var insert12 = insert9(dictIsSymbol);
  return function() {
    return function(dictMapRecord) {
      var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
      return function() {
        return function() {
          return {
            mapRecordBuilder: function(v) {
              return function(f) {
                return function(r) {
                  var rest = mapRecordBuilder1($$Proxy.value)(f)(r);
                  var val = f(get3($$Proxy.value)(r));
                  var first2 = insert12($$Proxy.value)(val);
                  return compose2(first2)(rest);
                };
              };
            }
          };
        };
      };
    };
  };
};
var mapRecord = function() {
  return function(dictMapRecord) {
    var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
    return function(f) {
      return function(r) {
        var builder = mapRecordBuilder1($$Proxy.value)(f)(r);
        return build(builder)({});
      };
    };
  };
};
var keysImpl = function(dict) {
  return dict.keysImpl;
};
var keys2 = function() {
  return function(dictKeys) {
    var keysImpl1 = keysImpl(dictKeys);
    return function(v) {
      return keysImpl1($$Proxy.value);
    };
  };
};
var consKeys = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return function(dictKeys) {
    var keysImpl1 = keysImpl(dictKeys);
    return {
      keysImpl: function(v) {
        var rest = keysImpl1($$Proxy.value);
        var first2 = reflectSymbol2($$Proxy.value);
        return new Cons(first2, rest);
      }
    };
  };
};

// output/Web.DOM.Document/foreign.js
var getEffProp = function(name15) {
  return function(doc) {
    return function() {
      return doc[name15];
    };
  };
};
var url = getEffProp("URL");
var documentURI = getEffProp("documentURI");
var origin = getEffProp("origin");
var compatMode = getEffProp("compatMode");
var characterSet = getEffProp("characterSet");
var contentType = getEffProp("contentType");
var _documentElement = getEffProp("documentElement");

// output/Web.Internal.FFI/foreign.js
function _unsafeReadProtoTagged(nothing, just, name15, value12) {
  if (typeof window !== "undefined") {
    var ty = window[name15];
    if (ty != null && value12 instanceof ty) {
      return just(value12);
    }
  }
  var obj = value12;
  while (obj != null) {
    var proto = Object.getPrototypeOf(obj);
    var constructorName = proto.constructor.name;
    if (constructorName === name15) {
      return just(value12);
    } else if (constructorName === "Object") {
      return nothing;
    }
    obj = proto;
  }
  return nothing;
}

// output/Web.Internal.FFI/index.js
var unsafeReadProtoTagged = function(name15) {
  return function(value12) {
    return _unsafeReadProtoTagged(Nothing.value, Just.create, name15, value12);
  };
};

// output/Web.HTML/foreign.js
var windowImpl = function() {
  return window;
};

// output/Web.HTML.HTMLDocument/index.js
var toNonElementParentNode = unsafeCoerce2;
var toEventTarget = unsafeCoerce2;

// output/Web.HTML.Window/foreign.js
function document2(window2) {
  return function() {
    return window2.document;
  };
}
function innerWidth(window2) {
  return function() {
    return window2.innerWidth;
  };
}
function innerHeight(window2) {
  return function() {
    return window2.innerHeight;
  };
}
function scrollX(window2) {
  return function() {
    return window2.scrollX;
  };
}
function scrollY(window2) {
  return function() {
    return window2.scrollY;
  };
}
function requestAnimationFrame2(fn) {
  return function(window2) {
    return function() {
      return window2.requestAnimationFrame(fn);
    };
  };
}

// output/Web.HTML.Window/index.js
var toEventTarget2 = unsafeCoerce2;

// output/Yoga.Block.Internal.CSS/index.js
var css12 = /* @__PURE__ */ css3();
var transparent = /* @__PURE__ */ rgba(0)(0)(0)(0);
var nestDynamic = function() {
  return function(key) {
    return function(sp) {
      return singleton6(key)(css12(sp));
    };
  };
};
var nest2 = function() {
  return function() {
    return function($2) {
      return nested(css12($2));
    };
  };
};
var left2 = /* @__PURE__ */ str("left");
var _100percent = /* @__PURE__ */ percent(100);
var _0 = /* @__PURE__ */ str("0");

// output/Yoga.Block.Container.Style/index.js
var css13 = /* @__PURE__ */ css3();
var foldMap4 = /* @__PURE__ */ foldMap2(/* @__PURE__ */ monoidObject(semigroupStyleProperty));
var fromHomogeneous3 = /* @__PURE__ */ fromHomogeneous();
var backgroundIsSymbol = {
  reflectSymbol: function() {
    return "background";
  }
};
var mapRecordWithIndexCons2 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundIsSymbol);
var constMapping2 = /* @__PURE__ */ constMapping(mappingFunction);
var backgroundAlpha0IsSymbol = {
  reflectSymbol: function() {
    return "backgroundAlpha0";
  }
};
var mapRecordWithIndexCons1 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha0IsSymbol);
var backgroundAlpha25IsSymbol = {
  reflectSymbol: function() {
    return "backgroundAlpha25";
  }
};
var mapRecordWithIndexCons22 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha25IsSymbol);
var backgroundAlpha50IsSymbol = {
  reflectSymbol: function() {
    return "backgroundAlpha50";
  }
};
var mapRecordWithIndexCons3 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha50IsSymbol);
var backgroundAlpha75IsSymbol = {
  reflectSymbol: function() {
    return "backgroundAlpha75";
  }
};
var mapRecordWithIndexCons4 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha75IsSymbol);
var backgroundBright1IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright1";
  }
};
var mapRecordWithIndexCons5 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright1IsSymbol);
var backgroundBright2IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright2";
  }
};
var mapRecordWithIndexCons6 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright2IsSymbol);
var backgroundBright3IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright3";
  }
};
var mapRecordWithIndexCons7 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright3IsSymbol);
var backgroundBright4IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright4";
  }
};
var mapRecordWithIndexCons8 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright4IsSymbol);
var backgroundBright5IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright5";
  }
};
var mapRecordWithIndexCons9 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright5IsSymbol);
var backgroundBright6IsSymbol = {
  reflectSymbol: function() {
    return "backgroundBright6";
  }
};
var mapRecordWithIndexCons10 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright6IsSymbol);
var backgroundCardIsSymbol = {
  reflectSymbol: function() {
    return "backgroundCard";
  }
};
var mapRecordWithIndexCons11 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundCardIsSymbol);
var backgroundInvertedIsSymbol = {
  reflectSymbol: function() {
    return "backgroundInverted";
  }
};
var mapRecordWithIndexCons12 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundInvertedIsSymbol);
var backgroundLayer1IsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer1";
  }
};
var mapRecordWithIndexCons13 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer1IsSymbol);
var backgroundLayer2IsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer2";
  }
};
var mapRecordWithIndexCons14 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer2IsSymbol);
var backgroundLayer3IsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer3";
  }
};
var mapRecordWithIndexCons15 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer3IsSymbol);
var backgroundLayer4IsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer4";
  }
};
var mapRecordWithIndexCons16 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer4IsSymbol);
var backgroundLayer5IsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer5";
  }
};
var mapRecordWithIndexCons17 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer5IsSymbol);
var backgroundLayer5BorderIsSymbol = {
  reflectSymbol: function() {
    return "backgroundLayer5Border";
  }
};
var mapRecordWithIndexCons18 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer5BorderIsSymbol);
var boxShadowIsSymbol = {
  reflectSymbol: function() {
    return "boxShadow";
  }
};
var mapRecordWithIndexCons19 = /* @__PURE__ */ mapRecordWithIndexCons(boxShadowIsSymbol);
var highlightIsSymbol = {
  reflectSymbol: function() {
    return "highlight";
  }
};
var mapRecordWithIndexCons20 = /* @__PURE__ */ mapRecordWithIndexCons(highlightIsSymbol);
var highlightAlpha10IsSymbol = {
  reflectSymbol: function() {
    return "highlightAlpha10";
  }
};
var mapRecordWithIndexCons21 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha10IsSymbol);
var highlightAlpha25IsSymbol = {
  reflectSymbol: function() {
    return "highlightAlpha25";
  }
};
var mapRecordWithIndexCons222 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha25IsSymbol);
var highlightAlpha50IsSymbol = {
  reflectSymbol: function() {
    return "highlightAlpha50";
  }
};
var mapRecordWithIndexCons23 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha50IsSymbol);
var highlightAlpha67IsSymbol = {
  reflectSymbol: function() {
    return "highlightAlpha67";
  }
};
var mapRecordWithIndexCons24 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha67IsSymbol);
var highlightDarkerIsSymbol = {
  reflectSymbol: function() {
    return "highlightDarker";
  }
};
var mapRecordWithIndexCons25 = /* @__PURE__ */ mapRecordWithIndexCons(highlightDarkerIsSymbol);
var highlightDisabledIsSymbol = {
  reflectSymbol: function() {
    return "highlightDisabled";
  }
};
var mapRecordWithIndexCons26 = /* @__PURE__ */ mapRecordWithIndexCons(highlightDisabledIsSymbol);
var highlightLighterIsSymbol = {
  reflectSymbol: function() {
    return "highlightLighter";
  }
};
var mapRecordWithIndexCons27 = /* @__PURE__ */ mapRecordWithIndexCons(highlightLighterIsSymbol);
var highlightRotatedBackwardsIsSymbol = {
  reflectSymbol: function() {
    return "highlightRotatedBackwards";
  }
};
var mapRecordWithIndexCons28 = /* @__PURE__ */ mapRecordWithIndexCons(highlightRotatedBackwardsIsSymbol);
var highlightRotatedForwardsIsSymbol = {
  reflectSymbol: function() {
    return "highlightRotatedForwards";
  }
};
var mapRecordWithIndexCons29 = /* @__PURE__ */ mapRecordWithIndexCons(highlightRotatedForwardsIsSymbol);
var highlightTextIsSymbol = {
  reflectSymbol: function() {
    return "highlightText";
  }
};
var mapRecordWithIndexCons30 = /* @__PURE__ */ mapRecordWithIndexCons(highlightTextIsSymbol);
var inputBackgroundIsSymbol = {
  reflectSymbol: function() {
    return "inputBackground";
  }
};
var mapRecordWithIndexCons31 = /* @__PURE__ */ mapRecordWithIndexCons(inputBackgroundIsSymbol);
var inputBorderIsSymbol = {
  reflectSymbol: function() {
    return "inputBorder";
  }
};
var mapRecordWithIndexCons32 = /* @__PURE__ */ mapRecordWithIndexCons(inputBorderIsSymbol);
var interfaceBackgroundIsSymbol = {
  reflectSymbol: function() {
    return "interfaceBackground";
  }
};
var mapRecordWithIndexCons33 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundIsSymbol);
var interfaceBackgroundDangerousIsSymbol = {
  reflectSymbol: function() {
    return "interfaceBackgroundDangerous";
  }
};
var mapRecordWithIndexCons34 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundDangerousIsSymbol);
var interfaceBackgroundDisabledIsSymbol = {
  reflectSymbol: function() {
    return "interfaceBackgroundDisabled";
  }
};
var mapRecordWithIndexCons35 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundDisabledIsSymbol);
var interfaceBackgroundHighlightIsSymbol = {
  reflectSymbol: function() {
    return "interfaceBackgroundHighlight";
  }
};
var mapRecordWithIndexCons36 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundHighlightIsSymbol);
var interfaceBackgroundShadowIsSymbol = {
  reflectSymbol: function() {
    return "interfaceBackgroundShadow";
  }
};
var mapRecordWithIndexCons37 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundShadowIsSymbol);
var interfaceDangerousTextIsSymbol = {
  reflectSymbol: function() {
    return "interfaceDangerousText";
  }
};
var mapRecordWithIndexCons38 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceDangerousTextIsSymbol);
var interfaceTextDisabledIsSymbol = {
  reflectSymbol: function() {
    return "interfaceTextDisabled";
  }
};
var mapRecordWithIndexCons39 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceTextDisabledIsSymbol);
var invalidIsSymbol = {
  reflectSymbol: function() {
    return "invalid";
  }
};
var mapRecordWithIndexCons40 = /* @__PURE__ */ mapRecordWithIndexCons(invalidIsSymbol);
var invalidTextIsSymbol = {
  reflectSymbol: function() {
    return "invalidText";
  }
};
var mapRecordWithIndexCons41 = /* @__PURE__ */ mapRecordWithIndexCons(invalidTextIsSymbol);
var linkIsSymbol = {
  reflectSymbol: function() {
    return "link";
  }
};
var mapRecordWithIndexCons42 = /* @__PURE__ */ mapRecordWithIndexCons(linkIsSymbol);
var placeholderTextIsSymbol = {
  reflectSymbol: function() {
    return "placeholderText";
  }
};
var mapRecordWithIndexCons43 = /* @__PURE__ */ mapRecordWithIndexCons(placeholderTextIsSymbol);
var popperBackgroundIsSymbol = {
  reflectSymbol: function() {
    return "popperBackground";
  }
};
var mapRecordWithIndexCons44 = /* @__PURE__ */ mapRecordWithIndexCons(popperBackgroundIsSymbol);
var popperBackgroundNoAlphaIsSymbol = {
  reflectSymbol: function() {
    return "popperBackgroundNoAlpha";
  }
};
var mapRecordWithIndexCons45 = /* @__PURE__ */ mapRecordWithIndexCons(popperBackgroundNoAlphaIsSymbol);
var popperInnerBorderIsSymbol = {
  reflectSymbol: function() {
    return "popperInnerBorder";
  }
};
var mapRecordWithIndexCons46 = /* @__PURE__ */ mapRecordWithIndexCons(popperInnerBorderIsSymbol);
var popperOuterBorderIsSymbol = {
  reflectSymbol: function() {
    return "popperOuterBorder";
  }
};
var mapRecordWithIndexCons47 = /* @__PURE__ */ mapRecordWithIndexCons(popperOuterBorderIsSymbol);
var requiredIsSymbol = {
  reflectSymbol: function() {
    return "required";
  }
};
var mapRecordWithIndexCons48 = /* @__PURE__ */ mapRecordWithIndexCons(requiredIsSymbol);
var rippleIsSymbol = {
  reflectSymbol: function() {
    return "ripple";
  }
};
var mapRecordWithIndexCons49 = /* @__PURE__ */ mapRecordWithIndexCons(rippleIsSymbol);
var successIsSymbol = {
  reflectSymbol: function() {
    return "success";
  }
};
var mapRecordWithIndexCons50 = /* @__PURE__ */ mapRecordWithIndexCons(successIsSymbol);
var successTextIsSymbol = {
  reflectSymbol: function() {
    return "successText";
  }
};
var mapRecordWithIndexCons51 = /* @__PURE__ */ mapRecordWithIndexCons(successTextIsSymbol);
var textIsSymbol = {
  reflectSymbol: function() {
    return "text";
  }
};
var mapRecordWithIndexCons52 = /* @__PURE__ */ mapRecordWithIndexCons(textIsSymbol);
var textInvertedIsSymbol = {
  reflectSymbol: function() {
    return "textInverted";
  }
};
var mapRecordWithIndexCons53 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedIsSymbol);
var textInvertedPaler1IsSymbol = {
  reflectSymbol: function() {
    return "textInvertedPaler1";
  }
};
var mapRecordWithIndexCons54 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler1IsSymbol);
var textInvertedPaler2IsSymbol = {
  reflectSymbol: function() {
    return "textInvertedPaler2";
  }
};
var mapRecordWithIndexCons55 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler2IsSymbol);
var textInvertedPaler3IsSymbol = {
  reflectSymbol: function() {
    return "textInvertedPaler3";
  }
};
var mapRecordWithIndexCons56 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler3IsSymbol);
var textInvertedPaler4IsSymbol = {
  reflectSymbol: function() {
    return "textInvertedPaler4";
  }
};
var mapRecordWithIndexCons57 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler4IsSymbol);
var textPaler1IsSymbol = {
  reflectSymbol: function() {
    return "textPaler1";
  }
};
var mapRecordWithIndexCons58 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler1IsSymbol);
var textPaler2IsSymbol = {
  reflectSymbol: function() {
    return "textPaler2";
  }
};
var mapRecordWithIndexCons59 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler2IsSymbol);
var textPaler3IsSymbol = {
  reflectSymbol: function() {
    return "textPaler3";
  }
};
var mapRecordWithIndexCons60 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler3IsSymbol);
var textPaler4IsSymbol = {
  reflectSymbol: function() {
    return "textPaler4";
  }
};
var mapRecordWithIndexCons61 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler4IsSymbol);
var append13 = /* @__PURE__ */ append(semigroupStyle);
var nest3 = /* @__PURE__ */ nest2()();
var MakeCSSVarLabels = /* @__PURE__ */ function() {
  function MakeCSSVarLabels2() {
  }
  ;
  MakeCSSVarLabels2.value = new MakeCSSVarLabels2();
  return MakeCSSVarLabels2;
}();
var DarkMode = /* @__PURE__ */ function() {
  function DarkMode2() {
  }
  ;
  DarkMode2.value = new DarkMode2();
  return DarkMode2;
}();
var LightMode = /* @__PURE__ */ function() {
  function LightMode2() {
  }
  ;
  LightMode2.value = new LightMode2();
  return LightMode2;
}();
var withAlpha2 = function(alpha2) {
  return function(c1) {
    var v = toRGBA$prime(c1);
    return rgba$prime(v.r)(v.g)(v.b)(alpha2);
  };
};
var variables2 = /* @__PURE__ */ css13({
  "--ratio": /* @__PURE__ */ str("1.61"),
  "--line-height": /* @__PURE__ */ str("var(--ratio)"),
  "--line-height-small": /* @__PURE__ */ str("calc(var(--ratio) * 0.8)"),
  "--s-6": /* @__PURE__ */ str("calc(var(--s-5) / var(--ratio))"),
  "--s-5": /* @__PURE__ */ str("calc(var(--s-4) / var(--ratio))"),
  "--s-4": /* @__PURE__ */ str("calc(var(--s-3) / var(--ratio))"),
  "--s-3": /* @__PURE__ */ str("calc(var(--s-2) / var(--ratio))"),
  "--s-2": /* @__PURE__ */ str("calc(var(--s-1) / var(--ratio))"),
  "--s-1": /* @__PURE__ */ str("calc(var(--s0) / var(--ratio))"),
  "--s0": /* @__PURE__ */ rem2(1),
  "--s1": /* @__PURE__ */ str("calc(var(--s0) * var(--ratio))"),
  "--s2": /* @__PURE__ */ str("calc(var(--s1) * var(--ratio))"),
  "--s3": /* @__PURE__ */ str("calc(var(--s2) * var(--ratio))"),
  "--s4": /* @__PURE__ */ str("calc(var(--s3) * var(--ratio))"),
  "--s5": /* @__PURE__ */ str("calc(var(--s4) * var(--ratio))"),
  "--s6": /* @__PURE__ */ str("calc(var(--s5) * var(--ratio))"),
  "--theme-variant": /* @__PURE__ */ str("light"),
  "--light-mode": /* @__PURE__ */ str("1"),
  "--dark-mode": /* @__PURE__ */ str("0")
});
var size7 = {
  "5xs": "var(--s-6)",
  "4xs": "var(--s-5)",
  "3xs": "var(--s-4)",
  xxs: "var(--s-3)",
  xs: "var(--s-2)",
  s: "var(--s-1)",
  m: "var(--s0)",
  l: "var(--s1)",
  xl: "var(--s2)",
  xxl: "var(--s3)",
  "3xl": "var(--s4)",
  "4xl": "var(--s5)",
  "5xl": "var(--s6)",
  text: {
    label: "var(--s-1)",
    interactive: "calc(var(--s0) * 0.85)",
    copy: "var(--s0)",
    small: "calc(var(--s0) * 0.85)",
    tiny: "calc(var(--s0) * 0.75)",
    heading: {
      h1: "calc(var(--s0) * 2.0)",
      h2: "calc(var(--s0) * 1.8)",
      h3: "calc(var(--s0) * 1.4)",
      h4: "calc(var(--s0) * 1.1)"
    }
  }
};
var makeCSSVarLabels$prime = function(dictIsSymbol) {
  var reflectSymbol2 = reflectSymbol(dictIsSymbol);
  return {
    mappingWithIndex: function(v) {
      return function(prop2) {
        return function(v1) {
          return "--" + reflectSymbol2(prop2);
        };
      };
    }
  };
};
var makeCSSVarLabels = function(dictHMapWithIndex) {
  return hmapWithIndex(dictHMapWithIndex)(MakeCSSVarLabels.value);
};
var fontVariables = function(v) {
  return css13({
    "--main-font": str(v.main + ', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'),
    "--mono-font": str(v.mono + ", monospace, monospace")
  });
};
var defaultColours = /* @__PURE__ */ function() {
  var textDark = rgb(240)(245)(250);
  var successText = rgb(250)(250)(250);
  var successDark = rgb(20)(200)(60);
  var success = rgb(10)(150)(25);
  var required4 = rgb(200)(50)(80);
  var linkDark = hsl(265)(1)(0.83);
  var link4 = hsl(320)(1)(0.33);
  var lightBg = hsl(205)(0.13)(0.982);
  var text6 = darken(0.8)(lightBg);
  var invalidDark = rgb(230)(30)(60);
  var invalid = rgb(173)(0)(69);
  var interfaceDangerousTextDark = hsl(340)(1)(0.9);
  var interfaceBackgroundDangerousDark = hsl(340)(0.55)(0.3);
  var highlightText = rgb(255)(255)(255);
  var highlightDarkBase = hsla(265)(1)(0.6);
  var highlightDark = hsla(262)(1)(0.63)(1);
  var highlightBase = hsla(259)(1)(0.6);
  var highlight = highlightBase(1);
  var darkBg = hsl(210)(0.21)(0.02);
  var interfaceBackgroundDark = saturate(0.12)(lighten(0.14)(darkBg));
  var boxShadowLight = rgba(0)(0)(0)(0.2);
  var boxShadowDark = rgba(0)(0)(0)(0.6);
  return {
    light: {
      background: lightBg,
      backgroundAlpha0: withAlpha2(0)(lightBg),
      backgroundAlpha25: withAlpha2(0.25)(lightBg),
      backgroundAlpha50: withAlpha2(0.5)(lightBg),
      backgroundAlpha75: withAlpha2(0.75)(lightBg),
      backgroundInverted: darken(0.85)(lightBg),
      backgroundLayer1: saturate(0.05)(darken(0.12)(lightBg)),
      backgroundLayer2: saturate(0.04)(darken(0.09)(lightBg)),
      backgroundLayer3: saturate(0.03)(darken(0.06)(lightBg)),
      backgroundLayer4: saturate(0.04)(darken(0.03)(lightBg)),
      backgroundLayer5: saturate(0.05)(darken(0.01)(lightBg)),
      backgroundBright1: lightBg,
      backgroundBright2: saturate(0.05)(darken(0.01)(lightBg)),
      backgroundBright3: saturate(0.04)(darken(0.03)(lightBg)),
      backgroundBright4: saturate(0.03)(darken(0.06)(lightBg)),
      backgroundBright5: saturate(0.04)(darken(0.09)(lightBg)),
      backgroundBright6: saturate(0.05)(darken(0.12)(lightBg)),
      backgroundLayer5Border: lightBg,
      backgroundCard: lightBg,
      popperBackground: function() {
        var $1052 = desaturate(0.3);
        var $1053 = darken(0.07);
        return function($1054) {
          return $1052($1053($1054));
        };
      }()(withAlpha2(0.9)(lightBg)),
      popperBackgroundNoAlpha: desaturate(0.3)(darken(0.07)(lightBg)),
      popperInnerBorder: function() {
        var $1055 = desaturate(0.3);
        var $1056 = darken(0.25);
        return function($1057) {
          return $1055($1056($1057));
        };
      }()(withAlpha2(0.9)(lightBg)),
      popperOuterBorder: transparent,
      highlight,
      highlightAlpha10: highlightBase(0.1),
      highlightAlpha25: highlightBase(0.25),
      highlightAlpha50: highlightBase(0.5),
      highlightAlpha67: highlightBase(0.67),
      highlightDarker: withAlpha2(0.15)(darken(0.2)(highlight)),
      highlightDisabled: lighten(0.5)(desaturate(0.6)(highlight)),
      highlightLighter: withAlpha2(0.2)(lighten(0.2)(highlight)),
      highlightRotatedBackwards: darken(0.05)(rotateHue(-13)(highlight)),
      highlightRotatedForwards: saturate(0.1)(lighten(0.05)(rotateHue(3)(highlight))),
      highlightText,
      inputBackground: lightBg,
      inputBorder: desaturate(0.2)(darken(0.07)(lightBg)),
      interfaceBackground: lightBg,
      interfaceBackgroundDangerous: lightBg,
      interfaceBackgroundDisabled: darken(0.03)(lightBg),
      interfaceBackgroundHighlight: lighten(0.05)(lightBg),
      interfaceBackgroundShadow: darken(0.04)(lightBg),
      interfaceDangerousText: invalid,
      interfaceTextDisabled: darken(0.3)(lightBg),
      invalid,
      invalidText: white,
      link: link4,
      placeholderText: desaturate(0.1)(lighten(0.35)(darkBg)),
      required: required4,
      ripple: darken(0.1)(lightBg),
      success,
      successText,
      text: text6,
      textPaler1: lighten(0.1)(text6),
      textPaler2: lighten(0.2)(text6),
      textPaler3: lighten(0.3)(text6),
      textPaler4: lighten(0.4)(text6),
      textInverted: lightBg,
      textInvertedPaler1: darken(0.1)(lightBg),
      textInvertedPaler2: darken(0.2)(lightBg),
      textInvertedPaler3: darken(0.3)(lightBg),
      textInvertedPaler4: darken(0.4)(lightBg),
      boxShadow: boxShadowLight
    },
    dark: {
      background: darkBg,
      backgroundAlpha0: withAlpha2(0)(darkBg),
      backgroundAlpha25: withAlpha2(0.25)(darkBg),
      backgroundAlpha50: withAlpha2(0.5)(darkBg),
      backgroundAlpha75: withAlpha2(0.75)(darkBg),
      backgroundInverted: lightBg,
      backgroundLayer1: saturate(0.1)(lighten(0.04)(darkBg)),
      backgroundLayer2: saturate(0.04)(lighten(0.09)(darkBg)),
      backgroundLayer3: saturate(0.02)(lighten(0.14)(darkBg)),
      backgroundLayer4: saturate(0)(lighten(0.18)(darkBg)),
      backgroundLayer5: saturate(0)(lighten(0.21)(darkBg)),
      backgroundBright1: darkBg,
      backgroundBright2: saturate(0.1)(lighten(0.04)(darkBg)),
      backgroundBright3: saturate(0.04)(lighten(0.09)(darkBg)),
      backgroundBright4: saturate(0.02)(lighten(0.14)(darkBg)),
      backgroundBright5: saturate(0)(lighten(0.18)(darkBg)),
      backgroundBright6: saturate(0)(lighten(0.21)(darkBg)),
      backgroundLayer5Border: lighten(0.37)(darkBg),
      backgroundCard: saturate(0.1)(lighten(0.05)(darkBg)),
      popperBackground: function() {
        var $1058 = saturate(0.05);
        var $1059 = lighten(0.09);
        return function($1060) {
          return $1058($1059($1060));
        };
      }()(withAlpha2(0.8)(darkBg)),
      popperBackgroundNoAlpha: saturate(0.05)(lighten(0.09)(darkBg)),
      popperInnerBorder: function() {
        var $1061 = desaturate(0.3);
        var $1062 = darken(0.7);
        return function($1063) {
          return $1061($1062($1063));
        };
      }()(withAlpha2(0.9)(lightBg)),
      popperOuterBorder: darkBg,
      highlight: highlightDark,
      highlightAlpha10: highlightDarkBase(0.1),
      highlightAlpha25: highlightDarkBase(0.25),
      highlightAlpha50: highlightDarkBase(0.5),
      highlightAlpha67: highlightDarkBase(0.67),
      highlightDarker: withAlpha2(0.4)(darken(0.5)(highlightDark)),
      highlightDisabled: darken(0.32)(desaturate(0.76)(highlightDark)),
      highlightLighter: withAlpha2(0.2)(lighten(0.5)(highlightDark)),
      highlightRotatedBackwards: rotateHue(-30)(highlightDark),
      highlightRotatedForwards: rotateHue(30)(highlightDark),
      highlightText,
      inputBackground: lighten(0.2)(saturate(0.1)(darkBg)),
      inputBorder: lighten(0.25)(saturate(0.1)(darkBg)),
      interfaceBackground: interfaceBackgroundDark,
      interfaceBackgroundDangerous: interfaceBackgroundDangerousDark,
      interfaceBackgroundDisabled: saturate(0.02)(lighten(0.14)(darkBg)),
      interfaceBackgroundHighlight: lighten(0.1)(interfaceBackgroundDark),
      interfaceBackgroundShadow: darken(0.1)(interfaceBackgroundDark),
      interfaceDangerousText: interfaceDangerousTextDark,
      interfaceTextDisabled: function() {
        var $1064 = desaturate(0.3);
        var $1065 = lighten(0.25);
        return function($1066) {
          return $1064($1065($1066));
        };
      }()(desaturate(0.3)(interfaceBackgroundDark)),
      invalid: invalidDark,
      invalidText: successText,
      link: linkDark,
      placeholderText: darken(0.4)(white),
      required: required4,
      ripple: saturate(0)(lighten(0.31)(darkBg)),
      success: successDark,
      successText,
      text: textDark,
      textPaler1: desaturate(0.25)(darken(0.1)(textDark)),
      textPaler2: desaturate(0.25)(darken(0.2)(textDark)),
      textPaler3: desaturate(0.25)(darken(0.3)(textDark)),
      textPaler4: desaturate(0.25)(darken(0.4)(textDark)),
      textInverted: darkBg,
      textInvertedPaler1: lighten(0.1)(darkBg),
      textInvertedPaler2: lighten(0.2)(darkBg),
      textInvertedPaler3: lighten(0.3)(darkBg),
      textInvertedPaler4: lighten(0.4)(darkBg),
      boxShadow: boxShadowDark
    }
  };
}();
var lightModeVariables = /* @__PURE__ */ function() {
  return foldMap4(function(k) {
    return function(v) {
      return singleton6("--" + k)(str(cssStringRGBA(v)));
    };
  })(fromHomogeneous3(defaultColours.light));
}();
var lightModeStyle = lightModeVariables;
var darkModeVariables = /* @__PURE__ */ function() {
  return foldMap4(function(k) {
    return function(v) {
      return singleton6("--" + k)(str(cssStringRGBA(v)));
    };
  })(fromHomogeneous3(defaultColours.dark));
}();
var darkModeStyle = darkModeVariables;
var colour = /* @__PURE__ */ function() {
  return hmap(hmapRecord()(mapRecordWithIndexCons2(constMapping2)(mapRecordWithIndexCons1(constMapping2)(mapRecordWithIndexCons22(constMapping2)(mapRecordWithIndexCons3(constMapping2)(mapRecordWithIndexCons4(constMapping2)(mapRecordWithIndexCons5(constMapping2)(mapRecordWithIndexCons6(constMapping2)(mapRecordWithIndexCons7(constMapping2)(mapRecordWithIndexCons8(constMapping2)(mapRecordWithIndexCons9(constMapping2)(mapRecordWithIndexCons10(constMapping2)(mapRecordWithIndexCons11(constMapping2)(mapRecordWithIndexCons12(constMapping2)(mapRecordWithIndexCons13(constMapping2)(mapRecordWithIndexCons14(constMapping2)(mapRecordWithIndexCons15(constMapping2)(mapRecordWithIndexCons16(constMapping2)(mapRecordWithIndexCons17(constMapping2)(mapRecordWithIndexCons18(constMapping2)(mapRecordWithIndexCons19(constMapping2)(mapRecordWithIndexCons20(constMapping2)(mapRecordWithIndexCons21(constMapping2)(mapRecordWithIndexCons222(constMapping2)(mapRecordWithIndexCons23(constMapping2)(mapRecordWithIndexCons24(constMapping2)(mapRecordWithIndexCons25(constMapping2)(mapRecordWithIndexCons26(constMapping2)(mapRecordWithIndexCons27(constMapping2)(mapRecordWithIndexCons28(constMapping2)(mapRecordWithIndexCons29(constMapping2)(mapRecordWithIndexCons30(constMapping2)(mapRecordWithIndexCons31(constMapping2)(mapRecordWithIndexCons32(constMapping2)(mapRecordWithIndexCons33(constMapping2)(mapRecordWithIndexCons34(constMapping2)(mapRecordWithIndexCons35(constMapping2)(mapRecordWithIndexCons36(constMapping2)(mapRecordWithIndexCons37(constMapping2)(mapRecordWithIndexCons38(constMapping2)(mapRecordWithIndexCons39(constMapping2)(mapRecordWithIndexCons40(constMapping2)(mapRecordWithIndexCons41(constMapping2)(mapRecordWithIndexCons42(constMapping2)(mapRecordWithIndexCons43(constMapping2)(mapRecordWithIndexCons44(constMapping2)(mapRecordWithIndexCons45(constMapping2)(mapRecordWithIndexCons46(constMapping2)(mapRecordWithIndexCons47(constMapping2)(mapRecordWithIndexCons48(constMapping2)(mapRecordWithIndexCons49(constMapping2)(mapRecordWithIndexCons50(constMapping2)(mapRecordWithIndexCons51(constMapping2)(mapRecordWithIndexCons52(constMapping2)(mapRecordWithIndexCons53(constMapping2)(mapRecordWithIndexCons54(constMapping2)(mapRecordWithIndexCons55(constMapping2)(mapRecordWithIndexCons56(constMapping2)(mapRecordWithIndexCons57(constMapping2)(mapRecordWithIndexCons58(constMapping2)(mapRecordWithIndexCons59(constMapping2)(mapRecordWithIndexCons60(constMapping2)(mapRecordWithIndexCons61(constMapping2)(mapRecordWithIndexNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(function(x) {
    return "var(" + (x + ")");
  })(makeCSSVarLabels(hmapWithIndexRecord()(mapRecordWithIndexCons2(makeCSSVarLabels$prime(backgroundIsSymbol))(mapRecordWithIndexCons1(makeCSSVarLabels$prime(backgroundAlpha0IsSymbol))(mapRecordWithIndexCons22(makeCSSVarLabels$prime(backgroundAlpha25IsSymbol))(mapRecordWithIndexCons3(makeCSSVarLabels$prime(backgroundAlpha50IsSymbol))(mapRecordWithIndexCons4(makeCSSVarLabels$prime(backgroundAlpha75IsSymbol))(mapRecordWithIndexCons5(makeCSSVarLabels$prime(backgroundBright1IsSymbol))(mapRecordWithIndexCons6(makeCSSVarLabels$prime(backgroundBright2IsSymbol))(mapRecordWithIndexCons7(makeCSSVarLabels$prime(backgroundBright3IsSymbol))(mapRecordWithIndexCons8(makeCSSVarLabels$prime(backgroundBright4IsSymbol))(mapRecordWithIndexCons9(makeCSSVarLabels$prime(backgroundBright5IsSymbol))(mapRecordWithIndexCons10(makeCSSVarLabels$prime(backgroundBright6IsSymbol))(mapRecordWithIndexCons11(makeCSSVarLabels$prime(backgroundCardIsSymbol))(mapRecordWithIndexCons12(makeCSSVarLabels$prime(backgroundInvertedIsSymbol))(mapRecordWithIndexCons13(makeCSSVarLabels$prime(backgroundLayer1IsSymbol))(mapRecordWithIndexCons14(makeCSSVarLabels$prime(backgroundLayer2IsSymbol))(mapRecordWithIndexCons15(makeCSSVarLabels$prime(backgroundLayer3IsSymbol))(mapRecordWithIndexCons16(makeCSSVarLabels$prime(backgroundLayer4IsSymbol))(mapRecordWithIndexCons17(makeCSSVarLabels$prime(backgroundLayer5IsSymbol))(mapRecordWithIndexCons18(makeCSSVarLabels$prime(backgroundLayer5BorderIsSymbol))(mapRecordWithIndexCons19(makeCSSVarLabels$prime(boxShadowIsSymbol))(mapRecordWithIndexCons20(makeCSSVarLabels$prime(highlightIsSymbol))(mapRecordWithIndexCons21(makeCSSVarLabels$prime(highlightAlpha10IsSymbol))(mapRecordWithIndexCons222(makeCSSVarLabels$prime(highlightAlpha25IsSymbol))(mapRecordWithIndexCons23(makeCSSVarLabels$prime(highlightAlpha50IsSymbol))(mapRecordWithIndexCons24(makeCSSVarLabels$prime(highlightAlpha67IsSymbol))(mapRecordWithIndexCons25(makeCSSVarLabels$prime(highlightDarkerIsSymbol))(mapRecordWithIndexCons26(makeCSSVarLabels$prime(highlightDisabledIsSymbol))(mapRecordWithIndexCons27(makeCSSVarLabels$prime(highlightLighterIsSymbol))(mapRecordWithIndexCons28(makeCSSVarLabels$prime(highlightRotatedBackwardsIsSymbol))(mapRecordWithIndexCons29(makeCSSVarLabels$prime(highlightRotatedForwardsIsSymbol))(mapRecordWithIndexCons30(makeCSSVarLabels$prime(highlightTextIsSymbol))(mapRecordWithIndexCons31(makeCSSVarLabels$prime(inputBackgroundIsSymbol))(mapRecordWithIndexCons32(makeCSSVarLabels$prime(inputBorderIsSymbol))(mapRecordWithIndexCons33(makeCSSVarLabels$prime(interfaceBackgroundIsSymbol))(mapRecordWithIndexCons34(makeCSSVarLabels$prime(interfaceBackgroundDangerousIsSymbol))(mapRecordWithIndexCons35(makeCSSVarLabels$prime(interfaceBackgroundDisabledIsSymbol))(mapRecordWithIndexCons36(makeCSSVarLabels$prime(interfaceBackgroundHighlightIsSymbol))(mapRecordWithIndexCons37(makeCSSVarLabels$prime(interfaceBackgroundShadowIsSymbol))(mapRecordWithIndexCons38(makeCSSVarLabels$prime(interfaceDangerousTextIsSymbol))(mapRecordWithIndexCons39(makeCSSVarLabels$prime(interfaceTextDisabledIsSymbol))(mapRecordWithIndexCons40(makeCSSVarLabels$prime(invalidIsSymbol))(mapRecordWithIndexCons41(makeCSSVarLabels$prime(invalidTextIsSymbol))(mapRecordWithIndexCons42(makeCSSVarLabels$prime(linkIsSymbol))(mapRecordWithIndexCons43(makeCSSVarLabels$prime(placeholderTextIsSymbol))(mapRecordWithIndexCons44(makeCSSVarLabels$prime(popperBackgroundIsSymbol))(mapRecordWithIndexCons45(makeCSSVarLabels$prime(popperBackgroundNoAlphaIsSymbol))(mapRecordWithIndexCons46(makeCSSVarLabels$prime(popperInnerBorderIsSymbol))(mapRecordWithIndexCons47(makeCSSVarLabels$prime(popperOuterBorderIsSymbol))(mapRecordWithIndexCons48(makeCSSVarLabels$prime(requiredIsSymbol))(mapRecordWithIndexCons49(makeCSSVarLabels$prime(rippleIsSymbol))(mapRecordWithIndexCons50(makeCSSVarLabels$prime(successIsSymbol))(mapRecordWithIndexCons51(makeCSSVarLabels$prime(successTextIsSymbol))(mapRecordWithIndexCons52(makeCSSVarLabels$prime(textIsSymbol))(mapRecordWithIndexCons53(makeCSSVarLabels$prime(textInvertedIsSymbol))(mapRecordWithIndexCons54(makeCSSVarLabels$prime(textInvertedPaler1IsSymbol))(mapRecordWithIndexCons55(makeCSSVarLabels$prime(textInvertedPaler2IsSymbol))(mapRecordWithIndexCons56(makeCSSVarLabels$prime(textInvertedPaler3IsSymbol))(mapRecordWithIndexCons57(makeCSSVarLabels$prime(textInvertedPaler4IsSymbol))(mapRecordWithIndexCons58(makeCSSVarLabels$prime(textPaler1IsSymbol))(mapRecordWithIndexCons59(makeCSSVarLabels$prime(textPaler2IsSymbol))(mapRecordWithIndexCons60(makeCSSVarLabels$prime(textPaler3IsSymbol))(mapRecordWithIndexCons61(makeCSSVarLabels$prime(textPaler4IsSymbol))(mapRecordWithIndexNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(defaultColours.light));
}();
var col2 = /* @__PURE__ */ mapRecord()(/* @__PURE__ */ mapRecordCons(backgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha0IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha25IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha50IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha75IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright1IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright2IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright3IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright4IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright5IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright6IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundCardIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundInvertedIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer1IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer2IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer3IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer4IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer5IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer5BorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(boxShadowIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha10IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha25IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha50IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha67IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightDarkerIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightLighterIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightRotatedBackwardsIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightRotatedForwardsIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(inputBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(inputBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundDangerousIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundHighlightIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundShadowIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceDangerousTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceTextDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(invalidIsSymbol)()(/* @__PURE__ */ mapRecordCons(invalidTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(linkIsSymbol)()(/* @__PURE__ */ mapRecordCons(placeholderTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperBackgroundNoAlphaIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperInnerBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperOuterBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(requiredIsSymbol)()(/* @__PURE__ */ mapRecordCons(rippleIsSymbol)()(/* @__PURE__ */ mapRecordCons(successIsSymbol)()(/* @__PURE__ */ mapRecordCons(successTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(textIsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedIsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler1IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler2IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler3IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler4IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler1IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler2IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler3IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler4IsSymbol)()(mapRecordNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())(str)(colour);
var autoSwitchColourTheme = /* @__PURE__ */ function() {
  var darkObj = foldMap4(function(k) {
    return function(v) {
      return singleton6("--" + k)(str(cssStringRGBA(v)));
    };
  })(fromHomogeneous3(defaultColours.dark));
  var lightObj = foldMap4(function(k) {
    return function(v) {
      return insert3("&:th")(nested(darkObj))(insert3("@media (prefers-color-scheme: dark)")(nested(darkObj))(singleton6("--" + k)(str(cssStringRGBA(v)))));
    };
  })(fromHomogeneous3(defaultColours.light));
  return lightObj;
}();
var mkGlobal = function(maybeMode) {
  return css13({
    "html, body": nested(css13({
      minHeight: percent(100),
      minWidth: percent(100),
      WebkitTextSizeAdjust: _100percent
    })),
    ":root": nested(append13(css13({
      "@media (prefers-color-scheme: dark)": nest3({
        "--theme-variant": str("dark"),
        "--light-mode": str("0"),
        "--dark-mode": str("1")
      })
    }))(append13(variables2)(fontVariables({
      main: '"Inter V", "Inter var", Inter',
      mono: "Victor Mono, Menlo, Consolas, Monaco, Liberation Mono, Lucida Console"
    })))),
    html: nested(css13({
      boxSizing: str("border-box")
    })),
    body: nested(append13(css13({
      fontFamily: str("var(--main-font)"),
      backgroundColor: col2.background,
      color: col2.text,
      margin: str("0")
    }))(function() {
      if (maybeMode instanceof Nothing) {
        return autoSwitchColourTheme;
      }
      ;
      if (maybeMode instanceof Just && maybeMode.value0 instanceof DarkMode) {
        return darkModeStyle;
      }
      ;
      if (maybeMode instanceof Just && maybeMode.value0 instanceof LightMode) {
        return lightModeStyle;
      }
      ;
      throw new Error("Failed pattern match at Yoga.Block.Container.Style (line 146, column 14 - line 149, column 44): " + [maybeMode.constructor.name]);
    }())),
    "pre,code": nest3({
      fontFamily: str("var(--mono-font)")
    }),
    "h1,h2,h3,h4": nest3({
      fontWeight: str("700")
    }),
    a: nest3({
      fontWeight: str("600"),
      textDecoration: str("underline"),
      cursor: str("pointer"),
      "&:hover": nest3({
        textDecoration: str("none")
      })
    }),
    "::selection": nest3({
      color: col2.highlightText,
      background: col2.highlight
    }),
    "*, *:before, *:after": nested(css13({
      boxSizing: str("inherit")
    }))
  });
};
var global4 = /* @__PURE__ */ function() {
  return mkGlobal(Nothing.value);
}();

// output/React.Basic.DOM.SVG/index.js
var _svg$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("svg"));
var svg$prime = function() {
  return _svg$prime;
};
var svg$prime1 = /* @__PURE__ */ svg$prime();
var svg2 = function() {
  return element(svg$prime1);
};
var _rect$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("rect"));
var rect$prime = function() {
  return _rect$prime;
};
var rect$prime1 = /* @__PURE__ */ rect$prime();
var rect = function() {
  return element(rect$prime1);
};
var _path$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("path"));
var path$prime = function() {
  return _path$prime;
};
var path$prime1 = /* @__PURE__ */ path$prime();
var path2 = function() {
  return element(path$prime1);
};
var _g$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("g"));
var g$prime = function() {
  return _g$prime;
};

// output/Fahrtwind.Icon.Common/index.js
var svg3 = /* @__PURE__ */ svg2();
var mapFlipped4 = /* @__PURE__ */ mapFlipped(functorArray);
var path3 = /* @__PURE__ */ path2();
var outlines = function(ds) {
  return svg3({
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg",
    xmlSpace: "preserve",
    stroke: "var(--icon-colour, currentColor)",
    fill: "none",
    children: mapFlipped4(ds)(function(d) {
      return path3({
        strokeLinecap: "round",
        strokeLinejoin: "round",
        strokeWidth: "2",
        d
      });
    })
  });
};
var outline = function(d) {
  return outlines([d]);
};

// output/Fahrtwind.Icon.Heroicons/index.js
var pencil = /* @__PURE__ */ outline("M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z");
var dotsVertical = /* @__PURE__ */ outline("M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z");
var code2 = /* @__PURE__ */ outline("M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4");

// node_modules/tslib/modules/index.js
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn
} = import_tslib.default;

// node_modules/framer-motion/dist/es/motion/index.mjs
var React4 = __toESM(require_react(), 1);
var import_react20 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/motion/features/use-features.mjs
var React3 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/process.mjs
var defaultEnvironment = "production";
var env = typeof process === "undefined" || process.env === void 0 ? defaultEnvironment : process.env.NODE_ENV || defaultEnvironment;

// node_modules/framer-motion/dist/es/motion/features/definitions.mjs
var createDefinition = function(propNames) {
  return {
    isEnabled: function(props) {
      return propNames.some(function(name15) {
        return !!props[name15];
      });
    }
  };
};
var featureDefinitions = {
  measureLayout: createDefinition(["layout", "layoutId", "drag"]),
  animation: createDefinition([
    "animate",
    "exit",
    "variants",
    "whileHover",
    "whileTap",
    "whileFocus",
    "whileDrag",
    "whileInView"
  ]),
  exit: createDefinition(["exit"]),
  drag: createDefinition(["drag", "dragControls"]),
  focus: createDefinition(["whileFocus"]),
  hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
  tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
  pan: createDefinition([
    "onPan",
    "onPanStart",
    "onPanSessionStart",
    "onPanEnd"
  ]),
  inView: createDefinition([
    "whileInView",
    "onViewportEnter",
    "onViewportLeave"
  ])
};
function loadFeatures(features) {
  for (var key in features) {
    if (features[key] === null)
      continue;
    if (key === "projectionNodeConstructor") {
      featureDefinitions.projectionNodeConstructor = features[key];
    } else {
      featureDefinitions[key].Component = features[key];
    }
  }
}

// node_modules/framer-motion/dist/es/motion/features/use-features.mjs
var import_hey_listen = __toESM(require_dist(), 1);

// node_modules/framer-motion/dist/es/context/LazyContext.mjs
var import_react5 = __toESM(require_react(), 1);
var LazyContext = (0, import_react5.createContext)({ strict: false });

// node_modules/framer-motion/dist/es/motion/features/use-features.mjs
var featureNames = Object.keys(featureDefinitions);
var numFeatures = featureNames.length;
function useFeatures(props, visualElement2, preloadedFeatures) {
  var features = [];
  var lazyContext = (0, import_react6.useContext)(LazyContext);
  if (!visualElement2)
    return null;
  if (env !== "production" && preloadedFeatures && lazyContext.strict) {
    (0, import_hey_listen.invariant)(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
  }
  for (var i3 = 0; i3 < numFeatures; i3++) {
    var name_1 = featureNames[i3];
    var _a = featureDefinitions[name_1], isEnabled = _a.isEnabled, Component = _a.Component;
    if (isEnabled(props) && Component) {
      features.push(React3.createElement(Component, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
    }
  }
  return features;
}

// node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
var import_react7 = __toESM(require_react(), 1);
var MotionConfigContext = (0, import_react7.createContext)({
  transformPagePoint: function(p2) {
    return p2;
  },
  isStatic: false,
  reducedMotion: "never"
});

// node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
var import_react8 = __toESM(require_react(), 1);
var MotionContext = (0, import_react8.createContext)({});
function useVisualElementContext() {
  return (0, import_react8.useContext)(MotionContext).visualElement;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
var import_react12 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/PresenceContext.mjs
var import_react9 = __toESM(require_react(), 1);
var PresenceContext = (0, import_react9.createContext)(null);

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var import_react10 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-browser.mjs
var isBrowser = typeof document !== "undefined";

// node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
var useIsomorphicLayoutEffect = isBrowser ? import_react10.useLayoutEffect : import_react10.useEffect;

// node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs
var import_react11 = __toESM(require_react(), 1);
var prefersReducedMotion = { current: null };
var hasDetected = false;
function initPrefersReducedMotion() {
  hasDetected = true;
  if (!isBrowser)
    return;
  if (window.matchMedia) {
    var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
    var setReducedMotionPreferences = function() {
      return prefersReducedMotion.current = motionMediaQuery_1.matches;
    };
    motionMediaQuery_1.addListener(setReducedMotionPreferences);
    setReducedMotionPreferences();
  } else {
    prefersReducedMotion.current = false;
  }
}
function useReducedMotion() {
  !hasDetected && initPrefersReducedMotion();
  var _a = __read((0, import_react11.useState)(prefersReducedMotion.current), 1), shouldReduceMotion = _a[0];
  return shouldReduceMotion;
}
function useReducedMotionConfig() {
  var reducedMotionPreference = useReducedMotion();
  var reducedMotion = (0, import_react11.useContext)(MotionConfigContext).reducedMotion;
  if (reducedMotion === "never") {
    return false;
  } else if (reducedMotion === "always") {
    return true;
  } else {
    return reducedMotionPreference;
  }
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
function useVisualElement(Component, visualState, props, createVisualElement) {
  var lazyContext = (0, import_react12.useContext)(LazyContext);
  var parent2 = useVisualElementContext();
  var presenceContext = (0, import_react12.useContext)(PresenceContext);
  var shouldReduceMotion = useReducedMotionConfig();
  var visualElementRef = (0, import_react12.useRef)(void 0);
  if (!createVisualElement)
    createVisualElement = lazyContext.renderer;
  if (!visualElementRef.current && createVisualElement) {
    visualElementRef.current = createVisualElement(Component, {
      visualState,
      parent: parent2,
      props,
      presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
      blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,
      shouldReduceMotion
    });
  }
  var visualElement2 = visualElementRef.current;
  useIsomorphicLayoutEffect(function() {
    visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
  });
  (0, import_react12.useEffect)(function() {
    var _a;
    (_a = visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.animateChanges();
  });
  useIsomorphicLayoutEffect(function() {
    return function() {
      return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
    };
  }, []);
  return visualElement2;
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
var import_react13 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
function isRefObject(ref) {
  return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
}

// node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
function useMotionRef(visualState, visualElement2, externalRef) {
  return (0, import_react13.useCallback)(function(instance) {
    var _a;
    instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));
    if (visualElement2) {
      instance ? visualElement2.mount(instance) : visualElement2.unmount();
    }
    if (externalRef) {
      if (typeof externalRef === "function") {
        externalRef(instance);
      } else if (isRefObject(externalRef)) {
        externalRef.current = instance;
      }
    }
  }, [visualElement2]);
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
var import_react14 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/utils/variants.mjs
function isVariantLabels(v) {
  return Array.isArray(v);
}
function isVariantLabel(v) {
  return typeof v === "string" || isVariantLabels(v);
}
function getCurrent(visualElement2) {
  var current = {};
  visualElement2.forEachValue(function(value12, key) {
    return current[key] = value12.get();
  });
  return current;
}
function getVelocity(visualElement2) {
  var velocity = {};
  visualElement2.forEachValue(function(value12, key) {
    return velocity[key] = value12.getVelocity();
  });
  return velocity;
}
function resolveVariantFromProps(props, definition, custom2, currentValues, currentVelocity) {
  var _a;
  if (currentValues === void 0) {
    currentValues = {};
  }
  if (currentVelocity === void 0) {
    currentVelocity = {};
  }
  if (typeof definition === "function") {
    definition = definition(custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, currentValues, currentVelocity);
  }
  if (typeof definition === "string") {
    definition = (_a = props.variants) === null || _a === void 0 ? void 0 : _a[definition];
  }
  if (typeof definition === "function") {
    definition = definition(custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, currentValues, currentVelocity);
  }
  return definition;
}
function resolveVariant(visualElement2, definition, custom2) {
  var props = visualElement2.getProps();
  return resolveVariantFromProps(props, definition, custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
}
function checkIfControllingVariants(props) {
  var _a;
  return typeof ((_a = props.animate) === null || _a === void 0 ? void 0 : _a.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
}
function checkIfVariantNode(props) {
  return Boolean(checkIfControllingVariants(props) || props.variants);
}

// node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
function getCurrentTreeVariants(props, context) {
  if (checkIfControllingVariants(props)) {
    var initial4 = props.initial, animate6 = props.animate;
    return {
      initial: initial4 === false || isVariantLabel(initial4) ? initial4 : void 0,
      animate: isVariantLabel(animate6) ? animate6 : void 0
    };
  }
  return props.inherit !== false ? context : {};
}

// node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
function useCreateMotionContext(props) {
  var _a = getCurrentTreeVariants(props, (0, import_react14.useContext)(MotionContext)), initial4 = _a.initial, animate6 = _a.animate;
  return (0, import_react14.useMemo)(function() {
    return { initial: initial4, animate: animate6 };
  }, [variantLabelsAsDependency(initial4), variantLabelsAsDependency(animate6)]);
}
function variantLabelsAsDependency(prop2) {
  return Array.isArray(prop2) ? prop2.join(" ") : prop2;
}

// node_modules/framer-motion/dist/es/utils/use-constant.mjs
var import_react15 = __toESM(require_react(), 1);
function useConstant(init3) {
  var ref = (0, import_react15.useRef)(null);
  if (ref.current === null) {
    ref.current = init3();
  }
  return ref.current;
}

// node_modules/framesync/dist/es/on-next-frame.mjs
var defaultTimestep = 1 / 60 * 1e3;
var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
var onNextFrame = typeof window !== "undefined" ? (callback2) => window.requestAnimationFrame(callback2) : (callback2) => setTimeout(() => callback2(getCurrentTime()), defaultTimestep);

// node_modules/framesync/dist/es/create-render-step.mjs
function createRenderStep(runNextFrame2) {
  let toRun = [];
  let toRunNextFrame = [];
  let numToRun = 0;
  let isProcessing2 = false;
  let flushNextFrame = false;
  const toKeepAlive = /* @__PURE__ */ new WeakSet();
  const step3 = {
    schedule: (callback2, keepAlive = false, immediate = false) => {
      const addToCurrentFrame = immediate && isProcessing2;
      const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
      if (keepAlive)
        toKeepAlive.add(callback2);
      if (buffer.indexOf(callback2) === -1) {
        buffer.push(callback2);
        if (addToCurrentFrame && isProcessing2)
          numToRun = toRun.length;
      }
      return callback2;
    },
    cancel: (callback2) => {
      const index6 = toRunNextFrame.indexOf(callback2);
      if (index6 !== -1)
        toRunNextFrame.splice(index6, 1);
      toKeepAlive.delete(callback2);
    },
    process: (frameData) => {
      if (isProcessing2) {
        flushNextFrame = true;
        return;
      }
      isProcessing2 = true;
      [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
      toRunNextFrame.length = 0;
      numToRun = toRun.length;
      if (numToRun) {
        for (let i3 = 0; i3 < numToRun; i3++) {
          const callback2 = toRun[i3];
          callback2(frameData);
          if (toKeepAlive.has(callback2)) {
            step3.schedule(callback2);
            runNextFrame2();
          }
        }
      }
      isProcessing2 = false;
      if (flushNextFrame) {
        flushNextFrame = false;
        step3.process(frameData);
      }
    }
  };
  return step3;
}

// node_modules/framesync/dist/es/index.mjs
var maxElapsed = 40;
var useDefaultElapsed = true;
var runNextFrame = false;
var isProcessing = false;
var frame = {
  delta: 0,
  timestamp: 0
};
var stepsOrder = [
  "read",
  "update",
  "preRender",
  "render",
  "postRender"
];
var steps = stepsOrder.reduce((acc, key) => {
  acc[key] = createRenderStep(() => runNextFrame = true);
  return acc;
}, {});
var sync = stepsOrder.reduce((acc, key) => {
  const step3 = steps[key];
  acc[key] = (process4, keepAlive = false, immediate = false) => {
    if (!runNextFrame)
      startLoop();
    return step3.schedule(process4, keepAlive, immediate);
  };
  return acc;
}, {});
var cancelSync = stepsOrder.reduce((acc, key) => {
  acc[key] = steps[key].cancel;
  return acc;
}, {});
var flushSync = stepsOrder.reduce((acc, key) => {
  acc[key] = () => steps[key].process(frame);
  return acc;
}, {});
var processStep = (stepId) => steps[stepId].process(frame);
var processFrame = (timestamp) => {
  runNextFrame = false;
  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
  frame.timestamp = timestamp;
  isProcessing = true;
  stepsOrder.forEach(processStep);
  isProcessing = false;
  if (runNextFrame) {
    useDefaultElapsed = false;
    onNextFrame(processFrame);
  }
};
var startLoop = () => {
  runNextFrame = true;
  useDefaultElapsed = true;
  if (!isProcessing)
    onNextFrame(processFrame);
};
var getFrameData = () => frame;
var es_default = sync;

// node_modules/popmotion/dist/es/animations/utils/find-spring.mjs
var import_hey_listen2 = __toESM(require_dist(), 1);

// node_modules/popmotion/dist/es/utils/clamp.mjs
var clamp3 = (min6, max7, v) => Math.min(Math.max(v, min6), max7);

// node_modules/popmotion/dist/es/animations/utils/find-spring.mjs
var safeMin = 1e-3;
var minDuration = 0.01;
var maxDuration = 10;
var minDamping = 0.05;
var maxDamping = 1;
function findSpring({ duration: duration2 = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
  let envelope;
  let derivative;
  (0, import_hey_listen2.warning)(duration2 <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
  let dampingRatio = 1 - bounce;
  dampingRatio = clamp3(minDamping, maxDamping, dampingRatio);
  duration2 = clamp3(minDuration, maxDuration, duration2 / 1e3);
  if (dampingRatio < 1) {
    envelope = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration2;
      const a3 = exponentialDecay - velocity;
      const b3 = calcAngularFreq(undampedFreq2, dampingRatio);
      const c2 = Math.exp(-delta);
      return safeMin - a3 / b3 * c2;
    };
    derivative = (undampedFreq2) => {
      const exponentialDecay = undampedFreq2 * dampingRatio;
      const delta = exponentialDecay * duration2;
      const d = delta * velocity + velocity;
      const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration2;
      const f = Math.exp(-delta);
      const g2 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
      const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
      return factor * ((d - e) * f) / g2;
    };
  } else {
    envelope = (undampedFreq2) => {
      const a3 = Math.exp(-undampedFreq2 * duration2);
      const b3 = (undampedFreq2 - velocity) * duration2 + 1;
      return -safeMin + a3 * b3;
    };
    derivative = (undampedFreq2) => {
      const a3 = Math.exp(-undampedFreq2 * duration2);
      const b3 = (velocity - undampedFreq2) * (duration2 * duration2);
      return a3 * b3;
    };
  }
  const initialGuess = 5 / duration2;
  const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
  duration2 = duration2 * 1e3;
  if (isNaN(undampedFreq)) {
    return {
      stiffness: 100,
      damping: 10,
      duration: duration2
    };
  } else {
    const stiffness = Math.pow(undampedFreq, 2) * mass;
    return {
      stiffness,
      damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
      duration: duration2
    };
  }
}
var rootIterations = 12;
function approximateRoot(envelope, derivative, initialGuess) {
  let result = initialGuess;
  for (let i3 = 1; i3 < rootIterations; i3++) {
    result = result - envelope(result) / derivative(result);
  }
  return result;
}
function calcAngularFreq(undampedFreq, dampingRatio) {
  return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
}

// node_modules/popmotion/dist/es/animations/generators/spring.mjs
var durationKeys = ["duration", "bounce"];
var physicsKeys = ["stiffness", "damping", "mass"];
function isSpringType(options2, keys4) {
  return keys4.some((key) => options2[key] !== void 0);
}
function getSpringOptions(options2) {
  let springOptions = Object.assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options2);
  if (!isSpringType(options2, physicsKeys) && isSpringType(options2, durationKeys)) {
    const derived = findSpring(options2);
    springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0, mass: 1 });
    springOptions.isResolvedFromDuration = true;
  }
  return springOptions;
}
function spring(_a) {
  var { from: from3 = 0, to: to2 = 1, restSpeed = 2, restDelta } = _a, options2 = __rest(_a, ["from", "to", "restSpeed", "restDelta"]);
  const state3 = { done: false, value: from3 };
  let { stiffness, damping, mass, velocity, duration: duration2, isResolvedFromDuration } = getSpringOptions(options2);
  let resolveSpring = zero2;
  let resolveVelocity = zero2;
  function createSpring() {
    const initialVelocity = velocity ? -(velocity / 1e3) : 0;
    const initialDelta = to2 - from3;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
    if (restDelta === void 0) {
      restDelta = Math.min(Math.abs(to2 - from3) / 100, 0.4);
    }
    if (dampingRatio < 1) {
      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
      };
      resolveVelocity = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = (t) => to2 - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
    } else {
      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = (t) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
        const freqForT = Math.min(dampedAngularFreq * t, 300);
        return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
      };
    }
  }
  createSpring();
  return {
    next: (t) => {
      const current = resolveSpring(t);
      if (!isResolvedFromDuration) {
        const currentVelocity = resolveVelocity(t) * 1e3;
        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
        const isBelowDisplacementThreshold = Math.abs(to2 - current) <= restDelta;
        state3.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
      } else {
        state3.done = t >= duration2;
      }
      state3.value = state3.done ? to2 : current;
      return state3;
    },
    flipTarget: () => {
      velocity = -velocity;
      [from3, to2] = [to2, from3];
      createSpring();
    }
  };
}
spring.needsInterpolation = (a3, b3) => typeof a3 === "string" || typeof b3 === "string";
var zero2 = (_t) => 0;

// node_modules/popmotion/dist/es/utils/progress.mjs
var progress2 = (from3, to2, value12) => {
  const toFromDifference = to2 - from3;
  return toFromDifference === 0 ? 1 : (value12 - from3) / toFromDifference;
};

// node_modules/popmotion/dist/es/utils/mix.mjs
var mix = (from3, to2, progress3) => -progress3 * from3 + progress3 * to2 + from3;

// node_modules/style-value-types/dist/es/utils.mjs
var clamp4 = (min6, max7) => (v) => Math.max(Math.min(v, max7), min6);
var sanitize = (v) => v % 1 ? Number(v.toFixed(5)) : v;
var floatRegex = /(-)?([\d]*\.?[\d])+/g;
var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
function isString(v) {
  return typeof v === "string";
}

// node_modules/style-value-types/dist/es/numbers/index.mjs
var number = {
  test: (v) => typeof v === "number",
  parse: parseFloat,
  transform: (v) => v
};
var alpha = Object.assign(Object.assign({}, number), { transform: clamp4(0, 1) });
var scale = Object.assign(Object.assign({}, number), { default: 1 });

// node_modules/style-value-types/dist/es/numbers/units.mjs
var createUnitType = (unit2) => ({
  test: (v) => isString(v) && v.endsWith(unit2) && v.split(" ").length === 1,
  parse: parseFloat,
  transform: (v) => `${v}${unit2}`
});
var degrees = createUnitType("deg");
var percent2 = createUnitType("%");
var px2 = createUnitType("px");
var vh2 = createUnitType("vh");
var vw2 = createUnitType("vw");
var progressPercentage = Object.assign(Object.assign({}, percent2), { parse: (v) => percent2.parse(v) / 100, transform: (v) => percent2.transform(v * 100) });

// node_modules/style-value-types/dist/es/color/utils.mjs
var isColorString = (type, testProp) => (v) => {
  return Boolean(isString(v) && singleColorRegex.test(v) && v.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v, testProp));
};
var splitColor = (aName, bName, cName) => (v) => {
  if (!isString(v))
    return v;
  const [a3, b3, c2, alpha2] = v.match(floatRegex);
  return {
    [aName]: parseFloat(a3),
    [bName]: parseFloat(b3),
    [cName]: parseFloat(c2),
    alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
  };
};

// node_modules/style-value-types/dist/es/color/hsla.mjs
var hsla2 = {
  test: isColorString("hsl", "hue"),
  parse: splitColor("hue", "saturation", "lightness"),
  transform: ({ hue, saturation, lightness: lightness2, alpha: alpha$1 = 1 }) => {
    return "hsla(" + Math.round(hue) + ", " + percent2.transform(sanitize(saturation)) + ", " + percent2.transform(sanitize(lightness2)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
  }
};

// node_modules/style-value-types/dist/es/color/rgba.mjs
var clampRgbUnit = clamp4(0, 255);
var rgbUnit = Object.assign(Object.assign({}, number), { transform: (v) => Math.round(clampRgbUnit(v)) });
var rgba2 = {
  test: isColorString("rgb", "red"),
  parse: splitColor("red", "green", "blue"),
  transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
};

// node_modules/style-value-types/dist/es/color/hex.mjs
function parseHex(v) {
  let r = "";
  let g2 = "";
  let b3 = "";
  let a3 = "";
  if (v.length > 5) {
    r = v.substr(1, 2);
    g2 = v.substr(3, 2);
    b3 = v.substr(5, 2);
    a3 = v.substr(7, 2);
  } else {
    r = v.substr(1, 1);
    g2 = v.substr(2, 1);
    b3 = v.substr(3, 1);
    a3 = v.substr(4, 1);
    r += r;
    g2 += g2;
    b3 += b3;
    a3 += a3;
  }
  return {
    red: parseInt(r, 16),
    green: parseInt(g2, 16),
    blue: parseInt(b3, 16),
    alpha: a3 ? parseInt(a3, 16) / 255 : 1
  };
}
var hex = {
  test: isColorString("#"),
  parse: parseHex,
  transform: rgba2.transform
};

// node_modules/style-value-types/dist/es/color/index.mjs
var color2 = {
  test: (v) => rgba2.test(v) || hex.test(v) || hsla2.test(v),
  parse: (v) => {
    if (rgba2.test(v)) {
      return rgba2.parse(v);
    } else if (hsla2.test(v)) {
      return hsla2.parse(v);
    } else {
      return hex.parse(v);
    }
  },
  transform: (v) => {
    return isString(v) ? v : v.hasOwnProperty("red") ? rgba2.transform(v) : hsla2.transform(v);
  }
};

// node_modules/style-value-types/dist/es/complex/index.mjs
var colorToken = "${c}";
var numberToken = "${n}";
function test2(v) {
  var _a, _b, _c, _d;
  return isNaN(v) && isString(v) && ((_b = (_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
}
function analyse(v) {
  if (typeof v === "number")
    v = `${v}`;
  const values2 = [];
  let numColors = 0;
  const colors = v.match(colorRegex);
  if (colors) {
    numColors = colors.length;
    v = v.replace(colorRegex, colorToken);
    values2.push(...colors.map(color2.parse));
  }
  const numbers = v.match(floatRegex);
  if (numbers) {
    v = v.replace(floatRegex, numberToken);
    values2.push(...numbers.map(number.parse));
  }
  return { values: values2, numColors, tokenised: v };
}
function parse8(v) {
  return analyse(v).values;
}
function createTransformer(v) {
  const { values: values2, numColors, tokenised } = analyse(v);
  const numValues = values2.length;
  return (v2) => {
    let output2 = tokenised;
    for (let i3 = 0; i3 < numValues; i3++) {
      output2 = output2.replace(i3 < numColors ? colorToken : numberToken, i3 < numColors ? color2.transform(v2[i3]) : sanitize(v2[i3]));
    }
    return output2;
  };
}
var convertNumbersToZero = (v) => typeof v === "number" ? 0 : v;
function getAnimatableNone(v) {
  const parsed = parse8(v);
  const transformer = createTransformer(v);
  return transformer(parsed.map(convertNumbersToZero));
}
var complex = { test: test2, parse: parse8, createTransformer, getAnimatableNone };

// node_modules/style-value-types/dist/es/complex/filter.mjs
var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function applyDefaultFilter(v) {
  let [name15, value12] = v.slice(0, -1).split("(");
  if (name15 === "drop-shadow")
    return v;
  const [number2] = value12.match(floatRegex) || [];
  if (!number2)
    return v;
  const unit2 = value12.replace(number2, "");
  let defaultValue4 = maxDefaults.has(name15) ? 1 : 0;
  if (number2 !== value12)
    defaultValue4 *= 100;
  return name15 + "(" + defaultValue4 + unit2 + ")";
}
var functionRegex = /([a-z-]*)\(.*?\)/g;
var filter4 = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v) => {
  const functions = v.match(functionRegex);
  return functions ? functions.map(applyDefaultFilter).join(" ") : v;
} });

// node_modules/popmotion/dist/es/utils/mix-color.mjs
var import_hey_listen3 = __toESM(require_dist(), 1);

// node_modules/popmotion/dist/es/utils/hsla-to-rgba.mjs
function hueToRgb(p2, q2, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p2 + (q2 - p2) * 6 * t;
  if (t < 1 / 2)
    return q2;
  if (t < 2 / 3)
    return p2 + (q2 - p2) * (2 / 3 - t) * 6;
  return p2;
}
function hslaToRgba({ hue, saturation, lightness: lightness2, alpha: alpha2 }) {
  hue /= 360;
  saturation /= 100;
  lightness2 /= 100;
  let red = 0;
  let green = 0;
  let blue = 0;
  if (!saturation) {
    red = green = blue = lightness2;
  } else {
    const q2 = lightness2 < 0.5 ? lightness2 * (1 + saturation) : lightness2 + saturation - lightness2 * saturation;
    const p2 = 2 * lightness2 - q2;
    red = hueToRgb(p2, q2, hue + 1 / 3);
    green = hueToRgb(p2, q2, hue);
    blue = hueToRgb(p2, q2, hue - 1 / 3);
  }
  return {
    red: Math.round(red * 255),
    green: Math.round(green * 255),
    blue: Math.round(blue * 255),
    alpha: alpha2
  };
}

// node_modules/popmotion/dist/es/utils/mix-color.mjs
var mixLinearColor = (from3, to2, v) => {
  const fromExpo = from3 * from3;
  const toExpo = to2 * to2;
  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));
};
var colorTypes = [hex, rgba2, hsla2];
var getColorType = (v) => colorTypes.find((type) => type.test(v));
var notAnimatable = (color3) => `'${color3}' is not an animatable color. Use the equivalent color code instead.`;
var mixColor = (from3, to2) => {
  let fromColorType = getColorType(from3);
  let toColorType = getColorType(to2);
  (0, import_hey_listen3.invariant)(!!fromColorType, notAnimatable(from3));
  (0, import_hey_listen3.invariant)(!!toColorType, notAnimatable(to2));
  let fromColor = fromColorType.parse(from3);
  let toColor = toColorType.parse(to2);
  if (fromColorType === hsla2) {
    fromColor = hslaToRgba(fromColor);
    fromColorType = rgba2;
  }
  if (toColorType === hsla2) {
    toColor = hslaToRgba(toColor);
    toColorType = rgba2;
  }
  const blended = Object.assign({}, fromColor);
  return (v) => {
    for (const key in blended) {
      if (key !== "alpha") {
        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);
      }
    }
    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);
    return fromColorType.transform(blended);
  };
};

// node_modules/popmotion/dist/es/utils/inc.mjs
var isNum = (v) => typeof v === "number";

// node_modules/popmotion/dist/es/utils/pipe.mjs
var combineFunctions = (a3, b3) => (v) => b3(a3(v));
var pipe3 = (...transformers) => transformers.reduce(combineFunctions);

// node_modules/popmotion/dist/es/utils/mix-complex.mjs
var import_hey_listen4 = __toESM(require_dist(), 1);
function getMixer(origin3, target5) {
  if (isNum(origin3)) {
    return (v) => mix(origin3, target5, v);
  } else if (color2.test(origin3)) {
    return mixColor(origin3, target5);
  } else {
    return mixComplex(origin3, target5);
  }
}
var mixArray = (from3, to2) => {
  const output2 = [...from3];
  const numValues = output2.length;
  const blendValue = from3.map((fromThis, i3) => getMixer(fromThis, to2[i3]));
  return (v) => {
    for (let i3 = 0; i3 < numValues; i3++) {
      output2[i3] = blendValue[i3](v);
    }
    return output2;
  };
};
var mixObject = (origin3, target5) => {
  const output2 = Object.assign(Object.assign({}, origin3), target5);
  const blendValue = {};
  for (const key in output2) {
    if (origin3[key] !== void 0 && target5[key] !== void 0) {
      blendValue[key] = getMixer(origin3[key], target5[key]);
    }
  }
  return (v) => {
    for (const key in blendValue) {
      output2[key] = blendValue[key](v);
    }
    return output2;
  };
};
function analyse2(value12) {
  const parsed = complex.parse(value12);
  const numValues = parsed.length;
  let numNumbers = 0;
  let numRGB = 0;
  let numHSL = 0;
  for (let i3 = 0; i3 < numValues; i3++) {
    if (numNumbers || typeof parsed[i3] === "number") {
      numNumbers++;
    } else {
      if (parsed[i3].hue !== void 0) {
        numHSL++;
      } else {
        numRGB++;
      }
    }
  }
  return { parsed, numNumbers, numRGB, numHSL };
}
var mixComplex = (origin3, target5) => {
  const template2 = complex.createTransformer(target5);
  const originStats = analyse2(origin3);
  const targetStats = analyse2(target5);
  const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;
  if (canInterpolate) {
    return pipe3(mixArray(originStats.parsed, targetStats.parsed), template2);
  } else {
    (0, import_hey_listen4.warning)(true, `Complex values '${origin3}' and '${target5}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
    return (p2) => `${p2 > 0 ? target5 : origin3}`;
  }
};

// node_modules/popmotion/dist/es/utils/interpolate.mjs
var import_hey_listen5 = __toESM(require_dist(), 1);
var mixNumber = (from3, to2) => (p2) => mix(from3, to2, p2);
function detectMixerFactory(v) {
  if (typeof v === "number") {
    return mixNumber;
  } else if (typeof v === "string") {
    if (color2.test(v)) {
      return mixColor;
    } else {
      return mixComplex;
    }
  } else if (Array.isArray(v)) {
    return mixArray;
  } else if (typeof v === "object") {
    return mixObject;
  }
}
function createMixers(output2, ease, customMixer) {
  const mixers = [];
  const mixerFactory = customMixer || detectMixerFactory(output2[0]);
  const numMixers = output2.length - 1;
  for (let i3 = 0; i3 < numMixers; i3++) {
    let mixer = mixerFactory(output2[i3], output2[i3 + 1]);
    if (ease) {
      const easingFunction = Array.isArray(ease) ? ease[i3] : ease;
      mixer = pipe3(easingFunction, mixer);
    }
    mixers.push(mixer);
  }
  return mixers;
}
function fastInterpolate([from3, to2], [mixer]) {
  return (v) => mixer(progress2(from3, to2, v));
}
function slowInterpolate(input4, mixers) {
  const inputLength = input4.length;
  const lastInputIndex = inputLength - 1;
  return (v) => {
    let mixerIndex = 0;
    let foundMixerIndex = false;
    if (v <= input4[0]) {
      foundMixerIndex = true;
    } else if (v >= input4[lastInputIndex]) {
      mixerIndex = lastInputIndex - 1;
      foundMixerIndex = true;
    }
    if (!foundMixerIndex) {
      let i3 = 1;
      for (; i3 < inputLength; i3++) {
        if (input4[i3] > v || i3 === lastInputIndex) {
          break;
        }
      }
      mixerIndex = i3 - 1;
    }
    const progressInRange = progress2(input4[mixerIndex], input4[mixerIndex + 1], v);
    return mixers[mixerIndex](progressInRange);
  };
}
function interpolate(input4, output2, { clamp: isClamp = true, ease, mixer } = {}) {
  const inputLength = input4.length;
  (0, import_hey_listen5.invariant)(inputLength === output2.length, "Both input and output ranges must be the same length");
  (0, import_hey_listen5.invariant)(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
  if (input4[0] > input4[inputLength - 1]) {
    input4 = [].concat(input4);
    output2 = [].concat(output2);
    input4.reverse();
    output2.reverse();
  }
  const mixers = createMixers(output2, ease, mixer);
  const interpolator = inputLength === 2 ? fastInterpolate(input4, mixers) : slowInterpolate(input4, mixers);
  return isClamp ? (v) => interpolator(clamp3(input4[0], input4[inputLength - 1], v)) : interpolator;
}

// node_modules/popmotion/dist/es/easing/utils.mjs
var reverseEasing = (easing) => (p2) => 1 - easing(1 - p2);
var mirrorEasing = (easing) => (p2) => p2 <= 0.5 ? easing(2 * p2) / 2 : (2 - easing(2 * (1 - p2))) / 2;
var createExpoIn = (power) => (p2) => Math.pow(p2, power);
var createBackIn = (power) => (p2) => p2 * p2 * ((power + 1) * p2 - power);
var createAnticipate = (power) => {
  const backEasing = createBackIn(power);
  return (p2) => (p2 *= 2) < 1 ? 0.5 * backEasing(p2) : 0.5 * (2 - Math.pow(2, -10 * (p2 - 1)));
};

// node_modules/popmotion/dist/es/easing/index.mjs
var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
var BOUNCE_FIRST_THRESHOLD = 4 / 11;
var BOUNCE_SECOND_THRESHOLD = 8 / 11;
var BOUNCE_THIRD_THRESHOLD = 9 / 10;
var linear = (p2) => p2;
var easeIn = createExpoIn(2);
var easeOut = reverseEasing(easeIn);
var easeInOut = mirrorEasing(easeIn);
var circIn = (p2) => 1 - Math.sin(Math.acos(p2));
var circOut = reverseEasing(circIn);
var circInOut = mirrorEasing(circOut);
var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
var backOut = reverseEasing(backIn);
var backInOut = mirrorEasing(backIn);
var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
var ca = 4356 / 361;
var cb = 35442 / 1805;
var cc = 16061 / 1805;
var bounceOut = (p2) => {
  if (p2 === 1 || p2 === 0)
    return p2;
  const p22 = p2 * p2;
  return p2 < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p22 : p2 < BOUNCE_SECOND_THRESHOLD ? 9.075 * p22 - 9.9 * p2 + 3.4 : p2 < BOUNCE_THIRD_THRESHOLD ? ca * p22 - cb * p2 + cc : 10.8 * p2 * p2 - 20.52 * p2 + 10.72;
};
var bounceIn = reverseEasing(bounceOut);
var bounceInOut = (p2) => p2 < 0.5 ? 0.5 * (1 - bounceOut(1 - p2 * 2)) : 0.5 * bounceOut(p2 * 2 - 1) + 0.5;

// node_modules/popmotion/dist/es/animations/generators/keyframes.mjs
function defaultEasing(values2, easing) {
  return values2.map(() => easing || easeInOut).splice(0, values2.length - 1);
}
function defaultOffset(values2) {
  const numValues = values2.length;
  return values2.map((_value, i3) => i3 !== 0 ? i3 / (numValues - 1) : 0);
}
function convertOffsetToTimes(offset, duration2) {
  return offset.map((o) => o * duration2);
}
function keyframes3({ from: from3 = 0, to: to2 = 1, ease, offset, duration: duration2 = 300 }) {
  const state3 = { done: false, value: from3 };
  const values2 = Array.isArray(to2) ? to2 : [from3, to2];
  const times = convertOffsetToTimes(offset && offset.length === values2.length ? offset : defaultOffset(values2), duration2);
  function createInterpolator() {
    return interpolate(times, values2, {
      ease: Array.isArray(ease) ? ease : defaultEasing(values2, ease)
    });
  }
  let interpolator = createInterpolator();
  return {
    next: (t) => {
      state3.value = interpolator(t);
      state3.done = t >= duration2;
      return state3;
    },
    flipTarget: () => {
      values2.reverse();
      interpolator = createInterpolator();
    }
  };
}

// node_modules/popmotion/dist/es/animations/generators/decay.mjs
function decay({ velocity = 0, from: from3 = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget }) {
  const state3 = { done: false, value: from3 };
  let amplitude = power * velocity;
  const ideal = from3 + amplitude;
  const target5 = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
  if (target5 !== ideal)
    amplitude = target5 - from3;
  return {
    next: (t) => {
      const delta = -amplitude * Math.exp(-t / timeConstant);
      state3.done = !(delta > restDelta || delta < -restDelta);
      state3.value = state3.done ? target5 : target5 + delta;
      return state3;
    },
    flipTarget: () => {
    }
  };
}

// node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.mjs
var types = { keyframes: keyframes3, spring, decay };
function detectAnimationFromOptions(config) {
  if (Array.isArray(config.to)) {
    return keyframes3;
  } else if (types[config.type]) {
    return types[config.type];
  }
  const keys4 = new Set(Object.keys(config));
  if (keys4.has("ease") || keys4.has("duration") && !keys4.has("dampingRatio")) {
    return keyframes3;
  } else if (keys4.has("dampingRatio") || keys4.has("stiffness") || keys4.has("mass") || keys4.has("damping") || keys4.has("restSpeed") || keys4.has("restDelta")) {
    return spring;
  }
  return keyframes3;
}

// node_modules/popmotion/dist/es/animations/utils/elapsed.mjs
function loopElapsed(elapsed, duration2, delay2 = 0) {
  return elapsed - duration2 - delay2;
}
function reverseElapsed(elapsed, duration2, delay2 = 0, isForwardPlayback = true) {
  return isForwardPlayback ? loopElapsed(duration2 + -elapsed, duration2, delay2) : duration2 - (elapsed - duration2) + delay2;
}
function hasRepeatDelayElapsed(elapsed, duration2, delay2, isForwardPlayback) {
  return isForwardPlayback ? elapsed >= duration2 + delay2 : elapsed <= -delay2;
}

// node_modules/popmotion/dist/es/animations/index.mjs
var framesync = (update) => {
  const passTimestamp = ({ delta }) => update(delta);
  return {
    start: () => es_default.update(passTimestamp, true),
    stop: () => cancelSync.update(passTimestamp)
  };
};
function animate(_a) {
  var _b, _c;
  var { from: from3, autoplay: autoplay2 = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a, options2 = __rest(_a, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
  let { to: to2 } = options2;
  let driverControls;
  let repeatCount = 0;
  let computedDuration = options2.duration;
  let latest;
  let isComplete = false;
  let isForwardPlayback = true;
  let interpolateFromNumber;
  const animator = detectAnimationFromOptions(options2);
  if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from3, to2)) {
    interpolateFromNumber = interpolate([0, 100], [from3, to2], {
      clamp: false
    });
    from3 = 0;
    to2 = 100;
  }
  const animation = animator(Object.assign(Object.assign({}, options2), { from: from3, to: to2 }));
  function repeat() {
    repeatCount++;
    if (repeatType === "reverse") {
      isForwardPlayback = repeatCount % 2 === 0;
      elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
    } else {
      elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
      if (repeatType === "mirror")
        animation.flipTarget();
    }
    isComplete = false;
    onRepeat && onRepeat();
  }
  function complete2() {
    driverControls.stop();
    onComplete && onComplete();
  }
  function update(delta) {
    if (!isForwardPlayback)
      delta = -delta;
    elapsed += delta;
    if (!isComplete) {
      const state3 = animation.next(Math.max(0, elapsed));
      latest = state3.value;
      if (interpolateFromNumber)
        latest = interpolateFromNumber(latest);
      isComplete = isForwardPlayback ? state3.done : elapsed <= 0;
    }
    onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
    if (isComplete) {
      if (repeatCount === 0)
        computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
      if (repeatCount < repeatMax) {
        hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
      } else {
        complete2();
      }
    }
  }
  function play2() {
    onPlay === null || onPlay === void 0 ? void 0 : onPlay();
    driverControls = driver(update);
    driverControls.start();
  }
  autoplay2 && play2();
  return {
    stop: () => {
      onStop === null || onStop === void 0 ? void 0 : onStop();
      driverControls.stop();
    }
  };
}

// node_modules/popmotion/dist/es/utils/velocity-per-second.mjs
function velocityPerSecond(velocity, frameDuration) {
  return frameDuration ? velocity * (1e3 / frameDuration) : 0;
}

// node_modules/popmotion/dist/es/animations/inertia.mjs
function inertia({ from: from3 = 0, velocity = 0, min: min6, max: max7, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop }) {
  let currentAnimation;
  function isOutOfBounds(v) {
    return min6 !== void 0 && v < min6 || max7 !== void 0 && v > max7;
  }
  function boundaryNearest(v) {
    if (min6 === void 0)
      return max7;
    if (max7 === void 0)
      return min6;
    return Math.abs(min6 - v) < Math.abs(max7 - v) ? min6 : max7;
  }
  function startAnimation2(options2) {
    currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
    currentAnimation = animate(Object.assign(Object.assign({}, options2), {
      driver,
      onUpdate: (v) => {
        var _a;
        onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v);
        (_a = options2.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options2, v);
      },
      onComplete,
      onStop
    }));
  }
  function startSpring(options2) {
    startAnimation2(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options2));
  }
  if (isOutOfBounds(from3)) {
    startSpring({ from: from3, velocity, to: boundaryNearest(from3) });
  } else {
    let target5 = power * velocity + from3;
    if (typeof modifyTarget !== "undefined")
      target5 = modifyTarget(target5);
    const boundary = boundaryNearest(target5);
    const heading = boundary === min6 ? -1 : 1;
    let prev;
    let current;
    const checkBoundary = (v) => {
      prev = current;
      current = v;
      velocity = velocityPerSecond(v - prev, getFrameData().delta);
      if (heading === 1 && v > boundary || heading === -1 && v < boundary) {
        startSpring({ from: v, to: boundary, velocity });
      }
    };
    startAnimation2({
      type: "decay",
      from: from3,
      velocity,
      timeConstant,
      power,
      restDelta,
      modifyTarget,
      onUpdate: isOutOfBounds(target5) ? checkBoundary : void 0
    });
  }
  return {
    stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()
  };
}

// node_modules/popmotion/dist/es/utils/is-point.mjs
var isPoint = (point) => point.hasOwnProperty("x") && point.hasOwnProperty("y");

// node_modules/popmotion/dist/es/utils/is-point-3d.mjs
var isPoint3D = (point) => isPoint(point) && point.hasOwnProperty("z");

// node_modules/popmotion/dist/es/utils/distance.mjs
var distance1D = (a3, b3) => Math.abs(a3 - b3);
function distance(a3, b3) {
  if (isNum(a3) && isNum(b3)) {
    return distance1D(a3, b3);
  } else if (isPoint(a3) && isPoint(b3)) {
    const xDelta = distance1D(a3.x, b3.x);
    const yDelta = distance1D(a3.y, b3.y);
    const zDelta = isPoint3D(a3) && isPoint3D(b3) ? distance1D(a3.z, b3.z) : 0;
    return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
  }
}

// node_modules/popmotion/dist/es/easing/cubic-bezier.mjs
var a2 = (a1, a22) => 1 - 3 * a22 + 3 * a1;
var b2 = (a1, a22) => 3 * a22 - 6 * a1;
var c = (a1) => 3 * a1;
var calcBezier = (t, a1, a22) => ((a2(a1, a22) * t + b2(a1, a22)) * t + c(a1)) * t;
var getSlope = (t, a1, a22) => 3 * a2(a1, a22) * t * t + 2 * b2(a1, a22) * t + c(a1);
var subdivisionPrecision = 1e-7;
var subdivisionMaxIterations = 10;
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  let currentX;
  let currentT;
  let i3 = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > subdivisionPrecision && ++i3 < subdivisionMaxIterations);
  return currentT;
}
var newtonIterations = 8;
var newtonMinSlope = 1e-3;
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (let i3 = 0; i3 < newtonIterations; ++i3) {
    const currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
var kSplineTableSize = 11;
var kSampleStepSize = 1 / (kSplineTableSize - 1);
function cubicBezier(mX1, mY1, mX2, mY2) {
  if (mX1 === mY1 && mX2 === mY2)
    return linear;
  const sampleValues = new Float32Array(kSplineTableSize);
  for (let i3 = 0; i3 < kSplineTableSize; ++i3) {
    sampleValues[i3] = calcBezier(i3 * kSampleStepSize, mX1, mX2);
  }
  function getTForX(aX) {
    let intervalStart = 0;
    let currentSample = 1;
    const lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    const guessForT = intervalStart + dist * kSampleStepSize;
    const initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= newtonMinSlope) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }
  return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
}

// node_modules/framer-motion/dist/es/utils/array.mjs
function addUniqueItem(arr, item) {
  arr.indexOf(item) === -1 && arr.push(item);
}
function removeItem(arr, item) {
  var index6 = arr.indexOf(item);
  index6 > -1 && arr.splice(index6, 1);
}

// node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
var SubscriptionManager = function() {
  function SubscriptionManager2() {
    this.subscriptions = [];
  }
  SubscriptionManager2.prototype.add = function(handler2) {
    var _this = this;
    addUniqueItem(this.subscriptions, handler2);
    return function() {
      return removeItem(_this.subscriptions, handler2);
    };
  };
  SubscriptionManager2.prototype.notify = function(a3, b3, c2) {
    var numSubscriptions = this.subscriptions.length;
    if (!numSubscriptions)
      return;
    if (numSubscriptions === 1) {
      this.subscriptions[0](a3, b3, c2);
    } else {
      for (var i3 = 0; i3 < numSubscriptions; i3++) {
        var handler2 = this.subscriptions[i3];
        handler2 && handler2(a3, b3, c2);
      }
    }
  };
  SubscriptionManager2.prototype.getSize = function() {
    return this.subscriptions.length;
  };
  SubscriptionManager2.prototype.clear = function() {
    this.subscriptions.length = 0;
  };
  return SubscriptionManager2;
}();

// node_modules/framer-motion/dist/es/value/index.mjs
var isFloat = function(value12) {
  return !isNaN(parseFloat(value12));
};
var MotionValue = function() {
  function MotionValue2(init3) {
    var _this = this;
    this.version = "6.3.10";
    this.timeDelta = 0;
    this.lastUpdated = 0;
    this.updateSubscribers = new SubscriptionManager();
    this.velocityUpdateSubscribers = new SubscriptionManager();
    this.renderSubscribers = new SubscriptionManager();
    this.canTrackVelocity = false;
    this.updateAndNotify = function(v, render) {
      if (render === void 0) {
        render = true;
      }
      _this.prev = _this.current;
      _this.current = v;
      var _a = getFrameData(), delta = _a.delta, timestamp = _a.timestamp;
      if (_this.lastUpdated !== timestamp) {
        _this.timeDelta = delta;
        _this.lastUpdated = timestamp;
        es_default.postRender(_this.scheduleVelocityCheck);
      }
      if (_this.prev !== _this.current) {
        _this.updateSubscribers.notify(_this.current);
      }
      if (_this.velocityUpdateSubscribers.getSize()) {
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
      if (render) {
        _this.renderSubscribers.notify(_this.current);
      }
    };
    this.scheduleVelocityCheck = function() {
      return es_default.postRender(_this.velocityCheck);
    };
    this.velocityCheck = function(_a) {
      var timestamp = _a.timestamp;
      if (timestamp !== _this.lastUpdated) {
        _this.prev = _this.current;
        _this.velocityUpdateSubscribers.notify(_this.getVelocity());
      }
    };
    this.hasAnimated = false;
    this.prev = this.current = init3;
    this.canTrackVelocity = isFloat(this.current);
  }
  MotionValue2.prototype.onChange = function(subscription) {
    return this.updateSubscribers.add(subscription);
  };
  MotionValue2.prototype.clearListeners = function() {
    this.updateSubscribers.clear();
  };
  MotionValue2.prototype.onRenderRequest = function(subscription) {
    subscription(this.get());
    return this.renderSubscribers.add(subscription);
  };
  MotionValue2.prototype.attach = function(passiveEffect) {
    this.passiveEffect = passiveEffect;
  };
  MotionValue2.prototype.set = function(v, render) {
    if (render === void 0) {
      render = true;
    }
    if (!render || !this.passiveEffect) {
      this.updateAndNotify(v, render);
    } else {
      this.passiveEffect(v, this.updateAndNotify);
    }
  };
  MotionValue2.prototype.get = function() {
    return this.current;
  };
  MotionValue2.prototype.getPrevious = function() {
    return this.prev;
  };
  MotionValue2.prototype.getVelocity = function() {
    return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  };
  MotionValue2.prototype.start = function(animation) {
    var _this = this;
    this.stop();
    return new Promise(function(resolve2) {
      _this.hasAnimated = true;
      _this.stopAnimation = animation(resolve2);
    }).then(function() {
      return _this.clearAnimation();
    });
  };
  MotionValue2.prototype.stop = function() {
    if (this.stopAnimation)
      this.stopAnimation();
    this.clearAnimation();
  };
  MotionValue2.prototype.isAnimating = function() {
    return !!this.stopAnimation;
  };
  MotionValue2.prototype.clearAnimation = function() {
    this.stopAnimation = null;
  };
  MotionValue2.prototype.destroy = function() {
    this.updateSubscribers.clear();
    this.renderSubscribers.clear();
    this.stop();
  };
  return MotionValue2;
}();
function motionValue(init3) {
  return new MotionValue(init3);
}

// node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
var isMotionValue = function(value12) {
  return Boolean(value12 !== null && typeof value12 === "object" && value12.getVelocity);
};

// node_modules/framer-motion/dist/es/utils/time-conversion.mjs
var secondsToMilliseconds = function(seconds) {
  return seconds * 1e3;
};

// node_modules/framer-motion/dist/es/animation/utils/easing.mjs
var import_hey_listen6 = __toESM(require_dist(), 1);
var easingLookup = {
  linear,
  easeIn,
  easeInOut,
  easeOut,
  circIn,
  circInOut,
  circOut,
  backIn,
  backInOut,
  backOut,
  anticipate,
  bounceIn,
  bounceInOut,
  bounceOut
};
var easingDefinitionToFunction = function(definition) {
  if (Array.isArray(definition)) {
    (0, import_hey_listen6.invariant)(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
    var _a = __read(definition, 4), x1 = _a[0], y1 = _a[1], x2 = _a[2], y2 = _a[3];
    return cubicBezier(x1, y1, x2, y2);
  } else if (typeof definition === "string") {
    (0, import_hey_listen6.invariant)(easingLookup[definition] !== void 0, "Invalid easing type '".concat(definition, "'"));
    return easingLookup[definition];
  }
  return definition;
};
var isEasingArray = function(ease) {
  return Array.isArray(ease) && typeof ease[0] !== "number";
};

// node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
var isAnimatable = function(key, value12) {
  if (key === "zIndex")
    return false;
  if (typeof value12 === "number" || Array.isArray(value12))
    return true;
  if (typeof value12 === "string" && complex.test(value12) && !value12.startsWith("url(")) {
    return true;
  }
  return false;
};

// node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
var isKeyframesTarget = function(v) {
  return Array.isArray(v);
};

// node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
var underDampedSpring = function() {
  return {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
  };
};
var criticallyDampedSpring = function(to2) {
  return {
    type: "spring",
    stiffness: 550,
    damping: to2 === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
  };
};
var linearTween = function() {
  return {
    type: "keyframes",
    ease: "linear",
    duration: 0.3
  };
};
var keyframes4 = function(values2) {
  return {
    type: "keyframes",
    duration: 0.8,
    values: values2
  };
};
var defaultTransitions = {
  x: underDampedSpring,
  y: underDampedSpring,
  z: underDampedSpring,
  rotate: underDampedSpring,
  rotateX: underDampedSpring,
  rotateY: underDampedSpring,
  rotateZ: underDampedSpring,
  scaleX: criticallyDampedSpring,
  scaleY: criticallyDampedSpring,
  scale: criticallyDampedSpring,
  opacity: linearTween,
  backgroundColor: linearTween,
  color: linearTween,
  default: criticallyDampedSpring
};
var getDefaultTransition = function(valueKey, to2) {
  var transitionFactory;
  if (isKeyframesTarget(to2)) {
    transitionFactory = keyframes4;
  } else {
    transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
  }
  return __assign({ to: to2 }, transitionFactory(to2));
};

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
var import_hey_listen7 = __toESM(require_dist(), 1);

// node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
var int = __assign(__assign({}, number), { transform: Math.round });

// node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
var numberValueTypes = {
  borderWidth: px2,
  borderTopWidth: px2,
  borderRightWidth: px2,
  borderBottomWidth: px2,
  borderLeftWidth: px2,
  borderRadius: px2,
  radius: px2,
  borderTopLeftRadius: px2,
  borderTopRightRadius: px2,
  borderBottomRightRadius: px2,
  borderBottomLeftRadius: px2,
  width: px2,
  maxWidth: px2,
  height: px2,
  maxHeight: px2,
  size: px2,
  top: px2,
  right: px2,
  bottom: px2,
  left: px2,
  padding: px2,
  paddingTop: px2,
  paddingRight: px2,
  paddingBottom: px2,
  paddingLeft: px2,
  margin: px2,
  marginTop: px2,
  marginRight: px2,
  marginBottom: px2,
  marginLeft: px2,
  rotate: degrees,
  rotateX: degrees,
  rotateY: degrees,
  rotateZ: degrees,
  scale,
  scaleX: scale,
  scaleY: scale,
  scaleZ: scale,
  skew: degrees,
  skewX: degrees,
  skewY: degrees,
  distance: px2,
  translateX: px2,
  translateY: px2,
  translateZ: px2,
  x: px2,
  y: px2,
  z: px2,
  perspective: px2,
  transformPerspective: px2,
  opacity: alpha,
  originX: progressPercentage,
  originY: progressPercentage,
  originZ: px2,
  zIndex: int,
  fillOpacity: alpha,
  strokeOpacity: alpha,
  numOctaves: int
};

// node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
  color: color2,
  backgroundColor: color2,
  outlineColor: color2,
  fill: color2,
  stroke: color2,
  borderColor: color2,
  borderTopColor: color2,
  borderRightColor: color2,
  borderBottomColor: color2,
  borderLeftColor: color2,
  filter: filter4,
  WebkitFilter: filter4
});
var getDefaultValueType = function(key) {
  return defaultValueTypes[key];
};

// node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
function getAnimatableNone2(key, value12) {
  var _a;
  var defaultValueType = getDefaultValueType(key);
  if (defaultValueType !== filter4)
    defaultValueType = complex;
  return (_a = defaultValueType.getAnimatableNone) === null || _a === void 0 ? void 0 : _a.call(defaultValueType, value12);
}

// node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
var instantAnimationState = {
  current: false
};

// node_modules/framer-motion/dist/es/utils/resolve-value.mjs
var isCustomValue = function(v) {
  return Boolean(v && typeof v === "object" && v.mix && v.toValue);
};
var resolveFinalValueInKeyframes = function(v) {
  return isKeyframesTarget(v) ? v[v.length - 1] || 0 : v;
};

// node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
function isTransitionDefined(_a) {
  _a.when;
  _a.delay;
  _a.delayChildren;
  _a.staggerChildren;
  _a.staggerDirection;
  _a.repeat;
  _a.repeatType;
  _a.repeatDelay;
  _a.from;
  var transition3 = __rest(_a, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
  return !!Object.keys(transition3).length;
}
var legacyRepeatWarning = false;
function convertTransitionToAnimationOptions(_a) {
  var ease = _a.ease, times = _a.times, yoyo = _a.yoyo, flip2 = _a.flip, loop2 = _a.loop, transition3 = __rest(_a, ["ease", "times", "yoyo", "flip", "loop"]);
  var options2 = __assign({}, transition3);
  if (times)
    options2["offset"] = times;
  if (transition3.duration)
    options2["duration"] = secondsToMilliseconds(transition3.duration);
  if (transition3.repeatDelay)
    options2.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
  if (ease) {
    options2["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
  }
  if (transition3.type === "tween")
    options2.type = "keyframes";
  if (yoyo || loop2 || flip2) {
    (0, import_hey_listen7.warning)(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
    legacyRepeatWarning = true;
    if (yoyo) {
      options2.repeatType = "reverse";
    } else if (loop2) {
      options2.repeatType = "loop";
    } else if (flip2) {
      options2.repeatType = "mirror";
    }
    options2.repeat = loop2 || yoyo || flip2 || transition3.repeat;
  }
  if (transition3.type !== "spring")
    options2.type = "keyframes";
  return options2;
}
function getDelayFromTransition(transition3, key) {
  var _a, _b;
  var valueTransition = getValueTransition(transition3, key) || {};
  return (_b = (_a = valueTransition.delay) !== null && _a !== void 0 ? _a : transition3.delay) !== null && _b !== void 0 ? _b : 0;
}
function hydrateKeyframes(options2) {
  if (Array.isArray(options2.to) && options2.to[0] === null) {
    options2.to = __spreadArray([], __read(options2.to), false);
    options2.to[0] = options2.from;
  }
  return options2;
}
function getPopmotionAnimationOptions(transition3, options2, key) {
  var _a;
  if (Array.isArray(options2.to)) {
    (_a = transition3.duration) !== null && _a !== void 0 ? _a : transition3.duration = 0.8;
  }
  hydrateKeyframes(options2);
  if (!isTransitionDefined(transition3)) {
    transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options2.to));
  }
  return __assign(__assign({}, options2), convertTransitionToAnimationOptions(transition3));
}
function getAnimation(key, value12, target5, transition3, onComplete) {
  var _a;
  var valueTransition = getValueTransition(transition3, key);
  var origin3 = (_a = valueTransition.from) !== null && _a !== void 0 ? _a : value12.get();
  var isTargetAnimatable = isAnimatable(key, target5);
  if (origin3 === "none" && isTargetAnimatable && typeof target5 === "string") {
    origin3 = getAnimatableNone2(key, target5);
  } else if (isZero(origin3) && typeof target5 === "string") {
    origin3 = getZeroUnit(target5);
  } else if (!Array.isArray(target5) && isZero(target5) && typeof origin3 === "string") {
    target5 = getZeroUnit(origin3);
  }
  var isOriginAnimatable = isAnimatable(key, origin3);
  (0, import_hey_listen7.warning)(isOriginAnimatable === isTargetAnimatable, "You are trying to animate ".concat(key, ' from "').concat(origin3, '" to "').concat(target5, '". ').concat(origin3, " is not an animatable value - to enable this animation set ").concat(origin3, " to a value animatable to ").concat(target5, " via the `style` property."));
  function start2() {
    var options2 = {
      from: origin3,
      to: target5,
      velocity: value12.getVelocity(),
      onComplete,
      onUpdate: function(v) {
        return value12.set(v);
      }
    };
    return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options2), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options2, key)), { onUpdate: function(v) {
      var _a2;
      options2.onUpdate(v);
      (_a2 = valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, v);
    }, onComplete: function() {
      var _a2;
      options2.onComplete();
      (_a2 = valueTransition.onComplete) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition);
    } }));
  }
  function set3() {
    var _a2, _b;
    var finalTarget = resolveFinalValueInKeyframes(target5);
    value12.set(finalTarget);
    onComplete();
    (_a2 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(valueTransition, finalTarget);
    (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);
    return { stop: function() {
    } };
  }
  return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set3 : start2;
}
function isZero(value12) {
  return value12 === 0 || typeof value12 === "string" && parseFloat(value12) === 0 && value12.indexOf(" ") === -1;
}
function getZeroUnit(potentialUnitType) {
  return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
}
function getValueTransition(transition3, key) {
  return transition3[key] || transition3["default"] || transition3;
}
function startAnimation(key, value12, target5, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  if (instantAnimationState.current) {
    transition3 = { type: false };
  }
  return value12.start(function(onComplete) {
    var delayTimer;
    var controls2;
    var animation = getAnimation(key, value12, target5, transition3, onComplete);
    var delay2 = getDelayFromTransition(transition3, key);
    var start2 = function() {
      return controls2 = animation();
    };
    if (delay2) {
      delayTimer = window.setTimeout(start2, secondsToMilliseconds(delay2));
    } else {
      start2();
    }
    return function() {
      clearTimeout(delayTimer);
      controls2 === null || controls2 === void 0 ? void 0 : controls2.stop();
    };
  });
}

// node_modules/framer-motion/dist/es/animation/animate.mjs
function animate2(from3, to2, transition3) {
  if (transition3 === void 0) {
    transition3 = {};
  }
  var value12 = isMotionValue(from3) ? from3 : motionValue(from3);
  startAnimation("", value12, to2, transition3);
  return {
    stop: function() {
      return value12.stop();
    },
    isAnimating: function() {
      return value12.isAnimating();
    }
  };
}

// node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var numBorders = borders.length;
var asNumber = function(value12) {
  return typeof value12 === "string" ? parseFloat(value12) : value12;
};
var isPx = function(value12) {
  return typeof value12 === "number" || px2.test(value12);
};
function mixValues(target5, follow, lead, progress3, shouldCrossfadeOpacity, isOnlyMember) {
  var _a, _b, _c, _d;
  if (shouldCrossfadeOpacity) {
    target5.opacity = mix(0, (_a = lead.opacity) !== null && _a !== void 0 ? _a : 1, easeCrossfadeIn(progress3));
    target5.opacityExit = mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress3));
  } else if (isOnlyMember) {
    target5.opacity = mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress3);
  }
  for (var i3 = 0; i3 < numBorders; i3++) {
    var borderLabel = "border".concat(borders[i3], "Radius");
    var followRadius = getRadius(follow, borderLabel);
    var leadRadius = getRadius(lead, borderLabel);
    if (followRadius === void 0 && leadRadius === void 0)
      continue;
    followRadius || (followRadius = 0);
    leadRadius || (leadRadius = 0);
    var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
    if (canMix) {
      target5[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress3), 0);
      if (percent2.test(leadRadius) || percent2.test(followRadius)) {
        target5[borderLabel] += "%";
      }
    } else {
      target5[borderLabel] = leadRadius;
    }
  }
  if (follow.rotate || lead.rotate) {
    target5.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress3);
  }
}
function getRadius(values2, radiusName) {
  var _a;
  return (_a = values2[radiusName]) !== null && _a !== void 0 ? _a : values2.borderRadius;
}
var easeCrossfadeIn = compress(0, 0.5, circOut);
var easeCrossfadeOut = compress(0.5, 0.95, linear);
function compress(min6, max7, easing) {
  return function(p2) {
    if (p2 < min6)
      return 0;
    if (p2 > max7)
      return 1;
    return easing(progress2(min6, max7, p2));
  };
}

// node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
function copyAxisInto(axis, originAxis) {
  axis.min = originAxis.min;
  axis.max = originAxis.max;
}
function copyBoxInto(box3, originBox) {
  copyAxisInto(box3.x, originBox.x);
  copyAxisInto(box3.y, originBox.y);
}

// node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
function isIdentityScale(scale2) {
  return scale2 === void 0 || scale2 === 1;
}
function hasScale(_a) {
  var scale2 = _a.scale, scaleX = _a.scaleX, scaleY = _a.scaleY;
  return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
}
function hasTransform(values2) {
  return hasScale(values2) || hasTranslate(values2.x) || hasTranslate(values2.y) || values2.z || values2.rotate || values2.rotateX || values2.rotateY;
}
function hasTranslate(value12) {
  return value12 && value12 !== "0%";
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
function scalePoint(point, scale2, originPoint) {
  var distanceFromOrigin = point - originPoint;
  var scaled = scale2 * distanceFromOrigin;
  return originPoint + scaled;
}
function applyPointDelta(point, translate2, scale2, originPoint, boxScale) {
  if (boxScale !== void 0) {
    point = scalePoint(point, boxScale, originPoint);
  }
  return scalePoint(point, scale2, originPoint) + translate2;
}
function applyAxisDelta(axis, translate2, scale2, originPoint, boxScale) {
  if (translate2 === void 0) {
    translate2 = 0;
  }
  if (scale2 === void 0) {
    scale2 = 1;
  }
  axis.min = applyPointDelta(axis.min, translate2, scale2, originPoint, boxScale);
  axis.max = applyPointDelta(axis.max, translate2, scale2, originPoint, boxScale);
}
function applyBoxDelta(box3, _a) {
  var x = _a.x, y = _a.y;
  applyAxisDelta(box3.x, x.translate, x.scale, x.originPoint);
  applyAxisDelta(box3.y, y.translate, y.scale, y.originPoint);
}
function applyTreeDeltas(box3, treeScale, treePath, isSharedTransition) {
  var _a, _b;
  if (isSharedTransition === void 0) {
    isSharedTransition = false;
  }
  var treeLength = treePath.length;
  if (!treeLength)
    return;
  treeScale.x = treeScale.y = 1;
  var node;
  var delta;
  for (var i3 = 0; i3 < treeLength; i3++) {
    node = treePath[i3];
    delta = node.projectionDelta;
    if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === "contents")
      continue;
    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {
      transformBox(box3, { x: -node.scroll.x, y: -node.scroll.y });
    }
    if (delta) {
      treeScale.x *= delta.x.scale;
      treeScale.y *= delta.y.scale;
      applyBoxDelta(box3, delta);
    }
    if (isSharedTransition && hasTransform(node.latestValues)) {
      transformBox(box3, node.latestValues);
    }
  }
}
function translateAxis(axis, distance2) {
  axis.min = axis.min + distance2;
  axis.max = axis.max + distance2;
}
function transformAxis(axis, transforms, _a) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
  var originPoint = mix(axis.min, axis.max, axisOrigin);
  applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
}
var xKeys = ["x", "scaleX", "originX"];
var yKeys = ["y", "scaleY", "originY"];
function transformBox(box3, transform2) {
  transformAxis(box3.x, transform2, xKeys);
  transformAxis(box3.y, transform2, yKeys);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
function calcLength(axis) {
  return axis.max - axis.min;
}
function isNear(value12, target5, maxDistance) {
  if (target5 === void 0) {
    target5 = 0;
  }
  if (maxDistance === void 0) {
    maxDistance = 0.01;
  }
  return distance(value12, target5) < maxDistance;
}
function calcAxisDelta(delta, source3, target5, origin3) {
  if (origin3 === void 0) {
    origin3 = 0.5;
  }
  delta.origin = origin3;
  delta.originPoint = mix(source3.min, source3.max, delta.origin);
  delta.scale = calcLength(target5) / calcLength(source3);
  if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
    delta.scale = 1;
  delta.translate = mix(target5.min, target5.max, delta.origin) - delta.originPoint;
  if (isNear(delta.translate) || isNaN(delta.translate))
    delta.translate = 0;
}
function calcBoxDelta(delta, source3, target5, origin3) {
  calcAxisDelta(delta.x, source3.x, target5.x, origin3 === null || origin3 === void 0 ? void 0 : origin3.originX);
  calcAxisDelta(delta.y, source3.y, target5.y, origin3 === null || origin3 === void 0 ? void 0 : origin3.originY);
}
function calcRelativeAxis(target5, relative3, parent2) {
  target5.min = parent2.min + relative3.min;
  target5.max = target5.min + calcLength(relative3);
}
function calcRelativeBox(target5, relative3, parent2) {
  calcRelativeAxis(target5.x, relative3.x, parent2.x);
  calcRelativeAxis(target5.y, relative3.y, parent2.y);
}
function calcRelativeAxisPosition(target5, layout2, parent2) {
  target5.min = layout2.min - parent2.min;
  target5.max = target5.min + calcLength(layout2);
}
function calcRelativePosition(target5, layout2, parent2) {
  calcRelativeAxisPosition(target5.x, layout2.x, parent2.x);
  calcRelativeAxisPosition(target5.y, layout2.y, parent2.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
function removePointDelta(point, translate2, scale2, originPoint, boxScale) {
  point -= translate2;
  point = scalePoint(point, 1 / scale2, originPoint);
  if (boxScale !== void 0) {
    point = scalePoint(point, 1 / boxScale, originPoint);
  }
  return point;
}
function removeAxisDelta(axis, translate2, scale2, origin3, boxScale, originAxis, sourceAxis) {
  if (translate2 === void 0) {
    translate2 = 0;
  }
  if (scale2 === void 0) {
    scale2 = 1;
  }
  if (origin3 === void 0) {
    origin3 = 0.5;
  }
  if (originAxis === void 0) {
    originAxis = axis;
  }
  if (sourceAxis === void 0) {
    sourceAxis = axis;
  }
  if (percent2.test(translate2)) {
    translate2 = parseFloat(translate2);
    var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate2 / 100);
    translate2 = relativeProgress - sourceAxis.min;
  }
  if (typeof translate2 !== "number")
    return;
  var originPoint = mix(originAxis.min, originAxis.max, origin3);
  if (axis === originAxis)
    originPoint -= translate2;
  axis.min = removePointDelta(axis.min, translate2, scale2, originPoint, boxScale);
  axis.max = removePointDelta(axis.max, translate2, scale2, originPoint, boxScale);
}
function removeAxisTransforms(axis, transforms, _a, origin3, sourceAxis) {
  var _b = __read(_a, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin3, sourceAxis);
}
var xKeys2 = ["x", "scaleX", "originX"];
var yKeys2 = ["y", "scaleY", "originY"];
function removeBoxTransforms(box3, transforms, originBox, sourceBox) {
  removeAxisTransforms(box3.x, transforms, xKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);
  removeAxisTransforms(box3.y, transforms, yKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);
}

// node_modules/framer-motion/dist/es/projection/geometry/models.mjs
var createAxisDelta = function() {
  return {
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
  };
};
var createDelta = function() {
  return {
    x: createAxisDelta(),
    y: createAxisDelta()
  };
};
var createAxis = function() {
  return { min: 0, max: 0 };
};
var createBox = function() {
  return {
    x: createAxis(),
    y: createAxis()
  };
};

// node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
function isAxisDeltaZero(delta) {
  return delta.translate === 0 && delta.scale === 1;
}
function isDeltaZero(delta) {
  return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
}
function boxEquals(a3, b3) {
  return a3.x.min === b3.x.min && a3.x.max === b3.x.max && a3.y.min === b3.y.min && a3.y.max === b3.y.max;
}

// node_modules/framer-motion/dist/es/projection/shared/stack.mjs
var NodeStack = function() {
  function NodeStack2() {
    this.members = [];
  }
  NodeStack2.prototype.add = function(node) {
    addUniqueItem(this.members, node);
    node.scheduleRender();
  };
  NodeStack2.prototype.remove = function(node) {
    removeItem(this.members, node);
    if (node === this.prevLead) {
      this.prevLead = void 0;
    }
    if (node === this.lead) {
      var prevLead = this.members[this.members.length - 1];
      if (prevLead) {
        this.promote(prevLead);
      }
    }
  };
  NodeStack2.prototype.relegate = function(node) {
    var indexOfNode = this.members.findIndex(function(member2) {
      return node === member2;
    });
    if (indexOfNode === 0)
      return false;
    var prevLead;
    for (var i3 = indexOfNode; i3 >= 0; i3--) {
      var member = this.members[i3];
      if (member.isPresent !== false) {
        prevLead = member;
        break;
      }
    }
    if (prevLead) {
      this.promote(prevLead);
      return true;
    } else {
      return false;
    }
  };
  NodeStack2.prototype.promote = function(node, preserveFollowOpacity) {
    var _a;
    var prevLead = this.lead;
    if (node === prevLead)
      return;
    this.prevLead = prevLead;
    this.lead = node;
    node.show();
    if (prevLead) {
      prevLead.instance && prevLead.scheduleRender();
      node.scheduleRender();
      node.resumeFrom = prevLead;
      if (preserveFollowOpacity) {
        node.resumeFrom.preserveOpacity = true;
      }
      if (prevLead.snapshot) {
        node.snapshot = prevLead.snapshot;
        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
        node.snapshot.isShared = true;
      }
      if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {
        node.isLayoutDirty = true;
      }
      var crossfade2 = node.options.crossfade;
      if (crossfade2 === false) {
        prevLead.hide();
      }
    }
  };
  NodeStack2.prototype.exitAnimationComplete = function() {
    this.members.forEach(function(node) {
      var _a, _b, _c, _d, _e;
      (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);
      (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);
    });
  };
  NodeStack2.prototype.scheduleRender = function() {
    this.members.forEach(function(node) {
      node.instance && node.scheduleRender(false);
    });
  };
  NodeStack2.prototype.removeLeadSnapshot = function() {
    if (this.lead && this.lead.snapshot) {
      this.lead.snapshot = void 0;
    }
  };
  return NodeStack2;
}();

// node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
var scaleCorrectors = {};
function addScaleCorrector(correctors) {
  Object.assign(scaleCorrectors, correctors);
}

// node_modules/framer-motion/dist/es/projection/styles/transform.mjs
var identityProjection = "translate3d(0px, 0px, 0) scale(1, 1)";
function buildProjectionTransform(delta, treeScale, latestTransform) {
  var xTranslate = delta.x.translate / treeScale.x;
  var yTranslate = delta.y.translate / treeScale.y;
  var transform2 = "translate3d(".concat(xTranslate, "px, ").concat(yTranslate, "px, 0) ");
  if (latestTransform) {
    var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
    if (rotate)
      transform2 += "rotate(".concat(rotate, "deg) ");
    if (rotateX)
      transform2 += "rotateX(".concat(rotateX, "deg) ");
    if (rotateY)
      transform2 += "rotateY(".concat(rotateY, "deg) ");
  }
  transform2 += "scale(".concat(delta.x.scale, ", ").concat(delta.y.scale, ")");
  return transform2 === identityProjection ? "none" : transform2;
}

// node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
function eachAxis(callback2) {
  return [callback2("x"), callback2("y")];
}

// node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
var transformAxes = ["", "X", "Y", "Z"];
var order = ["translate", "scale", "rotate", "skew"];
var transformProps = ["transformPerspective", "x", "y", "z"];
order.forEach(function(operationKey) {
  return transformAxes.forEach(function(axesKey) {
    return transformProps.push(operationKey + axesKey);
  });
});
function sortTransformProps(a3, b3) {
  return transformProps.indexOf(a3) - transformProps.indexOf(b3);
}
var transformPropSet = new Set(transformProps);
function isTransformProp(key) {
  return transformPropSet.has(key);
}
var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
function isTransformOriginProp(key) {
  return transformOriginProps.has(key);
}

// node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
var compareByDepth = function(a3, b3) {
  return a3.depth - b3.depth;
};

// node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
var FlatTree = function() {
  function FlatTree2() {
    this.children = [];
    this.isDirty = false;
  }
  FlatTree2.prototype.add = function(child) {
    addUniqueItem(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.remove = function(child) {
    removeItem(this.children, child);
    this.isDirty = true;
  };
  FlatTree2.prototype.forEach = function(callback2) {
    this.isDirty && this.children.sort(compareByDepth);
    this.isDirty = false;
    this.children.forEach(callback2);
  };
  return FlatTree2;
}();

// node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
function resolveMotionValue(value12) {
  var unwrappedValue = isMotionValue(value12) ? value12.get() : value12;
  return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
}

// node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
var animationTarget = 1e3;
var globalProjectionState = {
  hasAnimatedSinceResize: true,
  hasEverUpdated: false
};
function createProjectionNode(_a) {
  var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, resetTransform = _a.resetTransform;
  return function() {
    function ProjectionNode(id3, latestValues, parent2) {
      var _this = this;
      if (latestValues === void 0) {
        latestValues = {};
      }
      if (parent2 === void 0) {
        parent2 = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();
      }
      this.children = /* @__PURE__ */ new Set();
      this.options = {};
      this.isTreeAnimating = false;
      this.isAnimationBlocked = false;
      this.isLayoutDirty = false;
      this.updateManuallyBlocked = false;
      this.updateBlockedByResize = false;
      this.isUpdating = false;
      this.isSVG = false;
      this.needsReset = false;
      this.shouldResetTransform = false;
      this.treeScale = { x: 1, y: 1 };
      this.eventHandlers = /* @__PURE__ */ new Map();
      this.potentialNodes = /* @__PURE__ */ new Map();
      this.checkUpdateFailed = function() {
        if (_this.isUpdating) {
          _this.isUpdating = false;
          _this.clearAllSnapshots();
        }
      };
      this.updateProjection = function() {
        _this.nodes.forEach(resolveTargetDelta);
        _this.nodes.forEach(calcProjection);
      };
      this.hasProjected = false;
      this.isVisible = true;
      this.animationProgress = 0;
      this.sharedNodes = /* @__PURE__ */ new Map();
      this.id = id3;
      this.latestValues = latestValues;
      this.root = parent2 ? parent2.root || parent2 : this;
      this.path = parent2 ? __spreadArray(__spreadArray([], __read(parent2.path), false), [parent2], false) : [];
      this.parent = parent2;
      this.depth = parent2 ? parent2.depth + 1 : 0;
      id3 && this.root.registerPotentialNode(id3, this);
      for (var i3 = 0; i3 < this.path.length; i3++) {
        this.path[i3].shouldResetTransform = true;
      }
      if (this.root === this)
        this.nodes = new FlatTree();
    }
    ProjectionNode.prototype.addEventListener = function(name15, handler2) {
      if (!this.eventHandlers.has(name15)) {
        this.eventHandlers.set(name15, new SubscriptionManager());
      }
      return this.eventHandlers.get(name15).add(handler2);
    };
    ProjectionNode.prototype.notifyListeners = function(name15) {
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      var subscriptionManager = this.eventHandlers.get(name15);
      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));
    };
    ProjectionNode.prototype.hasListeners = function(name15) {
      return this.eventHandlers.has(name15);
    };
    ProjectionNode.prototype.registerPotentialNode = function(id3, node) {
      this.potentialNodes.set(id3, node);
    };
    ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {
      var _this = this;
      var _a2;
      if (isLayoutDirty === void 0) {
        isLayoutDirty = false;
      }
      if (this.instance)
        return;
      this.isSVG = instance instanceof SVGElement && instance.tagName !== "svg";
      this.instance = instance;
      var _b = this.options, layoutId3 = _b.layoutId, layout2 = _b.layout, visualElement2 = _b.visualElement;
      if (visualElement2 && !visualElement2.getInstance()) {
        visualElement2.mount(instance);
      }
      this.root.nodes.add(this);
      (_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.children.add(this);
      this.id && this.root.potentialNodes.delete(this.id);
      if (isLayoutDirty && (layout2 || layoutId3)) {
        this.isLayoutDirty = true;
      }
      if (attachResizeListener) {
        var unblockTimeout_1;
        var resizeUnblockUpdate_1 = function() {
          return _this.root.updateBlockedByResize = false;
        };
        attachResizeListener(instance, function() {
          _this.root.updateBlockedByResize = true;
          clearTimeout(unblockTimeout_1);
          unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);
          if (globalProjectionState.hasAnimatedSinceResize) {
            globalProjectionState.hasAnimatedSinceResize = false;
            _this.nodes.forEach(finishAnimation);
          }
        });
      }
      if (layoutId3) {
        this.root.registerSharedNode(layoutId3, this);
      }
      if (this.options.animate !== false && visualElement2 && (layoutId3 || layout2)) {
        this.addEventListener("didUpdate", function(_a3) {
          var _b2, _c, _d, _e, _f;
          var delta = _a3.delta, hasLayoutChanged = _a3.hasLayoutChanged, hasRelativeTargetChanged = _a3.hasRelativeTargetChanged, newLayout = _a3.layout;
          if (_this.isTreeAnimationBlocked()) {
            _this.target = void 0;
            _this.relativeTarget = void 0;
            return;
          }
          var layoutTransition = (_c = (_b2 = _this.options.transition) !== null && _b2 !== void 0 ? _b2 : visualElement2.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;
          var _g = visualElement2.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete2 = _g.onLayoutAnimationComplete;
          var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;
          var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
          if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {
            if (_this.resumeFrom) {
              _this.resumingFrom = _this.resumeFrom;
              _this.resumingFrom.resumingFrom = void 0;
            }
            _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
            var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, "layout")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete2 });
            if (visualElement2.shouldReduceMotion) {
              animationOptions.delay = 0;
              animationOptions.type = false;
            }
            _this.startAnimation(animationOptions);
          } else {
            if (!hasLayoutChanged && _this.animationProgress === 0) {
              _this.finishAnimation();
            }
            _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));
          }
          _this.targetLayout = newLayout;
        });
      }
    };
    ProjectionNode.prototype.unmount = function() {
      var _a2, _b;
      this.options.layoutId && this.willUpdate();
      this.root.nodes.remove(this);
      (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);
      this.instance = void 0;
      cancelSync.preRender(this.updateProjection);
    };
    ProjectionNode.prototype.blockUpdate = function() {
      this.updateManuallyBlocked = true;
    };
    ProjectionNode.prototype.unblockUpdate = function() {
      this.updateManuallyBlocked = false;
    };
    ProjectionNode.prototype.isUpdateBlocked = function() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    };
    ProjectionNode.prototype.isTreeAnimationBlocked = function() {
      var _a2;
      return this.isAnimationBlocked || ((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimationBlocked()) || false;
    };
    ProjectionNode.prototype.startUpdate = function() {
      var _a2;
      if (this.isUpdateBlocked())
        return;
      this.isUpdating = true;
      (_a2 = this.nodes) === null || _a2 === void 0 ? void 0 : _a2.forEach(resetRotation);
    };
    ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {
      var _a2, _b, _c;
      if (shouldNotifyListeners === void 0) {
        shouldNotifyListeners = true;
      }
      if (this.root.isUpdateBlocked()) {
        (_b = (_a2 = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a2);
        return;
      }
      !this.root.isUpdating && this.root.startUpdate();
      if (this.isLayoutDirty)
        return;
      this.isLayoutDirty = true;
      for (var i3 = 0; i3 < this.path.length; i3++) {
        var node = this.path[i3];
        node.shouldResetTransform = true;
        node.updateScroll();
      }
      var _d = this.options, layoutId3 = _d.layoutId, layout2 = _d.layout;
      if (layoutId3 === void 0 && !layout2)
        return;
      var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;
      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
      this.updateSnapshot();
      shouldNotifyListeners && this.notifyListeners("willUpdate");
    };
    ProjectionNode.prototype.didUpdate = function() {
      var updateWasBlocked = this.isUpdateBlocked();
      if (updateWasBlocked) {
        this.unblockUpdate();
        this.clearAllSnapshots();
        this.nodes.forEach(clearMeasurements);
        return;
      }
      if (!this.isUpdating)
        return;
      this.isUpdating = false;
      if (this.potentialNodes.size) {
        this.potentialNodes.forEach(mountNodeEarly);
        this.potentialNodes.clear();
      }
      this.nodes.forEach(resetTransformStyle);
      this.nodes.forEach(updateLayout);
      this.nodes.forEach(notifyLayoutUpdate);
      this.clearAllSnapshots();
      flushSync.update();
      flushSync.preRender();
      flushSync.render();
    };
    ProjectionNode.prototype.clearAllSnapshots = function() {
      this.nodes.forEach(clearSnapshot);
      this.sharedNodes.forEach(removeLeadSnapshots);
    };
    ProjectionNode.prototype.scheduleUpdateProjection = function() {
      es_default.preRender(this.updateProjection, false, true);
    };
    ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {
      var _this = this;
      es_default.postRender(function() {
        if (_this.isLayoutDirty) {
          _this.root.didUpdate();
        } else {
          _this.root.checkUpdateFailed();
        }
      });
    };
    ProjectionNode.prototype.updateSnapshot = function() {
      if (this.snapshot || !this.instance)
        return;
      var measured = this.measure();
      var layout2 = this.removeTransform(this.removeElementScroll(measured));
      roundBox(layout2);
      this.snapshot = {
        measured,
        layout: layout2,
        latestValues: {}
      };
    };
    ProjectionNode.prototype.updateLayout = function() {
      var _a2;
      if (!this.instance)
        return;
      this.updateScroll();
      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
        return;
      }
      if (this.resumeFrom && !this.resumeFrom.instance) {
        for (var i3 = 0; i3 < this.path.length; i3++) {
          var node = this.path[i3];
          node.updateScroll();
        }
      }
      var measured = this.measure();
      roundBox(measured);
      var prevLayout = this.layout;
      this.layout = {
        measured,
        actual: this.removeElementScroll(measured)
      };
      this.layoutCorrected = createBox();
      this.isLayoutDirty = false;
      this.projectionDelta = void 0;
      this.notifyListeners("measure", this.layout.actual);
      (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);
    };
    ProjectionNode.prototype.updateScroll = function() {
      if (this.options.layoutScroll && this.instance) {
        this.scroll = measureScroll(this.instance);
      }
    };
    ProjectionNode.prototype.resetTransform = function() {
      var _a2;
      if (!resetTransform)
        return;
      var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
      var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
      var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
      var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
      var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
        resetTransform(this.instance, transformTemplateValue);
        this.shouldResetTransform = false;
        this.scheduleRender();
      }
    };
    ProjectionNode.prototype.measure = function() {
      var visualElement2 = this.options.visualElement;
      if (!visualElement2)
        return createBox();
      var box3 = visualElement2.measureViewportBox();
      var scroll3 = this.root.scroll;
      if (scroll3) {
        translateAxis(box3.x, scroll3.x);
        translateAxis(box3.y, scroll3.y);
      }
      return box3;
    };
    ProjectionNode.prototype.removeElementScroll = function(box3) {
      var boxWithoutScroll = createBox();
      copyBoxInto(boxWithoutScroll, box3);
      for (var i3 = 0; i3 < this.path.length; i3++) {
        var node = this.path[i3];
        var scroll_1 = node.scroll, options2 = node.options;
        if (node !== this.root && scroll_1 && options2.layoutScroll) {
          translateAxis(boxWithoutScroll.x, scroll_1.x);
          translateAxis(boxWithoutScroll.y, scroll_1.y);
        }
      }
      return boxWithoutScroll;
    };
    ProjectionNode.prototype.applyTransform = function(box3, transformOnly) {
      if (transformOnly === void 0) {
        transformOnly = false;
      }
      var withTransforms = createBox();
      copyBoxInto(withTransforms, box3);
      for (var i3 = 0; i3 < this.path.length; i3++) {
        var node = this.path[i3];
        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {
          transformBox(withTransforms, {
            x: -node.scroll.x,
            y: -node.scroll.y
          });
        }
        if (!hasTransform(node.latestValues))
          continue;
        transformBox(withTransforms, node.latestValues);
      }
      if (hasTransform(this.latestValues)) {
        transformBox(withTransforms, this.latestValues);
      }
      return withTransforms;
    };
    ProjectionNode.prototype.removeTransform = function(box3) {
      var _a2;
      var boxWithoutTransform = createBox();
      copyBoxInto(boxWithoutTransform, box3);
      for (var i3 = 0; i3 < this.path.length; i3++) {
        var node = this.path[i3];
        if (!node.instance)
          continue;
        if (!hasTransform(node.latestValues))
          continue;
        hasScale(node.latestValues) && node.updateSnapshot();
        var sourceBox = createBox();
        var nodeBox = node.measure();
        copyBoxInto(sourceBox, nodeBox);
        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a2 = node.snapshot) === null || _a2 === void 0 ? void 0 : _a2.layout, sourceBox);
      }
      if (hasTransform(this.latestValues)) {
        removeBoxTransforms(boxWithoutTransform, this.latestValues);
      }
      return boxWithoutTransform;
    };
    ProjectionNode.prototype.setTargetDelta = function(delta) {
      this.targetDelta = delta;
      this.root.scheduleUpdateProjection();
    };
    ProjectionNode.prototype.setOptions = function(options2) {
      var _a2;
      this.options = __assign(__assign(__assign({}, this.options), options2), { crossfade: (_a2 = options2.crossfade) !== null && _a2 !== void 0 ? _a2 : true });
    };
    ProjectionNode.prototype.clearMeasurements = function() {
      this.scroll = void 0;
      this.layout = void 0;
      this.snapshot = void 0;
      this.prevTransformTemplateValue = void 0;
      this.targetDelta = void 0;
      this.target = void 0;
      this.isLayoutDirty = false;
    };
    ProjectionNode.prototype.resolveTargetDelta = function() {
      var _a2;
      var _b = this.options, layout2 = _b.layout, layoutId3 = _b.layoutId;
      if (!this.layout || !(layout2 || layoutId3))
        return;
      if (!this.targetDelta && !this.relativeTarget) {
        this.relativeParent = this.getClosestProjectingParent();
        if (this.relativeParent && this.relativeParent.layout) {
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        }
      }
      if (!this.relativeTarget && !this.targetDelta)
        return;
      if (!this.target) {
        this.target = createBox();
        this.targetWithTransforms = createBox();
      }
      if (this.relativeTarget && this.relativeTargetOrigin && ((_a2 = this.relativeParent) === null || _a2 === void 0 ? void 0 : _a2.target)) {
        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
      } else if (this.targetDelta) {
        if (Boolean(this.resumingFrom)) {
          this.target = this.applyTransform(this.layout.actual);
        } else {
          copyBoxInto(this.target, this.layout.actual);
        }
        applyBoxDelta(this.target, this.targetDelta);
      } else {
        copyBoxInto(this.target, this.layout.actual);
      }
      if (this.attemptToResolveRelativeTarget) {
        this.attemptToResolveRelativeTarget = false;
        this.relativeParent = this.getClosestProjectingParent();
        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {
          this.relativeTarget = createBox();
          this.relativeTargetOrigin = createBox();
          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);
          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
        }
      }
    };
    ProjectionNode.prototype.getClosestProjectingParent = function() {
      if (!this.parent || hasTransform(this.parent.latestValues))
        return void 0;
      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {
        return this.parent;
      } else {
        return this.parent.getClosestProjectingParent();
      }
    };
    ProjectionNode.prototype.calcProjection = function() {
      var _a2;
      var _b = this.options, layout2 = _b.layout, layoutId3 = _b.layoutId;
      this.isTreeAnimating = Boolean(((_a2 = this.parent) === null || _a2 === void 0 ? void 0 : _a2.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);
      if (!this.isTreeAnimating) {
        this.targetDelta = this.relativeTarget = void 0;
      }
      if (!this.layout || !(layout2 || layoutId3))
        return;
      var lead = this.getLead();
      copyBoxInto(this.layoutCorrected, this.layout.actual);
      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);
      var target5 = lead.target;
      if (!target5)
        return;
      if (!this.projectionDelta) {
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      var prevTreeScaleX = this.treeScale.x;
      var prevTreeScaleY = this.treeScale.y;
      var prevProjectionTransform = this.projectionTransform;
      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target5, this.latestValues);
      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
        this.hasProjected = true;
        this.scheduleRender();
        this.notifyListeners("projectionUpdate", target5);
      }
    };
    ProjectionNode.prototype.hide = function() {
      this.isVisible = false;
    };
    ProjectionNode.prototype.show = function() {
      this.isVisible = true;
    };
    ProjectionNode.prototype.scheduleRender = function(notifyAll) {
      var _a2, _b, _c;
      if (notifyAll === void 0) {
        notifyAll = true;
      }
      (_b = (_a2 = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a2);
      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());
      if (this.resumingFrom && !this.resumingFrom.instance) {
        this.resumingFrom = void 0;
      }
    };
    ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {
      var _this = this;
      var _a2;
      if (hasOnlyRelativeTargetChanged === void 0) {
        hasOnlyRelativeTargetChanged = false;
      }
      var snapshot = this.snapshot;
      var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};
      var mixedValues = __assign({}, this.latestValues);
      var targetDelta = createDelta();
      this.relativeTarget = this.relativeTargetOrigin = void 0;
      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
      var relativeLayout = createBox();
      var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;
      var isOnlyMember = (((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length) || 0) <= 1;
      var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
      this.animationProgress = 0;
      this.mixTargetDelta = function(latest) {
        var _a3;
        var progress3 = latest / 1e3;
        mixAxisDelta(targetDelta.x, delta.x, progress3);
        mixAxisDelta(targetDelta.y, delta.y, progress3);
        _this.setTargetDelta(targetDelta);
        if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a3 = _this.relativeParent) === null || _a3 === void 0 ? void 0 : _a3.layout)) {
          calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);
          mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress3);
        }
        if (isSharedLayoutAnimation) {
          _this.animationValues = mixedValues;
          mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress3, shouldCrossfadeOpacity, isOnlyMember);
        }
        _this.root.scheduleUpdateProjection();
        _this.scheduleRender();
        _this.animationProgress = progress3;
      };
      this.mixTargetDelta(0);
    };
    ProjectionNode.prototype.startAnimation = function(options2) {
      var _this = this;
      var _a2, _b;
      this.notifyListeners("animationStart");
      (_a2 = this.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
      if (this.resumingFrom) {
        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();
      }
      if (this.pendingAnimation) {
        cancelSync.update(this.pendingAnimation);
        this.pendingAnimation = void 0;
      }
      this.pendingAnimation = es_default.update(function() {
        globalProjectionState.hasAnimatedSinceResize = true;
        _this.currentAnimation = animate2(0, animationTarget, __assign(__assign({}, options2), { onUpdate: function(latest) {
          var _a3;
          _this.mixTargetDelta(latest);
          (_a3 = options2.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(options2, latest);
        }, onComplete: function() {
          var _a3;
          (_a3 = options2.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(options2);
          _this.completeAnimation();
        } }));
        if (_this.resumingFrom) {
          _this.resumingFrom.currentAnimation = _this.currentAnimation;
        }
        _this.pendingAnimation = void 0;
      });
    };
    ProjectionNode.prototype.completeAnimation = function() {
      var _a2;
      if (this.resumingFrom) {
        this.resumingFrom.currentAnimation = void 0;
        this.resumingFrom.preserveOpacity = void 0;
      }
      (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.exitAnimationComplete();
      this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
      this.notifyListeners("animationComplete");
    };
    ProjectionNode.prototype.finishAnimation = function() {
      var _a2;
      if (this.currentAnimation) {
        (_a2 = this.mixTargetDelta) === null || _a2 === void 0 ? void 0 : _a2.call(this, animationTarget);
        this.currentAnimation.stop();
      }
      this.completeAnimation();
    };
    ProjectionNode.prototype.applyTransformsToTarget = function() {
      var _a2 = this.getLead(), targetWithTransforms = _a2.targetWithTransforms, target5 = _a2.target, layout2 = _a2.layout, latestValues = _a2.latestValues;
      if (!targetWithTransforms || !target5 || !layout2)
        return;
      copyBoxInto(targetWithTransforms, target5);
      transformBox(targetWithTransforms, latestValues);
      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
    };
    ProjectionNode.prototype.registerSharedNode = function(layoutId3, node) {
      var _a2, _b, _c;
      if (!this.sharedNodes.has(layoutId3)) {
        this.sharedNodes.set(layoutId3, new NodeStack());
      }
      var stack4 = this.sharedNodes.get(layoutId3);
      stack4.add(node);
      node.promote({
        transition: (_a2 = node.options.initialPromotionConfig) === null || _a2 === void 0 ? void 0 : _a2.transition,
        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)
      });
    };
    ProjectionNode.prototype.isLead = function() {
      var stack4 = this.getStack();
      return stack4 ? stack4.lead === this : true;
    };
    ProjectionNode.prototype.getLead = function() {
      var _a2;
      var layoutId3 = this.options.layoutId;
      return layoutId3 ? ((_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.lead) || this : this;
    };
    ProjectionNode.prototype.getPrevLead = function() {
      var _a2;
      var layoutId3 = this.options.layoutId;
      return layoutId3 ? (_a2 = this.getStack()) === null || _a2 === void 0 ? void 0 : _a2.prevLead : void 0;
    };
    ProjectionNode.prototype.getStack = function() {
      var layoutId3 = this.options.layoutId;
      if (layoutId3)
        return this.root.sharedNodes.get(layoutId3);
    };
    ProjectionNode.prototype.promote = function(_a2) {
      var _b = _a2 === void 0 ? {} : _a2, needsReset = _b.needsReset, transition3 = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;
      var stack4 = this.getStack();
      if (stack4)
        stack4.promote(this, preserveFollowOpacity);
      if (needsReset) {
        this.projectionDelta = void 0;
        this.needsReset = true;
      }
      if (transition3)
        this.setOptions({ transition: transition3 });
    };
    ProjectionNode.prototype.relegate = function() {
      var stack4 = this.getStack();
      if (stack4) {
        return stack4.relegate(this);
      } else {
        return false;
      }
    };
    ProjectionNode.prototype.resetRotation = function() {
      var visualElement2 = this.options.visualElement;
      if (!visualElement2)
        return;
      var hasRotate = false;
      var resetValues = {};
      for (var i3 = 0; i3 < transformAxes.length; i3++) {
        var axis = transformAxes[i3];
        var key = "rotate" + axis;
        if (!visualElement2.getStaticValue(key)) {
          continue;
        }
        hasRotate = true;
        resetValues[key] = visualElement2.getStaticValue(key);
        visualElement2.setStaticValue(key, 0);
      }
      if (!hasRotate)
        return;
      visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
      for (var key in resetValues) {
        visualElement2.setStaticValue(key, resetValues[key]);
      }
      visualElement2.scheduleRender();
    };
    ProjectionNode.prototype.getProjectionStyles = function(styleProp) {
      var _a2, _b, _c, _d, _e, _f;
      if (styleProp === void 0) {
        styleProp = {};
      }
      var styles = {};
      if (!this.instance || this.isSVG)
        return styles;
      if (!this.isVisible) {
        return { visibility: "hidden" };
      } else {
        styles.visibility = "";
      }
      var transformTemplate = (_a2 = this.options.visualElement) === null || _a2 === void 0 ? void 0 : _a2.getProps().transformTemplate;
      if (this.needsReset) {
        this.needsReset = false;
        styles.opacity = "";
        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
        return styles;
      }
      var lead = this.getLead();
      if (!this.projectionDelta || !this.layout || !lead.target) {
        var emptyStyles = {};
        if (this.options.layoutId) {
          emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;
          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
        }
        if (this.hasProjected && !hasTransform(this.latestValues)) {
          emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
          this.hasProjected = false;
        }
        return emptyStyles;
      }
      var valuesToRender = lead.animationValues || lead.latestValues;
      this.applyTransformsToTarget();
      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
      if (transformTemplate) {
        styles.transform = transformTemplate(valuesToRender, styles.transform);
      }
      var _g = this.projectionDelta, x = _g.x, y = _g.y;
      styles.transformOrigin = "".concat(x.origin * 100, "% ").concat(y.origin * 100, "% 0");
      if (lead.animationValues) {
        styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
      } else {
        styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : "" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;
      }
      for (var key in scaleCorrectors) {
        if (valuesToRender[key] === void 0)
          continue;
        var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;
        var corrected = correct(valuesToRender[key], lead);
        if (applyTo) {
          var num2 = applyTo.length;
          for (var i3 = 0; i3 < num2; i3++) {
            styles[applyTo[i3]] = corrected;
          }
        } else {
          styles[key] = corrected;
        }
      }
      if (this.options.layoutId) {
        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
      }
      return styles;
    };
    ProjectionNode.prototype.clearSnapshot = function() {
      this.resumeFrom = this.snapshot = void 0;
    };
    ProjectionNode.prototype.resetTree = function() {
      this.root.nodes.forEach(function(node) {
        var _a2;
        return (_a2 = node.currentAnimation) === null || _a2 === void 0 ? void 0 : _a2.stop();
      });
      this.root.nodes.forEach(clearMeasurements);
      this.root.sharedNodes.clear();
    };
    return ProjectionNode;
  }();
}
function updateLayout(node) {
  node.updateLayout();
}
function notifyLayoutUpdate(node) {
  var _a, _b, _c, _d;
  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;
  if (node.isLead() && node.layout && snapshot && node.hasListeners("didUpdate")) {
    var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;
    if (node.options.animationType === "size") {
      eachAxis(function(axis) {
        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
        var length8 = calcLength(axisSnapshot);
        axisSnapshot.min = layout_1[axis].min;
        axisSnapshot.max = axisSnapshot.min + length8;
      });
    } else if (node.options.animationType === "position") {
      eachAxis(function(axis) {
        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
        var length8 = calcLength(layout_1[axis]);
        axisSnapshot.max = axisSnapshot.min + length8;
      });
    }
    var layoutDelta = createDelta();
    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);
    var visualDelta = createDelta();
    if (snapshot.isShared) {
      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);
    } else {
      calcBoxDelta(visualDelta, layout_1, snapshot.layout);
    }
    var hasLayoutChanged = !isDeltaZero(layoutDelta);
    var hasRelativeTargetChanged = false;
    if (!node.resumeFrom) {
      node.relativeParent = node.getClosestProjectingParent();
      if (node.relativeParent && !node.relativeParent.resumeFrom) {
        var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;
        if (parentSnapshot && parentLayout) {
          var relativeSnapshot = createBox();
          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);
          var relativeLayout = createBox();
          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);
          if (!boxEquals(relativeSnapshot, relativeLayout)) {
            hasRelativeTargetChanged = true;
          }
        }
      }
    }
    node.notifyListeners("didUpdate", {
      layout: layout_1,
      snapshot,
      delta: visualDelta,
      layoutDelta,
      hasLayoutChanged,
      hasRelativeTargetChanged
    });
  } else if (node.isLead()) {
    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);
  }
  node.options.transition = void 0;
}
function clearSnapshot(node) {
  node.clearSnapshot();
}
function clearMeasurements(node) {
  node.clearMeasurements();
}
function resetTransformStyle(node) {
  var visualElement2 = node.options.visualElement;
  if (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.getProps().onBeforeLayoutMeasure) {
    visualElement2.notifyBeforeLayoutMeasure();
  }
  node.resetTransform();
}
function finishAnimation(node) {
  node.finishAnimation();
  node.targetDelta = node.relativeTarget = node.target = void 0;
}
function resolveTargetDelta(node) {
  node.resolveTargetDelta();
}
function calcProjection(node) {
  node.calcProjection();
}
function resetRotation(node) {
  node.resetRotation();
}
function removeLeadSnapshots(stack4) {
  stack4.removeLeadSnapshot();
}
function mixAxisDelta(output2, delta, p2) {
  output2.translate = mix(delta.translate, 0, p2);
  output2.scale = mix(delta.scale, 1, p2);
  output2.origin = delta.origin;
  output2.originPoint = delta.originPoint;
}
function mixAxis(output2, from3, to2, p2) {
  output2.min = mix(from3.min, to2.min, p2);
  output2.max = mix(from3.max, to2.max, p2);
}
function mixBox(output2, from3, to2, p2) {
  mixAxis(output2.x, from3.x, to2.x, p2);
  mixAxis(output2.y, from3.y, to2.y, p2);
}
function hasOpacityCrossfade(node) {
  return node.animationValues && node.animationValues.opacityExit !== void 0;
}
var defaultLayoutTransition = {
  duration: 0.45,
  ease: [0.4, 0, 0.1, 1]
};
function mountNodeEarly(node, id3) {
  var searchNode = node.root;
  for (var i3 = node.path.length - 1; i3 >= 0; i3--) {
    if (Boolean(node.path[i3].instance)) {
      searchNode = node.path[i3];
      break;
    }
  }
  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;
  var element3 = searchElement.querySelector('[data-projection-id="'.concat(id3, '"]'));
  if (element3)
    node.mount(element3, true);
}
function roundAxis(axis) {
  axis.min = Math.round(axis.min);
  axis.max = Math.round(axis.max);
}
function roundBox(box3) {
  roundAxis(box3.x);
  roundAxis(box3.y);
}

// node_modules/framer-motion/dist/es/projection/node/id.mjs
var id = 1;
function useProjectionId() {
  return useConstant(function() {
    if (globalProjectionState.hasEverUpdated) {
      return id++;
    }
  });
}

// node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
var import_react16 = __toESM(require_react(), 1);
var LayoutGroupContext = (0, import_react16.createContext)({});

// node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
var import_react18 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
var import_react17 = __toESM(require_react(), 1);
var SwitchLayoutGroupContext = (0, import_react17.createContext)({});

// node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
function useProjection(projectionId, _a, visualElement2, ProjectionNodeConstructor) {
  var _b;
  var layoutId3 = _a.layoutId, layout2 = _a.layout, drag3 = _a.drag, dragConstraints2 = _a.dragConstraints, layoutScroll = _a.layoutScroll;
  var initialPromotionConfig = (0, import_react18.useContext)(SwitchLayoutGroupContext);
  if (!ProjectionNodeConstructor || !visualElement2 || (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.projection)) {
    return;
  }
  visualElement2.projection = new ProjectionNodeConstructor(projectionId, visualElement2.getLatestValues(), (_b = visualElement2.parent) === null || _b === void 0 ? void 0 : _b.projection);
  visualElement2.projection.setOptions({
    layoutId: layoutId3,
    layout: layout2,
    alwaysMeasureLayout: Boolean(drag3) || dragConstraints2 && isRefObject(dragConstraints2),
    visualElement: visualElement2,
    scheduleRender: function() {
      return visualElement2.scheduleRender();
    },
    animationType: typeof layout2 === "string" ? layout2 : "both",
    initialPromotionConfig,
    layoutScroll
  });
}

// node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs
var import_react19 = __toESM(require_react(), 1);
var VisualElementHandler = function(_super) {
  __extends(VisualElementHandler2, _super);
  function VisualElementHandler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  VisualElementHandler2.prototype.getSnapshotBeforeUpdate = function() {
    this.updateProps();
    return null;
  };
  VisualElementHandler2.prototype.componentDidUpdate = function() {
  };
  VisualElementHandler2.prototype.updateProps = function() {
    var _a = this.props, visualElement2 = _a.visualElement, props = _a.props;
    if (visualElement2)
      visualElement2.setProps(props);
  };
  VisualElementHandler2.prototype.render = function() {
    return this.props.children;
  };
  return VisualElementHandler2;
}(import_react19.default.Component);

// node_modules/framer-motion/dist/es/motion/index.mjs
function createMotionComponent(_a) {
  var preloadedFeatures = _a.preloadedFeatures, createVisualElement = _a.createVisualElement, projectionNodeConstructor = _a.projectionNodeConstructor, useRender = _a.useRender, useVisualState = _a.useVisualState, Component = _a.Component;
  preloadedFeatures && loadFeatures(preloadedFeatures);
  function MotionComponent(props, externalRef) {
    var layoutId3 = useLayoutId(props);
    props = __assign(__assign({}, props), { layoutId: layoutId3 });
    var config = (0, import_react20.useContext)(MotionConfigContext);
    var features = null;
    var context = useCreateMotionContext(props);
    var projectionId = config.isStatic ? void 0 : useProjectionId();
    var visualState = useVisualState(props, config.isStatic);
    if (!config.isStatic && isBrowser) {
      context.visualElement = useVisualElement(Component, visualState, __assign(__assign({}, config), props), createVisualElement);
      useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);
      features = useFeatures(props, context.visualElement, preloadedFeatures);
    }
    return React4.createElement(VisualElementHandler, { visualElement: context.visualElement, props: __assign(__assign({}, config), props) }, features, React4.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement)));
  }
  return (0, import_react20.forwardRef)(MotionComponent);
}
function useLayoutId(_a) {
  var _b;
  var layoutId3 = _a.layoutId;
  var layoutGroupId = (_b = (0, import_react20.useContext)(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;
  return layoutGroupId && layoutId3 !== void 0 ? layoutGroupId + "-" + layoutId3 : layoutId3;
}

// node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
function createMotionProxy(createConfig) {
  function custom2(Component, customMotionComponentConfig) {
    if (customMotionComponentConfig === void 0) {
      customMotionComponentConfig = {};
    }
    return createMotionComponent(createConfig(Component, customMotionComponentConfig));
  }
  if (typeof Proxy === "undefined") {
    return custom2;
  }
  var componentCache = /* @__PURE__ */ new Map();
  return new Proxy(custom2, {
    get: function(_target, key) {
      if (!componentCache.has(key)) {
        componentCache.set(key, custom2(key));
      }
      return componentCache.get(key);
    }
  });
}

// node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
var lowercaseSVGElements = [
  "animate",
  "circle",
  "defs",
  "desc",
  "ellipse",
  "g",
  "image",
  "line",
  "filter",
  "marker",
  "mask",
  "metadata",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "rect",
  "stop",
  "svg",
  "switch",
  "symbol",
  "text",
  "tspan",
  "use",
  "view"
];

// node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
function isSVGComponent(Component) {
  if (typeof Component !== "string" || Component.includes("-")) {
    return false;
  } else if (lowercaseSVGElements.indexOf(Component) > -1 || /[A-Z]/.test(Component)) {
    return true;
  }
  return false;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
var import_react23 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
var import_react21 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
function isForcedMotionValue(key, _a) {
  var layout2 = _a.layout, layoutId3 = _a.layoutId;
  return isTransformProp(key) || isTransformOriginProp(key) || (layout2 || layoutId3 !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
}

// node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
var translateAlias = {
  x: "translateX",
  y: "translateY",
  z: "translateZ",
  transformPerspective: "perspective"
};
function buildTransform(_a, _b, transformIsDefault, transformTemplate) {
  var transform2 = _a.transform, transformKeys2 = _a.transformKeys;
  var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
  var transformString = "";
  transformKeys2.sort(sortTransformProps);
  var transformHasZ = false;
  var numTransformKeys = transformKeys2.length;
  for (var i3 = 0; i3 < numTransformKeys; i3++) {
    var key = transformKeys2[i3];
    transformString += "".concat(translateAlias[key] || key, "(").concat(transform2[key], ") ");
    if (key === "z")
      transformHasZ = true;
  }
  if (!transformHasZ && enableHardwareAcceleration) {
    transformString += "translateZ(0)";
  } else {
    transformString = transformString.trim();
  }
  if (transformTemplate) {
    transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
  } else if (allowTransformNone && transformIsDefault) {
    transformString = "none";
  }
  return transformString;
}
function buildTransformOrigin(_a) {
  var _b = _a.originX, originX = _b === void 0 ? "50%" : _b, _c = _a.originY, originY = _c === void 0 ? "50%" : _c, _d = _a.originZ, originZ = _d === void 0 ? 0 : _d;
  return "".concat(originX, " ").concat(originY, " ").concat(originZ);
}

// node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
function isCSSVariable(key) {
  return key.startsWith("--");
}

// node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
var getValueAsType = function(value12, type) {
  return type && typeof value12 === "number" ? type.transform(value12) : value12;
};

// node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
function buildHTMLStyles(state3, latestValues, options2, transformTemplate) {
  var _a;
  var style2 = state3.style, vars = state3.vars, transform2 = state3.transform, transformKeys2 = state3.transformKeys, transformOrigin = state3.transformOrigin;
  transformKeys2.length = 0;
  var hasTransform2 = false;
  var hasTransformOrigin = false;
  var transformIsNone = true;
  for (var key in latestValues) {
    var value12 = latestValues[key];
    if (isCSSVariable(key)) {
      vars[key] = value12;
      continue;
    }
    var valueType = numberValueTypes[key];
    var valueAsType = getValueAsType(value12, valueType);
    if (isTransformProp(key)) {
      hasTransform2 = true;
      transform2[key] = valueAsType;
      transformKeys2.push(key);
      if (!transformIsNone)
        continue;
      if (value12 !== ((_a = valueType.default) !== null && _a !== void 0 ? _a : 0))
        transformIsNone = false;
    } else if (isTransformOriginProp(key)) {
      transformOrigin[key] = valueAsType;
      hasTransformOrigin = true;
    } else {
      style2[key] = valueAsType;
    }
  }
  if (hasTransform2) {
    style2.transform = buildTransform(state3, options2, transformIsNone, transformTemplate);
  } else if (transformTemplate) {
    style2.transform = transformTemplate({}, "");
  } else if (!latestValues.transform && style2.transform) {
    style2.transform = "none";
  }
  if (hasTransformOrigin) {
    style2.transformOrigin = buildTransformOrigin(transformOrigin);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
var createHtmlRenderState = function() {
  return {
    style: {},
    transform: {},
    transformKeys: [],
    transformOrigin: {},
    vars: {}
  };
};

// node_modules/framer-motion/dist/es/render/html/use-props.mjs
function copyRawValuesOnly(target5, source3, props) {
  for (var key in source3) {
    if (!isMotionValue(source3[key]) && !isForcedMotionValue(key, props)) {
      target5[key] = source3[key];
    }
  }
}
function useInitialMotionValues(_a, visualState, isStatic) {
  var transformTemplate = _a.transformTemplate;
  return (0, import_react21.useMemo)(function() {
    var state3 = createHtmlRenderState();
    buildHTMLStyles(state3, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
    var vars = state3.vars, style2 = state3.style;
    return __assign(__assign({}, vars), style2);
  }, [visualState]);
}
function useStyle(props, visualState, isStatic) {
  var styleProp = props.style || {};
  var style2 = {};
  copyRawValuesOnly(style2, styleProp, props);
  Object.assign(style2, useInitialMotionValues(props, visualState, isStatic));
  if (props.transformValues) {
    style2 = props.transformValues(style2);
  }
  return style2;
}
function useHTMLProps(props, visualState, isStatic) {
  var htmlProps = {};
  var style2 = useStyle(props, visualState, isStatic);
  if (Boolean(props.drag) && props.dragListener !== false) {
    htmlProps.draggable = false;
    style2.userSelect = style2.WebkitUserSelect = style2.WebkitTouchCallout = "none";
    style2.touchAction = props.drag === true ? "none" : "pan-".concat(props.drag === "x" ? "y" : "x");
  }
  htmlProps.style = style2;
  return htmlProps;
}

// node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
var validMotionProps = /* @__PURE__ */ new Set([
  "initial",
  "animate",
  "exit",
  "style",
  "variants",
  "transition",
  "transformTemplate",
  "transformValues",
  "custom",
  "inherit",
  "layout",
  "layoutId",
  "layoutDependency",
  "onLayoutAnimationStart",
  "onLayoutAnimationComplete",
  "onLayoutMeasure",
  "onBeforeLayoutMeasure",
  "onAnimationStart",
  "onAnimationComplete",
  "onUpdate",
  "onDragStart",
  "onDrag",
  "onDragEnd",
  "onMeasureDragConstraints",
  "onDirectionLock",
  "onDragTransitionEnd",
  "drag",
  "dragControls",
  "dragListener",
  "dragConstraints",
  "dragDirectionLock",
  "dragSnapToOrigin",
  "_dragX",
  "_dragY",
  "dragElastic",
  "dragMomentum",
  "dragPropagation",
  "dragTransition",
  "whileDrag",
  "onPan",
  "onPanStart",
  "onPanEnd",
  "onPanSessionStart",
  "onTap",
  "onTapStart",
  "onTapCancel",
  "onHoverStart",
  "onHoverEnd",
  "whileFocus",
  "whileTap",
  "whileHover",
  "whileInView",
  "onViewportEnter",
  "onViewportLeave",
  "viewport",
  "layoutScroll"
]);
function isValidMotionProp(key) {
  return validMotionProps.has(key);
}

// node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
var shouldForward = function(key) {
  return !isValidMotionProp(key);
};
function loadExternalIsValidProp(isValidProp) {
  if (!isValidProp)
    return;
  shouldForward = function(key) {
    return key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  };
}
try {
  loadExternalIsValidProp(require_is_prop_valid_cjs().default);
} catch (_a) {
}
function filterProps(props, isDom, forwardMotionProps) {
  var filteredProps = {};
  for (var key in props) {
    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
var import_react22 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
function calcOrigin(origin3, offset, size8) {
  return typeof origin3 === "string" ? origin3 : px2.transform(offset + size8 * origin3);
}
function calcSVGTransformOrigin(dimensions, originX, originY) {
  var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
  var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
  return "".concat(pxOriginX, " ").concat(pxOriginY);
}

// node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
var dashKeys = {
  offset: "stroke-dashoffset",
  array: "stroke-dasharray"
};
var camelKeys = {
  offset: "strokeDashoffset",
  array: "strokeDasharray"
};
function buildSVGPath(attrs, length8, spacing, offset, useDashCase) {
  if (spacing === void 0) {
    spacing = 1;
  }
  if (offset === void 0) {
    offset = 0;
  }
  if (useDashCase === void 0) {
    useDashCase = true;
  }
  attrs.pathLength = 1;
  var keys4 = useDashCase ? dashKeys : camelKeys;
  attrs[keys4.offset] = px2.transform(-offset);
  var pathLength = px2.transform(length8);
  var pathSpacing = px2.transform(spacing);
  attrs[keys4.array] = "".concat(pathLength, " ").concat(pathSpacing);
}

// node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
function buildSVGAttrs(state3, _a, options2, transformTemplate) {
  var attrX = _a.attrX, attrY = _a.attrY, originX = _a.originX, originY = _a.originY, pathLength = _a.pathLength, _b = _a.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
  buildHTMLStyles(state3, latest, options2, transformTemplate);
  state3.attrs = state3.style;
  state3.style = {};
  var attrs = state3.attrs, style2 = state3.style, dimensions = state3.dimensions;
  if (attrs.transform) {
    if (dimensions)
      style2.transform = attrs.transform;
    delete attrs.transform;
  }
  if (dimensions && (originX !== void 0 || originY !== void 0 || style2.transform)) {
    style2.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
  }
  if (attrX !== void 0)
    attrs.x = attrX;
  if (attrY !== void 0)
    attrs.y = attrY;
  if (pathLength !== void 0) {
    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
var createSvgRenderState = function() {
  return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
};

// node_modules/framer-motion/dist/es/render/svg/use-props.mjs
function useSVGProps(props, visualState) {
  var visualProps = (0, import_react22.useMemo)(function() {
    var state3 = createSvgRenderState();
    buildSVGAttrs(state3, visualState, { enableHardwareAcceleration: false }, props.transformTemplate);
    return __assign(__assign({}, state3.attrs), { style: __assign({}, state3.style) });
  }, [visualState]);
  if (props.style) {
    var rawStyles = {};
    copyRawValuesOnly(rawStyles, props.style, props);
    visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
  }
  return visualProps;
}

// node_modules/framer-motion/dist/es/render/dom/use-render.mjs
function createUseRender(forwardMotionProps) {
  if (forwardMotionProps === void 0) {
    forwardMotionProps = false;
  }
  var useRender = function(Component, props, projectionId, ref, _a, isStatic) {
    var latestValues = _a.latestValues;
    var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
    var visualProps = useVisualProps(props, latestValues, isStatic);
    var filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
    var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
    if (projectionId) {
      elementProps["data-projection-id"] = projectionId;
    }
    return (0, import_react23.createElement)(Component, elementProps);
  };
  return useRender;
}

// node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
var REPLACE_TEMPLATE = "$1-$2";
var camelToDash = function(str2) {
  return str2.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
};

// node_modules/framer-motion/dist/es/render/html/utils/render.mjs
function renderHTML(element3, _a, styleProp, projection) {
  var style2 = _a.style, vars = _a.vars;
  Object.assign(element3.style, style2, projection && projection.getProjectionStyles(styleProp));
  for (var key in vars) {
    element3.style.setProperty(key, vars[key]);
  }
}

// node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
var camelCaseAttributes = /* @__PURE__ */ new Set([
  "baseFrequency",
  "diffuseConstant",
  "kernelMatrix",
  "kernelUnitLength",
  "keySplines",
  "keyTimes",
  "limitingConeAngle",
  "markerHeight",
  "markerWidth",
  "numOctaves",
  "targetX",
  "targetY",
  "surfaceScale",
  "specularConstant",
  "specularExponent",
  "stdDeviation",
  "tableValues",
  "viewBox",
  "gradientTransform",
  "pathLength"
]);

// node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
function renderSVG(element3, renderState, _styleProp, projection) {
  renderHTML(element3, renderState, void 0, projection);
  for (var key in renderState.attrs) {
    element3.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
  }
}

// node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps(props) {
  var style2 = props.style;
  var newValues = {};
  for (var key in style2) {
    if (isMotionValue(style2[key]) || isForcedMotionValue(key, props)) {
      newValues[key] = style2[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
function scrapeMotionValuesFromProps2(props) {
  var newValues = scrapeMotionValuesFromProps(props);
  for (var key in props) {
    if (isMotionValue(props[key])) {
      var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
      newValues[targetKey] = props[key];
    }
  }
  return newValues;
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
var import_react24 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
function isAnimationControls(v) {
  return typeof v === "object" && typeof v.start === "function";
}

// node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
function makeState(_a, props, context, presenceContext) {
  var scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps, createRenderState = _a.createRenderState, onMount = _a.onMount;
  var state3 = {
    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
    renderState: createRenderState()
  };
  if (onMount) {
    state3.mount = function(instance) {
      return onMount(props, instance, state3);
    };
  }
  return state3;
}
var makeUseVisualState = function(config) {
  return function(props, isStatic) {
    var context = (0, import_react24.useContext)(MotionContext);
    var presenceContext = (0, import_react24.useContext)(PresenceContext);
    return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function() {
      return makeState(config, props, context, presenceContext);
    });
  };
};
function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
  var values2 = {};
  var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
  var motionValues = scrapeMotionValues(props);
  for (var key in motionValues) {
    values2[key] = resolveMotionValue(motionValues[key]);
  }
  var initial4 = props.initial, animate6 = props.animate;
  var isControllingVariants = checkIfControllingVariants(props);
  var isVariantNode = checkIfVariantNode(props);
  if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
    initial4 !== null && initial4 !== void 0 ? initial4 : initial4 = context.initial;
    animate6 !== null && animate6 !== void 0 ? animate6 : animate6 = context.animate;
  }
  var initialAnimationIsBlocked = blockInitialAnimation || initial4 === false;
  var variantToSet = initialAnimationIsBlocked ? animate6 : initial4;
  if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
    var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
    list.forEach(function(definition) {
      var resolved = resolveVariantFromProps(props, definition);
      if (!resolved)
        return;
      var transitionEnd = resolved.transitionEnd;
      resolved.transition;
      var target5 = __rest(resolved, ["transitionEnd", "transition"]);
      for (var key2 in target5) {
        var valueTarget = target5[key2];
        if (Array.isArray(valueTarget)) {
          var index6 = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;
          valueTarget = valueTarget[index6];
        }
        if (valueTarget !== null) {
          values2[key2] = valueTarget;
        }
      }
      for (var key2 in transitionEnd)
        values2[key2] = transitionEnd[key2];
    });
  }
  return values2;
}

// node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
var svgMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
    createRenderState: createSvgRenderState,
    onMount: function(props, instance, _a) {
      var renderState = _a.renderState, latestValues = _a.latestValues;
      try {
        renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
      } catch (e) {
        renderState.dimensions = {
          x: 0,
          y: 0,
          width: 0,
          height: 0
        };
      }
      buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, props.transformTemplate);
      renderSVG(instance, renderState);
    }
  })
};

// node_modules/framer-motion/dist/es/render/html/config-motion.mjs
var htmlMotionConfig = {
  useVisualState: makeUseVisualState({
    scrapeMotionValuesFromProps,
    createRenderState: createHtmlRenderState
  })
};

// node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
function createDomMotionConfig(Component, _a, preloadedFeatures, createVisualElement, projectionNodeConstructor) {
  var _b = _a.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
  var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
  return __assign(__assign({}, baseConfig), { preloadedFeatures, useRender: createUseRender(forwardMotionProps), createVisualElement, projectionNodeConstructor, Component });
}

// node_modules/framer-motion/dist/es/render/utils/types.mjs
var AnimationType;
(function(AnimationType2) {
  AnimationType2["Animate"] = "animate";
  AnimationType2["Hover"] = "whileHover";
  AnimationType2["Tap"] = "whileTap";
  AnimationType2["Drag"] = "whileDrag";
  AnimationType2["Focus"] = "whileFocus";
  AnimationType2["InView"] = "whileInView";
  AnimationType2["Exit"] = "exit";
})(AnimationType || (AnimationType = {}));

// node_modules/framer-motion/dist/es/events/use-dom-event.mjs
var import_react25 = __toESM(require_react(), 1);
function addDomEvent(target5, eventName, handler2, options2) {
  if (options2 === void 0) {
    options2 = { passive: true };
  }
  target5.addEventListener(eventName, handler2, options2);
  return function() {
    return target5.removeEventListener(eventName, handler2);
  };
}
function useDomEvent(ref, eventName, handler2, options2) {
  (0, import_react25.useEffect)(function() {
    var element3 = ref.current;
    if (handler2 && element3) {
      return addDomEvent(element3, eventName, handler2, options2);
    }
  }, [ref, eventName, handler2, options2]);
}

// node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs
function useFocusGesture(_a) {
  var whileFocus = _a.whileFocus, visualElement2 = _a.visualElement;
  var onFocus = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, true);
  };
  var onBlur = function() {
    var _a2;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Focus, false);
  };
  useDomEvent(visualElement2, "focus", whileFocus ? onFocus : void 0);
  useDomEvent(visualElement2, "blur", whileFocus ? onBlur : void 0);
}

// node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs
function isMouseEvent(event) {
  if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
    return !!(event.pointerType === "mouse");
  }
  return event instanceof MouseEvent;
}
function isTouchEvent(event) {
  var hasTouches = !!event.touches;
  return hasTouches;
}

// node_modules/framer-motion/dist/es/events/event-info.mjs
function filterPrimaryPointer(eventHandler) {
  return function(event) {
    var isMouseEvent2 = event instanceof MouseEvent;
    var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
    if (isPrimaryPointer) {
      eventHandler(event);
    }
  };
}
var defaultPagePoint = { pageX: 0, pageY: 0 };
function pointFromTouch(e, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  var primaryTouch = e.touches[0] || e.changedTouches[0];
  var point = primaryTouch || defaultPagePoint;
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function pointFromMouse(point, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    x: point[pointType + "X"],
    y: point[pointType + "Y"]
  };
}
function extractEventInfo(event, pointType) {
  if (pointType === void 0) {
    pointType = "page";
  }
  return {
    point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
  };
}
var wrapHandler = function(handler2, shouldFilterPrimaryPointer) {
  if (shouldFilterPrimaryPointer === void 0) {
    shouldFilterPrimaryPointer = false;
  }
  var listener = function(event) {
    return handler2(event, extractEventInfo(event));
  };
  return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
};

// node_modules/framer-motion/dist/es/events/utils.mjs
var supportsPointerEvents = function() {
  return isBrowser && window.onpointerdown === null;
};
var supportsTouchEvents = function() {
  return isBrowser && window.ontouchstart === null;
};
var supportsMouseEvents = function() {
  return isBrowser && window.onmousedown === null;
};

// node_modules/framer-motion/dist/es/events/use-pointer-event.mjs
var mouseEventNames = {
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointercancel: "mousecancel",
  pointerover: "mouseover",
  pointerout: "mouseout",
  pointerenter: "mouseenter",
  pointerleave: "mouseleave"
};
var touchEventNames = {
  pointerdown: "touchstart",
  pointermove: "touchmove",
  pointerup: "touchend",
  pointercancel: "touchcancel"
};
function getPointerEventName(name15) {
  if (supportsPointerEvents()) {
    return name15;
  } else if (supportsTouchEvents()) {
    return touchEventNames[name15];
  } else if (supportsMouseEvents()) {
    return mouseEventNames[name15];
  }
  return name15;
}
function addPointerEvent(target5, eventName, handler2, options2) {
  return addDomEvent(target5, getPointerEventName(eventName), wrapHandler(handler2, eventName === "pointerdown"), options2);
}
function usePointerEvent(ref, eventName, handler2, options2) {
  return useDomEvent(ref, getPointerEventName(eventName), handler2 && wrapHandler(handler2, eventName === "pointerdown"), options2);
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
function createLock(name15) {
  var lock = null;
  return function() {
    var openLock = function() {
      lock = null;
    };
    if (lock === null) {
      lock = name15;
      return openLock;
    }
    return false;
  };
}
var globalHorizontalLock = createLock("dragHorizontal");
var globalVerticalLock = createLock("dragVertical");
function getGlobalLock(drag3) {
  var lock = false;
  if (drag3 === "y") {
    lock = globalVerticalLock();
  } else if (drag3 === "x") {
    lock = globalHorizontalLock();
  } else {
    var openHorizontal_1 = globalHorizontalLock();
    var openVertical_1 = globalVerticalLock();
    if (openHorizontal_1 && openVertical_1) {
      lock = function() {
        openHorizontal_1();
        openVertical_1();
      };
    } else {
      if (openHorizontal_1)
        openHorizontal_1();
      if (openVertical_1)
        openVertical_1();
    }
  }
  return lock;
}
function isDragActive() {
  var openGestureLock = getGlobalLock(true);
  if (!openGestureLock)
    return true;
  openGestureLock();
  return false;
}

// node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs
function createHoverEvent(visualElement2, isActive, callback2) {
  return function(event, info2) {
    var _a;
    if (!isMouseEvent(event) || isDragActive())
      return;
    (_a = visualElement2.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Hover, isActive);
    callback2 === null || callback2 === void 0 ? void 0 : callback2(event, info2);
  };
}
function useHoverGesture(_a) {
  var onHoverStart2 = _a.onHoverStart, onHoverEnd2 = _a.onHoverEnd, whileHover2 = _a.whileHover, visualElement2 = _a.visualElement;
  usePointerEvent(visualElement2, "pointerenter", onHoverStart2 || whileHover2 ? createHoverEvent(visualElement2, true, onHoverStart2) : void 0, { passive: !onHoverStart2 });
  usePointerEvent(visualElement2, "pointerleave", onHoverEnd2 || whileHover2 ? createHoverEvent(visualElement2, false, onHoverEnd2) : void 0, { passive: !onHoverEnd2 });
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
var import_react27 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
var isNodeOrChild = function(parent2, child) {
  if (!child) {
    return false;
  } else if (parent2 === child) {
    return true;
  } else {
    return isNodeOrChild(parent2, child.parentElement);
  }
};

// node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
var import_react26 = __toESM(require_react(), 1);
function useUnmountEffect(callback2) {
  return (0, import_react26.useEffect)(function() {
    return function() {
      return callback2();
    };
  }, []);
}

// node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
function useTapGesture(_a) {
  var onTap2 = _a.onTap, onTapStart2 = _a.onTapStart, onTapCancel2 = _a.onTapCancel, whileTap2 = _a.whileTap, visualElement2 = _a.visualElement;
  var hasPressListeners = onTap2 || onTapStart2 || onTapCancel2 || whileTap2;
  var isPressing = (0, import_react27.useRef)(false);
  var cancelPointerEndListeners = (0, import_react27.useRef)(null);
  var eventOptions = {
    passive: !(onTapStart2 || onTap2 || onTapCancel2 || onPointerDown)
  };
  function removePointerEndListener() {
    var _a2;
    (_a2 = cancelPointerEndListeners.current) === null || _a2 === void 0 ? void 0 : _a2.call(cancelPointerEndListeners);
    cancelPointerEndListeners.current = null;
  }
  function checkPointerEnd() {
    var _a2;
    removePointerEndListener();
    isPressing.current = false;
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, false);
    return !isDragActive();
  }
  function onPointerUp(event, info2) {
    if (!checkPointerEnd())
      return;
    !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel2 === null || onTapCancel2 === void 0 ? void 0 : onTapCancel2(event, info2) : onTap2 === null || onTap2 === void 0 ? void 0 : onTap2(event, info2);
  }
  function onPointerCancel(event, info2) {
    if (!checkPointerEnd())
      return;
    onTapCancel2 === null || onTapCancel2 === void 0 ? void 0 : onTapCancel2(event, info2);
  }
  function onPointerDown(event, info2) {
    var _a2;
    removePointerEndListener();
    if (isPressing.current)
      return;
    isPressing.current = true;
    cancelPointerEndListeners.current = pipe3(addPointerEvent(window, "pointerup", onPointerUp, eventOptions), addPointerEvent(window, "pointercancel", onPointerCancel, eventOptions));
    (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Tap, true);
    onTapStart2 === null || onTapStart2 === void 0 ? void 0 : onTapStart2(event, info2);
  }
  usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0, eventOptions);
  useUnmountEffect(removePointerEndListener);
}

// node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
var import_react28 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/warn-once.mjs
var warned = /* @__PURE__ */ new Set();
function warnOnce(condition, message2, element3) {
  if (condition || warned.has(message2))
    return;
  console.warn(message2);
  if (element3)
    console.warn(element3);
  warned.add(message2);
}

// node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
var observerCallbacks = /* @__PURE__ */ new WeakMap();
var observers = /* @__PURE__ */ new WeakMap();
var fireObserverCallback = function(entry) {
  var _a;
  (_a = observerCallbacks.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);
};
var fireAllObserverCallbacks = function(entries) {
  entries.forEach(fireObserverCallback);
};
function initIntersectionObserver(_a) {
  var root = _a.root, options2 = __rest(_a, ["root"]);
  var lookupRoot = root || document;
  if (!observers.has(lookupRoot)) {
    observers.set(lookupRoot, {});
  }
  var rootObservers = observers.get(lookupRoot);
  var key = JSON.stringify(options2);
  if (!rootObservers[key]) {
    rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root }, options2));
  }
  return rootObservers[key];
}
function observeIntersection(element3, options2, callback2) {
  var rootInteresectionObserver = initIntersectionObserver(options2);
  observerCallbacks.set(element3, callback2);
  rootInteresectionObserver.observe(element3);
  return function() {
    observerCallbacks.delete(element3);
    rootInteresectionObserver.unobserve(element3);
  };
}

// node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
function useViewport(_a) {
  var visualElement2 = _a.visualElement, whileInView = _a.whileInView, onViewportEnter = _a.onViewportEnter, onViewportLeave = _a.onViewportLeave, _b = _a.viewport, viewport = _b === void 0 ? {} : _b;
  var state3 = (0, import_react28.useRef)({
    hasEnteredView: false,
    isInView: false
  });
  var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);
  if (viewport.once && state3.current.hasEnteredView)
    shouldObserve = false;
  var useObserver = typeof IntersectionObserver === "undefined" ? useMissingIntersectionObserver : useIntersectionObserver;
  useObserver(shouldObserve, state3.current, visualElement2, viewport);
}
var thresholdNames = {
  some: 0,
  all: 1
};
function useIntersectionObserver(shouldObserve, state3, visualElement2, _a) {
  var root = _a.root, rootMargin = _a.margin, _b = _a.amount, amount = _b === void 0 ? "some" : _b, once = _a.once;
  (0, import_react28.useEffect)(function() {
    if (!shouldObserve)
      return;
    var options2 = {
      root: root === null || root === void 0 ? void 0 : root.current,
      rootMargin,
      threshold: typeof amount === "number" ? amount : thresholdNames[amount]
    };
    var intersectionCallback = function(entry) {
      var _a2;
      var isIntersecting = entry.isIntersecting;
      if (state3.isInView === isIntersecting)
        return;
      state3.isInView = isIntersecting;
      if (once && !isIntersecting && state3.hasEnteredView) {
        return;
      } else if (isIntersecting) {
        state3.hasEnteredView = true;
      }
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, isIntersecting);
      var props = visualElement2.getProps();
      var callback2 = isIntersecting ? props.onViewportEnter : props.onViewportLeave;
      callback2 === null || callback2 === void 0 ? void 0 : callback2(entry);
    };
    return observeIntersection(visualElement2.getInstance(), options2, intersectionCallback);
  }, [shouldObserve, root, rootMargin, amount]);
}
function useMissingIntersectionObserver(shouldObserve, state3, visualElement2, _a) {
  var _b = _a.fallback, fallback = _b === void 0 ? true : _b;
  (0, import_react28.useEffect)(function() {
    if (!shouldObserve || !fallback)
      return;
    if (env !== "production") {
      warnOnce(false, "IntersectionObserver not available on this device. whileInView animations will trigger on mount.");
    }
    requestAnimationFrame(function() {
      var _a2;
      state3.hasEnteredView = true;
      var onViewportEnter = visualElement2.getProps().onViewportEnter;
      onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.InView, true);
    });
  }, [shouldObserve]);
}

// node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs
var makeRenderlessComponent = function(hook) {
  return function(props) {
    hook(props);
    return null;
  };
};

// node_modules/framer-motion/dist/es/motion/features/gestures.mjs
var gestureAnimations = {
  inView: makeRenderlessComponent(useViewport),
  tap: makeRenderlessComponent(useTapGesture),
  focus: makeRenderlessComponent(useFocusGesture),
  hover: makeRenderlessComponent(useHoverGesture)
};

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var import_react30 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
var import_react29 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-id.mjs
var counter = 0;
var incrementId = function() {
  return counter++;
};
var useId = function() {
  return useConstant(incrementId);
};

// node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
function usePresence() {
  var context = (0, import_react29.useContext)(PresenceContext);
  if (context === null)
    return [true, null];
  var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
  var id3 = useId();
  (0, import_react29.useEffect)(function() {
    return register(id3);
  }, []);
  var safeToRemove = function() {
    return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id3);
  };
  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
}

// node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
function shallowCompare(next, prev) {
  if (!Array.isArray(prev))
    return false;
  var prevLength = prev.length;
  if (prevLength !== next.length)
    return false;
  for (var i3 = 0; i3 < prevLength; i3++) {
    if (prev[i3] !== next[i3])
      return false;
  }
  return true;
}

// node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
var isNumericalString = function(v) {
  return /^\-?\d*\.?\d+$/.test(v);
};

// node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
var isZeroValueString = function(v) {
  return /^0[^.\s]+$/.test(v);
};

// node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
var testValueType = function(v) {
  return function(type) {
    return type.test(v);
  };
};

// node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
var auto2 = {
  test: function(v) {
    return v === "auto";
  },
  parse: function(v) {
    return v;
  }
};

// node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
var dimensionValueTypes = [number, px2, percent2, degrees, vw2, vh2, auto2];
var findDimensionValueType = function(v) {
  return dimensionValueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes), false), [color2, complex], false);
var findValueType = function(v) {
  return valueTypes.find(testValueType(v));
};

// node_modules/framer-motion/dist/es/render/utils/setters.mjs
function setMotionValue(visualElement2, key, value12) {
  if (visualElement2.hasValue(key)) {
    visualElement2.getValue(key).set(value12);
  } else {
    visualElement2.addValue(key, motionValue(value12));
  }
}
function setTarget5(visualElement2, definition) {
  var resolved = resolveVariant(visualElement2, definition);
  var _a = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
  _a.transition;
  var target5 = __rest(_a, ["transitionEnd", "transition"]);
  target5 = __assign(__assign({}, target5), transitionEnd);
  for (var key in target5) {
    var value12 = resolveFinalValueInKeyframes(target5[key]);
    setMotionValue(visualElement2, key, value12);
  }
}
function checkTargetForNewValues(visualElement2, target5, origin3) {
  var _a, _b, _c;
  var _d;
  var newValueKeys = Object.keys(target5).filter(function(key2) {
    return !visualElement2.hasValue(key2);
  });
  var numNewValues = newValueKeys.length;
  if (!numNewValues)
    return;
  for (var i3 = 0; i3 < numNewValues; i3++) {
    var key = newValueKeys[i3];
    var targetValue2 = target5[key];
    var value12 = null;
    if (Array.isArray(targetValue2)) {
      value12 = targetValue2[0];
    }
    if (value12 === null) {
      value12 = (_b = (_a = origin3[key]) !== null && _a !== void 0 ? _a : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target5[key];
    }
    if (value12 === void 0 || value12 === null)
      continue;
    if (typeof value12 === "string" && (isNumericalString(value12) || isZeroValueString(value12))) {
      value12 = parseFloat(value12);
    } else if (!findValueType(value12) && complex.test(targetValue2)) {
      value12 = getAnimatableNone2(key, targetValue2);
    }
    visualElement2.addValue(key, motionValue(value12));
    (_c = (_d = origin3)[key]) !== null && _c !== void 0 ? _c : _d[key] = value12;
    visualElement2.setBaseTarget(key, value12);
  }
}
function getOriginFromTransition(key, transition3) {
  if (!transition3)
    return;
  var valueTransition = transition3[key] || transition3["default"] || transition3;
  return valueTransition.from;
}
function getOrigin(target5, transition3, visualElement2) {
  var _a, _b;
  var origin3 = {};
  for (var key in target5) {
    origin3[key] = (_a = getOriginFromTransition(key, transition3)) !== null && _a !== void 0 ? _a : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
  }
  return origin3;
}

// node_modules/framer-motion/dist/es/render/utils/animation.mjs
function animateVisualElement(visualElement2, definition, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  visualElement2.notifyAnimationStart(definition);
  var animation;
  if (Array.isArray(definition)) {
    var animations2 = definition.map(function(variant) {
      return animateVariant(visualElement2, variant, options2);
    });
    animation = Promise.all(animations2);
  } else if (typeof definition === "string") {
    animation = animateVariant(visualElement2, definition, options2);
  } else {
    var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options2.custom) : definition;
    animation = animateTarget(visualElement2, resolvedDefinition, options2);
  }
  return animation.then(function() {
    return visualElement2.notifyAnimationComplete(definition);
  });
}
function animateVariant(visualElement2, variant, options2) {
  var _a;
  if (options2 === void 0) {
    options2 = {};
  }
  var resolved = resolveVariant(visualElement2, variant, options2.custom);
  var _b = (resolved || {}).transition, transition3 = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
  if (options2.transitionOverride) {
    transition3 = options2.transitionOverride;
  }
  var getAnimation2 = resolved ? function() {
    return animateTarget(visualElement2, resolved, options2);
  } : function() {
    return Promise.resolve();
  };
  var getChildAnimations = ((_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.size) ? function(forwardDelay) {
    if (forwardDelay === void 0) {
      forwardDelay = 0;
    }
    var _a2 = transition3.delayChildren, delayChildren = _a2 === void 0 ? 0 : _a2, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
    return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options2);
  } : function() {
    return Promise.resolve();
  };
  var when8 = transition3.when;
  if (when8) {
    var _c = __read(when8 === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first2 = _c[0], last4 = _c[1];
    return first2().then(last4);
  } else {
    return Promise.all([getAnimation2(), getChildAnimations(options2.delay)]);
  }
}
function animateTarget(visualElement2, definition, _a) {
  var _b;
  var _c = _a === void 0 ? {} : _a, _d = _c.delay, delay2 = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
  var _e = visualElement2.makeTargetAnimatable(definition), _f = _e.transition, transition3 = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e.transitionEnd, target5 = __rest(_e, ["transition", "transitionEnd"]);
  if (transitionOverride)
    transition3 = transitionOverride;
  var animations2 = [];
  var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
  for (var key in target5) {
    var value12 = visualElement2.getValue(key);
    var valueTarget = target5[key];
    if (!value12 || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
      continue;
    }
    var valueTransition = __assign({ delay: delay2 }, transition3);
    if (visualElement2.shouldReduceMotion && isTransformProp(key)) {
      valueTransition = __assign(__assign({}, valueTransition), { type: false, delay: 0 });
    }
    var animation = startAnimation(key, value12, valueTarget, valueTransition);
    animations2.push(animation);
  }
  return Promise.all(animations2).then(function() {
    transitionEnd && setTarget5(visualElement2, transitionEnd);
  });
}
function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options2) {
  if (delayChildren === void 0) {
    delayChildren = 0;
  }
  if (staggerChildren === void 0) {
    staggerChildren = 0;
  }
  if (staggerDirection === void 0) {
    staggerDirection = 1;
  }
  var animations2 = [];
  var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
  var generateStaggerDuration = staggerDirection === 1 ? function(i3) {
    if (i3 === void 0) {
      i3 = 0;
    }
    return i3 * staggerChildren;
  } : function(i3) {
    if (i3 === void 0) {
      i3 = 0;
    }
    return maxStaggerDuration - i3 * staggerChildren;
  };
  Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i3) {
    animations2.push(animateVariant(child, variant, __assign(__assign({}, options2), { delay: delayChildren + generateStaggerDuration(i3) })).then(function() {
      return child.notifyAnimationComplete(variant);
    }));
  });
  return Promise.all(animations2);
}
function sortByTreeOrder(a3, b3) {
  return a3.sortNodePosition(b3);
}
function shouldBlockAnimation(_a, key) {
  var protectedKeys = _a.protectedKeys, needsAnimating = _a.needsAnimating;
  var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
  needsAnimating[key] = false;
  return shouldBlock;
}

// node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
var variantPriorityOrder = [
  AnimationType.Animate,
  AnimationType.InView,
  AnimationType.Focus,
  AnimationType.Hover,
  AnimationType.Tap,
  AnimationType.Drag,
  AnimationType.Exit
];
var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();
var numAnimationTypes = variantPriorityOrder.length;
function animateList(visualElement2) {
  return function(animations2) {
    return Promise.all(animations2.map(function(_a) {
      var animation = _a.animation, options2 = _a.options;
      return animateVisualElement(visualElement2, animation, options2);
    }));
  };
}
function createAnimationState(visualElement2) {
  var animate6 = animateList(visualElement2);
  var state3 = createState();
  var allAnimatedKeys = {};
  var isInitialRender = true;
  var buildResolvedTypeValues = function(acc, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    if (resolved) {
      resolved.transition;
      var transitionEnd = resolved.transitionEnd, target5 = __rest(resolved, ["transition", "transitionEnd"]);
      acc = __assign(__assign(__assign({}, acc), target5), transitionEnd);
    }
    return acc;
  };
  function isAnimated(key) {
    return allAnimatedKeys[key] !== void 0;
  }
  function setAnimateFunction(makeAnimator) {
    animate6 = makeAnimator(visualElement2);
  }
  function animateChanges(options2, changedActiveType) {
    var _a;
    var props = visualElement2.getProps();
    var context = visualElement2.getVariantContext(true) || {};
    var animations2 = [];
    var removedKeys = /* @__PURE__ */ new Set();
    var encounteredKeys = {};
    var removedVariantIndex = Infinity;
    var _loop_1 = function(i4) {
      var type = reversePriorityOrder[i4];
      var typeState = state3[type];
      var prop2 = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];
      var propIsVariant = isVariantLabel(prop2);
      var activeDelta = type === changedActiveType ? typeState.isActive : null;
      if (activeDelta === false)
        removedVariantIndex = i4;
      var isInherited = prop2 === context[type] && prop2 !== props[type] && propIsVariant;
      if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
        isInherited = false;
      }
      typeState.protectedKeys = __assign({}, encounteredKeys);
      if (!typeState.isActive && activeDelta === null || !prop2 && !typeState.prevProp || isAnimationControls(prop2) || typeof prop2 === "boolean") {
        return "continue";
      }
      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop2);
      var shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i4 > removedVariantIndex && propIsVariant;
      var definitionList = Array.isArray(prop2) ? prop2 : [prop2];
      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
      if (activeDelta === false)
        resolvedValues = {};
      var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
      var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
      var markToAnimate = function(key2) {
        shouldAnimateType = true;
        removedKeys.delete(key2);
        typeState.needsAnimating[key2] = true;
      };
      for (var key in allKeys) {
        var next = resolvedValues[key];
        var prev = prevResolvedValues[key];
        if (encounteredKeys.hasOwnProperty(key))
          continue;
        if (next !== prev) {
          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {
            if (!shallowCompare(next, prev) || variantDidChange) {
              markToAnimate(key);
            } else {
              typeState.protectedKeys[key] = true;
            }
          } else if (next !== void 0) {
            markToAnimate(key);
          } else {
            removedKeys.add(key);
          }
        } else if (next !== void 0 && removedKeys.has(key)) {
          markToAnimate(key);
        } else {
          typeState.protectedKeys[key] = true;
        }
      }
      typeState.prevProp = prop2;
      typeState.prevResolvedValues = resolvedValues;
      if (typeState.isActive) {
        encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
      }
      if (isInitialRender && visualElement2.blockInitialAnimation) {
        shouldAnimateType = false;
      }
      if (shouldAnimateType && !isInherited) {
        animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
          return {
            animation,
            options: __assign({ type }, options2)
          };
        })), false));
      }
    };
    for (var i3 = 0; i3 < numAnimationTypes; i3++) {
      _loop_1(i3);
    }
    allAnimatedKeys = __assign({}, encounteredKeys);
    if (removedKeys.size) {
      var fallbackAnimation_1 = {};
      removedKeys.forEach(function(key) {
        var fallbackTarget = visualElement2.getBaseTarget(key);
        if (fallbackTarget !== void 0) {
          fallbackAnimation_1[key] = fallbackTarget;
        }
      });
      animations2.push({ animation: fallbackAnimation_1 });
    }
    var shouldAnimate = Boolean(animations2.length);
    if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
      shouldAnimate = false;
    }
    isInitialRender = false;
    return shouldAnimate ? animate6(animations2) : Promise.resolve();
  }
  function setActive(type, isActive, options2) {
    var _a;
    if (state3[type].isActive === isActive)
      return Promise.resolve();
    (_a = visualElement2.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function(child) {
      var _a2;
      return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
    });
    state3[type].isActive = isActive;
    var animations2 = animateChanges(options2, type);
    for (var key in state3) {
      state3[key].protectedKeys = {};
    }
    return animations2;
  }
  return {
    isAnimated,
    animateChanges,
    setActive,
    setAnimateFunction,
    getState: function() {
      return state3;
    }
  };
}
function checkVariantsDidChange(prev, next) {
  if (typeof next === "string") {
    return next !== prev;
  } else if (isVariantLabels(next)) {
    return !shallowCompare(next, prev);
  }
  return false;
}
function createTypeState(isActive) {
  if (isActive === void 0) {
    isActive = false;
  }
  return {
    isActive,
    protectedKeys: {},
    needsAnimating: {},
    prevResolvedValues: {}
  };
}
function createState() {
  var _a;
  return _a = {}, _a[AnimationType.Animate] = createTypeState(true), _a[AnimationType.InView] = createTypeState(), _a[AnimationType.Hover] = createTypeState(), _a[AnimationType.Tap] = createTypeState(), _a[AnimationType.Drag] = createTypeState(), _a[AnimationType.Focus] = createTypeState(), _a[AnimationType.Exit] = createTypeState(), _a;
}

// node_modules/framer-motion/dist/es/motion/features/animations.mjs
var animations = {
  animation: makeRenderlessComponent(function(_a) {
    var visualElement2 = _a.visualElement, animate6 = _a.animate;
    visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
    if (isAnimationControls(animate6)) {
      (0, import_react30.useEffect)(function() {
        return animate6.subscribe(visualElement2);
      }, [animate6]);
    }
  }),
  exit: makeRenderlessComponent(function(props) {
    var custom2 = props.custom, visualElement2 = props.visualElement;
    var _a = __read(usePresence(), 2), isPresent = _a[0], safeToRemove = _a[1];
    var presenceContext = (0, import_react30.useContext)(PresenceContext);
    (0, import_react30.useEffect)(function() {
      var _a2, _b;
      visualElement2.isPresent = isPresent;
      var animation = (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom2 });
      !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));
    }, [isPresent]);
  })
};

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
var import_react31 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var import_hey_listen8 = __toESM(require_dist(), 1);

// node_modules/framer-motion/dist/es/gestures/PanSession.mjs
var PanSession = function() {
  function PanSession2(event, handlers, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, transformPagePoint = _b.transformPagePoint;
    this.startEvent = null;
    this.lastMoveEvent = null;
    this.lastMoveEventInfo = null;
    this.handlers = {};
    this.updatePoint = function() {
      if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
        return;
      var info3 = getPanInfo(_this.lastMoveEventInfo, _this.history);
      var isPanStarted = _this.startEvent !== null;
      var isDistancePastThreshold = distance(info3.offset, { x: 0, y: 0 }) >= 3;
      if (!isPanStarted && !isDistancePastThreshold)
        return;
      var point2 = info3.point;
      var timestamp2 = getFrameData().timestamp;
      _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
      var _a2 = _this.handlers, onStart = _a2.onStart, onMove = _a2.onMove;
      if (!isPanStarted) {
        onStart && onStart(_this.lastMoveEvent, info3);
        _this.startEvent = _this.lastMoveEvent;
      }
      onMove && onMove(_this.lastMoveEvent, info3);
    };
    this.handlePointerMove = function(event2, info3) {
      _this.lastMoveEvent = event2;
      _this.lastMoveEventInfo = transformPoint(info3, _this.transformPagePoint);
      if (isMouseEvent(event2) && event2.buttons === 0) {
        _this.handlePointerUp(event2, info3);
        return;
      }
      es_default.update(_this.updatePoint, true);
    };
    this.handlePointerUp = function(event2, info3) {
      _this.end();
      var _a2 = _this.handlers, onEnd2 = _a2.onEnd, onSessionEnd = _a2.onSessionEnd;
      var panInfo = getPanInfo(transformPoint(info3, _this.transformPagePoint), _this.history);
      if (_this.startEvent && onEnd2) {
        onEnd2(event2, panInfo);
      }
      onSessionEnd && onSessionEnd(event2, panInfo);
    };
    if (isTouchEvent(event) && event.touches.length > 1)
      return;
    this.handlers = handlers;
    this.transformPagePoint = transformPagePoint;
    var info2 = extractEventInfo(event);
    var initialInfo = transformPoint(info2, this.transformPagePoint);
    var point = initialInfo.point;
    var timestamp = getFrameData().timestamp;
    this.history = [__assign(__assign({}, point), { timestamp })];
    var onSessionStart = handlers.onSessionStart;
    onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
    this.removeListeners = pipe3(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
  }
  PanSession2.prototype.updateHandlers = function(handlers) {
    this.handlers = handlers;
  };
  PanSession2.prototype.end = function() {
    this.removeListeners && this.removeListeners();
    cancelSync.update(this.updatePoint);
  };
  return PanSession2;
}();
function transformPoint(info2, transformPagePoint) {
  return transformPagePoint ? { point: transformPagePoint(info2.point) } : info2;
}
function subtractPoint(a3, b3) {
  return { x: a3.x - b3.x, y: a3.y - b3.y };
}
function getPanInfo(_a, history2) {
  var point = _a.point;
  return {
    point,
    delta: subtractPoint(point, lastDevicePoint(history2)),
    offset: subtractPoint(point, startDevicePoint(history2)),
    velocity: getVelocity2(history2, 0.1)
  };
}
function startDevicePoint(history2) {
  return history2[0];
}
function lastDevicePoint(history2) {
  return history2[history2.length - 1];
}
function getVelocity2(history2, timeDelta) {
  if (history2.length < 2) {
    return { x: 0, y: 0 };
  }
  var i3 = history2.length - 1;
  var timestampedPoint = null;
  var lastPoint = lastDevicePoint(history2);
  while (i3 >= 0) {
    timestampedPoint = history2[i3];
    if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
      break;
    }
    i3--;
  }
  if (!timestampedPoint) {
    return { x: 0, y: 0 };
  }
  var time3 = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
  if (time3 === 0) {
    return { x: 0, y: 0 };
  }
  var currentVelocity = {
    x: (lastPoint.x - timestampedPoint.x) / time3,
    y: (lastPoint.y - timestampedPoint.y) / time3
  };
  if (currentVelocity.x === Infinity) {
    currentVelocity.x = 0;
  }
  if (currentVelocity.y === Infinity) {
    currentVelocity.y = 0;
  }
  return currentVelocity;
}

// node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
function applyConstraints(point, _a, elastic) {
  var min6 = _a.min, max7 = _a.max;
  if (min6 !== void 0 && point < min6) {
    point = elastic ? mix(min6, point, elastic.min) : Math.max(point, min6);
  } else if (max7 !== void 0 && point > max7) {
    point = elastic ? mix(max7, point, elastic.max) : Math.min(point, max7);
  }
  return point;
}
function calcRelativeAxisConstraints(axis, min6, max7) {
  return {
    min: min6 !== void 0 ? axis.min + min6 : void 0,
    max: max7 !== void 0 ? axis.max + max7 - (axis.max - axis.min) : void 0
  };
}
function calcRelativeConstraints(layoutBox, _a) {
  var top7 = _a.top, left4 = _a.left, bottom7 = _a.bottom, right3 = _a.right;
  return {
    x: calcRelativeAxisConstraints(layoutBox.x, left4, right3),
    y: calcRelativeAxisConstraints(layoutBox.y, top7, bottom7)
  };
}
function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
  var _a;
  var min6 = constraintsAxis.min - layoutAxis.min;
  var max7 = constraintsAxis.max - layoutAxis.max;
  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
    _a = __read([max7, min6], 2), min6 = _a[0], max7 = _a[1];
  }
  return { min: min6, max: max7 };
}
function calcViewportConstraints(layoutBox, constraintsBox) {
  return {
    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
  };
}
function calcOrigin2(source3, target5) {
  var origin3 = 0.5;
  var sourceLength = calcLength(source3);
  var targetLength = calcLength(target5);
  if (targetLength > sourceLength) {
    origin3 = progress2(target5.min, target5.max - sourceLength, source3.min);
  } else if (sourceLength > targetLength) {
    origin3 = progress2(source3.min, source3.max - targetLength, target5.min);
  }
  return clamp3(0, 1, origin3);
}
function rebaseAxisConstraints(layout2, constraints) {
  var relativeConstraints = {};
  if (constraints.min !== void 0) {
    relativeConstraints.min = constraints.min - layout2.min;
  }
  if (constraints.max !== void 0) {
    relativeConstraints.max = constraints.max - layout2.min;
  }
  return relativeConstraints;
}
var defaultElastic = 0.35;
function resolveDragElastic(dragElastic2) {
  if (dragElastic2 === void 0) {
    dragElastic2 = defaultElastic;
  }
  if (dragElastic2 === false) {
    dragElastic2 = 0;
  } else if (dragElastic2 === true) {
    dragElastic2 = defaultElastic;
  }
  return {
    x: resolveAxisElastic(dragElastic2, "left", "right"),
    y: resolveAxisElastic(dragElastic2, "top", "bottom")
  };
}
function resolveAxisElastic(dragElastic2, minLabel, maxLabel) {
  return {
    min: resolvePointElastic(dragElastic2, minLabel),
    max: resolvePointElastic(dragElastic2, maxLabel)
  };
}
function resolvePointElastic(dragElastic2, label6) {
  var _a;
  return typeof dragElastic2 === "number" ? dragElastic2 : (_a = dragElastic2[label6]) !== null && _a !== void 0 ? _a : 0;
}

// node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
function convertBoundingBoxToBox(_a) {
  var top7 = _a.top, left4 = _a.left, right3 = _a.right, bottom7 = _a.bottom;
  return {
    x: { min: left4, max: right3 },
    y: { min: top7, max: bottom7 }
  };
}
function convertBoxToBoundingBox(_a) {
  var x = _a.x, y = _a.y;
  return { top: y.min, right: x.max, bottom: y.max, left: x.min };
}
function transformBoxPoints(point, transformPoint2) {
  if (!transformPoint2)
    return point;
  var topLeft = transformPoint2({ x: point.left, y: point.top });
  var bottomRight = transformPoint2({ x: point.right, y: point.bottom });
  return {
    top: topLeft.y,
    left: topLeft.x,
    bottom: bottomRight.y,
    right: bottomRight.x
  };
}

// node_modules/framer-motion/dist/es/projection/utils/measure.mjs
function measureViewportBox(instance, transformPoint2) {
  return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
}
function measurePageBox(element3, rootProjectionNode2, transformPagePoint) {
  var viewportBox = measureViewportBox(element3, transformPagePoint);
  var scroll3 = rootProjectionNode2.scroll;
  if (scroll3) {
    translateAxis(viewportBox.x, scroll3.x);
    translateAxis(viewportBox.y, scroll3.y);
  }
  return viewportBox;
}

// node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
var elementDragControls = /* @__PURE__ */ new WeakMap();
var VisualElementDragControls = function() {
  function VisualElementDragControls2(visualElement2) {
    this.openGlobalLock = null;
    this.isDragging = false;
    this.currentDirection = null;
    this.originPoint = { x: 0, y: 0 };
    this.constraints = false;
    this.hasMutatedConstraints = false;
    this.elastic = createBox();
    this.visualElement = visualElement2;
  }
  VisualElementDragControls2.prototype.start = function(originEvent, _a) {
    var _this = this;
    var _b = _a === void 0 ? {} : _a, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;
    if (this.visualElement.isPresent === false)
      return;
    var onSessionStart = function(event) {
      _this.stopAnimation();
      if (snapToCursor) {
        _this.snapToCursor(extractEventInfo(event, "page").point);
      }
    };
    var onStart = function(event, info2) {
      var _a2;
      var _b2 = _this.getProps(), drag3 = _b2.drag, dragPropagation2 = _b2.dragPropagation, onDragStart2 = _b2.onDragStart;
      if (drag3 && !dragPropagation2) {
        if (_this.openGlobalLock)
          _this.openGlobalLock();
        _this.openGlobalLock = getGlobalLock(drag3);
        if (!_this.openGlobalLock)
          return;
      }
      _this.isDragging = true;
      _this.currentDirection = null;
      _this.resolveConstraints();
      if (_this.visualElement.projection) {
        _this.visualElement.projection.isAnimationBlocked = true;
        _this.visualElement.projection.target = void 0;
      }
      eachAxis(function(axis) {
        var _a3, _b3;
        var current = _this.getAxisMotionValue(axis).get() || 0;
        if (percent2.test(current)) {
          var measuredAxis = (_b3 = (_a3 = _this.visualElement.projection) === null || _a3 === void 0 ? void 0 : _a3.layout) === null || _b3 === void 0 ? void 0 : _b3.actual[axis];
          if (measuredAxis) {
            var length_1 = calcLength(measuredAxis);
            current = length_1 * (parseFloat(current) / 100);
          }
        }
        _this.originPoint[axis] = current;
      });
      onDragStart2 === null || onDragStart2 === void 0 ? void 0 : onDragStart2(event, info2);
      (_a2 = _this.visualElement.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Drag, true);
    };
    var onMove = function(event, info2) {
      var _a2 = _this.getProps(), dragPropagation2 = _a2.dragPropagation, dragDirectionLock = _a2.dragDirectionLock, onDirectionLock = _a2.onDirectionLock, onDrag2 = _a2.onDrag;
      if (!dragPropagation2 && !_this.openGlobalLock)
        return;
      var offset = info2.offset;
      if (dragDirectionLock && _this.currentDirection === null) {
        _this.currentDirection = getCurrentDirection(offset);
        if (_this.currentDirection !== null) {
          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);
        }
        return;
      }
      _this.updateAxis("x", info2.point, offset);
      _this.updateAxis("y", info2.point, offset);
      _this.visualElement.syncRender();
      onDrag2 === null || onDrag2 === void 0 ? void 0 : onDrag2(event, info2);
    };
    var onSessionEnd = function(event, info2) {
      return _this.stop(event, info2);
    };
    this.panSession = new PanSession(originEvent, {
      onSessionStart,
      onStart,
      onMove,
      onSessionEnd
    }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  };
  VisualElementDragControls2.prototype.stop = function(event, info2) {
    var isDragging = this.isDragging;
    this.cancel();
    if (!isDragging)
      return;
    var velocity = info2.velocity;
    this.startAnimation(velocity);
    var onDragEnd2 = this.getProps().onDragEnd;
    onDragEnd2 === null || onDragEnd2 === void 0 ? void 0 : onDragEnd2(event, info2);
  };
  VisualElementDragControls2.prototype.cancel = function() {
    var _a, _b;
    this.isDragging = false;
    if (this.visualElement.projection) {
      this.visualElement.projection.isAnimationBlocked = false;
    }
    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();
    this.panSession = void 0;
    var dragPropagation2 = this.getProps().dragPropagation;
    if (!dragPropagation2 && this.openGlobalLock) {
      this.openGlobalLock();
      this.openGlobalLock = null;
    }
    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
  };
  VisualElementDragControls2.prototype.updateAxis = function(axis, _point, offset) {
    var drag3 = this.getProps().drag;
    if (!offset || !shouldDrag(axis, drag3, this.currentDirection))
      return;
    var axisValue = this.getAxisMotionValue(axis);
    var next = this.originPoint[axis] + offset[axis];
    if (this.constraints && this.constraints[axis]) {
      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);
    }
    axisValue.set(next);
  };
  VisualElementDragControls2.prototype.resolveConstraints = function() {
    var _this = this;
    var _a = this.getProps(), dragConstraints2 = _a.dragConstraints, dragElastic2 = _a.dragElastic;
    var layout2 = (this.visualElement.projection || {}).layout;
    var prevConstraints = this.constraints;
    if (dragConstraints2 && isRefObject(dragConstraints2)) {
      if (!this.constraints) {
        this.constraints = this.resolveRefConstraints();
      }
    } else {
      if (dragConstraints2 && layout2) {
        this.constraints = calcRelativeConstraints(layout2.actual, dragConstraints2);
      } else {
        this.constraints = false;
      }
    }
    this.elastic = resolveDragElastic(dragElastic2);
    if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
      eachAxis(function(axis) {
        if (_this.getAxisMotionValue(axis)) {
          _this.constraints[axis] = rebaseAxisConstraints(layout2.actual[axis], _this.constraints[axis]);
        }
      });
    }
  };
  VisualElementDragControls2.prototype.resolveRefConstraints = function() {
    var _a = this.getProps(), constraints = _a.dragConstraints, onMeasureDragConstraints = _a.onMeasureDragConstraints;
    if (!constraints || !isRefObject(constraints))
      return false;
    var constraintsElement = constraints.current;
    (0, import_hey_listen8.invariant)(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    var projection = this.visualElement.projection;
    if (!projection || !projection.layout)
      return false;
    var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
    var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);
    if (onMeasureDragConstraints) {
      var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
      this.hasMutatedConstraints = !!userConstraints;
      if (userConstraints) {
        measuredConstraints = convertBoundingBoxToBox(userConstraints);
      }
    }
    return measuredConstraints;
  };
  VisualElementDragControls2.prototype.startAnimation = function(velocity) {
    var _this = this;
    var _a = this.getProps(), drag3 = _a.drag, dragMomentum2 = _a.dragMomentum, dragElastic2 = _a.dragElastic, dragTransition = _a.dragTransition, dragSnapToOrigin = _a.dragSnapToOrigin, onDragTransitionEnd = _a.onDragTransitionEnd;
    var constraints = this.constraints || {};
    var momentumAnimations = eachAxis(function(axis) {
      var _a2;
      if (!shouldDrag(axis, drag3, _this.currentDirection)) {
        return;
      }
      var transition3 = (_a2 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a2 !== void 0 ? _a2 : {};
      if (dragSnapToOrigin)
        transition3 = { min: 0, max: 0 };
      var bounceStiffness = dragElastic2 ? 200 : 1e6;
      var bounceDamping = dragElastic2 ? 40 : 1e7;
      var inertia2 = __assign(__assign({ type: "inertia", velocity: dragMomentum2 ? velocity[axis] : 0, bounceStiffness, bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition3);
      return _this.startAxisValueAnimation(axis, inertia2);
    });
    return Promise.all(momentumAnimations).then(onDragTransitionEnd);
  };
  VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
    var axisValue = this.getAxisMotionValue(axis);
    return startAnimation(axis, axisValue, 0, transition3);
  };
  VisualElementDragControls2.prototype.stopAnimation = function() {
    var _this = this;
    eachAxis(function(axis) {
      return _this.getAxisMotionValue(axis).stop();
    });
  };
  VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
    var _a, _b;
    var dragKey = "_drag" + axis.toUpperCase();
    var externalMotionValue = this.visualElement.getProps()[dragKey];
    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);
  };
  VisualElementDragControls2.prototype.snapToCursor = function(point) {
    var _this = this;
    eachAxis(function(axis) {
      var drag3 = _this.getProps().drag;
      if (!shouldDrag(axis, drag3, _this.currentDirection))
        return;
      var projection = _this.visualElement.projection;
      var axisValue = _this.getAxisMotionValue(axis);
      if (projection && projection.layout) {
        var _a = projection.layout.actual[axis], min6 = _a.min, max7 = _a.max;
        axisValue.set(point[axis] - mix(min6, max7, 0.5));
      }
    });
  };
  VisualElementDragControls2.prototype.scalePositionWithinConstraints = function() {
    var _this = this;
    var _a;
    var _b = this.getProps(), drag3 = _b.drag, dragConstraints2 = _b.dragConstraints;
    var projection = this.visualElement.projection;
    if (!isRefObject(dragConstraints2) || !projection || !this.constraints)
      return;
    this.stopAnimation();
    var boxProgress = { x: 0, y: 0 };
    eachAxis(function(axis) {
      var axisValue = _this.getAxisMotionValue(axis);
      if (axisValue) {
        var latest = axisValue.get();
        boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, _this.constraints[axis]);
      }
    });
    var transformTemplate = this.visualElement.getProps().transformTemplate;
    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
    projection.updateLayout();
    this.resolveConstraints();
    eachAxis(function(axis) {
      if (!shouldDrag(axis, drag3, null))
        return;
      var axisValue = _this.getAxisMotionValue(axis);
      var _a2 = _this.constraints[axis], min6 = _a2.min, max7 = _a2.max;
      axisValue.set(mix(min6, max7, boxProgress[axis]));
    });
  };
  VisualElementDragControls2.prototype.addListeners = function() {
    var _this = this;
    var _a;
    elementDragControls.set(this.visualElement, this);
    var element3 = this.visualElement.getInstance();
    var stopPointerListener = addPointerEvent(element3, "pointerdown", function(event) {
      var _a2 = _this.getProps(), drag3 = _a2.drag, _b = _a2.dragListener, dragListener = _b === void 0 ? true : _b;
      drag3 && dragListener && _this.start(event);
    });
    var measureDragConstraints = function() {
      var dragConstraints2 = _this.getProps().dragConstraints;
      if (isRefObject(dragConstraints2)) {
        _this.constraints = _this.resolveRefConstraints();
      }
    };
    var projection = this.visualElement.projection;
    var stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
    if (projection && !projection.layout) {
      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();
      projection.updateLayout();
    }
    measureDragConstraints();
    var stopResizeListener = addDomEvent(window, "resize", function() {
      return _this.scalePositionWithinConstraints();
    });
    projection.addEventListener("didUpdate", function(_a2) {
      var delta = _a2.delta, hasLayoutChanged = _a2.hasLayoutChanged;
      if (_this.isDragging && hasLayoutChanged) {
        eachAxis(function(axis) {
          var motionValue2 = _this.getAxisMotionValue(axis);
          if (!motionValue2)
            return;
          _this.originPoint[axis] += delta[axis].translate;
          motionValue2.set(motionValue2.get() + delta[axis].translate);
        });
        _this.visualElement.syncRender();
      }
    });
    return function() {
      stopResizeListener();
      stopPointerListener();
      stopMeasureLayoutListener();
    };
  };
  VisualElementDragControls2.prototype.getProps = function() {
    var props = this.visualElement.getProps();
    var _a = props.drag, drag3 = _a === void 0 ? false : _a, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation2 = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints2 = _d === void 0 ? false : _d, _e = props.dragElastic, dragElastic2 = _e === void 0 ? defaultElastic : _e, _f = props.dragMomentum, dragMomentum2 = _f === void 0 ? true : _f;
    return __assign(__assign({}, props), { drag: drag3, dragDirectionLock, dragPropagation: dragPropagation2, dragConstraints: dragConstraints2, dragElastic: dragElastic2, dragMomentum: dragMomentum2 });
  };
  return VisualElementDragControls2;
}();
function shouldDrag(direction, drag3, currentDirection) {
  return (drag3 === true || drag3 === direction) && (currentDirection === null || currentDirection === direction);
}
function getCurrentDirection(offset, lockThreshold) {
  if (lockThreshold === void 0) {
    lockThreshold = 10;
  }
  var direction = null;
  if (Math.abs(offset.y) > lockThreshold) {
    direction = "y";
  } else if (Math.abs(offset.x) > lockThreshold) {
    direction = "x";
  }
  return direction;
}

// node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
function useDrag(props) {
  var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
  var dragControls = useConstant(function() {
    return new VisualElementDragControls(visualElement2);
  });
  (0, import_react31.useEffect)(function() {
    return groupDragControls && groupDragControls.subscribe(dragControls);
  }, [dragControls, groupDragControls]);
  (0, import_react31.useEffect)(function() {
    return dragControls.addListeners();
  }, [dragControls]);
}

// node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs
var import_react32 = __toESM(require_react(), 1);
function usePanGesture(_a) {
  var onPan2 = _a.onPan, onPanStart2 = _a.onPanStart, onPanEnd2 = _a.onPanEnd, onPanSessionStart = _a.onPanSessionStart, visualElement2 = _a.visualElement;
  var hasPanEvents = onPan2 || onPanStart2 || onPanEnd2 || onPanSessionStart;
  var panSession = (0, import_react32.useRef)(null);
  var transformPagePoint = (0, import_react32.useContext)(MotionConfigContext).transformPagePoint;
  var handlers = {
    onSessionStart: onPanSessionStart,
    onStart: onPanStart2,
    onMove: onPan2,
    onEnd: function(event, info2) {
      panSession.current = null;
      onPanEnd2 && onPanEnd2(event, info2);
    }
  };
  (0, import_react32.useEffect)(function() {
    if (panSession.current !== null) {
      panSession.current.updateHandlers(handlers);
    }
  });
  function onPointerDown(event) {
    panSession.current = new PanSession(event, handlers, {
      transformPagePoint
    });
  }
  usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
  useUnmountEffect(function() {
    return panSession.current && panSession.current.end();
  });
}

// node_modules/framer-motion/dist/es/motion/features/drag.mjs
var drag = {
  pan: makeRenderlessComponent(usePanGesture),
  drag: makeRenderlessComponent(useDrag)
};

// node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs
var names = [
  "LayoutMeasure",
  "BeforeLayoutMeasure",
  "LayoutUpdate",
  "ViewportBoxUpdate",
  "Update",
  "Render",
  "AnimationComplete",
  "LayoutAnimationComplete",
  "AnimationStart",
  "LayoutAnimationStart",
  "SetAxisTarget",
  "Unmount"
];
function createLifecycles() {
  var managers = names.map(function() {
    return new SubscriptionManager();
  });
  var propSubscriptions = {};
  var lifecycles = {
    clearAllListeners: function() {
      return managers.forEach(function(manager) {
        return manager.clear();
      });
    },
    updatePropListeners: function(props) {
      names.forEach(function(name15) {
        var _a;
        var on7 = "on" + name15;
        var propListener = props[on7];
        (_a = propSubscriptions[name15]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);
        if (propListener) {
          propSubscriptions[name15] = lifecycles[on7](propListener);
        }
      });
    }
  };
  managers.forEach(function(manager, i3) {
    lifecycles["on" + names[i3]] = function(handler2) {
      return manager.add(handler2);
    };
    lifecycles["notify" + names[i3]] = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return manager.notify.apply(manager, __spreadArray([], __read(args), false));
    };
  });
  return lifecycles;
}

// node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
function updateMotionValuesFromProps(element3, next, prev) {
  var _a;
  for (var key in next) {
    var nextValue = next[key];
    var prevValue = prev[key];
    if (isMotionValue(nextValue)) {
      element3.addValue(key, nextValue);
      if (process.env.NODE_ENV === "development") {
        warnOnce(nextValue.version === "6.3.10", "Attempting to mix Framer Motion versions ".concat(nextValue.version, " with 6.3.10 may not work as expected."));
      }
    } else if (isMotionValue(prevValue)) {
      element3.addValue(key, motionValue(nextValue));
    } else if (prevValue !== nextValue) {
      if (element3.hasValue(key)) {
        var existingValue = element3.getValue(key);
        !existingValue.hasAnimated && existingValue.set(nextValue);
      } else {
        element3.addValue(key, motionValue((_a = element3.getStaticValue(key)) !== null && _a !== void 0 ? _a : nextValue));
      }
    }
  }
  for (var key in prev) {
    if (next[key] === void 0)
      element3.removeValue(key);
  }
  return next;
}

// node_modules/framer-motion/dist/es/render/index.mjs
var visualElement = function(_a) {
  var _b = _a.treeType, treeType = _b === void 0 ? "" : _b, build2 = _a.build, getBaseTarget = _a.getBaseTarget, makeTargetAnimatable = _a.makeTargetAnimatable, measureViewportBox2 = _a.measureViewportBox, renderInstance = _a.render, readValueFromInstance = _a.readValueFromInstance, removeValueFromRenderState = _a.removeValueFromRenderState, sortNodePosition = _a.sortNodePosition, scrapeMotionValuesFromProps3 = _a.scrapeMotionValuesFromProps;
  return function(_a2, options2) {
    var parent2 = _a2.parent, props = _a2.props, presenceId = _a2.presenceId, blockInitialAnimation = _a2.blockInitialAnimation, visualState = _a2.visualState, shouldReduceMotion = _a2.shouldReduceMotion;
    if (options2 === void 0) {
      options2 = {};
    }
    var isMounted = false;
    var latestValues = visualState.latestValues, renderState = visualState.renderState;
    var instance;
    var lifecycles = createLifecycles();
    var values2 = /* @__PURE__ */ new Map();
    var valueSubscriptions = /* @__PURE__ */ new Map();
    var prevMotionValues = {};
    var baseTarget = __assign({}, latestValues);
    var removeFromVariantTree;
    function render() {
      if (!instance || !isMounted)
        return;
      triggerBuild();
      renderInstance(instance, renderState, props.style, element3.projection);
    }
    function triggerBuild() {
      build2(element3, renderState, latestValues, options2, props);
    }
    function update() {
      lifecycles.notifyUpdate(latestValues);
    }
    function bindToMotionValue(key2, value13) {
      var removeOnChange = value13.onChange(function(latestValue) {
        latestValues[key2] = latestValue;
        props.onUpdate && es_default.update(update, false, true);
      });
      var removeOnRenderRequest = value13.onRenderRequest(element3.scheduleRender);
      valueSubscriptions.set(key2, function() {
        removeOnChange();
        removeOnRenderRequest();
      });
    }
    var initialMotionValues = scrapeMotionValuesFromProps3(props);
    for (var key in initialMotionValues) {
      var value12 = initialMotionValues[key];
      if (latestValues[key] !== void 0 && isMotionValue(value12)) {
        value12.set(latestValues[key], false);
      }
    }
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    var element3 = __assign(__assign({
      treeType,
      current: null,
      depth: parent2 ? parent2.depth + 1 : 0,
      parent: parent2,
      children: /* @__PURE__ */ new Set(),
      presenceId,
      shouldReduceMotion,
      variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
      isVisible: void 0,
      manuallyAnimateOnMount: Boolean(parent2 === null || parent2 === void 0 ? void 0 : parent2.isMounted()),
      blockInitialAnimation,
      isMounted: function() {
        return Boolean(instance);
      },
      mount: function(newInstance) {
        isMounted = true;
        instance = element3.current = newInstance;
        if (element3.projection) {
          element3.projection.mount(newInstance);
        }
        if (isVariantNode && parent2 && !isControllingVariants) {
          removeFromVariantTree = parent2 === null || parent2 === void 0 ? void 0 : parent2.addVariantChild(element3);
        }
        values2.forEach(function(value13, key2) {
          return bindToMotionValue(key2, value13);
        });
        parent2 === null || parent2 === void 0 ? void 0 : parent2.children.add(element3);
        element3.setProps(props);
      },
      unmount: function() {
        var _a3;
        (_a3 = element3.projection) === null || _a3 === void 0 ? void 0 : _a3.unmount();
        cancelSync.update(update);
        cancelSync.render(render);
        valueSubscriptions.forEach(function(remove) {
          return remove();
        });
        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
        parent2 === null || parent2 === void 0 ? void 0 : parent2.children.delete(element3);
        lifecycles.clearAllListeners();
        instance = void 0;
        isMounted = false;
      },
      addVariantChild: function(child) {
        var _a3;
        var closestVariantNode = element3.getClosestVariantNode();
        if (closestVariantNode) {
          (_a3 = closestVariantNode.variantChildren) === null || _a3 === void 0 ? void 0 : _a3.add(child);
          return function() {
            return closestVariantNode.variantChildren.delete(child);
          };
        }
      },
      sortNodePosition: function(other) {
        if (!sortNodePosition || treeType !== other.treeType)
          return 0;
        return sortNodePosition(element3.getInstance(), other.getInstance());
      },
      getClosestVariantNode: function() {
        return isVariantNode ? element3 : parent2 === null || parent2 === void 0 ? void 0 : parent2.getClosestVariantNode();
      },
      getLayoutId: function() {
        return props.layoutId;
      },
      getInstance: function() {
        return instance;
      },
      getStaticValue: function(key2) {
        return latestValues[key2];
      },
      setStaticValue: function(key2, value13) {
        return latestValues[key2] = value13;
      },
      getLatestValues: function() {
        return latestValues;
      },
      setVisibility: function(visibility) {
        if (element3.isVisible === visibility)
          return;
        element3.isVisible = visibility;
        element3.scheduleRender();
      },
      makeTargetAnimatable: function(target5, canMutate) {
        if (canMutate === void 0) {
          canMutate = true;
        }
        return makeTargetAnimatable(element3, target5, props, canMutate);
      },
      measureViewportBox: function() {
        return measureViewportBox2(instance, props);
      },
      addValue: function(key2, value13) {
        if (element3.hasValue(key2))
          element3.removeValue(key2);
        values2.set(key2, value13);
        latestValues[key2] = value13.get();
        bindToMotionValue(key2, value13);
      },
      removeValue: function(key2) {
        var _a3;
        values2.delete(key2);
        (_a3 = valueSubscriptions.get(key2)) === null || _a3 === void 0 ? void 0 : _a3();
        valueSubscriptions.delete(key2);
        delete latestValues[key2];
        removeValueFromRenderState(key2, renderState);
      },
      hasValue: function(key2) {
        return values2.has(key2);
      },
      getValue: function(key2, defaultValue4) {
        var value13 = values2.get(key2);
        if (value13 === void 0 && defaultValue4 !== void 0) {
          value13 = motionValue(defaultValue4);
          element3.addValue(key2, value13);
        }
        return value13;
      },
      forEachValue: function(callback2) {
        return values2.forEach(callback2);
      },
      readValue: function(key2) {
        var _a3;
        return (_a3 = latestValues[key2]) !== null && _a3 !== void 0 ? _a3 : readValueFromInstance(instance, key2, options2);
      },
      setBaseTarget: function(key2, value13) {
        baseTarget[key2] = value13;
      },
      getBaseTarget: function(key2) {
        if (getBaseTarget) {
          var target5 = getBaseTarget(props, key2);
          if (target5 !== void 0 && !isMotionValue(target5))
            return target5;
        }
        return baseTarget[key2];
      }
    }, lifecycles), {
      build: function() {
        triggerBuild();
        return renderState;
      },
      scheduleRender: function() {
        es_default.render(render, false, true);
      },
      syncRender: render,
      setProps: function(newProps) {
        if (newProps.transformTemplate || props.transformTemplate) {
          element3.scheduleRender();
        }
        props = newProps;
        lifecycles.updatePropListeners(newProps);
        prevMotionValues = updateMotionValuesFromProps(element3, scrapeMotionValuesFromProps3(props), prevMotionValues);
      },
      getProps: function() {
        return props;
      },
      getVariant: function(name15) {
        var _a3;
        return (_a3 = props.variants) === null || _a3 === void 0 ? void 0 : _a3[name15];
      },
      getDefaultTransition: function() {
        return props.transition;
      },
      getTransformPagePoint: function() {
        return props.transformPagePoint;
      },
      getVariantContext: function(startAtParent) {
        if (startAtParent === void 0) {
          startAtParent = false;
        }
        if (startAtParent)
          return parent2 === null || parent2 === void 0 ? void 0 : parent2.getVariantContext();
        if (!isControllingVariants) {
          var context_1 = (parent2 === null || parent2 === void 0 ? void 0 : parent2.getVariantContext()) || {};
          if (props.initial !== void 0) {
            context_1.initial = props.initial;
          }
          return context_1;
        }
        var context = {};
        for (var i3 = 0; i3 < numVariantProps; i3++) {
          var name_1 = variantProps[i3];
          var prop2 = props[name_1];
          if (isVariantLabel(prop2) || prop2 === false) {
            context[name_1] = prop2;
          }
        }
        return context;
      }
    });
    return element3;
  };
};
var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder), false);
var numVariantProps = variantProps.length;

// node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
var import_hey_listen9 = __toESM(require_dist(), 1);
function isCSSVariable2(value12) {
  return typeof value12 === "string" && value12.startsWith("var(--");
}
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function parseCSSVariable(current) {
  var match4 = cssVariableRegex.exec(current);
  if (!match4)
    return [,];
  var _a = __read(match4, 3), token = _a[1], fallback = _a[2];
  return [token, fallback];
}
var maxDepth = 4;
function getVariableValue(current, element3, depth) {
  if (depth === void 0) {
    depth = 1;
  }
  (0, import_hey_listen9.invariant)(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "'.concat(current, '". This may indicate a circular fallback dependency.'));
  var _a = __read(parseCSSVariable(current), 2), token = _a[0], fallback = _a[1];
  if (!token)
    return;
  var resolved = window.getComputedStyle(element3).getPropertyValue(token);
  if (resolved) {
    return resolved.trim();
  } else if (isCSSVariable2(fallback)) {
    return getVariableValue(fallback, element3, depth + 1);
  } else {
    return fallback;
  }
}
function resolveCSSVariables(visualElement2, _a, transitionEnd) {
  var _b;
  var target5 = __rest(_a, []);
  var element3 = visualElement2.getInstance();
  if (!(element3 instanceof Element))
    return { target: target5, transitionEnd };
  if (transitionEnd) {
    transitionEnd = __assign({}, transitionEnd);
  }
  visualElement2.forEachValue(function(value12) {
    var current2 = value12.get();
    if (!isCSSVariable2(current2))
      return;
    var resolved2 = getVariableValue(current2, element3);
    if (resolved2)
      value12.set(resolved2);
  });
  for (var key in target5) {
    var current = target5[key];
    if (!isCSSVariable2(current))
      continue;
    var resolved = getVariableValue(current, element3);
    if (!resolved)
      continue;
    target5[key] = resolved;
    if (transitionEnd)
      (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
  }
  return { target: target5, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
var import_hey_listen10 = __toESM(require_dist(), 1);
var positionalKeys = /* @__PURE__ */ new Set([
  "width",
  "height",
  "top",
  "left",
  "right",
  "bottom",
  "x",
  "y"
]);
var isPositionalKey = function(key) {
  return positionalKeys.has(key);
};
var hasPositionalKey = function(target5) {
  return Object.keys(target5).some(isPositionalKey);
};
var setAndResetVelocity = function(value12, to2) {
  value12.set(to2, false);
  value12.set(to2);
};
var isNumOrPxType = function(v) {
  return v === number || v === px2;
};
var BoundingBoxDimension;
(function(BoundingBoxDimension2) {
  BoundingBoxDimension2["width"] = "width";
  BoundingBoxDimension2["height"] = "height";
  BoundingBoxDimension2["left"] = "left";
  BoundingBoxDimension2["right"] = "right";
  BoundingBoxDimension2["top"] = "top";
  BoundingBoxDimension2["bottom"] = "bottom";
})(BoundingBoxDimension || (BoundingBoxDimension = {}));
var getPosFromMatrix = function(matrix, pos) {
  return parseFloat(matrix.split(", ")[pos]);
};
var getTranslateFromMatrix = function(pos2, pos3) {
  return function(_bbox, _a) {
    var transform2 = _a.transform;
    if (transform2 === "none" || !transform2)
      return 0;
    var matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      var matrix = transform2.match(/^matrix\((.+)\)$/);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
};
var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
var nonTranslationalTransformKeys = transformProps.filter(function(key) {
  return !transformKeys.has(key);
});
function removeNonTranslationalTransform(visualElement2) {
  var removedTransforms = [];
  nonTranslationalTransformKeys.forEach(function(key) {
    var value12 = visualElement2.getValue(key);
    if (value12 !== void 0) {
      removedTransforms.push([key, value12.get()]);
      value12.set(key.startsWith("scale") ? 1 : 0);
    }
  });
  if (removedTransforms.length)
    visualElement2.syncRender();
  return removedTransforms;
}
var positionalValues = {
  width: function(_a, _b) {
    var x = _a.x;
    var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? "0" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? "0" : _d;
    return x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight);
  },
  height: function(_a, _b) {
    var y = _a.y;
    var _c = _b.paddingTop, paddingTop = _c === void 0 ? "0" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? "0" : _d;
    return y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom);
  },
  top: function(_bbox, _a) {
    var top7 = _a.top;
    return parseFloat(top7);
  },
  left: function(_bbox, _a) {
    var left4 = _a.left;
    return parseFloat(left4);
  },
  bottom: function(_a, _b) {
    var y = _a.y;
    var top7 = _b.top;
    return parseFloat(top7) + (y.max - y.min);
  },
  right: function(_a, _b) {
    var x = _a.x;
    var left4 = _b.left;
    return parseFloat(left4) + (x.max - x.min);
  },
  x: getTranslateFromMatrix(4, 13),
  y: getTranslateFromMatrix(5, 14)
};
var convertChangedValueTypes = function(target5, visualElement2, changedKeys) {
  var originBbox = visualElement2.measureViewportBox();
  var element3 = visualElement2.getInstance();
  var elementComputedStyle = getComputedStyle(element3);
  var display = elementComputedStyle.display;
  var origin3 = {};
  if (display === "none") {
    visualElement2.setStaticValue("display", target5.display || "block");
  }
  changedKeys.forEach(function(key) {
    origin3[key] = positionalValues[key](originBbox, elementComputedStyle);
  });
  visualElement2.syncRender();
  var targetBbox = visualElement2.measureViewportBox();
  changedKeys.forEach(function(key) {
    var value12 = visualElement2.getValue(key);
    setAndResetVelocity(value12, origin3[key]);
    target5[key] = positionalValues[key](targetBbox, elementComputedStyle);
  });
  return target5;
};
var checkAndConvertChangedValueTypes = function(visualElement2, target5, origin3, transitionEnd) {
  if (origin3 === void 0) {
    origin3 = {};
  }
  if (transitionEnd === void 0) {
    transitionEnd = {};
  }
  target5 = __assign({}, target5);
  transitionEnd = __assign({}, transitionEnd);
  var targetPositionalKeys = Object.keys(target5).filter(isPositionalKey);
  var removedTransformValues = [];
  var hasAttemptedToRemoveTransformValues = false;
  var changedValueTypeKeys = [];
  targetPositionalKeys.forEach(function(key) {
    var value12 = visualElement2.getValue(key);
    if (!visualElement2.hasValue(key))
      return;
    var from3 = origin3[key];
    var fromType = findDimensionValueType(from3);
    var to2 = target5[key];
    var toType;
    if (isKeyframesTarget(to2)) {
      var numKeyframes = to2.length;
      var fromIndex = to2[0] === null ? 1 : 0;
      from3 = to2[fromIndex];
      fromType = findDimensionValueType(from3);
      for (var i3 = fromIndex; i3 < numKeyframes; i3++) {
        if (!toType) {
          toType = findDimensionValueType(to2[i3]);
          (0, import_hey_listen10.invariant)(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
        } else {
          (0, import_hey_listen10.invariant)(findDimensionValueType(to2[i3]) === toType, "All keyframes must be of the same type");
        }
      }
    } else {
      toType = findDimensionValueType(to2);
    }
    if (fromType !== toType) {
      if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
        var current = value12.get();
        if (typeof current === "string") {
          value12.set(parseFloat(current));
        }
        if (typeof to2 === "string") {
          target5[key] = parseFloat(to2);
        } else if (Array.isArray(to2) && toType === px2) {
          target5[key] = to2.map(parseFloat);
        }
      } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from3 === 0 || to2 === 0)) {
        if (from3 === 0) {
          value12.set(toType.transform(from3));
        } else {
          target5[key] = fromType.transform(to2);
        }
      } else {
        if (!hasAttemptedToRemoveTransformValues) {
          removedTransformValues = removeNonTranslationalTransform(visualElement2);
          hasAttemptedToRemoveTransformValues = true;
        }
        changedValueTypeKeys.push(key);
        transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target5[key];
        setAndResetVelocity(value12, to2);
      }
    }
  });
  if (changedValueTypeKeys.length) {
    var scrollY_1 = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
    var convertedTarget = convertChangedValueTypes(target5, visualElement2, changedValueTypeKeys);
    if (removedTransformValues.length) {
      removedTransformValues.forEach(function(_a) {
        var _b = __read(_a, 2), key = _b[0], value12 = _b[1];
        visualElement2.getValue(key).set(value12);
      });
    }
    visualElement2.syncRender();
    if (scrollY_1 !== null)
      window.scrollTo({ top: scrollY_1 });
    return { target: convertedTarget, transitionEnd };
  } else {
    return { target: target5, transitionEnd };
  }
};
function unitConversion(visualElement2, target5, origin3, transitionEnd) {
  return hasPositionalKey(target5) ? checkAndConvertChangedValueTypes(visualElement2, target5, origin3, transitionEnd) : { target: target5, transitionEnd };
}

// node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
var parseDomVariant = function(visualElement2, target5, origin3, transitionEnd) {
  var resolved = resolveCSSVariables(visualElement2, target5, transitionEnd);
  target5 = resolved.target;
  transitionEnd = resolved.transitionEnd;
  return unitConversion(visualElement2, target5, origin3, transitionEnd);
};

// node_modules/framer-motion/dist/es/render/html/visual-element.mjs
function getComputedStyle2(element3) {
  return window.getComputedStyle(element3);
}
var htmlConfig = {
  treeType: "dom",
  readValueFromInstance: function(domElement, key) {
    if (isTransformProp(key)) {
      var defaultType = getDefaultValueType(key);
      return defaultType ? defaultType.default || 0 : 0;
    } else {
      var computedStyle = getComputedStyle2(domElement);
      return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
    }
  },
  sortNodePosition: function(a3, b3) {
    return a3.compareDocumentPosition(b3) & 2 ? 1 : -1;
  },
  getBaseTarget: function(props, key) {
    var _a;
    return (_a = props.style) === null || _a === void 0 ? void 0 : _a[key];
  },
  measureViewportBox: function(element3, _a) {
    var transformPagePoint = _a.transformPagePoint;
    return measureViewportBox(element3, transformPagePoint);
  },
  resetTransform: function(element3, domElement, props) {
    var transformTemplate = props.transformTemplate;
    domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
    element3.scheduleRender();
  },
  restoreTransform: function(instance, mutableState) {
    instance.style.transform = mutableState.style.transform;
  },
  removeValueFromRenderState: function(key, _a) {
    var vars = _a.vars, style2 = _a.style;
    delete vars[key];
    delete style2[key];
  },
  makeTargetAnimatable: function(element3, _a, _b, isMounted) {
    var transformValues = _b.transformValues;
    if (isMounted === void 0) {
      isMounted = true;
    }
    var transition3 = _a.transition, transitionEnd = _a.transitionEnd, target5 = __rest(_a, ["transition", "transitionEnd"]);
    var origin3 = getOrigin(target5, transition3 || {}, element3);
    if (transformValues) {
      if (transitionEnd)
        transitionEnd = transformValues(transitionEnd);
      if (target5)
        target5 = transformValues(target5);
      if (origin3)
        origin3 = transformValues(origin3);
    }
    if (isMounted) {
      checkTargetForNewValues(element3, target5, origin3);
      var parsed = parseDomVariant(element3, target5, origin3, transitionEnd);
      transitionEnd = parsed.transitionEnd;
      target5 = parsed.target;
    }
    return __assign({ transition: transition3, transitionEnd }, target5);
  },
  scrapeMotionValuesFromProps,
  build: function(element3, renderState, latestValues, options2, props) {
    if (element3.isVisible !== void 0) {
      renderState.style.visibility = element3.isVisible ? "visible" : "hidden";
    }
    buildHTMLStyles(renderState, latestValues, options2, props.transformTemplate);
  },
  render: renderHTML
};
var htmlVisualElement = visualElement(htmlConfig);

// node_modules/framer-motion/dist/es/render/svg/visual-element.mjs
var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function(props, key) {
  return props[key];
}, readValueFromInstance: function(domElement, key) {
  var _a;
  if (isTransformProp(key)) {
    return ((_a = getDefaultValueType(key)) === null || _a === void 0 ? void 0 : _a.default) || 0;
  }
  key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
  return domElement.getAttribute(key);
}, scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, build: function(_element, renderState, latestValues, options2, props) {
  buildSVGAttrs(renderState, latestValues, options2, props.transformTemplate);
}, render: renderSVG }));

// node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
var createDomVisualElement = function(Component, options2) {
  return isSVGComponent(Component) ? svgVisualElement(options2, { enableHardwareAcceleration: false }) : htmlVisualElement(options2, { enableHardwareAcceleration: true });
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var import_react33 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
function pixelsToPercent(pixels, axis) {
  if (axis.max === axis.min)
    return 0;
  return pixels / (axis.max - axis.min) * 100;
}
var correctBorderRadius = {
  correct: function(latest, node) {
    if (!node.target)
      return latest;
    if (typeof latest === "string") {
      if (px2.test(latest)) {
        latest = parseFloat(latest);
      } else {
        return latest;
      }
    }
    var x = pixelsToPercent(latest, node.target.x);
    var y = pixelsToPercent(latest, node.target.y);
    return "".concat(x, "% ").concat(y, "%");
  }
};

// node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
var varToken = "_$css";
var correctBoxShadow = {
  correct: function(latest, _a) {
    var treeScale = _a.treeScale, projectionDelta = _a.projectionDelta;
    var original = latest;
    var containsCSSVariables = latest.includes("var(");
    var cssVariables = [];
    if (containsCSSVariables) {
      latest = latest.replace(cssVariableRegex, function(match4) {
        cssVariables.push(match4);
        return varToken;
      });
    }
    var shadow2 = complex.parse(latest);
    if (shadow2.length > 5)
      return original;
    var template2 = complex.createTransformer(latest);
    var offset = typeof shadow2[0] !== "number" ? 1 : 0;
    var xScale = projectionDelta.x.scale * treeScale.x;
    var yScale = projectionDelta.y.scale * treeScale.y;
    shadow2[0 + offset] /= xScale;
    shadow2[1 + offset] /= yScale;
    var averageScale = mix(xScale, yScale, 0.5);
    if (typeof shadow2[2 + offset] === "number")
      shadow2[2 + offset] /= averageScale;
    if (typeof shadow2[3 + offset] === "number")
      shadow2[3 + offset] /= averageScale;
    var output2 = template2(shadow2);
    if (containsCSSVariables) {
      var i_1 = 0;
      output2 = output2.replace(varToken, function() {
        var cssVariable = cssVariables[i_1];
        i_1++;
        return cssVariable;
      });
    }
    return output2;
  }
};

// node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
var MeasureLayoutWithContext = function(_super) {
  __extends(MeasureLayoutWithContext2, _super);
  function MeasureLayoutWithContext2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MeasureLayoutWithContext2.prototype.componentDidMount = function() {
    var _this = this;
    var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, switchLayoutGroup = _a.switchLayoutGroup, layoutId3 = _a.layoutId;
    var projection = visualElement2.projection;
    addScaleCorrector(defaultScaleCorrectors);
    if (projection) {
      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
        layoutGroup.group.add(projection);
      if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId3) {
        switchLayoutGroup.register(projection);
      }
      projection.root.didUpdate();
      projection.addEventListener("animationComplete", function() {
        _this.safeToRemove();
      });
      projection.setOptions(__assign(__assign({}, projection.options), { onExitComplete: function() {
        return _this.safeToRemove();
      } }));
    }
    globalProjectionState.hasEverUpdated = true;
  };
  MeasureLayoutWithContext2.prototype.getSnapshotBeforeUpdate = function(prevProps) {
    var _this = this;
    var _a = this.props, layoutDependency = _a.layoutDependency, visualElement2 = _a.visualElement, drag3 = _a.drag, isPresent = _a.isPresent;
    var projection = visualElement2.projection;
    if (!projection)
      return null;
    projection.isPresent = isPresent;
    if (drag3 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
      projection.willUpdate();
    } else {
      this.safeToRemove();
    }
    if (prevProps.isPresent !== isPresent) {
      if (isPresent) {
        projection.promote();
      } else if (!projection.relegate()) {
        es_default.postRender(function() {
          var _a2;
          if (!((_a2 = projection.getStack()) === null || _a2 === void 0 ? void 0 : _a2.members.length)) {
            _this.safeToRemove();
          }
        });
      }
    }
    return null;
  };
  MeasureLayoutWithContext2.prototype.componentDidUpdate = function() {
    var projection = this.props.visualElement.projection;
    if (projection) {
      projection.root.didUpdate();
      if (!projection.currentAnimation && projection.isLead()) {
        this.safeToRemove();
      }
    }
  };
  MeasureLayoutWithContext2.prototype.componentWillUnmount = function() {
    var _a = this.props, visualElement2 = _a.visualElement, layoutGroup = _a.layoutGroup, promoteContext = _a.switchLayoutGroup;
    var projection = visualElement2.projection;
    if (projection) {
      projection.scheduleCheckAfterUnmount();
      if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
        layoutGroup.group.remove(projection);
      if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)
        promoteContext.deregister(projection);
    }
  };
  MeasureLayoutWithContext2.prototype.safeToRemove = function() {
    var safeToRemove = this.props.safeToRemove;
    safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();
  };
  MeasureLayoutWithContext2.prototype.render = function() {
    return null;
  };
  return MeasureLayoutWithContext2;
}(import_react33.default.Component);
function MeasureLayout(props) {
  var _a = __read(usePresence(), 2), isPresent = _a[0], safeToRemove = _a[1];
  var layoutGroup = (0, import_react33.useContext)(LayoutGroupContext);
  return import_react33.default.createElement(MeasureLayoutWithContext, __assign({}, props, { layoutGroup, switchLayoutGroup: (0, import_react33.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove }));
}
var defaultScaleCorrectors = {
  borderRadius: __assign(__assign({}, correctBorderRadius), { applyTo: [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ] }),
  borderTopLeftRadius: correctBorderRadius,
  borderTopRightRadius: correctBorderRadius,
  borderBottomLeftRadius: correctBorderRadius,
  borderBottomRightRadius: correctBorderRadius,
  boxShadow: correctBoxShadow
};

// node_modules/framer-motion/dist/es/motion/features/layout/index.mjs
var layoutFeatures = {
  measureLayout: MeasureLayout
};

// node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
var DocumentProjectionNode = createProjectionNode({
  attachResizeListener: function(ref, notify) {
    return addDomEvent(ref, "resize", notify);
  },
  measureScroll: function() {
    return {
      x: document.documentElement.scrollLeft || document.body.scrollLeft,
      y: document.documentElement.scrollTop || document.body.scrollTop
    };
  }
});

// node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
var rootProjectionNode = {
  current: void 0
};
var HTMLProjectionNode = createProjectionNode({
  measureScroll: function(instance) {
    return {
      x: instance.scrollLeft,
      y: instance.scrollTop
    };
  },
  defaultParent: function() {
    if (!rootProjectionNode.current) {
      var documentNode = new DocumentProjectionNode(0, {});
      documentNode.mount(window);
      documentNode.setOptions({ layoutScroll: true });
      rootProjectionNode.current = documentNode;
    }
    return rootProjectionNode.current;
  },
  resetTransform: function(instance, value12) {
    instance.style.transform = value12 !== null && value12 !== void 0 ? value12 : "none";
  }
});

// node_modules/framer-motion/dist/es/render/dom/motion.mjs
var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutFeatures);
var motion = /* @__PURE__ */ createMotionProxy(function(Component, config) {
  return createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode);
});

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var React6 = __toESM(require_react(), 1);
var import_react37 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
var import_react35 = __toESM(require_react(), 1);

// node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
var import_react34 = __toESM(require_react(), 1);
function useIsMounted() {
  var isMounted = (0, import_react34.useRef)(false);
  useIsomorphicLayoutEffect(function() {
    isMounted.current = true;
    return function() {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
}

// node_modules/framer-motion/dist/es/utils/use-force-update.mjs
function useForceUpdate() {
  var isMounted = useIsMounted();
  var _a = __read((0, import_react35.useState)(0), 2), forcedRenderCount = _a[0], setForcedRenderCount = _a[1];
  var forceRender = (0, import_react35.useCallback)(function() {
    isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
  }, [forcedRenderCount]);
  var deferredForceRender = (0, import_react35.useCallback)(function() {
    return es_default.postRender(forceRender);
  }, [forceRender]);
  return [deferredForceRender, forcedRenderCount];
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
var React5 = __toESM(require_react(), 1);
var import_react36 = __toESM(require_react(), 1);
var PresenceChild = function(_a) {
  var children2 = _a.children, initial4 = _a.initial, isPresent = _a.isPresent, onExitComplete = _a.onExitComplete, custom2 = _a.custom, presenceAffectsLayout = _a.presenceAffectsLayout;
  var presenceChildren = useConstant(newChildrenMap);
  var id3 = useId();
  var context = (0, import_react36.useMemo)(function() {
    return {
      id: id3,
      initial: initial4,
      isPresent,
      custom: custom2,
      onExitComplete: function(childId) {
        var e_1, _a2;
        presenceChildren.set(childId, true);
        try {
          for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var isComplete = _c.value;
            if (!isComplete)
              return;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a2 = _b.return))
              _a2.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();
      },
      register: function(childId) {
        presenceChildren.set(childId, false);
        return function() {
          return presenceChildren.delete(childId);
        };
      }
    };
  }, presenceAffectsLayout ? void 0 : [isPresent]);
  (0, import_react36.useMemo)(function() {
    presenceChildren.forEach(function(_, key) {
      return presenceChildren.set(key, false);
    });
  }, [isPresent]);
  React5.useEffect(function() {
    !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
  }, [isPresent]);
  return React5.createElement(PresenceContext.Provider, { value: context }, children2);
};
function newChildrenMap() {
  return /* @__PURE__ */ new Map();
}

// node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
var getChildKey = function(child) {
  return child.key || "";
};
function updateChildLookup(children2, allChildren) {
  children2.forEach(function(child) {
    var key = getChildKey(child);
    allChildren.set(key, child);
  });
}
function onlyElements(children2) {
  var filtered = [];
  import_react37.Children.forEach(children2, function(child) {
    if ((0, import_react37.isValidElement)(child))
      filtered.push(child);
  });
  return filtered;
}
var AnimatePresence = function(_a) {
  var children2 = _a.children, custom2 = _a.custom, _b = _a.initial, initial4 = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
  var _d = __read(useForceUpdate(), 1), forceRender = _d[0];
  var forceRenderLayoutGroup = (0, import_react37.useContext)(LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  var isMounted = useIsMounted();
  var filteredChildren = onlyElements(children2);
  var childrenToRender = filteredChildren;
  var exiting = /* @__PURE__ */ new Set();
  var presentChildren = (0, import_react37.useRef)(childrenToRender);
  var allChildren = (0, import_react37.useRef)(/* @__PURE__ */ new Map()).current;
  var isInitialRender = (0, import_react37.useRef)(true);
  useIsomorphicLayoutEffect(function() {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  useUnmountEffect(function() {
    isInitialRender.current = true;
    allChildren.clear();
    exiting.clear();
  });
  if (isInitialRender.current) {
    return React6.createElement(React6.Fragment, null, childrenToRender.map(function(child) {
      return React6.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial4 ? void 0 : false, presenceAffectsLayout }, child);
    }));
  }
  childrenToRender = __spreadArray([], __read(childrenToRender), false);
  var presentKeys = presentChildren.current.map(getChildKey);
  var targetKeys = filteredChildren.map(getChildKey);
  var numPresent = presentKeys.length;
  for (var i3 = 0; i3 < numPresent; i3++) {
    var key = presentKeys[i3];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach(function(key2) {
    if (targetKeys.indexOf(key2) !== -1)
      return;
    var child = allChildren.get(key2);
    if (!child)
      return;
    var insertionIndex = presentKeys.indexOf(key2);
    var onExit3 = function() {
      allChildren.delete(key2);
      exiting.delete(key2);
      var removeIndex = presentChildren.current.findIndex(function(presentChild) {
        return presentChild.key === key2;
      });
      presentChildren.current.splice(removeIndex, 1);
      if (!exiting.size) {
        presentChildren.current = filteredChildren;
        if (isMounted.current === false)
          return;
        forceRender();
        onExitComplete && onExitComplete();
      }
    };
    childrenToRender.splice(insertionIndex, 0, React6.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit3, custom: custom2, presenceAffectsLayout }, child));
  });
  childrenToRender = childrenToRender.map(function(child) {
    var key2 = child.key;
    return exiting.has(key2) ? child : React6.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
  });
  if (env !== "production" && exitBeforeEnter && childrenToRender.length > 1) {
    console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
  }
  return React6.createElement(React6.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
    return (0, import_react37.cloneElement)(child);
  }));
};

// output/Framer.Motion/foreign.js
var animatePresenceImpl = AnimatePresence;

// output/Framer.Motion.MotionComponent/foreign.js
var import_react38 = __toESM(require_react(), 1);
var divImpl = motion.div;
var spanImpl = motion.span;
var buttonImpl = motion.button;
var liImpl = motion.li;
var trImpl = motion.tr;
var inputImpl = motion.input;
var svgImpl = motion.svg;
var pathImpl = motion.path;
var gImpl = motion.g;

// output/Framer.Motion.MotionComponent/index.js
var div6 = function() {
  return divImpl;
};

// output/Framer.Motion.Types/index.js
var cast3 = /* @__PURE__ */ cast();
var toEffectFn = function(dict) {
  return dict.toEffectFn;
};
var onAnimationStart = cast3;
var layoutId = function() {
  return cast3;
};
var initial = function() {
  return cast3;
};
var exit2 = function() {
  return cast3;
};
var callbackableEffectFn1 = {
  toEffectFn: mkEffectFn1
};
var onAnimationComplete = /* @__PURE__ */ function() {
  var $28 = toEffectFn(callbackableEffectFn1);
  return function($29) {
    return cast3($28($29));
  };
}();
var animate3 = function() {
  return cast3;
};

// output/Framer.Motion/index.js
var animatePresence = function() {
  return animatePresenceImpl;
};

// output/React.Basic.Events/index.js
var EventFn = function(x) {
  return x;
};
var unsafeEventFn = EventFn;
var mergeNil = {
  mergeImpl: function(v) {
    return function(v1) {
      return function(v2) {
        return {};
      };
    };
  }
};
var mergeImpl = function(dict) {
  return dict.mergeImpl;
};
var mergeCons = function(dictIsSymbol) {
  var $$delete6 = $$delete3(dictIsSymbol)()();
  var get3 = get(dictIsSymbol)();
  var insert10 = insert4(dictIsSymbol)()();
  return function() {
    return function() {
      return function() {
        return function() {
          return function(dictMerge) {
            var mergeImpl1 = mergeImpl(dictMerge);
            return {
              mergeImpl: function(v) {
                return function(fns) {
                  return function(a3) {
                    var v1 = mergeImpl1($$Proxy.value)($$delete6($$Proxy.value)(fns));
                    var v2 = get3($$Proxy.value)(fns);
                    return insert10($$Proxy.value)(v2(a3))(v1(a3));
                  };
                };
              }
            };
          };
        };
      };
    };
  };
};
var merge2 = function() {
  return function(dictMerge) {
    return mergeImpl(dictMerge)($$Proxy.value);
  };
};
var handler_ = function($30) {
  return mkEffectFn1($$const($30));
};
var handler = function(v) {
  return function(cb2) {
    return function($31) {
      return cb2(v($31))();
    };
  };
};
var categoryBuilder2 = categoryFn;
var syntheticEvent = /* @__PURE__ */ identity(categoryBuilder2);

// output/Yoga.Block.Internal/foreign.js
var import_react39 = __toESM(require_react(), 1);
function mkForwardRefComponent(displayName2) {
  return (renderFn) => {
    const component25 = (props, ref) => renderFn(props)(ref)();
    component25.displayName = displayName2;
    component25.whyDidYouRender = true;
    return (0, import_react39.forwardRef)(component25);
  };
}
function pickDefinedFn(ref, ks, obj) {
  const copy3 = {};
  for (let i3 = 0; i3 < ks.length; i3++) {
    if (obj[ks[i3]] !== void 0) {
      copy3[ks[i3]] = obj[ks[i3]];
    }
  }
  if (ref !== void 0) {
    copy3.ref = ref;
  }
  return copy3;
}
function unsafeUnionDroppingUndefined(r1) {
  return (r2) => {
    var copy3 = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1) && r2[k1] !== void 0) {
        copy3[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2) && r1[k2] !== void 0) {
        copy3[k2] = r1[k2];
      }
    }
    return copy3;
  };
}

// output/Literals.Undefined/foreign.js
var undefinedImpl = void 0;

// output/Literals.Undefined/index.js
var $$undefined2 = undefinedImpl;

// output/Untagged.TypeCheck/index.js
var hasRuntimeType = function(dict) {
  return dict.hasRuntimeType;
};
var hasJsType = function(name15) {
  return function(x) {
    return typeOf(x) === name15;
  };
};
var hasRuntimeTypeUndefined = {
  hasRuntimeType: function(v) {
    return hasJsType("undefined");
  }
};

// output/Untagged.Union/index.js
var cast4 = /* @__PURE__ */ cast();
var getRight$prime = function(dictHasRuntimeType) {
  var hasRuntimeType2 = hasRuntimeType(dictHasRuntimeType);
  return function(o) {
    var isTypeA = hasRuntimeType2($$Proxy.value);
    var $57 = isTypeA(unsafeToForeign(o));
    if ($57) {
      return Nothing.value;
    }
    ;
    return new Just(o);
  };
};
var uorToMaybe = /* @__PURE__ */ getRight$prime(hasRuntimeTypeUndefined);
var fromUndefinedOr = function(a3) {
  var $64 = fromMaybe(a3);
  return function($65) {
    return $64(uorToMaybe($65));
  };
};
var maybeToUor = function(v) {
  if (v instanceof Just) {
    return v.value0;
  }
  ;
  if (v instanceof Nothing) {
    return cast4($$undefined2);
  }
  ;
  throw new Error("Failed pattern match at Untagged.Union (line 121, column 1 - line 121, column 49): " + [v.constructor.name]);
};

// output/Web.DOM.Element/foreign.js
var getProp = function(name15) {
  return function(doctype) {
    return doctype[name15];
  };
};
var _namespaceURI = getProp("namespaceURI");
var _prefix = getProp("prefix");
var localName = getProp("localName");
var tagName = getProp("tagName");
function getBoundingClientRect(el8) {
  return function() {
    var rect3 = el8.getBoundingClientRect();
    return {
      top: rect3.top,
      right: rect3.right,
      bottom: rect3.bottom,
      left: rect3.left,
      width: rect3.width,
      height: rect3.height,
      x: rect3.x,
      y: rect3.y
    };
  };
}

// output/Web.DOM.ParentNode/foreign.js
var getEffProp2 = function(name15) {
  return function(node) {
    return function() {
      return node[name15];
    };
  };
};
var children = getEffProp2("children");
var _firstElementChild = getEffProp2("firstElementChild");
var _lastElementChild = getEffProp2("lastElementChild");
var childElementCount = getEffProp2("childElementCount");

// output/Web.DOM.Element/index.js
var fromNode = /* @__PURE__ */ unsafeReadProtoTagged("Element");

// output/Web.DOM.NonElementParentNode/foreign.js
function _getElementById(id3) {
  return function(node) {
    return function() {
      return node.getElementById(id3);
    };
  };
}

// output/Web.DOM.NonElementParentNode/index.js
var map29 = /* @__PURE__ */ map(functorEffect);
var getElementById = function(eid) {
  var $2 = map29(toMaybe);
  var $3 = _getElementById(eid);
  return function($4) {
    return $2($3($4));
  };
};

// output/Yoga.Block.Internal.OptionalProp/index.js
var map30 = /* @__PURE__ */ map(functorMaybe);
var foldMap5 = /* @__PURE__ */ foldMap(foldableMaybe);
var foldr4 = /* @__PURE__ */ foldr(foldableMaybe);
var foldl2 = /* @__PURE__ */ foldl(foldableMaybe);
var opToMaybe = function(v) {
  return uorToMaybe(v);
};
var maybeToOp = function(mb) {
  return maybeToUor(mb);
};
var getOr = function($$default) {
  return function(v) {
    return fromUndefinedOr($$default)(v);
  };
};
var getOrFlipped = /* @__PURE__ */ flip(getOr);
var isTruthy = /* @__PURE__ */ getOr(false);
var functorOptionalProp = {
  map: function(fn) {
    return function(opt) {
      return maybeToOp(map30(fn)(opToMaybe(opt)));
    };
  }
};
var foldableOptionalProp = {
  foldMap: function(dictMonoid) {
    var foldMap13 = foldMap5(dictMonoid);
    return function(fn) {
      var $43 = foldMap13(fn);
      return function($44) {
        return $43(opToMaybe($44));
      };
    };
  },
  foldr: function(fn) {
    return function(acc) {
      var $45 = foldr4(fn)(acc);
      return function($46) {
        return $45(opToMaybe($46));
      };
    };
  },
  foldl: function(fn) {
    return function(acc) {
      var $47 = foldl2(fn)(acc);
      return function($48) {
        return $47(opToMaybe($48));
      };
    };
  }
};
var appendIfDefined = function(dictSemigroup) {
  var append11 = append(dictSemigroup);
  return function(a3) {
    return function(undefOrA) {
      return maybe(a3)(function(v) {
        return append11(a3)(v);
      })(opToMaybe(undefOrA));
    };
  };
};

// output/Yoga.Block.Internal/index.js
var fromFoldable5 = /* @__PURE__ */ fromFoldable(foldableList);
var keys3 = /* @__PURE__ */ keys2();
var bind12 = /* @__PURE__ */ bind(/* @__PURE__ */ bindMaybeT(monadEffect));
var pure14 = /* @__PURE__ */ pure(applicativeEffect);
var bind13 = /* @__PURE__ */ bind(bindEffect);
var $$for3 = /* @__PURE__ */ $$for(applicativeEffect)(traversableMaybe);
var bind22 = /* @__PURE__ */ bind(bindMaybe);
var consKeys2 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "_aria";
  }
});
var consKeys1 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "_data";
  }
});
var consKeys22 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "about";
  }
});
var consKeys3 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "acceptCharset";
  }
});
var consKeys4 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "accessKey";
  }
});
var consKeys5 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "allowFullScreen";
  }
});
var consKeys6 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "autoFocus";
  }
});
var consKeys7 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "autoPlay";
  }
});
var consKeys8 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "capture";
  }
});
var consKeys9 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "cellPadding";
  }
});
var consKeys10 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "cellSpacing";
  }
});
var consKeys11 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "charSet";
  }
});
var consKeys12 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "children";
  }
});
var consKeys13 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "classID";
  }
});
var consKeys14 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "colSpan";
  }
});
var consKeys15 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "contentEditable";
  }
});
var consKeys16 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "contextMenu";
  }
});
var consKeys17 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "crossOrigin";
  }
});
var consKeys18 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "dangerouslySetInnerHTML";
  }
});
var consKeys19 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "datatype";
  }
});
var consKeys20 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "dateTime";
  }
});
var consKeys21 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "dir";
  }
});
var consKeys222 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "disabled";
  }
});
var consKeys23 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "draggable";
  }
});
var consKeys24 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "encType";
  }
});
var consKeys25 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "form";
  }
});
var consKeys26 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "formAction";
  }
});
var consKeys27 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "formEncType";
  }
});
var consKeys28 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "formMethod";
  }
});
var consKeys29 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "formNoValidate";
  }
});
var consKeys30 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "formTarget";
  }
});
var consKeys31 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "frameBorder";
  }
});
var consKeys32 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "hidden";
  }
});
var consKeys33 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "hrefLang";
  }
});
var consKeys34 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "htmlFor";
  }
});
var consKeys35 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "httpEquiv";
  }
});
var consKeys36 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "icon";
  }
});
var consKeys37 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "id";
  }
});
var consKeys38 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "inlist";
  }
});
var consKeys39 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "inputMode";
  }
});
var consKeys40 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "is";
  }
});
var consKeys41 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "itemID";
  }
});
var consKeys42 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "itemProp";
  }
});
var consKeys43 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "itemRef";
  }
});
var consKeys44 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "itemScope";
  }
});
var consKeys45 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "itemType";
  }
});
var consKeys46 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "keyParams";
  }
});
var consKeys47 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "keyType";
  }
});
var consKeys48 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "lang";
  }
});
var consKeys49 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "marginHeight";
  }
});
var consKeys50 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "marginWidth";
  }
});
var consKeys51 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "maxLength";
  }
});
var consKeys52 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "mediaGroup";
  }
});
var consKeys53 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "minLength";
  }
});
var consKeys54 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "name";
  }
});
var consKeys55 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "noValidate";
  }
});
var consKeys56 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onAnimationEnd";
  }
});
var consKeys57 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onAnimationIteration";
  }
});
var consKeys58 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onAnimationStart";
  }
});
var consKeys59 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onBlur";
  }
});
var consKeys60 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onClick";
  }
});
var consKeys61 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onCompositionEnd";
  }
});
var consKeys62 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onCompositionStart";
  }
});
var consKeys63 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onCompositionUpdate";
  }
});
var consKeys64 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onContextMenu";
  }
});
var consKeys65 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onCopy";
  }
});
var consKeys66 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onCut";
  }
});
var consKeys67 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDoubleClick";
  }
});
var consKeys68 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDrag";
  }
});
var consKeys69 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragEnd";
  }
});
var consKeys70 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragEnter";
  }
});
var consKeys71 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragExit";
  }
});
var consKeys72 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragLeave";
  }
});
var consKeys73 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragOver";
  }
});
var consKeys74 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDragStart";
  }
});
var consKeys75 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onDrop";
  }
});
var consKeys76 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onFocus";
  }
});
var consKeys77 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onGotPointerCapture";
  }
});
var consKeys78 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onInvalid";
  }
});
var consKeys79 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onKeyDown";
  }
});
var consKeys80 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onKeyPress";
  }
});
var consKeys81 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onKeyUp";
  }
});
var consKeys82 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onLostPointerCapture";
  }
});
var consKeys83 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseDown";
  }
});
var consKeys84 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseEnter";
  }
});
var consKeys85 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseLeave";
  }
});
var consKeys86 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseMove";
  }
});
var consKeys87 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseOut";
  }
});
var consKeys88 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseOver";
  }
});
var consKeys89 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onMouseUp";
  }
});
var consKeys90 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPaste";
  }
});
var consKeys91 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerCancel";
  }
});
var consKeys92 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerDown";
  }
});
var consKeys93 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerEnter";
  }
});
var consKeys94 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerLeave";
  }
});
var consKeys95 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerMove";
  }
});
var consKeys96 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerOut";
  }
});
var consKeys97 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerOver";
  }
});
var consKeys98 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onPointerUp";
  }
});
var consKeys99 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onSelect";
  }
});
var consKeys100 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onSubmit";
  }
});
var consKeys101 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onTouchCancel";
  }
});
var consKeys102 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onTouchEnd";
  }
});
var consKeys103 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onTouchMove";
  }
});
var consKeys104 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onTouchStart";
  }
});
var consKeys105 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onTransitionEnd";
  }
});
var consKeys106 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "onWheel";
  }
});
var consKeys107 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "prefix";
  }
});
var consKeys108 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "property";
  }
});
var consKeys109 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "radioGroup";
  }
});
var consKeys110 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "readOnly";
  }
});
var consKeys111 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "resource";
  }
});
var consKeys112 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "role";
  }
});
var consKeys113 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "rowSpan";
  }
});
var consKeys114 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "scoped";
  }
});
var consKeys115 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "seamless";
  }
});
var consKeys116 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "security";
  }
});
var consKeys117 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "spellCheck";
  }
});
var consKeys118 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "srcDoc";
  }
});
var consKeys119 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "srcLang";
  }
});
var consKeys120 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "srcSet";
  }
});
var consKeys121 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "style";
  }
});
var consKeys122 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "suppressContentEditableWarning";
  }
});
var consKeys123 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "tabIndex";
  }
});
var consKeys124 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "title";
  }
});
var consKeys125 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "type";
  }
});
var consKeys126 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "typeof";
  }
});
var consKeys127 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "unselectable";
  }
});
var consKeys128 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "useMap";
  }
});
var consKeys129 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "value";
  }
});
var consKeys130 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "vocab";
  }
});
var consKeys131 = /* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "wmode";
  }
})(nilKeys);
var consKeys132 = /* @__PURE__ */ consKeys130(consKeys131);
var consKeys133 = /* @__PURE__ */ consKeys2(/* @__PURE__ */ consKeys1(/* @__PURE__ */ consKeys22(/* @__PURE__ */ consKeys3(/* @__PURE__ */ consKeys4(/* @__PURE__ */ consKeys5(/* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "allowTransparency";
  }
})(/* @__PURE__ */ consKeys6(/* @__PURE__ */ consKeys7(/* @__PURE__ */ consKeys8(/* @__PURE__ */ consKeys9(/* @__PURE__ */ consKeys10(/* @__PURE__ */ consKeys11(/* @__PURE__ */ consKeys12(/* @__PURE__ */ consKeys13(/* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "className";
  }
})(/* @__PURE__ */ consKeys14(/* @__PURE__ */ consKeys15(/* @__PURE__ */ consKeys16(/* @__PURE__ */ consKeys17(/* @__PURE__ */ consKeys18(/* @__PURE__ */ consKeys19(/* @__PURE__ */ consKeys20(/* @__PURE__ */ consKeys21(/* @__PURE__ */ consKeys222(/* @__PURE__ */ consKeys23(/* @__PURE__ */ consKeys24(/* @__PURE__ */ consKeys25(/* @__PURE__ */ consKeys26(/* @__PURE__ */ consKeys27(/* @__PURE__ */ consKeys28(/* @__PURE__ */ consKeys29(/* @__PURE__ */ consKeys30(/* @__PURE__ */ consKeys31(/* @__PURE__ */ consKeys32(/* @__PURE__ */ consKeys33(/* @__PURE__ */ consKeys34(/* @__PURE__ */ consKeys35(/* @__PURE__ */ consKeys36(/* @__PURE__ */ consKeys37(/* @__PURE__ */ consKeys38(/* @__PURE__ */ consKeys39(/* @__PURE__ */ consKeys40(/* @__PURE__ */ consKeys41(/* @__PURE__ */ consKeys42(/* @__PURE__ */ consKeys43(/* @__PURE__ */ consKeys44(/* @__PURE__ */ consKeys45(/* @__PURE__ */ consKeys({
  reflectSymbol: function() {
    return "key";
  }
})(/* @__PURE__ */ consKeys46(/* @__PURE__ */ consKeys47(/* @__PURE__ */ consKeys48(/* @__PURE__ */ consKeys49(/* @__PURE__ */ consKeys50(/* @__PURE__ */ consKeys51(/* @__PURE__ */ consKeys52(/* @__PURE__ */ consKeys53(/* @__PURE__ */ consKeys54(/* @__PURE__ */ consKeys55(/* @__PURE__ */ consKeys56(/* @__PURE__ */ consKeys57(/* @__PURE__ */ consKeys58(/* @__PURE__ */ consKeys59(/* @__PURE__ */ consKeys60(/* @__PURE__ */ consKeys61(/* @__PURE__ */ consKeys62(/* @__PURE__ */ consKeys63(/* @__PURE__ */ consKeys64(/* @__PURE__ */ consKeys65(/* @__PURE__ */ consKeys66(/* @__PURE__ */ consKeys67(/* @__PURE__ */ consKeys68(/* @__PURE__ */ consKeys69(/* @__PURE__ */ consKeys70(/* @__PURE__ */ consKeys71(/* @__PURE__ */ consKeys72(/* @__PURE__ */ consKeys73(/* @__PURE__ */ consKeys74(/* @__PURE__ */ consKeys75(/* @__PURE__ */ consKeys76(/* @__PURE__ */ consKeys77(/* @__PURE__ */ consKeys78(/* @__PURE__ */ consKeys79(/* @__PURE__ */ consKeys80(/* @__PURE__ */ consKeys81(/* @__PURE__ */ consKeys82(/* @__PURE__ */ consKeys83(/* @__PURE__ */ consKeys84(/* @__PURE__ */ consKeys85(/* @__PURE__ */ consKeys86(/* @__PURE__ */ consKeys87(/* @__PURE__ */ consKeys88(/* @__PURE__ */ consKeys89(/* @__PURE__ */ consKeys90(/* @__PURE__ */ consKeys91(/* @__PURE__ */ consKeys92(/* @__PURE__ */ consKeys93(/* @__PURE__ */ consKeys94(/* @__PURE__ */ consKeys95(/* @__PURE__ */ consKeys96(/* @__PURE__ */ consKeys97(/* @__PURE__ */ consKeys98(/* @__PURE__ */ consKeys99(/* @__PURE__ */ consKeys100(/* @__PURE__ */ consKeys101(/* @__PURE__ */ consKeys102(/* @__PURE__ */ consKeys103(/* @__PURE__ */ consKeys104(/* @__PURE__ */ consKeys105(/* @__PURE__ */ consKeys106(/* @__PURE__ */ consKeys107(/* @__PURE__ */ consKeys108(/* @__PURE__ */ consKeys109(/* @__PURE__ */ consKeys110(/* @__PURE__ */ consKeys111(/* @__PURE__ */ consKeys112(/* @__PURE__ */ consKeys113(/* @__PURE__ */ consKeys114(/* @__PURE__ */ consKeys115(/* @__PURE__ */ consKeys116(/* @__PURE__ */ consKeys117(/* @__PURE__ */ consKeys118(/* @__PURE__ */ consKeys119(/* @__PURE__ */ consKeys120(/* @__PURE__ */ consKeys121(/* @__PURE__ */ consKeys122(/* @__PURE__ */ consKeys123(/* @__PURE__ */ consKeys124(/* @__PURE__ */ consKeys125(/* @__PURE__ */ consKeys126(/* @__PURE__ */ consKeys127(/* @__PURE__ */ consKeys128(/* @__PURE__ */ consKeys129(consKeys132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
var consKeys134 = /* @__PURE__ */ consKeys2(/* @__PURE__ */ consKeys1(/* @__PURE__ */ consKeys22(/* @__PURE__ */ consKeys3(/* @__PURE__ */ consKeys4(/* @__PURE__ */ consKeys5(/* @__PURE__ */ consKeys6(/* @__PURE__ */ consKeys7(/* @__PURE__ */ consKeys8(/* @__PURE__ */ consKeys9(/* @__PURE__ */ consKeys10(/* @__PURE__ */ consKeys11(/* @__PURE__ */ consKeys12(/* @__PURE__ */ consKeys13(/* @__PURE__ */ consKeys14(/* @__PURE__ */ consKeys15(/* @__PURE__ */ consKeys16(/* @__PURE__ */ consKeys17(/* @__PURE__ */ consKeys18(/* @__PURE__ */ consKeys19(/* @__PURE__ */ consKeys20(/* @__PURE__ */ consKeys21(/* @__PURE__ */ consKeys23(/* @__PURE__ */ consKeys24(/* @__PURE__ */ consKeys26(/* @__PURE__ */ consKeys27(/* @__PURE__ */ consKeys28(/* @__PURE__ */ consKeys29(/* @__PURE__ */ consKeys30(/* @__PURE__ */ consKeys31(/* @__PURE__ */ consKeys32(/* @__PURE__ */ consKeys33(/* @__PURE__ */ consKeys34(/* @__PURE__ */ consKeys35(/* @__PURE__ */ consKeys36(/* @__PURE__ */ consKeys37(/* @__PURE__ */ consKeys38(/* @__PURE__ */ consKeys39(/* @__PURE__ */ consKeys40(/* @__PURE__ */ consKeys41(/* @__PURE__ */ consKeys42(/* @__PURE__ */ consKeys43(/* @__PURE__ */ consKeys44(/* @__PURE__ */ consKeys45(/* @__PURE__ */ consKeys46(/* @__PURE__ */ consKeys47(/* @__PURE__ */ consKeys48(/* @__PURE__ */ consKeys49(/* @__PURE__ */ consKeys50(/* @__PURE__ */ consKeys51(/* @__PURE__ */ consKeys52(/* @__PURE__ */ consKeys53(/* @__PURE__ */ consKeys55(/* @__PURE__ */ consKeys56(/* @__PURE__ */ consKeys57(/* @__PURE__ */ consKeys58(/* @__PURE__ */ consKeys59(/* @__PURE__ */ consKeys60(/* @__PURE__ */ consKeys61(/* @__PURE__ */ consKeys62(/* @__PURE__ */ consKeys63(/* @__PURE__ */ consKeys64(/* @__PURE__ */ consKeys65(/* @__PURE__ */ consKeys66(/* @__PURE__ */ consKeys67(/* @__PURE__ */ consKeys68(/* @__PURE__ */ consKeys69(/* @__PURE__ */ consKeys70(/* @__PURE__ */ consKeys71(/* @__PURE__ */ consKeys72(/* @__PURE__ */ consKeys73(/* @__PURE__ */ consKeys74(/* @__PURE__ */ consKeys75(/* @__PURE__ */ consKeys76(/* @__PURE__ */ consKeys77(/* @__PURE__ */ consKeys78(/* @__PURE__ */ consKeys79(/* @__PURE__ */ consKeys80(/* @__PURE__ */ consKeys81(/* @__PURE__ */ consKeys82(/* @__PURE__ */ consKeys83(/* @__PURE__ */ consKeys84(/* @__PURE__ */ consKeys85(/* @__PURE__ */ consKeys86(/* @__PURE__ */ consKeys87(/* @__PURE__ */ consKeys88(/* @__PURE__ */ consKeys89(/* @__PURE__ */ consKeys90(/* @__PURE__ */ consKeys91(/* @__PURE__ */ consKeys92(/* @__PURE__ */ consKeys93(/* @__PURE__ */ consKeys94(/* @__PURE__ */ consKeys95(/* @__PURE__ */ consKeys96(/* @__PURE__ */ consKeys97(/* @__PURE__ */ consKeys98(/* @__PURE__ */ consKeys99(/* @__PURE__ */ consKeys100(/* @__PURE__ */ consKeys101(/* @__PURE__ */ consKeys102(/* @__PURE__ */ consKeys103(/* @__PURE__ */ consKeys104(/* @__PURE__ */ consKeys105(/* @__PURE__ */ consKeys106(/* @__PURE__ */ consKeys107(/* @__PURE__ */ consKeys108(/* @__PURE__ */ consKeys109(/* @__PURE__ */ consKeys110(/* @__PURE__ */ consKeys111(/* @__PURE__ */ consKeys112(/* @__PURE__ */ consKeys113(/* @__PURE__ */ consKeys114(/* @__PURE__ */ consKeys115(/* @__PURE__ */ consKeys116(/* @__PURE__ */ consKeys117(/* @__PURE__ */ consKeys118(/* @__PURE__ */ consKeys119(/* @__PURE__ */ consKeys120(/* @__PURE__ */ consKeys121(/* @__PURE__ */ consKeys122(/* @__PURE__ */ consKeys123(/* @__PURE__ */ consKeys124(/* @__PURE__ */ consKeys126(/* @__PURE__ */ consKeys127(/* @__PURE__ */ consKeys128(consKeys132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
var unsafeEmotion = function(component25) {
  return function(propsA) {
    return function(propsB) {
      return element2(component25)(unsafeUnionDroppingUndefined(propsB)(propsA));
    };
  };
};
var pickDefined = function() {
  return function() {
    return function(ref) {
      return function(dictKeys) {
        var ks = fromFoldable5(keys3(dictKeys)($$Proxy.value));
        return runFn3(pickDefinedFn)(ref)(ks);
      };
    };
  };
};
var pickDefined1 = /* @__PURE__ */ pickDefined()();
var getElementFromRef = function(itemRef) {
  return runMaybeT(bind12(readRefMaybe(itemRef))(function(node) {
    return pure14(fromNode(node));
  }));
};
var getBoundingBoxFromRef = function(itemRef) {
  return function __do6() {
    var elem3 = getElementFromRef(itemRef)();
    return $$for3(elem3)(getBoundingClientRect)();
  };
};
var forwardedRefAsMaybe = function(r) {
  return bind22(uorToMaybe(r))(toMaybe);
};
var findElementByIdInDocument = function(id3) {
  return function __do6() {
    var doc = bind13(windowImpl)(document2)();
    var node = toNonElementParentNode(doc);
    return getElementById(id3)(node)();
  };
};
var dangerous = function($753) {
  return unsafePerformEffect(unsafeCreateDOMComponent($753));
};
var unsafeButton = /* @__PURE__ */ dangerous("button");
var emotionButton_ = function() {
  return unsafeEmotion(unsafeButton);
};
var emotionButton_1 = /* @__PURE__ */ emotionButton_();
var emotionButton = function() {
  return function() {
    return function(ref) {
      var $754 = pickDefined1(ref)(consKeys133);
      return function($755) {
        return emotionButton_1($754($755));
      };
    };
  };
};
var unsafeDiv = /* @__PURE__ */ dangerous("div");
var emotionDiv_ = function() {
  return function() {
    return unsafeEmotion(unsafeDiv);
  };
};
var emotionDiv_1 = /* @__PURE__ */ emotionDiv_()();
var emotionDiv = function() {
  return function() {
    return function(ref) {
      var $756 = pickDefined1(ref)(consKeys134);
      return function($757) {
        return emotionDiv_1($756($757));
      };
    };
  };
};

// output/Yoga.Block.Hook.UseRenderInPortal/index.js
var coerceHook2 = /* @__PURE__ */ coerceHook();
var bind14 = /* @__PURE__ */ bind10(ixBindRender);
var foldMap6 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
var discard5 = /* @__PURE__ */ discard4(ixBindRender);
var when4 = /* @__PURE__ */ when(applicativeEffect);
var bind15 = /* @__PURE__ */ bind(bindEffect);
var mempty5 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
var pure15 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var useRenderInPortal = function(portalId) {
  return coerceHook2(bind14(useState$prime(Nothing.value))(function(v) {
    var renderInPortal = function(jsx3) {
      return foldMap6(createPortal(jsx3))(v.value0);
    };
    return discard5(useEffectOnce(function __do6() {
      when4(isNothing(v.value0))(bind15(findElementByIdInDocument(portalId))(v.value1))();
      return mempty5();
    }))(function() {
      return pure15(renderInPortal);
    });
  }));
};

// output/Fahrtwind.Style.Border/index.js
var css14 = /* @__PURE__ */ css3();
var rounded = function($10) {
  return css14(function(v) {
    return {
      borderRadius: v
    };
  }($10));
};
var rounded2xl = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(1));
var roundedDefault = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.25));
var roundedLg = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.5));
var borderCol$prime = function($14) {
  return css14(function(v) {
    return {
      borderColor: v
    };
  }($14));
};
var borderBottom = function($16) {
  return css14(function(v) {
    return {
      borderBottomWidth: v
    };
  }(px($16)));
};
var border2 = function($17) {
  return css14(function(v) {
    return {
      borderWidth: v
    };
  }(px($17)));
};

// output/Fahrtwind.Style.BoxModel/index.js
var css15 = /* @__PURE__ */ css3();
var append3 = /* @__PURE__ */ append(semigroupStyle);
var pXY = function($23) {
  return css15(function(v) {
    return {
      padding: v
    };
  }(px($23)));
};
var pT$prime = function($24) {
  return css15(function(v) {
    return {
      paddingTop: v
    };
  }($24));
};
var pT = function($25) {
  return css15(function(v) {
    return {
      paddingTop: v
    };
  }(px($25)));
};
var pR = function($27) {
  return css15(function(v) {
    return {
      paddingRight: v
    };
  }(px($27)));
};
var pL = function($29) {
  return css15(function(v) {
    return {
      paddingLeft: v
    };
  }(px($29)));
};
var pX = function(n) {
  return append3(pR(n))(pL(n));
};
var pB$prime = function($30) {
  return css15(function(v) {
    return {
      paddingBottom: v
    };
  }($30));
};
var pY$prime = function(n) {
  return append3(pT$prime(n))(pB$prime(n));
};
var pB = function($31) {
  return css15(function(v) {
    return {
      paddingBottom: v
    };
  }(px($31)));
};
var pY = function(n) {
  return append3(pT(n))(pB(n));
};
var mXY = function($33) {
  return css15(function(v) {
    return {
      margin: v
    };
  }(px($33)));
};
var mT = function($35) {
  return css15(function(v) {
    return {
      marginTop: v
    };
  }(px($35)));
};
var mL = function($39) {
  return css15(function(v) {
    return {
      marginLeft: v
    };
  }(px($39)));
};

// output/Fahrtwind.Style.BoxShadow/index.js
var css16 = /* @__PURE__ */ css3();
var shadow = function(s2) {
  return css16({
    boxShadow: str(s2)
  });
};

// output/Fahrtwind.Style.Color.Text/index.js
var css17 = /* @__PURE__ */ css3();
var textCol$prime = function($4) {
  return css17(function(v) {
    return {
      color: v
    };
  }($4));
};

// output/Fahrtwind.Style.Display.Flex/index.js
var css18 = /* @__PURE__ */ css3();
var itemsCenter = /* @__PURE__ */ css18({
  alignItems: center
});
var gap = function(x) {
  return css18({
    gap: px(x)
  });
};
var flexRow = /* @__PURE__ */ css18({
  display: flex,
  flexDirection: row
});
var flexCol = /* @__PURE__ */ css18({
  display: flex,
  flexDirection: column
});

// output/Fahrtwind.Style.Text/index.js
var css19 = /* @__PURE__ */ css3();
var append4 = /* @__PURE__ */ append(semigroupStyle);
var underline = /* @__PURE__ */ css19({
  textDecoration: /* @__PURE__ */ str("underline")
});
var tracking = function(t) {
  return css19({
    letterSpacing: em2(t)
  });
};
var textSized = function(fs) {
  return function(lh) {
    return css19({
      fontSize: rem2(fs),
      lineHeight: rem2(lh)
    });
  };
};
var textSm = /* @__PURE__ */ function() {
  return append4(textSized(0.875)(1.25))(tracking(-6e-3));
}();
var textXl = /* @__PURE__ */ function() {
  return append4(textSized(1.25)(1.75))(tracking(-0.017));
}();
var text4xl = /* @__PURE__ */ function() {
  return append4(textSized(2.25)(2.5))(tracking(-0.022));
}();
var fontBold = /* @__PURE__ */ css19({
  fontWeight: /* @__PURE__ */ $$int(700)
});

// output/Yoga.Block.Organism.NotificationCentre.Notification.Style/index.js
var append5 = /* @__PURE__ */ append(semigroupStyle);
var defaultNotificationStyle = /* @__PURE__ */ function() {
  return append5(rounded2xl)(append5(shadow("0 0 16px rgba(0,0,0,0.1), 0 0 32px rgba(0,0,0,0.1)"))(append5(width(340))(append5(height(120))(append5(overflowHidden)(append5(border2(1))(borderCol$prime(col2.backgroundLayer2)))))));
}();
var defaultNotificationContainerStyle = /* @__PURE__ */ append5(positionFixed)(/* @__PURE__ */ append5(/* @__PURE__ */ top6(16))(/* @__PURE__ */ append5(/* @__PURE__ */ right(16))(/* @__PURE__ */ append5(flexCol)(/* @__PURE__ */ append5(/* @__PURE__ */ gap(8))(acceptClicks)))));

// output/Yoga.Block.Organism.NotificationCentre.Notification.View/index.js
var styled2 = /* @__PURE__ */ styled();
var div7 = /* @__PURE__ */ div6();
var el2 = /* @__PURE__ */ el();
var animatePresence2 = /* @__PURE__ */ animatePresence();
var mapFlipped5 = /* @__PURE__ */ mapFlipped(functorArray);
var initial2 = /* @__PURE__ */ initial();
var animate4 = /* @__PURE__ */ animate3();
var exit3 = /* @__PURE__ */ exit2();
var show13 = /* @__PURE__ */ show(showInt);
var layoutId2 = /* @__PURE__ */ layoutId();
var bind16 = /* @__PURE__ */ bind10(ixBindRender);
var discard6 = /* @__PURE__ */ discard4(ixBindRender);
var notEq2 = /* @__PURE__ */ notEq(eqNotificationId);
var pure16 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var renderAnimatedNotifications = function(items) {
  return styled2(div7)({
    css: defaultNotificationContainerStyle
  })([el2(animatePresence2)({
    initial: false
  })(mapFlipped5(items)(function(v) {
    return styled2(div7)({
      css: defaultNotificationStyle,
      initial: initial2(css({
        y: -40 | 0,
        x: 0,
        scale: 0.3,
        opacity: 0
      })),
      animate: animate4(css({
        y: 0,
        x: 0,
        scale: 1,
        opacity: 1,
        transition: {
          bounce: 0.05
        }
      })),
      exit: exit3(css({
        scale: 1,
        y: 0,
        x: 500,
        opacity: 1,
        transition: {
          duration: 0.5
        }
      })),
      key: show13(v.value0),
      layoutId: layoutId2(show13(v.value0)),
      style: css({
        transformOrigin: "center center"
      })
    })([v.value1]);
  }))]);
};
var mkNotificationCentreView = function(v) {
  return function(v1) {
    return function __do6() {
      var render = component("NotificationCentre")(function(v2) {
        return bind16(useState([]))(function(v3) {
          return bind16(useRenderInPortal(v1.containerId))(function(renderInPortal) {
            return discard6(useEffectOnce(v.subscribe(function(v4) {
              if (v4 instanceof NotificationAdded) {
                return v3.value1(cons2(new Tuple(v4.value0, v4.value1)));
              }
              ;
              if (v4 instanceof NotificationDismissed) {
                return v3.value1(filter(function($54) {
                  return function(v5) {
                    return notEq2(v5)(v4.value0);
                  }(fst($54));
                }));
              }
              ;
              throw new Error("Failed pattern match at Yoga.Block.Organism.NotificationCentre.Notification.View (line 32, column 19 - line 36, column 47): " + [v4.constructor.name]);
            })))(function() {
              var view = v1.renderNotifications(v3.value0);
              return pure16(renderInPortal(view));
            });
          });
        });
      })();
      return render(unit);
    };
  };
};

// output/UI.Container/index.js
var css20 = /* @__PURE__ */ css3();
var append6 = /* @__PURE__ */ append(semigroupStyle);
var styled3 = /* @__PURE__ */ styled();
var div$prime4 = /* @__PURE__ */ div$prime();
var leaf2 = /* @__PURE__ */ leaf();
var mempty6 = /* @__PURE__ */ mempty(monoidStyle);
var tooltipId = "tooltip";
var popOverId = "popOver";
var ourGobalStyle = /* @__PURE__ */ function() {
  return css20({
    body: nested(append6(background$prime(col2.backgroundLayer1))(css20({
      "--mono-font": str("'Jetbrains Mono', monospace")
    }))),
    a: nested(css20({
      textDecoration: none,
      fontWeight: str("normal")
    }))
  });
}();
var notificationsId = "notifications";
var mkContainer = function(notificationCentre) {
  var fullScreenLayerStyle = function(zIndex2) {
    return append6(positionFixed)(append6(left(0))(append6(top6(0))(append6(widthScreen)(append6(heightScreen)(append6(overflowHidden)(append6(ignoreClicks)(zIndex(zIndex2))))))));
  };
  var scrollableFullScreenLayerDiv = function(id3) {
    return function(zIndex2) {
      return styled3(div$prime4)({
        id: id3,
        css: append6(fullScreenLayerStyle(zIndex2))(append6(positionAbsolute)(append6(overflowVisible)(append6(heightFull)(append6(widthFull)(overflowHidden)))))
      })([]);
    };
  };
  var fixedFullScreenLayerDiv = function(id3) {
    return function(zIndex2) {
      return styled3(div$prime4)({
        id: id3,
        css: fullScreenLayerStyle(zIndex2)
      })([]);
    };
  };
  return function __do6() {
    var notificationCentreView = mkNotificationCentreView(notificationCentre)({
      containerId: notificationsId,
      renderNotifications: renderAnimatedNotifications
    })();
    return function(children2) {
      return fragment([leaf2(global3)({
        styles: append6(globalStyles)(append6(global4)(ourGobalStyle))
      }), div4("container")(mempty6)(children2), notificationCentreView, scrollableFullScreenLayerDiv(popOverId)(10), scrollableFullScreenLayerDiv(tooltipId)(20), fixedFullScreenLayerDiv(notificationsId)(300)]);
    };
  };
};

// output/Network.RemoteData/index.js
var NotAsked = /* @__PURE__ */ function() {
  function NotAsked2() {
  }
  ;
  NotAsked2.value = new NotAsked2();
  return NotAsked2;
}();
var Loading2 = /* @__PURE__ */ function() {
  function Loading3() {
  }
  ;
  Loading3.value = new Loading3();
  return Loading3;
}();
var Failure = /* @__PURE__ */ function() {
  function Failure2(value0) {
    this.value0 = value0;
  }
  ;
  Failure2.create = function(value0) {
    return new Failure2(value0);
  };
  return Failure2;
}();
var Success = /* @__PURE__ */ function() {
  function Success2(value0) {
    this.value0 = value0;
  }
  ;
  Success2.create = function(value0) {
    return new Success2(value0);
  };
  return Success2;
}();
var fromEither = function(v) {
  if (v instanceof Left) {
    return new Failure(v.value0);
  }
  ;
  if (v instanceof Right) {
    return new Success(v.value0);
  }
  ;
  throw new Error("Failed pattern match at Network.RemoteData (line 134, column 1 - line 134, column 55): " + [v.constructor.name]);
};

// output/React.Basic.DOM.Events/index.js
var preventDefault = /* @__PURE__ */ unsafeEventFn(function(e) {
  return unsafePerformEffect(function __do6() {
    e.preventDefault();
    return e;
  });
});
var clientY = /* @__PURE__ */ unsafeEventFn(function(e) {
  return toMaybe(e.clientY);
});
var clientX = /* @__PURE__ */ unsafeEventFn(function(e) {
  return toMaybe(e.clientX);
});

// output/UI.Hook.UseIPCMessage/index.js
var coerceHook3 = /* @__PURE__ */ coerceHook();
var bind17 = /* @__PURE__ */ bind10(ixBindRender);
var discard7 = /* @__PURE__ */ discard4(ixBindRender);
var applySecond3 = /* @__PURE__ */ applySecond(applyEffect);
var pure17 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var useIPCMessage = function(dictWriteForeign) {
  var write8 = write3(dictWriteForeign);
  return function(dictReadForeign) {
    var read8 = read3(dictReadForeign);
    return function(v) {
      return function(toChannel) {
        return function(fromChannel) {
          return coerceHook3(bind17(useState$prime(NotAsked.value))(function(v1) {
            return discard7(useEffectOnce(function __do6() {
              var listener = mkListener(function(v2) {
                return function(foreignMessage) {
                  var messageOrError = read8(foreignMessage);
                  return v1.value1(fromEither(messageOrError));
                };
              })();
              v.registerListener(fromChannel)(listener)();
              return v.removeListener(fromChannel)(listener);
            }))(function() {
              var send = function(msg) {
                return applySecond3(v1.value1(Loading2.value))(v.postMessage(toChannel)(write8(msg)));
              };
              return pure17(new Tuple(send, v1.value0));
            });
          }));
        };
      };
    };
  };
};

// output/Fahrtwind.Style.Divide/index.js
var css21 = /* @__PURE__ */ css3();
var nestChildren = function(inner) {
  return css21({
    "& > * + *": nested(inner)
  });
};
var divideY = function(pixels) {
  return nestChildren(function() {
    var $5 = pixels >= 0;
    if ($5) {
      return css21({
        borderTopWidth: px(pixels),
        borderTopStyle: solid
      });
    }
    ;
    return css21({
      borderBottomWidth: px(pixels),
      borderBottomStyle: solid
    });
  }());
};

// output/Fahrtwind.Style.PseudoClasses/index.js
var css22 = /* @__PURE__ */ css3();
var hover = function(style2) {
  return css22({
    "&:hover": nested(style2)
  });
};

// output/Fahrtwind.Style.Transition/index.js
var transition$prime = /* @__PURE__ */ function() {
  var $10 = css3();
  return function($11) {
    return $10(function(v) {
      return {
        transition: v
      };
    }($11));
  };
}();
var transition2 = function($12) {
  return transition$prime(str($12));
};

// output/Fahrtwind.Style.UserSelect/index.js
var css23 = /* @__PURE__ */ css3();
var userSelectNone = /* @__PURE__ */ css23({
  userSelect: none
});

// output/Plumage.Atom.PopOver.Types/index.js
var Centre = /* @__PURE__ */ function() {
  function Centre2() {
  }
  ;
  Centre2.value = new Centre2();
  return Centre2;
}();
var Start = /* @__PURE__ */ function() {
  function Start2() {
  }
  ;
  Start2.value = new Start2();
  return Start2;
}();
var End = /* @__PURE__ */ function() {
  function End3() {
  }
  ;
  End3.value = new End3();
  return End3;
}();
var Above = /* @__PURE__ */ function() {
  function Above2() {
  }
  ;
  Above2.value = new Above2();
  return Above2;
}();
var LeftOf = /* @__PURE__ */ function() {
  function LeftOf2() {
  }
  ;
  LeftOf2.value = new LeftOf2();
  return LeftOf2;
}();
var RightOf = /* @__PURE__ */ function() {
  function RightOf2() {
  }
  ;
  RightOf2.value = new RightOf2();
  return RightOf2;
}();
var Below = /* @__PURE__ */ function() {
  function Below2() {
  }
  ;
  Below2.value = new Below2();
  return Below2;
}();
var Placement = /* @__PURE__ */ function() {
  function Placement2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  Placement2.create = function(value0) {
    return function(value1) {
      return new Placement2(value0, value1);
    };
  };
  return Placement2;
}();
var DismissPopOverOnClickAway = /* @__PURE__ */ function() {
  function DismissPopOverOnClickAway2(value0) {
    this.value0 = value0;
  }
  ;
  DismissPopOverOnClickAway2.create = function(value0) {
    return new DismissPopOverOnClickAway2(value0);
  };
  return DismissPopOverOnClickAway2;
}();
var DismissPopOverOnClickOutsideTargetAnd = /* @__PURE__ */ function() {
  function DismissPopOverOnClickOutsideTargetAnd2(value0) {
    this.value0 = value0;
  }
  ;
  DismissPopOverOnClickOutsideTargetAnd2.create = function(value0) {
    return new DismissPopOverOnClickOutsideTargetAnd2(value0);
  };
  return DismissPopOverOnClickOutsideTargetAnd2;
}();
var DismissPopOverOnClickOutsideElements = /* @__PURE__ */ function() {
  function DismissPopOverOnClickOutsideElements2(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
  }
  ;
  DismissPopOverOnClickOutsideElements2.create = function(value0) {
    return function(value1) {
      return new DismissPopOverOnClickOutsideElements2(value0, value1);
    };
  };
  return DismissPopOverOnClickOutsideElements2;
}();
var DismissOnClickAway = /* @__PURE__ */ function() {
  function DismissOnClickAway2(value0) {
    this.value0 = value0;
  }
  ;
  DismissOnClickAway2.create = function(value0) {
    return new DismissOnClickAway2(value0);
  };
  return DismissOnClickAway2;
}();
var DismissOnClickOutsideElements = /* @__PURE__ */ function() {
  function DismissOnClickOutsideElements2(value0) {
    this.value0 = value0;
  }
  ;
  DismissOnClickOutsideElements2.create = function(value0) {
    return new DismissOnClickOutsideElements2(value0);
  };
  return DismissOnClickOutsideElements2;
}();
var eqSecondaryPlacement = {
  eq: function(x) {
    return function(y) {
      if (x instanceof Centre && y instanceof Centre) {
        return true;
      }
      ;
      if (x instanceof Start && y instanceof Start) {
        return true;
      }
      ;
      if (x instanceof End && y instanceof End) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq3 = /* @__PURE__ */ eq(eqSecondaryPlacement);
var eqPrimaryPlacement = {
  eq: function(x) {
    return function(y) {
      if (x instanceof Above && y instanceof Above) {
        return true;
      }
      ;
      if (x instanceof LeftOf && y instanceof LeftOf) {
        return true;
      }
      ;
      if (x instanceof RightOf && y instanceof RightOf) {
        return true;
      }
      ;
      if (x instanceof Below && y instanceof Below) {
        return true;
      }
      ;
      return false;
    };
  }
};
var eq12 = /* @__PURE__ */ eq(eqPrimaryPlacement);
var eqPlacement = {
  eq: function(x) {
    return function(y) {
      return eq12(x.value0)(y.value0) && eq3(x.value1)(y.value1);
    };
  }
};
var toDismissBehaviour = function(targetRef) {
  return function(v) {
    if (v instanceof DismissPopOverOnClickAway) {
      return new DismissOnClickAway(v.value0);
    }
    ;
    if (v instanceof DismissPopOverOnClickOutsideTargetAnd) {
      return new DismissOnClickOutsideElements(cons$prime(targetRef)(v.value0));
    }
    ;
    if (v instanceof DismissPopOverOnClickOutsideElements) {
      return new DismissOnClickOutsideElements(cons$prime(v.value0)(v.value1));
    }
    ;
    throw new Error("Failed pattern match at Plumage.Atom.PopOver.Types (line 15, column 32 - line 20, column 55): " + [v.constructor.name]);
  };
};

// output/Fahrtwind.Style.Transform/index.js
var css24 = /* @__PURE__ */ css3();
var transform$prime = function(t) {
  return css24({
    transform: t
  });
};
var transform = function($6) {
  return transform$prime(str($6));
};

// output/Plumage.Hooks.UseRenderInPortal/index.js
var coerceHook4 = /* @__PURE__ */ coerceHook();
var bind18 = /* @__PURE__ */ bind10(ixBindRender);
var foldMap7 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
var discard8 = /* @__PURE__ */ discard4(ixBindRender);
var when5 = /* @__PURE__ */ when(applicativeEffect);
var bind19 = /* @__PURE__ */ bind(bindEffect);
var mempty7 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
var pure18 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var useRenderInPortal2 = function(portalId) {
  return coerceHook4(bind18(useState$prime(Nothing.value))(function(v) {
    var renderInPortal = function(jsx3) {
      return foldMap7(createPortal(jsx3))(v.value0);
    };
    return discard8(useEffectOnce(function __do6() {
      when5(isNothing(v.value0))(bind19(findElementByIdInDocument(portalId))(v.value1))();
      return mempty7();
    }))(function() {
      return pure18(renderInPortal);
    });
  }));
};

// output/Plumage.Atom.Modal.View/index.js
var append7 = /* @__PURE__ */ append(semigroupStyle);
var bind20 = /* @__PURE__ */ bind10(ixBindRender);
var pure19 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var guard4 = /* @__PURE__ */ guard2(monoidJSX);
var div$prime5 = /* @__PURE__ */ div$prime();
var clickAwayStyle = /* @__PURE__ */ append7(widthScreen)(/* @__PURE__ */ append7(heightScreen)(/* @__PURE__ */ append7(positionFixed)(/* @__PURE__ */ append7(/* @__PURE__ */ left(0))(/* @__PURE__ */ append7(/* @__PURE__ */ top6(0))(acceptClicks)))));
var mkClickAway = /* @__PURE__ */ component("Clickaway")(function(v) {
  return bind20(useRenderInPortal2(v.clickAwayId))(function(renderInPortal) {
    return pure19(guard4(v.isVisible)(renderInPortal(styledLeaf(div$prime5)({
      className: "click-away",
      css: append7(clickAwayStyle)(v.css),
      onMouseUp: handler_(v.hide),
      onTouchEnd: handler_(v.hide)
    }))));
  });
});

// output/Plumage.Hooks.UseResize2/index.js
var mapFlipped6 = /* @__PURE__ */ mapFlipped(functorEffect);
var discard9 = /* @__PURE__ */ discard(discardUnit);
var coerceHook5 = /* @__PURE__ */ coerceHook();
var bind110 = /* @__PURE__ */ bind10(ixBindRender);
var zero3 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons({
  reflectSymbol: function() {
    return "innerHeight";
  }
})()(/* @__PURE__ */ semiringRecordCons({
  reflectSymbol: function() {
    return "innerWidth";
  }
})()(semiringRecordNil)(semiringNumber))(semiringNumber)));
var bind23 = /* @__PURE__ */ bind(bindAff);
var liftEffect9 = /* @__PURE__ */ liftEffect(monadEffectAff);
var discard32 = /* @__PURE__ */ discard9(bindAff);
var for_5 = /* @__PURE__ */ for_(applicativeAff)(foldableMaybe);
var abs3 = /* @__PURE__ */ abs(ordNumber)(ringNumber);
var pure23 = /* @__PURE__ */ pure(applicativeAff);
var setSizeFromWindow = function(setSize3) {
  return function __do6() {
    var window2 = windowImpl();
    var innerWidth2 = mapFlipped6(innerWidth(window2))(toNumber)();
    var innerHeight2 = mapFlipped6(innerHeight(window2))(toNumber)();
    return setSize3({
      innerWidth: innerWidth2,
      innerHeight: innerHeight2
    })();
  };
};
var makeListener = function(setSize3) {
  return eventListener($$const(setSizeFromWindow(setSize3)));
};
var eventType = "resize";
var useOnResize = function(dictDuration) {
  var fromDuration2 = fromDuration(dictDuration);
  return function(debounceBy) {
    return function(callback2) {
      return coerceHook5(bind110(useRef(Nothing.value))(function(fiberRef) {
        return bind110(useRef(zero3))(function(sizeRef) {
          var layoutEffect = function __do6() {
            setSizeFromWindow(writeRef(sizeRef))();
            var v = makeListener(function(v2) {
              var aff = bind23(liftEffect9(readRef(fiberRef)))(function(fiber\u0294) {
                return discard32(for_5(fiber\u0294)(killFiber(error("Fiber cancelled"))))(function() {
                  return discard32(delay(fromDuration2(debounceBy)))(function() {
                    return bind23(liftEffect9(readRef(sizeRef)))(function(size8) {
                      var deltaWidth = abs3(size8.innerWidth - v2.innerWidth);
                      var deltaHeight = abs3(size8.innerHeight - v2.innerWidth);
                      return discard32(liftEffect9(writeRef(sizeRef)(v2)))(function() {
                        return discard32(liftEffect9(callback2({
                          innerWidth: v2.innerWidth,
                          innerHeight: v2.innerHeight,
                          deltaWidth,
                          deltaHeight
                        })))(function() {
                          return pure23(unit);
                        });
                      });
                    });
                  });
                });
              });
              return function __do7() {
                var v12 = launchAff(aff)();
                return writeRef(fiberRef)(new Just(v12))();
              };
            })();
            var v1 = mapFlipped6(windowImpl)(toEventTarget2)();
            addEventListener(eventType)(v)(false)(v1)();
            return launchAff_(bind23(liftEffect9(readRef(fiberRef)))(function(fiber\u0294) {
              return for_5(fiber\u0294)(killFiber(error("Fiber cancelled")));
            }));
          };
          return useEffectOnce(layoutEffect);
        });
      }));
    };
  };
};

// output/Web.UIEvent.MouseEvent/foreign.js
function clientX2(e) {
  return e.clientX;
}
function clientY2(e) {
  return e.clientY;
}

// output/Web.UIEvent.MouseEvent/index.js
var fromEvent = /* @__PURE__ */ unsafeReadProtoTagged("MouseEvent");

// output/Plumage.Atom.PopOver.View/index.js
var eq4 = /* @__PURE__ */ eq(eqPrimaryPlacement);
var bind21 = /* @__PURE__ */ bind(bindEffect);
var bind111 = /* @__PURE__ */ bind10(ixBindRender);
var bottomIsSymbol = {
  reflectSymbol: function() {
    return "bottom";
  }
};
var heightIsSymbol = {
  reflectSymbol: function() {
    return "height";
  }
};
var leftIsSymbol = {
  reflectSymbol: function() {
    return "left";
  }
};
var rightIsSymbol = {
  reflectSymbol: function() {
    return "right";
  }
};
var topIsSymbol = {
  reflectSymbol: function() {
    return "top";
  }
};
var widthIsSymbol = {
  reflectSymbol: function() {
    return "width";
  }
};
var xIsSymbol = {
  reflectSymbol: function() {
    return "x";
  }
};
var yIsSymbol = {
  reflectSymbol: function() {
    return "y";
  }
};
var zero4 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons(bottomIsSymbol)()(/* @__PURE__ */ semiringRecordCons(heightIsSymbol)()(/* @__PURE__ */ semiringRecordCons(leftIsSymbol)()(/* @__PURE__ */ semiringRecordCons(rightIsSymbol)()(/* @__PURE__ */ semiringRecordCons(topIsSymbol)()(/* @__PURE__ */ semiringRecordCons(widthIsSymbol)()(/* @__PURE__ */ semiringRecordCons(xIsSymbol)()(/* @__PURE__ */ semiringRecordCons(yIsSymbol)()(semiringRecordNil)(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber)));
var when6 = /* @__PURE__ */ when(applicativeEffect);
var mapFlipped7 = /* @__PURE__ */ mapFlipped(functorMaybe);
var for_6 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
var unless3 = /* @__PURE__ */ unless(applicativeEffect);
var eq13 = /* @__PURE__ */ eq(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()(yIsSymbol)(eqNumber))()(xIsSymbol)(eqNumber))()(widthIsSymbol)(eqNumber))()(topIsSymbol)(eqNumber))()(rightIsSymbol)(eqNumber))()(leftIsSymbol)(eqNumber))()(heightIsSymbol)(eqNumber))()(bottomIsSymbol)(eqNumber)));
var discard10 = /* @__PURE__ */ discard4(ixBindRender);
var monoidEffect2 = /* @__PURE__ */ monoidEffect(monoidUnit);
var mempty8 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect2));
var pure20 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var mempty1 = /* @__PURE__ */ mempty(monoidJSX);
var styled4 = /* @__PURE__ */ styled();
var div$prime6 = /* @__PURE__ */ div$prime();
var $$for4 = /* @__PURE__ */ $$for(applicativeEffect)(traversableNonEmptyArray);
var mapFlipped1 = /* @__PURE__ */ mapFlipped(functorEffect);
var foldMap8 = /* @__PURE__ */ foldMap(foldableMaybe);
var foldMap12 = /* @__PURE__ */ foldMap8(monoidCSS);
var initial3 = /* @__PURE__ */ initial();
var apply6 = /* @__PURE__ */ apply(applyEffect);
var map31 = /* @__PURE__ */ map(functorEffect);
var exit4 = /* @__PURE__ */ exit2();
var for_1 = /* @__PURE__ */ for_(applicativeST)(foldableMaybe);
var mapFlipped22 = /* @__PURE__ */ mapFlipped(functorST);
var notEq3 = /* @__PURE__ */ notEq(eqPlacement);
var animate5 = /* @__PURE__ */ animate3();
var mempty22 = /* @__PURE__ */ mempty(monoidEffect2);
var $$void6 = /* @__PURE__ */ $$void(functorEffect);
var useOnResize2 = /* @__PURE__ */ useOnResize(durationMilliseconds);
var guard5 = /* @__PURE__ */ guard2(monoidJSX);
var foldMap23 = /* @__PURE__ */ foldMap8(monoidJSX);
var el3 = /* @__PURE__ */ el();
var animatePresence3 = /* @__PURE__ */ animatePresence();
var div12 = /* @__PURE__ */ div6();
var toTransformOrigin = function(v) {
  var secondaryOrigin = function() {
    if (v.value1 instanceof Centre) {
      return "center";
    }
    ;
    if (v.value1 instanceof Start && (eq4(v.value0)(Above.value) || eq4(v.value0)(Below.value))) {
      return "left";
    }
    ;
    if (v.value1 instanceof Start) {
      return "top";
    }
    ;
    if (v.value1 instanceof End && (eq4(v.value0)(Above.value) || eq4(v.value0)(Below.value))) {
      return "right";
    }
    ;
    if (v.value1 instanceof End) {
      return "bottom";
    }
    ;
    throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 250, column 21 - line 255, column 19): " + [v.value1.constructor.name]);
  }();
  var primaryOrigin = function() {
    if (v.value0 instanceof Above) {
      return "bottom";
    }
    ;
    if (v.value0 instanceof LeftOf) {
      return "right";
    }
    ;
    if (v.value0 instanceof RightOf) {
      return "left";
    }
    ;
    if (v.value0 instanceof Below) {
      return "top";
    }
    ;
    throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 245, column 19 - line 249, column 18): " + [v.value0.constructor.name]);
  }();
  return primaryOrigin + (" " + secondaryOrigin);
};
var toAbsoluteCSS = function(bb) {
  return function(v) {
    if (v.value0 instanceof Above && v.value1 instanceof Centre) {
      return css({
        top: bb.top,
        left: bb.left + bb.width / 2,
        transform: "translate(-50%, -100%)"
      });
    }
    ;
    if (v.value0 instanceof Above && v.value1 instanceof Start) {
      return css({
        top: bb.top,
        left: bb.left,
        transform: "translate(0, -100%)"
      });
    }
    ;
    if (v.value0 instanceof Above && v.value1 instanceof End) {
      return css({
        top: bb.top,
        left: bb.right,
        transform: "translate(-100%, -100%)"
      });
    }
    ;
    if (v.value0 instanceof RightOf && v.value1 instanceof Centre) {
      return css({
        top: bb.top + bb.height / 2,
        left: bb.right,
        transform: "translate(0, -50%)"
      });
    }
    ;
    if (v.value0 instanceof RightOf && v.value1 instanceof Start) {
      return css({
        top: bb.top,
        left: bb.right
      });
    }
    ;
    if (v.value0 instanceof RightOf && v.value1 instanceof End) {
      return css({
        top: bb.bottom,
        left: bb.right,
        transform: "translate(0, -100%)"
      });
    }
    ;
    if (v.value0 instanceof LeftOf && v.value1 instanceof Centre) {
      return css({
        top: bb.top + bb.height / 2,
        left: bb.left,
        transform: "translate(-100%, -50%)"
      });
    }
    ;
    if (v.value0 instanceof LeftOf && v.value1 instanceof Start) {
      return css({
        top: bb.top,
        left: bb.left,
        transform: "translate(-100%, 0)"
      });
    }
    ;
    if (v.value0 instanceof LeftOf && v.value1 instanceof End) {
      return css({
        top: bb.bottom,
        left: bb.left,
        transform: "translate(-100%, -100%)"
      });
    }
    ;
    if (v.value0 instanceof Below && v.value1 instanceof Centre) {
      return css({
        top: bb.bottom,
        left: bb.left + bb.width / 2,
        transform: "translate(-50%, 0)"
      });
    }
    ;
    if (v.value0 instanceof Below && v.value1 instanceof Start) {
      return css({
        top: bb.bottom,
        left: bb.left
      });
    }
    ;
    if (v.value0 instanceof Below && v.value1 instanceof End) {
      return css({
        top: bb.bottom,
        left: bb.right,
        transform: "translate(-100%, 0)"
      });
    }
    ;
    throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 303, column 3 - line 361, column 8): " + [v.value0.constructor.name, v.value1.constructor.name]);
  };
};
var popOverStyle = /* @__PURE__ */ append(semigroupStyle)(positionAbsolute)(acceptClicks);
var mkPopOver = function __do3() {
  var clickAway = mkClickAway();
  return component("popOver")(function(props) {
    return bind111(useState$prime(zero4))(function(v) {
      var recalc = when6(props.isVisible)(function __do6() {
        var bb\u0294 = getBoundingBoxFromRef(props.placementRef)();
        var fromTop = bind21(windowImpl)(scrollY)();
        var fromLeft = bind21(windowImpl)(scrollX)();
        var adjustedBb\u0294 = mapFlipped7(bb\u0294)(function(bb) {
          return {
            top: bb.top + fromTop,
            left: bb.left + fromLeft,
            right: bb.right + fromLeft,
            bottom: bb.bottom + fromTop,
            height: bb.height,
            width: bb.width,
            x: bb.x,
            y: bb.y
          };
        });
        return for_6(adjustedBb\u0294)(function(newBb) {
          return unless3(eq13(v.value0)(newBb))(v.value1(newBb));
        })();
      });
      return discard10(useEffectAlways(function __do6() {
        recalc();
        return mempty8();
      }))(function() {
        return bind111(useRenderInPortal2(props.containerId))(function(renderInPortal) {
          return pure20(fragment([function() {
            if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickAway) {
              return clickAway({
                css: props.dismissBehaviour\u0294.value0.value0.css,
                hide: props.hide,
                isVisible: props.isVisible,
                clickAwayId: props.dismissBehaviour\u0294.value0.value0.id
              });
            }
            ;
            return mempty1;
          }(), renderInPortal(styled4(div$prime6)({
            className: "popOver",
            css: popOverStyle,
            style: toAbsoluteCSS(v.value0)(props.placement)
          })([props.content]))]));
        });
      });
    });
  })();
};
var mkPopOverView = function __do4() {
  var popOver = mkPopOver();
  return component("PopOverView")(function(props) {
    return bind111(useState$prime(Nothing.value))(function(v) {
      return bind111(useState$prime(false))(function(v1) {
        return bind111(useState$prime(Nothing.value))(function(v2) {
          return bind111(useRef(nullImpl))(function(contentRef) {
            return bind111(useRef(nullImpl))(function(motionRef) {
              return discard10(useEffectAlways(function __do6() {
                when6(isNothing(props.child\u0294))(v2.value1(Nothing.value))();
                return mempty8();
              }))(function() {
                return discard10(useEffectAlways(function() {
                  if (props.dismissBehaviour\u0294 instanceof Nothing) {
                    return mempty8;
                  }
                  ;
                  if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickAway) {
                    return mempty8;
                  }
                  ;
                  if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickOutsideElements) {
                    return function __do6() {
                      var maybeBbs\u0294 = $$for4(props.dismissBehaviour\u0294.value0.value0)(getBoundingBoxFromRef)();
                      var bbs\u0294 = fromArray(catMaybes2(maybeBbs\u0294));
                      if (bbs\u0294 instanceof Nothing) {
                        return mempty8();
                      }
                      ;
                      if (bbs\u0294 instanceof Just) {
                        var eventTarget = mapFlipped1(bind21(windowImpl)(document2))(toEventTarget)();
                        var listener = eventListener(function(e) {
                          return for_6(fromEvent(e))(function(mouseEvent) {
                            var x = toNumber(clientX2(mouseEvent));
                            var y = toNumber(clientY2(mouseEvent));
                            var clickedOutside = all3(function(v3) {
                              return x < v3.left || (x > v3.right || (y < v3.top || y > v3.bottom));
                            })(bbs\u0294.value0);
                            return when6(clickedOutside)(props.hide);
                          });
                        })();
                        addEventListener("mousedown")(listener)(true)(eventTarget)();
                        return removeEventListener2("mousedown")(listener)(true)(eventTarget);
                      }
                      ;
                      throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 68, column 11 - line 85, column 28): " + [bbs\u0294.constructor.name]);
                    };
                  }
                  ;
                  throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 60, column 7 - line 85, column 28): " + [props.dismissBehaviour\u0294.constructor.name]);
                }()))(function() {
                  var style2 = foldMap12(function(placement) {
                    return css({
                      transformOrigin: toTransformOrigin(placement)
                    });
                  })(v.value0);
                  var onAnimationStart2 = onAnimationStart(v1.value1(false));
                  var measureStyle = css({
                    visibility: "hidden",
                    outline: "pink",
                    border: "solid 10px red"
                  });
                  var initial1 = initial3(css({
                    scale: 0.25,
                    opacity: 0
                  }));
                  var getBBWidthAndHeight = apply6(apply6(map31(function(v3) {
                    return function(v4) {
                      return function(v5) {
                        return {
                          bb\u0294: v3,
                          w: v4,
                          h: v5
                        };
                      };
                    };
                  })(getBoundingBoxFromRef(contentRef)))(mapFlipped1(bind21(windowImpl)(innerWidth))(toNumber)))(mapFlipped1(bind21(windowImpl)(innerHeight))(toNumber));
                  var exit1 = exit4(css({
                    scale: 0.25,
                    opacity: 0,
                    transition: {
                      type: "spring",
                      bounce: 0.2,
                      duration: 0.3
                    }
                  }));
                  var calculatePlacement = function(v3) {
                    return function(oldPlacement) {
                      return mapFlipped7(v3.bb\u0294)(function(bb) {
                        var $193 = bb.height > v3.h || bb.width > v3.w;
                        if ($193) {
                          return oldPlacement;
                        }
                        ;
                        var $194 = bb.right > v3.w;
                        if ($194) {
                          return new Placement(LeftOf.value, oldPlacement.value1);
                        }
                        ;
                        var $195 = bb.left < 0;
                        if ($195) {
                          return new Placement(RightOf.value, oldPlacement.value1);
                        }
                        ;
                        var $196 = bb.top < 0;
                        if ($196) {
                          return new Placement(Below.value, oldPlacement.value1);
                        }
                        ;
                        var $197 = bb.bottom > v3.h;
                        if ($197) {
                          return new Placement(Above.value, oldPlacement.value1);
                        }
                        ;
                        return oldPlacement;
                      });
                    };
                  };
                  var getBestPlacement = function(bbWidthAndHeight) {
                    return function(oldPlacement) {
                      return function __do6() {
                        var pRef = {
                          value: oldPlacement
                        };
                        var getNewPlacement = function __do7() {
                          var newPlacement = calculatePlacement(bbWidthAndHeight)(pRef.value);
                          return for_1(newPlacement)(function(v3) {
                            return write2(v3)(pRef);
                          })();
                        };
                        getNewPlacement();
                        (function() {
                          while (mapFlipped22(read2(pRef))(function(v3) {
                            return notEq3(v3)(pRef.value);
                          })()) {
                            getNewPlacement();
                          }
                          ;
                          return {};
                        })();
                        return pRef.value;
                      }();
                    };
                  };
                  var animate1 = animate5(css({
                    scale: 1,
                    opacity: 1,
                    y: 0,
                    transition: {
                      type: "spring",
                      bounce: 0.16,
                      duration: 0.3
                    }
                  }));
                  var onAnimationComplete2 = onAnimationComplete(function(fgn) {
                    var $203 = reallyUnsafeRefEq(fgn)(exit1);
                    if ($203) {
                      return v.value1(Nothing.value);
                    }
                    ;
                    var $204 = reallyUnsafeRefEq(fgn)(animate1);
                    if ($204) {
                      return v1.value1(true);
                    }
                    ;
                    return mempty22;
                  });
                  var recalculatePlacement = function() {
                    if (props.child\u0294 instanceof Just) {
                      return $$void6(bind21(windowImpl)(requestAnimationFrame2($$void6(bind21(windowImpl)(requestAnimationFrame2($$void6(bind21(windowImpl)(requestAnimationFrame2(function __do6() {
                        var bbWidthAndHeight = getBBWidthAndHeight();
                        for_6(bbWidthAndHeight.bb\u0294)(function(v3) {
                          var newPlacement = getBestPlacement(bbWidthAndHeight)(props.placement);
                          return v.value1(new Just(newPlacement));
                        })();
                        return v2.value1(new Just(props.child\u0294.value0))();
                      })))))))));
                    }
                    ;
                    if (props.child\u0294 instanceof Nothing) {
                      return v2.value1(Nothing.value);
                    }
                    ;
                    throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 169, column 9 - line 184, column 36): " + [props.child\u0294.constructor.name]);
                  }();
                  return discard10(useLayoutEffectAlways(function __do6() {
                    recalculatePlacement();
                    return mempty8();
                  }))(function() {
                    return discard10(useOnResize2(200)(function(v3) {
                      return v2.value1(Nothing.value);
                    }))(function() {
                      return pure20(popOver({
                        isVisible: isJust(props.child\u0294),
                        dismissBehaviour\u0294: props.dismissBehaviour\u0294,
                        containerId: props.containerId,
                        hide: props.hide,
                        placement: fromMaybe(props.placement)(v.value0),
                        placementRef: props.placementRef,
                        content: fragment([guard5(isNothing(v2.value0))(foldMap23(function(child) {
                          return el3(div$prime6)({
                            ref: contentRef,
                            style: measureStyle
                          })([child]);
                        })(props.child\u0294)), el3(animatePresence3)({})([foldMap23(function(child) {
                          return el3(div12)({
                            key: "popOver",
                            style: style2,
                            initial: initial1,
                            animate: animate1,
                            exit: exit1,
                            onAnimationComplete: onAnimationComplete2,
                            onAnimationStart: onAnimationStart2,
                            ref: motionRef
                          })([child]);
                        })(v2.value0)])])
                      }));
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  })();
};

// output/Plumage.Hooks.UsePopOver/index.js
var coerceHook6 = /* @__PURE__ */ coerceHook();
var bind24 = /* @__PURE__ */ bind10(ixBindRender);
var when7 = /* @__PURE__ */ when(applicativeEffect);
var mapFlipped8 = /* @__PURE__ */ mapFlipped(functorMaybe);
var pure21 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var unless4 = /* @__PURE__ */ unless(applicativeEffect);
var popOverComponent = /* @__PURE__ */ unsafePerformEffect(mkPopOverView);
var usePopOver = function(options2) {
  return coerceHook6(bind24(useState$prime(false))(function(v) {
    return bind24(useRef(nullImpl))(function(targetRef) {
      var renderInPopOver = function(content3) {
        return popOverComponent({
          hide: when7(v.value0)(v.value1(false)),
          child\u0294: function() {
            if (v.value0) {
              return new Just(content3);
            }
            ;
            return Nothing.value;
          }(),
          placementRef: targetRef,
          placement: options2.placement,
          dismissBehaviour\u0294: mapFlipped8(options2.dismissBehaviour\u0294)(toDismissBehaviour(targetRef)),
          containerId: options2.containerId
        });
      };
      return pure21({
        targetRef,
        renderInPopOver,
        hidePopOver: when7(v.value0)(v.value1(false)),
        showPopOver: unless4(v.value0)(v.value1(true)),
        isVisible: v.value0
      });
    });
  }));
};

// output/Data.Interpolate/index.js
var interpString = {
  interp: function(a3) {
    return a3;
  }
};
var interp = function(dict) {
  return dict.interp;
};
var interpStringFunction = function(dictInterp) {
  var interp1 = interp(dictInterp);
  return {
    interp: function(a3) {
      return function(b3) {
        return interp1(a3 + b3);
      };
    }
  };
};
var i2 = function(dictInterp) {
  return interp(dictInterp)("");
};

// output/Yoga.Block.Atom.Button.Style/index.js
var css25 = /* @__PURE__ */ css3();
var append8 = /* @__PURE__ */ append(semigroupStyleProperty);
var nest4 = /* @__PURE__ */ nest2()();
var gradientBackground = /* @__PURE__ */ function() {
  return str(i2(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpString))))))))))))("linear-gradient(0deg,")(colour.highlightDarker)(",")(colour.highlightLighter)(")")(",")("linear-gradient(225deg,")(colour.highlightRotatedBackwards)(",")(colour.highlightRotatedForwards)(")"));
}();
var backgroundAnimation = /* @__PURE__ */ keyframes2()({
  from: /* @__PURE__ */ css25({
    backgroundPosition: /* @__PURE__ */ str("0% 50%")
  }),
  to: /* @__PURE__ */ css25({
    backgroundPosition: /* @__PURE__ */ str("100% 50%")
  })
});
var button4 = /* @__PURE__ */ function() {
  return css25({
    background: str(colour.backgroundLayer5),
    borderWidth: $$int(0),
    position: relative2,
    overflow: hidden,
    boxShadow: str("0 1px 4px rgba(100,100,120,0.3), 0 1px 2px rgba(100,100,100,0.2)"),
    display: inlineFlex,
    padding: str("calc(var(--s-1) * 0.8) var(--s0)"),
    paddingBottom: str("calc(var(--s-1) * 0.8 + 1px)"),
    justifyContent: center,
    alignItems: center,
    borderRadius: $$var2("--s-1"),
    color: str(colour.text),
    touchAction: manipulation,
    boxSizing: borderBox,
    fontSize: str(size7.text.interactive),
    fontFamily: $$var2("--mainFont"),
    fontWeight: str("500"),
    letterSpacing: str("calc(var(--s-5)* (-0.1))"),
    userSelect: none,
    transition: append8(str("all 0.2s ease-out"))(str("transform 50ms ease-in")),
    "& > .ry-drip": nested(zIndex(0)),
    "& > :not(.ry-drip)": nested(zIndex(1)),
    '&[data-button-shape="flat"]': nested(append(semigroupStyle)(hover(background$prime(col2.highlightAlpha10)))(css25({
      background: str("transparent"),
      boxShadow: none,
      color: str(colour.highlight),
      "&:active": nest4({
        boxShadow: none
      }),
      '&[data-button-type="primary"]': nest4({
        background: str(colour.highlight),
        boxShadow: none
      })
    }))),
    '&[data-button-shape="pill"]': nest4({
      borderRadius: str("calc(var(--s1) * 0.85)"),
      padding: str("calc(var(--s-1) * 0.85) var(--s0)"),
      paddingBottom: str("calc(var(--s-1))")
    }),
    '&[data-button-type="primary"]': nest4({
      background: gradientBackground,
      backgroundSize: str("200% 200%"),
      fontWeight: str("500"),
      letterSpacing: str("calc(var(--s-5)* (0.1))"),
      animation: append8(backgroundAnimation)(str(" alternate ease-out 10s infinite")),
      boxShadow: str("0 1px 4px 0px rgba(0,0,0,0.40)"),
      borderColor: str("transparent"),
      color: str(colour.highlightText),
      "&:focus-visible": nest4({
        borderColor: col2.background
      }),
      "&:active": nest4({
        boxShadow: str("inset 0 1px 6px rgba(0,0,0,0.40)")
      })
    }),
    '&[data-button-type="dangerous"]': nest4({
      color: str(colour.interfaceDangerousText),
      background: str(colour.interfaceBackgroundDangerous),
      fontWeight: str("500"),
      letterSpacing: str("calc(var(--s-5) * -0.10)")
    }),
    "&:focus": nest4({
      outline: none
    }),
    "&:focus-visible": nest4({
      boxShadow: str("0 0 0 var(--s-4) " + colour.highlight)
    }),
    "&:active": nest4({
      boxShadow: str("inset 0 1px calc(var(--s0) * var(--dark-mode) + var(--s-2) * var(--light-mode)) rgba(0,0,0, calc(0.18 * var(--dark-mode) + 0.09 * var(--light-mode)))"),
      transform: str("scale3d(0.96,0.96,0.36)"),
      transition: str("transform 100ms ease")
    }),
    "&:disabled, &:disabled:active": nest4({
      color: str(colour.interfaceTextDisabled),
      boxShadow: none,
      background: str(colour.interfaceBackgroundDisabled),
      transform: str("none")
    })
  });
}();

// output/Yoga.Block.Atom.Button.Types/index.js
var Primary = /* @__PURE__ */ function() {
  function Primary2() {
  }
  ;
  Primary2.value = new Primary2();
  return Primary2;
}();
var Dangerous = /* @__PURE__ */ function() {
  function Dangerous2() {
  }
  ;
  Dangerous2.value = new Dangerous2();
  return Dangerous2;
}();
var Generic = /* @__PURE__ */ function() {
  function Generic2() {
  }
  ;
  Generic2.value = new Generic2();
  return Generic2;
}();
var Rounded = /* @__PURE__ */ function() {
  function Rounded2() {
  }
  ;
  Rounded2.value = new Rounded2();
  return Rounded2;
}();
var Pill = /* @__PURE__ */ function() {
  function Pill2() {
  }
  ;
  Pill2.value = new Pill2();
  return Pill2;
}();
var Flat = /* @__PURE__ */ function() {
  function Flat2() {
  }
  ;
  Flat2.value = new Flat2();
  return Flat2;
}();
var renderButtonType = function(v) {
  if (v instanceof Primary) {
    return "primary";
  }
  ;
  if (v instanceof Generic) {
    return "generic";
  }
  ;
  if (v instanceof Dangerous) {
    return "dangerous";
  }
  ;
  throw new Error("Failed pattern match at Yoga.Block.Atom.Button.Types (line 13, column 20 - line 16, column 27): " + [v.constructor.name]);
};
var renderButtonShape = function(v) {
  if (v instanceof Rounded) {
    return "rounded";
  }
  ;
  if (v instanceof Pill) {
    return "pill";
  }
  ;
  if (v instanceof Flat) {
    return "flat";
  }
  ;
  throw new Error("Failed pattern match at Yoga.Block.Atom.Button.Types (line 26, column 21 - line 29, column 17): " + [v.constructor.name]);
};

// output/Yoga.Block.Hook.UseDrip/index.js
var coerceHook7 = /* @__PURE__ */ coerceHook();
var bind25 = /* @__PURE__ */ bind10(ixBindRender);
var merge3 = /* @__PURE__ */ merge2()(/* @__PURE__ */ mergeCons({
  reflectSymbol: function() {
    return "clientX";
  }
})()()()()(/* @__PURE__ */ mergeCons({
  reflectSymbol: function() {
    return "clientY";
  }
})()()()()(mergeNil)));
var apply7 = /* @__PURE__ */ apply(applyMaybe);
var map32 = /* @__PURE__ */ map(functorMaybe);
var for_7 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
var pure24 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var useDrip = function(ref) {
  return coerceHook7(bind25(useState$prime(false))(function(v) {
    return bind25(useState$prime(0))(function(v1) {
      return bind25(useState$prime(0))(function(v2) {
        var dripCompletedHandle = function __do6() {
          v.value1(false)();
          v1.value1(0)();
          return v2.value1(0)();
        };
        var clickHandler = handler(merge3({
          clientX,
          clientY
        }))(function(v3) {
          return function __do6() {
            var bb\u0294 = getBoundingBoxFromRef(ref)();
            var values\u0294 = apply7(apply7(map32(function(v4) {
              return function(v5) {
                return function(v6) {
                  return {
                    left: v4.left,
                    top: v4.top,
                    cx: v5,
                    cy: v6
                  };
                };
              };
            })(bb\u0294))(v3.clientX))(v3.clientY);
            return for_7(values\u0294)(function(v4) {
              return function __do7() {
                v.value1(true)();
                v1.value1(v4.cx - v4.left)();
                return v2.value1(v4.cy - v4.top)();
              };
            })();
          };
        });
        return pure24({
          visible: v.value0,
          x: v1.value0,
          y: v2.value0,
          onClick: clickHandler,
          onComplete: dripCompletedHandle
        });
      });
    });
  }));
};

// output/Web.DOM.Node/foreign.js
var getEffProp3 = function(name15) {
  return function(node) {
    return function() {
      return node[name15];
    };
  };
};
var baseURI = getEffProp3("baseURI");
var _ownerDocument = getEffProp3("ownerDocument");
var _parentNode = getEffProp3("parentNode");
var _parentElement = getEffProp3("parentElement");
var childNodes = getEffProp3("childNodes");
var _firstChild = getEffProp3("firstChild");
var _lastChild = getEffProp3("lastChild");
var _previousSibling = getEffProp3("previousSibling");
var _nextSibling = getEffProp3("nextSibling");
var _nodeValue = getEffProp3("nodeValue");
var textContent = getEffProp3("textContent");

// output/Web.DOM.Node/index.js
var toEventTarget3 = unsafeCoerce2;

// output/Fahrtwind.Style.Opacity/index.js
var css26 = /* @__PURE__ */ css3();
var opacity = function(amount) {
  return css26({
    opacity: num(toNumber(amount) / 100)
  });
};

// output/Yoga.Block.Quark.Drip.Style/index.js
var append9 = /* @__PURE__ */ append(semigroupStyle);
var css27 = /* @__PURE__ */ css3();
var expandAnimation = /* @__PURE__ */ keyframes2()({
  "0%": /* @__PURE__ */ append9(/* @__PURE__ */ opacity(0))(/* @__PURE__ */ transform("scale(0.25)")),
  "30%": /* @__PURE__ */ opacity(100),
  "80%": /* @__PURE__ */ opacity(50),
  "100%": /* @__PURE__ */ append9(/* @__PURE__ */ transform("scale(28)"))(/* @__PURE__ */ opacity(0))
});
var drip = /* @__PURE__ */ append9(positionAbsolute)(/* @__PURE__ */ append9(/* @__PURE__ */ left(0))(/* @__PURE__ */ append9(/* @__PURE__ */ right(0))(/* @__PURE__ */ append9(/* @__PURE__ */ top6(0))(/* @__PURE__ */ append9(/* @__PURE__ */ bottom6(0))(/* @__PURE__ */ css27({
  "& svg": /* @__PURE__ */ nested(/* @__PURE__ */ append9(positionAbsolute)(/* @__PURE__ */ css27({
    animation: /* @__PURE__ */ str("350ms linear x"),
    animationName: expandAnimation,
    animationFillMode: /* @__PURE__ */ str("forwards"),
    width: /* @__PURE__ */ $$var2("--s-1"),
    height: /* @__PURE__ */ $$var2("--s-1")
  })))
}))))));

// output/Yoga.Block.Quark.Drip.View/index.js
var bind26 = /* @__PURE__ */ bind10(ixBindRender);
var discard11 = /* @__PURE__ */ discard4(ixBindRender);
var foldMap9 = /* @__PURE__ */ foldMap(foldableMaybe)(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
var pure110 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var guard6 = /* @__PURE__ */ guard2(monoidJSX);
var styled5 = /* @__PURE__ */ styled();
var div$prime7 = /* @__PURE__ */ div$prime();
var el4 = /* @__PURE__ */ el();
var svg$prime2 = /* @__PURE__ */ svg$prime();
var g$prime2 = /* @__PURE__ */ g$prime();
var rect2 = /* @__PURE__ */ rect();
var component3 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent()()()("Drip")(function(v) {
  return bind26(useRef(nullImpl))(function(dripRef) {
    var left4 = function() {
      var $31 = v.x === nan;
      if ($31) {
        return 0;
      }
      ;
      return v.x - 10;
    }();
    var top7 = function() {
      var $32 = v.y === nan;
      if ($32) {
        return 0;
      }
      ;
      return v.y - 10;
    }();
    return discard11(useEffectAlways(function __do6() {
      var n\u0294 = readRefMaybe(dripRef)();
      return foldMap9(function(n) {
        var target5 = toEventTarget3(n);
        return function __do7() {
          var listener = eventListener($$const(v.onComplete))();
          addEventListener("animationend")(listener)(false)(target5)();
          return removeEventListener2("animationend")(listener)(false)(target5);
        };
      })(n\u0294)();
    }))(function() {
      return pure110(guard6(v.visible)(styled5(div$prime7)({
        css: drip,
        className: "ry-drip",
        ref: dripRef
      })([el4(svg$prime2)({
        width: "20",
        height: "20",
        viewBox: "0 0 20 20",
        style: css({
          top: top7,
          left: left4
        })
      })([el4(g$prime2)({
        stroke: "none",
        strokeWidth: "1",
        fill: "none",
        fillRule: "evenodd"
      })([el4(g$prime2)({
        className: "ry-drip-filler",
        fill: v.colour
      })([rect2({
        width: "100%",
        height: "100%",
        rx: "10"
      })])])])])));
    });
  });
}));

// output/Yoga.Block.Atom.Button.View/index.js
var bind27 = /* @__PURE__ */ bind10(ixBindRender);
var identity14 = /* @__PURE__ */ identity(categoryFn);
var leaf3 = /* @__PURE__ */ leaf();
var $$void7 = /* @__PURE__ */ $$void(functorEffect);
var fromHomogeneous4 = /* @__PURE__ */ fromHomogeneous();
var pure25 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var emotionButton2 = /* @__PURE__ */ emotionButton()();
var appendIfDefined2 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
var rawComponent = /* @__PURE__ */ mkForwardRefComponent("Button")(function(v) {
  return function(propsRef) {
    return bind27(useRef(nullImpl))(function(backupRef) {
      var ref = fromMaybe(backupRef)(forwardedRefAsMaybe(propsRef));
      var buttonType = getOrFlipped(v.buttonType)(Generic.value);
      var buttonShape = getOrFlipped(v.buttonShape)(Rounded.value);
      var ripple\u0294 = function() {
        if (buttonShape instanceof Flat) {
          if (buttonType instanceof Primary) {
            var $22 = fromMaybe(colour.highlightLighter);
            return function($23) {
              return Just.create($22($23));
            };
          }
          ;
          var $24 = fromMaybe(colour.highlightAlpha50);
          return function($25) {
            return Just.create($24($25));
          };
        }
        ;
        return identity14;
      }()(opToMaybe(v.ripple));
      return bind27(useDrip(ref))(function(dripValues) {
        var propsChildren = reactChildrenToArray(unsafeGet("children")(v));
        var children2 = reactChildrenFromArray(function() {
          if (ripple\u0294 instanceof Nothing) {
            return propsChildren;
          }
          ;
          if (ripple\u0294 instanceof Just) {
            return cons2(leaf3(component3)({
              className: "ry-button-drip",
              visible: dripValues.visible,
              x: dripValues.x,
              y: dripValues.y,
              onComplete: dripValues.onComplete,
              colour: ripple\u0294.value0
            }))(propsChildren);
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Atom.Button.View (line 57, column 43 - line 72, column 28): " + [ripple\u0294.constructor.name]);
        }());
        var onClick = function() {
          var v1 = uorToMaybe(unsafeGet("onClick")(v));
          if (v1 instanceof Just) {
            return handler(syntheticEvent)(function(e) {
              return function __do6() {
                $$void7(function() {
                  return v1.value0(e);
                })();
                return $$void7(function() {
                  return dripValues.onClick(e);
                })();
              };
            });
          }
          ;
          if (v1 instanceof Nothing) {
            return dripValues.onClick;
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Atom.Button.View (line 75, column 19 - line 80, column 40): " + [v1.constructor.name]);
        }();
        var props$prime = unsafeSet("children")(children2)(unsafeSet("onClick")(onClick)(v));
        var _data = fromHomogeneous4({
          "button-type": renderButtonType(buttonType),
          "button-shape": renderButtonShape(buttonShape)
        });
        return pure25(emotionButton2(ref)(props$prime)({
          className: "ry-button",
          css: appendIfDefined2(button4)(v.css),
          "_data": _data
        }));
      });
    });
  };
});
var component4 = function() {
  return rawComponent;
};

// output/Yoga.Block.Layout.Box.Style/index.js
var css28 = /* @__PURE__ */ css3();
var mempty9 = /* @__PURE__ */ mempty(monoidStyleProperty);
var map33 = /* @__PURE__ */ map(functorOptionalProp);
var appendIfDefined3 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
var box = function(props) {
  var styles = css28({
    padding: getOrFlipped(props.padding)(em2(1)),
    border: getOrFlipped(props.border)(str("0 solid")),
    borderTop: getOrFlipped(props.borderTop)(mempty9),
    borderRight: getOrFlipped(props.borderRight)(mempty9),
    borderBottom: getOrFlipped(props.borderBottom)(mempty9),
    borderLeft: getOrFlipped(props.borderLeft)(mempty9),
    borderRadius: getOrFlipped(props.borderRadius)(mempty9),
    background: getOrFlipped(map33(str)(props.background))(color(transparent)),
    color: getOrFlipped(props.foreground)(str("inherit")),
    boxShadow: getOrFlipped(props.boxShadow)(none),
    margin: _0
  });
  return appendIfDefined3(styles)(props.css);
};

// output/Yoga.Block.Layout.Box.View/index.js
var pure26 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var emotionDiv2 = /* @__PURE__ */ emotionDiv()();
var appendIfDefined4 = /* @__PURE__ */ appendIfDefined(semigroupString);
var rawComponent2 = /* @__PURE__ */ mkForwardRefComponent("Box")(function(v) {
  return function(ref) {
    return pure26(emotionDiv2(ref)(v)({
      className: appendIfDefined4("ry-box ")(v.className),
      css: box(v)
    }));
  };
});
var component8 = function() {
  return rawComponent2;
};

// output/Yoga.Block.Layout.Centre.Style/index.js
var css29 = /* @__PURE__ */ css3();
var appendIfDefined5 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
var centre = function(props) {
  var styles = css29({
    padding: getOrFlipped(props.padding)(px(0)),
    boxSizing: contentBox,
    marginLeft: auto,
    marginRight: auto,
    maxWidth: getOrFlipped(props.maxWidth)(ch(60)),
    textAlign: function() {
      var $2 = isTruthy(props.andText);
      if ($2) {
        return center;
      }
      ;
      return left2;
    }(),
    paddingLeft: getOrFlipped(props.gutters)(_0),
    paddingRight: getOrFlipped(props.gutters)(_0)
  });
  return appendIfDefined5(styles)(props.css);
};

// output/Yoga.Block.Layout.Centre.View/index.js
var pure27 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var emotionDiv3 = /* @__PURE__ */ emotionDiv()();
var appendIfDefined6 = /* @__PURE__ */ appendIfDefined(semigroupString);
var rawComponent3 = /* @__PURE__ */ mkForwardRefComponent("Centre")(function(v) {
  return function(ref) {
    return pure27(emotionDiv3(ref)(v)({
      className: appendIfDefined6("ry-centre ")(v.className),
      css: centre(v)
    }));
  };
});
var component9 = function() {
  return rawComponent3;
};

// output/Yoga.Block.Layout.Cluster.Style/index.js
var mapFlipped9 = /* @__PURE__ */ mapFlipped(functorOptionalProp);
var css30 = /* @__PURE__ */ css3();
var nest5 = /* @__PURE__ */ nest2()();
var map34 = /* @__PURE__ */ map(functorOptionalProp);
var appendIfDefined7 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
var cluster2 = function(props) {
  var space = getOrFlipped(mapFlipped9(props.space)(function(x) {
    var $8 = x === "0";
    if ($8) {
      return "0px";
    }
    ;
    return x;
  }))("var(--s1)");
  var styles = css30({
    "& > *": nest5({
      display: flex,
      flexWrap: wrap4,
      alignItems: getOrFlipped(map34(str)(props.align))(center),
      justifyContent: getOrFlipped(map34(str)(props.justify))(flexStart),
      margin: str("calc(" + (space + " / 2 * -1)"))
    }),
    "& > * > *": nest5({
      margin: str("calc(" + (space + " / 2)"))
    })
  });
  return appendIfDefined7(styles)(props.css);
};

// output/Yoga.Block.Layout.Cluster.View/index.js
var mapFlipped10 = /* @__PURE__ */ mapFlipped(functorArray);
var pure28 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var emotionDiv4 = /* @__PURE__ */ emotionDiv()();
var appendIfDefined8 = /* @__PURE__ */ appendIfDefined(semigroupString);
var rawComponent4 = /* @__PURE__ */ mkForwardRefComponent("Cluster")(function(v) {
  return function(ref) {
    var wrap6 = getOrFlipped(v.wrapper)(div_);
    var wrapChild = getOrFlipped(v.childWrapper)(div_);
    var safeChildren = reactChildrenToArray(v.children);
    var wrappedChildren = mapFlipped10(safeChildren)(wrapChild);
    return pure28(emotionDiv4(ref)(v)({
      className: appendIfDefined8("ry-cluster ")(v.className),
      css: cluster2(v),
      children: [wrap6(wrappedChildren)]
    }));
  };
});
var component10 = function() {
  return rawComponent4;
};

// output/Yoga.Block.Layout.Stack.Style/index.js
var css31 = /* @__PURE__ */ css3();
var nest6 = /* @__PURE__ */ nest2()();
var show14 = /* @__PURE__ */ show(showInt);
var nestDynamic2 = /* @__PURE__ */ nestDynamic();
var foldMap10 = /* @__PURE__ */ foldMap(foldableOptionalProp)(monoidStyle);
var append14 = /* @__PURE__ */ append(semigroupStyle);
var appendIfDefined9 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
var stack = function(props) {
  var styles = css31({
    display: flex,
    margin: _0,
    flexDirection: column,
    justifyContent: flexStart,
    "& > *": nest6({
      marginTop: _0,
      marginBottom: _0
    }),
    "& > * + *": nest6({
      margin: _0,
      marginTop: getOrFlipped(props.space)(rem2(1.5))
    })
  });
  var splitStyles = function() {
    var onlyChildStyle = css31({
      "&:only-child": nest6({
        height: percent(100)
      })
    });
    var nthChild = function(n) {
      return "& > div:nth-of-type(" + (show14(n) + ")");
    };
    var nthChildStyle = function(n) {
      return nestDynamic2(nthChild(n))({
        marginBottom: auto
      });
    };
    return foldMap10(function(n) {
      return append14(onlyChildStyle)(nthChildStyle(n));
    })(props.splitAfter);
  }();
  return append14(splitStyles)(appendIfDefined9(styles)(props.css));
};

// output/Yoga.Block.Layout.Stack.View/index.js
var mapFlipped11 = /* @__PURE__ */ mapFlipped(functorArray);
var el5 = /* @__PURE__ */ el();
var div8 = /* @__PURE__ */ div5();
var pure29 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var emotionDiv5 = /* @__PURE__ */ emotionDiv()();
var appendIfDefined10 = /* @__PURE__ */ appendIfDefined(semigroupString);
var rawComponent5 = /* @__PURE__ */ mkForwardRefComponent("Stack")(function(v) {
  return function(ref) {
    var safeChildren = reactChildrenToArray(v.children);
    var wrappedChildren = mapFlipped11(safeChildren)(function(c2) {
      return el5(div8)({})([c2]);
    });
    return pure29(emotionDiv5(ref)(v)({
      className: appendIfDefined10("ry-stack ")(v.className),
      css: stack(v),
      children: wrappedChildren
    }));
  };
});
var component11 = function() {
  return rawComponent5;
};

// output/Yoga.Block/index.js
var component24 = /* @__PURE__ */ component11();
var el6 = /* @__PURE__ */ el();
var component122 = /* @__PURE__ */ component10();
var component132 = /* @__PURE__ */ component9();
var component142 = /* @__PURE__ */ component4();
var component152 = /* @__PURE__ */ component8();
var stack$prime = function() {
  return component24;
};
var stack$prime1 = /* @__PURE__ */ stack$prime();
var stack2 = function() {
  return function() {
    return el6(stack$prime1);
  };
};
var stack_ = /* @__PURE__ */ stack2()()({});
var cluster$prime = function() {
  return component122;
};
var cluster$prime1 = /* @__PURE__ */ cluster$prime();
var cluster3 = function() {
  return function() {
    return el6(cluster$prime1);
  };
};
var centre$prime = function() {
  return component132;
};
var centre$prime1 = /* @__PURE__ */ centre$prime();
var centre2 = function() {
  return function() {
    return el6(centre$prime1);
  };
};
var centre_ = /* @__PURE__ */ centre2()()({});
var button$prime2 = function() {
  return component142;
};
var button$prime1 = /* @__PURE__ */ button$prime2();
var button8 = function() {
  return function() {
    return el6(button$prime1);
  };
};
var box$prime = function() {
  return component152;
};
var box$prime1 = /* @__PURE__ */ box$prime();
var box2 = function() {
  return function() {
    return el6(box$prime1);
  };
};
var box_ = /* @__PURE__ */ box2()()({});

// output/UI.Project/index.js
var pure30 = /* @__PURE__ */ pure(applicativeArray);
var cluster4 = /* @__PURE__ */ cluster3()();
var styled6 = /* @__PURE__ */ styled();
var div$prime8 = /* @__PURE__ */ div$prime();
var append10 = /* @__PURE__ */ append(semigroupStyle);
var a$prime2 = /* @__PURE__ */ a$prime();
var code$prime2 = /* @__PURE__ */ code$prime();
var css32 = /* @__PURE__ */ css3();
var bind28 = /* @__PURE__ */ bind10(ixBindRender);
var pure111 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var h2$prime2 = /* @__PURE__ */ h2$prime();
var guard7 = /* @__PURE__ */ guard2(monoidStyle);
var stack3 = /* @__PURE__ */ stack2()();
var foldMap11 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
var label$prime2 = /* @__PURE__ */ label$prime();
var el7 = /* @__PURE__ */ el();
var span$prime2 = /* @__PURE__ */ span$prime();
var mapFlipped12 = /* @__PURE__ */ mapFlipped(functorArray);
var renderDependency = function(packages) {
  return function(v) {
    return li_(pure30(function() {
      var v1 = lookup2(v)(packages);
      if (v1 instanceof Nothing) {
        return text(v);
      }
      ;
      if (v1 instanceof Just) {
        return cluster4({
          wrapper: styled6(div$prime8)({
            css: append10(mXY(0))(pXY(0))
          })
        })([styled6(a$prime2)({
          css: hover(underline),
          href: v1.value0.repo
        })([text(v)]), styled6(code$prime2)({
          css: append10(textSm)(textCol$prime(col2.textPaler3))
        })([text(v1.value0.version)])]);
      }
      ;
      throw new Error("Failed pattern match at UI.Project (line 63, column 3 - line 73, column 10): " + [v1.constructor.name]);
    }()));
  };
};
var nestChildren2 = function(inner) {
  return css32({
    "& > * + *": nested(inner)
  });
};
var divideCol$prime = function(sp) {
  return nestChildren2(css32({
    borderColor: sp
  }));
};
var mkProjectName = /* @__PURE__ */ component2("ProjectName")(function(_ctx) {
  return function(v) {
    return bind28(useRef(nullImpl))(function(popOverContainerRef) {
      return bind28(usePopOver({
        dismissBehaviour\u0294: new Just(new DismissPopOverOnClickOutsideTargetAnd([popOverContainerRef])),
        containerId: popOverId,
        placement: new Placement(Below.value, End.value)
      }))(function(v1) {
        var dotsMenuHoverStyle = append10(background$prime(col2.backgroundBright3))(textCol$prime(col2.textPaler1));
        var menuEntry = function(text6) {
          return function(icon) {
            return div_2(append10(flexRow)(append10(itemsCenter)(append10(gap(16))(append10(pX(8))(append10(pY(6))(append10(mXY(4))(append10(textSm)(append10(transition2("background 240ms ease-out"))(append10(hover(background$prime(col2.backgroundBright3)))(append10(userSelectNone)(roundedDefault)))))))))))([div_2(widthAndHeight(16))([icon]), text(text6)]);
          };
        };
        return pure111(cluster4({
          css: append10(pY$prime($$var2("--s1")))(append10(borderBottom(1))(borderCol$prime(col2.backgroundBright3))),
          align: "flex-end",
          space: "var(--s-1)"
        })([styled6(h2$prime2)({
          css: append10(text4xl)(append10(fontBold)(textCol$prime(col2.textPaler1)))
        })([text(v)]), styled6(div$prime8)({
          css: append10(widthAndHeight(38))(append10(pXY(6))(append10(roundedLg)(append10(mL(4))(append10(textCol$prime(col2.textPaler2))(append10(borderCol$prime(col2.background))(append10(transition2("background 350ms ease"))(append10(hover(dotsMenuHoverStyle))(guard7(v1.isVisible)(dotsMenuHoverStyle))))))))),
          ref: v1.targetRef,
          onClick: handler_(function() {
            if (v1.isVisible) {
              return v1.hidePopOver;
            }
            ;
            return v1.showPopOver;
          }())
        })([dotsVertical]), v1.renderInPopOver(styled6(div$prime8)({
          ref: popOverContainerRef,
          css: append10(mT(1))(append10(roundedDefault)(append10(border2(1))(append10(borderCol$prime(col2.backgroundLayer2))(background$prime(col2.backgroundBright1)))))
        })([stack3({
          space: str("0"),
          css: append10(divideY(1))(divideCol$prime(col2.backgroundBright3))
        })([menuEntry("Rename")(pencil), menuEntry("Browse repository")(code2)])]))]));
      });
    });
  };
});
var mkView = /* @__PURE__ */ bind(bindReaderT)(mkProjectName)(function(projectName) {
  return component2("Project")(function(v) {
    return function(props) {
      return pure111(box_([stack3({
        space: $$var2("--s2")
      })([stack_([projectName(props.name), foldMap11(function(v1) {
        return h3_([text(v1)]);
      })(props.repository)]), stack3({
        space: $$var2("--s0")
      })([styled6(label$prime2)({
        css: textXl,
        htmlFor: "dependencies"
      })([text("Dependencies")]), el7(span$prime2)({
        id: "dependencies"
      })([ul_(mapFlipped12(props.dependencies)(renderDependency(props.packages)))])])])]));
    };
  });
});

// output/UI.OpenProject/index.js
var bind29 = /* @__PURE__ */ bind10(ixBindRender);
var readForeignRecord4 = /* @__PURE__ */ readForeignRecord();
var readForeignRecord1 = /* @__PURE__ */ readForeignRecord4(readForeignFieldsNilRowRo);
var readForeignFieldsCons3 = /* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "dependencies";
  }
})(/* @__PURE__ */ readForeignArray(readForeignProjectName));
var useIPCMessage2 = /* @__PURE__ */ useIPCMessage(/* @__PURE__ */ writeForeignRecord()(writeForeignFieldsNilRowR))(/* @__PURE__ */ readForeignVariant()(/* @__PURE__ */ readForeignVariantCons({
  reflectSymbol: function() {
    return "invalidSpagoDhall";
  }
})(readForeignString)()(/* @__PURE__ */ readForeignVariantCons({
  reflectSymbol: function() {
    return "noSpagoDhall";
  }
})(readForeignRecord1)()(/* @__PURE__ */ readForeignVariantCons({
  reflectSymbol: function() {
    return "nothingSelected";
  }
})(readForeignRecord1)()(/* @__PURE__ */ readForeignVariantCons({
  reflectSymbol: function() {
    return "validSpagoDhall";
  }
})(/* @__PURE__ */ readForeignRecord4(/* @__PURE__ */ readForeignFieldsCons3(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "name";
  }
})(readForeignProjectName)(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "packages";
  }
})(/* @__PURE__ */ readForeignObject(/* @__PURE__ */ readForeignRecord4(/* @__PURE__ */ readForeignFieldsCons3(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "repo";
  }
})(readForeignRepository)(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "version";
  }
})(readForeignVersion)(readForeignFieldsNilRowRo)()())()())()())))(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "repository";
  }
})(/* @__PURE__ */ readForeignMaybe(readForeignRepository))(/* @__PURE__ */ readForeignFieldsCons({
  reflectSymbol: function() {
    return "sources";
  }
})(/* @__PURE__ */ readForeignArray(readForeignSourceGlob))(readForeignFieldsNilRowRo)()())()())()())()())()()))()(readForeignVariantNil))))));
var button9 = /* @__PURE__ */ button8()();
var pure31 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var show15 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
var match3 = /* @__PURE__ */ match()()();
var mkView2 = /* @__PURE__ */ bind(bindReaderT)(mkView)(function(projectView) {
  return component2("OpenProject")(function(v) {
    return function(v1) {
      return bind29(useIPCMessage2(v)(ShowFolderSelectorChannel.value)(ShowFolderSelectorResponseChannel.value))(function(v2) {
        var selectButton = function(disabled11) {
          return centre_([button9({
            onClick: handler(preventDefault)(function(v3) {
              return v2.value0({});
            }),
            buttonType: Primary.value,
            disabled: disabled11
          })([text("Select a folder")])]);
        };
        return pure31(box_([h1_([text("Project")]), function() {
          if (v2.value1 instanceof NotAsked) {
            return selectButton(false);
          }
          ;
          if (v2.value1 instanceof Loading2) {
            return selectButton(true);
          }
          ;
          if (v2.value1 instanceof Failure) {
            return fragment([selectButton(false), text("Failed! " + show15(v2.value1.value0))]);
          }
          ;
          if (v2.value1 instanceof Success) {
            return match3({
              noSpagoDhall: function(v3) {
                return stack_([selectButton(false), text("No spago.dhall in the selected folder")]);
              },
              invalidSpagoDhall: function(v3) {
                return stack_([selectButton(false), text("Invalid spago.dhall config!")]);
              },
              nothingSelected: function(v3) {
                return selectButton(false);
              },
              validSpagoDhall: projectView
            })(v2.value1.value0);
          }
          ;
          throw new Error("Failed pattern match at UI.OpenProject (line 38, column 9 - line 57, column 16): " + [v2.value1.constructor.name]);
        }()]));
      });
    };
  });
});

// output/UI.Start/index.js
var bind30 = /* @__PURE__ */ bind(bindReaderT);
var liftEffect10 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
var pure32 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
var mkView3 = /* @__PURE__ */ bind30(/* @__PURE__ */ ask(monadAskReaderT))(function(v) {
  return bind30(mkView2)(function(openProjectView) {
    return bind30(liftEffect10(mkContainer(v.notificationCentre)))(function(container3) {
      return component2("StartView")(function(v1) {
        return function(v2) {
          return pure32(container3([openProjectView(unit)]));
        };
      });
    });
  });
});

// output/Renderer/index.js
var flap2 = /* @__PURE__ */ flap(functorReaderT);
var mkEntryView = function __do5() {
  var electronCtx = mkElectronCtx();
  return runComponent(electronCtx)(flap2(mkView3)(unit))();
};

// output/Main/index.js
var discard12 = /* @__PURE__ */ discard(discardUnit)(bindAff);
var liftEffect11 = /* @__PURE__ */ liftEffect(monadEffectAff);
var bind31 = /* @__PURE__ */ bind(bindAff);
var log4 = /* @__PURE__ */ log3(monadEffectEffect);
var mapFlipped13 = /* @__PURE__ */ mapFlipped(functorEffect);
var mkOptions = /* @__PURE__ */ map(functorEffect)(function(v) {
  return {
    width: 800,
    height: 600,
    webPreferences: {
      preload: concat5([v, "preload.js"]),
      nodeIntegration: false,
      enableRemoteModule: false,
      contextIsolation: true,
      sandbox: true
    }
  };
})(dirnameImpl);
var mkIndexHTML = function(content3) {
  return '<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset="UTF-8">\n  <title>Hello World!</title>\n  <link href="https://rsms.me/inter/inter.css" rel="stylesheet">\n  <link href="http://fonts.cdnfonts.com/css/jetbrains-mono" rel="stylesheet">\n</head>\n\n<body>\n  <div id="content">' + (content3 + '</div>\n  <script src="./renderer.js"><\/script>\n</body>\n\n</html>\n');
};
var main3 = /* @__PURE__ */ launchAff_(/* @__PURE__ */ discard12(waitUntilAppReady)(function() {
  return discard12(liftEffect11(registerProtocol))(function() {
    return bind31(liftEffect11(mkOptions))(function(options2) {
      return bind31(liftEffect11(newBrowserWindow(options2)))(function(window2) {
        return discard12(liftEffect11(onBeforeRedirectRequest(redirectURL)(function(v) {
          return log4("Let's go " + v);
        })))(function() {
          return discard12(liftEffect11(registerAllHandlers(window2)))(function() {
            return bind31(liftEffect11(mapFlipped13(mkEntryView)(renderToString)))(function(reactHTMLString) {
              var indexHTML = mkIndexHTML(reactHTMLString);
              return discard12(writeTextFile2(UTF8.value)("index.html")(indexHTML))(function() {
                return loadFile("index.html")(window2);
              });
            });
          });
        });
      });
    });
  });
}));

// main.mjs
main3();
/**
 * @license React
 * react-dom-server-legacy.node.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server-legacy.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.node.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.node.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
