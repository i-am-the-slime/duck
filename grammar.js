// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

function binop(type, i=1, flatten=false) {
  return data => data[1].reduce((r, v) => ({ type, value: !flatten ? [r, v[i]] : [r, ...v[i]] }), data[0]);
};

function nuller() { return null; }

const pass = n => d => d ? d[n] : null;
const pass0 = pass(0);
const pass1 = pass(1);

const tag = type => value => ({ type, value });

function flatten(items) {
  const flat = [];

  items.forEach(item => {
    if (Array.isArray(item)) {
      flat.push(...flatten(item));
    } else {
      flat.push(item);
    }
  });

  return flat;
}

function collapse(items) {
  var flat = "";

  items.forEach(item => {
    if (Array.isArray(item)) {
      flat += collapse(item);
    } else if (item != null) {
      flat += item;
    }
  });

  return flat;
}

function merge_fields(fields) {
  var result = [];
  fields.forEach(([field, value]) => {
    var found = false;
    result.forEach(([key,existing], i) => {
      if (key === field) {
        found = true;
        result[i] = [key, { type: "Combine", value: [existing, value] }];
      }
    });
    if (!found) result.push([field,value]);
  });
  return result;
}

function remove_common_prefix(items) {
  // Function to iterate through each character (or interpolation) in a string
  function iterate(iterator) {
    items.forEach(function(str) {
      if (typeof str === "string") {
        // Array.from respects CodePoints
        Array.from(str).forEach(iterator);
      } else {
        iterator(str);
      }
    });
  }
  // First we gather a list of all of the prefixes
  var prefixes = [];
  // current_prefix:
  //   - null means we have stopped scanning for this line
  //   - string means we are actively scanning this line, indicates what
  //     spaces and tabs have been found thus far
  var current_prefix = "";
  function gather_prefixes(char) {
    // Reset the current_prefix indicator, but do not add to prefixes
    // (if line was non-empty, that would have happened already)
    if (char === "\n") {
      current_prefix = "";
    // If still scanning...
    } else if (current_prefix !== null) {
      // A tab or space gets added to the current prefix
      if (char === "\t" || char === " ") {
        current_prefix += char;
      // Anything else (including interpolation) stops scanning this line,
      // flushing the current prefix to the list.
      } else {
        prefixes.push(current_prefix);
        current_prefix = null;
      }
    }
  }
  iterate(gather_prefixes);
  // Flush out any remaining prefix (right before the close quotes)
  gather_prefixes(null);
  // Now we calculate the common prefix
  var common_prefix = prefixes.reduce(function(a, b) {
    var common = "";
    while (a.length && b.length) {
      if (a[0] === b[0]) {
        common += a[0];
        a = a.substring(1);
        b = b.substring(1);
      } else break;
    }
    return common;
  });
  // Now we remove the common prefixes, building the new result
  var result = [];
  // prefix_removal indicates the next chars to remove, if possible
  var prefix_removal = common_prefix;
  function remove_prefixes(char) {
    var keep = true;
    // Reset the prefix on the new line
    if (char === "\n") {
      prefix_removal = common_prefix;
    // If we can still remove a prefix character
    } else if (prefix_removal !== "") {
      // Drop this element if it matches, and advance to the next char in the
      // common prefix
      if (char === prefix_removal[0]) {
        keep = false;
        prefix_removal = prefix_removal.substring(1);
      // Otherwise keep it but cancel removing any more (probably unreachable)
      } else {
        prefix_removal = "";
      }
    }
    if (keep) result.push(char);
  }
  iterate(remove_prefixes);
  return result;
}

const keyword =
  [ "if"
  , "then"
  , "else"
  , "let"
  , "in"
  , "using"
  , "missing"
  , "as"
  , "Infinity"
  , "NaN"
  , "merge"
  , "Some"
  , "toMap"
  , "assert"
  , "forall"
  , "with"
  ];

const builtin =
  [ "Type"
  , "Kind"
  , "Sort"
  , "Bool"
  , "True"
  , "False"
  , "missing"
  , "Natural"
  , "Natural/fold"
  , "Natural/build"
  , "Natural/isZero"
  , "Natural/even"
  , "Natural/odd"
  , "Natural/toInteger"
  , "Natural/show"
  , "Natural/subtract"
  , "Integer"
  , "Integer/show"
  , "Integer/toDouble"
  , "Integer/negate"
  , "Integer/clamp"
  , "Double"
  , "Double/show"
  , "Text"
  , "Text/show"
  , "Text/replace"
  , "List"
  , "List/build"
  , "List/fold"
  , "List/length"
  , "List/head"
  , "List/last"
  , "List/indexed"
  , "List/reverse"
  , "Date"
  , "Time"
  , "TimeZone"
  , "Optional"
  , "None"
  ];
var grammar = {
    Lexer: undefined,
    ParserRules: [
    {"name": "complete_expression$ebnf$1", "symbols": []},
    {"name": "complete_expression$ebnf$1", "symbols": ["complete_expression$ebnf$1", "shebang"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "complete_expression$ebnf$2", "symbols": ["line_comment_prefix"], "postprocess": id},
    {"name": "complete_expression$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "complete_expression", "symbols": ["complete_expression$ebnf$1", "whsp", "expression", "whsp", "complete_expression$ebnf$2"], "postprocess": pass(2)},
    {"name": "end_of_line", "symbols": [/[\n]/], "postprocess": pass0},
    {"name": "end_of_line", "symbols": [/[\r]/, /[\n]/], "postprocess": () => "\n"},
    {"name": "tab", "symbols": [/[\t]/], "postprocess": pass0},
    {"name": "ascii", "symbols": [/[\x20-\x7F]/], "postprocess": pass0},
    {"name": "valid_non_ascii", "symbols": [/[\x80-\uD7FF\uE000-\uFFFD]/], "postprocess": collapse},
    {"name": "valid_non_ascii", "symbols": [/[\uD800-\uD83E\uD840-\uD87E\uD880-\uD8BE\uD8C0-\uD8FE\uD900-\uD93E\uD940-\uD97E\uD980-\uD9BE\uD9C0-\uD9FE\uDA00-\uDA3E\uDA40-\uDA7E\uDA80-\uDABE\uDAC0-\uDAFE\uDB00-\uDB3E\uDB40-\uDB7E\uDB80-\uDBBE\uDBC0-\uDBFE]/, /[\uDC00-\uDFFF]/], "postprocess": collapse},
    {"name": "valid_non_ascii", "symbols": [/[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF]/, /[\uDC00-\uDFFD]/], "postprocess": collapse},
    {"name": "block_comment$string$1", "symbols": [{"literal":"{"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "block_comment", "symbols": ["block_comment$string$1", "block_comment_continue"]},
    {"name": "block_comment_char", "symbols": [/[\x20-\x7A\x7C-\x7F]/]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": [/[\x20-\x2c\x2e-\x7F]/]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["valid_non_ascii"]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["tab"]},
    {"name": "block_comment_char$subexpression$1$subexpression$1", "symbols": ["end_of_line"]},
    {"name": "block_comment_char$subexpression$1", "symbols": [/[\x7B]/, "block_comment_char$subexpression$1$subexpression$1"]},
    {"name": "block_comment_char", "symbols": ["block_comment_char$subexpression$1"]},
    {"name": "block_comment_char", "symbols": ["valid_non_ascii"]},
    {"name": "block_comment_char", "symbols": ["tab"]},
    {"name": "block_comment_char", "symbols": ["end_of_line"]},
    {"name": "block_comment_continue$string$1", "symbols": [{"literal":"-"}, {"literal":"}"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "block_comment_continue", "symbols": ["block_comment_continue$string$1"]},
    {"name": "block_comment_continue", "symbols": ["block_comment", "block_comment_continue"]},
    {"name": "block_comment_continue", "symbols": ["block_comment_char", "block_comment_continue"]},
    {"name": "not_end_of_line", "symbols": ["ascii"]},
    {"name": "not_end_of_line", "symbols": ["valid_non_ascii"]},
    {"name": "not_end_of_line", "symbols": ["tab"]},
    {"name": "line_comment_prefix$string$1", "symbols": [{"literal":"-"}, {"literal":"-"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "line_comment_prefix$ebnf$1", "symbols": []},
    {"name": "line_comment_prefix$ebnf$1", "symbols": ["line_comment_prefix$ebnf$1", "not_end_of_line"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "line_comment_prefix", "symbols": ["line_comment_prefix$string$1", "line_comment_prefix$ebnf$1"]},
    {"name": "line_comment", "symbols": ["line_comment_prefix", "end_of_line"]},
    {"name": "whitespace_chunk", "symbols": [{"literal":" "}], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["tab"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["end_of_line"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["line_comment"], "postprocess": nuller},
    {"name": "whitespace_chunk", "symbols": ["block_comment"], "postprocess": nuller},
    {"name": "whsp$ebnf$1", "symbols": []},
    {"name": "whsp$ebnf$1", "symbols": ["whsp$ebnf$1", "whitespace_chunk"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "whsp", "symbols": ["whsp$ebnf$1"], "postprocess": nuller},
    {"name": "whsp1$ebnf$1", "symbols": ["whitespace_chunk"]},
    {"name": "whsp1$ebnf$1", "symbols": ["whsp1$ebnf$1", "whitespace_chunk"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "whsp1", "symbols": ["whsp1$ebnf$1"], "postprocess": nuller},
    {"name": "ALPHA", "symbols": [/[A-Za-z]/], "postprocess": pass0},
    {"name": "DIGIT", "symbols": [/[0-9]/], "postprocess": pass0},
    {"name": "ALPHANUM", "symbols": ["ALPHA"], "postprocess": pass0},
    {"name": "ALPHANUM", "symbols": ["DIGIT"], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": ["DIGIT"], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Aa]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Bb]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Cc]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Dd]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Ee]/], "postprocess": pass0},
    {"name": "HEXDIG", "symbols": [/[Ff]/], "postprocess": pass0},
    {"name": "simple_label_first_char", "symbols": ["ALPHA"], "postprocess": pass0},
    {"name": "simple_label_first_char", "symbols": [{"literal":"_"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": ["ALPHANUM"], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"-"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"/"}], "postprocess": pass0},
    {"name": "simple_label_next_char", "symbols": [{"literal":"_"}], "postprocess": pass0},
    {"name": "simple_label$ebnf$1", "symbols": []},
    {"name": "simple_label$ebnf$1", "symbols": ["simple_label$ebnf$1", "simple_label_next_char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "simple_label", "symbols": ["simple_label_first_char", "simple_label$ebnf$1"], "postprocess":  (d, _, reject) => {
          let r = d[0] + d[1].join("");
          return keyword.includes(r) ? reject : r;
        } },
    {"name": "quoted_label_char", "symbols": [/[\x20-\x5F\x61-\x7E]/]},
    {"name": "quoted_label$ebnf$1", "symbols": []},
    {"name": "quoted_label$ebnf$1", "symbols": ["quoted_label$ebnf$1", "quoted_label_char"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "quoted_label", "symbols": ["quoted_label$ebnf$1"], "postprocess": collapse},
    {"name": "label$subexpression$1", "symbols": [{"literal":"`"}, "quoted_label", {"literal":"`"}], "postprocess": pass1},
    {"name": "label$subexpression$1", "symbols": ["simple_label"], "postprocess": pass0},
    {"name": "label", "symbols": ["label$subexpression$1"], "postprocess": pass0},
    {"name": "nonreserved_label$subexpression$1", "symbols": [{"literal":"`"}, "quoted_label", {"literal":"`"}], "postprocess": pass1},
    {"name": "nonreserved_label$subexpression$1", "symbols": ["simple_label"], "postprocess": (d, _, reject) => builtin.includes(d[0]) ? reject : d[0]},
    {"name": "nonreserved_label", "symbols": ["nonreserved_label$subexpression$1"], "postprocess": pass0},
    {"name": "any_label", "symbols": ["label"], "postprocess": pass0},
    {"name": "any_label_or_some", "symbols": ["any_label"], "postprocess": pass0},
    {"name": "any_label_or_some", "symbols": ["Some"], "postprocess": pass0},
    {"name": "double_quote_chunk$ebnf$1", "symbols": []},
    {"name": "double_quote_chunk$ebnf$1$subexpression$1", "symbols": ["interpolation", "double_quote_literal_chunk"]},
    {"name": "double_quote_chunk$ebnf$1", "symbols": ["double_quote_chunk$ebnf$1", "double_quote_chunk$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "double_quote_chunk$ebnf$2", "symbols": [{"literal":"$"}], "postprocess": id},
    {"name": "double_quote_chunk$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "double_quote_chunk", "symbols": ["double_quote_literal_chunk", "double_quote_chunk$ebnf$1", "double_quote_chunk$ebnf$2"], "postprocess":  d => {
          var r = [d[0]].concat(...d[1]);
          if (d[2] != null) {
            r[r.length-1] += d[2];
          }
          return r;
        } },
    {"name": "double_quote_literal_chunk$ebnf$1", "symbols": []},
    {"name": "double_quote_literal_chunk$ebnf$1$subexpression$1", "symbols": [{"literal":"\\"}, "double_quote_escaped"], "postprocess": pass1},
    {"name": "double_quote_literal_chunk$ebnf$1$subexpression$1", "symbols": ["double_quote_char"], "postprocess": pass0},
    {"name": "double_quote_literal_chunk$ebnf$1", "symbols": ["double_quote_literal_chunk$ebnf$1", "double_quote_literal_chunk$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "double_quote_literal_chunk", "symbols": ["double_quote_literal_chunk$ebnf$1"], "postprocess": d => d[0].join("")},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x22\x24\x5C\x2F]/], "postprocess": pass0},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x62]/], "postprocess": () => "\x08"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x66]/], "postprocess": () => "\x0C"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x6E]/], "postprocess": () => "\x0A"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x72]/], "postprocess": () => "\x0D"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [/[\x74]/], "postprocess": () => "\x09"},
    {"name": "double_quote_escaped$subexpression$1", "symbols": [{"literal":"u"}, "unicode_escape"], "postprocess": pass1},
    {"name": "double_quote_escaped", "symbols": ["double_quote_escaped$subexpression$1"], "postprocess": pass0},
    {"name": "unicode_escape", "symbols": ["unbraced_escape"], "postprocess": d => String.fromCharCode(parseInt(d[0], 16))},
    {"name": "unicode_escape", "symbols": [{"literal":"{"}, "braced_escape", {"literal":"}"}], "postprocess": d => String.fromCodePoint(parseInt(d[1], 16))},
    {"name": "unicode_suffix$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "unicode_suffix$subexpression$1", "symbols": [/[A-E]/]},
    {"name": "unicode_suffix", "symbols": ["unicode_suffix$subexpression$1", "HEXDIG", "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unicode_suffix$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "unicode_suffix$subexpression$2", "symbols": [/[A-D]/]},
    {"name": "unicode_suffix", "symbols": [{"literal":"F"}, "HEXDIG", "HEXDIG", "unicode_suffix$subexpression$2"], "postprocess": collapse},
    {"name": "unbraced_escape$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "unbraced_escape$subexpression$1", "symbols": [/[A-C]/]},
    {"name": "unbraced_escape", "symbols": ["unbraced_escape$subexpression$1", "HEXDIG", "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unbraced_escape", "symbols": [{"literal":"D"}, /[0-7]/, "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unbraced_escape", "symbols": [{"literal":"E"}, "HEXDIG", "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unbraced_escape$subexpression$2", "symbols": ["DIGIT"]},
    {"name": "unbraced_escape$subexpression$2", "symbols": [/[A-D]/]},
    {"name": "unbraced_escape", "symbols": [{"literal":"F"}, "HEXDIG", "HEXDIG", "unbraced_escape$subexpression$2"], "postprocess": collapse},
    {"name": "braced_codepoint$ebnf$1", "symbols": []},
    {"name": "braced_codepoint$ebnf$1", "symbols": ["braced_codepoint$ebnf$1", {"literal":"0"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "braced_codepoint$subexpression$1", "symbols": [/[1-9A-F]/]},
    {"name": "braced_codepoint$subexpression$1$string$1", "symbols": [{"literal":"1"}, {"literal":"0"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "braced_codepoint$subexpression$1", "symbols": ["braced_codepoint$subexpression$1$string$1"]},
    {"name": "braced_codepoint", "symbols": ["braced_codepoint$ebnf$1", "braced_codepoint$subexpression$1", "unicode_suffix"], "postprocess": collapse},
    {"name": "braced_codepoint", "symbols": ["unbraced_escape"], "postprocess": collapse},
    {"name": "braced_codepoint", "symbols": [{"literal":"0"}], "postprocess": collapse},
    {"name": "braced_codepoint$ebnf$2$subexpression$1$ebnf$1", "symbols": [{"literal":"0"}]},
    {"name": "braced_codepoint$ebnf$2$subexpression$1$ebnf$1", "symbols": ["braced_codepoint$ebnf$2$subexpression$1$ebnf$1", {"literal":"0"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "braced_codepoint$ebnf$2$subexpression$1", "symbols": ["braced_codepoint$ebnf$2$subexpression$1$ebnf$1", {"literal":"0"}]},
    {"name": "braced_codepoint$ebnf$2", "symbols": ["braced_codepoint$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "braced_codepoint$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "braced_codepoint$ebnf$3$subexpression$1$ebnf$1", "symbols": ["HEXDIG"], "postprocess": id},
    {"name": "braced_codepoint$ebnf$3$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "braced_codepoint$ebnf$3$subexpression$1", "symbols": ["HEXDIG", "braced_codepoint$ebnf$3$subexpression$1$ebnf$1"]},
    {"name": "braced_codepoint$ebnf$3", "symbols": ["braced_codepoint$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "braced_codepoint$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "braced_codepoint", "symbols": ["braced_codepoint$ebnf$2", /[1-9A-F]/, "braced_codepoint$ebnf$3"], "postprocess": collapse},
    {"name": "braced_escape", "symbols": ["braced_codepoint"], "postprocess": collapse},
    {"name": "double_quote_char", "symbols": [/[\x20-\x21\x23\x25-\x5B\x5D-\x7F]/], "postprocess": pass0},
    {"name": "double_quote_char", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "double_quote_char$subexpression$1", "symbols": [/[\x20-\x21\x23-\x5B\x5D-\x7A\x7C-\x7F]/]},
    {"name": "double_quote_char$subexpression$1", "symbols": ["valid_non_ascii"]},
    {"name": "double_quote_char", "symbols": [{"literal":"$"}, "double_quote_char$subexpression$1"], "postprocess": collapse},
    {"name": "double_quote_literal", "symbols": [/[\x22]/, "double_quote_chunk", /[\x22]/], "postprocess": pass1},
    {"name": "single_quote_continue", "symbols": ["interpolation", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue", "symbols": ["escaped_quote_pair", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue", "symbols": ["escaped_interpolation", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "single_quote_continue$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "single_quote_continue", "symbols": ["single_quote_continue$string$1"], "postprocess": () => []},
    {"name": "single_quote_continue$string$2", "symbols": [{"literal":"$"}, {"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "single_quote_continue", "symbols": ["single_quote_continue$string$2"], "postprocess": () => ["$"]},
    {"name": "single_quote_continue", "symbols": ["single_quote_char", "single_quote_continue"], "postprocess": d => [d[0]].concat(d[1])},
    {"name": "escaped_quote_pair$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "escaped_quote_pair", "symbols": ["escaped_quote_pair$string$1"], "postprocess": () => "''"},
    {"name": "escaped_interpolation$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}, {"literal":"$"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "escaped_interpolation", "symbols": ["escaped_interpolation$string$1"], "postprocess": () => "${"},
    {"name": "single_quote_char", "symbols": [/[\x20-\x23\x25-\x26\x28-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": [/[\x20-\x26\x28-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$1", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": [/[\x27]/, "single_quote_char$subexpression$1"], "postprocess": collapse},
    {"name": "single_quote_char$subexpression$2", "symbols": [/[\x20-\x7A\x7C-\x7F]/], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["tab"], "postprocess": pass0},
    {"name": "single_quote_char$subexpression$2", "symbols": ["end_of_line"], "postprocess": pass0},
    {"name": "single_quote_char", "symbols": [/[\x24]/, "single_quote_char$subexpression$2"], "postprocess": collapse},
    {"name": "single_quote_literal$string$1", "symbols": [{"literal":"'"}, {"literal":"'"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "single_quote_literal", "symbols": ["single_quote_literal$string$1", "end_of_line", "single_quote_continue"], "postprocess": d => remove_common_prefix(d[2])},
    {"name": "interpolation$string$1", "symbols": [{"literal":"$"}, {"literal":"{"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "interpolation", "symbols": ["interpolation$string$1", "complete_expression", {"literal":"}"}], "postprocess": pass1},
    {"name": "text_literal$subexpression$1", "symbols": ["double_quote_literal"]},
    {"name": "text_literal$subexpression$1", "symbols": ["single_quote_literal"]},
    {"name": "text_literal", "symbols": ["text_literal$subexpression$1"], "postprocess": d => d[0][0]},
    {"name": "if$string$1", "symbols": [{"literal":"i"}, {"literal":"f"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "if", "symbols": ["if$string$1"], "postprocess": pass0},
    {"name": "then$string$1", "symbols": [{"literal":"t"}, {"literal":"h"}, {"literal":"e"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "then", "symbols": ["then$string$1"], "postprocess": pass0},
    {"name": "else$string$1", "symbols": [{"literal":"e"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "else", "symbols": ["else$string$1"], "postprocess": pass0},
    {"name": "let$string$1", "symbols": [{"literal":"l"}, {"literal":"e"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "let", "symbols": ["let$string$1"], "postprocess": pass0},
    {"name": "in$string$1", "symbols": [{"literal":"i"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "in", "symbols": ["in$string$1"], "postprocess": pass0},
    {"name": "as$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "as", "symbols": ["as$string$1"], "postprocess": pass0},
    {"name": "using$string$1", "symbols": [{"literal":"u"}, {"literal":"s"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "using", "symbols": ["using$string$1"], "postprocess": pass0},
    {"name": "merge$string$1", "symbols": [{"literal":"m"}, {"literal":"e"}, {"literal":"r"}, {"literal":"g"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "merge", "symbols": ["merge$string$1"], "postprocess": pass0},
    {"name": "missing$string$1", "symbols": [{"literal":"m"}, {"literal":"i"}, {"literal":"s"}, {"literal":"s"}, {"literal":"i"}, {"literal":"n"}, {"literal":"g"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "missing", "symbols": ["missing$string$1"], "postprocess": pass0},
    {"name": "Infinity$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"f"}, {"literal":"i"}, {"literal":"n"}, {"literal":"i"}, {"literal":"t"}, {"literal":"y"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Infinity", "symbols": ["Infinity$string$1"], "postprocess": pass0},
    {"name": "NaN$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"N"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "NaN", "symbols": ["NaN$string$1"], "postprocess": pass0},
    {"name": "Some$string$1", "symbols": [{"literal":"S"}, {"literal":"o"}, {"literal":"m"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Some", "symbols": ["Some$string$1"], "postprocess": pass0},
    {"name": "toMap$string$1", "symbols": [{"literal":"t"}, {"literal":"o"}, {"literal":"M"}, {"literal":"a"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "toMap", "symbols": ["toMap$string$1"], "postprocess": pass0},
    {"name": "assert$string$1", "symbols": [{"literal":"a"}, {"literal":"s"}, {"literal":"s"}, {"literal":"e"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "assert", "symbols": ["assert$string$1"], "postprocess": pass0},
    {"name": "forall_keyword$string$1", "symbols": [{"literal":"f"}, {"literal":"o"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "forall_keyword", "symbols": ["forall_keyword$string$1"], "postprocess": pass0},
    {"name": "forall_symbol", "symbols": [/[\u2200]/], "postprocess": pass0},
    {"name": "forall", "symbols": ["forall_symbol"]},
    {"name": "forall", "symbols": ["forall_keyword"]},
    {"name": "with$string$1", "symbols": [{"literal":"w"}, {"literal":"i"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "with", "symbols": ["with$string$1"]},
    {"name": "keyword", "symbols": ["if"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["then"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["else"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["let"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["in"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["using"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["missing"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["assert"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["as"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["Infinity"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["NaN"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["merge"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["Some"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["toMap"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["forall_keyword"], "postprocess": pass0},
    {"name": "keyword", "symbols": ["with"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_fold"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_build"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_isZero"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_even"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_odd"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_toInteger"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural_subtract"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_toDouble"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_negate"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer_clamp"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Double_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_build"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_fold"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_length"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_head"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_last"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_indexed"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List_reverse"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Text_show"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Text_replace"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Bool"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["True"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["False"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Optional"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["None"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Natural"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Integer"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Double"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Text"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Date"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Time"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["TimeZone"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["List"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Type"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Kind"], "postprocess": pass0},
    {"name": "builtin", "symbols": ["Sort"], "postprocess": pass0},
    {"name": "Optional$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional", "symbols": ["Optional$string$1"], "postprocess": pass0},
    {"name": "Text$string$1", "symbols": [{"literal":"T"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Text", "symbols": ["Text$string$1"], "postprocess": pass0},
    {"name": "List$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List", "symbols": ["List$string$1"], "postprocess": pass0},
    {"name": "Location$string$1", "symbols": [{"literal":"L"}, {"literal":"o"}, {"literal":"c"}, {"literal":"a"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Location", "symbols": ["Location$string$1"], "postprocess": pass0},
    {"name": "Bool$string$1", "symbols": [{"literal":"B"}, {"literal":"o"}, {"literal":"o"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Bool", "symbols": ["Bool$string$1"], "postprocess": pass0},
    {"name": "True$string$1", "symbols": [{"literal":"T"}, {"literal":"r"}, {"literal":"u"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "True", "symbols": ["True$string$1"], "postprocess": pass0},
    {"name": "False$string$1", "symbols": [{"literal":"F"}, {"literal":"a"}, {"literal":"l"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "False", "symbols": ["False$string$1"], "postprocess": pass0},
    {"name": "None$string$1", "symbols": [{"literal":"N"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "None", "symbols": ["None$string$1"], "postprocess": pass0},
    {"name": "Natural$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural", "symbols": ["Natural$string$1"], "postprocess": pass0},
    {"name": "Integer$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer", "symbols": ["Integer$string$1"], "postprocess": pass0},
    {"name": "Double$string$1", "symbols": [{"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Double", "symbols": ["Double$string$1"], "postprocess": pass0},
    {"name": "Type$string$1", "symbols": [{"literal":"T"}, {"literal":"y"}, {"literal":"p"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Type", "symbols": ["Type$string$1"], "postprocess": pass0},
    {"name": "Kind$string$1", "symbols": [{"literal":"K"}, {"literal":"i"}, {"literal":"n"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Kind", "symbols": ["Kind$string$1"], "postprocess": pass0},
    {"name": "Sort$string$1", "symbols": [{"literal":"S"}, {"literal":"o"}, {"literal":"r"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Sort", "symbols": ["Sort$string$1"], "postprocess": pass0},
    {"name": "Natural_fold$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_fold", "symbols": ["Natural_fold$string$1"], "postprocess": pass0},
    {"name": "Natural_build$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_build", "symbols": ["Natural_build$string$1"], "postprocess": pass0},
    {"name": "Natural_isZero$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"i"}, {"literal":"s"}, {"literal":"Z"}, {"literal":"e"}, {"literal":"r"}, {"literal":"o"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_isZero", "symbols": ["Natural_isZero$string$1"], "postprocess": pass0},
    {"name": "Natural_even$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"n"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_even", "symbols": ["Natural_even$string$1"], "postprocess": pass0},
    {"name": "Natural_odd$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"o"}, {"literal":"d"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_odd", "symbols": ["Natural_odd$string$1"], "postprocess": pass0},
    {"name": "Natural_toInteger$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"t"}, {"literal":"o"}, {"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_toInteger", "symbols": ["Natural_toInteger$string$1"], "postprocess": pass0},
    {"name": "Natural_show$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_show", "symbols": ["Natural_show$string$1"], "postprocess": pass0},
    {"name": "Natural_subtract$string$1", "symbols": [{"literal":"N"}, {"literal":"a"}, {"literal":"t"}, {"literal":"u"}, {"literal":"r"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"s"}, {"literal":"u"}, {"literal":"b"}, {"literal":"t"}, {"literal":"r"}, {"literal":"a"}, {"literal":"c"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Natural_subtract", "symbols": ["Natural_subtract$string$1"], "postprocess": pass0},
    {"name": "Integer_toDouble$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"t"}, {"literal":"o"}, {"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_toDouble", "symbols": ["Integer_toDouble$string$1"], "postprocess": pass0},
    {"name": "Integer_show$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_show", "symbols": ["Integer_show$string$1"], "postprocess": pass0},
    {"name": "Integer_negate$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"n"}, {"literal":"e"}, {"literal":"g"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_negate", "symbols": ["Integer_negate$string$1"], "postprocess": pass0},
    {"name": "Integer_clamp$string$1", "symbols": [{"literal":"I"}, {"literal":"n"}, {"literal":"t"}, {"literal":"e"}, {"literal":"g"}, {"literal":"e"}, {"literal":"r"}, {"literal":"/"}, {"literal":"c"}, {"literal":"l"}, {"literal":"a"}, {"literal":"m"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Integer_clamp", "symbols": ["Integer_clamp$string$1"], "postprocess": pass0},
    {"name": "Double_show$string$1", "symbols": [{"literal":"D"}, {"literal":"o"}, {"literal":"u"}, {"literal":"b"}, {"literal":"l"}, {"literal":"e"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Double_show", "symbols": ["Double_show$string$1"], "postprocess": pass0},
    {"name": "List_build$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_build", "symbols": ["List_build$string$1"], "postprocess": pass0},
    {"name": "List_fold$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_fold", "symbols": ["List_fold$string$1"], "postprocess": pass0},
    {"name": "List_length$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"l"}, {"literal":"e"}, {"literal":"n"}, {"literal":"g"}, {"literal":"t"}, {"literal":"h"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_length", "symbols": ["List_length$string$1"], "postprocess": pass0},
    {"name": "List_head$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"h"}, {"literal":"e"}, {"literal":"a"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_head", "symbols": ["List_head$string$1"], "postprocess": pass0},
    {"name": "List_last$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"l"}, {"literal":"a"}, {"literal":"s"}, {"literal":"t"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_last", "symbols": ["List_last$string$1"], "postprocess": pass0},
    {"name": "List_indexed$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"i"}, {"literal":"n"}, {"literal":"d"}, {"literal":"e"}, {"literal":"x"}, {"literal":"e"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_indexed", "symbols": ["List_indexed$string$1"], "postprocess": pass0},
    {"name": "List_reverse$string$1", "symbols": [{"literal":"L"}, {"literal":"i"}, {"literal":"s"}, {"literal":"t"}, {"literal":"/"}, {"literal":"r"}, {"literal":"e"}, {"literal":"v"}, {"literal":"e"}, {"literal":"r"}, {"literal":"s"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "List_reverse", "symbols": ["List_reverse$string$1"], "postprocess": pass0},
    {"name": "Optional_fold$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"f"}, {"literal":"o"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional_fold", "symbols": ["Optional_fold$string$1"], "postprocess": pass0},
    {"name": "Optional_build$string$1", "symbols": [{"literal":"O"}, {"literal":"p"}, {"literal":"t"}, {"literal":"i"}, {"literal":"o"}, {"literal":"n"}, {"literal":"a"}, {"literal":"l"}, {"literal":"/"}, {"literal":"b"}, {"literal":"u"}, {"literal":"i"}, {"literal":"l"}, {"literal":"d"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Optional_build", "symbols": ["Optional_build$string$1"], "postprocess": pass0},
    {"name": "Text_show$string$1", "symbols": [{"literal":"T"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"/"}, {"literal":"s"}, {"literal":"h"}, {"literal":"o"}, {"literal":"w"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Text_show", "symbols": ["Text_show$string$1"], "postprocess": pass0},
    {"name": "Text_replace$string$1", "symbols": [{"literal":"T"}, {"literal":"e"}, {"literal":"x"}, {"literal":"t"}, {"literal":"/"}, {"literal":"r"}, {"literal":"e"}, {"literal":"p"}, {"literal":"l"}, {"literal":"a"}, {"literal":"c"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Text_replace", "symbols": ["Text_replace$string$1"], "postprocess": pass0},
    {"name": "Date$string$1", "symbols": [{"literal":"D"}, {"literal":"a"}, {"literal":"t"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Date", "symbols": ["Date$string$1"], "postprocess": pass0},
    {"name": "Time$string$1", "symbols": [{"literal":"T"}, {"literal":"i"}, {"literal":"m"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "Time", "symbols": ["Time$string$1"], "postprocess": pass0},
    {"name": "TimeZone$string$1", "symbols": [{"literal":"T"}, {"literal":"i"}, {"literal":"m"}, {"literal":"e"}, {"literal":"Z"}, {"literal":"o"}, {"literal":"n"}, {"literal":"e"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "TimeZone", "symbols": ["TimeZone$string$1"], "postprocess": pass0},
    {"name": "combine$subexpression$1", "symbols": [/[\u2227]/]},
    {"name": "combine$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"\\"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "combine$subexpression$1", "symbols": ["combine$subexpression$1$string$1"]},
    {"name": "combine", "symbols": ["combine$subexpression$1"], "postprocess": pass0},
    {"name": "combine_types$subexpression$1", "symbols": [/[\u2A53]/]},
    {"name": "combine_types$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}, {"literal":"\\"}, {"literal":"\\"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "combine_types$subexpression$1", "symbols": ["combine_types$subexpression$1$string$1"]},
    {"name": "combine_types", "symbols": ["combine_types$subexpression$1"], "postprocess": pass0},
    {"name": "equivalent$subexpression$1", "symbols": [/[\u2261]/]},
    {"name": "equivalent$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equivalent$subexpression$1", "symbols": ["equivalent$subexpression$1$string$1"]},
    {"name": "equivalent", "symbols": ["equivalent$subexpression$1"], "postprocess": pass0},
    {"name": "prefer$subexpression$1", "symbols": [/[\u2AFD]/]},
    {"name": "prefer$subexpression$1$string$1", "symbols": [{"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "prefer$subexpression$1", "symbols": ["prefer$subexpression$1$string$1"]},
    {"name": "prefer", "symbols": ["prefer$subexpression$1"], "postprocess": pass0},
    {"name": "lambda$subexpression$1", "symbols": [/[\u03BB]/]},
    {"name": "lambda$subexpression$1", "symbols": [{"literal":"\\"}]},
    {"name": "lambda", "symbols": ["lambda$subexpression$1"], "postprocess": pass0},
    {"name": "arrow$subexpression$1", "symbols": [/[\u2192]/]},
    {"name": "arrow$subexpression$1$string$1", "symbols": [{"literal":"-"}, {"literal":">"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "arrow$subexpression$1", "symbols": ["arrow$subexpression$1$string$1"]},
    {"name": "arrow", "symbols": ["arrow$subexpression$1"], "postprocess": pass0},
    {"name": "complete$string$1", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "complete", "symbols": ["complete$string$1"], "postprocess": pass0},
    {"name": "exponent$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "exponent$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "exponent$ebnf$1", "symbols": ["exponent$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "exponent$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "exponent$ebnf$2", "symbols": ["DIGIT"]},
    {"name": "exponent$ebnf$2", "symbols": ["exponent$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "exponent", "symbols": [{"literal":"e"}, "exponent$ebnf$1", "exponent$ebnf$2"]},
    {"name": "numeric_double_literal$ebnf$1$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "numeric_double_literal$ebnf$1$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "numeric_double_literal$ebnf$1", "symbols": ["numeric_double_literal$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "numeric_double_literal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "numeric_double_literal$ebnf$2", "symbols": ["DIGIT"]},
    {"name": "numeric_double_literal$ebnf$2", "symbols": ["numeric_double_literal$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "numeric_double_literal$subexpression$1$ebnf$1", "symbols": ["DIGIT"]},
    {"name": "numeric_double_literal$subexpression$1$ebnf$1", "symbols": ["numeric_double_literal$subexpression$1$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2$subexpression$1", "symbols": ["exponent"]},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2", "symbols": ["numeric_double_literal$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "numeric_double_literal$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "numeric_double_literal$subexpression$1", "symbols": [{"literal":"."}, "numeric_double_literal$subexpression$1$ebnf$1", "numeric_double_literal$subexpression$1$ebnf$2"]},
    {"name": "numeric_double_literal$subexpression$1", "symbols": ["exponent"]},
    {"name": "numeric_double_literal", "symbols": ["numeric_double_literal$ebnf$1", "numeric_double_literal$ebnf$2", "numeric_double_literal$subexpression$1"], "postprocess": d => +flatten(d).join("")},
    {"name": "minus_infinity_literal", "symbols": [{"literal":"-"}, "Infinity"], "postprocess": () => -Infinity},
    {"name": "plus_infinity_literal", "symbols": ["Infinity"], "postprocess": () => Infinity},
    {"name": "double_literal", "symbols": ["numeric_double_literal"], "postprocess": (d,_,reject) => isFinite(d[0]) ? d[0] : reject},
    {"name": "double_literal", "symbols": ["minus_infinity_literal"], "postprocess": pass0},
    {"name": "double_literal", "symbols": ["plus_infinity_literal"], "postprocess": pass0},
    {"name": "double_literal", "symbols": ["NaN"], "postprocess": () => NaN},
    {"name": "natural_literal$string$1", "symbols": [{"literal":"0"}, {"literal":"x"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "natural_literal$ebnf$1", "symbols": ["HEXDIG"]},
    {"name": "natural_literal$ebnf$1", "symbols": ["natural_literal$ebnf$1", "HEXDIG"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "natural_literal", "symbols": ["natural_literal$string$1", "natural_literal$ebnf$1"], "postprocess": collapse},
    {"name": "natural_literal$ebnf$2", "symbols": []},
    {"name": "natural_literal$ebnf$2", "symbols": ["natural_literal$ebnf$2", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "natural_literal", "symbols": [/[1-9]/, "natural_literal$ebnf$2"], "postprocess": collapse},
    {"name": "natural_literal", "symbols": [{"literal":"0"}], "postprocess": collapse},
    {"name": "integer_literal$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "integer_literal$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "integer_literal", "symbols": ["integer_literal$subexpression$1", "natural_literal"], "postprocess": collapse},
    {"name": "temporal_literal$subexpression$1", "symbols": [{"literal":"T"}]},
    {"name": "temporal_literal$subexpression$1", "symbols": [{"literal":"t"}]},
    {"name": "temporal_literal", "symbols": ["full_date", "temporal_literal$subexpression$1", "partial_time", "time_offset"], "postprocess":  d => ({ type: "RecordLit", value: [
          ["date", { type: "DateLit", value: d[0] }],
          ["time", { type: "TimeLit", value: d[2] }],
          ["timeZone", { type: "TimeZoneLit", value: d[3] }],
        ] }) },
    {"name": "temporal_literal$subexpression$2", "symbols": [{"literal":"T"}]},
    {"name": "temporal_literal$subexpression$2", "symbols": [{"literal":"t"}]},
    {"name": "temporal_literal", "symbols": ["full_date", "temporal_literal$subexpression$2", "partial_time"], "postprocess":  d => ({ type: "RecordLit", value: [
          ["date", { type: "DateLit", value: d[0] }],
          ["time", { type: "TimeLit", value: d[2] }],
        ] }) },
    {"name": "temporal_literal", "symbols": ["partial_time", "time_offset"], "postprocess":  d => ({ type: "RecordLit", value: [
          ["time", { type: "TimeLit", value: d[0] }],
          ["timeZone", { type: "TimeZoneLit", value: d[1] }],
        ] }) },
    {"name": "temporal_literal", "symbols": ["full_date"], "postprocess": d => ({ type: "DateLit", value: d[0] })},
    {"name": "temporal_literal", "symbols": ["partial_time"], "postprocess": d => ({ type: "TimeLit", value: d[0] })},
    {"name": "temporal_literal", "symbols": ["time_numoffset"], "postprocess": d => ({ type: "TimeZoneLit", value: d[0] })},
    {"name": "date_fullyear", "symbols": ["DIGIT", "DIGIT", "DIGIT", "DIGIT"], "postprocess": collapse},
    {"name": "date_month$subexpression$1", "symbols": [{"literal":"0"}, /[1-9]/]},
    {"name": "date_month$subexpression$1", "symbols": [{"literal":"1"}, /[0-2]/]},
    {"name": "date_month", "symbols": ["date_month$subexpression$1"], "postprocess": collapse},
    {"name": "date_mday", "symbols": ["DIGIT", "DIGIT"], "postprocess": collapse},
    {"name": "time_hour$subexpression$1", "symbols": [/[0-1]/, /[0-9]/]},
    {"name": "time_hour$subexpression$1", "symbols": [{"literal":"2"}, /[0-3]/]},
    {"name": "time_hour", "symbols": ["time_hour$subexpression$1"], "postprocess": collapse},
    {"name": "time_minute", "symbols": [/[0-5]/, /[0-9]/], "postprocess": collapse},
    {"name": "time_second", "symbols": [/[0-5]/, /[0-9]/], "postprocess": collapse},
    {"name": "time_secfrac$ebnf$1", "symbols": ["DIGIT"]},
    {"name": "time_secfrac$ebnf$1", "symbols": ["time_secfrac$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "time_secfrac", "symbols": [{"literal":"."}, "time_secfrac$ebnf$1"], "postprocess": collapse},
    {"name": "time_numoffset$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "time_numoffset$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "time_numoffset", "symbols": ["time_numoffset$subexpression$1", "time_hour", {"literal":":"}, "time_minute"], "postprocess": d => [d[0][0], d[1], d[3]]},
    {"name": "time_offset$subexpression$1", "symbols": [{"literal":"Z"}]},
    {"name": "time_offset$subexpression$1", "symbols": [{"literal":"z"}]},
    {"name": "time_offset", "symbols": ["time_offset$subexpression$1"], "postprocess": d => ["+", "00", "00"]},
    {"name": "time_offset", "symbols": ["time_numoffset"], "postprocess": pass0},
    {"name": "partial_time$ebnf$1", "symbols": ["time_secfrac"], "postprocess": id},
    {"name": "partial_time$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "partial_time", "symbols": ["time_hour", {"literal":":"}, "time_minute", {"literal":":"}, "time_second", "partial_time$ebnf$1"], "postprocess": d => [d[0], d[2], d[4] + (d[5] ? d[5][0] : "")]},
    {"name": "full_date", "symbols": ["date_fullyear", {"literal":"-"}, "date_month", {"literal":"-"}, "date_mday"], "postprocess": d => [d[0], d[2], d[4]]},
    {"name": "identifier", "symbols": ["variable"], "postprocess": pass0},
    {"name": "identifier", "symbols": ["builtin"], "postprocess": d => ({ type: d[0], value: [] })},
    {"name": "variable$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"@"}, "natural_literal"]},
    {"name": "variable$ebnf$1", "symbols": ["variable$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "variable$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "variable", "symbols": ["nonreserved_label", "variable$ebnf$1"], "postprocess": d => ({ type: "Var", value: [d[0], (pass(2)(d[1]) || 0) | 0] })},
    {"name": "path_character", "symbols": [/[\x21\x24-\x27\x2A-\x2B\x2D-\x2E\x30-\x3B\x3D\x40-\x5A\x5E-\x7A\x7C\x7E]/], "postprocess": pass0},
    {"name": "quoted_path_character", "symbols": [/[\x20-\x21\x23-\x2E\x30-\x7F]/], "postprocess": pass0},
    {"name": "quoted_path_character", "symbols": ["valid_non_ascii"], "postprocess": pass0},
    {"name": "unquoted_path_component$ebnf$1", "symbols": ["path_character"]},
    {"name": "unquoted_path_component$ebnf$1", "symbols": ["unquoted_path_component$ebnf$1", "path_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "unquoted_path_component", "symbols": ["unquoted_path_component$ebnf$1"], "postprocess": collapse},
    {"name": "quoted_path_component$ebnf$1", "symbols": ["quoted_path_character"]},
    {"name": "quoted_path_component$ebnf$1", "symbols": ["quoted_path_component$ebnf$1", "quoted_path_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "quoted_path_component", "symbols": ["quoted_path_component$ebnf$1"], "postprocess": collapse},
    {"name": "path_component$subexpression$1", "symbols": ["unquoted_path_component"], "postprocess": pass0},
    {"name": "path_component$subexpression$1", "symbols": [/[\x22]/, "quoted_path_component", /[\x22]/], "postprocess": pass1},
    {"name": "path_component", "symbols": [{"literal":"/"}, "path_component$subexpression$1"], "postprocess": pass1},
    {"name": "path$ebnf$1", "symbols": ["path_component"]},
    {"name": "path$ebnf$1", "symbols": ["path$ebnf$1", "path_component"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "path", "symbols": ["path$ebnf$1"], "postprocess": pass0},
    {"name": "local$string$1", "symbols": [{"literal":"."}, {"literal":"."}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "local", "symbols": ["local$string$1", "path"], "postprocess": d => ({ type: "Local", value: ["Parent", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": [{"literal":"."}, "path"], "postprocess": d => ({ type: "Local", value: ["Here", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": [{"literal":"~"}, "path"], "postprocess": d => ({ type: "Local", value: ["Home", d[1].slice(0, -1), d[1][d[1].length-1]] })},
    {"name": "local", "symbols": ["path"], "postprocess": d => ({ type: "Local", value: ["Absolute", d[0].slice(0, -1), d[0][d[0].length-1]] })},
    {"name": "scheme$string$1", "symbols": [{"literal":"h"}, {"literal":"t"}, {"literal":"t"}, {"literal":"p"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "scheme", "symbols": ["scheme$string$1"], "postprocess": pass0},
    {"name": "scheme$string$2", "symbols": [{"literal":"h"}, {"literal":"t"}, {"literal":"t"}, {"literal":"p"}, {"literal":"s"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "scheme", "symbols": ["scheme$string$2"], "postprocess": pass0},
    {"name": "http_raw$string$1", "symbols": [{"literal":":"}, {"literal":"/"}, {"literal":"/"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "http_raw$ebnf$1$subexpression$1", "symbols": [{"literal":"?"}, "query"]},
    {"name": "http_raw$ebnf$1", "symbols": ["http_raw$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "http_raw$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "http_raw", "symbols": ["scheme", "http_raw$string$1", "authority", "path_abempty", "http_raw$ebnf$1"], "postprocess": d => ({ type: "Remote", value: [d[0], d[2], d[3].slice(0,-1), d[3][d[3].length-1] || "", pass1(d[4])] })},
    {"name": "path_abempty$ebnf$1", "symbols": []},
    {"name": "path_abempty$ebnf$1$subexpression$1", "symbols": [{"literal":"/"}, "segment"], "postprocess": pass1},
    {"name": "path_abempty$ebnf$1", "symbols": ["path_abempty$ebnf$1", "path_abempty$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "path_abempty", "symbols": ["path_abempty$ebnf$1"], "postprocess": pass0},
    {"name": "authority$ebnf$1$subexpression$1", "symbols": ["userinfo", {"literal":"@"}]},
    {"name": "authority$ebnf$1", "symbols": ["authority$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "authority$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "authority$ebnf$2$subexpression$1", "symbols": [{"literal":":"}, "port"]},
    {"name": "authority$ebnf$2", "symbols": ["authority$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "authority$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "authority", "symbols": ["authority$ebnf$1", "host", "authority$ebnf$2"], "postprocess": collapse},
    {"name": "userinfo$ebnf$1", "symbols": []},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["unreserved"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["pct_encoded"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "userinfo$ebnf$1$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "userinfo$ebnf$1", "symbols": ["userinfo$ebnf$1", "userinfo$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "userinfo", "symbols": ["userinfo$ebnf$1"], "postprocess": pass0},
    {"name": "host", "symbols": ["IP_literal"], "postprocess": collapse},
    {"name": "host", "symbols": ["IPv4address"], "postprocess": collapse},
    {"name": "host", "symbols": ["domain"], "postprocess": collapse},
    {"name": "port$ebnf$1", "symbols": []},
    {"name": "port$ebnf$1", "symbols": ["port$ebnf$1", "DIGIT"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "port", "symbols": ["port$ebnf$1"], "postprocess": pass0},
    {"name": "IP_literal$subexpression$1", "symbols": ["IPv6address"], "postprocess": collapse},
    {"name": "IP_literal$subexpression$1", "symbols": ["IPvFuture"], "postprocess": collapse},
    {"name": "IP_literal", "symbols": [{"literal":"["}, "IP_literal$subexpression$1", {"literal":"]"}]},
    {"name": "IPvFuture$ebnf$1", "symbols": ["HEXDIG"]},
    {"name": "IPvFuture$ebnf$1", "symbols": ["IPvFuture$ebnf$1", "HEXDIG"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": ["unreserved"]},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "IPvFuture$ebnf$2$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "IPvFuture$ebnf$2", "symbols": ["IPvFuture$ebnf$2$subexpression$1"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": ["unreserved"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": ["sub_delims"]},
    {"name": "IPvFuture$ebnf$2$subexpression$2", "symbols": [{"literal":":"}]},
    {"name": "IPvFuture$ebnf$2", "symbols": ["IPvFuture$ebnf$2", "IPvFuture$ebnf$2$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "IPvFuture", "symbols": [{"literal":"v"}, "IPvFuture$ebnf$1", {"literal":"."}, "IPvFuture$ebnf$2"]},
    {"name": "IPv6address$subexpression$1", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$subexpression$1", "ls32"]},
    {"name": "IPv6address$string$1", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$2", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$string$1", "IPv6address$subexpression$2", "ls32"]},
    {"name": "IPv6address$ebnf$1$subexpression$1", "symbols": ["h16"]},
    {"name": "IPv6address$ebnf$1", "symbols": ["IPv6address$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$2", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$3", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$1", "IPv6address$string$2", "IPv6address$subexpression$3", "ls32"]},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$2$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$2$subexpression$1", "symbols": ["IPv6address$ebnf$2$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$2", "symbols": ["IPv6address$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$3", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$4", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$2", "IPv6address$string$3", "IPv6address$subexpression$4", "ls32"]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$3$subexpression$1", "symbols": ["IPv6address$ebnf$3$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$3", "symbols": ["IPv6address$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$4", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address$subexpression$5", "symbols": ["h16", {"literal":":"}, "h16", {"literal":":"}, "h16", {"literal":":"}]},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$3", "IPv6address$string$4", "IPv6address$subexpression$5", "ls32"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$4$subexpression$1", "symbols": ["IPv6address$ebnf$4$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$4", "symbols": ["IPv6address$ebnf$4$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$4", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$5", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$4", "IPv6address$string$5", "h16", {"literal":":"}, "ls32"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$5$subexpression$1", "symbols": ["IPv6address$ebnf$5$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$5", "symbols": ["IPv6address$ebnf$5$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$5", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$6", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$5", "IPv6address$string$6", "ls32"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$6$subexpression$1", "symbols": ["IPv6address$ebnf$6$subexpression$1$ebnf$1", "h16"]},
    {"name": "IPv6address$ebnf$6", "symbols": ["IPv6address$ebnf$6$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$6", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$7", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$6", "IPv6address$string$7", "h16"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$ebnf$7$subexpression$1$subexpression$1", "symbols": ["h16", {"literal":":"}, "IPv6address$ebnf$7$subexpression$1$subexpression$1$ebnf$1"]},
    {"name": "IPv6address$ebnf$7$subexpression$1", "symbols": ["IPv6address$ebnf$7$subexpression$1$subexpression$1", "h16"]},
    {"name": "IPv6address$ebnf$7", "symbols": ["IPv6address$ebnf$7$subexpression$1"], "postprocess": id},
    {"name": "IPv6address$ebnf$7", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "IPv6address$string$8", "symbols": [{"literal":":"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "IPv6address", "symbols": ["IPv6address$ebnf$7", "IPv6address$string$8"]},
    {"name": "h16", "symbols": ["HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG"]},
    {"name": "h16", "symbols": ["HEXDIG", "HEXDIG", "HEXDIG", "HEXDIG"]},
    {"name": "ls32$subexpression$1", "symbols": ["h16", {"literal":":"}, "h16"]},
    {"name": "ls32", "symbols": ["ls32$subexpression$1"]},
    {"name": "ls32", "symbols": ["IPv4address"]},
    {"name": "IPv4address", "symbols": ["dec_octet", {"literal":"."}, "dec_octet", {"literal":"."}, "dec_octet", {"literal":"."}, "dec_octet"]},
    {"name": "dec_octet", "symbols": ["DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [/[\x31-\x39]/, "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [{"literal":"1"}, "DIGIT", "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet", "symbols": [{"literal":"2"}, /[\x30-\x34]/, "DIGIT"], "postprocess": collapse},
    {"name": "dec_octet$string$1", "symbols": [{"literal":"2"}, {"literal":"5"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "dec_octet", "symbols": ["dec_octet$string$1", /[\x30-\x35]/], "postprocess": collapse},
    {"name": "domain$ebnf$1", "symbols": []},
    {"name": "domain$ebnf$1$subexpression$1", "symbols": ["domainlabel", {"literal":"."}]},
    {"name": "domain$ebnf$1", "symbols": ["domain$ebnf$1", "domain$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domain$ebnf$2", "symbols": [{"literal":"."}], "postprocess": id},
    {"name": "domain$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "domain", "symbols": ["domain$ebnf$1", "domainlabel", "domain$ebnf$2"], "postprocess": collapse},
    {"name": "domainlabel$ebnf$1", "symbols": ["ALPHANUM"]},
    {"name": "domainlabel$ebnf$1", "symbols": ["domainlabel$ebnf$1", "ALPHANUM"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2", "symbols": []},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$1", "symbols": [{"literal":"-"}]},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$1", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$1", {"literal":"-"}], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$2", "symbols": ["ALPHANUM"]},
    {"name": "domainlabel$ebnf$2$subexpression$1$ebnf$2", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$2", "ALPHANUM"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel$ebnf$2$subexpression$1", "symbols": ["domainlabel$ebnf$2$subexpression$1$ebnf$1", "domainlabel$ebnf$2$subexpression$1$ebnf$2"]},
    {"name": "domainlabel$ebnf$2", "symbols": ["domainlabel$ebnf$2", "domainlabel$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "domainlabel", "symbols": ["domainlabel$ebnf$1", "domainlabel$ebnf$2"], "postprocess": collapse},
    {"name": "segment$ebnf$1", "symbols": []},
    {"name": "segment$ebnf$1", "symbols": ["segment$ebnf$1", "pchar"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "segment", "symbols": ["segment$ebnf$1"], "postprocess": collapse},
    {"name": "pchar$subexpression$1", "symbols": ["unreserved"]},
    {"name": "pchar$subexpression$1", "symbols": ["pct_encoded"]},
    {"name": "pchar$subexpression$1", "symbols": ["sub_delims"]},
    {"name": "pchar$subexpression$1", "symbols": [{"literal":":"}]},
    {"name": "pchar$subexpression$1", "symbols": [{"literal":"@"}]},
    {"name": "pchar", "symbols": ["pchar$subexpression$1"], "postprocess": collapse},
    {"name": "query$ebnf$1", "symbols": []},
    {"name": "query$ebnf$1$subexpression$1", "symbols": ["pchar"]},
    {"name": "query$ebnf$1$subexpression$1", "symbols": [{"literal":"/"}]},
    {"name": "query$ebnf$1$subexpression$1", "symbols": [{"literal":"?"}]},
    {"name": "query$ebnf$1", "symbols": ["query$ebnf$1", "query$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "query", "symbols": ["query$ebnf$1"], "postprocess": collapse},
    {"name": "pct_encoded", "symbols": [{"literal":"%"}, "HEXDIG", "HEXDIG"], "postprocess": collapse},
    {"name": "unreserved$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "unreserved$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"-"}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"."}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "unreserved$subexpression$1", "symbols": [{"literal":"~"}]},
    {"name": "unreserved", "symbols": ["unreserved$subexpression$1"], "postprocess": collapse},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"!"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"$"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"&"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"'"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"*"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"+"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":";"}]},
    {"name": "sub_delims$subexpression$1", "symbols": [{"literal":"="}]},
    {"name": "sub_delims", "symbols": ["sub_delims$subexpression$1"], "postprocess": collapse},
    {"name": "http$ebnf$1$subexpression$1", "symbols": ["whsp", "using", "whsp1", "import_expression"]},
    {"name": "http$ebnf$1", "symbols": ["http$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "http$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "http", "symbols": ["http_raw", "http$ebnf$1"], "postprocess": d => (d[0].value[5] = pass(3)(d[1]), d[0])},
    {"name": "env$string$1", "symbols": [{"literal":"e"}, {"literal":"n"}, {"literal":"v"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "env$subexpression$1", "symbols": ["bash_environment_variable"]},
    {"name": "env$subexpression$1", "symbols": [/[\x22]/, "posix_environment_variable", /[\x22]/]},
    {"name": "env", "symbols": ["env$string$1", "env$subexpression$1"], "postprocess": d => ({ type: "Env", value: [d[1].length === 1 ? d[1][0] : d[1][1]] })},
    {"name": "bash_environment_variable$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "bash_environment_variable$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "bash_environment_variable$ebnf$1", "symbols": []},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": ["ALPHA"]},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": ["DIGIT"]},
    {"name": "bash_environment_variable$ebnf$1$subexpression$1", "symbols": [{"literal":"_"}]},
    {"name": "bash_environment_variable$ebnf$1", "symbols": ["bash_environment_variable$ebnf$1", "bash_environment_variable$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "bash_environment_variable", "symbols": ["bash_environment_variable$subexpression$1", "bash_environment_variable$ebnf$1"], "postprocess": collapse},
    {"name": "posix_environment_variable$ebnf$1", "symbols": ["posix_environment_variable_character"]},
    {"name": "posix_environment_variable$ebnf$1", "symbols": ["posix_environment_variable$ebnf$1", "posix_environment_variable_character"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "posix_environment_variable", "symbols": ["posix_environment_variable$ebnf$1"], "postprocess": collapse},
    {"name": "posix_environment_variable_character$subexpression$1", "symbols": [/[\x22\x5C\x61\x62\x66\x6E\x72\x74\x76]/]},
    {"name": "posix_environment_variable_character", "symbols": [/[\x5C]/, "posix_environment_variable_character$subexpression$1"]},
    {"name": "posix_environment_variable_character", "symbols": [/[\x20-\x21\x23-\x3C\x3E-\x5B\x5D-\x7E]/]},
    {"name": "import_type", "symbols": ["missing"], "postprocess": () => ({ type: "Missing", value: [] })},
    {"name": "import_type", "symbols": ["local"], "postprocess": pass0},
    {"name": "import_type", "symbols": ["http"], "postprocess": pass0},
    {"name": "import_type", "symbols": ["env"], "postprocess": pass0},
    {"name": "sha256_prefix$string$1", "symbols": [{"literal":"s"}, {"literal":"h"}, {"literal":"a"}, {"literal":"2"}, {"literal":"5"}, {"literal":"6"}, {"literal":":"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "sha256_prefix", "symbols": ["sha256_prefix$string$1"]},
    {"name": "hash", "symbols": ["sha256_prefixpostprocess": d => collapse(d.slice(1))},
    {"name": "import$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Text"], "postprocess": pass0},
    {"name": "import$ebnf$1$subexpression$1$subexpression$1", "symbols": ["Location"], "postprocess": pass0},
    {"name": "import$ebnf$1$subexpression$1", "symbols": ["whsp", "as", "whsp1", "import$ebnf$1$subexpression$1$subexpression$1"], "postprocess": pass(3)},
    {"name": "import$ebnf$1", "symbols": ["import$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "import$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "import", "symbols": ["import_type", "import$ebnf$1"], "postprocess": tag("Import")},
    {"name": "expression", "symbols": ["lambda", "whsp", {"literal":"("}, "whsp", "nonreserved_label", "whsp", {"literal":":"}, "whsp1", "expression", "whsp", {"literal":")"}, "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Lam", value: [d[4], d[8], d[14]] })},
    {"name": "expression", "symbols": ["if", "whsp1", "expression", "whsp", "then", "whsp1", "expression", "whsp", "else", "whsp1", "expression"], "postprocess": d => ({ type: "BoolIf", value: [d[2], d[6], d[10]] })},
    {"name": "expression$ebnf$1", "symbols": ["let_binding"]},
    {"name": "expression$ebnf$1", "symbols": ["expression$ebnf$1", "let_binding"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "expression", "symbols": ["expression$ebnf$1", "in", "whsp1", "expression"], "postprocess": d => d[0].reduceRight((b,a) => ({ type: "Let", value: a.concat(b) }), d[3])},
    {"name": "expression", "symbols": ["forall", "whsp", {"literal":"("}, "whsp", "nonreserved_label", "whsp", {"literal":":"}, "whsp1", "expression", "whsp", {"literal":")"}, "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Pi", value: [d[4], d[8], d[14]] })},
    {"name": "expression", "symbols": ["operator_expression", "whsp", "arrow", "whsp", "expression"], "postprocess": d => ({ type: "Pi", value: ["_", d[0], d[4]] })},
    {"name": "expression", "symbols": ["with_expression"], "postprocess": pass0},
    {"name": "expression", "symbols": ["merge", "whsp1", "import_expression", "whsp1", "import_expression", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => ({ type: "Merge", value: [d[2], d[4], d[8]] })},
    {"name": "expression", "symbols": ["empty_list_literal"], "postprocess": pass0},
    {"name": "expression", "symbols": ["toMap", "whsp1", "import_expression", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => ({ type: "ToMap", value: [d[2],d[6]] })},
    {"name": "expression", "symbols": ["assert", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => ({ type: "Assert", value: [d[4]] })},
    {"name": "expression", "symbols": ["annotated_expression"], "postprocess": pass0},
    {"name": "annotated_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":":"}, "whsp1", "expression"]},
    {"name": "annotated_expression$ebnf$1", "symbols": ["annotated_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "annotated_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "annotated_expression", "symbols": ["operator_expression", "annotated_expression$ebnf$1"], "postprocess": d => d[1] == null ? d[0] : { type: "Annot", value: [d[0], d[1][3]] }},
    {"name": "let_binding$ebnf$1$subexpression$1", "symbols": [{"literal":":"}, "whsp1", "expression", "whsp"]},
    {"name": "let_binding$ebnf$1", "symbols": ["let_binding$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "let_binding$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "let_binding", "symbols": ["let", "whsp1", "nonreserved_label", "whsp", "let_binding$ebnf$1", {"literal":"="}, "whsp", "expression", "whsp"], "postprocess": d => [d[2],pass(2)(d[4]),d[7]]},
    {"name": "empty_list_literal$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "empty_list_literal$ebnf$1", "symbols": ["empty_list_literal$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "empty_list_literal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "empty_list_literal", "symbols": [{"literal":"["}, "whsp", "empty_list_literal$ebnf$1", {"literal":"]"}, "whsp", {"literal":":"}, "whsp1", "application_expression"], "postprocess": d => ({ type: "ListLit", value: [[],d[7]] })},
    {"name": "with_expression$ebnf$1$subexpression$1", "symbols": ["whsp1", "with", "whsp1", "with_clause"]},
    {"name": "with_expression$ebnf$1", "symbols": ["with_expression$ebnf$1$subexpression$1"]},
    {"name": "with_expression$ebnf$1$subexpression$2", "symbols": ["whsp1", "with", "whsp1", "with_clause"]},
    {"name": "with_expression$ebnf$1", "symbols": ["with_expression$ebnf$1", "with_expression$ebnf$1$subexpression$2"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "with_expression", "symbols": ["import_expression", "with_expression$ebnf$1"], "postprocess": binop("With", 3, true)},
    {"name": "with_clause$ebnf$1", "symbols": []},
    {"name": "with_clause$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"."}, "whsp", "any_label_or_some"]},
    {"name": "with_clause$ebnf$1", "symbols": ["with_clause$ebnf$1", "with_clause$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "with_clause", "symbols": ["any_label_or_some", "with_clause$ebnf$1", "whsp", {"literal":"="}, "whsp", "operator_expression"], "postprocess": d => [ [d[0], ...d[1].map(e => e[3])], d[5] ]},
    {"name": "operator_expression", "symbols": ["equivalent_expression"], "postprocess": pass0},
    {"name": "equivalent_expression$ebnf$1", "symbols": []},
    {"name": "equivalent_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "equivalent", "whsp", "import_alt_expression"]},
    {"name": "equivalent_expression$ebnf$1", "symbols": ["equivalent_expression$ebnf$1", "equivalent_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "equivalent_expression", "symbols": ["import_alt_expression", "equivalent_expression$ebnf$1"], "postprocess": binop("Equivalent", 3)},
    {"name": "import_alt_expression$ebnf$1", "symbols": []},
    {"name": "import_alt_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"?"}, "whsp1", "or_expression"]},
    {"name": "import_alt_expression$ebnf$1", "symbols": ["import_alt_expression$ebnf$1", "import_alt_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "import_alt_expression", "symbols": ["or_expression", "import_alt_expression$ebnf$1"], "postprocess": binop("ImportAlt", 3)},
    {"name": "or_expression$ebnf$1", "symbols": []},
    {"name": "or_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"|"}, {"literal":"|"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "or_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "or_expression$ebnf$1$subexpression$1$string$1", "whsp", "plus_expression"]},
    {"name": "or_expression$ebnf$1", "symbols": ["or_expression$ebnf$1", "or_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "or_expression", "symbols": ["plus_expression", "or_expression$ebnf$1"], "postprocess": binop("BoolOr", 3)},
    {"name": "plus_expression$ebnf$1", "symbols": []},
    {"name": "plus_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"+"}, "whsp1", "text_append_expression"]},
    {"name": "plus_expression$ebnf$1", "symbols": ["plus_expression$ebnf$1", "plus_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "plus_expression", "symbols": ["text_append_expression", "plus_expression$ebnf$1"], "postprocess": binop("NaturalPlus", 3)},
    {"name": "text_append_expression$ebnf$1", "symbols": []},
    {"name": "text_append_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"+"}, {"literal":"+"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "text_append_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "text_append_expression$ebnf$1$subexpression$1$string$1", "whsp", "list_append_expression"]},
    {"name": "text_append_expression$ebnf$1", "symbols": ["text_append_expression$ebnf$1", "text_append_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "text_append_expression", "symbols": ["list_append_expression", "text_append_expression$ebnf$1"], "postprocess": binop("TextAppend", 3)},
    {"name": "list_append_expression$ebnf$1", "symbols": []},
    {"name": "list_append_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"#"}, "whsp", "and_expression"]},
    {"name": "list_append_expression$ebnf$1", "symbols": ["list_append_expression$ebnf$1", "list_append_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "list_append_expression", "symbols": ["and_expression", "list_append_expression$ebnf$1"], "postprocess": binop("ListAppend", 3)},
    {"name": "and_expression$ebnf$1", "symbols": []},
    {"name": "and_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"&"}, {"literal":"&"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "and_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "and_expression$ebnf$1$subexpression$1$string$1", "whsp", "combine_expression"]},
    {"name": "and_expression$ebnf$1", "symbols": ["and_expression$ebnf$1", "and_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "and_expression", "symbols": ["combine_expression", "and_expression$ebnf$1"], "postprocess": binop("BoolAnd", 3)},
    {"name": "combine_expression$ebnf$1", "symbols": []},
    {"name": "combine_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "combine", "whsp", "prefer_expression"]},
    {"name": "combine_expression$ebnf$1", "symbols": ["combine_expression$ebnf$1", "combine_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "combine_expression", "symbols": ["prefer_expression", "combine_expression$ebnf$1"], "postprocess": binop("Combine", 3)},
    {"name": "prefer_expression$ebnf$1", "symbols": []},
    {"name": "prefer_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "prefer", "whsp", "combine_types_expression"]},
    {"name": "prefer_expression$ebnf$1", "symbols": ["prefer_expression$ebnf$1", "prefer_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "prefer_expression", "symbols": ["combine_types_expression", "prefer_expression$ebnf$1"], "postprocess": binop("Prefer", 3)},
    {"name": "combine_types_expression$ebnf$1", "symbols": []},
    {"name": "combine_types_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "combine_types", "whsp", "times_expression"]},
    {"name": "combine_types_expression$ebnf$1", "symbols": ["combine_types_expression$ebnf$1", "combine_types_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "combine_types_expression", "symbols": ["times_expression", "combine_types_expression$ebnf$1"], "postprocess": binop("CombineTypes", 3)},
    {"name": "times_expression$ebnf$1", "symbols": []},
    {"name": "times_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"*"}, "whsp", "equal_expression"]},
    {"name": "times_expression$ebnf$1", "symbols": ["times_expression$ebnf$1", "times_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "times_expression", "symbols": ["equal_expression", "times_expression$ebnf$1"], "postprocess": binop("NaturalTimes", 3)},
    {"name": "equal_expression$ebnf$1", "symbols": []},
    {"name": "equal_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"="}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "equal_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "equal_expression$ebnf$1$subexpression$1$string$1", "whsp", "not_equal_expression"]},
    {"name": "equal_expression$ebnf$1", "symbols": ["equal_expression$ebnf$1", "equal_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "equal_expression", "symbols": ["not_equal_expression", "equal_expression$ebnf$1"], "postprocess": binop("BoolEQ", 3)},
    {"name": "not_equal_expression$ebnf$1", "symbols": []},
    {"name": "not_equal_expression$ebnf$1$subexpression$1$string$1", "symbols": [{"literal":"!"}, {"literal":"="}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "not_equal_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "not_equal_expression$ebnf$1$subexpression$1$string$1", "whsp", "application_expression"]},
    {"name": "not_equal_expression$ebnf$1", "symbols": ["not_equal_expression$ebnf$1", "not_equal_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "not_equal_expression", "symbols": ["application_expression", "not_equal_expression$ebnf$1"], "postprocess": binop("BoolNE", 3)},
    {"name": "application_expression$ebnf$1", "symbols": []},
    {"name": "application_expression$ebnf$1$subexpression$1", "symbols": ["whsp1", "import_expression"]},
    {"name": "application_expression$ebnf$1", "symbols": ["application_expression$ebnf$1", "application_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "application_expression", "symbols": ["first_application_expression", "application_expression$ebnf$1"], "postprocess": binop("App")},
    {"name": "first_application_expression", "symbols": ["merge", "whsp1", "import_expression", "whsp1", "import_expression"], "postprocess": d => ({ type: "Merge", value: [d[2],d[4],null]})},
    {"name": "first_application_expression", "symbols": ["Some", "whsp1", "import_expression"], "postprocess": d => ({ type: "Some", value: [d[2]] })},
    {"name": "first_application_expression", "symbols": ["toMap", "whsp1", "import_expression"], "postprocess": d => ({ type: "ToMap", value: [d[2], null] })},
    {"name": "first_application_expression", "symbols": ["import_expression"], "postprocess": pass0},
    {"name": "import_expression$subexpression$1", "symbols": ["import"], "postprocess": pass0},
    {"name": "import_expression$subexpression$1", "symbols": ["completion_expression"], "postprocess": pass0},
    {"name": "import_expression$ebnf$1$subexpression$1", "symbols": ["whsp1", "hash"]},
    {"name": "import_expression$ebnf$1", "symbols": ["import_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "import_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "import_expression", "symbols": ["import_expression$subexpression$1", "import_expression$ebnf$1"], "postprocess": d => d[1] == null ? d[0] : ({ type: "Hashed", value: [d[0], d[1][1]] })},
    {"name": "completion_expression$ebnf$1$subexpression$1", "symbols": ["whsp", "complete", "whsp", "selector_expression"]},
    {"name": "completion_expression$ebnf$1", "symbols": ["completion_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "completion_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "completion_expression", "symbols": ["selector_expression", "completion_expression$ebnf$1"], "postprocess": d => d[1] != null ? { type: "RecordCompletion", value: [d[0], d[1][3]] } : d[0]},
    {"name": "selector_expression$ebnf$1", "symbols": []},
    {"name": "selector_expression$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"."}, "whsp", "selector"]},
    {"name": "selector_expression$ebnf$1", "symbols": ["selector_expression$ebnf$1", "selector_expression$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "selector_expression", "symbols": ["primitive_expression", "selector_expression$ebnf$1"], "postprocess":  d =>
        d[1].reduce((r, v) => ({ type: v[3].type, value: [r, v[3].value[0]] }), d[0])
        },
    {"name": "selector", "symbols": ["any_label"], "postprocess": tag("Field")},
    {"name": "selector", "symbols": ["labels"], "postprocess": tag("Project")},
    {"name": "selector", "symbols": ["type_selector"], "postprocess": tag("ProjectType")},
    {"name": "labels$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "labels$ebnf$1", "symbols": ["labels$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "labels$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$1", "symbols": []},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp", "any_label_or_some", "whsp"]},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$1", "symbols": ["labels$ebnf$2$subexpression$1$ebnf$1", "labels$ebnf$2$subexpression$1$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$2$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$2", "symbols": ["labels$ebnf$2$subexpression$1$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "labels$ebnf$2$subexpression$1$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "labels$ebnf$2$subexpression$1", "symbols": ["any_label_or_some", "whsp", "labels$ebnf$2$subexpression$1$ebnf$1", "labels$ebnf$2$subexpression$1$ebnf$2"]},
    {"name": "labels$ebnf$2", "symbols": ["labels$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "labels$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "labels", "symbols": [{"literal":"{"}, "whsp", "labels$ebnf$1", "labels$ebnf$2", {"literal":"}"}], "postprocess": d => d[3] != null ? [d[3][0]].concat(d[3][2].map(v => v[2])) : []},
    {"name": "type_selector", "symbols": [{"literal":"("}, "whsp", "expression", "whsp", {"literal":")"}], "postprocess": pass(2)},
    {"name": "primitive_expression", "symbols": ["double_literal"], "postprocess": tag("DoubleLit")},
    {"name": "primitive_expression", "symbols": ["natural_literal"], "postprocess": tag("NaturalLit")},
    {"name": "primitive_expression", "symbols": ["integer_literal"], "postprocess": tag("IntegerLit")},
    {"name": "primitive_expression", "symbols": ["text_literal"], "postprocess": d => ({ type: "TextLit", value: d[0] })},
    {"name": "primitive_expression", "symbols": ["temporal_literal"], "postprocess": pass0},
    {"name": "primitive_expression$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "primitive_expression$ebnf$1", "symbols": ["primitive_expression$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "primitive_expression$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "primitive_expression", "symbols": [{"literal":"{"}, "whsp", "primitive_expression$ebnf$1", "record_type_or_literal", {"literal":"}"}], "postprocess": pass(3)},
    {"name": "primitive_expression$ebnf$2$subexpression$1", "symbols": [{"literal":"|"}, "whsp"]},
    {"name": "primitive_expression$ebnf$2", "symbols": ["primitive_expression$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "primitive_expression$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "primitive_expression", "symbols": [{"literal":"<"}, "whsp", "primitive_expression$ebnf$2", "union_type", {"literal":">"}], "postprocess": pass(3)},
    {"name": "primitive_expression", "symbols": ["non_empty_list_literal"], "postprocess": pass0},
    {"name": "primitive_expression", "symbols": ["identifier"], "postprocess": pass0},
    {"name": "primitive_expression", "symbols": [{"literal":"("}, "complete_expression", {"literal":")"}], "postprocess": pass1},
    {"name": "record_type_or_literal", "symbols": ["empty_record_literal", "whsp"], "postprocess": pass0},
    {"name": "record_type_or_literal", "symbols": ["non_empty_record_type_or_literal", "whsp"], "postprocess": pass0},
    {"name": "record_type_or_literal", "symbols": ["empty_record_type"], "postprocess": pass0},
    {"name": "empty_record_literal$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":","}]},
    {"name": "empty_record_literal$ebnf$1", "symbols": ["empty_record_literal$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "empty_record_literal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "empty_record_literal", "symbols": [{"literal":"="}, "empty_record_literal$ebnf$1"], "postprocess": () => ({ type: "RecordLit", value: [] })},
    {"name": "empty_record_type", "symbols": [], "postprocess": () => ({ type: "Record", value: [] })},
    {"name": "non_empty_record_type_or_literal", "symbols": ["non_empty_record_type"], "postprocess": pass0},
    {"name": "non_empty_record_type_or_literal", "symbols": ["non_empty_record_literal"], "postprocess": pass0},
    {"name": "non_empty_record_type$ebnf$1", "symbols": []},
    {"name": "non_empty_record_type$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":","}, "whsp", "record_type_entry"]},
    {"name": "non_empty_record_type$ebnf$1", "symbols": ["non_empty_record_type$ebnf$1", "non_empty_record_type$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_record_type$ebnf$2$subexpression$1", "symbols": ["whsp", {"literal":","}]},
    {"name": "non_empty_record_type$ebnf$2", "symbols": ["non_empty_record_type$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "non_empty_record_type$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "non_empty_record_type", "symbols": ["record_type_entry", "non_empty_record_type$ebnf$1", "non_empty_record_type$ebnf$2"], "postprocess": d => ({ type: "Record", value: [d[0], ...d[1].map(e => e[3])] })},
    {"name": "record_type_entry", "symbols": ["any_label_or_some", "whsp", {"literal":":"}, "whsp1", "expression"], "postprocess": d => [d[0], d[4]]},
    {"name": "non_empty_record_literal$ebnf$1", "symbols": []},
    {"name": "non_empty_record_literal$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":","}, "whsp", "record_literal_entry"]},
    {"name": "non_empty_record_literal$ebnf$1", "symbols": ["non_empty_record_literal$ebnf$1", "non_empty_record_literal$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_record_literal$ebnf$2$subexpression$1", "symbols": ["whsp", {"literal":","}]},
    {"name": "non_empty_record_literal$ebnf$2", "symbols": ["non_empty_record_literal$ebnf$2$subexpression$1"], "postprocess": id},
    {"name": "non_empty_record_literal$ebnf$2", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "non_empty_record_literal", "symbols": ["record_literal_entry", "non_empty_record_literal$ebnf$1", "non_empty_record_literal$ebnf$2"], "postprocess": 
        d => ({ type: "RecordLit", value: merge_fields([d[0], ...d[1].map(e => e[3])]) })
        },
    {"name": "record_literal_entry", "symbols": ["any_label_or_some"], "postprocess": d => [d[0], { type: "Var", value: [d[0],0] }]},
    {"name": "record_literal_entry$ebnf$1", "symbols": []},
    {"name": "record_literal_entry$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"."}, "whsp", "any_label_or_some"]},
    {"name": "record_literal_entry$ebnf$1", "symbols": ["record_literal_entry$ebnf$1", "record_literal_entry$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "record_literal_entry", "symbols": ["any_label_or_some", "record_literal_entry$ebnf$1", "whsp", {"literal":"="}, "whsp", "expression"], "postprocess":  d => [d[0],d[1].reduceRight(
          (acc, l) => ({ type: "RecordLit", value: [[l[3], acc]] }),
          d[5]
        )] },
    {"name": "union_type$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"|"}]},
    {"name": "union_type$ebnf$1", "symbols": ["union_type$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "union_type$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "union_type", "symbols": ["non_empty_union_type", "union_type$ebnf$1", "whsp"], "postprocess": pass0},
    {"name": "union_type", "symbols": ["empty_union_type"], "postprocess": pass0},
    {"name": "empty_union_type", "symbols": [], "postprocess": () => ({ type: "Union", value: [] })},
    {"name": "non_empty_union_type$ebnf$1", "symbols": []},
    {"name": "non_empty_union_type$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":"|"}, "whsp", "union_type_entry"], "postprocess": pass(3)},
    {"name": "non_empty_union_type$ebnf$1", "symbols": ["non_empty_union_type$ebnf$1", "non_empty_union_type$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_union_type", "symbols": ["union_type_entry", "non_empty_union_type$ebnf$1"], "postprocess": d => ({ type: "Union", value: [d[0]].concat(d[1]) })},
    {"name": "union_type_entry$ebnf$1$subexpression$1", "symbols": ["whsp", {"literal":":"}, "whsp1", "expression"]},
    {"name": "union_type_entry$ebnf$1", "symbols": ["union_type_entry$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "union_type_entry$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "union_type_entry", "symbols": ["any_label_or_some", "union_type_entry$ebnf$1"], "postprocess": d => [d[0],pass(3)(d[1])]},
    {"name": "non_empty_list_literal$ebnf$1$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "non_empty_list_literal$ebnf$1", "symbols": ["non_empty_list_literal$ebnf$1$subexpression$1"], "postprocess": id},
    {"name": "non_empty_list_literal$ebnf$1", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "non_empty_list_literal$ebnf$2", "symbols": []},
    {"name": "non_empty_list_literal$ebnf$2$subexpression$1", "symbols": [{"literal":","}, "whsp", "expression", "whsp"]},
    {"name": "non_empty_list_literal$ebnf$2", "symbols": ["non_empty_list_literal$ebnf$2", "non_empty_list_literal$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "non_empty_list_literal$ebnf$3$subexpression$1", "symbols": [{"literal":","}, "whsp"]},
    {"name": "non_empty_list_literal$ebnf$3", "symbols": ["non_empty_list_literal$ebnf$3$subexpression$1"], "postprocess": id},
    {"name": "non_empty_list_literal$ebnf$3", "symbols": [], "postprocess": function(d) {return null;}},
    {"name": "non_empty_list_literal", "symbols": [{"literal":"["}, "whsp", "non_empty_list_literal$ebnf$1", "expression", "whsp", "non_empty_list_literal$ebnf$2", "non_empty_list_literal$ebnf$3", {"literal":"]"}], "postprocess": d => ({ type: "ListLit", value: [[d[3]].concat(d[5].map(v => v[2])),null] })},
    {"name": "shebang$string$1", "symbols": [{"literal":"#"}, {"literal":"!"}], "postprocess": function joiner(d) {return d.join('');}},
    {"name": "shebang$ebnf$1", "symbols": []},
    {"name": "shebang$ebnf$1", "symbols": ["shebang$ebnf$1", "not_end_of_line"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "shebang", "symbols": ["shebang$string$1", "shebang$ebnf$1", "end_of_line"]}
]
  , ParserStart: "complete_expression"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
