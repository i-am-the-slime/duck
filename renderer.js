(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb2, mod5) => function __require() {
    return mod5 || (0, cb2[__getOwnPropNames(cb2)[0]])((mod5 = { exports: {} }).exports, mod5), mod5.exports;
  };
  var __copyProps = (to2, from4, except2, desc) => {
    if (from4 && typeof from4 === "object" || typeof from4 === "function") {
      for (let key of __getOwnPropNames(from4))
        if (!__hasOwnProp.call(to2, key) && key !== except2)
          __defProp(to2, key, { get: () => from4[key], enumerable: !(desc = __getOwnPropDesc(from4, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod5, isNodeMode, target6) => (target6 = mod5 != null ? __create(__getProtoOf(mod5)) : {}, __copyProps(isNodeMode || !mod5 || !mod5.__esModule ? __defProp(target6, "default", { value: mod5, enumerable: true }) : target6, mod5));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack10) {
            {
              currentExtraStackFrame = stack10;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack10) {
              {
                currentExtraStackFrame = stack10;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack10 = "";
              if (currentExtraStackFrame) {
                stack10 += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack10 += impl() || "";
              }
              return stack10;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn4(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error5(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack10 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack10 !== "") {
                format += "%s";
                args = args.concat([stack10]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error5("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback2, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback2, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback2, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign3 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback2) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback2, "setState");
          };
          Component.prototype.forceUpdate = function(callback2) {
            this.updater.enqueueForceUpdate(this, callback2, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info2) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn4("%s(...) is deprecated in plain JavaScript React classes. %s", info2[0], info2[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign3(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a4) {
            return isArrayImpl(a4);
          }
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkKeyStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error5("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init5(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty3.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty3.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName2) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error5("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName2) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error5("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName2);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error5('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source3, owner, props) {
            var element3 = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element3._store = {};
              Object.defineProperty(element3._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element3, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element3, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source3
              });
              if (Object.freeze) {
                Object.freeze(element3.props);
                Object.freeze(element3);
              }
            }
            return element3;
          };
          function createElement13(type, config, children2) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source3 = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source3 = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i7 = 0; i7 < childrenLength; i7++) {
                childArray[i7] = arguments[i7 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName2 = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName2);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName2);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement2(element3, config, children2) {
            if (element3 === null || element3 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element3 + ".");
            }
            var propName;
            var props = assign3({}, element3.props);
            var key = element3.key;
            var ref = element3.ref;
            var self2 = element3._self;
            var source3 = element3._source;
            var owner = element3._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element3.type && element3.type.defaultProps) {
                defaultProps = element3.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty3.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children2;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i7 = 0; i7 < childrenLength; i7++) {
                childArray[i7] = arguments[i7 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element3.type, key, ref, self2, source3, owner, props);
          }
          function isValidElement2(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match6) {
              return escaperLookup[match6];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text7) {
            return text7.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element3, index6) {
            if (typeof element3 === "object" && element3 !== null && element3.key != null) {
              {
                checkKeyStringCoercion(element3.key);
              }
              return escape2("" + element3.key);
            }
            return index6.toString(36);
          }
          function mapIntoArray(children2, array, escapedPrefix, nameSoFar, callback2) {
            var type = typeof children2;
            if (type === "undefined" || type === "boolean") {
              children2 = null;
            }
            var invokeCallback = false;
            if (children2 === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children2.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children2;
              var mappedChild = callback2(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c3) {
                  return c3;
                });
              } else if (mappedChild != null) {
                if (isValidElement2(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children2)) {
              for (var i7 = 0; i7 < children2.length; i7++) {
                child = children2[i7];
                nextName = nextNamePrefix + getElementKey(child, i7);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback2);
              }
            } else {
              var iteratorFn = getIteratorFn(children2);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children2;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn4("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator2 = iteratorFn.call(iterableChildren);
                var step3;
                var ii = 0;
                while (!(step3 = iterator2.next()).done) {
                  child = step3.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback2);
                }
              } else if (type === "object") {
                var childrenString = String(children2);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children2).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children2, func, context) {
            if (children2 == null) {
              return children2;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children2, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children2) {
            var n2 = 0;
            mapChildren(children2, function() {
              n2++;
            });
            return n2;
          }
          function forEachChildren(children2, forEachFunc, forEachContext) {
            mapChildren(children2, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray3(children2) {
            return mapChildren(children2, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children2) {
            if (!isValidElement2(children2)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children2;
          }
          function createContext10(defaultValue4) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _currentValue: defaultValue4,
              _currentValue2: defaultValue4,
              _threadCount: 0,
              Provider: null,
              Consumer: null,
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error5("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error5("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName2) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn4("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName2);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved2 = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved2;
                  resolved._result = moduleObject2;
                }
              }, function(error6) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error6;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved2) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error5("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error5("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error5("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error5("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef6(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error5("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error5("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error5("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error5("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name15) {
                  ownName = name15;
                  if (!render.name && !render.displayName) {
                    render.displayName = name15;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare4) {
            {
              if (!isValidElementType(type)) {
                error5("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare4 === void 0 ? null : compare4
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name15) {
                  ownName = name15;
                  if (!type.name && !type.displayName) {
                    type.displayName = name15;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error5("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext19(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error5("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error5("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState7(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init5) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init5);
          }
          function useRef10(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect24(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create4, deps);
          }
          function useInsertionEffect6(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create4, deps);
          }
          function useLayoutEffect6(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create4, deps);
          }
          function useCallback4(callback2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback2, deps);
          }
          function useMemo8(create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create4, deps);
          }
          function useImperativeHandle2(ref, create4, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create4, deps);
          }
          function useDebugValue(value12, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value12, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value12) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value12);
          }
          function useId3() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error5("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix4;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix4 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match6 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix4 = match6 && match6[1] || "";
                }
              }
              return "\n" + prefix4 + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init5(payload), source3, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element3) {
            {
              if (element3) {
                var owner = element3._owner;
                var stack10 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack10);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location3, componentName, element3) {
            {
              var has = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element3);
                    error5("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element3);
                    error5("Failed %s type: %s", location3, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element3) {
            {
              if (element3) {
                var owner = element3._owner;
                var stack10 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
                setExtraStackFrame(stack10);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name15 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name15) {
                return "\n\nCheck the render method of `" + name15 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source3) {
            if (source3 !== void 0) {
              var fileName = source3.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source3.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info2 = getDeclarationErrorAddendum();
            if (!info2) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info2 = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info2;
          }
          function validateExplicitKey(element3, parentType) {
            if (!element3._store || element3._store.validated || element3.key != null) {
              return;
            }
            element3._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element3 && element3._owner && element3._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element3._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element3);
              error5('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i7 = 0; i7 < node2.length; i7++) {
                var child = node2[i7];
                if (isValidElement2(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement2(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator2 = iteratorFn.call(node2);
                  var step3;
                  while (!(step3 = iterator2.next()).done) {
                    if (isValidElement2(step3.value)) {
                      validateExplicitKey(step3.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element3) {
            {
              var type = element3.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name15 = getComponentNameFromType(type);
                checkPropTypes(propTypes, element3.props, "prop", name15, element3);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error5("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error5("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment2) {
            {
              var keys4 = Object.keys(fragment2.props);
              for (var i7 = 0; i7 < keys4.length; i7++) {
                var key = keys4[i7];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment2);
                  error5("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment2.ref !== null) {
                setCurrentlyValidatingElement$1(fragment2);
                error5("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children2) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info2 = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info2 += sourceInfo;
              } else {
                info2 += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info2 = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error5("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info2);
              }
            }
            var element3 = createElement13.apply(this, arguments);
            if (element3 == null) {
              return element3;
            }
            if (validType) {
              for (var i7 = 2; i7 < arguments.length; i7++) {
                validateChildKeys(arguments[i7], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element3);
            } else {
              validatePropTypes(element3);
            }
            return element3;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn4("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn4("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element3, props, children2) {
            var newElement = cloneElement2.apply(this, arguments);
            for (var i7 = 2; i7 < arguments.length; i7++) {
              validateChildKeys(arguments[i7], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope2, options3) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope2();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn4("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback2) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error5("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback2;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback2) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback2();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error6) {
                popActScope(prevActScopeDepth);
                throw error6;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error6) {
                      popActScope(prevActScopeDepth);
                      reject(error6);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error5("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error5("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error6) {
                  reject(error6);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i7 = 0;
                try {
                  for (; i7 < queue.length; i7++) {
                    var callback2 = queue[i7];
                    do {
                      callback2 = callback2(true);
                    } while (callback2 !== null);
                  }
                  queue.length = 0;
                } catch (error6) {
                  queue = queue.slice(i7 + 1);
                  throw error6;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray3,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext10;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef2;
          exports.forwardRef = forwardRef6;
          exports.isValidElement = isValidElement2;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback4;
          exports.useContext = useContext19;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect24;
          exports.useId = useId3;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect6;
          exports.useLayoutEffect = useLayoutEffect6;
          exports.useMemo = useMemo8;
          exports.useReducer = useReducer2;
          exports.useRef = useRef10;
          exports.useState = useState7;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node2) {
            var index6 = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index6);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop2(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first2 = heap[0];
            var last7 = heap.pop();
            if (last7 !== first2) {
              heap[0] = last7;
              siftDown(heap, last7, 0);
            }
            return first2;
          }
          function siftUp(heap, node2, i7) {
            var index6 = i7;
            while (index6 > 0) {
              var parentIndex = index6 - 1 >>> 1;
              var parent2 = heap[parentIndex];
              if (compare4(parent2, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index6] = parent2;
                index6 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i7) {
            var index6 = i7;
            var length10 = heap.length;
            var halfLength = length10 >>> 1;
            while (index6 < halfLength) {
              var leftIndex = (index6 + 1) * 2 - 1;
              var left4 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right3 = heap[rightIndex];
              if (compare4(left4, node2) < 0) {
                if (rightIndex < length10 && compare4(right3, left4) < 0) {
                  heap[index6] = right3;
                  heap[rightIndex] = node2;
                  index6 = rightIndex;
                } else {
                  heap[index6] = left4;
                  heap[leftIndex] = node2;
                  index6 = leftIndex;
                }
              } else if (rightIndex < length10 && compare4(right3, node2) < 0) {
                heap[index6] = right3;
                heap[rightIndex] = node2;
                index6 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare4(a4, b4) {
            var diff = a4.sortIndex - b4.sortIndex;
            return diff !== 0 ? diff : a4.id - b4.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime2) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop2(timerQueue);
              } else if (timer.startTime <= currentTime2) {
                pop2(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime2) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime2);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error5) {
                  if (currentTask !== null) {
                    var currentTime2 = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime2);
                    currentTask.isQueued = false;
                  }
                  throw error5;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime2 = initialTime2;
            advanceTimers(currentTime2);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime2 && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback2 = currentTask.callback;
              if (typeof callback2 === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime2;
                var continuationCallback = callback2(didUserCallbackTimeout);
                currentTime2 = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop2(taskQueue);
                  }
                }
                advanceTimers(currentTime2);
              } else {
                pop2(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime2);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler2) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler2();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler2) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler2();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback2) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback2.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback2, options3) {
            var currentTime2 = exports.unstable_now();
            var startTime2;
            if (typeof options3 === "object" && options3 !== null) {
              var delay2 = options3.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime2 + delay2;
              } else {
                startTime2 = currentTime2;
              }
            } else {
              startTime2 = currentTime2;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback: callback2,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime2) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime2);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime2 = exports.unstable_now();
              startTime = currentTime2;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime2);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port2 = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port2.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback2) {
            scheduledHostCallback = callback2;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback2, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback2(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React9 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React9.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn4(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error5(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack10 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack10 !== "") {
                format += "%s";
                args = args.concat([stack10]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment5 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error5("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i7 = 0; i7 < dependencies.length; i7++) {
              allNativeEvents.add(dependencies[i7]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkAttributeStringCoercion(value12, attributeName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkKeyStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkPropStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkHtmlStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error5("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value12) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix5 = name15.toLowerCase().slice(0, 5);
                  return prefix5 !== "data-" && prefix5 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag) {
            if (value12 === null || typeof value12 === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value12;
                case OVERLOADED_BOOLEAN:
                  return value12 === false;
                case NUMERIC:
                  return isNaN(value12);
                case POSITIVE_NUMERIC:
                  return isNaN(value12) || value12 < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name15) {
            return properties.hasOwnProperty(name15) ? properties[name15] : null;
          }
          function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name15;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name15 = _ref[0], attributeName = _ref[1];
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error5("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          function getValueForProperty(node2, name15, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name15);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value12 = node2.getAttribute(attributeName);
                    if (value12 === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                      return value12;
                    }
                    if (value12 === "" + expected) {
                      return expected;
                    }
                    return value12;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name15, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name15, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name15)) {
                return;
              }
              if (!node2.hasAttribute(name15)) {
                return expected === void 0 ? void 0 : null;
              }
              var value12 = node2.getAttribute(name15);
              {
                checkAttributeStringCoercion(expected, name15);
              }
              if (value12 === "" + expected) {
                return expected;
              }
              return value12;
            }
          }
          function setValueForProperty(node2, name15, value12, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name15);
            if (shouldIgnoreAttribute(name15, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name15, value12, propertyInfo, isCustomComponentTag)) {
              value12 = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name15)) {
                var _attributeName = name15;
                if (value12 === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value12, name15);
                  }
                  node2.setAttribute(_attributeName, "" + value12);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value12 === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value12;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value12 === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value12 === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value12, attributeName);
                  }
                  attributeValue = "" + value12;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error5("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix4;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix4 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match6 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix4 = match6 && match6[1] || "";
                }
              }
              return "\n" + prefix4 + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source3, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init5(payload), source3, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source3 = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info2 = "";
              var node2 = workInProgress2;
              do {
                info2 += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info2;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error5("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init5(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag2 = fiber.tag, type = fiber.type;
            switch (tag2) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider2 = type;
                return getContextName$1(provider2._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment5:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString5(value12) {
            return "" + value12;
          }
          function getToStringValue(value12) {
            switch (typeof value12) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value12;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                return value12;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName2, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error5("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error5("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem3) {
            var type = elem3.type;
            var nodeName4 = elem3.nodeName;
            return nodeName4 && nodeName4.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value12 = "";
            if (!node2) {
              return value12;
            }
            if (isCheckable(node2)) {
              value12 = node2.checked ? "true" : "false";
            } else {
              value12 = node2.value;
            }
            return value12;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get5 = descriptor.get, set4 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get5.call(this);
              },
              set: function(value12) {
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                currentValue = "" + value12;
                set4.call(this, value12);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value12) {
                {
                  checkFormFieldValueStringCoercion(value12);
                }
                currentValue = "" + value12;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track2(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element3, props) {
            var node2 = element3;
            var checked2 = props.checked;
            var hostProps = assign3({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked2 != null ? checked2 : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element3, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error5("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error5("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element3;
            var defaultValue4 = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue4),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element3, props) {
            var node2 = element3;
            var checked2 = props.checked;
            if (checked2 != null) {
              setValueForProperty(node2, "checked", checked2, false);
            }
          }
          function updateWrapper(element3, props) {
            var node2 = element3;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error5("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error5("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element3, props);
            var value12 = getToStringValue(props.value);
            var type = props.type;
            if (value12 != null) {
              if (type === "number") {
                if (value12 === 0 && node2.value === "" || node2.value != value12) {
                  node2.value = toString5(value12);
                }
              } else if (node2.value !== toString5(value12)) {
                node2.value = toString5(value12);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue4(node2, props.type, value12);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue4(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element3, props, isHydrating2) {
            var node2 = element3;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString5(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name15 = node2.name;
            if (name15 !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name15 !== "") {
              node2.name = name15;
            }
          }
          function restoreControlledState(element3, props) {
            var node2 = element3;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name15 = props.name;
            if (props.type === "radio" && name15 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name15, "name");
              }
              var group3 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name15) + '][type="radio"]');
              for (var i7 = 0; i7 < group3.length; i7++) {
                var otherNode = group3[i7];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue4(node2, type, value12) {
            if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
              if (value12 == null) {
                node2.defaultValue = toString5(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString5(value12)) {
                node2.defaultValue = toString5(value12);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element3, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React9.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error5("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error5("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error5("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element3, props) {
            if (props.value != null) {
              element3.setAttribute("value", toString5(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a4) {
            return isArrayImpl(a4);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i7 = 0; i7 < valuePropNames.length; i7++) {
                var propName = valuePropNames[i7];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error5("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error5("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple3, propValue, setDefaultSelected2) {
            var options4 = node2.options;
            if (multiple3) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i7 = 0; i7 < selectedValues.length; i7++) {
                selectedValue["$" + selectedValues[i7]] = true;
              }
              for (var _i = 0; _i < options4.length; _i++) {
                var selected2 = selectedValue.hasOwnProperty("$" + options4[_i].value);
                if (options4[_i].selected !== selected2) {
                  options4[_i].selected = selected2;
                }
                if (selected2 && setDefaultSelected2) {
                  options4[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString5(getToStringValue(propValue));
              var defaultSelected2 = null;
              for (var _i2 = 0; _i2 < options4.length; _i2++) {
                if (options4[_i2].value === _selectedValue) {
                  options4[_i2].selected = true;
                  if (setDefaultSelected2) {
                    options4[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected2 === null && !options4[_i2].disabled) {
                  defaultSelected2 = options4[_i2];
                }
              }
              if (defaultSelected2 !== null) {
                defaultSelected2.selected = true;
              }
            }
          }
          function getHostProps$1(element3, props) {
            return assign3({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element3, props) {
            var node2 = element3;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error5("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element3, props) {
            var node2 = element3;
            node2.multiple = !!props.multiple;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node2, !!props.multiple, value12, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element3, props) {
            var node2 = element3;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node2, !!props.multiple, value12, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element3, props) {
            var node2 = element3;
            var value12 = props.value;
            if (value12 != null) {
              updateOptions(node2, !!props.multiple, value12, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element3, props) {
            var node2 = element3;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign3({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString5(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element3, props) {
            var node2 = element3;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error5("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children2 = props.children, defaultValue4 = props.defaultValue;
              if (children2 != null) {
                {
                  error5("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue4 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children2)) {
                    if (children2.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children2 = children2[0];
                  }
                  defaultValue4 = children2;
                }
              }
              if (defaultValue4 == null) {
                defaultValue4 = "";
              }
              initialValue = defaultValue4;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element3, props) {
            var node2 = element3;
            var value12 = getToStringValue(props.value);
            var defaultValue4 = getToStringValue(props.defaultValue);
            if (value12 != null) {
              var newValue = toString5(value12);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue4 != null) {
              node2.defaultValue = toString5(defaultValue4);
            }
          }
          function postMountWrapper$3(element3, props) {
            var node2 = element3;
            var textContent2 = node2.textContent;
            if (textContent2 === node2._wrapperState.initialValue) {
              if (textContent2 !== "" && textContent2 !== null) {
                node2.value = textContent2;
              }
            }
          }
          function restoreControlledState$2(element3, props) {
            updateWrapper$1(element3, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html3) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html3.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html3;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent2 = function(node2, text7) {
            if (text7) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text7;
                return;
              }
            }
            node2.textContent = text7;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix5, key) {
            return prefix5 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop3) {
            prefixes.forEach(function(prefix5) {
              isUnitlessNumber[prefixKey(prefix5, prop3)] = isUnitlessNumber[prop3];
            });
          });
          function dangerousStyleValue(name15, value12, isCustomProperty3) {
            var isEmpty2 = value12 == null || typeof value12 === "boolean" || value12 === "";
            if (isEmpty2) {
              return "";
            }
            if (!isCustomProperty3 && typeof value12 === "number" && value12 !== 0 && !(isUnitlessNumber.hasOwnProperty(name15) && isUnitlessNumber[name15])) {
              return value12 + "px";
            }
            {
              checkCSSPropertyStringCoercion(value12, name15);
            }
            return ("" + value12).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name15) {
            return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name15, value12) {
              if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
                return;
              }
              warnedStyleValues[value12] = true;
              error5(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name15, value12) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error5("`NaN` is an invalid value for the `%s` css style property.", name15);
            };
            var warnStyleValueIsInfinity = function(name15, value12) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error5("`Infinity` is an invalid value for the `%s` css style property.", name15);
            };
            warnValidStyle = function(name15, value12) {
              if (name15.indexOf("-") > -1) {
                warnHyphenatedStyleName(name15);
              } else if (badVendoredStyleNamePattern.test(name15)) {
                warnBadVendoredStyleName(name15);
              } else if (badStyleValueWithSemicolonPattern.test(value12)) {
                warnStyleValueWithSemicolon(name15, value12);
              }
              if (typeof value12 === "number") {
                if (isNaN(value12)) {
                  warnStyleValueIsNaN(name15, value12);
                } else if (!isFinite(value12)) {
                  warnStyleValueIsInfinity(name15, value12);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style4 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style4.setProperty(styleName, styleValue);
              } else {
                style4[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value12) {
            return value12 == null || typeof value12 === "boolean" || value12 === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i7 = 0; i7 < longhands.length; i7++) {
                expanded[longhands[i7]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error5("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = assign3({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag2, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag2]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error5("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName2, props) {
            if (tagName2.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName2) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName2, name15) {
            {
              if (hasOwnProperty3.call(warnedProperties, name15) && warnedProperties[name15]) {
                return true;
              }
              if (rARIACamel.test(name15)) {
                var ariaName = "aria-" + name15.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error5("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                  warnedProperties[name15] = true;
                  return true;
                }
                if (name15 !== correctName) {
                  error5("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
              if (rARIA.test(name15)) {
                var lowerCasedName = name15.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name15] = true;
                  return false;
                }
                if (name15 !== standardName) {
                  error5("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error5("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error5("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error5("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error5("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
              if (hasOwnProperty3.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
                return true;
              }
              var lowerCasedName = name15.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error5("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name15)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error5("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name15)) {
                  error5("Unknown event handler property `%s`. It will be ignored.", name15);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name15)) {
                if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                  error5("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error5("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error5("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
                error5("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "number" && isNaN(value12)) {
                error5("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name15);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name15) {
                  error5("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (!isReserved && name15 !== lowerCasedName) {
                error5("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                if (value12) {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
                } else {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                warnedProperties$1[name15] = true;
                return false;
              }
              if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error5("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error5("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error5("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error5("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error5("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target6 = nativeEvent.target || nativeEvent.srcElement || window;
            if (target6.correspondingUseElement) {
              target6 = target6.correspondingUseElement;
            }
            return target6.nodeType === TEXT_NODE ? target6.parentNode : target6;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target6) {
            var internalInstance = getInstanceFromNode(target6);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target6) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target6);
              } else {
                restoreQueue = [target6];
              }
            } else {
              restoreTarget = target6;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target6 = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target6);
            if (queuedTargets) {
              for (var i7 = 0; i7 < queuedTargets.length; i7++) {
                restoreStateOfTarget(queuedTargets[i7]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a4, b4) {
            if (isInsideEventHandler) {
              return fn(a4, b4);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a4, b4);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag2) {
            return tag2 === "button" || tag2 === "input" || tag2 === "select" || tag2 === "textarea";
          }
          function shouldPreventMouseEvent(name15, type, props) {
            switch (name15) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options3 = {};
              Object.defineProperty(options3, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options3, options3);
              window.removeEventListener("test", options3, options3);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name15, func, context, a4, b4, c3, d2, e, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error6) {
              this.onError(error6);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name15, func, context, a4, b4, c3, d2, e, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error6;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error6 = event.error;
                  didSetError = true;
                  if (error6 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error6 != null && typeof error6 === "object") {
                      try {
                        error6._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name15 ? name15 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error6 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error6 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error6);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error6) {
              hasError = true;
              caughtError = error6;
            }
          };
          function invokeGuardedCallback(name15, func, context, a4, b4, c3, d2, e, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name15, func, context, a4, b4, c3, d2, e, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error6 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error6;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error6 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error6;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error6 = caughtError;
              hasError = false;
              caughtError = null;
              return error6;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get4(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set3(key, value12) {
            key._reactInternals = value12;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement2 = 2;
          var Update = 4;
          var ChildDeletion = 16;
          var ContentReset = 32;
          var Callback = 64;
          var DidCapture = 128;
          var ForceClientRender = 256;
          var Ref = 512;
          var Snapshot = 1024;
          var Passive = 2048;
          var Hydrating = 4096;
          var Visibility = 8192;
          var StoreConsistency = 16384;
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = 32767;
          var Incomplete = 32768;
          var ShouldCapture = 65536;
          var ForceUpdateForLegacySuspense = 131072;
          var Forked = 1048576;
          var RefStatic = 2097152;
          var LayoutStatic = 4194304;
          var PassiveStatic = 8388608;
          var MountLayoutDev = 16777216;
          var MountPassiveDev = 33554432;
          var BeforeMutationMask = Update | Snapshot | 0;
          var MutationMask = Placement2 | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement2 | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component26) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error5("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get4(component26);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a4 = fiber;
            var b4 = alternate;
            while (true) {
              var parentA = a4.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a4 = b4 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a4) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b4) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a4.return !== b4.return) {
                a4 = parentA;
                b4 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a4) {
                    didFindChild = true;
                    a4 = parentA;
                    b4 = parentB;
                    break;
                  }
                  if (_child === b4) {
                    didFindChild = true;
                    b4 = parentA;
                    a4 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a4) {
                      didFindChild = true;
                      a4 = parentB;
                      b4 = parentA;
                      break;
                    }
                    if (_child === b4) {
                      didFindChild = true;
                      b4 = parentB;
                      a4 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a4.alternate !== b4) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a4.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a4.stateNode.current === a4) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match6 = findCurrentHostFiberImpl(child);
              if (match6 !== null) {
                return match6;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent2) {
            var currentParent = findCurrentFiberUsingSlowPath(parent2);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match6 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match6 !== null) {
                  return match6;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now3 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error5("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign3({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error5("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children2) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children2);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error5("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error5("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error5("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error5("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error5("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map43 = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index7 = 0; index7 < TotalLanes; index7++) {
                var label6 = getLabelForLane(lane);
                map43.set(lane, label6);
                lane *= 2;
              }
              return map43;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = 0;
          var ConcurrentMode = 1;
          var ProfileMode = 2;
          var StrictLegacyMode = 8;
          var StrictEffectsMode = 16;
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log6 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log6(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var InputContinuousHydrationLane = 2;
          var InputContinuousLane = 4;
          var DefaultHydrationLane = 8;
          var DefaultLane = 16;
          var TransitionHydrationLane = 32;
          var TransitionLanes = 4194240;
          var TransitionLane1 = 64;
          var TransitionLane2 = 128;
          var TransitionLane3 = 256;
          var TransitionLane4 = 512;
          var TransitionLane5 = 1024;
          var TransitionLane6 = 2048;
          var TransitionLane7 = 4096;
          var TransitionLane8 = 8192;
          var TransitionLane9 = 16384;
          var TransitionLane10 = 32768;
          var TransitionLane11 = 65536;
          var TransitionLane12 = 131072;
          var TransitionLane13 = 262144;
          var TransitionLane14 = 524288;
          var TransitionLane15 = 1048576;
          var TransitionLane16 = 2097152;
          var RetryLanes = 130023424;
          var RetryLane1 = 4194304;
          var RetryLane2 = 8388608;
          var RetryLane3 = 16777216;
          var RetryLane4 = 33554432;
          var RetryLane5 = 67108864;
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = 134217728;
          var NonIdleLanes = 268435455;
          var IdleHydrationLane = 268435456;
          var IdleLane = 536870912;
          var OffscreenLane = 1073741824;
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error5("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index7 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index7;
                nextLanes |= entanglements[index7];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              var eventTime = eventTimes[index7];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime2) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime2 + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime2 + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error5("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime2) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              var expirationTime = expirationTimes[index7];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index7] = computeExpirationTime(lane, currentTime2);
                }
              } else if (expirationTime <= currentTime2) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a4, b4) {
            return (a4 & b4) !== NoLanes;
          }
          function isSubsetOfLanes(set4, subset) {
            return (set4 & subset) === subset;
          }
          function mergeLanes(a4, b4) {
            return a4 | b4;
          }
          function removeLanes(set4, subset) {
            return set4 & ~subset;
          }
          function intersectLanes(a4, b4) {
            return a4 & b4;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a4, b4) {
            return a4 !== NoLane && a4 < b4 ? a4 : b4;
          }
          function createLaneMap(initial8) {
            var laneMap = [];
            for (var i7 = 0; i7 < TotalLanes; i7++) {
              laneMap.push(initial8);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index7 = laneToIndex(updateLane);
            eventTimes[index7] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              expirationTimes[index7] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              entanglements[index7] = NoLanes;
              eventTimes[index7] = NoTimestamp;
              expirationTimes[index7] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index7 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index7;
              if (lane & entangledLanes | entanglements[index7] & entangledLanes) {
                entanglements[index7] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index7 = laneToIndex(lanes);
              var lane = 1 << index7;
              var updaters = pendingUpdatersLaneMap[index7];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index7 = laneToIndex(lanes);
              var lane = 1 << index7;
              var updaters = pendingUpdatersLaneMap[index7];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a4, b4) {
            return a4 !== 0 && a4 < b4 ? a4 : b4;
          }
          function lowerEventPriority(a4, b4) {
            return a4 === 0 || a4 > b4 ? a4 : b4;
          }
          function isHigherEventPriority(a4, b4) {
            return a4 !== 0 && a4 < b4;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType3) {
            return discreteReplayableEvents.indexOf(eventType3) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag2 === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target6) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target: target6,
              priority: updatePriority
            };
            var i7 = 0;
            for (; i7 < queuedExplicitHydrationTargets.length; i7++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i7].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i7, 0, queuedTarget);
            if (i7 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map43) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map43.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i7 = 1; i7 < queuedDiscreteEvents.length; i7++) {
                var queuedEvent = queuedDiscreteEvents[i7];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent2;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container5, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container5, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container5, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent2(domEventName, eventSystemFlags, container5, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent2(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag2 = nearestMounted.tag;
                if (tag2 === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag2 === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target6, eventType3, listener) {
            target6.addEventListener(eventType3, listener, false);
            return listener;
          }
          function addEventCaptureListener(target6, eventType3, listener) {
            target6.addEventListener(eventType3, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target6, eventType3, listener, passive) {
            target6.addEventListener(eventType3, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target6, eventType3, listener, passive) {
            target6.addEventListener(eventType3, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset3() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end3;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end3 = 1; end3 <= minEnd; end3++) {
              if (startValue[startLength - end3] !== endValue[endLength - end3]) {
                break;
              }
            }
            var sliceTail = end3 > 1 ? 1 - end3 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign3(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign3({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign3({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign3({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign3({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign3({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign3({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign3({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent2 = this;
            var nativeEvent = syntheticEvent2.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign3({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign3({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign3({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign3({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign3({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType3;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType3 = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType3 = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType3 = "onCompositionEnd";
            }
            if (!eventType3) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType3 === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType3 === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType3);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType3, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset3();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem3) {
            var nodeName4 = elem3 && elem3.nodeName && elem3.nodeName.toLowerCase();
            if (nodeName4 === "input") {
              return !!supportedInputTypes[elem3.type];
            }
            if (nodeName4 === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element3 = document.createElement("div");
              element3.setAttribute(eventName, "return;");
              isSupported = typeof element3[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target6) {
            enqueueStateRestore(target6);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target6);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement2 = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem3) {
            var nodeName4 = elem3.nodeName && elem3.nodeName.toLowerCase();
            return nodeName4 === "select" || nodeName4 === "input" && elem3.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target6, targetInst) {
            activeElement2 = target6;
            activeElementInst = targetInst;
            activeElement2.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement2) {
              return;
            }
            activeElement2.detachEvent("onpropertychange", handlePropertyChange);
            activeElement2 = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target6, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target6, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem3) {
            var nodeName4 = elem3.nodeName;
            return nodeName4 && nodeName4.toLowerCase() === "input" && (elem3.type === "checkbox" || elem3.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state3 = node2._wrapperState;
            if (!state3 || !state3.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue4(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from4;
            var to2;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from4 = targetInst;
              to2 = _related ? getClosestInstanceFromNode(_related) : null;
              if (to2 !== null) {
                var nearestMounted = getNearestMountedFiber(to2);
                if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                  to2 = null;
                }
              }
            } else {
              from4 = null;
              to2 = targetInst;
            }
            if (from4 === to2) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode4 = from4 == null ? win : getNodeFromInstance(from4);
            var toNode = to2 == null ? win : getNodeFromInstance(to2);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from4, nativeEvent, nativeEventTarget);
            leave.target = fromNode4;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode4;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from4, to2);
          }
          function is2(x3, y2) {
            return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i7 = 0; i7 < keysA.length; i7++) {
              var currentKey = keysA[i7];
              if (!hasOwnProperty3.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset2) {
            var node2 = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset2 && nodeEnd >= offset2) {
                  return {
                    node: node2,
                    offset: offset2 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length10 = 0;
            var start2 = -1;
            var end3 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length10 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end3 = length10 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length10 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length10;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end3 = length10;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end3 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end3
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length10 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length10);
            var end3 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length10);
            if (!selection.extend && start2 > end3) {
              var temp = end3;
              end3 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end3);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range4 = doc.createRange();
              range4.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end3) {
                selection.addRange(range4);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range4.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range4);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe2) {
            try {
              return typeof iframe2.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element3 = getActiveElement();
            while (element3 instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element3)) {
                win = element3.contentWindow;
              } else {
                return element3;
              }
              element3 = getActiveElement(win.document);
            }
            return element3;
          }
          function hasSelectionCapabilities(elem3) {
            var nodeName4 = elem3 && elem3.nodeName && elem3.nodeName.toLowerCase();
            return nodeName4 && (nodeName4 === "input" && (elem3.type === "text" || elem3.type === "search" || elem3.type === "tel" || elem3.type === "url" || elem3.type === "password") || nodeName4 === "textarea" || elem3.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i7 = 0; i7 < ancestors.length; i7++) {
                var info2 = ancestors[i7];
                info2.element.scrollLeft = info2.left;
                info2.element.scrollTop = info2.top;
              }
            }
          }
          function getSelection(input6) {
            var selection;
            if ("selectionStart" in input6) {
              selection = {
                start: input6.selectionStart,
                end: input6.selectionEnd
              };
            } else {
              selection = getOffsets(input6);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input6, offsets) {
            var start2 = offsets.start;
            var end3 = offsets.end;
            if (end3 === void 0) {
              end3 = start2;
            }
            if ("selectionStart" in input6) {
              input6.selectionStart = start2;
              input6.selectionEnd = Math.min(end3, input6.value.length);
            } else {
              setOffsets(input6, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style3 = {};
          if (canUseDOM) {
            style3 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i7 = 0; i7 < simpleEventPluginEvents.length; i7++) {
              var eventName = simpleEventPluginEvents[i7];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i7 = dispatchListeners.length - 1; i7 >= 0; i7--) {
                var _dispatchListeners$i = dispatchListeners[i7], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i7 = 0; i7 < dispatchQueue.length; i7++) {
              var _dispatchQueue$i = dispatchQueue[i7], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error5('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target6) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error5('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target6, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument2 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument2 !== null) {
                if (!ownerDocument2[listeningMarker]) {
                  ownerDocument2[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument2);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container5 = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container5, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container5 !== null) {
                        var parentNode = getClosestInstanceFromNode(container5);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container5 = container5.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag2 = _instance2.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag2 = _instance3.tag;
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target6, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target6;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag2 = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag2 === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from4, to2) {
            var common = from4 && to2 ? getLowestCommonAncestor(from4, to2) : null;
            if (from4 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from4, common, false);
            }
            if (to2 !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error5("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names2 = [];
              attributeNames.forEach(function(name15) {
                names2.push(name15);
              });
              error5("Extra attributes from the server: %s", names2);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error5("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error5("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent2, html3) {
              var testElement = parent2.namespaceURI === HTML_NAMESPACE ? parent2.ownerDocument.createElement(parent2.tagName) : parent2.ownerDocument.createElementNS(parent2.namespaceURI, parent2.tagName);
              testElement.innerHTML = html3;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error5('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop2;
          }
          function setInitialDOMProperties(tag2, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag2 !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent2(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent2(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i7 = 0; i7 < updatePayload.length; i7 += 2) {
              var propKey = updatePayload[i7];
              var propValue = updatePayload[i7 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent2(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement13(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error5("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div18 = ownerDocument2.createElement("div");
                div18.innerHTML = "<script><\/script>";
                var firstChild = div18.firstChild;
                domElement = div18.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty3.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error5("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode2(text7, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text7);
          }
          function setInitialProperties(domElement, tag2, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag2, rawProps);
            {
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            var props;
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i7 = 0; i7 < mediaEventTypes.length; i7++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i7], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag2, props);
            setInitialDOMProperties(tag2, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag2) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag2, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag2, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag2) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag2, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag2, lastRawProps, nextRawProps) {
            if (tag2 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag2, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag2, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag2) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag2, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag2, rawProps);
              validatePropertiesInDevelopment(tag2, rawProps);
            }
            switch (tag2) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i7 = 0; i7 < mediaEventTypes.length; i7++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i7], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag2, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name15 = attributes[_i].name.toLowerCase();
                switch (name15) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag2);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag2) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text7, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text7;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error5("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error5('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag2, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error5("Expected server HTML to contain a matching <%s> in <%s>.", tag2, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text7) {
            {
              if (text7 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error5('Expected server HTML to contain a matching text node for "%s" in <%s>.', text7, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag2, props) {
            switch (tag2) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag2) {
              var ancestorInfo = assign3({}, oldInfo || emptyAncestorInfo);
              var info2 = {
                tag: tag2
              };
              if (inScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag2) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag2) !== -1 && tag2 !== "address" && tag2 !== "div" && tag2 !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info2;
              if (tag2 === "form") {
                ancestorInfo.formTag = info2;
              }
              if (tag2 === "a") {
                ancestorInfo.aTagInScope = info2;
              }
              if (tag2 === "button") {
                ancestorInfo.buttonTagInScope = info2;
              }
              if (tag2 === "nobr") {
                ancestorInfo.nobrTagInScope = info2;
              }
              if (tag2 === "p") {
                ancestorInfo.pTagInButtonScope = info2;
              }
              if (tag2 === "li") {
                ancestorInfo.listItemTagAutoclosing = info2;
              }
              if (tag2 === "dd" || tag2 === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info2;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag2, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag2 === "option" || tag2 === "optgroup" || tag2 === "#text";
                case "optgroup":
                  return tag2 === "option" || tag2 === "#text";
                case "option":
                  return tag2 === "#text";
                case "tr":
                  return tag2 === "th" || tag2 === "td" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag2 === "tr" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "colgroup":
                  return tag2 === "col" || tag2 === "template";
                case "table":
                  return tag2 === "caption" || tag2 === "colgroup" || tag2 === "tbody" || tag2 === "tfoot" || tag2 === "thead" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "head":
                  return tag2 === "base" || tag2 === "basefont" || tag2 === "bgsound" || tag2 === "link" || tag2 === "meta" || tag2 === "title" || tag2 === "noscript" || tag2 === "noframes" || tag2 === "style" || tag2 === "script" || tag2 === "template";
                case "html":
                  return tag2 === "head" || tag2 === "body" || tag2 === "frameset";
                case "frameset":
                  return tag2 === "frame";
                case "#document":
                  return tag2 === "html";
              }
              switch (tag2) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag2, ancestorInfo) {
              switch (tag2) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error5("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info2 = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info2 += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error5("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info2);
              } else {
                error5("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container5 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container5.namespaceURI || null;
                type = container5.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement13(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text7, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text7, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode2(text7, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback2) {
            return localPromise.resolve(null).then(callback2).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error6) {
            setTimeout(function() {
              throw error6;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent2(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild2(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container5, child) {
            var parentNode;
            if (container5.nodeType === COMMENT_NODE) {
              parentNode = container5.parentNode;
              parentNode.insertBefore(child, container5);
            } else {
              parentNode = container5;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container5._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore2(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container5, child, beforeChild) {
            if (container5.nodeType === COMMENT_NODE) {
              container5.parentNode.insertBefore(child, beforeChild);
            } else {
              container5.insertBefore(child, beforeChild);
            }
          }
          function removeChild2(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container5, child) {
            if (container5.nodeType === COMMENT_NODE) {
              container5.parentNode.removeChild(child);
            } else {
              container5.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container5, suspenseInstance) {
            if (container5.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container5.parentNode, suspenseInstance);
            } else if (container5.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container5, suspenseInstance);
            }
            retryIfBlockedOn(container5);
          }
          function hideInstance(instance) {
            instance = instance;
            var style4 = instance.style;
            if (typeof style4.setProperty === "function") {
              style4.setProperty("display", "none", "important");
            } else {
              style4.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text7) {
            textInstance.nodeValue = text7;
          }
          function clearContainer(container5) {
            if (container5.nodeType === ELEMENT_NODE) {
              container5.textContent = "";
            } else if (container5.nodeType === DOCUMENT_NODE) {
              if (container5.documentElement) {
                container5.removeChild(container5.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text7) {
            if (text7 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message2, stack10;
            if (dataset) {
              digest = dataset.dgst;
              {
                message2 = dataset.msg;
                stack10 = dataset.stck;
              }
            }
            {
              return {
                message: message2,
                digest,
                stack: stack10
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback2) {
            instance._reactRetry = callback2;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text7, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text7);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container5) {
            retryIfBlockedOn(container5);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text7, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text7, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text7, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text7, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text7) {
            {
              warnForInsertedHydratedText(parentContainer, text7);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text7) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text7);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text7, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text7);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error5("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element3) {
            {
              if (element3) {
                var owner = element3._owner;
                var stack10 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack10);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location3, componentName, element3) {
            {
              var has2 = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element3);
                    error5("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element3);
                    error5("Failed %s type: %s", location3, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index6 = -1;
          function createCursor(defaultValue4) {
            return {
              current: defaultValue4
            };
          }
          function pop2(cursor2, fiber) {
            if (index6 < 0) {
              {
                error5("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index6]) {
                error5("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index6];
            valueStack[index6] = null;
            {
              fiberStack[index6] = null;
            }
            index6--;
          }
          function push2(cursor2, value12, fiber) {
            index6++;
            valueStack[index6] = cursor2.current;
            {
              fiberStack[index6] = fiber;
            }
            cursor2.current = value12;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name15 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name15);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop2(didPerformWorkStackCursor, fiber);
              pop2(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error5("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name15 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name15);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop2(didPerformWorkStackCursor, workInProgress2);
                pop2(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop2(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component = node2.type;
                    if (isContextProvider(Component)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback2) {
            if (syncQueue === null) {
              syncQueue = [callback2];
            } else {
              syncQueue.push(callback2);
            }
          }
          function scheduleLegacySyncCallback(callback2) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback2);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i7 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i7 < queue.length; i7++) {
                  var callback2 = queue[i7];
                  do {
                    callback2 = callback2(isSync);
                  } while (callback2 !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error6) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i7 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error6;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id5 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id5.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index7) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot2 = index7 + 1;
            var length10 = getBitLength(totalChildren) + baseLength;
            if (length10 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot2 << restOfBaseLength;
              var id5 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id5;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot2 << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length10 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id5) {
            return 1 << getBitLength(id5) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error5("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error5("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text7 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text7);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement2;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text7 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text7);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent2 = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent2, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent2, isConcurrentMode);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent2, _isConcurrentMode2);
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null && parent2.tag !== HostComponent && parent2.tag !== HostRoot && parent2.tag !== SuspenseComponent) {
              parent2 = parent2.return;
            }
            hydrationParentFiber = parent2;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error6) {
            if (hydrationErrors === null) {
              hydrationErrors = [error6];
            } else {
              hydrationErrors.push(error6);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set4) {
              var array = [];
              set4.forEach(function(value12) {
                array.push(value12);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error5("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error5("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error5("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn4("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn4("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn4("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error5("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error5("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error5("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop2(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent2, renderLanes2, propagationRoot) {
            var node2 = parent2;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error5("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error5("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value12 = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value12,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value12;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i7 = 0; i7 < concurrentQueues.length; i7++) {
                var queue = concurrentQueues[i7];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement2 | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent2 = sourceFiber.return;
            while (parent2 !== null) {
              parent2.childLanes = mergeLanes(parent2.childLanes, lane);
              alternate = parent2.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent2.flags & (Placement2 | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent2;
              parent2 = parent2.return;
            }
            if (node2.tag === HostRoot) {
              var root3 = node2.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone2 = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone2;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error5("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone2 = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone2;
                    } else {
                      newLast.next = clone2;
                      newLast = clone2;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign3({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone2 = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone2;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback2 = update.callback;
                  if (callback2 !== null && update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback2, context) {
            if (typeof callback2 !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback2));
            }
            callback2.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i7 = 0; i7 < effects.length; i7++) {
                var effect = effects[i7];
                var callback2 = effect.callback;
                if (callback2 !== null) {
                  effect.callback = null;
                  callCallback(callback2, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React9.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback2, callerName) {
              if (callback2 === null || typeof callback2 === "function") {
                return;
              }
              var key = callerName + "_" + callback2;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error5("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error5("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback2) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback2 !== void 0 && callback2 !== null) {
                {
                  warnOnInvalidCallback(callback2, "setState");
                }
                update.callback = callback2;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback2) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback2 !== void 0 && callback2 !== null) {
                {
                  warnOnInvalidCallback(callback2, "replaceState");
                }
                update.callback = callback2;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback2) {
              var fiber = get4(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback2 !== void 0 && callback2 !== null) {
                {
                  warnOnInvalidCallback(callback2, "forceUpdate");
                }
                update.callback = callback2;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error5("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name15 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error5("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
                } else {
                  error5("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error5("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error5("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
              }
              if (instance.propTypes) {
                error5("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
              }
              if (instance.contextType) {
                error5("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
              }
              {
                if (instance.contextTypes) {
                  error5("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error5("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error5("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error5("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error5("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error5("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error5("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error5("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error5("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
              }
              if (instance.defaultProps) {
                error5("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error5("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error5("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error5("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error5("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error5("%s.state: must be set to an object or null", name15);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error5("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set3(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error5("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state3 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state3 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error5("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error5("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error5("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error5("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error5("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error5('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element3) {
            var mixedRef = element3.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element3._owner && element3._self && element3._owner.stateNode !== element3._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error5('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element3._owner) {
                var owner = element3._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value12) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value12 === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value12;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element3._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error5("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init5 = lazyType._init;
            return init5(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone2 = createWorkInProgress(fiber, pendingProps);
              clone2.index = 0;
              clone2.sibling = null;
              return clone2;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement2;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement2;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement2;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent2, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element3, lanes) {
              var elementType = element3.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element3.props.children, lanes, element3.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element3) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element3.props);
                  existing.ref = coerceRef(returnFiber, current2, element3);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element3._source;
                    existing._debugOwner = element3._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element3, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element3);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment2, lanes, key) {
              if (current2 === null || current2.tag !== Fragment5) {
                var created = createFiberFromFragment(fragment2, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment2);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init5 = newChild._init;
                    return createChild(returnFiber, init5(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init5 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init5(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init5 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init5(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error5("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init5 = child._init;
                    warnOnInvalidKey(init5(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i7 = 0; i7 < newChildren.length; i7++) {
                  var child = newChildren[i7];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error5("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error5("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step3 = newChildren.next();
              for (; oldFiber !== null && !step3.done; newIdx++, step3 = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step3.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step3.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step3.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step3.done; newIdx++, step3 = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step3.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent2, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent2);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element3, lanes) {
              var key = element3.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element3.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment5) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element3.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element3._source;
                        existing._debugOwner = element3._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element3) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element3.props);
                      _existing.ref = coerceRef(returnFiber, child, element3);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element3._source;
                        _existing._debugOwner = element3._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element3.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element3.props.children, returnFiber.mode, lanes, element3.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element3, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element3);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init5 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init5(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c3) {
            if (c3 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c3;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop2(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
            pop2(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop2(contextStackCursor$1, fiber);
            pop2(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop2(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row2) {
            var node2 = row2;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state3 = node2.memoizedState;
                if (state3 !== null) {
                  var dehydrated = state3.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row2) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row2) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Insertion5 = 2;
          var Layout = 4;
          var Passive$1 = 8;
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i7 = 0; i7 < workInProgressSources.length; i7++) {
              var mutableSource = workInProgressSources[i7];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error5("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i7 = 0; i7 <= hookTypesUpdateIndexDev; i7++) {
                    var oldHookName = hookTypesDev[i7];
                    var newHookName = i7 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row2 = i7 + 1 + ". " + oldHookName;
                    while (row2.length < secondColumnStart) {
                      row2 += " ";
                    }
                    row2 += newHookName + "\n";
                    table2 += row2;
                  }
                  error5("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error5("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error5("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i7 = 0; i7 < prevDeps.length && i7 < nextDeps.length; i7++) {
              if (objectIs(nextDeps[i7], prevDeps[i7])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children2 = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children2 = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
                error5("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state3, action2) {
            return typeof action2 === "function" ? action2(state3) : action2;
          }
          function mountReducer(reducer, initialArg, init5) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init5 !== void 0) {
              initialState = init5(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init5) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error5("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first2 = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first2;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone2 = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone2;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone2;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action2 = update.action;
                    newState = reducer(newState, action2);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first2);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init5) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action2 = update.action;
                newState = reducer(newState, action2);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source3, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source3, getSnapshot, subscribe2) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error5("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error5("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error5("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe2), [subscribe2]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe2) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe2(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error6) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag2, create4, destroy, deps) {
            var effect = {
              tag: tag2,
              create: create4,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create4, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create4, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create4, destroy, nextDeps);
          }
          function mountEffect(create4, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create4, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create4, deps);
            }
          }
          function updateEffect(create4, deps) {
            return updateEffectImpl(Passive, Passive$1, create4, deps);
          }
          function mountInsertionEffect(create4, deps) {
            return mountEffectImpl(Update, Insertion5, create4, deps);
          }
          function updateInsertionEffect(create4, deps) {
            return updateEffectImpl(Update, Insertion5, create4, deps);
          }
          function mountLayoutEffect(create4, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create4, deps);
          }
          function updateLayoutEffect(create4, deps) {
            return updateEffectImpl(Update, Layout, create4, deps);
          }
          function imperativeHandleEffect(create4, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create4();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error5("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create4();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error5("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create4, deps) {
            {
              if (typeof create4 !== "function") {
                error5("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create4 !== null ? typeof create4 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create4, ref), effectDeps);
          }
          function mountDebugValue(value12, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback2, nextDeps];
            return callback2;
          }
          function updateCallback(callback2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback2, nextDeps];
            return callback2;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value12) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value12;
            return value12;
          }
          function updateDeferredValue(value12) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value12);
          }
          function rerenderDeferredValue(value12) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value12;
              return value12;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value12);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value12) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value12, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value12;
              return value12;
            }
          }
          function startTransition(setPending, callback2, options4) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback2();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn4("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id5;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id5 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id5 += "H" + localId.toString(32);
              }
              id5 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id5 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id5;
            return id5;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id5 = hook.memoizedState;
            return id5;
          }
          function dispatchReducerAction(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error5("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action2) {
            {
              if (typeof arguments[3] === "function") {
                error5("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action: action2,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action2);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error6) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action2) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error5("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error5("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback2, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback2, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create4, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create4, deps);
              },
              useImperativeHandle: function(ref, create4, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create4, deps);
              },
              useInsertionEffect: function(create4, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create4, deps);
              },
              useLayoutEffect: function(create4, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create4, deps);
              },
              useMemo: function(create4, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create4, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init5) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init5);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value12, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value12) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value12);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source3, getSnapshot, subscribe2) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe2, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe2, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value12, source3) {
            return {
              value: value12,
              source: source3,
              stack: getStackByFiberInDevAndProd(source3),
              digest: null
            };
          }
          function createCapturedValue(value12, digest, stack10) {
            return {
              value: value12,
              source: null,
              stack: stack10 != null ? stack10 : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error6 = errorInfo.value;
              if (true) {
                var source3 = errorInfo.source;
                var stack10 = errorInfo.stack;
                var componentStack = stack10 !== null ? stack10 : "";
                if (error6 != null && error6._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error6);
                }
                var componentName = source3 ? getComponentNameFromFiber(source3) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error6);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error6 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error6);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback2() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack10 = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack10 !== null ? stack10 : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error5("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag2 = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag2 === FunctionComponent || tag2 === ForwardRef || tag2 === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException2(root3, returnFiber, sourceFiber, value12, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value12 !== null && typeof value12 === "object" && typeof value12.then === "function") {
              var wakeable = value12;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value12 = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value12, sourceFiber));
                  return;
                }
              }
            }
            value12 = createCapturedValueAtFiber(value12, sourceFiber);
            renderDidError(value12);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value12;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value12;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare4 = Component.compare;
              compare4 = compare4 !== null ? compare4 : shallowEqual;
              if (compare4(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    outerMemoType = init5(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state3 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state3, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error5("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement2 | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init5 = lazyComponent._init;
            var Component = init5(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value12;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error5("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value12.state !== null && value12.state !== void 0 ? value12.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value12);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value12 = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value12, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error5("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info2 = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error5("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info2);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error5("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error5("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement2;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement2;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement2;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error5("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message2, stack10;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message2 = _getSuspenseInstanceF.message;
                  stack10 = _getSuspenseInstanceF.stack;
                }
                var error6;
                if (message2) {
                  error6 = new Error(message2);
                } else {
                  error6 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error6, digest, stack10);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state3 = node2.memoizedState;
                if (state3 !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row2 = firstChild;
            var lastContentRow = null;
            while (row2 !== null) {
              var currentRow = row2.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row2;
              }
              row2 = row2.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error5('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error5('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error5('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error5('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error5('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error5('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index7) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error5("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index7, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children2, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children2 !== void 0 && children2 !== null && children2 !== false) {
                if (isArray2(children2)) {
                  for (var i7 = 0; i7 < children2.length; i7++) {
                    if (!validateSuspenseListNestedChild(children2[i7], i7)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children2);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children2);
                    if (childrenIterator) {
                      var step3 = childrenIterator.next();
                      var _i = 0;
                      for (; !step3.done; step3 = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step3.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error5('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail3, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail: tail3,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail3;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail3;
                  if (lastContentRow === null) {
                    tail3 = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail3 = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail3, lastContentRow, tailMode);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row2 = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row2 !== null) {
                    var currentRow = row2.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row2;
                      break;
                    }
                    var nextRow = row2.sibling;
                    row2.sibling = _tail;
                    _tail = row2;
                    row2 = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error5("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error5("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error5("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement2;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement2;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state3 = workInProgress2.memoizedState;
                if (state3 !== null) {
                  if (state3.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment5:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent2, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent2, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment5:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row2 = workInProgress2.child;
                      while (row2 !== null) {
                        var suspended = findFirstSuspended(row2);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row2 = row2.sibling;
                      }
                    }
                    if (renderState.tail !== null && now3() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (now3() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now3();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement2 | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error6) {
            {
              invokeGuardedCallback(null, function() {
                throw error6;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error6) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error6);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error6) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error6);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error6) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error6);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error6) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error6);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error6) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error6);
                }
                {
                  if (typeof retVal === "function") {
                    error5("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error6) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error6);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error6) {
                captureCommitPhaseError(fiber, fiber.return, error6);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error5("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error5("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error5("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create4 = effect.create;
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create4();
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion5) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error5("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id5 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id5, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error5("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error5("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error5("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error5("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error5("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error5("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error5("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error5("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent2 = fiber.return;
            while (parent2 !== null) {
              if (isHostParent(parent2)) {
                return parent2;
              }
              parent2 = parent2.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement2) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement2)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent2 = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent2);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent2);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent2) {
            var tag2 = node2.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent2, stateNode, before);
              } else {
                appendChildToContainer(parent2, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent2) {
            var tag2 = node2.tag;
            var isHost = tag2 === HostComponent || tag2 === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore2(parent2, stateNode, before);
              } else {
                appendChild2(parent2, stateNode);
              }
            } else if (tag2 === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent2);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent2);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent2 = returnFiber;
              findParent:
                while (parent2 !== null) {
                  switch (parent2.tag) {
                    case HostComponent: {
                      hostParent = parent2.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent2.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent2 = parent2.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent2) {
            var child = parent2.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild2(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag2 = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag2 & Insertion5) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag2 & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (deletedFiber.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i7 = 0; i7 < deletions.length; i7++) {
                var childToDelete = deletions[i7];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error6) {
                  captureCommitPhaseError(childToDelete, parentFiber, error6);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion5 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion5 | HasEffect, finishedWork);
                  } catch (error6) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error6) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error6) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error6) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error6) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error6);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement2) {
              try {
                commitPlacement(finishedWork);
              } catch (error6) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error6);
              }
              finishedWork.flags &= ~Placement2;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(child, root3, committedLanes);
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error6) {
                  captureCommitPhaseError(fiber, fiber.return, error6);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error6) {
                captureCommitPhaseError(fiber, fiber.return, error6);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error6) {
                  captureCommitPhaseError(fiber, fiber.return, error6);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i7 = 0; i7 < deletions.length; i7++) {
                    var fiberToDelete = deletions[i7];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error6) {
                    captureCommitPhaseError(fiber, fiber.return, error6);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error6) {
                    captureCommitPhaseError(fiber, fiber.return, error6);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error6) {
                    captureCommitPhaseError(fiber, fiber.return, error6);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error6) {
                    captureCommitPhaseError(fiber, fiber.return, error6);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error6) {
                    captureCommitPhaseError(fiber, fiber.return, error6);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0;
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error5("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil2 = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = 0;
          var BatchedContext = 1;
          var RenderContext = 2;
          var CommitContext = 4;
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now3() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now3();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now3();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition3 = ReactCurrentBatchConfig$3.transition;
                if (!transition3._updatedFibers) {
                  transition3._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition3._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error5("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (executionContext & RenderContext) !== NoContext;
          }
          function ensureRootIsScheduled(root3, currentTime2) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime2);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error5("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now3());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now3());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now3());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now3();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now3() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i7 = 0; i7 < checks.length; i7++) {
                      var check = checks[i7];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error6) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now3());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now3());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now3());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now3());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a4) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a4);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a4, b4, c3, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a4, b4, c3, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync2(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop2(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException2(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now3();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error6) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error6];
            } else {
              workInProgressRootConcurrentErrors.push(error6);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error5("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now3());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i7 = 0; i7 < recoverableErrors.length; i7++) {
                var recoverableError = recoverableErrors[i7];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i7 = 0; i7 < profilerEffects.length; i7++) {
                var _fiber = profilerEffects[i7];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error6) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error6;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error6) {
            var errorInfo = createCapturedValueAtFiber(error6, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error5("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now3() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil2(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error5("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag2 = fiber.tag;
              if (tag2 !== IndeterminateComponent && tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error5("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error5("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error5("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback2) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback2);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback2);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error5("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error5("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler2) {
            {
              resolveFamily = handler2;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element3) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element3.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync2(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element3) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync2(function() {
                updateContainer(element3, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag2 === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types2 = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types2, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag2) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types2.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag2, pendingProps, key, mode) {
            this.tag = tag2;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag2, pendingProps, key, mode) {
            return new FiberNode(tag2, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement2;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag2, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag2 === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info2 = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info2 += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element3, mode, lanes) {
            var owner = null;
            {
              owner = element3._owner;
            }
            var type = element3.type;
            var key = element3.key;
            var pendingProps = element3.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element3._source;
              fiber._debugOwner = element3._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment5, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error5('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content3, mode, lanes) {
            var fiber = createFiber(HostText, content3, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target6, source3) {
            if (target6 === null) {
              target6 = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target6.tag = source3.tag;
            target6.key = source3.key;
            target6.elementType = source3.elementType;
            target6.type = source3.type;
            target6.stateNode = source3.stateNode;
            target6.return = source3.return;
            target6.child = source3.child;
            target6.sibling = source3.sibling;
            target6.index = source3.index;
            target6.ref = source3.ref;
            target6.pendingProps = source3.pendingProps;
            target6.memoizedProps = source3.memoizedProps;
            target6.updateQueue = source3.updateQueue;
            target6.memoizedState = source3.memoizedState;
            target6.dependencies = source3.dependencies;
            target6.mode = source3.mode;
            target6.flags = source3.flags;
            target6.subtreeFlags = source3.subtreeFlags;
            target6.deletions = source3.deletions;
            target6.lanes = source3.lanes;
            target6.childLanes = source3.childLanes;
            target6.alternate = source3.alternate;
            {
              target6.actualDuration = source3.actualDuration;
              target6.actualStartTime = source3.actualStartTime;
              target6.selfBaseDuration = source3.selfBaseDuration;
              target6.treeBaseDuration = source3.treeBaseDuration;
            }
            target6._debugSource = source3._debugSource;
            target6._debugOwner = source3._debugOwner;
            target6._debugNeedsRemount = source3._debugNeedsRemount;
            target6._debugHookTypes = source3._debugHookTypes;
            return target6;
          }
          function FiberRootNode(containerInfo, tag2, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag2;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag2) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag2, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag2, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children2, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children: children2,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get4(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component26, methodName) {
            {
              var fiber = get4(component26);
              if (fiber === void 0) {
                if (typeof component26.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys4 = Object.keys(component26).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys4);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error5("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error5("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag2, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback2, containerInfo, tag2, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag2, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback2 !== void 0 && callback2 !== null ? callback2 : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element3, container5, parentComponent, callback2) {
            {
              onScheduleRoot(container5, element3);
            }
            var current$1 = container5.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container5.context === null) {
              container5.context = context;
            } else {
              container5.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error5("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element3
            };
            callback2 = callback2 === void 0 ? null : callback2;
            if (callback2 !== null) {
              {
                if (typeof callback2 !== "function") {
                  error5("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback2);
                }
              }
              update.callback = callback2;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container5) {
            var containerFiber = container5.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync2(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path6, index7) {
              var key = path6[index7];
              var updated = isArray2(obj) ? obj.slice() : assign3({}, obj);
              if (index7 + 1 === path6.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path6, index7 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path6) {
              return copyWithDeleteImpl(obj, path6, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index7) {
              var oldKey = oldPath[index7];
              var updated = isArray2(obj) ? obj.slice() : assign3({}, obj);
              if (index7 + 1 === oldPath.length) {
                var newKey = newPath[index7];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index7 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn4("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i7 = 0; i7 < newPath.length - 1; i7++) {
                  if (oldPath[i7] !== newPath[i7]) {
                    warn4("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path6, index7, value12) {
              if (index7 >= path6.length) {
                return value12;
              }
              var key = path6[index7];
              var updated = isArray2(obj) ? obj.slice() : assign3({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path6, index7 + 1, value12);
              return updated;
            };
            var copyWithSet = function(obj, path6, value12) {
              return copyWithSetImpl(obj, path6, 0, value12);
            };
            var findHook = function(fiber, id5) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id5 > 0) {
                currentHook2 = currentHook2.next;
                id5--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id5, path6, value12) {
              var hook = findHook(fiber, id5);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path6, value12);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id5, path6) {
              var hook = findHook(fiber, id5);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path6);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id5, oldPath, newPath) {
              var hook = findHook(fiber, id5);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path6, value12) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path6, value12);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path6) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path6);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools,
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error6) {
            console["error"](error6);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children2) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error5("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error5("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error5("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container5 = root3.containerInfo;
              if (container5.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container5) {
                    error5("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children2, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error5("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container5 = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error5("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync2(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container5);
            }
          };
          function createRoot2(container5, options4) {
            if (!isValidContainer(container5)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container5);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options4 !== null && options4 !== void 0) {
              {
                if (options4.hydrate) {
                  warn4("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options4 === "object" && options4 !== null && options4.$$typeof === REACT_ELEMENT_TYPE) {
                    error5("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options4.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options4.identifierPrefix !== void 0) {
                identifierPrefix = options4.identifierPrefix;
              }
              if (options4.onRecoverableError !== void 0) {
                onRecoverableError = options4.onRecoverableError;
              }
              if (options4.transitionCallbacks !== void 0) {
                transitionCallbacks = options4.transitionCallbacks;
              }
            }
            var root3 = createContainer(container5, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container5);
            var rootContainerElement = container5.nodeType === COMMENT_NODE ? container5.parentNode : container5;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target6) {
            if (target6) {
              queueExplicitHydrationTarget(target6);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot2(container5, initialChildren, options4) {
            if (!isValidContainer(container5)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container5);
            {
              if (initialChildren === void 0) {
                error5("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options4 != null ? options4 : null;
            var mutableSources = options4 != null && options4.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options4 !== null && options4 !== void 0) {
              if (options4.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options4.identifierPrefix !== void 0) {
                identifierPrefix = options4.identifierPrefix;
              }
              if (options4.onRecoverableError !== void 0) {
                onRecoverableError = options4.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container5, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container5);
            listenToAllSupportedEvents(container5);
            if (mutableSources) {
              for (var i7 = 0; i7 < mutableSources.length; i7++) {
                var mutableSource = mutableSources[i7];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container5) {
            {
              if (container5.nodeType === ELEMENT_NODE && container5.tagName && container5.tagName.toUpperCase() === "BODY") {
                error5("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container5)) {
                if (container5._reactRootContainer) {
                  error5("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error5("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container5) {
              if (container5._reactRootContainer && container5.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container5._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container5) {
                    error5("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container5._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container5);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error5("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container5.nodeType === ELEMENT_NODE && container5.tagName && container5.tagName.toUpperCase() === "BODY") {
                error5("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container5) {
            if (!container5) {
              return null;
            }
            if (container5.nodeType === DOCUMENT_NODE) {
              return container5.documentElement;
            } else {
              return container5.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container5, initialChildren, parentComponent, callback2, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback2 === "function") {
                var originalCallback = callback2;
                callback2 = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(initialChildren, callback2, container5, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container5._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container5);
              var rootContainerElement = container5.nodeType === COMMENT_NODE ? container5.parentNode : container5;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync2();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container5.lastChild) {
                container5.removeChild(rootSibling);
              }
              if (typeof callback2 === "function") {
                var _originalCallback = callback2;
                callback2 = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(container5, LegacyRoot, null, false, false, "", noopOnRecoverableError);
              container5._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container5);
              var _rootContainerElement = container5.nodeType === COMMENT_NODE ? container5.parentNode : container5;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync2(function() {
                updateContainer(initialChildren, _root, parentComponent, callback2);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback2, callerName) {
            {
              if (callback2 !== null && typeof callback2 !== "function") {
                error5("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children2, container5, forceHydrate, callback2) {
            {
              topLevelUpdateWarnings(container5);
              warnOnInvalidCallback$1(callback2 === void 0 ? null : callback2, "render");
            }
            var maybeRoot = container5._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container5, children2, parentComponent, callback2, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback2 === "function") {
                var originalCallback = callback2;
                callback2 = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children2, root3, parentComponent, callback2);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error5("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element3, container5, callback2) {
            {
              error5("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container5)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container5) && container5._reactRootContainer === void 0;
              if (isModernRoot) {
                error5("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element3, container5, true, callback2);
          }
          function render(element3, container5, callback2) {
            {
              error5("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container5)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container5) && container5._reactRootContainer === void 0;
              if (isModernRoot) {
                error5("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element3, container5, false, callback2);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2) {
            {
              error5("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element3, containerNode, false, callback2);
          }
          function unmountComponentAtNode(container5) {
            if (!isValidContainerLegacy(container5)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container5) && container5._reactRootContainer === void 0;
              if (isModernRoot) {
                error5("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container5._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container5);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error5("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync2(function() {
                legacyRenderSubtreeIntoContainer(null, null, container5, false, function() {
                  container5._reactRootContainer = null;
                  unmarkContainerAsRoot(container5);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container5);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container5.nodeType === ELEMENT_NODE && isValidContainerLegacy(container5.parentNode) && !!container5.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error5("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error5("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync2);
          function createPortal$1(children2, container5) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container5)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children2, container5, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element3, containerNode, callback2);
          }
          var Internals = {
            usingClientEntryPoint: false,
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container5, options4) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error5('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container5, options4);
          }
          function hydrateRoot$1(container5, initialChildren, options4) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error5('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot2(container5, initialChildren, options4);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error5("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync2(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol3 = window.location.protocol;
                if (/^(https?|file):$/.test(protocol3)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol3 === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i7 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c3, o2) {
          i7.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c3, o2);
          } finally {
            i7.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c3, h7, o2) {
          i7.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c3, h7, o2);
          } finally {
            i7.usingClientEntryPoint = false;
          }
        };
      }
      var i7;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf2(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment5 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf2(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf2(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object2) {
            return typeOf2(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf2(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf2(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf2(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf2(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf2(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf2(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf2(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf2(object2) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object2) {
            return typeOf2(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment5;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf2;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component26) {
        if (reactIs.isMemo(component26)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component26["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys4 = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys4 = keys4.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i7 = 0; i7 < keys4.length; ++i7) {
            var key = keys4[i7];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js
  var require_react_dom_server_legacy_browser_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server-legacy.browser.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React9 = require_react();
          var ReactVersion = "18.2.0";
          var ReactSharedInternals = React9.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn4(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error5(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack10 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack10 !== "") {
                format += "%s";
                args = args.concat([stack10]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function scheduleWork(callback2) {
            callback2();
          }
          function beginWriting(destination) {
          }
          function writeChunk(destination, chunk) {
            writeChunkAndReturn(destination, chunk);
          }
          function writeChunkAndReturn(destination, chunk) {
            return destination.push(chunk);
          }
          function completeWriting(destination) {
          }
          function close(destination) {
            destination.push(null);
          }
          function stringToChunk(content3) {
            return content3;
          }
          function stringToPrecomputedChunk(content3) {
            return content3;
          }
          function closeWithError(destination, error6) {
            destination.destroy(error6);
          }
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkAttributeStringCoercion(value12, attributeName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkHtmlStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error5("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value12) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix5 = name15.toLowerCase().slice(0, 5);
                  return prefix5 !== "data-" && prefix5 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name15) {
            return properties.hasOwnProperty(name15) ? properties[name15] : null;
          }
          function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name15;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name15 = _ref[0], attributeName = _ref[1];
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix5, key) {
            return prefix5 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop3) {
            prefixes.forEach(function(prefix5) {
              isUnitlessNumber[prefixKey(prefix5, prop3)] = isUnitlessNumber[prop3];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName2, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error5("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error5("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCustomComponent(tagName2, props) {
            if (tagName2.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName2) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName2, name15) {
            {
              if (hasOwnProperty3.call(warnedProperties, name15) && warnedProperties[name15]) {
                return true;
              }
              if (rARIACamel.test(name15)) {
                var ariaName = "aria-" + name15.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error5("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                  warnedProperties[name15] = true;
                  return true;
                }
                if (name15 !== correctName) {
                  error5("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
              if (rARIA.test(name15)) {
                var lowerCasedName = name15.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name15] = true;
                  return false;
                }
                if (name15 !== standardName) {
                  error5("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error5("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error5("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error5("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error5("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
              if (hasOwnProperty3.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
                return true;
              }
              var lowerCasedName = name15.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error5("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name15)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error5("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name15)) {
                  error5("Unknown event handler property `%s`. It will be ignored.", name15);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name15)) {
                if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                  error5("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error5("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error5("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
                error5("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "number" && isNaN(value12)) {
                error5("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name15);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name15) {
                  error5("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (!isReserved && name15 !== lowerCasedName) {
                error5("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                if (value12) {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
                } else {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                warnedProperties$1[name15] = true;
                return false;
              }
              if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error5("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error5("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error5("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern2 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern2, "ms-")));
            };
            var warnBadVendoredStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name15, value12) {
              if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
                return;
              }
              warnedStyleValues[value12] = true;
              error5(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name15, value12) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error5("`NaN` is an invalid value for the `%s` css style property.", name15);
            };
            var warnStyleValueIsInfinity = function(name15, value12) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error5("`Infinity` is an invalid value for the `%s` css style property.", name15);
            };
            warnValidStyle = function(name15, value12) {
              if (name15.indexOf("-") > -1) {
                warnHyphenatedStyleName(name15);
              } else if (badVendoredStyleNamePattern.test(name15)) {
                warnBadVendoredStyleName(name15);
              } else if (badStyleValueWithSemicolonPattern.test(value12)) {
                warnStyleValueWithSemicolon(name15, value12);
              }
              if (typeof value12 === "number") {
                if (isNaN(value12)) {
                  warnStyleValueIsNaN(name15, value12);
                } else if (!isFinite(value12)) {
                  warnStyleValueIsInfinity(name15, value12);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str2 = "" + string;
            var match6 = matchHtmlRegExp.exec(str2);
            if (!match6) {
              return str2;
            }
            var escape2;
            var html3 = "";
            var index6;
            var lastIndex = 0;
            for (index6 = match6.index; index6 < str2.length; index6++) {
              switch (str2.charCodeAt(index6)) {
                case 34:
                  escape2 = "&quot;";
                  break;
                case 38:
                  escape2 = "&amp;";
                  break;
                case 39:
                  escape2 = "&#x27;";
                  break;
                case 60:
                  escape2 = "&lt;";
                  break;
                case 62:
                  escape2 = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index6) {
                html3 += str2.substring(lastIndex, index6);
              }
              lastIndex = index6 + 1;
              html3 += escape2;
            }
            return lastIndex !== index6 ? html3 + str2.substring(lastIndex, index6) : html3;
          }
          function escapeTextForBrowser(text7) {
            if (typeof text7 === "boolean" || typeof text7 === "number") {
              return "" + text7;
            }
            return escapeHtml(text7);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName2(name15) {
            return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error5("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a4) {
            return isArrayImpl(a4);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("<\/script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
          var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function(match6, prefix5, s3, suffix2) {
            return "" + prefix5 + (s3 === "s" ? "\\u0073" : "\\u0053") + suffix2;
          };
          function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
            }
            if (bootstrapScripts !== void 0) {
              for (var i7 = 0; i7 < bootstrapScripts.length; i7++) {
                bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i7])), endAsyncScript);
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue
            };
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id5 = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id5 += "H" + localId.toString(32);
            }
            return id5 + ":";
          }
          function encodeHTMLTextNode(text7) {
            return escapeTextForBrowser(text7);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target6, text7, responseState, textEmbedded) {
            if (text7 === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target6.push(textSeparator);
            }
            target6.push(stringToChunk(encodeHTMLTextNode(text7)));
            return true;
          }
          function pushSegmentFinale(target6, responseState, lastPushedText, textEmbedded) {
            if (lastPushedText && textEmbedded) {
              target6.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName2(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName2(styleName)));
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target6, responseState, style3) {
            if (typeof style3 !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
            var isFirst = true;
            for (var styleName in style3) {
              if (!hasOwnProperty3.call(style3, styleName)) {
                continue;
              }
              var styleValue = style3[styleName];
              if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              if (isCustomProperty3) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName2(styleName);
                if (typeof styleValue === "number") {
                  if (styleValue !== 0 && !hasOwnProperty3.call(isUnitlessNumber, styleName)) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
                }
              }
              if (isFirst) {
                isFirst = false;
                target6.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
              } else {
                target6.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target6.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target6, responseState, name15, value12) {
            switch (name15) {
              case "style": {
                pushStyle(target6, responseState, value12);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
              return;
            }
            var propertyInfo = getPropertyInfo(name15);
            if (propertyInfo !== null) {
              switch (typeof value12) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value12) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value12 === true) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  } else if (value12 === false)
                    ;
                  else {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value12)) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value12) && value12 >= 1) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value12, attributeName);
                    }
                    value12 = "" + value12;
                    sanitizeURL(value12);
                  }
                  target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
              }
            } else if (isAttributeNameSafe(name15)) {
              switch (typeof value12) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix5 = name15.toLowerCase().slice(0, 5);
                  if (prefix5 !== "data-" && prefix5 !== "aria-") {
                    return;
                  }
                }
              }
              target6.push(attributeSeparator, stringToChunk(name15), attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target6, innerHTML, children2) {
            if (innerHTML != null) {
              if (children2 != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html3 = innerHTML.__html;
              if (html3 !== null && html3 !== void 0) {
                {
                  checkHtmlStringCoercion(html3);
                }
                target6.push(stringToChunk("" + html3));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value12 = props[propName];
              if (value12 != null) {
                var array = isArray2(value12);
                if (props.multiple && !array) {
                  error5("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
                } else if (!props.multiple && array) {
                  error5("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
                }
              }
            }
          }
          function pushStartSelect(target6, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
                error5("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultSelectValue = true;
              }
            }
            target6.push(startChunkForTag("select"));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          function flattenOptionChildren(children2) {
            var content3 = "";
            React9.Children.forEach(children2, function(child) {
              if (child == null) {
                return;
              }
              content3 += child;
              {
                if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                  didWarnInvalidOptionChildren = true;
                  error5("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              }
            });
            return content3;
          }
          var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
          function pushStartOption(target6, props, responseState, formatContext) {
            var selectedValue = formatContext.selectedValue;
            target6.push(startChunkForTag("option"));
            var children2 = null;
            var value12 = null;
            var selected2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "selected":
                    selected2 = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error5("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value12 !== null) {
                {
                  checkAttributeStringCoercion(value12, "value");
                }
                stringValue = "" + value12;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error5("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                    }
                  }
                }
                stringValue = flattenOptionChildren(children2);
              }
              if (isArray2(selectedValue)) {
                for (var i7 = 0; i7 < selectedValue.length; i7++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i7], "value");
                  }
                  var v2 = "" + selectedValue[i7];
                  if (v2 === stringValue) {
                    target6.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target6.push(selectedMarkerAttribute);
                }
              }
            } else if (selected2) {
              target6.push(selectedMarkerAttribute);
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          function pushInput(target6, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
                error5("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
                error5("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultInputValue = true;
              }
            }
            target6.push(startChunkForTag("input"));
            var value12 = null;
            var defaultValue4 = null;
            var checked2 = null;
            var defaultChecked2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "defaultChecked":
                    defaultChecked2 = propValue;
                    break;
                  case "defaultValue":
                    defaultValue4 = propValue;
                    break;
                  case "checked":
                    checked2 = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked2 !== null) {
              pushAttribute(target6, responseState, "checked", checked2);
            } else if (defaultChecked2 !== null) {
              pushAttribute(target6, responseState, "checked", defaultChecked2);
            }
            if (value12 !== null) {
              pushAttribute(target6, responseState, "value", value12);
            } else if (defaultValue4 !== null) {
              pushAttribute(target6, responseState, "value", defaultValue4);
            }
            target6.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target6, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
                error5("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultTextareaValue = true;
              }
            }
            target6.push(startChunkForTag("textarea"));
            var value12 = null;
            var defaultValue4 = null;
            var children2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                    break;
                  case "defaultValue":
                    defaultValue4 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value12 === null && defaultValue4 !== null) {
              value12 = defaultValue4;
            }
            target6.push(endOfStartTag);
            if (children2 != null) {
              {
                error5("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              if (value12 != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray2(children2)) {
                if (children2.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                {
                  checkHtmlStringCoercion(children2[0]);
                }
                value12 = "" + children2[0];
              }
              {
                checkHtmlStringCoercion(children2);
              }
              value12 = "" + children2;
            }
            if (typeof value12 === "string" && value12[0] === "\n") {
              target6.push(leadingNewline);
            }
            if (value12 !== null) {
              {
                checkAttributeStringCoercion(value12, "value");
              }
              target6.push(stringToChunk(encodeHTMLTextNode("" + value12)));
            }
            return null;
          }
          function pushSelfClosing(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(tag2 + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target6, props, responseState) {
            target6.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target6, props, responseState) {
            target6.push(startChunkForTag("title"));
            var children2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            {
              var child = Array.isArray(children2) && children2.length < 2 ? children2[0] || null : children2;
              if (Array.isArray(children2) && children2.length > 1) {
                error5("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && child.$$typeof != null) {
                error5("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && typeof child !== "string" && typeof child !== "number") {
                error5("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              }
            }
            return children2;
          }
          function pushStartGenericElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            if (typeof children2 === "string") {
              target6.push(stringToChunk(encodeHTMLTextNode(children2)));
              return null;
            }
            return children2;
          }
          function pushStartCustomElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target6, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                      target6.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                    }
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            if (innerHTML != null) {
              if (children2 != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html3 = innerHTML.__html;
              if (html3 !== null && html3 !== void 0) {
                if (typeof html3 === "string" && html3.length > 0 && html3[0] === "\n") {
                  target6.push(leadingNewline, stringToChunk(html3));
                } else {
                  {
                    checkHtmlStringCoercion(html3);
                  }
                  target6.push(stringToChunk("" + html3));
                }
              }
            }
            if (typeof children2 === "string" && children2[0] === "\n") {
              target6.push(leadingNewline);
            }
            return children2;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag2) {
            var tagStartChunk = validatedTagCache.get(tag2);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag2)) {
                throw new Error("Invalid tag: " + tag2);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag2);
              validatedTagCache.set(tag2, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(target6, type, props, responseState, formatContext) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error5("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
              if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
                if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                  error5("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target6, props, responseState);
              case "option":
                return pushStartOption(target6, props, responseState, formatContext);
              case "textarea":
                return pushStartTextArea(target6, props, responseState);
              case "input":
                return pushInput(target6, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target6, props, responseState);
              case "title":
                return pushStartTitle(target6, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(target6, props, type, responseState);
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target6, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(target6, props, type, responseState);
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target6.push(DOCTYPE);
                }
                return pushStartGenericElement(target6, props, type, responseState);
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(target6, props, type, responseState);
                } else {
                  return pushStartCustomElement(target6, props, type, responseState);
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target6, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target6.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i7 = 0;
            for (; i7 < bootstrapChunks.length - 1; i7++) {
              writeChunk(destination, bootstrapChunks[i7]);
            }
            if (i7 < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i7]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder22 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id5) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id5.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder22);
          }
          var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
          var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
          }
          function writeStartPendingSuspenseBoundary(destination, responseState, id5) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id5 === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, id5);
            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
          }
          function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
            var result;
            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
            }
            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
            return result;
          }
          function writeEndCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
          function writeStartSegment(destination, responseState, formatContext, id5) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
          var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            var formattedContentID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
          var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input6) {
            var escaped = JSON.stringify(input6);
            return escaped.replace(regexForJSStringsInScripts, function(match6) {
              switch (match6) {
                case "<":
                  return "\\u003c";
                case "\u2028":
                  return "\\u2028";
                case "\u2029":
                  return "\\u2029";
                default: {
                  throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
                }
              }
            });
          }
          function createResponseState$1(generateStaticMarkup, identifierPrefix) {
            var responseState = createResponseState(identifierPrefix, void 0);
            return {
              bootstrapChunks: responseState.bootstrapChunks,
              startInlineScript: responseState.startInlineScript,
              placeholderPrefix: responseState.placeholderPrefix,
              segmentPrefix: responseState.segmentPrefix,
              boundaryPrefix: responseState.boundaryPrefix,
              idPrefix: responseState.idPrefix,
              nextSuspenseID: responseState.nextSuspenseID,
              sentCompleteSegmentFunction: responseState.sentCompleteSegmentFunction,
              sentCompleteBoundaryFunction: responseState.sentCompleteBoundaryFunction,
              sentClientRenderFunction: responseState.sentClientRenderFunction,
              generateStaticMarkup
            };
          }
          function createRootFormatContext() {
            return {
              insertionMode: HTML_MODE,
              selectedValue: null
            };
          }
          function pushTextInstance$1(target6, text7, responseState, textEmbedded) {
            if (responseState.generateStaticMarkup) {
              target6.push(stringToChunk(escapeTextForBrowser(text7)));
              return false;
            } else {
              return pushTextInstance(target6, text7, responseState, textEmbedded);
            }
          }
          function pushSegmentFinale$1(target6, responseState, lastPushedText, textEmbedded) {
            if (responseState.generateStaticMarkup) {
              return;
            } else {
              return pushSegmentFinale(target6, responseState, lastPushedText, textEmbedded);
            }
          }
          function writeStartCompletedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartCompletedSuspenseBoundary(destination);
          }
          function writeStartClientRenderedSuspenseBoundary$1(destination, responseState, errorDigest, errorMessage, errorComponentStack) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMessage, errorComponentStack);
          }
          function writeEndCompletedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndCompletedSuspenseBoundary(destination);
          }
          function writeEndClientRenderedSuspenseBoundary$1(destination, responseState) {
            if (responseState.generateStaticMarkup) {
              return true;
            }
            return writeEndClientRenderedSuspenseBoundary(destination);
          }
          var assign3 = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error5("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init5(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error5("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix4;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix4 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match6 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix4 = match6 && match6[1] || "";
                }
              }
              return "\n" + prefix4 + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source3, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init5(payload), source3, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element3) {
            {
              if (element3) {
                var owner = element3._owner;
                var stack10 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack10);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location3, componentName, element3) {
            {
              var has = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element3);
                    error5("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element3);
                    error5("Failed %s type: %s", location3, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name15 = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name15);
              }
              return context;
            }
          }
          function processChildContext(instance, type, parentContext, childContextTypes) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error5("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name15 = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name15);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev2) {
            {
              prev2.context._currentValue2 = prev2.parentValue;
            }
          }
          function pushNode(next2) {
            {
              next2.context._currentValue2 = next2.value;
            }
          }
          function popToNearestCommonAncestor(prev2, next2) {
            if (prev2 === next2)
              ;
            else {
              popNode(prev2);
              var parentPrev = prev2.parent;
              var parentNext = next2.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
              } else {
                if (parentNext === null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next2);
            }
          }
          function popAllPrevious(prev2) {
            popNode(prev2);
            var parentPrev = prev2.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next2) {
            var parentNext = next2.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next2);
          }
          function popPreviousToCommonLevel(prev2, next2) {
            popNode(prev2);
            var parentPrev = prev2.parent;
            if (parentPrev === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (parentPrev.depth === next2.depth) {
              popToNearestCommonAncestor(parentPrev, next2);
            } else {
              popPreviousToCommonLevel(parentPrev, next2);
            }
          }
          function popNextToCommonLevel(prev2, next2) {
            var parentNext = next2.parent;
            if (parentNext === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (prev2.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev2, parentNext);
            } else {
              popNextToCommonLevel(prev2, parentNext);
            }
            pushNode(next2);
          }
          function switchContext(newSnapshot) {
            var prev2 = currentActiveSnapshot;
            var next2 = newSnapshot;
            if (prev2 !== next2) {
              if (prev2 === null) {
                pushAllNext(next2);
              } else if (next2 === null) {
                popAllPrevious(prev2);
              } else if (prev2.depth === next2.depth) {
                popToNearestCommonAncestor(prev2, next2);
              } else if (prev2.depth > next2.depth) {
                popPreviousToCommonLevel(prev2, next2);
              } else {
                popNextToCommonLevel(prev2, next2);
              }
              currentActiveSnapshot = next2;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue2;
              context._currentValue2 = nextValue;
              {
                if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                  error5("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
            }
            {
              if (prevSnapshot.context !== context) {
                error5("The parent context is not the expected context. This is probably a bug in React.");
              }
            }
            {
              var _value = prevSnapshot.parentValue;
              if (_value === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue2 = prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue2 = _value;
              }
              {
                if (context._currentRenderer2 !== void 0 && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
                  error5("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer2 = rendererSigil;
              }
            }
            return currentActiveSnapshot = prevSnapshot.parent;
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value12 = context._currentValue2;
            return value12;
          }
          function get4(key) {
            return key._reactInternals;
          }
          function set3(key, value12) {
            key._reactInternals = value12;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback2, callerName) {
              if (callback2 === null || typeof callback2 === "function") {
                return;
              }
              var key = callerName + "_" + callback2;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error5("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error5("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error5("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function(inst) {
              return false;
            },
            enqueueSetState: function(inst, payload, callback2) {
              var internals = get4(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback2 !== void 0 && callback2 !== null) {
                    warnOnInvalidCallback(callback2, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function(inst, payload, callback2) {
              var internals = get4(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            },
            enqueueForceUpdate: function(inst, callback2) {
              var internals = get4(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback2 !== void 0 && callback2 !== null) {
                    warnOnInvalidCallback(callback2, "setState");
                  }
                }
              }
            }
          };
          function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error5("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error5("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error5("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name15 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error5("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
                } else {
                  error5("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error5("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error5("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
              }
              if (instance.propTypes) {
                error5("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
              }
              if (instance.contextType) {
                error5("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
              }
              {
                if (instance.contextTypes) {
                  error5("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error5("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error5("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error5("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error5("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error5("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error5("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error5("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error5("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
              }
              if (instance.defaultProps) {
                error5("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error5("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error5("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error5("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error5("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error5("%s.state: must be set to an object or null", name15);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error5("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn4("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error5("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i7 = oldReplace ? 1 : 0; i7 < oldQueue.length; i7++) {
                  var partial = oldQueue[i7];
                  var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign3({}, nextState, partialState);
                    } else {
                      assign3(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState = instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false
            };
            set3(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error5("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: ""
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id5 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id5.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index6) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot2 = index6 + 1;
            var length10 = getBitLength(totalChildren) + baseLength;
            if (length10 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot2 << restOfBaseLength;
              var id5 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: 1 << restOfLength | id5,
                overflow
              };
            } else {
              var newBits = slot2 << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: 1 << length10 | _id,
                overflow: _overflow
              };
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id5) {
            return 1 << getBitLength(id5) - 1;
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log6 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log6(asUint) / LN2 | 0) | 0;
          }
          function is2(x3, y2) {
            return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
            {
              if (isInHookUserCodeInDev) {
                error5("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error5("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error5("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
              }
            }
            for (var i7 = 0; i7 < prevDeps.length && i7 < nextDeps.length; i7++) {
              if (objectIs(nextDeps[i7], prevDeps[i7])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error("Rendered more hooks than during the previous render");
            }
            return {
              memoizedState: null,
              queue: null,
              next: null
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children2, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children2 = Component(props, refOrContext);
            }
            resetHooksState();
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error5("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            return readContext(context);
          }
          function useContext19(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state3, action2) {
            return typeof action2 === "function" ? action2(state3) : action2;
          }
          function useState7(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer2(basicStateReducer, initialState);
          }
          function useReducer2(reducer, initialArg, init5) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action2 = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action2);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState = typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init5 !== void 0 ? init5(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = workInProgressHook.queue = {
                last: null,
                dispatch: null
              };
              var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo8(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef10(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect6(create4, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error5("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
            }
          }
          function dispatchAction(componentIdentity, queue, action2) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action: action2,
                next: null
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback4(callback2, deps) {
            return useMemo8(function() {
              return callback2;
            }, deps);
          }
          function useMutableSource(source3, getSnapshot, subscribe2) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source3._source);
          }
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value12) {
            resolveCurrentlyRenderingComponent();
            return value12;
          }
          function unsupportedStartTransition() {
            throw new Error("startTransition cannot be called during server rendering.");
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId3() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop2() {
          }
          var Dispatcher = {
            readContext: readContext$1,
            useContext: useContext19,
            useMemo: useMemo8,
            useReducer: useReducer2,
            useRef: useRef10,
            useState: useState7,
            useInsertionEffect: noop2,
            useLayoutEffect: useLayoutEffect6,
            useCallback: useCallback4,
            useImperativeHandle: noop2,
            useEffect: noop2,
            useDebugValue: noop2,
            useDeferredValue,
            useTransition,
            useId: useId3,
            useMutableSource,
            useSyncExternalStore
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info2 = "";
              var node2 = componentStack;
              do {
                switch (node2.tag) {
                  case 0:
                    info2 += describeBuiltInComponentFrame(node2.type, null, null);
                    break;
                  case 1:
                    info2 += describeFunctionComponentFrame(node2.type, null, null);
                    break;
                  case 2:
                    info2 += describeClassComponentFrame(node2.type, null, null);
                    break;
                }
                node2 = node2.parent;
              } while (node2);
              return info2;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error6) {
            console["error"](error6);
            return null;
          }
          function noop$1() {
          }
          function createRequest(children2, responseState, rootFormatContext, progressiveChunkSize, onError2, onAllReady, onShellReady, onShellError, onFatalError) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError2 === void 0 ? defaultErrorHandler : onError2,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
            };
            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false);
            rootSegment.parentFlushed = true;
            var rootTask = createTask(request, children2, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function() {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null
            };
          }
          function createTask(request, node2, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node: node2,
              ping: function() {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(request, index6, boundary, formatContext, lastPushedText, textEmbedded) {
            return {
              status: PENDING,
              id: -1,
              index: index6,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
                return "";
              }
              return getStackByComponentStackNode(currentTaskInDEV.componentStack);
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error5("Unexpectedly popped too many stack frames. This is a bug in React.");
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error6) {
            {
              var errorMessage;
              if (typeof error6 === "string") {
                errorMessage = error6;
              } else if (error6 && typeof error6.message === "string") {
                errorMessage = error6.message;
              } else {
                errorMessage = String(error6);
              }
              var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error6) {
            var errorDigest = request.onError(error6);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
            }
            return errorDigest;
          }
          function fatalError(request, error6) {
            var onShellError = request.onShellError;
            onShellError(error6);
            var onFatalError = request.onFatalError;
            onFatalError(error6);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error6);
            } else {
              request.status = CLOSING;
              request.fatalError = error6;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content3 = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false);
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content3);
              pushSegmentFinale$1(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error6) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error6);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error6);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children2 = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(prevContext, type, props);
            renderNode(request, task, children2);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(request, task, instance, Component, props) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error5("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(Component, props, maskedContext);
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(request, task, Component, props) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error5("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value12 = renderWithHooks(request, task, Component, props, legacyContext);
            var hasId = checkDidRenderIdHook();
            {
              if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value12, Component, props, legacyContext);
              finishClassComponent(request, task, value12, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index6 = 0;
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
                try {
                  renderNodeDestructive(request, task, value12);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value12);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error5("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error5("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error5("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children2 = renderWithHooks(request, task, type.render, props, ref);
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index6 = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
              try {
                renderNodeDestructive(request, task, children2);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children2);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error5("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error5("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value12 = props.value;
            var children2 = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value12);
            renderNodeDestructive(request, task, children2);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error5("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
              }
            }
          }
          function renderLazyComponent(request, task, lazyComponent, props, ref) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init5 = lazyComponent._init;
            var Component = init5(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error("ReactDOMServer does not yet support scope components.");
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info2 = "";
            {
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error5("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error5("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node2) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node2);
              } catch (x3) {
                if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function")
                  ;
                else {
                  lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
                }
                throw x3;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node2) {
            task.node = node2;
            if (typeof node2 === "object" && node2 !== null) {
              switch (node2.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element3 = node2;
                  var type = element3.type;
                  var props = element3.props;
                  var ref = element3.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                case REACT_LAZY_TYPE: {
                  var lazyNode = node2;
                  var payload = lazyNode._payload;
                  var init5 = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init5(payload);
                    } catch (x3) {
                      if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x3;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray2(node2)) {
                renderChildrenArray(request, task, node2);
                return;
              }
              var iteratorFn = getIteratorFn(node2);
              if (iteratorFn) {
                {
                  validateIterable(node2, iteratorFn);
                }
                var iterator2 = iteratorFn.call(node2);
                if (iterator2) {
                  var step3 = iterator2.next();
                  if (!step3.done) {
                    var children2 = [];
                    do {
                      children2.push(step3.value);
                      step3 = iterator2.next();
                    } while (!step3.done);
                    renderChildrenArray(request, task, children2);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node2);
              throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node2).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
            }
            if (typeof node2 === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node2, request.responseState, segment.lastPushedText);
              return;
            }
            if (typeof node2 === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node2, request.responseState, _segment.lastPushedText);
              return;
            }
            {
              if (typeof node2 === "function") {
                error5("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
              }
            }
          }
          function renderChildrenArray(request, task, children2) {
            var totalChildren = children2.length;
            for (var i7 = 0; i7 < totalChildren; i7++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i7);
              try {
                renderNode(request, task, children2[i7]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x3) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x3.then(ping, ping);
          }
          function renderNode(request, task, node2) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node2);
            } catch (x3) {
              resetHooksState();
              if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                spawnNewSuspendedTask(request, task, x3);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x3;
              }
            }
          }
          function erroredTask(request, boundary, segment, error6) {
            var errorDigest = logRecoverableError(request, error6);
            if (boundary === null) {
              fatalError(request, error6);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error6);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix = "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error("There can only be one root segment. This is a bug in React.");
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender)
                ;
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale$1(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x3) {
              resetHooksState();
              if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                var ping = task.ping;
                x3.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x3);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i7;
              for (i7 = 0; i7 < pingedTasks.length; i7++) {
                var task = pingedTasks[i7];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i7);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = segment.id = request.nextSegmentId++;
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(destination, request.responseState, segmentID);
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r2 = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children2 = segment.children;
                for (var childIdx = 0; childIdx < children2.length; childIdx++) {
                  var nextChild = children2[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r2 = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r2 = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r2;
              }
              default: {
                throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary$1(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary$1(destination, request.responseState);
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id5 = boundary.id = assignSuspenseBoundaryID(request.responseState);
              writeStartPendingSuspenseBoundary(destination, request.responseState, id5);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else {
              writeStartCompletedSuspenseBoundary$1(destination, request.responseState);
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary$1(destination, request.responseState);
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i7 = 0;
            for (; i7 < completedSegments.length; i7++) {
              var segment = completedSegments[i7];
              flushPartiallyCompletedSegment(request, destination, boundary, segment);
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i7 = 0;
            for (; i7 < completedSegments.length; i7++) {
              var segment = completedSegments[i7];
              if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
                i7++;
                completedSegments.splice(0, i7);
                return false;
              }
            }
            completedSegments.splice(0, i7);
            return true;
          }
          function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = segment.id = boundary.rootSegmentID;
              if (rootSegmentID === -1) {
                throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
            }
          }
          function flushCompletedQueues(request, destination) {
            try {
              var completedRootSegment = request.completedRootSegment;
              if (completedRootSegment !== null && request.pendingRootTasks === 0) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i7;
              for (i7 = 0; i7 < clientRenderedBoundaries.length; i7++) {
                var boundary = clientRenderedBoundaries[i7];
                if (!flushClientRenderedBoundary(request, destination, boundary)) {
                  request.destination = null;
                  i7++;
                  clientRenderedBoundaries.splice(0, i7);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i7);
              var completedBoundaries = request.completedBoundaries;
              for (i7 = 0; i7 < completedBoundaries.length; i7++) {
                var _boundary = completedBoundaries[i7];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i7++;
                  completedBoundaries.splice(0, i7);
                  return;
                }
              }
              completedBoundaries.splice(0, i7);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i7 = 0; i7 < partialBoundaries.length; i7++) {
                var _boundary2 = partialBoundaries[i7];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i7++;
                  partialBoundaries.splice(0, i7);
                  return;
                }
              }
              partialBoundaries.splice(0, i7);
              var largeBoundaries = request.completedBoundaries;
              for (i7 = 0; i7 < largeBoundaries.length; i7++) {
                var _boundary3 = largeBoundaries[i7];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i7++;
                  largeBoundaries.splice(0, i7);
                  return;
                }
              }
              largeBoundaries.splice(0, i7);
            } finally {
              if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error5("There was still abortable task at the root when we closed. This is a bug in React.");
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            }
          }
          function onError() {
          }
          function renderToStringImpl(children2, options3, generateStaticMarkup, abortReason) {
            var didFatal = false;
            var fatalError2 = null;
            var result = "";
            var destination = {
              push: function(chunk) {
                if (chunk !== null) {
                  result += chunk;
                }
                return true;
              },
              destroy: function(error6) {
                didFatal = true;
                fatalError2 = error6;
              }
            };
            var readyToStream = false;
            function onShellReady() {
              readyToStream = true;
            }
            var request = createRequest(children2, createResponseState$1(generateStaticMarkup, options3 ? options3.identifierPrefix : void 0), createRootFormatContext(), Infinity, onError, void 0, onShellReady, void 0, void 0);
            startWork(request);
            abort(request, abortReason);
            startFlowing(request, destination);
            if (didFatal) {
              throw fatalError2;
            }
            if (!readyToStream) {
              throw new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            }
            return result;
          }
          function renderToString2(children2, options3) {
            return renderToStringImpl(children2, options3, false, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
          }
          function renderToStaticMarkup2(children2, options3) {
            return renderToStringImpl(children2, options3, true, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
          }
          function renderToNodeStream() {
            throw new Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
          }
          function renderToStaticNodeStream() {
            throw new Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
          }
          exports.renderToNodeStream = renderToNodeStream;
          exports.renderToStaticMarkup = renderToStaticMarkup2;
          exports.renderToStaticNodeStream = renderToStaticNodeStream;
          exports.renderToString = renderToString2;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-server.browser.development.js
  var require_react_dom_server_browser_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom-server.browser.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React9 = require_react();
          var ReactVersion = "18.2.0";
          var ReactSharedInternals = React9.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn4(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error5(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack10 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack10 !== "") {
                format += "%s";
                args = args.concat([stack10]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          function scheduleWork(callback2) {
            callback2();
          }
          var VIEW_SIZE = 512;
          var currentView = null;
          var writtenBytes = 0;
          function beginWriting(destination) {
            currentView = new Uint8Array(VIEW_SIZE);
            writtenBytes = 0;
          }
          function writeChunk(destination, chunk) {
            if (chunk.length === 0) {
              return;
            }
            if (chunk.length > VIEW_SIZE) {
              if (writtenBytes > 0) {
                destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
                currentView = new Uint8Array(VIEW_SIZE);
                writtenBytes = 0;
              }
              destination.enqueue(chunk);
              return;
            }
            var bytesToWrite = chunk;
            var allowableBytes = currentView.length - writtenBytes;
            if (allowableBytes < bytesToWrite.length) {
              if (allowableBytes === 0) {
                destination.enqueue(currentView);
              } else {
                currentView.set(bytesToWrite.subarray(0, allowableBytes), writtenBytes);
                destination.enqueue(currentView);
                bytesToWrite = bytesToWrite.subarray(allowableBytes);
              }
              currentView = new Uint8Array(VIEW_SIZE);
              writtenBytes = 0;
            }
            currentView.set(bytesToWrite, writtenBytes);
            writtenBytes += bytesToWrite.length;
          }
          function writeChunkAndReturn(destination, chunk) {
            writeChunk(destination, chunk);
            return true;
          }
          function completeWriting(destination) {
            if (currentView && writtenBytes > 0) {
              destination.enqueue(new Uint8Array(currentView.buffer, 0, writtenBytes));
              currentView = null;
              writtenBytes = 0;
            }
          }
          function close(destination) {
            destination.close();
          }
          var textEncoder = new TextEncoder();
          function stringToChunk(content3) {
            return textEncoder.encode(content3);
          }
          function stringToPrecomputedChunk(content3) {
            return textEncoder.encode(content3);
          }
          function closeWithError(destination, error6) {
            if (typeof destination.error === "function") {
              destination.error(error6);
            } else {
              destination.close();
            }
          }
          function typeName(value12) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value12[Symbol.toStringTag] || value12.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value12) {
            {
              try {
                testStringCoercion(value12);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value12) {
            return "" + value12;
          }
          function checkAttributeStringCoercion(value12, attributeName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value12, propName) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          function checkHtmlStringCoercion(value12) {
            {
              if (willCoercionThrow(value12)) {
                error5("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value12));
                return testStringCoercion(value12);
              }
            }
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error5("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value12) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix5 = name15.toLowerCase().slice(0, 5);
                  return prefix5 !== "data-" && prefix5 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function getPropertyInfo(name15) {
            return properties.hasOwnProperty(name15) ? properties[name15] : null;
          }
          function PropertyInfoRecord(name15, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name15;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, RESERVED, false, name15, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name15 = _ref[0], attributeName = _ref[1];
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEANISH_STRING, false, name15, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, false, name15.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, BOOLEAN, true, name15, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, OVERLOADED_BOOLEAN, false, name15, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, POSITIVE_NUMERIC, false, name15, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name15) {
            properties[name15] = new PropertyInfoRecord(name15, NUMERIC, false, name15.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name15 = attributeName.replace(CAMELIZE, capitalize);
            properties[name15] = new PropertyInfoRecord(name15, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix5, key) {
            return prefix5 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop3) {
            prefixes.forEach(function(prefix5) {
              isUnitlessNumber[prefixKey(prefix5, prop3)] = isUnitlessNumber[prop3];
            });
          });
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName2, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error5("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error5("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCustomComponent(tagName2, props) {
            if (tagName2.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName2) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var ariaProperties = {
            "aria-current": 0,
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName2, name15) {
            {
              if (hasOwnProperty3.call(warnedProperties, name15) && warnedProperties[name15]) {
                return true;
              }
              if (rARIACamel.test(name15)) {
                var ariaName = "aria-" + name15.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error5("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name15);
                  warnedProperties[name15] = true;
                  return true;
                }
                if (name15 !== correctName) {
                  error5("Invalid ARIA attribute `%s`. Did you mean `%s`?", name15, correctName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
              if (rARIA.test(name15)) {
                var lowerCasedName = name15.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name15] = true;
                  return false;
                }
                if (name15 !== standardName) {
                  error5("Unknown ARIA attribute `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties[name15] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error5("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error5("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error5("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error5("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName2, name15, value12, eventRegistry) {
              if (hasOwnProperty3.call(warnedProperties$1, name15) && warnedProperties$1[name15]) {
                return true;
              }
              var lowerCasedName = name15.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error5("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies.hasOwnProperty(name15)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
                if (registrationName != null) {
                  error5("Invalid event handler property `%s`. Did you mean `%s`?", name15, registrationName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name15)) {
                  error5("Unknown event handler property `%s`. It will be ignored.", name15);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name15)) {
                if (INVALID_EVENT_NAME_REGEX.test(name15)) {
                  error5("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (rARIA$1.test(name15) || rARIACamel$1.test(name15)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error5("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error5("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name15] = true;
                return true;
              }
              if (lowerCasedName === "is" && value12 !== null && value12 !== void 0 && typeof value12 !== "string") {
                error5("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "number" && isNaN(value12)) {
                error5("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name15);
                warnedProperties$1[name15] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name15);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name15) {
                  error5("Invalid DOM property `%s`. Did you mean `%s`?", name15, standardName);
                  warnedProperties$1[name15] = true;
                  return true;
                }
              } else if (!isReserved && name15 !== lowerCasedName) {
                error5("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name15, lowerCasedName);
                warnedProperties$1[name15] = true;
                return true;
              }
              if (typeof value12 === "boolean" && shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                if (value12) {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value12, name15, name15, value12, name15);
                } else {
                  error5('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value12, name15, name15, value12, name15, name15, name15);
                }
                warnedProperties$1[name15] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name15, value12, propertyInfo, false)) {
                warnedProperties$1[name15] = true;
                return false;
              }
              if ((value12 === "false" || value12 === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error5("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value12, name15, value12 === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name15, value12);
                warnedProperties$1[name15] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop3) {
                return "`" + prop3 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error5("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error5("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern2 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported style property %s. Did you mean %s?", name15, camelize(name15.replace(msPattern2, "ms-")));
            };
            var warnBadVendoredStyleName = function(name15) {
              if (warnedStyleNames.hasOwnProperty(name15) && warnedStyleNames[name15]) {
                return;
              }
              warnedStyleNames[name15] = true;
              error5("Unsupported vendor-prefixed style property %s. Did you mean %s?", name15, name15.charAt(0).toUpperCase() + name15.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name15, value12) {
              if (warnedStyleValues.hasOwnProperty(value12) && warnedStyleValues[value12]) {
                return;
              }
              warnedStyleValues[value12] = true;
              error5(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name15, value12.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name15, value12) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error5("`NaN` is an invalid value for the `%s` css style property.", name15);
            };
            var warnStyleValueIsInfinity = function(name15, value12) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error5("`Infinity` is an invalid value for the `%s` css style property.", name15);
            };
            warnValidStyle = function(name15, value12) {
              if (name15.indexOf("-") > -1) {
                warnHyphenatedStyleName(name15);
              } else if (badVendoredStyleNamePattern.test(name15)) {
                warnBadVendoredStyleName(name15);
              } else if (badStyleValueWithSemicolonPattern.test(value12)) {
                warnStyleValueWithSemicolon(name15, value12);
              }
              if (typeof value12 === "number") {
                if (isNaN(value12)) {
                  warnStyleValueIsNaN(name15, value12);
                } else if (!isFinite(value12)) {
                  warnStyleValueIsInfinity(name15, value12);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          var matchHtmlRegExp = /["'&<>]/;
          function escapeHtml(string) {
            {
              checkHtmlStringCoercion(string);
            }
            var str2 = "" + string;
            var match6 = matchHtmlRegExp.exec(str2);
            if (!match6) {
              return str2;
            }
            var escape2;
            var html3 = "";
            var index6;
            var lastIndex = 0;
            for (index6 = match6.index; index6 < str2.length; index6++) {
              switch (str2.charCodeAt(index6)) {
                case 34:
                  escape2 = "&quot;";
                  break;
                case 38:
                  escape2 = "&amp;";
                  break;
                case 39:
                  escape2 = "&#x27;";
                  break;
                case 60:
                  escape2 = "&lt;";
                  break;
                case 62:
                  escape2 = "&gt;";
                  break;
                default:
                  continue;
              }
              if (lastIndex !== index6) {
                html3 += str2.substring(lastIndex, index6);
              }
              lastIndex = index6 + 1;
              html3 += escape2;
            }
            return lastIndex !== index6 ? html3 + str2.substring(lastIndex, index6) : html3;
          }
          function escapeTextForBrowser(text7) {
            if (typeof text7 === "boolean" || typeof text7 === "number") {
              return "" + text7;
            }
            return escapeHtml(text7);
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern$1 = /^ms-/;
          function hyphenateStyleName2(name15) {
            return name15.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-");
          }
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url2) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url2)) {
                didWarn = true;
                error5("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url2));
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a4) {
            return isArrayImpl(a4);
          }
          var startInlineScript = stringToPrecomputedChunk("<script>");
          var endInlineScript = stringToPrecomputedChunk("<\/script>");
          var startScriptSrc = stringToPrecomputedChunk('<script src="');
          var startModuleSrc = stringToPrecomputedChunk('<script type="module" src="');
          var endAsyncScript = stringToPrecomputedChunk('" async=""><\/script>');
          function escapeBootstrapScriptContent(scriptText) {
            {
              checkHtmlStringCoercion(scriptText);
            }
            return ("" + scriptText).replace(scriptRegex, scriptReplacer);
          }
          var scriptRegex = /(<\/|<)(s)(cript)/gi;
          var scriptReplacer = function(match6, prefix5, s3, suffix2) {
            return "" + prefix5 + (s3 === "s" ? "\\u0073" : "\\u0053") + suffix2;
          };
          function createResponseState(identifierPrefix, nonce, bootstrapScriptContent, bootstrapScripts, bootstrapModules) {
            var idPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
            var inlineScriptWithNonce = nonce === void 0 ? startInlineScript : stringToPrecomputedChunk('<script nonce="' + escapeTextForBrowser(nonce) + '">');
            var bootstrapChunks = [];
            if (bootstrapScriptContent !== void 0) {
              bootstrapChunks.push(inlineScriptWithNonce, stringToChunk(escapeBootstrapScriptContent(bootstrapScriptContent)), endInlineScript);
            }
            if (bootstrapScripts !== void 0) {
              for (var i7 = 0; i7 < bootstrapScripts.length; i7++) {
                bootstrapChunks.push(startScriptSrc, stringToChunk(escapeTextForBrowser(bootstrapScripts[i7])), endAsyncScript);
              }
            }
            if (bootstrapModules !== void 0) {
              for (var _i = 0; _i < bootstrapModules.length; _i++) {
                bootstrapChunks.push(startModuleSrc, stringToChunk(escapeTextForBrowser(bootstrapModules[_i])), endAsyncScript);
              }
            }
            return {
              bootstrapChunks,
              startInlineScript: inlineScriptWithNonce,
              placeholderPrefix: stringToPrecomputedChunk(idPrefix + "P:"),
              segmentPrefix: stringToPrecomputedChunk(idPrefix + "S:"),
              boundaryPrefix: idPrefix + "B:",
              idPrefix,
              nextSuspenseID: 0,
              sentCompleteSegmentFunction: false,
              sentCompleteBoundaryFunction: false,
              sentClientRenderFunction: false
            };
          }
          var ROOT_HTML_MODE = 0;
          var HTML_MODE = 1;
          var SVG_MODE = 2;
          var MATHML_MODE = 3;
          var HTML_TABLE_MODE = 4;
          var HTML_TABLE_BODY_MODE = 5;
          var HTML_TABLE_ROW_MODE = 6;
          var HTML_COLGROUP_MODE = 7;
          function createFormatContext(insertionMode, selectedValue) {
            return {
              insertionMode,
              selectedValue
            };
          }
          function createRootFormatContext(namespaceURI) {
            var insertionMode = namespaceURI === "http://www.w3.org/2000/svg" ? SVG_MODE : namespaceURI === "http://www.w3.org/1998/Math/MathML" ? MATHML_MODE : ROOT_HTML_MODE;
            return createFormatContext(insertionMode, null);
          }
          function getChildFormatContext(parentContext, type, props) {
            switch (type) {
              case "select":
                return createFormatContext(HTML_MODE, props.value != null ? props.value : props.defaultValue);
              case "svg":
                return createFormatContext(SVG_MODE, null);
              case "math":
                return createFormatContext(MATHML_MODE, null);
              case "foreignObject":
                return createFormatContext(HTML_MODE, null);
              case "table":
                return createFormatContext(HTML_TABLE_MODE, null);
              case "thead":
              case "tbody":
              case "tfoot":
                return createFormatContext(HTML_TABLE_BODY_MODE, null);
              case "colgroup":
                return createFormatContext(HTML_COLGROUP_MODE, null);
              case "tr":
                return createFormatContext(HTML_TABLE_ROW_MODE, null);
            }
            if (parentContext.insertionMode >= HTML_TABLE_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            if (parentContext.insertionMode === ROOT_HTML_MODE) {
              return createFormatContext(HTML_MODE, null);
            }
            return parentContext;
          }
          var UNINITIALIZED_SUSPENSE_BOUNDARY_ID = null;
          function assignSuspenseBoundaryID(responseState) {
            var generatedID = responseState.nextSuspenseID++;
            return stringToPrecomputedChunk(responseState.boundaryPrefix + generatedID.toString(16));
          }
          function makeId(responseState, treeId, localId) {
            var idPrefix = responseState.idPrefix;
            var id5 = ":" + idPrefix + "R" + treeId;
            if (localId > 0) {
              id5 += "H" + localId.toString(32);
            }
            return id5 + ":";
          }
          function encodeHTMLTextNode(text7) {
            return escapeTextForBrowser(text7);
          }
          var textSeparator = stringToPrecomputedChunk("<!-- -->");
          function pushTextInstance(target6, text7, responseState, textEmbedded) {
            if (text7 === "") {
              return textEmbedded;
            }
            if (textEmbedded) {
              target6.push(textSeparator);
            }
            target6.push(stringToChunk(encodeHTMLTextNode(text7)));
            return true;
          }
          function pushSegmentFinale(target6, responseState, lastPushedText, textEmbedded) {
            if (lastPushedText && textEmbedded) {
              target6.push(textSeparator);
            }
          }
          var styleNameCache = /* @__PURE__ */ new Map();
          function processStyleName2(styleName) {
            var chunk = styleNameCache.get(styleName);
            if (chunk !== void 0) {
              return chunk;
            }
            var result = stringToPrecomputedChunk(escapeTextForBrowser(hyphenateStyleName2(styleName)));
            styleNameCache.set(styleName, result);
            return result;
          }
          var styleAttributeStart = stringToPrecomputedChunk(' style="');
          var styleAssign = stringToPrecomputedChunk(":");
          var styleSeparator = stringToPrecomputedChunk(";");
          function pushStyle(target6, responseState, style3) {
            if (typeof style3 !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
            var isFirst = true;
            for (var styleName in style3) {
              if (!hasOwnProperty3.call(style3, styleName)) {
                continue;
              }
              var styleValue = style3[styleName];
              if (styleValue == null || typeof styleValue === "boolean" || styleValue === "") {
                continue;
              }
              var nameChunk = void 0;
              var valueChunk = void 0;
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              if (isCustomProperty3) {
                nameChunk = stringToChunk(escapeTextForBrowser(styleName));
                {
                  checkCSSPropertyStringCoercion(styleValue, styleName);
                }
                valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
              } else {
                {
                  warnValidStyle$1(styleName, styleValue);
                }
                nameChunk = processStyleName2(styleName);
                if (typeof styleValue === "number") {
                  if (styleValue !== 0 && !hasOwnProperty3.call(isUnitlessNumber, styleName)) {
                    valueChunk = stringToChunk(styleValue + "px");
                  } else {
                    valueChunk = stringToChunk("" + styleValue);
                  }
                } else {
                  {
                    checkCSSPropertyStringCoercion(styleValue, styleName);
                  }
                  valueChunk = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
                }
              }
              if (isFirst) {
                isFirst = false;
                target6.push(styleAttributeStart, nameChunk, styleAssign, valueChunk);
              } else {
                target6.push(styleSeparator, nameChunk, styleAssign, valueChunk);
              }
            }
            if (!isFirst) {
              target6.push(attributeEnd);
            }
          }
          var attributeSeparator = stringToPrecomputedChunk(" ");
          var attributeAssign = stringToPrecomputedChunk('="');
          var attributeEnd = stringToPrecomputedChunk('"');
          var attributeEmptyString = stringToPrecomputedChunk('=""');
          function pushAttribute(target6, responseState, name15, value12) {
            switch (name15) {
              case "style": {
                pushStyle(target6, responseState, value12);
                return;
              }
              case "defaultValue":
              case "defaultChecked":
              case "innerHTML":
              case "suppressContentEditableWarning":
              case "suppressHydrationWarning":
                return;
            }
            if (name15.length > 2 && (name15[0] === "o" || name15[0] === "O") && (name15[1] === "n" || name15[1] === "N")) {
              return;
            }
            var propertyInfo = getPropertyInfo(name15);
            if (propertyInfo !== null) {
              switch (typeof value12) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  if (!propertyInfo.acceptsBooleans) {
                    return;
                  }
                }
              }
              var attributeName = propertyInfo.attributeName;
              var attributeNameChunk = stringToChunk(attributeName);
              switch (propertyInfo.type) {
                case BOOLEAN:
                  if (value12) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  }
                  return;
                case OVERLOADED_BOOLEAN:
                  if (value12 === true) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeEmptyString);
                  } else if (value12 === false)
                    ;
                  else {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  return;
                case NUMERIC:
                  if (!isNaN(value12)) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  break;
                case POSITIVE_NUMERIC:
                  if (!isNaN(value12) && value12 >= 1) {
                    target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
                  }
                  break;
                default:
                  if (propertyInfo.sanitizeURL) {
                    {
                      checkAttributeStringCoercion(value12, attributeName);
                    }
                    value12 = "" + value12;
                    sanitizeURL(value12);
                  }
                  target6.push(attributeSeparator, attributeNameChunk, attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
              }
            } else if (isAttributeNameSafe(name15)) {
              switch (typeof value12) {
                case "function":
                case "symbol":
                  return;
                case "boolean": {
                  var prefix5 = name15.toLowerCase().slice(0, 5);
                  if (prefix5 !== "data-" && prefix5 !== "aria-") {
                    return;
                  }
                }
              }
              target6.push(attributeSeparator, stringToChunk(name15), attributeAssign, stringToChunk(escapeTextForBrowser(value12)), attributeEnd);
            }
          }
          var endOfStartTag = stringToPrecomputedChunk(">");
          var endOfStartTagSelfClosing = stringToPrecomputedChunk("/>");
          function pushInnerHTML(target6, innerHTML, children2) {
            if (innerHTML != null) {
              if (children2 != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html3 = innerHTML.__html;
              if (html3 !== null && html3 !== void 0) {
                {
                  checkHtmlStringCoercion(html3);
                }
                target6.push(stringToChunk("" + html3));
              }
            }
          }
          var didWarnDefaultInputValue = false;
          var didWarnDefaultChecked = false;
          var didWarnDefaultSelectValue = false;
          var didWarnDefaultTextareaValue = false;
          var didWarnInvalidOptionChildren = false;
          var didWarnInvalidOptionInnerHTML = false;
          var didWarnSelectedSetOnOption = false;
          function checkSelectProp(props, propName) {
            {
              var value12 = props[propName];
              if (value12 != null) {
                var array = isArray2(value12);
                if (props.multiple && !array) {
                  error5("The `%s` prop supplied to <select> must be an array if `multiple` is true.", propName);
                } else if (!props.multiple && array) {
                  error5("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.", propName);
                }
              }
            }
          }
          function pushStartSelect(target6, props, responseState) {
            {
              checkControlledValueProps("select", props);
              checkSelectProp(props, "value");
              checkSelectProp(props, "defaultValue");
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultSelectValue) {
                error5("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultSelectValue = true;
              }
            }
            target6.push(startChunkForTag("select"));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          function flattenOptionChildren(children2) {
            var content3 = "";
            React9.Children.forEach(children2, function(child) {
              if (child == null) {
                return;
              }
              content3 += child;
              {
                if (!didWarnInvalidOptionChildren && typeof child !== "string" && typeof child !== "number") {
                  didWarnInvalidOptionChildren = true;
                  error5("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              }
            });
            return content3;
          }
          var selectedMarkerAttribute = stringToPrecomputedChunk(' selected=""');
          function pushStartOption(target6, props, responseState, formatContext) {
            var selectedValue = formatContext.selectedValue;
            target6.push(startChunkForTag("option"));
            var children2 = null;
            var value12 = null;
            var selected2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "selected":
                    selected2 = propValue;
                    {
                      if (!didWarnSelectedSetOnOption) {
                        error5("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                        didWarnSelectedSetOnOption = true;
                      }
                    }
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (selectedValue != null) {
              var stringValue;
              if (value12 !== null) {
                {
                  checkAttributeStringCoercion(value12, "value");
                }
                stringValue = "" + value12;
              } else {
                {
                  if (innerHTML !== null) {
                    if (!didWarnInvalidOptionInnerHTML) {
                      didWarnInvalidOptionInnerHTML = true;
                      error5("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                    }
                  }
                }
                stringValue = flattenOptionChildren(children2);
              }
              if (isArray2(selectedValue)) {
                for (var i7 = 0; i7 < selectedValue.length; i7++) {
                  {
                    checkAttributeStringCoercion(selectedValue[i7], "value");
                  }
                  var v2 = "" + selectedValue[i7];
                  if (v2 === stringValue) {
                    target6.push(selectedMarkerAttribute);
                    break;
                  }
                }
              } else {
                {
                  checkAttributeStringCoercion(selectedValue, "select.value");
                }
                if ("" + selectedValue === stringValue) {
                  target6.push(selectedMarkerAttribute);
                }
              }
            } else if (selected2) {
              target6.push(selectedMarkerAttribute);
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          function pushInput(target6, props, responseState) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnDefaultChecked) {
                error5("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultInputValue) {
                error5("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type);
                didWarnDefaultInputValue = true;
              }
            }
            target6.push(startChunkForTag("input"));
            var value12 = null;
            var defaultValue4 = null;
            var checked2 = null;
            var defaultChecked2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  case "defaultChecked":
                    defaultChecked2 = propValue;
                    break;
                  case "defaultValue":
                    defaultValue4 = propValue;
                    break;
                  case "checked":
                    checked2 = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (checked2 !== null) {
              pushAttribute(target6, responseState, "checked", checked2);
            } else if (defaultChecked2 !== null) {
              pushAttribute(target6, responseState, "checked", defaultChecked2);
            }
            if (value12 !== null) {
              pushAttribute(target6, responseState, "value", value12);
            } else if (defaultValue4 !== null) {
              pushAttribute(target6, responseState, "value", defaultValue4);
            }
            target6.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartTextArea(target6, props, responseState) {
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnDefaultTextareaValue) {
                error5("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnDefaultTextareaValue = true;
              }
            }
            target6.push(startChunkForTag("textarea"));
            var value12 = null;
            var defaultValue4 = null;
            var children2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "value":
                    value12 = propValue;
                    break;
                  case "defaultValue":
                    defaultValue4 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            if (value12 === null && defaultValue4 !== null) {
              value12 = defaultValue4;
            }
            target6.push(endOfStartTag);
            if (children2 != null) {
              {
                error5("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              if (value12 != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray2(children2)) {
                if (children2.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                {
                  checkHtmlStringCoercion(children2[0]);
                }
                value12 = "" + children2[0];
              }
              {
                checkHtmlStringCoercion(children2);
              }
              value12 = "" + children2;
            }
            if (typeof value12 === "string" && value12[0] === "\n") {
              target6.push(leadingNewline);
            }
            if (value12 !== null) {
              {
                checkAttributeStringCoercion(value12, "value");
              }
              target6.push(stringToChunk(encodeHTMLTextNode("" + value12)));
            }
            return null;
          }
          function pushSelfClosing(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error(tag2 + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTagSelfClosing);
            return null;
          }
          function pushStartMenuItem(target6, props, responseState) {
            target6.push(startChunkForTag("menuitem"));
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw new Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            return null;
          }
          function pushStartTitle(target6, props, responseState) {
            target6.push(startChunkForTag("title"));
            var children2 = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    throw new Error("`dangerouslySetInnerHTML` does not make sense on <title>.");
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            {
              var child = Array.isArray(children2) && children2.length < 2 ? children2[0] || null : children2;
              if (Array.isArray(children2) && children2.length > 1) {
                error5("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && child.$$typeof != null) {
                error5("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              } else if (child != null && typeof child !== "string" && typeof child !== "number") {
                error5("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
              }
            }
            return children2;
          }
          function pushStartGenericElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            if (typeof children2 === "string") {
              target6.push(stringToChunk(encodeHTMLTextNode(children2)));
              return null;
            }
            return children2;
          }
          function pushStartCustomElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "style":
                    pushStyle(target6, responseState, propValue);
                    break;
                  case "suppressContentEditableWarning":
                  case "suppressHydrationWarning":
                    break;
                  default:
                    if (isAttributeNameSafe(propKey) && typeof propValue !== "function" && typeof propValue !== "symbol") {
                      target6.push(attributeSeparator, stringToChunk(propKey), attributeAssign, stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
                    }
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            pushInnerHTML(target6, innerHTML, children2);
            return children2;
          }
          var leadingNewline = stringToPrecomputedChunk("\n");
          function pushStartPreformattedElement(target6, props, tag2, responseState) {
            target6.push(startChunkForTag(tag2));
            var children2 = null;
            var innerHTML = null;
            for (var propKey in props) {
              if (hasOwnProperty3.call(props, propKey)) {
                var propValue = props[propKey];
                if (propValue == null) {
                  continue;
                }
                switch (propKey) {
                  case "children":
                    children2 = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  default:
                    pushAttribute(target6, responseState, propKey, propValue);
                    break;
                }
              }
            }
            target6.push(endOfStartTag);
            if (innerHTML != null) {
              if (children2 != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
              var html3 = innerHTML.__html;
              if (html3 !== null && html3 !== void 0) {
                if (typeof html3 === "string" && html3.length > 0 && html3[0] === "\n") {
                  target6.push(leadingNewline, stringToChunk(html3));
                } else {
                  {
                    checkHtmlStringCoercion(html3);
                  }
                  target6.push(stringToChunk("" + html3));
                }
              }
            }
            if (typeof children2 === "string" && children2[0] === "\n") {
              target6.push(leadingNewline);
            }
            return children2;
          }
          var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/;
          var validatedTagCache = /* @__PURE__ */ new Map();
          function startChunkForTag(tag2) {
            var tagStartChunk = validatedTagCache.get(tag2);
            if (tagStartChunk === void 0) {
              if (!VALID_TAG_REGEX.test(tag2)) {
                throw new Error("Invalid tag: " + tag2);
              }
              tagStartChunk = stringToPrecomputedChunk("<" + tag2);
              validatedTagCache.set(tag2, tagStartChunk);
            }
            return tagStartChunk;
          }
          var DOCTYPE = stringToPrecomputedChunk("<!DOCTYPE html>");
          function pushStartInstance(target6, type, props, responseState, formatContext) {
            {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, null);
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error5("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
              if (formatContext.insertionMode !== SVG_MODE && formatContext.insertionMode !== MATHML_MODE) {
                if (type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type) {
                  error5("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
            }
            switch (type) {
              case "select":
                return pushStartSelect(target6, props, responseState);
              case "option":
                return pushStartOption(target6, props, responseState, formatContext);
              case "textarea":
                return pushStartTextArea(target6, props, responseState);
              case "input":
                return pushInput(target6, props, responseState);
              case "menuitem":
                return pushStartMenuItem(target6, props, responseState);
              case "title":
                return pushStartTitle(target6, props, responseState);
              case "listing":
              case "pre": {
                return pushStartPreformattedElement(target6, props, type, responseState);
              }
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                return pushSelfClosing(target6, props, type, responseState);
              }
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph": {
                return pushStartGenericElement(target6, props, type, responseState);
              }
              case "html": {
                if (formatContext.insertionMode === ROOT_HTML_MODE) {
                  target6.push(DOCTYPE);
                }
                return pushStartGenericElement(target6, props, type, responseState);
              }
              default: {
                if (type.indexOf("-") === -1 && typeof props.is !== "string") {
                  return pushStartGenericElement(target6, props, type, responseState);
                } else {
                  return pushStartCustomElement(target6, props, type, responseState);
                }
              }
            }
          }
          var endTag1 = stringToPrecomputedChunk("</");
          var endTag2 = stringToPrecomputedChunk(">");
          function pushEndInstance(target6, type, props) {
            switch (type) {
              case "area":
              case "base":
              case "br":
              case "col":
              case "embed":
              case "hr":
              case "img":
              case "input":
              case "keygen":
              case "link":
              case "meta":
              case "param":
              case "source":
              case "track":
              case "wbr": {
                break;
              }
              default: {
                target6.push(endTag1, stringToChunk(type), endTag2);
              }
            }
          }
          function writeCompletedRoot(destination, responseState) {
            var bootstrapChunks = responseState.bootstrapChunks;
            var i7 = 0;
            for (; i7 < bootstrapChunks.length - 1; i7++) {
              writeChunk(destination, bootstrapChunks[i7]);
            }
            if (i7 < bootstrapChunks.length) {
              return writeChunkAndReturn(destination, bootstrapChunks[i7]);
            }
            return true;
          }
          var placeholder1 = stringToPrecomputedChunk('<template id="');
          var placeholder22 = stringToPrecomputedChunk('"></template>');
          function writePlaceholder(destination, responseState, id5) {
            writeChunk(destination, placeholder1);
            writeChunk(destination, responseState.placeholderPrefix);
            var formattedID = stringToChunk(id5.toString(16));
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, placeholder22);
          }
          var startCompletedSuspenseBoundary = stringToPrecomputedChunk("<!--$-->");
          var startPendingSuspenseBoundary1 = stringToPrecomputedChunk('<!--$?--><template id="');
          var startPendingSuspenseBoundary2 = stringToPrecomputedChunk('"></template>');
          var startClientRenderedSuspenseBoundary = stringToPrecomputedChunk("<!--$!-->");
          var endSuspenseBoundary = stringToPrecomputedChunk("<!--/$-->");
          var clientRenderedSuspenseBoundaryError1 = stringToPrecomputedChunk("<template");
          var clientRenderedSuspenseBoundaryErrorAttrInterstitial = stringToPrecomputedChunk('"');
          var clientRenderedSuspenseBoundaryError1A = stringToPrecomputedChunk(' data-dgst="');
          var clientRenderedSuspenseBoundaryError1B = stringToPrecomputedChunk(' data-msg="');
          var clientRenderedSuspenseBoundaryError1C = stringToPrecomputedChunk(' data-stck="');
          var clientRenderedSuspenseBoundaryError2 = stringToPrecomputedChunk("></template>");
          function writeStartCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, startCompletedSuspenseBoundary);
          }
          function writeStartPendingSuspenseBoundary(destination, responseState, id5) {
            writeChunk(destination, startPendingSuspenseBoundary1);
            if (id5 === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, id5);
            return writeChunkAndReturn(destination, startPendingSuspenseBoundary2);
          }
          function writeStartClientRenderedSuspenseBoundary(destination, responseState, errorDigest, errorMesssage, errorComponentStack) {
            var result;
            result = writeChunkAndReturn(destination, startClientRenderedSuspenseBoundary);
            writeChunk(destination, clientRenderedSuspenseBoundaryError1);
            if (errorDigest) {
              writeChunk(destination, clientRenderedSuspenseBoundaryError1A);
              writeChunk(destination, stringToChunk(escapeTextForBrowser(errorDigest)));
              writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
            }
            {
              if (errorMesssage) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1B);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorMesssage)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
              if (errorComponentStack) {
                writeChunk(destination, clientRenderedSuspenseBoundaryError1C);
                writeChunk(destination, stringToChunk(escapeTextForBrowser(errorComponentStack)));
                writeChunk(destination, clientRenderedSuspenseBoundaryErrorAttrInterstitial);
              }
            }
            result = writeChunkAndReturn(destination, clientRenderedSuspenseBoundaryError2);
            return result;
          }
          function writeEndCompletedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndPendingSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          function writeEndClientRenderedSuspenseBoundary(destination, responseState) {
            return writeChunkAndReturn(destination, endSuspenseBoundary);
          }
          var startSegmentHTML = stringToPrecomputedChunk('<div hidden id="');
          var startSegmentHTML2 = stringToPrecomputedChunk('">');
          var endSegmentHTML = stringToPrecomputedChunk("</div>");
          var startSegmentSVG = stringToPrecomputedChunk('<svg aria-hidden="true" style="display:none" id="');
          var startSegmentSVG2 = stringToPrecomputedChunk('">');
          var endSegmentSVG = stringToPrecomputedChunk("</svg>");
          var startSegmentMathML = stringToPrecomputedChunk('<math aria-hidden="true" style="display:none" id="');
          var startSegmentMathML2 = stringToPrecomputedChunk('">');
          var endSegmentMathML = stringToPrecomputedChunk("</math>");
          var startSegmentTable = stringToPrecomputedChunk('<table hidden id="');
          var startSegmentTable2 = stringToPrecomputedChunk('">');
          var endSegmentTable = stringToPrecomputedChunk("</table>");
          var startSegmentTableBody = stringToPrecomputedChunk('<table hidden><tbody id="');
          var startSegmentTableBody2 = stringToPrecomputedChunk('">');
          var endSegmentTableBody = stringToPrecomputedChunk("</tbody></table>");
          var startSegmentTableRow = stringToPrecomputedChunk('<table hidden><tr id="');
          var startSegmentTableRow2 = stringToPrecomputedChunk('">');
          var endSegmentTableRow = stringToPrecomputedChunk("</tr></table>");
          var startSegmentColGroup = stringToPrecomputedChunk('<table hidden><colgroup id="');
          var startSegmentColGroup2 = stringToPrecomputedChunk('">');
          var endSegmentColGroup = stringToPrecomputedChunk("</colgroup></table>");
          function writeStartSegment(destination, responseState, formatContext, id5) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                writeChunk(destination, startSegmentHTML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentHTML2);
              }
              case SVG_MODE: {
                writeChunk(destination, startSegmentSVG);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentSVG2);
              }
              case MATHML_MODE: {
                writeChunk(destination, startSegmentMathML);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentMathML2);
              }
              case HTML_TABLE_MODE: {
                writeChunk(destination, startSegmentTable);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTable2);
              }
              case HTML_TABLE_BODY_MODE: {
                writeChunk(destination, startSegmentTableBody);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableBody2);
              }
              case HTML_TABLE_ROW_MODE: {
                writeChunk(destination, startSegmentTableRow);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentTableRow2);
              }
              case HTML_COLGROUP_MODE: {
                writeChunk(destination, startSegmentColGroup);
                writeChunk(destination, responseState.segmentPrefix);
                writeChunk(destination, stringToChunk(id5.toString(16)));
                return writeChunkAndReturn(destination, startSegmentColGroup2);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          function writeEndSegment(destination, formatContext) {
            switch (formatContext.insertionMode) {
              case ROOT_HTML_MODE:
              case HTML_MODE: {
                return writeChunkAndReturn(destination, endSegmentHTML);
              }
              case SVG_MODE: {
                return writeChunkAndReturn(destination, endSegmentSVG);
              }
              case MATHML_MODE: {
                return writeChunkAndReturn(destination, endSegmentMathML);
              }
              case HTML_TABLE_MODE: {
                return writeChunkAndReturn(destination, endSegmentTable);
              }
              case HTML_TABLE_BODY_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableBody);
              }
              case HTML_TABLE_ROW_MODE: {
                return writeChunkAndReturn(destination, endSegmentTableRow);
              }
              case HTML_COLGROUP_MODE: {
                return writeChunkAndReturn(destination, endSegmentColGroup);
              }
              default: {
                throw new Error("Unknown insertion mode. This is a bug in React.");
              }
            }
          }
          var completeSegmentFunction = "function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)}";
          var completeBoundaryFunction = 'function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}}';
          var clientRenderFunction = 'function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())}';
          var completeSegmentScript1Full = stringToPrecomputedChunk(completeSegmentFunction + ';$RS("');
          var completeSegmentScript1Partial = stringToPrecomputedChunk('$RS("');
          var completeSegmentScript2 = stringToPrecomputedChunk('","');
          var completeSegmentScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedSegmentInstruction(destination, responseState, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteSegmentFunction) {
              responseState.sentCompleteSegmentFunction = true;
              writeChunk(destination, completeSegmentScript1Full);
            } else {
              writeChunk(destination, completeSegmentScript1Partial);
            }
            writeChunk(destination, responseState.segmentPrefix);
            var formattedID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, formattedID);
            writeChunk(destination, completeSegmentScript2);
            writeChunk(destination, responseState.placeholderPrefix);
            writeChunk(destination, formattedID);
            return writeChunkAndReturn(destination, completeSegmentScript3);
          }
          var completeBoundaryScript1Full = stringToPrecomputedChunk(completeBoundaryFunction + ';$RC("');
          var completeBoundaryScript1Partial = stringToPrecomputedChunk('$RC("');
          var completeBoundaryScript2 = stringToPrecomputedChunk('","');
          var completeBoundaryScript3 = stringToPrecomputedChunk('")<\/script>');
          function writeCompletedBoundaryInstruction(destination, responseState, boundaryID, contentSegmentID) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentCompleteBoundaryFunction) {
              responseState.sentCompleteBoundaryFunction = true;
              writeChunk(destination, completeBoundaryScript1Full);
            } else {
              writeChunk(destination, completeBoundaryScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            var formattedContentID = stringToChunk(contentSegmentID.toString(16));
            writeChunk(destination, boundaryID);
            writeChunk(destination, completeBoundaryScript2);
            writeChunk(destination, responseState.segmentPrefix);
            writeChunk(destination, formattedContentID);
            return writeChunkAndReturn(destination, completeBoundaryScript3);
          }
          var clientRenderScript1Full = stringToPrecomputedChunk(clientRenderFunction + ';$RX("');
          var clientRenderScript1Partial = stringToPrecomputedChunk('$RX("');
          var clientRenderScript1A = stringToPrecomputedChunk('"');
          var clientRenderScript2 = stringToPrecomputedChunk(")<\/script>");
          var clientRenderErrorScriptArgInterstitial = stringToPrecomputedChunk(",");
          function writeClientRenderBoundaryInstruction(destination, responseState, boundaryID, errorDigest, errorMessage, errorComponentStack) {
            writeChunk(destination, responseState.startInlineScript);
            if (!responseState.sentClientRenderFunction) {
              responseState.sentClientRenderFunction = true;
              writeChunk(destination, clientRenderScript1Full);
            } else {
              writeChunk(destination, clientRenderScript1Partial);
            }
            if (boundaryID === null) {
              throw new Error("An ID must have been assigned before we can complete the boundary.");
            }
            writeChunk(destination, boundaryID);
            writeChunk(destination, clientRenderScript1A);
            if (errorDigest || errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || "")));
            }
            if (errorMessage || errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || "")));
            }
            if (errorComponentStack) {
              writeChunk(destination, clientRenderErrorScriptArgInterstitial);
              writeChunk(destination, stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack)));
            }
            return writeChunkAndReturn(destination, clientRenderScript2);
          }
          var regexForJSStringsInScripts = /[<\u2028\u2029]/g;
          function escapeJSStringsForInstructionScripts(input6) {
            var escaped = JSON.stringify(input6);
            return escaped.replace(regexForJSStringsInScripts, function(match6) {
              switch (match6) {
                case "<":
                  return "\\u003c";
                case "\u2028":
                  return "\\u2028";
                case "\u2029":
                  return "\\u2029";
                default: {
                  throw new Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
                }
              }
            });
          }
          var assign3 = Object.assign;
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for("react.default_value");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName2 = outerType.displayName;
            if (displayName2) {
              return displayName2;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error5("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider2 = type;
                  return getContextName(provider2._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init5(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error5("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix4;
          function describeBuiltInComponentFrame(name15, source3, ownerFn) {
            {
              if (prefix4 === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match6 = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix4 = match6 && match6[1] || "";
                }
              }
              return "\n" + prefix4 + name15;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s3 = sampleLines.length - 1;
                var c3 = controlLines.length - 1;
                while (s3 >= 1 && c3 >= 0 && sampleLines[s3] !== controlLines[c3]) {
                  c3--;
                }
                for (; s3 >= 1 && c3 >= 0; s3--, c3--) {
                  if (sampleLines[s3] !== controlLines[c3]) {
                    if (s3 !== 1 || c3 !== 1) {
                      do {
                        s3--;
                        c3--;
                        if (c3 < 0 || sampleLines[s3] !== controlLines[c3]) {
                          var _frame = "\n" + sampleLines[s3].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s3 >= 1 && c3 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name15 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name15 ? describeBuiltInComponentFrame(name15) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source3, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source3, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init5 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init5(payload), source3, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element3) {
            {
              if (element3) {
                var owner = element3._owner;
                var stack10 = describeUnknownElementTypeFrameInDEV(element3.type, element3._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack10);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values3, location3, componentName, element3) {
            {
              var has = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values3, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element3);
                    error5("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element3);
                    error5("Failed %s type: %s", location3, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          function getMaskedContext(type, unmaskedContext) {
            {
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name15 = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name15);
              }
              return context;
            }
          }
          function processChildContext(instance, type, parentContext, childContextTypes) {
            {
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error5("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromType(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name15 = getComponentNameFromType(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name15);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var rootContextSnapshot = null;
          var currentActiveSnapshot = null;
          function popNode(prev2) {
            {
              prev2.context._currentValue = prev2.parentValue;
            }
          }
          function pushNode(next2) {
            {
              next2.context._currentValue = next2.value;
            }
          }
          function popToNearestCommonAncestor(prev2, next2) {
            if (prev2 === next2)
              ;
            else {
              popNode(prev2);
              var parentPrev = prev2.parent;
              var parentNext = next2.parent;
              if (parentPrev === null) {
                if (parentNext !== null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
              } else {
                if (parentNext === null) {
                  throw new Error("The stacks must reach the root at the same time. This is a bug in React.");
                }
                popToNearestCommonAncestor(parentPrev, parentNext);
              }
              pushNode(next2);
            }
          }
          function popAllPrevious(prev2) {
            popNode(prev2);
            var parentPrev = prev2.parent;
            if (parentPrev !== null) {
              popAllPrevious(parentPrev);
            }
          }
          function pushAllNext(next2) {
            var parentNext = next2.parent;
            if (parentNext !== null) {
              pushAllNext(parentNext);
            }
            pushNode(next2);
          }
          function popPreviousToCommonLevel(prev2, next2) {
            popNode(prev2);
            var parentPrev = prev2.parent;
            if (parentPrev === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (parentPrev.depth === next2.depth) {
              popToNearestCommonAncestor(parentPrev, next2);
            } else {
              popPreviousToCommonLevel(parentPrev, next2);
            }
          }
          function popNextToCommonLevel(prev2, next2) {
            var parentNext = next2.parent;
            if (parentNext === null) {
              throw new Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
            }
            if (prev2.depth === parentNext.depth) {
              popToNearestCommonAncestor(prev2, parentNext);
            } else {
              popNextToCommonLevel(prev2, parentNext);
            }
            pushNode(next2);
          }
          function switchContext(newSnapshot) {
            var prev2 = currentActiveSnapshot;
            var next2 = newSnapshot;
            if (prev2 !== next2) {
              if (prev2 === null) {
                pushAllNext(next2);
              } else if (next2 === null) {
                popAllPrevious(prev2);
              } else if (prev2.depth === next2.depth) {
                popToNearestCommonAncestor(prev2, next2);
              } else if (prev2.depth > next2.depth) {
                popPreviousToCommonLevel(prev2, next2);
              } else {
                popNextToCommonLevel(prev2, next2);
              }
              currentActiveSnapshot = next2;
            }
          }
          function pushProvider(context, nextValue) {
            var prevValue;
            {
              prevValue = context._currentValue;
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error5("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
            var prevNode = currentActiveSnapshot;
            var newNode = {
              parent: prevNode,
              depth: prevNode === null ? 0 : prevNode.depth + 1,
              context,
              parentValue: prevValue,
              value: nextValue
            };
            currentActiveSnapshot = newNode;
            return newNode;
          }
          function popProvider(context) {
            var prevSnapshot = currentActiveSnapshot;
            if (prevSnapshot === null) {
              throw new Error("Tried to pop a Context at the root of the app. This is a bug in React.");
            }
            {
              if (prevSnapshot.context !== context) {
                error5("The parent context is not the expected context. This is probably a bug in React.");
              }
            }
            {
              var value12 = prevSnapshot.parentValue;
              if (value12 === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED) {
                prevSnapshot.context._currentValue = prevSnapshot.context._defaultValue;
              } else {
                prevSnapshot.context._currentValue = value12;
              }
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error5("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
            return currentActiveSnapshot = prevSnapshot.parent;
          }
          function getActiveContext() {
            return currentActiveSnapshot;
          }
          function readContext(context) {
            var value12 = context._currentValue;
            return value12;
          }
          function get4(key) {
            return key._reactInternals;
          }
          function set3(key, value12) {
            key._reactInternals = value12;
          }
          var didWarnAboutNoopUpdateForComponent = {};
          var didWarnAboutDeprecatedWillMount = {};
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback2, callerName) {
              if (callback2 === null || typeof callback2 === "function") {
                return;
              }
              var key = callerName + "_" + callback2;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error5("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback2);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error5("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
          }
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && getComponentNameFromType(_constructor) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnAboutNoopUpdateForComponent[warningKey]) {
                return;
              }
              error5("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, componentName);
              didWarnAboutNoopUpdateForComponent[warningKey] = true;
            }
          }
          var classComponentUpdater = {
            isMounted: function(inst) {
              return false;
            },
            enqueueSetState: function(inst, payload, callback2) {
              var internals = get4(inst);
              if (internals.queue === null) {
                warnNoop(inst, "setState");
              } else {
                internals.queue.push(payload);
                {
                  if (callback2 !== void 0 && callback2 !== null) {
                    warnOnInvalidCallback(callback2, "setState");
                  }
                }
              }
            },
            enqueueReplaceState: function(inst, payload, callback2) {
              var internals = get4(inst);
              internals.replace = true;
              internals.queue = [payload];
              {
                if (callback2 !== void 0 && callback2 !== null) {
                  warnOnInvalidCallback(callback2, "setState");
                }
              }
            },
            enqueueForceUpdate: function(inst, callback2) {
              var internals = get4(inst);
              if (internals.queue === null) {
                warnNoop(inst, "forceUpdate");
              } else {
                {
                  if (callback2 !== void 0 && callback2 !== null) {
                    warnOnInvalidCallback(callback2, "setState");
                  }
                }
              }
            }
          };
          function applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, prevState, nextProps) {
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var newState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            return newState;
          }
          function constructClassInstance(ctor, props, maskedLegacyContext) {
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error5("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              context = maskedLegacyContext;
            }
            var instance = new ctor(props, context);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && (instance.state === null || instance.state === void 0)) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error5("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error5("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            return instance;
          }
          function checkClassInstance(instance, ctor, newProps) {
            {
              var name15 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error5("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name15);
                } else {
                  error5("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name15);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error5("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name15);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error5("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name15);
              }
              if (instance.propTypes) {
                error5("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name15);
              }
              if (instance.contextType) {
                error5("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name15);
              }
              {
                if (instance.contextTypes) {
                  error5("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name15);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error5("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name15);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error5("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name15);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error5("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error5("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name15);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error5("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name15);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error5("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name15);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error5("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name15);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error5("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name15, name15);
              }
              if (instance.defaultProps) {
                error5("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name15, name15);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error5("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error5("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error5("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name15);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error5("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name15);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error5("%s.state: must be set to an object or null", name15);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error5("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name15);
              }
            }
          }
          function callComponentWillMount(type, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              {
                if (instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDeprecatedWillMount[componentName]) {
                    warn4("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", componentName);
                    didWarnAboutDeprecatedWillMount[componentName] = true;
                  }
                }
              }
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error5("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function processUpdateQueue(internalInstance, inst, props, maskedLegacyContext) {
            if (internalInstance.queue !== null && internalInstance.queue.length > 0) {
              var oldQueue = internalInstance.queue;
              var oldReplace = internalInstance.replace;
              internalInstance.queue = null;
              internalInstance.replace = false;
              if (oldReplace && oldQueue.length === 1) {
                inst.state = oldQueue[0];
              } else {
                var nextState = oldReplace ? oldQueue[0] : inst.state;
                var dontMutate = true;
                for (var i7 = oldReplace ? 1 : 0; i7 < oldQueue.length; i7++) {
                  var partial = oldQueue[i7];
                  var partialState = typeof partial === "function" ? partial.call(inst, nextState, props, maskedLegacyContext) : partial;
                  if (partialState != null) {
                    if (dontMutate) {
                      dontMutate = false;
                      nextState = assign3({}, nextState, partialState);
                    } else {
                      assign3(nextState, partialState);
                    }
                  }
                }
                inst.state = nextState;
              }
            } else {
              internalInstance.queue = null;
            }
          }
          function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
            {
              checkClassInstance(instance, ctor, newProps);
            }
            var initialState = instance.state !== void 0 ? instance.state : null;
            instance.updater = classComponentUpdater;
            instance.props = newProps;
            instance.state = initialState;
            var internalInstance = {
              queue: [],
              replace: false
            };
            set3(instance, internalInstance);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              instance.context = maskedLegacyContext;
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error5("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              instance.state = applyDerivedStateFromProps(instance, ctor, getDerivedStateFromProps, initialState, newProps);
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(ctor, instance);
              processUpdateQueue(internalInstance, instance, newProps, maskedLegacyContext);
            }
          }
          var emptyTreeContext = {
            id: 1,
            overflow: ""
          };
          function getTreeId(context) {
            var overflow = context.overflow;
            var idWithLeadingBit = context.id;
            var id5 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id5.toString(32) + overflow;
          }
          function pushTreeContext(baseContext, totalChildren, index6) {
            var baseIdWithLeadingBit = baseContext.id;
            var baseOverflow = baseContext.overflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot2 = index6 + 1;
            var length10 = getBitLength(totalChildren) + baseLength;
            if (length10 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot2 << restOfBaseLength;
              var id5 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              return {
                id: 1 << restOfLength | id5,
                overflow
              };
            } else {
              var newBits = slot2 << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              return {
                id: 1 << length10 | _id,
                overflow: _overflow
              };
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id5) {
            return 1 << getBitLength(id5) - 1;
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log6 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log6(asUint) / LN2 | 0) | 0;
          }
          function is2(x3, y2) {
            return x3 === y2 && (x3 !== 0 || 1 / x3 === 1 / y2) || x3 !== x3 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          var currentlyRenderingComponent = null;
          var currentlyRenderingTask = null;
          var firstWorkInProgressHook = null;
          var workInProgressHook = null;
          var isReRender = false;
          var didScheduleRenderPhaseUpdate = false;
          var localIdCounter = 0;
          var renderPhaseUpdates = null;
          var numberOfReRenders = 0;
          var RE_RENDER_LIMIT = 25;
          var isInHookUserCodeInDev = false;
          var currentHookNameInDev;
          function resolveCurrentlyRenderingComponent() {
            if (currentlyRenderingComponent === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
            {
              if (isInHookUserCodeInDev) {
                error5("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
              }
            }
            return currentlyRenderingComponent;
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            if (prevDeps === null) {
              {
                error5("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error5("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + nextDeps.join(", ") + "]", "[" + prevDeps.join(", ") + "]");
              }
            }
            for (var i7 = 0; i7 < prevDeps.length && i7 < nextDeps.length; i7++) {
              if (objectIs(nextDeps[i7], prevDeps[i7])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function createHook() {
            if (numberOfReRenders > 0) {
              throw new Error("Rendered more hooks than during the previous render");
            }
            return {
              memoizedState: null,
              queue: null,
              next: null
            };
          }
          function createWorkInProgressHook() {
            if (workInProgressHook === null) {
              if (firstWorkInProgressHook === null) {
                isReRender = false;
                firstWorkInProgressHook = workInProgressHook = createHook();
              } else {
                isReRender = true;
                workInProgressHook = firstWorkInProgressHook;
              }
            } else {
              if (workInProgressHook.next === null) {
                isReRender = false;
                workInProgressHook = workInProgressHook.next = createHook();
              } else {
                isReRender = true;
                workInProgressHook = workInProgressHook.next;
              }
            }
            return workInProgressHook;
          }
          function prepareToUseHooks(task, componentIdentity) {
            currentlyRenderingComponent = componentIdentity;
            currentlyRenderingTask = task;
            {
              isInHookUserCodeInDev = false;
            }
            localIdCounter = 0;
          }
          function finishHooks(Component, props, children2, refOrContext) {
            while (didScheduleRenderPhaseUpdate) {
              didScheduleRenderPhaseUpdate = false;
              localIdCounter = 0;
              numberOfReRenders += 1;
              workInProgressHook = null;
              children2 = Component(props, refOrContext);
            }
            resetHooksState();
            return children2;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            return didRenderIdHook;
          }
          function resetHooksState() {
            {
              isInHookUserCodeInDev = false;
            }
            currentlyRenderingComponent = null;
            currentlyRenderingTask = null;
            didScheduleRenderPhaseUpdate = false;
            firstWorkInProgressHook = null;
            numberOfReRenders = 0;
            renderPhaseUpdates = null;
            workInProgressHook = null;
          }
          function readContext$1(context) {
            {
              if (isInHookUserCodeInDev) {
                error5("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            return readContext(context);
          }
          function useContext19(context) {
            {
              currentHookNameInDev = "useContext";
            }
            resolveCurrentlyRenderingComponent();
            return readContext(context);
          }
          function basicStateReducer(state3, action2) {
            return typeof action2 === "function" ? action2(state3) : action2;
          }
          function useState7(initialState) {
            {
              currentHookNameInDev = "useState";
            }
            return useReducer2(basicStateReducer, initialState);
          }
          function useReducer2(reducer, initialArg, init5) {
            {
              if (reducer !== basicStateReducer) {
                currentHookNameInDev = "useReducer";
              }
            }
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            if (isReRender) {
              var queue = workInProgressHook.queue;
              var dispatch = queue.dispatch;
              if (renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
                if (firstRenderPhaseUpdate !== void 0) {
                  renderPhaseUpdates.delete(queue);
                  var newState = workInProgressHook.memoizedState;
                  var update = firstRenderPhaseUpdate;
                  do {
                    var action2 = update.action;
                    {
                      isInHookUserCodeInDev = true;
                    }
                    newState = reducer(newState, action2);
                    {
                      isInHookUserCodeInDev = false;
                    }
                    update = update.next;
                  } while (update !== null);
                  workInProgressHook.memoizedState = newState;
                  return [newState, dispatch];
                }
              }
              return [workInProgressHook.memoizedState, dispatch];
            } else {
              {
                isInHookUserCodeInDev = true;
              }
              var initialState;
              if (reducer === basicStateReducer) {
                initialState = typeof initialArg === "function" ? initialArg() : initialArg;
              } else {
                initialState = init5 !== void 0 ? init5(initialArg) : initialArg;
              }
              {
                isInHookUserCodeInDev = false;
              }
              workInProgressHook.memoizedState = initialState;
              var _queue = workInProgressHook.queue = {
                last: null,
                dispatch: null
              };
              var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);
              return [workInProgressHook.memoizedState, _dispatch];
            }
          }
          function useMemo8(nextCreate, deps) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            if (workInProgressHook !== null) {
              var prevState = workInProgressHook.memoizedState;
              if (prevState !== null) {
                if (nextDeps !== null) {
                  var prevDeps = prevState[1];
                  if (areHookInputsEqual(nextDeps, prevDeps)) {
                    return prevState[0];
                  }
                }
              }
            }
            {
              isInHookUserCodeInDev = true;
            }
            var nextValue = nextCreate();
            {
              isInHookUserCodeInDev = false;
            }
            workInProgressHook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function useRef10(initialValue) {
            currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
            workInProgressHook = createWorkInProgressHook();
            var previousRef = workInProgressHook.memoizedState;
            if (previousRef === null) {
              var ref = {
                current: initialValue
              };
              {
                Object.seal(ref);
              }
              workInProgressHook.memoizedState = ref;
              return ref;
            } else {
              return previousRef;
            }
          }
          function useLayoutEffect6(create4, inputs) {
            {
              currentHookNameInDev = "useLayoutEffect";
              error5("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
            }
          }
          function dispatchAction(componentIdentity, queue, action2) {
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            if (componentIdentity === currentlyRenderingComponent) {
              didScheduleRenderPhaseUpdate = true;
              var update = {
                action: action2,
                next: null
              };
              if (renderPhaseUpdates === null) {
                renderPhaseUpdates = /* @__PURE__ */ new Map();
              }
              var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);
              if (firstRenderPhaseUpdate === void 0) {
                renderPhaseUpdates.set(queue, update);
              } else {
                var lastRenderPhaseUpdate = firstRenderPhaseUpdate;
                while (lastRenderPhaseUpdate.next !== null) {
                  lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
                }
                lastRenderPhaseUpdate.next = update;
              }
            }
          }
          function useCallback4(callback2, deps) {
            return useMemo8(function() {
              return callback2;
            }, deps);
          }
          function useMutableSource(source3, getSnapshot, subscribe2) {
            resolveCurrentlyRenderingComponent();
            return getSnapshot(source3._source);
          }
          function useSyncExternalStore(subscribe2, getSnapshot, getServerSnapshot) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            return getServerSnapshot();
          }
          function useDeferredValue(value12) {
            resolveCurrentlyRenderingComponent();
            return value12;
          }
          function unsupportedStartTransition() {
            throw new Error("startTransition cannot be called during server rendering.");
          }
          function useTransition() {
            resolveCurrentlyRenderingComponent();
            return [false, unsupportedStartTransition];
          }
          function useId3() {
            var task = currentlyRenderingTask;
            var treeId = getTreeId(task.treeContext);
            var responseState = currentResponseState;
            if (responseState === null) {
              throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
            }
            var localId = localIdCounter++;
            return makeId(responseState, treeId, localId);
          }
          function noop2() {
          }
          var Dispatcher = {
            readContext: readContext$1,
            useContext: useContext19,
            useMemo: useMemo8,
            useReducer: useReducer2,
            useRef: useRef10,
            useState: useState7,
            useInsertionEffect: noop2,
            useLayoutEffect: useLayoutEffect6,
            useCallback: useCallback4,
            useImperativeHandle: noop2,
            useEffect: noop2,
            useDebugValue: noop2,
            useDeferredValue,
            useTransition,
            useId: useId3,
            useMutableSource,
            useSyncExternalStore
          };
          var currentResponseState = null;
          function setCurrentResponseState(responseState) {
            currentResponseState = responseState;
          }
          function getStackByComponentStackNode(componentStack) {
            try {
              var info2 = "";
              var node2 = componentStack;
              do {
                switch (node2.tag) {
                  case 0:
                    info2 += describeBuiltInComponentFrame(node2.type, null, null);
                    break;
                  case 1:
                    info2 += describeFunctionComponentFrame(node2.type, null, null);
                    break;
                  case 2:
                    info2 += describeClassComponentFrame(node2.type, null, null);
                    break;
                }
                node2 = node2.parent;
              } while (node2);
              return info2;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          var PENDING = 0;
          var COMPLETED = 1;
          var FLUSHED = 2;
          var ABORTED = 3;
          var ERRORED = 4;
          var OPEN = 0;
          var CLOSING = 1;
          var CLOSED = 2;
          var DEFAULT_PROGRESSIVE_CHUNK_SIZE = 12800;
          function defaultErrorHandler(error6) {
            console["error"](error6);
            return null;
          }
          function noop$1() {
          }
          function createRequest(children2, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
            var pingedTasks = [];
            var abortSet = /* @__PURE__ */ new Set();
            var request = {
              destination: null,
              responseState,
              progressiveChunkSize: progressiveChunkSize === void 0 ? DEFAULT_PROGRESSIVE_CHUNK_SIZE : progressiveChunkSize,
              status: OPEN,
              fatalError: null,
              nextSegmentId: 0,
              allPendingTasks: 0,
              pendingRootTasks: 0,
              completedRootSegment: null,
              abortableTasks: abortSet,
              pingedTasks,
              clientRenderedBoundaries: [],
              completedBoundaries: [],
              partialBoundaries: [],
              onError: onError === void 0 ? defaultErrorHandler : onError,
              onAllReady: onAllReady === void 0 ? noop$1 : onAllReady,
              onShellReady: onShellReady === void 0 ? noop$1 : onShellReady,
              onShellError: onShellError === void 0 ? noop$1 : onShellError,
              onFatalError: onFatalError === void 0 ? noop$1 : onFatalError
            };
            var rootSegment = createPendingSegment(request, 0, null, rootFormatContext, false, false);
            rootSegment.parentFlushed = true;
            var rootTask = createTask(request, children2, null, rootSegment, abortSet, emptyContextObject, rootContextSnapshot, emptyTreeContext);
            pingedTasks.push(rootTask);
            return request;
          }
          function pingTask(request, task) {
            var pingedTasks = request.pingedTasks;
            pingedTasks.push(task);
            if (pingedTasks.length === 1) {
              scheduleWork(function() {
                return performWork(request);
              });
            }
          }
          function createSuspenseBoundary(request, fallbackAbortableTasks) {
            return {
              id: UNINITIALIZED_SUSPENSE_BOUNDARY_ID,
              rootSegmentID: -1,
              parentFlushed: false,
              pendingTasks: 0,
              forceClientRender: false,
              completedSegments: [],
              byteSize: 0,
              fallbackAbortableTasks,
              errorDigest: null
            };
          }
          function createTask(request, node2, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
            request.allPendingTasks++;
            if (blockedBoundary === null) {
              request.pendingRootTasks++;
            } else {
              blockedBoundary.pendingTasks++;
            }
            var task = {
              node: node2,
              ping: function() {
                return pingTask(request, task);
              },
              blockedBoundary,
              blockedSegment,
              abortSet,
              legacyContext,
              context,
              treeContext
            };
            {
              task.componentStack = null;
            }
            abortSet.add(task);
            return task;
          }
          function createPendingSegment(request, index6, boundary, formatContext, lastPushedText, textEmbedded) {
            return {
              status: PENDING,
              id: -1,
              index: index6,
              parentFlushed: false,
              chunks: [],
              children: [],
              formatContext,
              boundary,
              lastPushedText,
              textEmbedded
            };
          }
          var currentTaskInDEV = null;
          function getCurrentStackInDEV() {
            {
              if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
                return "";
              }
              return getStackByComponentStackNode(currentTaskInDEV.componentStack);
            }
          }
          function pushBuiltInComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 0,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushFunctionComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 1,
                parent: task.componentStack,
                type
              };
            }
          }
          function pushClassComponentStackInDEV(task, type) {
            {
              task.componentStack = {
                tag: 2,
                parent: task.componentStack,
                type
              };
            }
          }
          function popComponentStackInDEV(task) {
            {
              if (task.componentStack === null) {
                error5("Unexpectedly popped too many stack frames. This is a bug in React.");
              } else {
                task.componentStack = task.componentStack.parent;
              }
            }
          }
          var lastBoundaryErrorComponentStackDev = null;
          function captureBoundaryErrorDetailsDev(boundary, error6) {
            {
              var errorMessage;
              if (typeof error6 === "string") {
                errorMessage = error6;
              } else if (error6 && typeof error6.message === "string") {
                errorMessage = error6.message;
              } else {
                errorMessage = String(error6);
              }
              var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
              lastBoundaryErrorComponentStackDev = null;
              boundary.errorMessage = errorMessage;
              boundary.errorComponentStack = errorComponentStack;
            }
          }
          function logRecoverableError(request, error6) {
            var errorDigest = request.onError(error6);
            if (errorDigest != null && typeof errorDigest !== "string") {
              throw new Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof errorDigest + '" instead');
            }
            return errorDigest;
          }
          function fatalError(request, error6) {
            var onShellError = request.onShellError;
            onShellError(error6);
            var onFatalError = request.onFatalError;
            onFatalError(error6);
            if (request.destination !== null) {
              request.status = CLOSED;
              closeWithError(request.destination, error6);
            } else {
              request.status = CLOSING;
              request.fatalError = error6;
            }
          }
          function renderSuspenseBoundary(request, task, props) {
            pushBuiltInComponentStackInDEV(task, "Suspense");
            var parentBoundary = task.blockedBoundary;
            var parentSegment = task.blockedSegment;
            var fallback = props.fallback;
            var content3 = props.children;
            var fallbackAbortSet = /* @__PURE__ */ new Set();
            var newBoundary = createSuspenseBoundary(request, fallbackAbortSet);
            var insertionIndex = parentSegment.chunks.length;
            var boundarySegment = createPendingSegment(request, insertionIndex, newBoundary, parentSegment.formatContext, false, false);
            parentSegment.children.push(boundarySegment);
            parentSegment.lastPushedText = false;
            var contentRootSegment = createPendingSegment(request, 0, null, parentSegment.formatContext, false, false);
            contentRootSegment.parentFlushed = true;
            task.blockedBoundary = newBoundary;
            task.blockedSegment = contentRootSegment;
            try {
              renderNode(request, task, content3);
              pushSegmentFinale(contentRootSegment.chunks, request.responseState, contentRootSegment.lastPushedText, contentRootSegment.textEmbedded);
              contentRootSegment.status = COMPLETED;
              queueCompletedSegment(newBoundary, contentRootSegment);
              if (newBoundary.pendingTasks === 0) {
                popComponentStackInDEV(task);
                return;
              }
            } catch (error6) {
              contentRootSegment.status = ERRORED;
              newBoundary.forceClientRender = true;
              newBoundary.errorDigest = logRecoverableError(request, error6);
              {
                captureBoundaryErrorDetailsDev(newBoundary, error6);
              }
            } finally {
              task.blockedBoundary = parentBoundary;
              task.blockedSegment = parentSegment;
            }
            var suspendedFallbackTask = createTask(request, fallback, parentBoundary, boundarySegment, fallbackAbortSet, task.legacyContext, task.context, task.treeContext);
            {
              suspendedFallbackTask.componentStack = task.componentStack;
            }
            request.pingedTasks.push(suspendedFallbackTask);
            popComponentStackInDEV(task);
          }
          function renderHostElement(request, task, type, props) {
            pushBuiltInComponentStackInDEV(task, type);
            var segment = task.blockedSegment;
            var children2 = pushStartInstance(segment.chunks, type, props, request.responseState, segment.formatContext);
            segment.lastPushedText = false;
            var prevContext = segment.formatContext;
            segment.formatContext = getChildFormatContext(prevContext, type, props);
            renderNode(request, task, children2);
            segment.formatContext = prevContext;
            pushEndInstance(segment.chunks, type);
            segment.lastPushedText = false;
            popComponentStackInDEV(task);
          }
          function shouldConstruct$1(Component) {
            return Component.prototype && Component.prototype.isReactComponent;
          }
          function renderWithHooks(request, task, Component, props, secondArg) {
            var componentIdentity = {};
            prepareToUseHooks(task, componentIdentity);
            var result = Component(props, secondArg);
            return finishHooks(Component, props, result, secondArg);
          }
          function finishClassComponent(request, task, instance, Component, props) {
            var nextChildren = instance.render();
            {
              if (instance.props !== props) {
                if (!didWarnAboutReassigningProps) {
                  error5("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            {
              var childContextTypes = Component.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                var previousContext = task.legacyContext;
                var mergedContext = processChildContext(instance, Component, previousContext, childContextTypes);
                task.legacyContext = mergedContext;
                renderNodeDestructive(request, task, nextChildren);
                task.legacyContext = previousContext;
                return;
              }
            }
            renderNodeDestructive(request, task, nextChildren);
          }
          function renderClassComponent(request, task, Component, props) {
            pushClassComponentStackInDEV(task, Component);
            var maskedContext = getMaskedContext(Component, task.legacyContext);
            var instance = constructClassInstance(Component, props, maskedContext);
            mountClassInstance(instance, Component, props, maskedContext);
            finishClassComponent(request, task, instance, Component, props);
            popComponentStackInDEV(task);
          }
          var didWarnAboutBadClass = {};
          var didWarnAboutModulePatternComponent = {};
          var didWarnAboutContextTypeOnFunctionComponent = {};
          var didWarnAboutGetDerivedStateOnFunctionComponent = {};
          var didWarnAboutReassigningProps = false;
          var didWarnAboutGenerators = false;
          var didWarnAboutMaps = false;
          var hasWarnedAboutUsingContextAsConsumer = false;
          function renderIndeterminateComponent(request, task, Component, props) {
            var legacyContext;
            {
              legacyContext = getMaskedContext(Component, task.legacyContext);
            }
            pushFunctionComponentStackInDEV(task, Component);
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error5("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
            }
            var value12 = renderWithHooks(request, task, Component, props, legacyContext);
            var hasId = checkDidRenderIdHook();
            {
              if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value12 === "object" && value12 !== null && typeof value12.render === "function" && value12.$$typeof === void 0) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error5("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              mountClassInstance(value12, Component, props, legacyContext);
              finishClassComponent(request, task, value12, Component, props);
            } else {
              {
                validateFunctionComponentInDev(Component);
              }
              if (hasId) {
                var prevTreeContext = task.treeContext;
                var totalChildren = 1;
                var index6 = 0;
                task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
                try {
                  renderNodeDestructive(request, task, value12);
                } finally {
                  task.treeContext = prevTreeContext;
                }
              } else {
                renderNodeDestructive(request, task, value12);
              }
            }
            popComponentStackInDEV(task);
          }
          function validateFunctionComponentInDev(Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error5("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error5("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error5("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          function renderForwardRef(request, task, type, props, ref) {
            pushFunctionComponentStackInDEV(task, type.render);
            var children2 = renderWithHooks(request, task, type.render, props, ref);
            var hasId = checkDidRenderIdHook();
            if (hasId) {
              var prevTreeContext = task.treeContext;
              var totalChildren = 1;
              var index6 = 0;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, index6);
              try {
                renderNodeDestructive(request, task, children2);
              } finally {
                task.treeContext = prevTreeContext;
              }
            } else {
              renderNodeDestructive(request, task, children2);
            }
            popComponentStackInDEV(task);
          }
          function renderMemo(request, task, type, props, ref) {
            var innerType = type.type;
            var resolvedProps = resolveDefaultProps(innerType, props);
            renderElement(request, task, innerType, resolvedProps, ref);
          }
          function renderContextConsumer(request, task, context, props) {
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error5("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var render = props.children;
            {
              if (typeof render !== "function") {
                error5("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            var newValue = readContext(context);
            var newChildren = render(newValue);
            renderNodeDestructive(request, task, newChildren);
          }
          function renderContextProvider(request, task, type, props) {
            var context = type._context;
            var value12 = props.value;
            var children2 = props.children;
            var prevSnapshot;
            {
              prevSnapshot = task.context;
            }
            task.context = pushProvider(context, value12);
            renderNodeDestructive(request, task, children2);
            task.context = popProvider(context);
            {
              if (prevSnapshot !== task.context) {
                error5("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
              }
            }
          }
          function renderLazyComponent(request, task, lazyComponent, props, ref) {
            pushBuiltInComponentStackInDEV(task, "Lazy");
            var payload = lazyComponent._payload;
            var init5 = lazyComponent._init;
            var Component = init5(payload);
            var resolvedProps = resolveDefaultProps(Component, props);
            renderElement(request, task, Component, resolvedProps, ref);
            popComponentStackInDEV(task);
          }
          function renderElement(request, task, type, props, ref) {
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                renderClassComponent(request, task, type, props);
                return;
              } else {
                renderIndeterminateComponent(request, task, type, props);
                return;
              }
            }
            if (typeof type === "string") {
              renderHostElement(request, task, type, props);
              return;
            }
            switch (type) {
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_FRAGMENT_TYPE: {
                renderNodeDestructive(request, task, props.children);
                return;
              }
              case REACT_SUSPENSE_LIST_TYPE: {
                pushBuiltInComponentStackInDEV(task, "SuspenseList");
                renderNodeDestructive(request, task, props.children);
                popComponentStackInDEV(task);
                return;
              }
              case REACT_SCOPE_TYPE: {
                throw new Error("ReactDOMServer does not yet support scope components.");
              }
              case REACT_SUSPENSE_TYPE: {
                {
                  renderSuspenseBoundary(request, task, props);
                }
                return;
              }
            }
            if (typeof type === "object" && type !== null) {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE: {
                  renderForwardRef(request, task, type, props, ref);
                  return;
                }
                case REACT_MEMO_TYPE: {
                  renderMemo(request, task, type, props, ref);
                  return;
                }
                case REACT_PROVIDER_TYPE: {
                  renderContextProvider(request, task, type, props);
                  return;
                }
                case REACT_CONTEXT_TYPE: {
                  renderContextConsumer(request, task, type, props);
                  return;
                }
                case REACT_LAZY_TYPE: {
                  renderLazyComponent(request, task, type, props);
                  return;
                }
              }
            }
            var info2 = "";
            {
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info2 += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info2));
          }
          function validateIterable(iterable, iteratorFn) {
            {
              if (typeof Symbol === "function" && iterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error5("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (iterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error5("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
          }
          function renderNodeDestructive(request, task, node2) {
            {
              try {
                return renderNodeDestructiveImpl(request, task, node2);
              } catch (x3) {
                if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function")
                  ;
                else {
                  lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
                }
                throw x3;
              }
            }
          }
          function renderNodeDestructiveImpl(request, task, node2) {
            task.node = node2;
            if (typeof node2 === "object" && node2 !== null) {
              switch (node2.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var element3 = node2;
                  var type = element3.type;
                  var props = element3.props;
                  var ref = element3.ref;
                  renderElement(request, task, type, props, ref);
                  return;
                }
                case REACT_PORTAL_TYPE:
                  throw new Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
                case REACT_LAZY_TYPE: {
                  var lazyNode = node2;
                  var payload = lazyNode._payload;
                  var init5 = lazyNode._init;
                  var resolvedNode;
                  {
                    try {
                      resolvedNode = init5(payload);
                    } catch (x3) {
                      if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                        pushBuiltInComponentStackInDEV(task, "Lazy");
                      }
                      throw x3;
                    }
                  }
                  renderNodeDestructive(request, task, resolvedNode);
                  return;
                }
              }
              if (isArray2(node2)) {
                renderChildrenArray(request, task, node2);
                return;
              }
              var iteratorFn = getIteratorFn(node2);
              if (iteratorFn) {
                {
                  validateIterable(node2, iteratorFn);
                }
                var iterator2 = iteratorFn.call(node2);
                if (iterator2) {
                  var step3 = iterator2.next();
                  if (!step3.done) {
                    var children2 = [];
                    do {
                      children2.push(step3.value);
                      step3 = iterator2.next();
                    } while (!step3.done);
                    renderChildrenArray(request, task, children2);
                    return;
                  }
                  return;
                }
              }
              var childString = Object.prototype.toString.call(node2);
              throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node2).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
            }
            if (typeof node2 === "string") {
              var segment = task.blockedSegment;
              segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, node2, request.responseState, segment.lastPushedText);
              return;
            }
            if (typeof node2 === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance(task.blockedSegment.chunks, "" + node2, request.responseState, _segment.lastPushedText);
              return;
            }
            {
              if (typeof node2 === "function") {
                error5("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
              }
            }
          }
          function renderChildrenArray(request, task, children2) {
            var totalChildren = children2.length;
            for (var i7 = 0; i7 < totalChildren; i7++) {
              var prevTreeContext = task.treeContext;
              task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i7);
              try {
                renderNode(request, task, children2[i7]);
              } finally {
                task.treeContext = prevTreeContext;
              }
            }
          }
          function spawnNewSuspendedTask(request, task, x3) {
            var segment = task.blockedSegment;
            var insertionIndex = segment.chunks.length;
            var newSegment = createPendingSegment(request, insertionIndex, null, segment.formatContext, segment.lastPushedText, true);
            segment.children.push(newSegment);
            segment.lastPushedText = false;
            var newTask = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
            {
              if (task.componentStack !== null) {
                newTask.componentStack = task.componentStack.parent;
              }
            }
            var ping = newTask.ping;
            x3.then(ping, ping);
          }
          function renderNode(request, task, node2) {
            var previousFormatContext = task.blockedSegment.formatContext;
            var previousLegacyContext = task.legacyContext;
            var previousContext = task.context;
            var previousComponentStack = null;
            {
              previousComponentStack = task.componentStack;
            }
            try {
              return renderNodeDestructive(request, task, node2);
            } catch (x3) {
              resetHooksState();
              if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                spawnNewSuspendedTask(request, task, x3);
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                return;
              } else {
                task.blockedSegment.formatContext = previousFormatContext;
                task.legacyContext = previousLegacyContext;
                task.context = previousContext;
                switchContext(previousContext);
                {
                  task.componentStack = previousComponentStack;
                }
                throw x3;
              }
            }
          }
          function erroredTask(request, boundary, segment, error6) {
            var errorDigest = logRecoverableError(request, error6);
            if (boundary === null) {
              fatalError(request, error6);
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                boundary.errorDigest = errorDigest;
                {
                  captureBoundaryErrorDetailsDev(boundary, error6);
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function abortTaskSoft(task) {
            var request = this;
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            finishedTask(request, boundary, segment);
          }
          function abortTask(task, request, reason) {
            var boundary = task.blockedBoundary;
            var segment = task.blockedSegment;
            segment.status = ABORTED;
            if (boundary === null) {
              request.allPendingTasks--;
              if (request.status !== CLOSED) {
                request.status = CLOSED;
                if (request.destination !== null) {
                  close(request.destination);
                }
              }
            } else {
              boundary.pendingTasks--;
              if (!boundary.forceClientRender) {
                boundary.forceClientRender = true;
                var _error = reason === void 0 ? new Error("The render was aborted by the server without a reason.") : reason;
                boundary.errorDigest = request.onError(_error);
                {
                  var errorPrefix = "The server did not finish this Suspense boundary: ";
                  if (_error && typeof _error.message === "string") {
                    _error = errorPrefix + _error.message;
                  } else {
                    _error = errorPrefix + String(_error);
                  }
                  var previousTaskInDev = currentTaskInDEV;
                  currentTaskInDEV = task;
                  try {
                    captureBoundaryErrorDetailsDev(boundary, _error);
                  } finally {
                    currentTaskInDEV = previousTaskInDev;
                  }
                }
                if (boundary.parentFlushed) {
                  request.clientRenderedBoundaries.push(boundary);
                }
              }
              boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
                return abortTask(fallbackTask, request, reason);
              });
              boundary.fallbackAbortableTasks.clear();
              request.allPendingTasks--;
              if (request.allPendingTasks === 0) {
                var onAllReady = request.onAllReady;
                onAllReady();
              }
            }
          }
          function queueCompletedSegment(boundary, segment) {
            if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
              var childSegment = segment.children[0];
              childSegment.id = segment.id;
              childSegment.parentFlushed = true;
              if (childSegment.status === COMPLETED) {
                queueCompletedSegment(boundary, childSegment);
              }
            } else {
              var completedSegments = boundary.completedSegments;
              completedSegments.push(segment);
            }
          }
          function finishedTask(request, boundary, segment) {
            if (boundary === null) {
              if (segment.parentFlushed) {
                if (request.completedRootSegment !== null) {
                  throw new Error("There can only be one root segment. This is a bug in React.");
                }
                request.completedRootSegment = segment;
              }
              request.pendingRootTasks--;
              if (request.pendingRootTasks === 0) {
                request.onShellError = noop$1;
                var onShellReady = request.onShellReady;
                onShellReady();
              }
            } else {
              boundary.pendingTasks--;
              if (boundary.forceClientRender)
                ;
              else if (boundary.pendingTasks === 0) {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                  }
                }
                if (boundary.parentFlushed) {
                  request.completedBoundaries.push(boundary);
                }
                boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request);
                boundary.fallbackAbortableTasks.clear();
              } else {
                if (segment.parentFlushed) {
                  if (segment.status === COMPLETED) {
                    queueCompletedSegment(boundary, segment);
                    var completedSegments = boundary.completedSegments;
                    if (completedSegments.length === 1) {
                      if (boundary.parentFlushed) {
                        request.partialBoundaries.push(boundary);
                      }
                    }
                  }
                }
              }
            }
            request.allPendingTasks--;
            if (request.allPendingTasks === 0) {
              var onAllReady = request.onAllReady;
              onAllReady();
            }
          }
          function retryTask(request, task) {
            var segment = task.blockedSegment;
            if (segment.status !== PENDING) {
              return;
            }
            switchContext(task.context);
            var prevTaskInDEV = null;
            {
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
            }
            try {
              renderNodeDestructive(request, task, task.node);
              pushSegmentFinale(segment.chunks, request.responseState, segment.lastPushedText, segment.textEmbedded);
              task.abortSet.delete(task);
              segment.status = COMPLETED;
              finishedTask(request, task.blockedBoundary, segment);
            } catch (x3) {
              resetHooksState();
              if (typeof x3 === "object" && x3 !== null && typeof x3.then === "function") {
                var ping = task.ping;
                x3.then(ping, ping);
              } else {
                task.abortSet.delete(task);
                segment.status = ERRORED;
                erroredTask(request, task.blockedBoundary, segment, x3);
              }
            } finally {
              {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          function performWork(request) {
            if (request.status === CLOSED) {
              return;
            }
            var prevContext = getActiveContext();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = Dispatcher;
            var prevGetCurrentStackImpl;
            {
              prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
              ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
            }
            var prevResponseState = currentResponseState;
            setCurrentResponseState(request.responseState);
            try {
              var pingedTasks = request.pingedTasks;
              var i7;
              for (i7 = 0; i7 < pingedTasks.length; i7++) {
                var task = pingedTasks[i7];
                retryTask(request, task);
              }
              pingedTasks.splice(0, i7);
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            } finally {
              setCurrentResponseState(prevResponseState);
              ReactCurrentDispatcher$1.current = prevDispatcher;
              {
                ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;
              }
              if (prevDispatcher === Dispatcher) {
                switchContext(prevContext);
              }
            }
          }
          function flushSubtree(request, destination, segment) {
            segment.parentFlushed = true;
            switch (segment.status) {
              case PENDING: {
                var segmentID = segment.id = request.nextSegmentId++;
                segment.lastPushedText = false;
                segment.textEmbedded = false;
                return writePlaceholder(destination, request.responseState, segmentID);
              }
              case COMPLETED: {
                segment.status = FLUSHED;
                var r2 = true;
                var chunks = segment.chunks;
                var chunkIdx = 0;
                var children2 = segment.children;
                for (var childIdx = 0; childIdx < children2.length; childIdx++) {
                  var nextChild = children2[childIdx];
                  for (; chunkIdx < nextChild.index; chunkIdx++) {
                    writeChunk(destination, chunks[chunkIdx]);
                  }
                  r2 = flushSegment(request, destination, nextChild);
                }
                for (; chunkIdx < chunks.length - 1; chunkIdx++) {
                  writeChunk(destination, chunks[chunkIdx]);
                }
                if (chunkIdx < chunks.length) {
                  r2 = writeChunkAndReturn(destination, chunks[chunkIdx]);
                }
                return r2;
              }
              default: {
                throw new Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
              }
            }
          }
          function flushSegment(request, destination, segment) {
            var boundary = segment.boundary;
            if (boundary === null) {
              return flushSubtree(request, destination, segment);
            }
            boundary.parentFlushed = true;
            if (boundary.forceClientRender) {
              writeStartClientRenderedSuspenseBoundary(destination, request.responseState, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
              flushSubtree(request, destination, segment);
              return writeEndClientRenderedSuspenseBoundary(destination, request.responseState);
            } else if (boundary.pendingTasks > 0) {
              boundary.rootSegmentID = request.nextSegmentId++;
              if (boundary.completedSegments.length > 0) {
                request.partialBoundaries.push(boundary);
              }
              var id5 = boundary.id = assignSuspenseBoundaryID(request.responseState);
              writeStartPendingSuspenseBoundary(destination, request.responseState, id5);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else if (boundary.byteSize > request.progressiveChunkSize) {
              boundary.rootSegmentID = request.nextSegmentId++;
              request.completedBoundaries.push(boundary);
              writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id);
              flushSubtree(request, destination, segment);
              return writeEndPendingSuspenseBoundary(destination, request.responseState);
            } else {
              writeStartCompletedSuspenseBoundary(destination, request.responseState);
              var completedSegments = boundary.completedSegments;
              if (completedSegments.length !== 1) {
                throw new Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
              }
              var contentSegment = completedSegments[0];
              flushSegment(request, destination, contentSegment);
              return writeEndCompletedSuspenseBoundary(destination, request.responseState);
            }
          }
          function flushClientRenderedBoundary(request, destination, boundary) {
            return writeClientRenderBoundaryInstruction(destination, request.responseState, boundary.id, boundary.errorDigest, boundary.errorMessage, boundary.errorComponentStack);
          }
          function flushSegmentContainer(request, destination, segment) {
            writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
            flushSegment(request, destination, segment);
            return writeEndSegment(destination, segment.formatContext);
          }
          function flushCompletedBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i7 = 0;
            for (; i7 < completedSegments.length; i7++) {
              var segment = completedSegments[i7];
              flushPartiallyCompletedSegment(request, destination, boundary, segment);
            }
            completedSegments.length = 0;
            return writeCompletedBoundaryInstruction(destination, request.responseState, boundary.id, boundary.rootSegmentID);
          }
          function flushPartialBoundary(request, destination, boundary) {
            var completedSegments = boundary.completedSegments;
            var i7 = 0;
            for (; i7 < completedSegments.length; i7++) {
              var segment = completedSegments[i7];
              if (!flushPartiallyCompletedSegment(request, destination, boundary, segment)) {
                i7++;
                completedSegments.splice(0, i7);
                return false;
              }
            }
            completedSegments.splice(0, i7);
            return true;
          }
          function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
            if (segment.status === FLUSHED) {
              return true;
            }
            var segmentID = segment.id;
            if (segmentID === -1) {
              var rootSegmentID = segment.id = boundary.rootSegmentID;
              if (rootSegmentID === -1) {
                throw new Error("A root segment ID must have been assigned by now. This is a bug in React.");
              }
              return flushSegmentContainer(request, destination, segment);
            } else {
              flushSegmentContainer(request, destination, segment);
              return writeCompletedSegmentInstruction(destination, request.responseState, segmentID);
            }
          }
          function flushCompletedQueues(request, destination) {
            beginWriting();
            try {
              var completedRootSegment = request.completedRootSegment;
              if (completedRootSegment !== null && request.pendingRootTasks === 0) {
                flushSegment(request, destination, completedRootSegment);
                request.completedRootSegment = null;
                writeCompletedRoot(destination, request.responseState);
              }
              var clientRenderedBoundaries = request.clientRenderedBoundaries;
              var i7;
              for (i7 = 0; i7 < clientRenderedBoundaries.length; i7++) {
                var boundary = clientRenderedBoundaries[i7];
                if (!flushClientRenderedBoundary(request, destination, boundary)) {
                  request.destination = null;
                  i7++;
                  clientRenderedBoundaries.splice(0, i7);
                  return;
                }
              }
              clientRenderedBoundaries.splice(0, i7);
              var completedBoundaries = request.completedBoundaries;
              for (i7 = 0; i7 < completedBoundaries.length; i7++) {
                var _boundary = completedBoundaries[i7];
                if (!flushCompletedBoundary(request, destination, _boundary)) {
                  request.destination = null;
                  i7++;
                  completedBoundaries.splice(0, i7);
                  return;
                }
              }
              completedBoundaries.splice(0, i7);
              completeWriting(destination);
              beginWriting(destination);
              var partialBoundaries = request.partialBoundaries;
              for (i7 = 0; i7 < partialBoundaries.length; i7++) {
                var _boundary2 = partialBoundaries[i7];
                if (!flushPartialBoundary(request, destination, _boundary2)) {
                  request.destination = null;
                  i7++;
                  partialBoundaries.splice(0, i7);
                  return;
                }
              }
              partialBoundaries.splice(0, i7);
              var largeBoundaries = request.completedBoundaries;
              for (i7 = 0; i7 < largeBoundaries.length; i7++) {
                var _boundary3 = largeBoundaries[i7];
                if (!flushCompletedBoundary(request, destination, _boundary3)) {
                  request.destination = null;
                  i7++;
                  largeBoundaries.splice(0, i7);
                  return;
                }
              }
              largeBoundaries.splice(0, i7);
            } finally {
              completeWriting(destination);
              if (request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0) {
                {
                  if (request.abortableTasks.size !== 0) {
                    error5("There was still abortable task at the root when we closed. This is a bug in React.");
                  }
                }
                close(destination);
              }
            }
          }
          function startWork(request) {
            scheduleWork(function() {
              return performWork(request);
            });
          }
          function startFlowing(request, destination) {
            if (request.status === CLOSING) {
              request.status = CLOSED;
              closeWithError(destination, request.fatalError);
              return;
            }
            if (request.status === CLOSED) {
              return;
            }
            if (request.destination !== null) {
              return;
            }
            request.destination = destination;
            try {
              flushCompletedQueues(request, destination);
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            }
          }
          function abort(request, reason) {
            try {
              var abortableTasks = request.abortableTasks;
              abortableTasks.forEach(function(task) {
                return abortTask(task, request, reason);
              });
              abortableTasks.clear();
              if (request.destination !== null) {
                flushCompletedQueues(request, request.destination);
              }
            } catch (error6) {
              logRecoverableError(request, error6);
              fatalError(request, error6);
            }
          }
          function renderToReadableStream(children2, options3) {
            return new Promise(function(resolve, reject) {
              var onFatalError;
              var onAllReady;
              var allReady = new Promise(function(res, rej) {
                onAllReady = res;
                onFatalError = rej;
              });
              function onShellReady() {
                var stream2 = new ReadableStream({
                  type: "bytes",
                  pull: function(controller) {
                    startFlowing(request, controller);
                  },
                  cancel: function(reason) {
                    abort(request);
                  }
                }, {
                  highWaterMark: 0
                });
                stream2.allReady = allReady;
                resolve(stream2);
              }
              function onShellError(error6) {
                allReady.catch(function() {
                });
                reject(error6);
              }
              var request = createRequest(children2, createResponseState(options3 ? options3.identifierPrefix : void 0, options3 ? options3.nonce : void 0, options3 ? options3.bootstrapScriptContent : void 0, options3 ? options3.bootstrapScripts : void 0, options3 ? options3.bootstrapModules : void 0), createRootFormatContext(options3 ? options3.namespaceURI : void 0), options3 ? options3.progressiveChunkSize : void 0, options3 ? options3.onError : void 0, onAllReady, onShellReady, onShellError, onFatalError);
              if (options3 && options3.signal) {
                var signal = options3.signal;
                var listener = function() {
                  abort(request, signal.reason);
                  signal.removeEventListener("abort", listener);
                };
                signal.addEventListener("abort", listener);
              }
              startWork(request);
            });
          }
          exports.renderToReadableStream = renderToReadableStream;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/server.browser.js
  var require_server_browser = __commonJS({
    "node_modules/react-dom/server.browser.js"(exports) {
      "use strict";
      var l2;
      var s3;
      if (false) {
        l2 = null;
        s3 = null;
      } else {
        l2 = require_react_dom_server_legacy_browser_development();
        s3 = require_react_dom_server_browser_development();
      }
      exports.version = l2.version;
      exports.renderToString = l2.renderToString;
      exports.renderToStaticMarkup = l2.renderToStaticMarkup;
      exports.renderToNodeStream = l2.renderToNodeStream;
      exports.renderToStaticNodeStream = l2.renderToStaticNodeStream;
      exports.renderToReadableStream = s3.renderToReadableStream;
    }
  });

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __spreadArray2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __classPrivateFieldIn2;
      var __createBinding2;
      (function(factory) {
        var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root2, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root2, createExporter(module.exports)));
        } else {
          factory(createExporter(root2));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root2) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id5, v2) {
            return exports2[id5] = previous ? previous(id5, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b4) {
          d2.__proto__ = b4;
        } || function(d2, b4) {
          for (var p3 in b4)
            if (Object.prototype.hasOwnProperty.call(b4, p3))
              d2[p3] = b4[p3];
        };
        __extends2 = function(d2, b4) {
          if (typeof b4 !== "function" && b4 !== null)
            throw new TypeError("Class extends value " + String(b4) + " is not a constructor or null");
          extendStatics(d2, b4);
          function __() {
            this.constructor = d2;
          }
          d2.prototype = b4 === null ? Object.create(b4) : (__.prototype = b4.prototype, new __());
        };
        __assign2 = Object.assign || function(t) {
          for (var s3, i7 = 1, n2 = arguments.length; i7 < n2; i7++) {
            s3 = arguments[i7];
            for (var p3 in s3)
              if (Object.prototype.hasOwnProperty.call(s3, p3))
                t[p3] = s3[p3];
          }
          return t;
        };
        __rest2 = function(s3, e) {
          var t = {};
          for (var p3 in s3)
            if (Object.prototype.hasOwnProperty.call(s3, p3) && e.indexOf(p3) < 0)
              t[p3] = s3[p3];
          if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i7 = 0, p3 = Object.getOwnPropertySymbols(s3); i7 < p3.length; i7++) {
              if (e.indexOf(p3[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i7]))
                t[p3[i7]] = s3[p3[i7]];
            }
          return t;
        };
        __decorate2 = function(decorators, target6, key, desc) {
          var c3 = arguments.length, r2 = c3 < 3 ? target6 : desc === null ? desc = Object.getOwnPropertyDescriptor(target6, key) : desc, d2;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r2 = Reflect.decorate(decorators, target6, key, desc);
          else
            for (var i7 = decorators.length - 1; i7 >= 0; i7--)
              if (d2 = decorators[i7])
                r2 = (c3 < 3 ? d2(r2) : c3 > 3 ? d2(target6, key, r2) : d2(target6, key)) || r2;
          return c3 > 3 && r2 && Object.defineProperty(target6, key, r2), r2;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target6, key) {
            decorator(target6, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P2, generator) {
          function adopt(value12) {
            return value12 instanceof P2 ? value12 : new P2(function(resolve) {
              resolve(value12);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value12) {
              try {
                step3(generator.next(value12));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value12) {
              try {
                step3(generator["throw"](value12));
              } catch (e) {
                reject(e);
              }
            }
            function step3(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step3((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body2) {
          var _2 = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f2, y2, t, g3;
          return g3 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g3[Symbol.iterator] = function() {
            return this;
          }), g3;
          function verb(n2) {
            return function(v2) {
              return step3([n2, v2]);
            };
          }
          function step3(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_2)
              try {
                if (f2 = 1, y2 && (t = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t = y2["return"]) && t.call(y2), 0) : y2.next) && !(t = t.call(y2, op[1])).done)
                  return t;
                if (y2 = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _2.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _2.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _2.ops.pop();
                    _2.trys.pop();
                    continue;
                  default:
                    if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _2 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _2.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _2.label < t[1]) {
                      _2.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _2.label < t[2]) {
                      _2.label = t[2];
                      _2.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _2.ops.pop();
                    _2.trys.pop();
                    continue;
                }
                op = body2.call(thisArg, _2);
              } catch (e) {
                op = [6, e];
                y2 = 0;
              } finally {
                f2 = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __exportStar2 = function(m2, o2) {
          for (var p3 in m2)
            if (p3 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p3))
              __createBinding2(o2, m2, p3);
        };
        __createBinding2 = Object.create ? function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          var desc = Object.getOwnPropertyDescriptor(m2, k2);
          if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function() {
              return m2[k2];
            } };
          }
          Object.defineProperty(o2, k22, desc);
        } : function(o2, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o2[k22] = m2[k2];
        };
        __values2 = function(o2) {
          var s3 = typeof Symbol === "function" && Symbol.iterator, m2 = s3 && o2[s3], i7 = 0;
          if (m2)
            return m2.call(o2);
          if (o2 && typeof o2.length === "number")
            return {
              next: function() {
                if (o2 && i7 >= o2.length)
                  o2 = void 0;
                return { value: o2 && o2[i7++], done: !o2 };
              }
            };
          throw new TypeError(s3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o2, n2) {
          var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
          if (!m2)
            return o2;
          var i7 = m2.call(o2), r2, ar = [], e;
          try {
            while ((n2 === void 0 || n2-- > 0) && !(r2 = i7.next()).done)
              ar.push(r2.value);
          } catch (error5) {
            e = { error: error5 };
          } finally {
            try {
              if (r2 && !r2.done && (m2 = i7["return"]))
                m2.call(i7);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
            ar = ar.concat(__read2(arguments[i7]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s3 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
            s3 += arguments[i7].length;
          for (var r2 = Array(s3), k2 = 0, i7 = 0; i7 < il; i7++)
            for (var a4 = arguments[i7], j2 = 0, jl = a4.length; j2 < jl; j2++, k2++)
              r2[k2] = a4[j2];
          return r2;
        };
        __spreadArray2 = function(to2, from4, pack) {
          if (pack || arguments.length === 2)
            for (var i7 = 0, l2 = from4.length, ar; i7 < l2; i7++) {
              if (ar || !(i7 in from4)) {
                if (!ar)
                  ar = Array.prototype.slice.call(from4, 0, i7);
                ar[i7] = from4[i7];
              }
            }
          return to2.concat(ar || Array.prototype.slice.call(from4));
        };
        __await2 = function(v2) {
          return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g3 = generator.apply(thisArg, _arguments || []), i7, q3 = [];
          return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
            return this;
          }, i7;
          function verb(n2) {
            if (g3[n2])
              i7[n2] = function(v2) {
                return new Promise(function(a4, b4) {
                  q3.push([n2, v2, a4, b4]) > 1 || resume2(n2, v2);
                });
              };
          }
          function resume2(n2, v2) {
            try {
              step3(g3[n2](v2));
            } catch (e) {
              settle(q3[0][3], e);
            }
          }
          function step3(r2) {
            r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q3[0][2], r2);
          }
          function fulfill(value12) {
            resume2("next", value12);
          }
          function reject(value12) {
            resume2("throw", value12);
          }
          function settle(f2, v2) {
            if (f2(v2), q3.shift(), q3.length)
              resume2(q3[0][0], q3[0][1]);
          }
        };
        __asyncDelegator2 = function(o2) {
          var i7, p3;
          return i7 = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i7[Symbol.iterator] = function() {
            return this;
          }, i7;
          function verb(n2, f2) {
            i7[n2] = o2[n2] ? function(v2) {
              return (p3 = !p3) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues2 = function(o2) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o2[Symbol.asyncIterator], i7;
          return m2 ? m2.call(o2) : (o2 = typeof __values2 === "function" ? __values2(o2) : o2[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
            return this;
          }, i7);
          function verb(n2) {
            i7[n2] = o2[n2] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d2, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d2 });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        var __setModuleDefault = Object.create ? function(o2, v2) {
          Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
        } : function(o2, v2) {
          o2["default"] = v2;
        };
        __importStar2 = function(mod5) {
          if (mod5 && mod5.__esModule)
            return mod5;
          var result = {};
          if (mod5 != null) {
            for (var k2 in mod5)
              if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod5, k2))
                __createBinding2(result, mod5, k2);
          }
          __setModuleDefault(result, mod5);
          return result;
        };
        __importDefault2 = function(mod5) {
          return mod5 && mod5.__esModule ? mod5 : { "default": mod5 };
        };
        __classPrivateFieldGet2 = function(receiver, state3, kind2, f2) {
          if (kind2 === "a" && !f2)
            throw new TypeError("Private accessor was defined without a getter");
          if (typeof state3 === "function" ? receiver !== state3 || !f2 : !state3.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
          return kind2 === "m" ? f2 : kind2 === "a" ? f2.call(receiver) : f2 ? f2.value : state3.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, state3, value12, kind2, f2) {
          if (kind2 === "m")
            throw new TypeError("Private method is not writable");
          if (kind2 === "a" && !f2)
            throw new TypeError("Private accessor was defined without a setter");
          if (typeof state3 === "function" ? receiver !== state3 || !f2 : !state3.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
          return kind2 === "a" ? f2.call(receiver, value12) : f2 ? f2.value = value12 : state3.set(receiver, value12), value12;
        };
        __classPrivateFieldIn2 = function(state3, receiver) {
          if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
            throw new TypeError("Cannot use 'in' operator on non-object");
          return typeof state3 === "function" ? receiver === state3 : state3.has(receiver);
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__spreadArray", __spreadArray2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
        exporter("__classPrivateFieldIn", __classPrivateFieldIn2);
      });
    }
  });

  // node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js
  var require_memoize_browser_cjs = __commonJS({
    "node_modules/@emotion/is-prop-valid/node_modules/@emotion/memoize/dist/memoize.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function memoize3(fn) {
        var cache = {};
        return function(arg) {
          if (cache[arg] === void 0)
            cache[arg] = fn(arg);
          return cache[arg];
        };
      }
      exports.default = memoize3;
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js
  var require_is_prop_valid_browser_cjs = __commonJS({
    "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.cjs.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function _interopDefault(ex) {
        return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
      }
      var memoize3 = _interopDefault(require_memoize_browser_cjs());
      var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      var index6 = memoize3(function(prop3) {
        return reactPropsRegex.test(prop3) || prop3.charCodeAt(0) === 111 && prop3.charCodeAt(1) === 110 && prop3.charCodeAt(2) < 91;
      });
      exports.default = index6;
    }
  });

  // node_modules/dompurify/dist/purify.js
  var require_purify = __commonJS({
    "node_modules/dompurify/dist/purify.js"(exports, module) {
      (function(global5, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global5 = typeof globalThis !== "undefined" ? globalThis : global5 || self, global5.DOMPurify = factory());
      })(exports, function() {
        "use strict";
        function _typeof(obj) {
          "@babel/helpers - typeof";
          return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
            return typeof obj2;
          } : function(obj2) {
            return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          }, _typeof(obj);
        }
        function _setPrototypeOf(o2, p3) {
          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p4) {
            o3.__proto__ = p4;
            return o3;
          };
          return _setPrototypeOf(o2, p3);
        }
        function _isNativeReflectConstruct() {
          if (typeof Reflect === "undefined" || !Reflect.construct)
            return false;
          if (Reflect.construct.sham)
            return false;
          if (typeof Proxy === "function")
            return true;
          try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
            }));
            return true;
          } catch (e) {
            return false;
          }
        }
        function _construct(Parent, args, Class) {
          if (_isNativeReflectConstruct()) {
            _construct = Reflect.construct;
          } else {
            _construct = function _construct2(Parent2, args2, Class2) {
              var a4 = [null];
              a4.push.apply(a4, args2);
              var Constructor2 = Function.bind.apply(Parent2, a4);
              var instance = new Constructor2();
              if (Class2)
                _setPrototypeOf(instance, Class2.prototype);
              return instance;
            };
          }
          return _construct.apply(null, arguments);
        }
        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread();
        }
        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr))
            return _arrayLikeToArray2(arr);
        }
        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
            return Array.from(iter);
        }
        function _unsupportedIterableToArray2(o2, minLen) {
          if (!o2)
            return;
          if (typeof o2 === "string")
            return _arrayLikeToArray2(o2, minLen);
          var n2 = Object.prototype.toString.call(o2).slice(8, -1);
          if (n2 === "Object" && o2.constructor)
            n2 = o2.constructor.name;
          if (n2 === "Map" || n2 === "Set")
            return Array.from(o2);
          if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
            return _arrayLikeToArray2(o2, minLen);
        }
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i7 = 0, arr2 = new Array(len); i7 < len; i7++)
            arr2[i7] = arr[i7];
          return arr2;
        }
        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        var hasOwnProperty3 = Object.hasOwnProperty, setPrototypeOf = Object.setPrototypeOf, isFrozen = Object.isFrozen, getPrototypeOf = Object.getPrototypeOf, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var freeze2 = Object.freeze, seal = Object.seal, create4 = Object.create;
        var _ref = typeof Reflect !== "undefined" && Reflect, apply11 = _ref.apply, construct = _ref.construct;
        if (!apply11) {
          apply11 = function apply12(fun, thisValue, args) {
            return fun.apply(thisValue, args);
          };
        }
        if (!freeze2) {
          freeze2 = function freeze3(x3) {
            return x3;
          };
        }
        if (!seal) {
          seal = function seal2(x3) {
            return x3;
          };
        }
        if (!construct) {
          construct = function construct2(Func, args) {
            return _construct(Func, _toConsumableArray(args));
          };
        }
        var arrayForEach = unapply(Array.prototype.forEach);
        var arrayPop = unapply(Array.prototype.pop);
        var arrayPush = unapply(Array.prototype.push);
        var stringToLowerCase = unapply(String.prototype.toLowerCase);
        var stringMatch = unapply(String.prototype.match);
        var stringReplace = unapply(String.prototype.replace);
        var stringIndexOf = unapply(String.prototype.indexOf);
        var stringTrim = unapply(String.prototype.trim);
        var regExpTest = unapply(RegExp.prototype.test);
        var typeErrorCreate = unconstruct(TypeError);
        function unapply(func) {
          return function(thisArg) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            return apply11(func, thisArg, args);
          };
        }
        function unconstruct(func) {
          return function() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }
            return construct(func, args);
          };
        }
        function addToSet(set3, array) {
          if (setPrototypeOf) {
            setPrototypeOf(set3, null);
          }
          var l2 = array.length;
          while (l2--) {
            var element3 = array[l2];
            if (typeof element3 === "string") {
              var lcElement = stringToLowerCase(element3);
              if (lcElement !== element3) {
                if (!isFrozen(array)) {
                  array[l2] = lcElement;
                }
                element3 = lcElement;
              }
            }
            set3[element3] = true;
          }
          return set3;
        }
        function clone2(object2) {
          var newObject = create4(null);
          var property;
          for (property in object2) {
            if (apply11(hasOwnProperty3, object2, [property])) {
              newObject[property] = object2[property];
            }
          }
          return newObject;
        }
        function lookupGetter(object2, prop3) {
          while (object2 !== null) {
            var desc = getOwnPropertyDescriptor(object2, prop3);
            if (desc) {
              if (desc.get) {
                return unapply(desc.get);
              }
              if (typeof desc.value === "function") {
                return unapply(desc.value);
              }
            }
            object2 = getPrototypeOf(object2);
          }
          function fallbackValue(element3) {
            console.warn("fallback value for", element3);
            return null;
          }
          return fallbackValue;
        }
        var html$1 = freeze2(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]);
        var svg$1 = freeze2(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]);
        var svgFilters = freeze2(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]);
        var svgDisallowed = freeze2(["animate", "color-profile", "cursor", "discard", "fedropshadow", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]);
        var mathMl$1 = freeze2(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover"]);
        var mathMlDisallowed = freeze2(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]);
        var text7 = freeze2(["#text"]);
        var html3 = freeze2(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "xmlns", "slot"]);
        var svg5 = freeze2(["accent-height", "accumulate", "additive", "alignment-baseline", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]);
        var mathMl = freeze2(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]);
        var xml2 = freeze2(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]);
        var MUSTACHE_EXPR = seal(/\{\{[\w\W]*|[\w\W]*\}\}/gm);
        var ERB_EXPR = seal(/<%[\w\W]*|[\w\W]*%>/gm);
        var DATA_ATTR = seal(/^data-[\-\w.\u00B7-\uFFFF]/);
        var ARIA_ATTR = seal(/^aria-[\-\w]+$/);
        var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i);
        var IS_SCRIPT_OR_DATA = seal(/^(?:\w+script|data):/i);
        var ATTR_WHITESPACE = seal(/[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g);
        var DOCTYPE_NAME = seal(/^html$/i);
        var getGlobal = function getGlobal2() {
          return typeof window === "undefined" ? null : window;
        };
        var _createTrustedTypesPolicy = function _createTrustedTypesPolicy2(trustedTypes, document3) {
          if (_typeof(trustedTypes) !== "object" || typeof trustedTypes.createPolicy !== "function") {
            return null;
          }
          var suffix2 = null;
          var ATTR_NAME = "data-tt-policy-suffix";
          if (document3.currentScript && document3.currentScript.hasAttribute(ATTR_NAME)) {
            suffix2 = document3.currentScript.getAttribute(ATTR_NAME);
          }
          var policyName = "dompurify" + (suffix2 ? "#" + suffix2 : "");
          try {
            return trustedTypes.createPolicy(policyName, {
              createHTML: function createHTML(html4) {
                return html4;
              }
            });
          } catch (_2) {
            console.warn("TrustedTypes policy " + policyName + " could not be created.");
            return null;
          }
        };
        function createDOMPurify() {
          var window3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : getGlobal();
          var DOMPurify = function DOMPurify2(root2) {
            return createDOMPurify(root2);
          };
          DOMPurify.version = "2.3.8";
          DOMPurify.removed = [];
          if (!window3 || !window3.document || window3.document.nodeType !== 9) {
            DOMPurify.isSupported = false;
            return DOMPurify;
          }
          var originalDocument = window3.document;
          var document3 = window3.document;
          var DocumentFragment = window3.DocumentFragment, HTMLTemplateElement = window3.HTMLTemplateElement, Node2 = window3.Node, Element2 = window3.Element, NodeFilter2 = window3.NodeFilter, _window$NamedNodeMap = window3.NamedNodeMap, NamedNodeMap = _window$NamedNodeMap === void 0 ? window3.NamedNodeMap || window3.MozNamedAttrMap : _window$NamedNodeMap, HTMLFormElement = window3.HTMLFormElement, DOMParser = window3.DOMParser, trustedTypes = window3.trustedTypes;
          var ElementPrototype = Element2.prototype;
          var cloneNode = lookupGetter(ElementPrototype, "cloneNode");
          var getNextSibling = lookupGetter(ElementPrototype, "nextSibling");
          var getChildNodes = lookupGetter(ElementPrototype, "childNodes");
          var getParentNode = lookupGetter(ElementPrototype, "parentNode");
          if (typeof HTMLTemplateElement === "function") {
            var template2 = document3.createElement("template");
            if (template2.content && template2.content.ownerDocument) {
              document3 = template2.content.ownerDocument;
            }
          }
          var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);
          var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML("") : "";
          var _document = document3, implementation = _document.implementation, createNodeIterator = _document.createNodeIterator, createDocumentFragment2 = _document.createDocumentFragment, getElementsByTagName3 = _document.getElementsByTagName;
          var importNode2 = originalDocument.importNode;
          var documentMode = {};
          try {
            documentMode = clone2(document3).documentMode ? document3.documentMode : {};
          } catch (_2) {
          }
          var hooks = {};
          DOMPurify.isSupported = typeof getParentNode === "function" && implementation && typeof implementation.createHTMLDocument !== "undefined" && documentMode !== 9;
          var MUSTACHE_EXPR$1 = MUSTACHE_EXPR, ERB_EXPR$1 = ERB_EXPR, DATA_ATTR$1 = DATA_ATTR, ARIA_ATTR$1 = ARIA_ATTR, IS_SCRIPT_OR_DATA$1 = IS_SCRIPT_OR_DATA, ATTR_WHITESPACE$1 = ATTR_WHITESPACE;
          var IS_ALLOWED_URI$1 = IS_ALLOWED_URI;
          var ALLOWED_TAGS = null;
          var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(svgFilters), _toConsumableArray(mathMl$1), _toConsumableArray(text7)));
          var ALLOWED_ATTR = null;
          var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html3), _toConsumableArray(svg5), _toConsumableArray(mathMl), _toConsumableArray(xml2)));
          var CUSTOM_ELEMENT_HANDLING = Object.seal(Object.create(null, {
            tagNameCheck: {
              writable: true,
              configurable: false,
              enumerable: true,
              value: null
            },
            attributeNameCheck: {
              writable: true,
              configurable: false,
              enumerable: true,
              value: null
            },
            allowCustomizedBuiltInElements: {
              writable: true,
              configurable: false,
              enumerable: true,
              value: false
            }
          }));
          var FORBID_TAGS = null;
          var FORBID_ATTR = null;
          var ALLOW_ARIA_ATTR = true;
          var ALLOW_DATA_ATTR = true;
          var ALLOW_UNKNOWN_PROTOCOLS = false;
          var SAFE_FOR_TEMPLATES = false;
          var WHOLE_DOCUMENT = false;
          var SET_CONFIG = false;
          var FORCE_BODY = false;
          var RETURN_DOM = false;
          var RETURN_DOM_FRAGMENT = false;
          var RETURN_TRUSTED_TYPE = false;
          var SANITIZE_DOM = true;
          var KEEP_CONTENT = true;
          var IN_PLACE = false;
          var USE_PROFILES = {};
          var FORBID_CONTENTS = null;
          var DEFAULT_FORBID_CONTENTS = addToSet({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);
          var DATA_URI_TAGS = null;
          var DEFAULT_DATA_URI_TAGS = addToSet({}, ["audio", "video", "img", "source", "image", "track"]);
          var URI_SAFE_ATTRIBUTES = null;
          var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]);
          var MATHML_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var NAMESPACE = HTML_NAMESPACE;
          var IS_EMPTY_INPUT = false;
          var PARSER_MEDIA_TYPE;
          var SUPPORTED_PARSER_MEDIA_TYPES = ["application/xhtml+xml", "text/html"];
          var DEFAULT_PARSER_MEDIA_TYPE = "text/html";
          var transformCaseFunc;
          var CONFIG = null;
          var formElement = document3.createElement("form");
          var isRegexOrFunction = function isRegexOrFunction2(testValue) {
            return testValue instanceof RegExp || testValue instanceof Function;
          };
          var _parseConfig = function _parseConfig2(cfg) {
            if (CONFIG && CONFIG === cfg) {
              return;
            }
            if (!cfg || _typeof(cfg) !== "object") {
              cfg = {};
            }
            cfg = clone2(cfg);
            ALLOWED_TAGS = "ALLOWED_TAGS" in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;
            ALLOWED_ATTR = "ALLOWED_ATTR" in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;
            URI_SAFE_ATTRIBUTES = "ADD_URI_SAFE_ATTR" in cfg ? addToSet(clone2(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;
            DATA_URI_TAGS = "ADD_DATA_URI_TAGS" in cfg ? addToSet(clone2(DEFAULT_DATA_URI_TAGS), cfg.ADD_DATA_URI_TAGS) : DEFAULT_DATA_URI_TAGS;
            FORBID_CONTENTS = "FORBID_CONTENTS" in cfg ? addToSet({}, cfg.FORBID_CONTENTS) : DEFAULT_FORBID_CONTENTS;
            FORBID_TAGS = "FORBID_TAGS" in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};
            FORBID_ATTR = "FORBID_ATTR" in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};
            USE_PROFILES = "USE_PROFILES" in cfg ? cfg.USE_PROFILES : false;
            ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false;
            ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false;
            ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false;
            SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false;
            WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false;
            RETURN_DOM = cfg.RETURN_DOM || false;
            RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false;
            RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false;
            FORCE_BODY = cfg.FORCE_BODY || false;
            SANITIZE_DOM = cfg.SANITIZE_DOM !== false;
            KEEP_CONTENT = cfg.KEEP_CONTENT !== false;
            IN_PLACE = cfg.IN_PLACE || false;
            IS_ALLOWED_URI$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$1;
            NAMESPACE = cfg.NAMESPACE || HTML_NAMESPACE;
            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck)) {
              CUSTOM_ELEMENT_HANDLING.tagNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.tagNameCheck;
            }
            if (cfg.CUSTOM_ELEMENT_HANDLING && isRegexOrFunction(cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck)) {
              CUSTOM_ELEMENT_HANDLING.attributeNameCheck = cfg.CUSTOM_ELEMENT_HANDLING.attributeNameCheck;
            }
            if (cfg.CUSTOM_ELEMENT_HANDLING && typeof cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements === "boolean") {
              CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements = cfg.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements;
            }
            PARSER_MEDIA_TYPE = SUPPORTED_PARSER_MEDIA_TYPES.indexOf(cfg.PARSER_MEDIA_TYPE) === -1 ? PARSER_MEDIA_TYPE = DEFAULT_PARSER_MEDIA_TYPE : PARSER_MEDIA_TYPE = cfg.PARSER_MEDIA_TYPE;
            transformCaseFunc = PARSER_MEDIA_TYPE === "application/xhtml+xml" ? function(x3) {
              return x3;
            } : stringToLowerCase;
            if (SAFE_FOR_TEMPLATES) {
              ALLOW_DATA_ATTR = false;
            }
            if (RETURN_DOM_FRAGMENT) {
              RETURN_DOM = true;
            }
            if (USE_PROFILES) {
              ALLOWED_TAGS = addToSet({}, _toConsumableArray(text7));
              ALLOWED_ATTR = [];
              if (USE_PROFILES.html === true) {
                addToSet(ALLOWED_TAGS, html$1);
                addToSet(ALLOWED_ATTR, html3);
              }
              if (USE_PROFILES.svg === true) {
                addToSet(ALLOWED_TAGS, svg$1);
                addToSet(ALLOWED_ATTR, svg5);
                addToSet(ALLOWED_ATTR, xml2);
              }
              if (USE_PROFILES.svgFilters === true) {
                addToSet(ALLOWED_TAGS, svgFilters);
                addToSet(ALLOWED_ATTR, svg5);
                addToSet(ALLOWED_ATTR, xml2);
              }
              if (USE_PROFILES.mathMl === true) {
                addToSet(ALLOWED_TAGS, mathMl$1);
                addToSet(ALLOWED_ATTR, mathMl);
                addToSet(ALLOWED_ATTR, xml2);
              }
            }
            if (cfg.ADD_TAGS) {
              if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {
                ALLOWED_TAGS = clone2(ALLOWED_TAGS);
              }
              addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);
            }
            if (cfg.ADD_ATTR) {
              if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {
                ALLOWED_ATTR = clone2(ALLOWED_ATTR);
              }
              addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);
            }
            if (cfg.ADD_URI_SAFE_ATTR) {
              addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);
            }
            if (cfg.FORBID_CONTENTS) {
              if (FORBID_CONTENTS === DEFAULT_FORBID_CONTENTS) {
                FORBID_CONTENTS = clone2(FORBID_CONTENTS);
              }
              addToSet(FORBID_CONTENTS, cfg.FORBID_CONTENTS);
            }
            if (KEEP_CONTENT) {
              ALLOWED_TAGS["#text"] = true;
            }
            if (WHOLE_DOCUMENT) {
              addToSet(ALLOWED_TAGS, ["html", "head", "body"]);
            }
            if (ALLOWED_TAGS.table) {
              addToSet(ALLOWED_TAGS, ["tbody"]);
              delete FORBID_TAGS.tbody;
            }
            if (freeze2) {
              freeze2(cfg);
            }
            CONFIG = cfg;
          };
          var MATHML_TEXT_INTEGRATION_POINTS = addToSet({}, ["mi", "mo", "mn", "ms", "mtext"]);
          var HTML_INTEGRATION_POINTS = addToSet({}, ["foreignobject", "desc", "title", "annotation-xml"]);
          var COMMON_SVG_AND_HTML_ELEMENTS = addToSet({}, ["title", "style", "font", "a", "script"]);
          var ALL_SVG_TAGS = addToSet({}, svg$1);
          addToSet(ALL_SVG_TAGS, svgFilters);
          addToSet(ALL_SVG_TAGS, svgDisallowed);
          var ALL_MATHML_TAGS = addToSet({}, mathMl$1);
          addToSet(ALL_MATHML_TAGS, mathMlDisallowed);
          var _checkValidNamespace = function _checkValidNamespace2(element3) {
            var parent2 = getParentNode(element3);
            if (!parent2 || !parent2.tagName) {
              parent2 = {
                namespaceURI: HTML_NAMESPACE,
                tagName: "template"
              };
            }
            var tagName2 = stringToLowerCase(element3.tagName);
            var parentTagName = stringToLowerCase(parent2.tagName);
            if (element3.namespaceURI === SVG_NAMESPACE) {
              if (parent2.namespaceURI === HTML_NAMESPACE) {
                return tagName2 === "svg";
              }
              if (parent2.namespaceURI === MATHML_NAMESPACE) {
                return tagName2 === "svg" && (parentTagName === "annotation-xml" || MATHML_TEXT_INTEGRATION_POINTS[parentTagName]);
              }
              return Boolean(ALL_SVG_TAGS[tagName2]);
            }
            if (element3.namespaceURI === MATHML_NAMESPACE) {
              if (parent2.namespaceURI === HTML_NAMESPACE) {
                return tagName2 === "math";
              }
              if (parent2.namespaceURI === SVG_NAMESPACE) {
                return tagName2 === "math" && HTML_INTEGRATION_POINTS[parentTagName];
              }
              return Boolean(ALL_MATHML_TAGS[tagName2]);
            }
            if (element3.namespaceURI === HTML_NAMESPACE) {
              if (parent2.namespaceURI === SVG_NAMESPACE && !HTML_INTEGRATION_POINTS[parentTagName]) {
                return false;
              }
              if (parent2.namespaceURI === MATHML_NAMESPACE && !MATHML_TEXT_INTEGRATION_POINTS[parentTagName]) {
                return false;
              }
              return !ALL_MATHML_TAGS[tagName2] && (COMMON_SVG_AND_HTML_ELEMENTS[tagName2] || !ALL_SVG_TAGS[tagName2]);
            }
            return false;
          };
          var _forceRemove = function _forceRemove2(node2) {
            arrayPush(DOMPurify.removed, {
              element: node2
            });
            try {
              node2.parentNode.removeChild(node2);
            } catch (_2) {
              try {
                node2.outerHTML = emptyHTML;
              } catch (_3) {
                node2.remove();
              }
            }
          };
          var _removeAttribute = function _removeAttribute2(name15, node2) {
            try {
              arrayPush(DOMPurify.removed, {
                attribute: node2.getAttributeNode(name15),
                from: node2
              });
            } catch (_2) {
              arrayPush(DOMPurify.removed, {
                attribute: null,
                from: node2
              });
            }
            node2.removeAttribute(name15);
            if (name15 === "is" && !ALLOWED_ATTR[name15]) {
              if (RETURN_DOM || RETURN_DOM_FRAGMENT) {
                try {
                  _forceRemove(node2);
                } catch (_2) {
                }
              } else {
                try {
                  node2.setAttribute(name15, "");
                } catch (_2) {
                }
              }
            }
          };
          var _initDocument = function _initDocument2(dirty) {
            var doc;
            var leadingWhitespace;
            if (FORCE_BODY) {
              dirty = "<remove></remove>" + dirty;
            } else {
              var matches3 = stringMatch(dirty, /^[\r\n\t ]+/);
              leadingWhitespace = matches3 && matches3[0];
            }
            if (PARSER_MEDIA_TYPE === "application/xhtml+xml") {
              dirty = '<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>' + dirty + "</body></html>";
            }
            var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;
            if (NAMESPACE === HTML_NAMESPACE) {
              try {
                doc = new DOMParser().parseFromString(dirtyPayload, PARSER_MEDIA_TYPE);
              } catch (_2) {
              }
            }
            if (!doc || !doc.documentElement) {
              doc = implementation.createDocument(NAMESPACE, "template", null);
              try {
                doc.documentElement.innerHTML = IS_EMPTY_INPUT ? "" : dirtyPayload;
              } catch (_2) {
              }
            }
            var body2 = doc.body || doc.documentElement;
            if (dirty && leadingWhitespace) {
              body2.insertBefore(document3.createTextNode(leadingWhitespace), body2.childNodes[0] || null);
            }
            if (NAMESPACE === HTML_NAMESPACE) {
              return getElementsByTagName3.call(doc, WHOLE_DOCUMENT ? "html" : "body")[0];
            }
            return WHOLE_DOCUMENT ? doc.documentElement : body2;
          };
          var _createIterator = function _createIterator2(root2) {
            return createNodeIterator.call(root2.ownerDocument || root2, root2, NodeFilter2.SHOW_ELEMENT | NodeFilter2.SHOW_COMMENT | NodeFilter2.SHOW_TEXT, null, false);
          };
          var _isClobbered = function _isClobbered2(elm) {
            return elm instanceof HTMLFormElement && (typeof elm.nodeName !== "string" || typeof elm.textContent !== "string" || typeof elm.removeChild !== "function" || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== "function" || typeof elm.setAttribute !== "function" || typeof elm.namespaceURI !== "string" || typeof elm.insertBefore !== "function");
          };
          var _isNode = function _isNode2(object2) {
            return _typeof(Node2) === "object" ? object2 instanceof Node2 : object2 && _typeof(object2) === "object" && typeof object2.nodeType === "number" && typeof object2.nodeName === "string";
          };
          var _executeHook = function _executeHook2(entryPoint, currentNode, data) {
            if (!hooks[entryPoint]) {
              return;
            }
            arrayForEach(hooks[entryPoint], function(hook) {
              hook.call(DOMPurify, currentNode, data, CONFIG);
            });
          };
          var _sanitizeElements = function _sanitizeElements2(currentNode) {
            var content3;
            _executeHook("beforeSanitizeElements", currentNode, null);
            if (_isClobbered(currentNode)) {
              _forceRemove(currentNode);
              return true;
            }
            if (regExpTest(/[\u0080-\uFFFF]/, currentNode.nodeName)) {
              _forceRemove(currentNode);
              return true;
            }
            var tagName2 = transformCaseFunc(currentNode.nodeName);
            _executeHook("uponSanitizeElement", currentNode, {
              tagName: tagName2,
              allowedTags: ALLOWED_TAGS
            });
            if (currentNode.hasChildNodes() && !_isNode(currentNode.firstElementChild) && (!_isNode(currentNode.content) || !_isNode(currentNode.content.firstElementChild)) && regExpTest(/<[/\w]/g, currentNode.innerHTML) && regExpTest(/<[/\w]/g, currentNode.textContent)) {
              _forceRemove(currentNode);
              return true;
            }
            if (tagName2 === "select" && regExpTest(/<template/i, currentNode.innerHTML)) {
              _forceRemove(currentNode);
              return true;
            }
            if (!ALLOWED_TAGS[tagName2] || FORBID_TAGS[tagName2]) {
              if (!FORBID_TAGS[tagName2] && _basicCustomElementTest(tagName2)) {
                if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, tagName2))
                  return false;
                if (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(tagName2))
                  return false;
              }
              if (KEEP_CONTENT && !FORBID_CONTENTS[tagName2]) {
                var parentNode = getParentNode(currentNode) || currentNode.parentNode;
                var childNodes2 = getChildNodes(currentNode) || currentNode.childNodes;
                if (childNodes2 && parentNode) {
                  var childCount = childNodes2.length;
                  for (var i7 = childCount - 1; i7 >= 0; --i7) {
                    parentNode.insertBefore(cloneNode(childNodes2[i7], true), getNextSibling(currentNode));
                  }
                }
              }
              _forceRemove(currentNode);
              return true;
            }
            if (currentNode instanceof Element2 && !_checkValidNamespace(currentNode)) {
              _forceRemove(currentNode);
              return true;
            }
            if ((tagName2 === "noscript" || tagName2 === "noembed") && regExpTest(/<\/no(script|embed)/i, currentNode.innerHTML)) {
              _forceRemove(currentNode);
              return true;
            }
            if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {
              content3 = currentNode.textContent;
              content3 = stringReplace(content3, MUSTACHE_EXPR$1, " ");
              content3 = stringReplace(content3, ERB_EXPR$1, " ");
              if (currentNode.textContent !== content3) {
                arrayPush(DOMPurify.removed, {
                  element: currentNode.cloneNode()
                });
                currentNode.textContent = content3;
              }
            }
            _executeHook("afterSanitizeElements", currentNode, null);
            return false;
          };
          var _isValidAttribute = function _isValidAttribute2(lcTag, lcName, value12) {
            if (SANITIZE_DOM && (lcName === "id" || lcName === "name") && (value12 in document3 || value12 in formElement)) {
              return false;
            }
            if (ALLOW_DATA_ATTR && !FORBID_ATTR[lcName] && regExpTest(DATA_ATTR$1, lcName))
              ;
            else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$1, lcName))
              ;
            else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {
              if (_basicCustomElementTest(lcTag) && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, lcTag) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(lcTag)) && (CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.attributeNameCheck, lcName) || CUSTOM_ELEMENT_HANDLING.attributeNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.attributeNameCheck(lcName)) || lcName === "is" && CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements && (CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof RegExp && regExpTest(CUSTOM_ELEMENT_HANDLING.tagNameCheck, value12) || CUSTOM_ELEMENT_HANDLING.tagNameCheck instanceof Function && CUSTOM_ELEMENT_HANDLING.tagNameCheck(value12)))
                ;
              else {
                return false;
              }
            } else if (URI_SAFE_ATTRIBUTES[lcName])
              ;
            else if (regExpTest(IS_ALLOWED_URI$1, stringReplace(value12, ATTR_WHITESPACE$1, "")))
              ;
            else if ((lcName === "src" || lcName === "xlink:href" || lcName === "href") && lcTag !== "script" && stringIndexOf(value12, "data:") === 0 && DATA_URI_TAGS[lcTag])
              ;
            else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$1, stringReplace(value12, ATTR_WHITESPACE$1, "")))
              ;
            else if (!value12)
              ;
            else {
              return false;
            }
            return true;
          };
          var _basicCustomElementTest = function _basicCustomElementTest2(tagName2) {
            return tagName2.indexOf("-") > 0;
          };
          var _sanitizeAttributes = function _sanitizeAttributes2(currentNode) {
            var attr;
            var value12;
            var lcName;
            var l2;
            _executeHook("beforeSanitizeAttributes", currentNode, null);
            var attributes = currentNode.attributes;
            if (!attributes) {
              return;
            }
            var hookEvent = {
              attrName: "",
              attrValue: "",
              keepAttr: true,
              allowedAttributes: ALLOWED_ATTR
            };
            l2 = attributes.length;
            while (l2--) {
              attr = attributes[l2];
              var _attr = attr, name15 = _attr.name, namespaceURI = _attr.namespaceURI;
              value12 = name15 === "value" ? attr.value : stringTrim(attr.value);
              lcName = transformCaseFunc(name15);
              hookEvent.attrName = lcName;
              hookEvent.attrValue = value12;
              hookEvent.keepAttr = true;
              hookEvent.forceKeepAttr = void 0;
              _executeHook("uponSanitizeAttribute", currentNode, hookEvent);
              value12 = hookEvent.attrValue;
              if (hookEvent.forceKeepAttr) {
                continue;
              }
              _removeAttribute(name15, currentNode);
              if (!hookEvent.keepAttr) {
                continue;
              }
              if (regExpTest(/\/>/i, value12)) {
                _removeAttribute(name15, currentNode);
                continue;
              }
              if (SAFE_FOR_TEMPLATES) {
                value12 = stringReplace(value12, MUSTACHE_EXPR$1, " ");
                value12 = stringReplace(value12, ERB_EXPR$1, " ");
              }
              var lcTag = transformCaseFunc(currentNode.nodeName);
              if (!_isValidAttribute(lcTag, lcName, value12)) {
                continue;
              }
              try {
                if (namespaceURI) {
                  currentNode.setAttributeNS(namespaceURI, name15, value12);
                } else {
                  currentNode.setAttribute(name15, value12);
                }
                arrayPop(DOMPurify.removed);
              } catch (_2) {
              }
            }
            _executeHook("afterSanitizeAttributes", currentNode, null);
          };
          var _sanitizeShadowDOM = function _sanitizeShadowDOM2(fragment2) {
            var shadowNode;
            var shadowIterator = _createIterator(fragment2);
            _executeHook("beforeSanitizeShadowDOM", fragment2, null);
            while (shadowNode = shadowIterator.nextNode()) {
              _executeHook("uponSanitizeShadowNode", shadowNode, null);
              if (_sanitizeElements(shadowNode)) {
                continue;
              }
              if (shadowNode.content instanceof DocumentFragment) {
                _sanitizeShadowDOM2(shadowNode.content);
              }
              _sanitizeAttributes(shadowNode);
            }
            _executeHook("afterSanitizeShadowDOM", fragment2, null);
          };
          DOMPurify.sanitize = function(dirty, cfg) {
            var body2;
            var importedNode;
            var currentNode;
            var oldNode;
            var returnNode;
            IS_EMPTY_INPUT = !dirty;
            if (IS_EMPTY_INPUT) {
              dirty = "<!-->";
            }
            if (typeof dirty !== "string" && !_isNode(dirty)) {
              if (typeof dirty.toString !== "function") {
                throw typeErrorCreate("toString is not a function");
              } else {
                dirty = dirty.toString();
                if (typeof dirty !== "string") {
                  throw typeErrorCreate("dirty is not a string, aborting");
                }
              }
            }
            if (!DOMPurify.isSupported) {
              if (_typeof(window3.toStaticHTML) === "object" || typeof window3.toStaticHTML === "function") {
                if (typeof dirty === "string") {
                  return window3.toStaticHTML(dirty);
                }
                if (_isNode(dirty)) {
                  return window3.toStaticHTML(dirty.outerHTML);
                }
              }
              return dirty;
            }
            if (!SET_CONFIG) {
              _parseConfig(cfg);
            }
            DOMPurify.removed = [];
            if (typeof dirty === "string") {
              IN_PLACE = false;
            }
            if (IN_PLACE) {
              if (dirty.nodeName) {
                var tagName2 = transformCaseFunc(dirty.nodeName);
                if (!ALLOWED_TAGS[tagName2] || FORBID_TAGS[tagName2]) {
                  throw typeErrorCreate("root node is forbidden and cannot be sanitized in-place");
                }
              }
            } else if (dirty instanceof Node2) {
              body2 = _initDocument("<!---->");
              importedNode = body2.ownerDocument.importNode(dirty, true);
              if (importedNode.nodeType === 1 && importedNode.nodeName === "BODY") {
                body2 = importedNode;
              } else if (importedNode.nodeName === "HTML") {
                body2 = importedNode;
              } else {
                body2.appendChild(importedNode);
              }
            } else {
              if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && dirty.indexOf("<") === -1) {
                return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(dirty) : dirty;
              }
              body2 = _initDocument(dirty);
              if (!body2) {
                return RETURN_DOM ? null : RETURN_TRUSTED_TYPE ? emptyHTML : "";
              }
            }
            if (body2 && FORCE_BODY) {
              _forceRemove(body2.firstChild);
            }
            var nodeIterator = _createIterator(IN_PLACE ? dirty : body2);
            while (currentNode = nodeIterator.nextNode()) {
              if (currentNode.nodeType === 3 && currentNode === oldNode) {
                continue;
              }
              if (_sanitizeElements(currentNode)) {
                continue;
              }
              if (currentNode.content instanceof DocumentFragment) {
                _sanitizeShadowDOM(currentNode.content);
              }
              _sanitizeAttributes(currentNode);
              oldNode = currentNode;
            }
            oldNode = null;
            if (IN_PLACE) {
              return dirty;
            }
            if (RETURN_DOM) {
              if (RETURN_DOM_FRAGMENT) {
                returnNode = createDocumentFragment2.call(body2.ownerDocument);
                while (body2.firstChild) {
                  returnNode.appendChild(body2.firstChild);
                }
              } else {
                returnNode = body2;
              }
              if (ALLOWED_ATTR.shadowroot) {
                returnNode = importNode2.call(originalDocument, returnNode, true);
              }
              return returnNode;
            }
            var serializedHTML = WHOLE_DOCUMENT ? body2.outerHTML : body2.innerHTML;
            if (WHOLE_DOCUMENT && ALLOWED_TAGS["!doctype"] && body2.ownerDocument && body2.ownerDocument.doctype && body2.ownerDocument.doctype.name && regExpTest(DOCTYPE_NAME, body2.ownerDocument.doctype.name)) {
              serializedHTML = "<!DOCTYPE " + body2.ownerDocument.doctype.name + ">\n" + serializedHTML;
            }
            if (SAFE_FOR_TEMPLATES) {
              serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$1, " ");
              serializedHTML = stringReplace(serializedHTML, ERB_EXPR$1, " ");
            }
            return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;
          };
          DOMPurify.setConfig = function(cfg) {
            _parseConfig(cfg);
            SET_CONFIG = true;
          };
          DOMPurify.clearConfig = function() {
            CONFIG = null;
            SET_CONFIG = false;
          };
          DOMPurify.isValidAttribute = function(tag2, attr, value12) {
            if (!CONFIG) {
              _parseConfig({});
            }
            var lcTag = transformCaseFunc(tag2);
            var lcName = transformCaseFunc(attr);
            return _isValidAttribute(lcTag, lcName, value12);
          };
          DOMPurify.addHook = function(entryPoint, hookFunction) {
            if (typeof hookFunction !== "function") {
              return;
            }
            hooks[entryPoint] = hooks[entryPoint] || [];
            arrayPush(hooks[entryPoint], hookFunction);
          };
          DOMPurify.removeHook = function(entryPoint) {
            if (hooks[entryPoint]) {
              return arrayPop(hooks[entryPoint]);
            }
          };
          DOMPurify.removeHooks = function(entryPoint) {
            if (hooks[entryPoint]) {
              hooks[entryPoint] = [];
            }
          };
          DOMPurify.removeAllHooks = function() {
            hooks = {};
          };
          return DOMPurify;
        }
        var purify = createDOMPurify();
        return purify;
      });
    }
  });

  // node_modules/highlight.js/lib/core.js
  var require_core = __commonJS({
    "node_modules/highlight.js/lib/core.js"(exports, module) {
      var deepFreezeEs6 = { exports: {} };
      function deepFreeze(obj) {
        if (obj instanceof Map) {
          obj.clear = obj.delete = obj.set = function() {
            throw new Error("map is read-only");
          };
        } else if (obj instanceof Set) {
          obj.add = obj.clear = obj.delete = function() {
            throw new Error("set is read-only");
          };
        }
        Object.freeze(obj);
        Object.getOwnPropertyNames(obj).forEach(function(name15) {
          var prop3 = obj[name15];
          if (typeof prop3 == "object" && !Object.isFrozen(prop3)) {
            deepFreeze(prop3);
          }
        });
        return obj;
      }
      deepFreezeEs6.exports = deepFreeze;
      deepFreezeEs6.exports.default = deepFreeze;
      var deepFreeze$1 = deepFreezeEs6.exports;
      var Response = class {
        constructor(mode) {
          if (mode.data === void 0)
            mode.data = {};
          this.data = mode.data;
          this.isMatchIgnored = false;
        }
        ignoreMatch() {
          this.isMatchIgnored = true;
        }
      };
      function escapeHTML(value12) {
        return value12.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
      }
      function inherit$1(original, ...objects) {
        const result = /* @__PURE__ */ Object.create(null);
        for (const key in original) {
          result[key] = original[key];
        }
        objects.forEach(function(obj) {
          for (const key in obj) {
            result[key] = obj[key];
          }
        });
        return result;
      }
      var SPAN_CLOSE = "</span>";
      var emitsWrappingTags = (node2) => {
        return !!node2.kind;
      };
      var expandScopeName = (name15, { prefix: prefix4 }) => {
        if (name15.includes(".")) {
          const pieces = name15.split(".");
          return [
            `${prefix4}${pieces.shift()}`,
            ...pieces.map((x3, i7) => `${x3}${"_".repeat(i7 + 1)}`)
          ].join(" ");
        }
        return `${prefix4}${name15}`;
      };
      var HTMLRenderer = class {
        constructor(parseTree, options3) {
          this.buffer = "";
          this.classPrefix = options3.classPrefix;
          parseTree.walk(this);
        }
        addText(text7) {
          this.buffer += escapeHTML(text7);
        }
        openNode(node2) {
          if (!emitsWrappingTags(node2))
            return;
          let scope2 = node2.kind;
          if (node2.sublanguage) {
            scope2 = `language-${scope2}`;
          } else {
            scope2 = expandScopeName(scope2, { prefix: this.classPrefix });
          }
          this.span(scope2);
        }
        closeNode(node2) {
          if (!emitsWrappingTags(node2))
            return;
          this.buffer += SPAN_CLOSE;
        }
        value() {
          return this.buffer;
        }
        span(className2) {
          this.buffer += `<span class="${className2}">`;
        }
      };
      var TokenTree = class {
        constructor() {
          this.rootNode = { children: [] };
          this.stack = [this.rootNode];
        }
        get top() {
          return this.stack[this.stack.length - 1];
        }
        get root() {
          return this.rootNode;
        }
        add(node2) {
          this.top.children.push(node2);
        }
        openNode(kind2) {
          const node2 = { kind: kind2, children: [] };
          this.add(node2);
          this.stack.push(node2);
        }
        closeNode() {
          if (this.stack.length > 1) {
            return this.stack.pop();
          }
          return void 0;
        }
        closeAllNodes() {
          while (this.closeNode())
            ;
        }
        toJSON() {
          return JSON.stringify(this.rootNode, null, 4);
        }
        walk(builder) {
          return this.constructor._walk(builder, this.rootNode);
        }
        static _walk(builder, node2) {
          if (typeof node2 === "string") {
            builder.addText(node2);
          } else if (node2.children) {
            builder.openNode(node2);
            node2.children.forEach((child) => this._walk(builder, child));
            builder.closeNode(node2);
          }
          return builder;
        }
        static _collapse(node2) {
          if (typeof node2 === "string")
            return;
          if (!node2.children)
            return;
          if (node2.children.every((el15) => typeof el15 === "string")) {
            node2.children = [node2.children.join("")];
          } else {
            node2.children.forEach((child) => {
              TokenTree._collapse(child);
            });
          }
        }
      };
      var TokenTreeEmitter = class extends TokenTree {
        constructor(options3) {
          super();
          this.options = options3;
        }
        addKeyword(text7, kind2) {
          if (text7 === "") {
            return;
          }
          this.openNode(kind2);
          this.addText(text7);
          this.closeNode();
        }
        addText(text7) {
          if (text7 === "") {
            return;
          }
          this.add(text7);
        }
        addSublanguage(emitter, name15) {
          const node2 = emitter.root;
          node2.kind = name15;
          node2.sublanguage = true;
          this.add(node2);
        }
        toHTML() {
          const renderer2 = new HTMLRenderer(this, this.options);
          return renderer2.value();
        }
        finalize() {
          return true;
        }
      };
      function source3(re2) {
        if (!re2)
          return null;
        if (typeof re2 === "string")
          return re2;
        return re2.source;
      }
      function lookahead(re2) {
        return concat2("(?=", re2, ")");
      }
      function anyNumberOfTimes(re2) {
        return concat2("(?:", re2, ")*");
      }
      function optional2(re2) {
        return concat2("(?:", re2, ")?");
      }
      function concat2(...args) {
        const joined = args.map((x3) => source3(x3)).join("");
        return joined;
      }
      function stripOptionsFromArgs(args) {
        const opts = args[args.length - 1];
        if (typeof opts === "object" && opts.constructor === Object) {
          args.splice(args.length - 1, 1);
          return opts;
        } else {
          return {};
        }
      }
      function either2(...args) {
        const opts = stripOptionsFromArgs(args);
        const joined = "(" + (opts.capture ? "" : "?:") + args.map((x3) => source3(x3)).join("|") + ")";
        return joined;
      }
      function countMatchGroups(re2) {
        return new RegExp(re2.toString() + "|").exec("").length - 1;
      }
      function startsWith4(re2, lexeme) {
        const match6 = re2 && re2.exec(lexeme);
        return match6 && match6.index === 0;
      }
      var BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
      function _rewriteBackreferences(regexps, { joinWith: joinWith2 }) {
        let numCaptures = 0;
        return regexps.map((regex2) => {
          numCaptures += 1;
          const offset2 = numCaptures;
          let re2 = source3(regex2);
          let out = "";
          while (re2.length > 0) {
            const match6 = BACKREF_RE.exec(re2);
            if (!match6) {
              out += re2;
              break;
            }
            out += re2.substring(0, match6.index);
            re2 = re2.substring(match6.index + match6[0].length);
            if (match6[0][0] === "\\" && match6[1]) {
              out += "\\" + String(Number(match6[1]) + offset2);
            } else {
              out += match6[0];
              if (match6[0] === "(") {
                numCaptures++;
              }
            }
          }
          return out;
        }).map((re2) => `(${re2})`).join(joinWith2);
      }
      var MATCH_NOTHING_RE = /\b\B/;
      var IDENT_RE2 = "[a-zA-Z]\\w*";
      var UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
      var NUMBER_RE = "\\b\\d+(\\.\\d+)?";
      var C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
      var BINARY_NUMBER_RE = "\\b(0b[01]+)";
      var RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
      var SHEBANG = (opts = {}) => {
        const beginShebang = /^#![ ]*\//;
        if (opts.binary) {
          opts.begin = concat2(beginShebang, /.*\b/, opts.binary, /\b.*/);
        }
        return inherit$1({
          scope: "meta",
          begin: beginShebang,
          end: /$/,
          relevance: 0,
          "on:begin": (m2, resp) => {
            if (m2.index !== 0)
              resp.ignoreMatch();
          }
        }, opts);
      };
      var BACKSLASH_ESCAPE = {
        begin: "\\\\[\\s\\S]",
        relevance: 0
      };
      var APOS_STRING_MODE = {
        scope: "string",
        begin: "'",
        end: "'",
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE]
      };
      var QUOTE_STRING_MODE = {
        scope: "string",
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [BACKSLASH_ESCAPE]
      };
      var PHRASAL_WORDS_MODE = {
        begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
      };
      var COMMENT2 = function(begin, end3, modeOptions = {}) {
        const mode = inherit$1({
          scope: "comment",
          begin,
          end: end3,
          contains: []
        }, modeOptions);
        mode.contains.push({
          scope: "doctag",
          begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
          end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
          excludeBegin: true,
          relevance: 0
        });
        const ENGLISH_WORD = either2("I", "a", "is", "so", "us", "to", "at", "if", "in", "it", "on", /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, /[A-Za-z]+[-][a-z]+/, /[A-Za-z][a-z]{2,}/);
        mode.contains.push({
          begin: concat2(/[ ]+/, "(", ENGLISH_WORD, /[.]?[:]?([.][ ]|[ ])/, "){3}")
        });
        return mode;
      };
      var C_LINE_COMMENT_MODE = COMMENT2("//", "$");
      var C_BLOCK_COMMENT_MODE = COMMENT2("/\\*", "\\*/");
      var HASH_COMMENT_MODE = COMMENT2("#", "$");
      var NUMBER_MODE = {
        scope: "number",
        begin: NUMBER_RE,
        relevance: 0
      };
      var C_NUMBER_MODE = {
        scope: "number",
        begin: C_NUMBER_RE,
        relevance: 0
      };
      var BINARY_NUMBER_MODE = {
        scope: "number",
        begin: BINARY_NUMBER_RE,
        relevance: 0
      };
      var REGEXP_MODE = {
        begin: /(?=\/[^/\n]*\/)/,
        contains: [{
          scope: "regexp",
          begin: /\//,
          end: /\/[gimuy]*/,
          illegal: /\n/,
          contains: [
            BACKSLASH_ESCAPE,
            {
              begin: /\[/,
              end: /\]/,
              relevance: 0,
              contains: [BACKSLASH_ESCAPE]
            }
          ]
        }]
      };
      var TITLE_MODE = {
        scope: "title",
        begin: IDENT_RE2,
        relevance: 0
      };
      var UNDERSCORE_TITLE_MODE = {
        scope: "title",
        begin: UNDERSCORE_IDENT_RE,
        relevance: 0
      };
      var METHOD_GUARD = {
        begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
        relevance: 0
      };
      var END_SAME_AS_BEGIN = function(mode) {
        return Object.assign(mode, {
          "on:begin": (m2, resp) => {
            resp.data._beginMatch = m2[1];
          },
          "on:end": (m2, resp) => {
            if (resp.data._beginMatch !== m2[1])
              resp.ignoreMatch();
          }
        });
      };
      var MODES = /* @__PURE__ */ Object.freeze({
        __proto__: null,
        MATCH_NOTHING_RE,
        IDENT_RE: IDENT_RE2,
        UNDERSCORE_IDENT_RE,
        NUMBER_RE,
        C_NUMBER_RE,
        BINARY_NUMBER_RE,
        RE_STARTERS_RE,
        SHEBANG,
        BACKSLASH_ESCAPE,
        APOS_STRING_MODE,
        QUOTE_STRING_MODE,
        PHRASAL_WORDS_MODE,
        COMMENT: COMMENT2,
        C_LINE_COMMENT_MODE,
        C_BLOCK_COMMENT_MODE,
        HASH_COMMENT_MODE,
        NUMBER_MODE,
        C_NUMBER_MODE,
        BINARY_NUMBER_MODE,
        REGEXP_MODE,
        TITLE_MODE,
        UNDERSCORE_TITLE_MODE,
        METHOD_GUARD,
        END_SAME_AS_BEGIN
      });
      function skipIfHasPrecedingDot(match6, response) {
        const before = match6.input[match6.index - 1];
        if (before === ".") {
          response.ignoreMatch();
        }
      }
      function scopeClassName(mode, _parent) {
        if (mode.className !== void 0) {
          mode.scope = mode.className;
          delete mode.className;
        }
      }
      function beginKeywords(mode, parent2) {
        if (!parent2)
          return;
        if (!mode.beginKeywords)
          return;
        mode.begin = "\\b(" + mode.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)";
        mode.__beforeBegin = skipIfHasPrecedingDot;
        mode.keywords = mode.keywords || mode.beginKeywords;
        delete mode.beginKeywords;
        if (mode.relevance === void 0)
          mode.relevance = 0;
      }
      function compileIllegal(mode, _parent) {
        if (!Array.isArray(mode.illegal))
          return;
        mode.illegal = either2(...mode.illegal);
      }
      function compileMatch(mode, _parent) {
        if (!mode.match)
          return;
        if (mode.begin || mode.end)
          throw new Error("begin & end are not supported with match");
        mode.begin = mode.match;
        delete mode.match;
      }
      function compileRelevance(mode, _parent) {
        if (mode.relevance === void 0)
          mode.relevance = 1;
      }
      var beforeMatchExt = (mode, parent2) => {
        if (!mode.beforeMatch)
          return;
        if (mode.starts)
          throw new Error("beforeMatch cannot be used with starts");
        const originalMode = Object.assign({}, mode);
        Object.keys(mode).forEach((key) => {
          delete mode[key];
        });
        mode.keywords = originalMode.keywords;
        mode.begin = concat2(originalMode.beforeMatch, lookahead(originalMode.begin));
        mode.starts = {
          relevance: 0,
          contains: [
            Object.assign(originalMode, { endsParent: true })
          ]
        };
        mode.relevance = 0;
        delete originalMode.beforeMatch;
      };
      var COMMON_KEYWORDS = [
        "of",
        "and",
        "for",
        "in",
        "not",
        "or",
        "if",
        "then",
        "parent",
        "list",
        "value"
      ];
      var DEFAULT_KEYWORD_SCOPE = "keyword";
      function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
        const compiledKeywords = /* @__PURE__ */ Object.create(null);
        if (typeof rawKeywords === "string") {
          compileList(scopeName, rawKeywords.split(" "));
        } else if (Array.isArray(rawKeywords)) {
          compileList(scopeName, rawKeywords);
        } else {
          Object.keys(rawKeywords).forEach(function(scopeName2) {
            Object.assign(compiledKeywords, compileKeywords(rawKeywords[scopeName2], caseInsensitive, scopeName2));
          });
        }
        return compiledKeywords;
        function compileList(scopeName2, keywordList) {
          if (caseInsensitive) {
            keywordList = keywordList.map((x3) => x3.toLowerCase());
          }
          keywordList.forEach(function(keyword) {
            const pair = keyword.split("|");
            compiledKeywords[pair[0]] = [scopeName2, scoreForKeyword(pair[0], pair[1])];
          });
        }
      }
      function scoreForKeyword(keyword, providedScore) {
        if (providedScore) {
          return Number(providedScore);
        }
        return commonKeyword(keyword) ? 0 : 1;
      }
      function commonKeyword(keyword) {
        return COMMON_KEYWORDS.includes(keyword.toLowerCase());
      }
      var seenDeprecations = {};
      var error5 = (message2) => {
        console.error(message2);
      };
      var warn4 = (message2, ...args) => {
        console.log(`WARN: ${message2}`, ...args);
      };
      var deprecated = (version2, message2) => {
        if (seenDeprecations[`${version2}/${message2}`])
          return;
        console.log(`Deprecated as of ${version2}. ${message2}`);
        seenDeprecations[`${version2}/${message2}`] = true;
      };
      var MultiClassError = new Error();
      function remapScopeNames(mode, regexes, { key }) {
        let offset2 = 0;
        const scopeNames = mode[key];
        const emit = {};
        const positions = {};
        for (let i7 = 1; i7 <= regexes.length; i7++) {
          positions[i7 + offset2] = scopeNames[i7];
          emit[i7 + offset2] = true;
          offset2 += countMatchGroups(regexes[i7 - 1]);
        }
        mode[key] = positions;
        mode[key]._emit = emit;
        mode[key]._multi = true;
      }
      function beginMultiClass(mode) {
        if (!Array.isArray(mode.begin))
          return;
        if (mode.skip || mode.excludeBegin || mode.returnBegin) {
          error5("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
          throw MultiClassError;
        }
        if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
          error5("beginScope must be object");
          throw MultiClassError;
        }
        remapScopeNames(mode, mode.begin, { key: "beginScope" });
        mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
      }
      function endMultiClass(mode) {
        if (!Array.isArray(mode.end))
          return;
        if (mode.skip || mode.excludeEnd || mode.returnEnd) {
          error5("skip, excludeEnd, returnEnd not compatible with endScope: {}");
          throw MultiClassError;
        }
        if (typeof mode.endScope !== "object" || mode.endScope === null) {
          error5("endScope must be object");
          throw MultiClassError;
        }
        remapScopeNames(mode, mode.end, { key: "endScope" });
        mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
      }
      function scopeSugar(mode) {
        if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
          mode.beginScope = mode.scope;
          delete mode.scope;
        }
      }
      function MultiClass(mode) {
        scopeSugar(mode);
        if (typeof mode.beginScope === "string") {
          mode.beginScope = { _wrap: mode.beginScope };
        }
        if (typeof mode.endScope === "string") {
          mode.endScope = { _wrap: mode.endScope };
        }
        beginMultiClass(mode);
        endMultiClass(mode);
      }
      function compileLanguage(language2) {
        function langRe(value12, global5) {
          return new RegExp(source3(value12), "m" + (language2.case_insensitive ? "i" : "") + (language2.unicodeRegex ? "u" : "") + (global5 ? "g" : ""));
        }
        class MultiRegex {
          constructor() {
            this.matchIndexes = {};
            this.regexes = [];
            this.matchAt = 1;
            this.position = 0;
          }
          addRule(re2, opts) {
            opts.position = this.position++;
            this.matchIndexes[this.matchAt] = opts;
            this.regexes.push([opts, re2]);
            this.matchAt += countMatchGroups(re2) + 1;
          }
          compile() {
            if (this.regexes.length === 0) {
              this.exec = () => null;
            }
            const terminators = this.regexes.map((el15) => el15[1]);
            this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: "|" }), true);
            this.lastIndex = 0;
          }
          exec(s3) {
            this.matcherRe.lastIndex = this.lastIndex;
            const match6 = this.matcherRe.exec(s3);
            if (!match6) {
              return null;
            }
            const i7 = match6.findIndex((el15, i8) => i8 > 0 && el15 !== void 0);
            const matchData = this.matchIndexes[i7];
            match6.splice(0, i7);
            return Object.assign(match6, matchData);
          }
        }
        class ResumableMultiRegex {
          constructor() {
            this.rules = [];
            this.multiRegexes = [];
            this.count = 0;
            this.lastIndex = 0;
            this.regexIndex = 0;
          }
          getMatcher(index6) {
            if (this.multiRegexes[index6])
              return this.multiRegexes[index6];
            const matcher = new MultiRegex();
            this.rules.slice(index6).forEach(([re2, opts]) => matcher.addRule(re2, opts));
            matcher.compile();
            this.multiRegexes[index6] = matcher;
            return matcher;
          }
          resumingScanAtSamePosition() {
            return this.regexIndex !== 0;
          }
          considerAll() {
            this.regexIndex = 0;
          }
          addRule(re2, opts) {
            this.rules.push([re2, opts]);
            if (opts.type === "begin")
              this.count++;
          }
          exec(s3) {
            const m2 = this.getMatcher(this.regexIndex);
            m2.lastIndex = this.lastIndex;
            let result = m2.exec(s3);
            if (this.resumingScanAtSamePosition()) {
              if (result && result.index === this.lastIndex)
                ;
              else {
                const m22 = this.getMatcher(0);
                m22.lastIndex = this.lastIndex + 1;
                result = m22.exec(s3);
              }
            }
            if (result) {
              this.regexIndex += result.position + 1;
              if (this.regexIndex === this.count) {
                this.considerAll();
              }
            }
            return result;
          }
        }
        function buildModeRegex(mode) {
          const mm = new ResumableMultiRegex();
          mode.contains.forEach((term) => mm.addRule(term.begin, { rule: term, type: "begin" }));
          if (mode.terminatorEnd) {
            mm.addRule(mode.terminatorEnd, { type: "end" });
          }
          if (mode.illegal) {
            mm.addRule(mode.illegal, { type: "illegal" });
          }
          return mm;
        }
        function compileMode(mode, parent2) {
          const cmode = mode;
          if (mode.isCompiled)
            return cmode;
          [
            scopeClassName,
            compileMatch,
            MultiClass,
            beforeMatchExt
          ].forEach((ext) => ext(mode, parent2));
          language2.compilerExtensions.forEach((ext) => ext(mode, parent2));
          mode.__beforeBegin = null;
          [
            beginKeywords,
            compileIllegal,
            compileRelevance
          ].forEach((ext) => ext(mode, parent2));
          mode.isCompiled = true;
          let keywordPattern = null;
          if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
            mode.keywords = Object.assign({}, mode.keywords);
            keywordPattern = mode.keywords.$pattern;
            delete mode.keywords.$pattern;
          }
          keywordPattern = keywordPattern || /\w+/;
          if (mode.keywords) {
            mode.keywords = compileKeywords(mode.keywords, language2.case_insensitive);
          }
          cmode.keywordPatternRe = langRe(keywordPattern, true);
          if (parent2) {
            if (!mode.begin)
              mode.begin = /\B|\b/;
            cmode.beginRe = langRe(cmode.begin);
            if (!mode.end && !mode.endsWithParent)
              mode.end = /\B|\b/;
            if (mode.end)
              cmode.endRe = langRe(cmode.end);
            cmode.terminatorEnd = source3(cmode.end) || "";
            if (mode.endsWithParent && parent2.terminatorEnd) {
              cmode.terminatorEnd += (mode.end ? "|" : "") + parent2.terminatorEnd;
            }
          }
          if (mode.illegal)
            cmode.illegalRe = langRe(mode.illegal);
          if (!mode.contains)
            mode.contains = [];
          mode.contains = [].concat(...mode.contains.map(function(c3) {
            return expandOrCloneMode(c3 === "self" ? mode : c3);
          }));
          mode.contains.forEach(function(c3) {
            compileMode(c3, cmode);
          });
          if (mode.starts) {
            compileMode(mode.starts, parent2);
          }
          cmode.matcher = buildModeRegex(cmode);
          return cmode;
        }
        if (!language2.compilerExtensions)
          language2.compilerExtensions = [];
        if (language2.contains && language2.contains.includes("self")) {
          throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
        }
        language2.classNameAliases = inherit$1(language2.classNameAliases || {});
        return compileMode(language2);
      }
      function dependencyOnParent(mode) {
        if (!mode)
          return false;
        return mode.endsWithParent || dependencyOnParent(mode.starts);
      }
      function expandOrCloneMode(mode) {
        if (mode.variants && !mode.cachedVariants) {
          mode.cachedVariants = mode.variants.map(function(variant) {
            return inherit$1(mode, { variants: null }, variant);
          });
        }
        if (mode.cachedVariants) {
          return mode.cachedVariants;
        }
        if (dependencyOnParent(mode)) {
          return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
        }
        if (Object.isFrozen(mode)) {
          return inherit$1(mode);
        }
        return mode;
      }
      var version = "11.5.1";
      var HTMLInjectionError = class extends Error {
        constructor(reason, html3) {
          super(reason);
          this.name = "HTMLInjectionError";
          this.html = html3;
        }
      };
      var escape2 = escapeHTML;
      var inherit2 = inherit$1;
      var NO_MATCH = Symbol("nomatch");
      var MAX_KEYWORD_HITS = 7;
      var HLJS = function(hljs) {
        const languages2 = /* @__PURE__ */ Object.create(null);
        const aliases = /* @__PURE__ */ Object.create(null);
        const plugins = [];
        let SAFE_MODE = true;
        const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
        const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: "Plain text", contains: [] };
        let options3 = {
          ignoreUnescapedHTML: false,
          throwUnescapedHTML: false,
          noHighlightRe: /^(no-?highlight)$/i,
          languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
          classPrefix: "hljs-",
          cssSelector: "pre code",
          languages: null,
          __emitter: TokenTreeEmitter
        };
        function shouldNotHighlight(languageName) {
          return options3.noHighlightRe.test(languageName);
        }
        function blockLanguage(block3) {
          let classes = block3.className + " ";
          classes += block3.parentNode ? block3.parentNode.className : "";
          const match6 = options3.languageDetectRe.exec(classes);
          if (match6) {
            const language2 = getLanguage(match6[1]);
            if (!language2) {
              warn4(LANGUAGE_NOT_FOUND.replace("{}", match6[1]));
              warn4("Falling back to no-highlight mode for this block.", block3);
            }
            return language2 ? match6[1] : "no-highlight";
          }
          return classes.split(/\s+/).find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
        }
        function highlight2(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
          let code3 = "";
          let languageName = "";
          if (typeof optionsOrCode === "object") {
            code3 = codeOrLanguageName;
            ignoreIllegals = optionsOrCode.ignoreIllegals;
            languageName = optionsOrCode.language;
          } else {
            deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
            deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
            languageName = codeOrLanguageName;
            code3 = optionsOrCode;
          }
          if (ignoreIllegals === void 0) {
            ignoreIllegals = true;
          }
          const context = {
            code: code3,
            language: languageName
          };
          fire("before:highlight", context);
          const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals);
          result.code = context.code;
          fire("after:highlight", result);
          return result;
        }
        function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
          const keywordHits = /* @__PURE__ */ Object.create(null);
          function keywordData(mode, matchText) {
            return mode.keywords[matchText];
          }
          function processKeywords() {
            if (!top6.keywords) {
              emitter.addText(modeBuffer);
              return;
            }
            let lastIndex = 0;
            top6.keywordPatternRe.lastIndex = 0;
            let match6 = top6.keywordPatternRe.exec(modeBuffer);
            let buf = "";
            while (match6) {
              buf += modeBuffer.substring(lastIndex, match6.index);
              const word = language2.case_insensitive ? match6[0].toLowerCase() : match6[0];
              const data = keywordData(top6, word);
              if (data) {
                const [kind2, keywordRelevance] = data;
                emitter.addText(buf);
                buf = "";
                keywordHits[word] = (keywordHits[word] || 0) + 1;
                if (keywordHits[word] <= MAX_KEYWORD_HITS)
                  relevance += keywordRelevance;
                if (kind2.startsWith("_")) {
                  buf += match6[0];
                } else {
                  const cssClass = language2.classNameAliases[kind2] || kind2;
                  emitter.addKeyword(match6[0], cssClass);
                }
              } else {
                buf += match6[0];
              }
              lastIndex = top6.keywordPatternRe.lastIndex;
              match6 = top6.keywordPatternRe.exec(modeBuffer);
            }
            buf += modeBuffer.substr(lastIndex);
            emitter.addText(buf);
          }
          function processSubLanguage() {
            if (modeBuffer === "")
              return;
            let result2 = null;
            if (typeof top6.subLanguage === "string") {
              if (!languages2[top6.subLanguage]) {
                emitter.addText(modeBuffer);
                return;
              }
              result2 = _highlight(top6.subLanguage, modeBuffer, true, continuations[top6.subLanguage]);
              continuations[top6.subLanguage] = result2._top;
            } else {
              result2 = highlightAuto(modeBuffer, top6.subLanguage.length ? top6.subLanguage : null);
            }
            if (top6.relevance > 0) {
              relevance += result2.relevance;
            }
            emitter.addSublanguage(result2._emitter, result2.language);
          }
          function processBuffer() {
            if (top6.subLanguage != null) {
              processSubLanguage();
            } else {
              processKeywords();
            }
            modeBuffer = "";
          }
          function emitMultiClass(scope2, match6) {
            let i7 = 1;
            const max7 = match6.length - 1;
            while (i7 <= max7) {
              if (!scope2._emit[i7]) {
                i7++;
                continue;
              }
              const klass = language2.classNameAliases[scope2[i7]] || scope2[i7];
              const text7 = match6[i7];
              if (klass) {
                emitter.addKeyword(text7, klass);
              } else {
                modeBuffer = text7;
                processKeywords();
                modeBuffer = "";
              }
              i7++;
            }
          }
          function startNewMode(mode, match6) {
            if (mode.scope && typeof mode.scope === "string") {
              emitter.openNode(language2.classNameAliases[mode.scope] || mode.scope);
            }
            if (mode.beginScope) {
              if (mode.beginScope._wrap) {
                emitter.addKeyword(modeBuffer, language2.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
                modeBuffer = "";
              } else if (mode.beginScope._multi) {
                emitMultiClass(mode.beginScope, match6);
                modeBuffer = "";
              }
            }
            top6 = Object.create(mode, { parent: { value: top6 } });
            return top6;
          }
          function endOfMode(mode, match6, matchPlusRemainder) {
            let matched = startsWith4(mode.endRe, matchPlusRemainder);
            if (matched) {
              if (mode["on:end"]) {
                const resp = new Response(mode);
                mode["on:end"](match6, resp);
                if (resp.isMatchIgnored)
                  matched = false;
              }
              if (matched) {
                while (mode.endsParent && mode.parent) {
                  mode = mode.parent;
                }
                return mode;
              }
            }
            if (mode.endsWithParent) {
              return endOfMode(mode.parent, match6, matchPlusRemainder);
            }
          }
          function doIgnore(lexeme) {
            if (top6.matcher.regexIndex === 0) {
              modeBuffer += lexeme[0];
              return 1;
            } else {
              resumeScanAtSamePosition = true;
              return 0;
            }
          }
          function doBeginMatch(match6) {
            const lexeme = match6[0];
            const newMode = match6.rule;
            const resp = new Response(newMode);
            const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
            for (const cb2 of beforeCallbacks) {
              if (!cb2)
                continue;
              cb2(match6, resp);
              if (resp.isMatchIgnored)
                return doIgnore(lexeme);
            }
            if (newMode.skip) {
              modeBuffer += lexeme;
            } else {
              if (newMode.excludeBegin) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (!newMode.returnBegin && !newMode.excludeBegin) {
                modeBuffer = lexeme;
              }
            }
            startNewMode(newMode, match6);
            return newMode.returnBegin ? 0 : lexeme.length;
          }
          function doEndMatch(match6) {
            const lexeme = match6[0];
            const matchPlusRemainder = codeToHighlight.substr(match6.index);
            const endMode = endOfMode(top6, match6, matchPlusRemainder);
            if (!endMode) {
              return NO_MATCH;
            }
            const origin3 = top6;
            if (top6.endScope && top6.endScope._wrap) {
              processBuffer();
              emitter.addKeyword(lexeme, top6.endScope._wrap);
            } else if (top6.endScope && top6.endScope._multi) {
              processBuffer();
              emitMultiClass(top6.endScope, match6);
            } else if (origin3.skip) {
              modeBuffer += lexeme;
            } else {
              if (!(origin3.returnEnd || origin3.excludeEnd)) {
                modeBuffer += lexeme;
              }
              processBuffer();
              if (origin3.excludeEnd) {
                modeBuffer = lexeme;
              }
            }
            do {
              if (top6.scope) {
                emitter.closeNode();
              }
              if (!top6.skip && !top6.subLanguage) {
                relevance += top6.relevance;
              }
              top6 = top6.parent;
            } while (top6 !== endMode.parent);
            if (endMode.starts) {
              startNewMode(endMode.starts, match6);
            }
            return origin3.returnEnd ? 0 : lexeme.length;
          }
          function processContinuations() {
            const list = [];
            for (let current = top6; current !== language2; current = current.parent) {
              if (current.scope) {
                list.unshift(current.scope);
              }
            }
            list.forEach((item) => emitter.openNode(item));
          }
          let lastMatch = {};
          function processLexeme(textBeforeMatch, match6) {
            const lexeme = match6 && match6[0];
            modeBuffer += textBeforeMatch;
            if (lexeme == null) {
              processBuffer();
              return 0;
            }
            if (lastMatch.type === "begin" && match6.type === "end" && lastMatch.index === match6.index && lexeme === "") {
              modeBuffer += codeToHighlight.slice(match6.index, match6.index + 1);
              if (!SAFE_MODE) {
                const err = new Error(`0 width match regex (${languageName})`);
                err.languageName = languageName;
                err.badRule = lastMatch.rule;
                throw err;
              }
              return 1;
            }
            lastMatch = match6;
            if (match6.type === "begin") {
              return doBeginMatch(match6);
            } else if (match6.type === "illegal" && !ignoreIllegals) {
              const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top6.scope || "<unnamed>") + '"');
              err.mode = top6;
              throw err;
            } else if (match6.type === "end") {
              const processed = doEndMatch(match6);
              if (processed !== NO_MATCH) {
                return processed;
              }
            }
            if (match6.type === "illegal" && lexeme === "") {
              return 1;
            }
            if (iterations > 1e5 && iterations > match6.index * 3) {
              const err = new Error("potential infinite loop, way more iterations than matches");
              throw err;
            }
            modeBuffer += lexeme;
            return lexeme.length;
          }
          const language2 = getLanguage(languageName);
          if (!language2) {
            error5(LANGUAGE_NOT_FOUND.replace("{}", languageName));
            throw new Error('Unknown language: "' + languageName + '"');
          }
          const md = compileLanguage(language2);
          let result = "";
          let top6 = continuation || md;
          const continuations = {};
          const emitter = new options3.__emitter(options3);
          processContinuations();
          let modeBuffer = "";
          let relevance = 0;
          let index6 = 0;
          let iterations = 0;
          let resumeScanAtSamePosition = false;
          try {
            top6.matcher.considerAll();
            for (; ; ) {
              iterations++;
              if (resumeScanAtSamePosition) {
                resumeScanAtSamePosition = false;
              } else {
                top6.matcher.considerAll();
              }
              top6.matcher.lastIndex = index6;
              const match6 = top6.matcher.exec(codeToHighlight);
              if (!match6)
                break;
              const beforeMatch = codeToHighlight.substring(index6, match6.index);
              const processedCount = processLexeme(beforeMatch, match6);
              index6 = match6.index + processedCount;
            }
            processLexeme(codeToHighlight.substr(index6));
            emitter.closeAllNodes();
            emitter.finalize();
            result = emitter.toHTML();
            return {
              language: languageName,
              value: result,
              relevance,
              illegal: false,
              _emitter: emitter,
              _top: top6
            };
          } catch (err) {
            if (err.message && err.message.includes("Illegal")) {
              return {
                language: languageName,
                value: escape2(codeToHighlight),
                illegal: true,
                relevance: 0,
                _illegalBy: {
                  message: err.message,
                  index: index6,
                  context: codeToHighlight.slice(index6 - 100, index6 + 100),
                  mode: err.mode,
                  resultSoFar: result
                },
                _emitter: emitter
              };
            } else if (SAFE_MODE) {
              return {
                language: languageName,
                value: escape2(codeToHighlight),
                illegal: false,
                relevance: 0,
                errorRaised: err,
                _emitter: emitter,
                _top: top6
              };
            } else {
              throw err;
            }
          }
        }
        function justTextHighlightResult(code3) {
          const result = {
            value: escape2(code3),
            illegal: false,
            relevance: 0,
            _top: PLAINTEXT_LANGUAGE,
            _emitter: new options3.__emitter(options3)
          };
          result._emitter.addText(code3);
          return result;
        }
        function highlightAuto(code3, languageSubset) {
          languageSubset = languageSubset || options3.languages || Object.keys(languages2);
          const plaintext = justTextHighlightResult(code3);
          const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name15) => _highlight(name15, code3, false));
          results.unshift(plaintext);
          const sorted = results.sort((a4, b4) => {
            if (a4.relevance !== b4.relevance)
              return b4.relevance - a4.relevance;
            if (a4.language && b4.language) {
              if (getLanguage(a4.language).supersetOf === b4.language) {
                return 1;
              } else if (getLanguage(b4.language).supersetOf === a4.language) {
                return -1;
              }
            }
            return 0;
          });
          const [best, secondBest] = sorted;
          const result = best;
          result.secondBest = secondBest;
          return result;
        }
        function updateClassName(element3, currentLang, resultLang) {
          const language2 = currentLang && aliases[currentLang] || resultLang;
          element3.classList.add("hljs");
          element3.classList.add(`language-${language2}`);
        }
        function highlightElement(element3) {
          let node2 = null;
          const language2 = blockLanguage(element3);
          if (shouldNotHighlight(language2))
            return;
          fire("before:highlightElement", { el: element3, language: language2 });
          if (element3.children.length > 0) {
            if (!options3.ignoreUnescapedHTML) {
              console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
              console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
              console.warn("The element with unescaped HTML:");
              console.warn(element3);
            }
            if (options3.throwUnescapedHTML) {
              const err = new HTMLInjectionError("One of your code blocks includes unescaped HTML.", element3.innerHTML);
              throw err;
            }
          }
          node2 = element3;
          const text7 = node2.textContent;
          const result = language2 ? highlight2(text7, { language: language2, ignoreIllegals: true }) : highlightAuto(text7);
          element3.innerHTML = result.value;
          updateClassName(element3, language2, result.language);
          element3.result = {
            language: result.language,
            re: result.relevance,
            relevance: result.relevance
          };
          if (result.secondBest) {
            element3.secondBest = {
              language: result.secondBest.language,
              relevance: result.secondBest.relevance
            };
          }
          fire("after:highlightElement", { el: element3, result, text: text7 });
        }
        function configure(userOptions) {
          options3 = inherit2(options3, userOptions);
        }
        const initHighlighting = () => {
          highlightAll();
          deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
        };
        function initHighlightingOnLoad() {
          highlightAll();
          deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
        }
        let wantsHighlight = false;
        function highlightAll() {
          if (document.readyState === "loading") {
            wantsHighlight = true;
            return;
          }
          const blocks = document.querySelectorAll(options3.cssSelector);
          blocks.forEach(highlightElement);
        }
        function boot() {
          if (wantsHighlight)
            highlightAll();
        }
        if (typeof window !== "undefined" && window.addEventListener) {
          window.addEventListener("DOMContentLoaded", boot, false);
        }
        function registerLanguage(languageName, languageDefinition) {
          let lang2 = null;
          try {
            lang2 = languageDefinition(hljs);
          } catch (error$1) {
            error5("Language definition for '{}' could not be registered.".replace("{}", languageName));
            if (!SAFE_MODE) {
              throw error$1;
            } else {
              error5(error$1);
            }
            lang2 = PLAINTEXT_LANGUAGE;
          }
          if (!lang2.name)
            lang2.name = languageName;
          languages2[languageName] = lang2;
          lang2.rawDefinition = languageDefinition.bind(null, hljs);
          if (lang2.aliases) {
            registerAliases(lang2.aliases, { languageName });
          }
        }
        function unregisterLanguage(languageName) {
          delete languages2[languageName];
          for (const alias of Object.keys(aliases)) {
            if (aliases[alias] === languageName) {
              delete aliases[alias];
            }
          }
        }
        function listLanguages() {
          return Object.keys(languages2);
        }
        function getLanguage(name15) {
          name15 = (name15 || "").toLowerCase();
          return languages2[name15] || languages2[aliases[name15]];
        }
        function registerAliases(aliasList, { languageName }) {
          if (typeof aliasList === "string") {
            aliasList = [aliasList];
          }
          aliasList.forEach((alias) => {
            aliases[alias.toLowerCase()] = languageName;
          });
        }
        function autoDetection(name15) {
          const lang2 = getLanguage(name15);
          return lang2 && !lang2.disableAutodetect;
        }
        function upgradePluginAPI(plugin) {
          if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
            plugin["before:highlightElement"] = (data) => {
              plugin["before:highlightBlock"](Object.assign({ block: data.el }, data));
            };
          }
          if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
            plugin["after:highlightElement"] = (data) => {
              plugin["after:highlightBlock"](Object.assign({ block: data.el }, data));
            };
          }
        }
        function addPlugin(plugin) {
          upgradePluginAPI(plugin);
          plugins.push(plugin);
        }
        function fire(event, args) {
          const cb2 = event;
          plugins.forEach(function(plugin) {
            if (plugin[cb2]) {
              plugin[cb2](args);
            }
          });
        }
        function deprecateHighlightBlock(el15) {
          deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
          deprecated("10.7.0", "Please use highlightElement now.");
          return highlightElement(el15);
        }
        Object.assign(hljs, {
          highlight: highlight2,
          highlightAuto,
          highlightAll,
          highlightElement,
          highlightBlock: deprecateHighlightBlock,
          configure,
          initHighlighting,
          initHighlightingOnLoad,
          registerLanguage,
          unregisterLanguage,
          listLanguages,
          getLanguage,
          registerAliases,
          autoDetection,
          inherit: inherit2,
          addPlugin
        });
        hljs.debugMode = function() {
          SAFE_MODE = false;
        };
        hljs.safeMode = function() {
          SAFE_MODE = true;
        };
        hljs.versionString = version;
        hljs.regex = {
          concat: concat2,
          lookahead,
          either: either2,
          optional: optional2,
          anyNumberOfTimes
        };
        for (const key in MODES) {
          if (typeof MODES[key] === "object") {
            deepFreeze$1(MODES[key]);
          }
        }
        Object.assign(hljs, MODES);
        return hljs;
      };
      var highlight = HLJS({});
      module.exports = highlight;
      highlight.HighlightJS = highlight;
      highlight.default = highlight;
    }
  });

  // output/Control.Bind/foreign.js
  var arrayBind = function(arr) {
    return function(f2) {
      var result = [];
      for (var i7 = 0, l2 = arr.length; i7 < l2; i7++) {
        Array.prototype.push.apply(result, f2(arr[i7]));
      }
      return result;
    };
  };

  // output/Control.Apply/foreign.js
  var arrayApply = function(fs) {
    return function(xs) {
      var l2 = fs.length;
      var k2 = xs.length;
      var result = new Array(l2 * k2);
      var n2 = 0;
      for (var i7 = 0; i7 < l2; i7++) {
        var f2 = fs[i7];
        for (var j2 = 0; j2 < k2; j2++) {
          result[n2++] = f2(xs[j2]);
        }
      }
      return result;
    };
  };

  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f2) {
      return function(g3) {
        return function(x3) {
          return f2(g3(x3));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };
  var composeFlipped = function(dictSemigroupoid) {
    var compose13 = compose(dictSemigroupoid);
    return function(f2) {
      return function(g3) {
        return compose13(g3)(f2);
      };
    };
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x3) {
      return x3;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f2) {
    return function(b4) {
      return function(a4) {
        return f2(a4)(b4);
      };
    };
  };
  var $$const = function(a4) {
    return function(v2) {
      return a4;
    };
  };
  var applyFlipped = function(x3) {
    return function(f2) {
      return f2(x3);
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f2) {
    return function(arr) {
      var l2 = arr.length;
      var result = new Array(l2);
      for (var i7 = 0; i7 < l2; i7++) {
        result[i7] = f2(arr[i7]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(fa) {
      return function(f2) {
        return map113(f2)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var voidLeft = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(f2) {
      return function(x3) {
        return map113($$const(x3))(f2);
      };
    };
  };
  var voidRight = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(x3) {
      return map113($$const(x3));
    };
  };
  var functorFn = {
    map: /* @__PURE__ */ compose(semigroupoidFn)
  };
  var functorArray = {
    map: arrayMap
  };
  var flap = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(ff2) {
      return function(x3) {
        return map113(function(f2) {
          return f2(x3);
        })(ff2);
      };
    };
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyFn = {
    apply: function(f2) {
      return function(g3) {
        return function(x3) {
          return f2(x3)(g3(x3));
        };
      };
    },
    Functor0: function() {
      return functorFn;
    }
  };
  var applyArray = {
    apply: arrayApply,
    Functor0: function() {
      return functorArray;
    }
  };
  var apply = function(dict) {
    return dict.apply;
  };
  var applyFirst = function(dictApply) {
    var apply12 = apply(dictApply);
    var map43 = map(dictApply.Functor0());
    return function(a4) {
      return function(b4) {
        return apply12(map43($$const)(a4))(b4);
      };
    };
  };
  var applySecond = function(dictApply) {
    var apply12 = apply(dictApply);
    var map43 = map(dictApply.Functor0());
    return function(a4) {
      return function(b4) {
        return apply12(map43($$const(identity2))(a4))(b4);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply12 = apply(dictApply);
    var map43 = map(dictApply.Functor0());
    return function(f2) {
      return function(a4) {
        return function(b4) {
          return apply12(map43(f2)(a4))(b4);
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var unless = function(dictApplicative) {
    var pure122 = pure(dictApplicative);
    return function(v2) {
      return function(v1) {
        if (!v2) {
          return v1;
        }
        ;
        if (v2) {
          return pure122(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 68, column 1 - line 68, column 65): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
  };
  var when = function(dictApplicative) {
    var pure122 = pure(dictApplicative);
    return function(v2) {
      return function(v1) {
        if (v2) {
          return v1;
        }
        ;
        if (!v2) {
          return pure122(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
  };
  var liftA1 = function(dictApplicative) {
    var apply11 = apply(dictApplicative.Apply0());
    var pure122 = pure(dictApplicative);
    return function(f2) {
      return function(a4) {
        return apply11(pure122(f2))(a4);
      };
    };
  };
  var applicativeFn = {
    pure: function(x3) {
      return function(v2) {
        return x3;
      };
    },
    Apply0: function() {
      return applyFn;
    }
  };
  var applicativeArray = {
    pure: function(x3) {
      return [x3];
    },
    Apply0: function() {
      return applyArray;
    }
  };

  // output/Control.Bind/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var discard = function(dict) {
    return dict.discard;
  };
  var bindArray = {
    bind: arrayBind,
    Apply0: function() {
      return applyArray;
    }
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisliFlipped = function(dictBind) {
    var bindFlipped1 = bindFlipped(dictBind);
    return function(f2) {
      return function(g3) {
        return function(a4) {
          return bindFlipped1(f2)(g3(a4));
        };
      };
    };
  };
  var composeKleisli = function(dictBind) {
    var bind124 = bind(dictBind);
    return function(f2) {
      return function(g3) {
        return function(a4) {
          return bind124(f2(a4))(g3);
        };
      };
    };
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };
  var join = function(dictBind) {
    var bind124 = bind(dictBind);
    return function(m2) {
      return bind124(m2)(identity3);
    };
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f2) {
    return function(init5) {
      return function(xs) {
        var acc = init5;
        var len = xs.length;
        for (var i7 = len - 1; i7 >= 0; i7--) {
          acc = f2(xs[i7])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f2) {
    return function(init5) {
      return function(xs) {
        var acc = init5;
        var len = xs.length;
        for (var i7 = 0; i7 < len; i7++) {
          acc = f2(acc)(xs[i7]);
        }
        return acc;
      };
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatString = function(s1) {
    return function(s22) {
      return s1 + s22;
    };
  };
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0)
        return ys;
      if (ys.length === 0)
        return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Symbol/index.js
  var reflectSymbol = function(dict) {
    return dict.reflectSymbol;
  };

  // output/Data.Void/index.js
  var absurd = function(a4) {
    var spin = function($copy_v) {
      var $tco_result;
      function $tco_loop(v2) {
        $copy_v = v2;
        return;
      }
      ;
      while (true) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return spin(a4);
  };

  // output/Record.Unsafe/foreign.js
  var unsafeHas = function(label6) {
    return function(rec) {
      return {}.hasOwnProperty.call(rec, label6);
    };
  };
  var unsafeGet = function(label6) {
    return function(rec) {
      return rec[label6];
    };
  };
  var unsafeSet = function(label6) {
    return function(value12) {
      return function(rec) {
        var copy2 = {};
        for (var key in rec) {
          if ({}.hasOwnProperty.call(rec, key)) {
            copy2[key] = rec[key];
          }
        }
        copy2[label6] = value12;
        return copy2;
      };
    };
  };
  var unsafeDelete = function(label6) {
    return function(rec) {
      var copy2 = {};
      for (var key in rec) {
        if (key !== label6 && {}.hasOwnProperty.call(rec, key)) {
          copy2[key] = rec[key];
        }
      }
      return copy2;
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupUnit = {
    append: function(v2) {
      return function(v1) {
        return unit;
      };
    }
  };
  var semigroupString = {
    append: concatString
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };
  var semigroupFn = function(dictSemigroup) {
    var append113 = append(dictSemigroup);
    return {
      append: function(f2) {
        return function(g3) {
          return function(x3) {
            return append113(f2(x3))(g3(x3));
          };
        };
      }
    };
  };

  // output/Control.Alt/index.js
  var alt = function(dict) {
    return dict.alt;
  };

  // output/Control.Plus/index.js
  var empty = function(dict) {
    return dict.empty;
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt2) {
    return function(eq21) {
      return function(gt2) {
        return function(x3) {
          return function(y2) {
            return x3 < y2 ? lt2 : x3 === y2 ? eq21 : gt2;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;
  var ordNumberImpl = unsafeCompareImpl;
  var ordStringImpl = unsafeCompareImpl;
  var ordCharImpl = unsafeCompareImpl;

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqBooleanImpl = refEq;
  var eqIntImpl = refEq;
  var eqNumberImpl = refEq;
  var eqCharImpl = refEq;
  var eqStringImpl = refEq;
  var eqArrayImpl = function(f2) {
    return function(xs) {
      return function(ys) {
        if (xs.length !== ys.length)
          return false;
        for (var i7 = 0; i7 < xs.length; i7++) {
          if (!f2(xs[i7])(ys[i7]))
            return false;
        }
        return true;
      };
    };
  };

  // output/Data.Eq/index.js
  var eqVoid = {
    eq: function(v2) {
      return function(v1) {
        return true;
      };
    }
  };
  var eqUnit = {
    eq: function(v2) {
      return function(v1) {
        return true;
      };
    }
  };
  var eqString = {
    eq: eqStringImpl
  };
  var eqRowNil = {
    eqRecord: function(v2) {
      return function(v1) {
        return function(v22) {
          return true;
        };
      };
    }
  };
  var eqRecord = function(dict) {
    return dict.eqRecord;
  };
  var eqRec = function() {
    return function(dictEqRecord) {
      return {
        eq: eqRecord(dictEqRecord)($$Proxy.value)
      };
    };
  };
  var eqNumber = {
    eq: eqNumberImpl
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eqChar = {
    eq: eqCharImpl
  };
  var eqBoolean = {
    eq: eqBooleanImpl
  };
  var eq1 = function(dict) {
    return dict.eq1;
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eq2 = /* @__PURE__ */ eq(eqBoolean);
  var eqArray = function(dictEq) {
    return {
      eq: eqArrayImpl(eq(dictEq))
    };
  };
  var eqRowCons = function(dictEqRecord) {
    var eqRecord1 = eqRecord(dictEqRecord);
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(dictEq) {
          var eq32 = eq(dictEq);
          return {
            eqRecord: function(v2) {
              return function(ra) {
                return function(rb2) {
                  var tail3 = eqRecord1($$Proxy.value)(ra)(rb2);
                  var key = reflectSymbol2($$Proxy.value);
                  var get4 = unsafeGet(key);
                  return eq32(get4(ra))(get4(rb2)) && tail3;
                };
              };
            }
          };
        };
      };
    };
  };
  var notEq = function(dictEq) {
    var eq32 = eq(dictEq);
    return function(x3) {
      return function(y2) {
        return eq2(eq32(x3)(y2))(false);
      };
    };
  };

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();
  var eqOrdering = {
    eq: function(v2) {
      return function(v1) {
        if (v2 instanceof LT && v1 instanceof LT) {
          return true;
        }
        ;
        if (v2 instanceof GT && v1 instanceof GT) {
          return true;
        }
        ;
        if (v2 instanceof EQ && v1 instanceof EQ) {
          return true;
        }
        ;
        return false;
      };
    }
  };

  // output/Data.Ring/foreign.js
  var intSub = function(x3) {
    return function(y2) {
      return x3 - y2 | 0;
    };
  };
  var numSub = function(n1) {
    return function(n2) {
      return n1 - n2;
    };
  };

  // output/Data.Semiring/foreign.js
  var intAdd = function(x3) {
    return function(y2) {
      return x3 + y2 | 0;
    };
  };
  var intMul = function(x3) {
    return function(y2) {
      return x3 * y2 | 0;
    };
  };
  var numAdd = function(n1) {
    return function(n2) {
      return n1 + n2;
    };
  };
  var numMul = function(n1) {
    return function(n2) {
      return n1 * n2;
    };
  };

  // output/Data.Semiring/index.js
  var zeroRecord = function(dict) {
    return dict.zeroRecord;
  };
  var zero = function(dict) {
    return dict.zero;
  };
  var semiringRecordNil = {
    addRecord: function(v2) {
      return function(v1) {
        return function(v22) {
          return {};
        };
      };
    },
    mulRecord: function(v2) {
      return function(v1) {
        return function(v22) {
          return {};
        };
      };
    },
    oneRecord: function(v2) {
      return function(v1) {
        return {};
      };
    },
    zeroRecord: function(v2) {
      return function(v1) {
        return {};
      };
    }
  };
  var semiringNumber = {
    add: numAdd,
    zero: 0,
    mul: numMul,
    one: 1
  };
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };
  var oneRecord = function(dict) {
    return dict.oneRecord;
  };
  var one = function(dict) {
    return dict.one;
  };
  var mulRecord = function(dict) {
    return dict.mulRecord;
  };
  var mul = function(dict) {
    return dict.mul;
  };
  var addRecord = function(dict) {
    return dict.addRecord;
  };
  var semiringRecord = function() {
    return function(dictSemiringRecord) {
      return {
        add: addRecord(dictSemiringRecord)($$Proxy.value),
        mul: mulRecord(dictSemiringRecord)($$Proxy.value),
        one: oneRecord(dictSemiringRecord)($$Proxy.value)($$Proxy.value),
        zero: zeroRecord(dictSemiringRecord)($$Proxy.value)($$Proxy.value)
      };
    };
  };
  var add = function(dict) {
    return dict.add;
  };
  var semiringRecordCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function(dictSemiringRecord) {
        var addRecord1 = addRecord(dictSemiringRecord);
        var mulRecord1 = mulRecord(dictSemiringRecord);
        var oneRecord1 = oneRecord(dictSemiringRecord);
        var zeroRecord1 = zeroRecord(dictSemiringRecord);
        return function(dictSemiring) {
          var add1 = add(dictSemiring);
          var mul1 = mul(dictSemiring);
          var one1 = one(dictSemiring);
          var zero1 = zero(dictSemiring);
          return {
            addRecord: function(v2) {
              return function(ra) {
                return function(rb2) {
                  var tail3 = addRecord1($$Proxy.value)(ra)(rb2);
                  var key = reflectSymbol2($$Proxy.value);
                  var insert11 = unsafeSet(key);
                  var get4 = unsafeGet(key);
                  return insert11(add1(get4(ra))(get4(rb2)))(tail3);
                };
              };
            },
            mulRecord: function(v2) {
              return function(ra) {
                return function(rb2) {
                  var tail3 = mulRecord1($$Proxy.value)(ra)(rb2);
                  var key = reflectSymbol2($$Proxy.value);
                  var insert11 = unsafeSet(key);
                  var get4 = unsafeGet(key);
                  return insert11(mul1(get4(ra))(get4(rb2)))(tail3);
                };
              };
            },
            oneRecord: function(v2) {
              return function(v1) {
                var tail3 = oneRecord1($$Proxy.value)($$Proxy.value);
                var key = reflectSymbol2($$Proxy.value);
                var insert11 = unsafeSet(key);
                return insert11(one1)(tail3);
              };
            },
            zeroRecord: function(v2) {
              return function(v1) {
                var tail3 = zeroRecord1($$Proxy.value)($$Proxy.value);
                var key = reflectSymbol2($$Proxy.value);
                var insert11 = unsafeSet(key);
                return insert11(zero1)(tail3);
              };
            }
          };
        };
      };
    };
  };

  // output/Data.Ring/index.js
  var sub = function(dict) {
    return dict.sub;
  };
  var ringNumber = {
    sub: numSub,
    Semiring0: function() {
      return semiringNumber;
    }
  };
  var ringInt = {
    sub: intSub,
    Semiring0: function() {
      return semiringInt;
    }
  };
  var negate = function(dictRing) {
    var sub1 = sub(dictRing);
    var zero7 = zero(dictRing.Semiring0());
    return function(a4) {
      return sub1(zero7)(a4);
    };
  };

  // output/Data.Ord/index.js
  var eqRec2 = /* @__PURE__ */ eqRec();
  var notEq2 = /* @__PURE__ */ notEq(eqOrdering);
  var ordString = /* @__PURE__ */ function() {
    return {
      compare: ordStringImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqString;
      }
    };
  }();
  var ordRecordNil = {
    compareRecord: function(v2) {
      return function(v1) {
        return function(v22) {
          return EQ.value;
        };
      };
    },
    EqRecord0: function() {
      return eqRowNil;
    }
  };
  var ordNumber = /* @__PURE__ */ function() {
    return {
      compare: ordNumberImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqNumber;
      }
    };
  }();
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var ordChar = /* @__PURE__ */ function() {
    return {
      compare: ordCharImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqChar;
      }
    };
  }();
  var compareRecord = function(dict) {
    return dict.compareRecord;
  };
  var ordRecord = function() {
    return function(dictOrdRecord) {
      var eqRec13 = eqRec2(dictOrdRecord.EqRecord0());
      return {
        compare: compareRecord(dictOrdRecord)($$Proxy.value),
        Eq0: function() {
          return eqRec13;
        }
      };
    };
  };
  var compare = function(dict) {
    return dict.compare;
  };
  var greaterThan = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(a1) {
      return function(a22) {
        var v2 = compare32(a1)(a22);
        if (v2 instanceof GT) {
          return true;
        }
        ;
        return false;
      };
    };
  };
  var greaterThanOrEq = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(a1) {
      return function(a22) {
        var v2 = compare32(a1)(a22);
        if (v2 instanceof LT) {
          return false;
        }
        ;
        return true;
      };
    };
  };
  var lessThan = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(a1) {
      return function(a22) {
        var v2 = compare32(a1)(a22);
        if (v2 instanceof LT) {
          return true;
        }
        ;
        return false;
      };
    };
  };
  var lessThanOrEq = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(a1) {
      return function(a22) {
        var v2 = compare32(a1)(a22);
        if (v2 instanceof GT) {
          return false;
        }
        ;
        return true;
      };
    };
  };
  var max = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(x3) {
      return function(y2) {
        var v2 = compare32(x3)(y2);
        if (v2 instanceof LT) {
          return y2;
        }
        ;
        if (v2 instanceof EQ) {
          return x3;
        }
        ;
        if (v2 instanceof GT) {
          return x3;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v2.constructor.name]);
      };
    };
  };
  var min = function(dictOrd) {
    var compare32 = compare(dictOrd);
    return function(x3) {
      return function(y2) {
        var v2 = compare32(x3)(y2);
        if (v2 instanceof LT) {
          return x3;
        }
        ;
        if (v2 instanceof EQ) {
          return x3;
        }
        ;
        if (v2 instanceof GT) {
          return y2;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [v2.constructor.name]);
      };
    };
  };
  var ordRecordCons = function(dictOrdRecord) {
    var compareRecord1 = compareRecord(dictOrdRecord);
    var eqRowCons5 = eqRowCons(dictOrdRecord.EqRecord0())();
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        var eqRowCons1 = eqRowCons5(dictIsSymbol);
        return function(dictOrd) {
          var compare32 = compare(dictOrd);
          var eqRowCons22 = eqRowCons1(dictOrd.Eq0());
          return {
            compareRecord: function(v2) {
              return function(ra) {
                return function(rb2) {
                  var key = reflectSymbol2($$Proxy.value);
                  var left4 = compare32(unsafeGet(key)(ra))(unsafeGet(key)(rb2));
                  var $95 = notEq2(left4)(EQ.value);
                  if ($95) {
                    return left4;
                  }
                  ;
                  return compareRecord1($$Proxy.value)(ra)(rb2);
                };
              };
            },
            EqRecord0: function() {
              return eqRowCons22;
            }
          };
        };
      };
    };
  };
  var clamp = function(dictOrd) {
    var min1 = min(dictOrd);
    var max1 = max(dictOrd);
    return function(low2) {
      return function(hi) {
        return function(x3) {
          return min1(hi)(max1(low2)(x3));
        };
      };
    };
  };
  var between = function(dictOrd) {
    var lessThan1 = lessThan(dictOrd);
    var greaterThan1 = greaterThan(dictOrd);
    return function(low2) {
      return function(hi) {
        return function(x3) {
          if (lessThan1(x3)(low2)) {
            return false;
          }
          ;
          if (greaterThan1(x3)(hi)) {
            return false;
          }
          ;
          return true;
        };
      };
    };
  };
  var abs = function(dictOrd) {
    var greaterThanOrEq1 = greaterThanOrEq(dictOrd);
    return function(dictRing) {
      var zero7 = zero(dictRing.Semiring0());
      var negate1 = negate(dictRing);
      return function(x3) {
        var $99 = greaterThanOrEq1(x3)(zero7);
        if ($99) {
          return x3;
        }
        ;
        return negate1(x3);
      };
    };
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var boundedChar = {
    top: topChar,
    bottom: bottomChar,
    Ord0: function() {
      return ordChar;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n2) {
    return n2.toString();
  };
  var showNumberImpl = function(n2) {
    var str2 = n2.toString();
    return isNaN(str2 + ".0") ? str2 : str2 + ".0";
  };
  var showStringImpl = function(s3) {
    var l2 = s3.length;
    return '"' + s3.replace(/[\0-\x1F\x7F"\\]/g, function(c3, i7) {
      switch (c3) {
        case '"':
        case "\\":
          return "\\" + c3;
        case "\x07":
          return "\\a";
        case "\b":
          return "\\b";
        case "\f":
          return "\\f";
        case "\n":
          return "\\n";
        case "\r":
          return "\\r";
        case "	":
          return "\\t";
        case "\v":
          return "\\v";
      }
      var k2 = i7 + 1;
      var empty5 = k2 < l2 && s3[k2] >= "0" && s3[k2] <= "9" ? "\\&" : "";
      return "\\" + c3.charCodeAt(0).toString(10) + empty5;
    }) + '"';
  };
  var cons = function(head6) {
    return function(tail3) {
      return [head6].concat(tail3);
    };
  };
  var intercalate = function(separator) {
    return function(xs) {
      return xs.join(separator);
    };
  };

  // output/Data.Show/index.js
  var showString = {
    show: showStringImpl
  };
  var showRecordFieldsNil = {
    showRecordFields: function(v2) {
      return function(v1) {
        return [];
      };
    }
  };
  var showRecordFields = function(dict) {
    return dict.showRecordFields;
  };
  var showRecord = function() {
    return function() {
      return function(dictShowRecordFields) {
        var showRecordFields1 = showRecordFields(dictShowRecordFields);
        return {
          show: function(record) {
            var v2 = showRecordFields1($$Proxy.value)(record);
            if (v2.length === 0) {
              return "{}";
            }
            ;
            return intercalate(" ")(["{", intercalate(", ")(v2), "}"]);
          }
        };
      };
    };
  };
  var showNumber = {
    show: showNumberImpl
  };
  var showInt = {
    show: showIntImpl
  };
  var showBoolean = {
    show: function(v2) {
      if (v2) {
        return "true";
      }
      ;
      if (!v2) {
        return "false";
      }
      ;
      throw new Error("Failed pattern match at Data.Show (line 23, column 1 - line 25, column 23): " + [v2.constructor.name]);
    }
  };
  var show = function(dict) {
    return dict.show;
  };
  var showRecordFieldsCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictShowRecordFields) {
      var showRecordFields1 = showRecordFields(dictShowRecordFields);
      return function(dictShow) {
        var show110 = show(dictShow);
        return {
          showRecordFields: function(v2) {
            return function(record) {
              var tail3 = showRecordFields1($$Proxy.value)(record);
              var key = reflectSymbol2($$Proxy.value);
              var focus2 = unsafeGet(key)(record);
              return cons(intercalate(": ")([key, show110(focus2)]))(tail3);
            };
          }
        };
      };
    };
  };

  // output/Data.Generic.Rep/index.js
  var Inl = /* @__PURE__ */ function() {
    function Inl2(value0) {
      this.value0 = value0;
    }
    ;
    Inl2.create = function(value0) {
      return new Inl2(value0);
    };
    return Inl2;
  }();
  var Inr = /* @__PURE__ */ function() {
    function Inr2(value0) {
      this.value0 = value0;
    }
    ;
    Inr2.create = function(value0) {
      return new Inr2(value0);
    };
    return Inr2;
  }();
  var NoArguments = /* @__PURE__ */ function() {
    function NoArguments2() {
    }
    ;
    NoArguments2.value = new NoArguments2();
    return NoArguments2;
  }();
  var Constructor = function(x3) {
    return x3;
  };
  var Argument = function(x3) {
    return x3;
  };
  var to = function(dict) {
    return dict.to;
  };
  var from = function(dict) {
    return dict.from;
  };

  // output/Data.Maybe/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var semigroupMaybe = function(dictSemigroup) {
    var append113 = append(dictSemigroup);
    return {
      append: function(v2) {
        return function(v1) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v1 instanceof Nothing) {
            return v2;
          }
          ;
          if (v2 instanceof Just && v1 instanceof Just) {
            return new Just(append113(v2.value0)(v1.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Maybe (line 182, column 1 - line 185, column 43): " + [v2.constructor.name, v1.constructor.name]);
        };
      }
    };
  };
  var monoidMaybe = function(dictSemigroup) {
    var semigroupMaybe1 = semigroupMaybe(dictSemigroup);
    return {
      mempty: Nothing.value,
      Semigroup0: function() {
        return semigroupMaybe1;
      }
    };
  };
  var maybe$prime = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22 instanceof Nothing) {
          return v2(unit);
        }
        ;
        if (v22 instanceof Just) {
          return v1(v22.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 250, column 1 - line 250, column 62): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
      };
    };
  };
  var maybe = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22 instanceof Nothing) {
          return v2;
        }
        ;
        if (v22 instanceof Just) {
          return v1(v22.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
  var functorMaybe = {
    map: function(v2) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v2(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe$prime = function(a4) {
    return maybe$prime(a4)(identity4);
  };
  var fromMaybe = function(a4) {
    return maybe(a4)(identity4);
  };
  var fromJust = function() {
    return function(v2) {
      if (v2 instanceof Just) {
        return v2.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v2.constructor.name]);
    };
  };
  var eqMaybe = function(dictEq) {
    var eq21 = eq(dictEq);
    return {
      eq: function(x3) {
        return function(y2) {
          if (x3 instanceof Nothing && y2 instanceof Nothing) {
            return true;
          }
          ;
          if (x3 instanceof Just && y2 instanceof Just) {
            return eq21(x3.value0)(y2.value0);
          }
          ;
          return false;
        };
      }
    };
  };
  var applyMaybe = {
    apply: function(v2) {
      return function(v1) {
        if (v2 instanceof Just) {
          return map2(v2.value0)(v1);
        }
        ;
        if (v2 instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v2) {
      return function(v1) {
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        if (v2 instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var applicativeMaybe = /* @__PURE__ */ function() {
    return {
      pure: Just.create,
      Apply0: function() {
        return applyMaybe;
      }
    };
  }();
  var altMaybe = {
    alt: function(v2) {
      return function(v1) {
        if (v2 instanceof Nothing) {
          return v1;
        }
        ;
        return v2;
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var plusMaybe = /* @__PURE__ */ function() {
    return {
      empty: Nothing.value,
      Alt0: function() {
        return altMaybe;
      }
    };
  }();
  var alternativeMaybe = {
    Applicative0: function() {
      return applicativeMaybe;
    },
    Plus1: function() {
      return plusMaybe;
    }
  };

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left3(value0) {
      this.value0 = value0;
    }
    ;
    Left3.create = function(value0) {
      return new Left3(value0);
    };
    return Left3;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right3(value0) {
      this.value0 = value0;
    }
    ;
    Right3.create = function(value0) {
      return new Right3(value0);
    };
    return Right3;
  }();
  var note = function(a4) {
    return maybe(new Left(a4))(Right.create);
  };
  var functorEither = {
    map: function(f2) {
      return function(m2) {
        if (m2 instanceof Left) {
          return new Left(m2.value0);
        }
        ;
        if (m2 instanceof Right) {
          return new Right(f2(m2.value0));
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };
  var map3 = /* @__PURE__ */ map(functorEither);
  var fromRight = function(v2) {
    return function(v1) {
      if (v1 instanceof Right) {
        return v1.value0;
      }
      ;
      return v2;
    };
  };
  var eqEither = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(dictEq1) {
      var eq111 = eq(dictEq1);
      return {
        eq: function(x3) {
          return function(y2) {
            if (x3 instanceof Left && y2 instanceof Left) {
              return eq21(x3.value0)(y2.value0);
            }
            ;
            if (x3 instanceof Right && y2 instanceof Right) {
              return eq111(x3.value0)(y2.value0);
            }
            ;
            return false;
          };
        }
      };
    };
  };
  var either = function(v2) {
    return function(v1) {
      return function(v22) {
        if (v22 instanceof Left) {
          return v2(v22.value0);
        }
        ;
        if (v22 instanceof Right) {
          return v1(v22.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
      };
    };
  };
  var applyEither = {
    apply: function(v2) {
      return function(v1) {
        if (v2 instanceof Left) {
          return new Left(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return map3(v2.value0)(v1);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 70, column 1 - line 72, column 30): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorEither;
    }
  };
  var bindEither = {
    bind: /* @__PURE__ */ either(function(e) {
      return function(v2) {
        return new Left(e);
      };
    })(function(a4) {
      return function(f2) {
        return f2(a4);
      };
    }),
    Apply0: function() {
      return applyEither;
    }
  };
  var altEither = {
    alt: function(v2) {
      return function(v1) {
        if (v2 instanceof Left) {
          return v1;
        }
        ;
        return v2;
      };
    },
    Functor0: function() {
      return functorEither;
    }
  };

  // output/Control.Lazy/index.js
  var defer = function(dict) {
    return dict.defer;
  };

  // output/Data.EuclideanRing/foreign.js
  var intDegree = function(x3) {
    return Math.min(Math.abs(x3), 2147483647);
  };
  var intDiv = function(x3) {
    return function(y2) {
      if (y2 === 0)
        return 0;
      return y2 > 0 ? Math.floor(x3 / y2) : -Math.floor(x3 / -y2);
    };
  };
  var intMod = function(x3) {
    return function(y2) {
      if (y2 === 0)
        return 0;
      var yy = Math.abs(y2);
      return (x3 % yy + yy) % yy;
    };
  };

  // output/Data.CommutativeRing/index.js
  var commutativeRingInt = {
    Ring0: function() {
      return ringInt;
    }
  };

  // output/Data.EuclideanRing/index.js
  var mod = function(dict) {
    return dict.mod;
  };
  var euclideanRingInt = {
    degree: intDegree,
    div: intDiv,
    mod: intMod,
    CommutativeRing0: function() {
      return commutativeRingInt;
    }
  };
  var div = function(dict) {
    return dict.div;
  };

  // output/Data.Monoid/index.js
  var monoidUnit = {
    mempty: unit,
    Semigroup0: function() {
      return semigroupUnit;
    }
  };
  var monoidString = {
    mempty: "",
    Semigroup0: function() {
      return semigroupString;
    }
  };
  var monoidArray = {
    mempty: [],
    Semigroup0: function() {
      return semigroupArray;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };
  var monoidFn = function(dictMonoid) {
    var mempty118 = mempty(dictMonoid);
    var semigroupFn2 = semigroupFn(dictMonoid.Semigroup0());
    return {
      mempty: function(v2) {
        return mempty118;
      },
      Semigroup0: function() {
        return semigroupFn2;
      }
    };
  };
  var guard = function(dictMonoid) {
    var mempty118 = mempty(dictMonoid);
    return function(v2) {
      return function(v1) {
        if (v2) {
          return v1;
        }
        ;
        if (!v2) {
          return mempty118;
        }
        ;
        throw new Error("Failed pattern match at Data.Monoid (line 96, column 1 - line 96, column 49): " + [v2.constructor.name, v1.constructor.name]);
      };
    };
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var uncurry = function(f2) {
    return function(v2) {
      return f2(v2.value0)(v2.value1);
    };
  };
  var snd = function(v2) {
    return v2.value1;
  };
  var fst = function(v2) {
    return v2.value0;
  };
  var eqTuple = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(dictEq1) {
      var eq111 = eq(dictEq1);
      return {
        eq: function(x3) {
          return function(y2) {
            return eq21(x3.value0)(y2.value0) && eq111(x3.value1)(y2.value1);
          };
        }
      };
    };
  };

  // output/Data.Bifunctor/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var bimap = function(dict) {
    return dict.bimap;
  };
  var lmap = function(dictBifunctor) {
    var bimap1 = bimap(dictBifunctor);
    return function(f2) {
      return bimap1(f2)(identity5);
    };
  };
  var rmap = function(dictBifunctor) {
    return bimap(dictBifunctor)(identity5);
  };
  var bifunctorTuple = {
    bimap: function(f2) {
      return function(g3) {
        return function(v2) {
          return new Tuple(f2(v2.value0), g3(v2.value1));
        };
      };
    }
  };
  var bifunctorEither = {
    bimap: function(v2) {
      return function(v1) {
        return function(v22) {
          if (v22 instanceof Left) {
            return new Left(v2(v22.value0));
          }
          ;
          if (v22 instanceof Right) {
            return new Right(v1(v22.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
        };
      };
    }
  };

  // output/Data.Monoid.Dual/index.js
  var Dual = function(x3) {
    return x3;
  };
  var semigroupDual = function(dictSemigroup) {
    var append113 = append(dictSemigroup);
    return {
      append: function(v2) {
        return function(v1) {
          return append113(v1)(v2);
        };
      }
    };
  };
  var monoidDual = function(dictMonoid) {
    var semigroupDual1 = semigroupDual(dictMonoid.Semigroup0());
    return {
      mempty: mempty(dictMonoid),
      Semigroup0: function() {
        return semigroupDual1;
      }
    };
  };

  // output/Data.Monoid.Endo/index.js
  var Endo = function(x3) {
    return x3;
  };
  var semigroupEndo = function(dictSemigroupoid) {
    var compose4 = compose(dictSemigroupoid);
    return {
      append: function(v2) {
        return function(v1) {
          return compose4(v2)(v1);
        };
      }
    };
  };
  var monoidEndo = function(dictCategory) {
    var semigroupEndo1 = semigroupEndo(dictCategory.Semigroupoid0());
    return {
      mempty: identity(dictCategory),
      Semigroup0: function() {
        return semigroupEndo1;
      }
    };
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x3) {
    return x3;
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var wrap = function() {
    return coerce2;
  };
  var unwrap = function() {
    return coerce2;
  };
  var unwrap1 = /* @__PURE__ */ unwrap();
  var un = function() {
    return function(v2) {
      return unwrap1;
    };
  };
  var over = function() {
    return function() {
      return function(v2) {
        return coerce2;
      };
    };
  };

  // output/Data.Foldable/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var unwrap2 = /* @__PURE__ */ unwrap();
  var monoidEndo2 = /* @__PURE__ */ monoidEndo(categoryFn);
  var monoidDual2 = /* @__PURE__ */ monoidDual(monoidEndo2);
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond4 = applySecond(dictApplicative.Apply0());
    var pure64 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f2) {
        return foldr22(function($449) {
          return applySecond4(f2($449));
        })(pure64(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_1 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_1(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var indexl = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(idx) {
      var go2 = function(cursor2) {
        return function(a4) {
          if (cursor2.elem instanceof Just) {
            return cursor2;
          }
          ;
          var $291 = cursor2.pos === idx;
          if ($291) {
            return {
              elem: new Just(a4),
              pos: cursor2.pos
            };
          }
          ;
          return {
            pos: cursor2.pos + 1 | 0,
            elem: cursor2.elem
          };
        };
      };
      var $450 = foldl22(go2)({
        elem: Nothing.value,
        pos: 0
      });
      return function($451) {
        return function(v2) {
          return v2.elem;
        }($450($451));
      };
    };
  };
  var intercalate2 = function(dictFoldable) {
    var foldl22 = foldl(dictFoldable);
    return function(dictMonoid) {
      var append39 = append(dictMonoid.Semigroup0());
      var mempty33 = mempty(dictMonoid);
      return function(sep) {
        return function(xs) {
          var go2 = function(v2) {
            return function(x3) {
              if (v2.init) {
                return {
                  init: false,
                  acc: x3
                };
              }
              ;
              return {
                init: false,
                acc: append39(v2.acc)(append39(sep)(x3))
              };
            };
          };
          return foldl22(go2)({
            init: true,
            acc: mempty33
          })(xs).acc;
        };
      };
    };
  };
  var foldableMaybe = {
    foldr: function(v2) {
      return function(z2) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return z2;
          }
          ;
          if (v1 instanceof Just) {
            return v2(v1.value0)(z2);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, z2.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldl: function(v2) {
      return function(z2) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return z2;
          }
          ;
          if (v1 instanceof Just) {
            return v2(z2)(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, z2.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty33 = mempty(dictMonoid);
      return function(v2) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty33;
          }
          ;
          if (v1 instanceof Just) {
            return v2(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldableEither = {
    foldr: function(v2) {
      return function(z2) {
        return function(v1) {
          if (v1 instanceof Left) {
            return z2;
          }
          ;
          if (v1 instanceof Right) {
            return v2(v1.value0)(z2);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v2.constructor.name, z2.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldl: function(v2) {
      return function(z2) {
        return function(v1) {
          if (v1 instanceof Left) {
            return z2;
          }
          ;
          if (v1 instanceof Right) {
            return v2(z2)(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v2.constructor.name, z2.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty33 = mempty(dictMonoid);
      return function(v2) {
        return function(v1) {
          if (v1 instanceof Left) {
            return mempty33;
          }
          ;
          if (v1 instanceof Right) {
            return v2(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 181, column 1 - line 187, column 28): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append39 = append(dictMonoid.Semigroup0());
      var mempty33 = mempty(dictMonoid);
      return function(f2) {
        return foldr22(function(x3) {
          return function(acc) {
            return append39(f2(x3))(acc);
          };
        })(mempty33);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };
  var foldMap = function(dict) {
    return dict.foldMap;
  };
  var foldlDefault = function(dictFoldable) {
    var foldMap25 = foldMap(dictFoldable)(monoidDual2);
    return function(c3) {
      return function(u3) {
        return function(xs) {
          return unwrap2(unwrap2(foldMap25(function() {
            var $452 = flip(c3);
            return function($453) {
              return Dual(Endo($452($453)));
            };
          }())(xs)))(u3);
        };
      };
    };
  };
  var foldrDefault = function(dictFoldable) {
    var foldMap25 = foldMap(dictFoldable)(monoidEndo2);
    return function(c3) {
      return function(u3) {
        return function(xs) {
          return unwrap2(foldMap25(function($454) {
            return Endo(c3($454));
          })(xs))(u3);
        };
      };
    };
  };
  var fold = function(dictFoldable) {
    var foldMap25 = foldMap(dictFoldable);
    return function(dictMonoid) {
      return foldMap25(dictMonoid)(identity6);
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a4) {
    return function() {
      return a4;
    };
  };
  var bindE = function(a4) {
    return function(f2) {
      return function() {
        return f2(a4())();
      };
    };
  };

  // output/Control.Monad/index.js
  var whenM = function(dictMonad) {
    var bind61 = bind(dictMonad.Bind1());
    var when11 = when(dictMonad.Applicative0());
    return function(mb) {
      return function(m2) {
        return bind61(mb)(function(b4) {
          return when11(b4)(m2);
        });
      };
    };
  };
  var liftM1 = function(dictMonad) {
    var bind61 = bind(dictMonad.Bind1());
    var pure64 = pure(dictMonad.Applicative0());
    return function(f2) {
      return function(a4) {
        return bind61(a4)(function(a$prime5) {
          return pure64(f2(a$prime5));
        });
      };
    };
  };
  var ap = function(dictMonad) {
    var bind61 = bind(dictMonad.Bind1());
    var pure64 = pure(dictMonad.Applicative0());
    return function(f2) {
      return function(a4) {
        return bind61(f2)(function(f$prime) {
          return bind61(a4)(function(a$prime5) {
            return pure64(f$prime(a$prime5));
          });
        });
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name15, moduleName, init5) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init5();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
  var lift22 = /* @__PURE__ */ lift2(applyEffect);
  var semigroupEffect = function(dictSemigroup) {
    return {
      append: lift22(append(dictSemigroup))
    };
  };
  var monoidEffect = function(dictMonoid) {
    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
    return {
      mempty: pureE(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupEffect1;
      }
    };
  };

  // output/React.Basic.DOM.Client/foreign.js
  var import_client = __toESM(require_client(), 1);
  var createRoot = (container5) => () => import_client.default.createRoot(container5);
  var renderRoot = (root2) => (children2) => () => root2.render(children2);

  // output/Control.Monad.Reader.Class/index.js
  var ask = function(dict) {
    return dict.ask;
  };

  // output/Data.Identity/index.js
  var Identity = function(x3) {
    return x3;
  };
  var functorIdentity = {
    map: function(f2) {
      return function(m2) {
        return f2(m2);
      };
    }
  };
  var applyIdentity = {
    apply: function(v2) {
      return function(v1) {
        return v2(v1);
      };
    },
    Functor0: function() {
      return functorIdentity;
    }
  };
  var bindIdentity = {
    bind: function(v2) {
      return function(f2) {
        return f2(v2);
      };
    },
    Apply0: function() {
      return applyIdentity;
    }
  };
  var applicativeIdentity = {
    pure: Identity,
    Apply0: function() {
      return applyIdentity;
    }
  };
  var monadIdentity = {
    Applicative0: function() {
      return applicativeIdentity;
    },
    Bind1: function() {
      return bindIdentity;
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var modifyImpl = function(f2) {
    return function(ref) {
      return function() {
        var t = f2(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var $$new = _new;
  var modify$prime = modifyImpl;
  var modify = function(f2) {
    return modify$prime(function(s3) {
      var s$prime2 = f2(s3);
      return {
        state: s$prime2,
        value: s$prime2
      };
    });
  };
  var modify_ = function(f2) {
    return function(s3) {
      return $$void2(modify(f2)(s3));
    };
  };

  // output/Control.Monad.Rec.Class/index.js
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var map4 = /* @__PURE__ */ map(functorEffect);
  var Loop = /* @__PURE__ */ function() {
    function Loop2(value0) {
      this.value0 = value0;
    }
    ;
    Loop2.create = function(value0) {
      return new Loop2(value0);
    };
    return Loop2;
  }();
  var Done = /* @__PURE__ */ function() {
    function Done2(value0) {
      this.value0 = value0;
    }
    ;
    Done2.create = function(value0) {
      return new Done2(value0);
    };
    return Done2;
  }();
  var tailRecM = function(dict) {
    return dict.tailRecM;
  };
  var monadRecEffect = {
    tailRecM: function(f2) {
      return function(a4) {
        var fromDone = function(v2) {
          if (v2 instanceof Done) {
            return v2.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 113, column 30 - line 113, column 44): " + [v2.constructor.name]);
        };
        return function __do10() {
          var r2 = bindFlipped2($$new)(f2(a4))();
          (function() {
            while (!function __do11() {
              var v2 = read(r2)();
              if (v2 instanceof Loop) {
                var e = f2(v2.value0)();
                write(e)(r2)();
                return false;
              }
              ;
              if (v2 instanceof Done) {
                return true;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 104, column 22 - line 109, column 28): " + [v2.constructor.name]);
            }()) {
            }
            ;
            return {};
          })();
          return map4(fromDone)(read(r2))();
        };
      };
    },
    Monad0: function() {
      return monadEffect;
    }
  };
  var forever = function(dictMonadRec) {
    var tailRecM1 = tailRecM(dictMonadRec);
    var voidRight6 = voidRight(dictMonadRec.Monad0().Bind1().Apply0().Functor0());
    return function(ma) {
      return tailRecM1(function(u3) {
        return voidRight6(new Loop(u3))(ma);
      })(unit);
    };
  };

  // output/Effect.Class/index.js
  var monadEffectEffect = {
    liftEffect: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/React.Basic.Hooks/foreign.js
  var import_react = __toESM(require_react(), 1);
  var useEqCache = (eq21, a4) => {
    const memoRef = import_react.default.useRef(a4);
    if (memoRef.current !== a4 && !eq21(memoRef.current, a4)) {
      memoRef.current = a4;
    }
    return memoRef.current;
  };
  function reactChildrenToArray(children2) {
    return import_react.default.Children.toArray(children2);
  }
  var memo_ = import_react.default.memo;
  var memoEq_ = import_react.default.memo;
  function useState_(tuple, initialState) {
    const [state3, setState] = import_react.default.useState(typeof initialState === "function" ? () => initialState : initialState);
    if (!setState.hasOwnProperty("$$reactBasicHooks$$cachedSetState")) {
      setState.$$reactBasicHooks$$cachedSetState = (update) => () => setState(update);
    }
    return tuple(state3, setState.$$reactBasicHooks$$cachedSetState);
  }
  function useEffect_(eq21, deps, effect) {
    const memoizedKey = useEqCache(eq21, deps);
    import_react.default.useEffect(effect, [memoizedKey]);
  }
  function useEffectAlways_(effect) {
    return import_react.default.useEffect(effect);
  }
  function useLayoutEffect_(eq21, deps, effect) {
    const memoizedKey = useEqCache(eq21, deps);
    import_react.default.useLayoutEffect(effect, [memoizedKey]);
  }
  function useLayoutEffectAlways_(effect) {
    return import_react.default.useLayoutEffect(effect);
  }
  var useRef_ = import_react.default.useRef;
  function readRef_(ref) {
    return ref.current;
  }
  function writeRef_(ref, a4) {
    ref.current = a4;
  }
  var useContext_ = import_react.default.useContext;
  function useMemo_(eq21, deps, computeA) {
    const memoizedKey = useEqCache(eq21, deps);
    return import_react.default.useMemo(computeA, [memoizedKey]);
  }
  var useDebugValue_ = import_react.default.useDebugValue;
  var useId_ = import_react.default.useId;
  var useDeferredValue_ = import_react.default.useDeferredValue;
  var useSyncExternalStore2_ = import_react.default.useSyncExternalStore;
  var useSyncExternalStore3_ = import_react.default.useSyncExternalStore;
  function unsafeSetDisplayName(displayName2, component26) {
    component26.displayName = displayName2;
    component26.toString = () => displayName2;
    return component26;
  }

  // output/Data.Function.Uncurried/foreign.js
  var mkFn2 = function(fn) {
    return function(a4, b4) {
      return fn(a4)(b4);
    };
  };
  var mkFn3 = function(fn) {
    return function(a4, b4, c3) {
      return fn(a4)(b4)(c3);
    };
  };
  var runFn2 = function(fn) {
    return function(a4) {
      return function(b4) {
        return fn(a4, b4);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a4) {
      return function(b4) {
        return function(c3) {
          return fn(a4, b4, c3);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a4) {
      return function(b4) {
        return function(c3) {
          return function(d2) {
            return fn(a4, b4, c3, d2);
          };
        };
      };
    };
  };

  // output/Data.Nullable/foreign.js
  var nullImpl = null;
  function nullable(a4, r2, f2) {
    return a4 == null ? r2 : f2(a4);
  }

  // output/Data.Nullable/index.js
  var toMaybe = function(n2) {
    return nullable(n2, Nothing.value, Just.create);
  };

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn1 = function mkEffectFn12(fn) {
    return function(x3) {
      return fn(x3)();
    };
  };
  var mkEffectFn2 = function mkEffectFn22(fn) {
    return function(a4, b4) {
      return fn(a4)(b4)();
    };
  };
  var runEffectFn1 = function runEffectFn12(fn) {
    return function(a4) {
      return function() {
        return fn(a4);
      };
    };
  };
  var runEffectFn2 = function runEffectFn22(fn) {
    return function(a4) {
      return function(b4) {
        return function() {
          return fn(a4, b4);
        };
      };
    };
  };

  // output/Effect.Uncurried/index.js
  var semigroupEffectFn1 = function(dictSemigroup) {
    var append39 = append(semigroupEffect(dictSemigroup));
    return {
      append: function(f1) {
        return function(f2) {
          return mkEffectFn1(function(a4) {
            return append39(runEffectFn1(f1)(a4))(runEffectFn1(f2)(a4));
          });
        };
      }
    };
  };
  var monoidEffectFn1 = function(dictMonoid) {
    var mempty33 = mempty(monoidEffect(dictMonoid));
    var semigroupEffectFn11 = semigroupEffectFn1(dictMonoid.Semigroup0());
    return {
      mempty: mkEffectFn1(function(v2) {
        return mempty33;
      }),
      Semigroup0: function() {
        return semigroupEffectFn11;
      }
    };
  };

  // output/React.Basic/foreign.js
  var import_react2 = __toESM(require_react(), 1);
  var createElement = import_react2.createElement;
  var Fragment = import_react2.Fragment;
  var empty2 = null;
  function element(component26) {
    return (props) => Array.isArray(props.children) ? createElement.apply(null, [component26, props].concat(props.children)) : createElement(component26, props);
  }
  function fragment(children2) {
    return createElement.apply(null, [Fragment, null].concat(children2));
  }
  function createContext(defaultValue4) {
    return () => (0, import_react2.createContext)(defaultValue4);
  }
  function contextProvider(context) {
    return context.Provider;
  }

  // output/React.Basic/index.js
  var semigroupJSX = {
    append: function(a4) {
      return function(b4) {
        return fragment([a4, b4]);
      };
    }
  };
  var provider = function(context) {
    return function(value12) {
      return function(children2) {
        return element(contextProvider(context))({
          value: value12,
          children: children2
        });
      };
    };
  };
  var monoidJSX = {
    mempty: empty2,
    Semigroup0: function() {
      return semigroupJSX;
    }
  };

  // output/Control.Bind.Indexed/index.js
  var ibind = function(dict) {
    return dict.ibind;
  };

  // output/React.Basic.Hooks.Internal/index.js
  var map5 = /* @__PURE__ */ map(functorEffect);
  var apply2 = /* @__PURE__ */ apply(applyEffect);
  var pure2 = /* @__PURE__ */ pure(applicativeEffect);
  var Render = function(x3) {
    return x3;
  };
  var unsafeRenderEffect = Render;
  var unsafeHook = Render;
  var ixFunctorRender = {
    imap: function(f2) {
      return function(v2) {
        return map5(f2)(v2);
      };
    }
  };
  var ixApplyRender = {
    iapply: function(v2) {
      return function(v1) {
        return apply2(v2)(v1);
      };
    },
    IxFunctor0: function() {
      return ixFunctorRender;
    }
  };
  var ixBindRender = {
    ibind: function(v2) {
      return function(f2) {
        return function __do10() {
          var a4 = v2();
          var v1 = f2(a4);
          return v1();
        };
      };
    },
    IxApply0: function() {
      return ixApplyRender;
    }
  };
  var functorRender = {
    map: function(f2) {
      return function(v2) {
        return map5(f2)(v2);
      };
    }
  };
  var discard2 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var coerceHook = function() {
    return function(v2) {
      return v2;
    };
  };
  var bind2 = function(dictIxBind) {
    return ibind(dictIxBind);
  };
  var applyRender = function(dictTypeEquals) {
    return {
      apply: function(v2) {
        return function(v1) {
          return apply2(v2)(v1);
        };
      },
      Functor0: function() {
        return functorRender;
      }
    };
  };
  var applicativeRender = function(dictTypeEquals) {
    var applyRender1 = applyRender(dictTypeEquals);
    return {
      pure: function(a4) {
        return pure2(a4);
      },
      Apply0: function() {
        return applyRender1;
      }
    };
  };

  // output/Unsafe.Reference/foreign.js
  function reallyUnsafeRefEq(a4) {
    return function(b4) {
      return a4 === b4;
    };
  }

  // output/React.Basic.Hooks/index.js
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorRender);
  var rmap2 = /* @__PURE__ */ rmap(bifunctorTuple);
  var map6 = /* @__PURE__ */ map(functorEffect);
  var writeRef = /* @__PURE__ */ runEffectFn2(writeRef_);
  var useState = function(initialState) {
    return unsafeHook(function() {
      return useState_(mkFn2(Tuple.create), initialState);
    });
  };
  var useState$prime = function(initialState) {
    return mapFlipped2(useState(initialState))(rmap2(function(v2) {
      return function($36) {
        return v2($$const($36));
      };
    }));
  };
  var useRef = function(initialValue) {
    return unsafeHook(function() {
      return useRef_(initialValue);
    });
  };
  var useMemo = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(deps) {
      return function(computeA) {
        return unsafeHook(function() {
          return useMemo_(mkFn2(eq21), deps, computeA);
        });
      };
    };
  };
  var useLayoutEffectAlways = function(effect) {
    return unsafeHook(function() {
      return useLayoutEffectAlways_(effect);
    });
  };
  var useLayoutEffect = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(deps) {
      return function(effect) {
        return unsafeHook(function() {
          return useLayoutEffect_(mkFn2(eq21), deps, effect);
        });
      };
    };
  };
  var useId = /* @__PURE__ */ unsafeHook(useId_);
  var useEffectOnce = function(effect) {
    return unsafeHook(function() {
      return useEffect_(function(v2, v1) {
        return true;
      }, unit, effect);
    });
  };
  var useEffectAlways = function(effect) {
    return unsafeHook(function() {
      return useEffectAlways_(effect);
    });
  };
  var useEffect = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(deps) {
      return function(effect) {
        return unsafeHook(function() {
          return useEffect_(mkFn2(eq21), deps, effect);
        });
      };
    };
  };
  var useContext = function(context) {
    return unsafeHook(function() {
      return useContext_(context);
    });
  };
  var unsafeReactFunctionComponent = unsafeCoerce2;
  var unsafeDiscardRenderEffects = unsafeCoerce2;
  var unsafeReactComponent = function() {
    return function() {
      return function(name15) {
        return function(renderFn) {
          var c3 = unsafeReactFunctionComponent(function(props) {
            return unsafeDiscardRenderEffects(renderFn(props))();
          });
          return function() {
            return unsafeSetDisplayName(name15, c3);
          };
        };
      };
    };
  };
  var unsafeReactComponent1 = /* @__PURE__ */ unsafeReactComponent()();
  var readRef = /* @__PURE__ */ runEffectFn1(readRef_);
  var readRefMaybe = function(a4) {
    return map6(toMaybe)(readRef(a4));
  };
  var reactComponent = function() {
    return function() {
      return function() {
        return unsafeReactComponent1;
      };
    };
  };
  var reactComponent1 = /* @__PURE__ */ reactComponent()()();
  var reactChildrenFromArray = unsafeCoerce2;
  var component = function(name15) {
    return function(renderFn) {
      return function __do10() {
        var c3 = reactComponent1(name15)(function($38) {
          return renderFn(function(v2) {
            return v2.nested;
          }($38));
        })();
        var $39 = element(c3);
        return function($40) {
          return $39(function(v2) {
            return {
              nested: v2
            };
          }($40));
        };
      };
    };
  };

  // output/Effect.Exception/foreign.js
  function showErrorImpl(err) {
    return err.stack || err.toString();
  }
  function error(msg) {
    return new Error(msg);
  }
  function message(e) {
    return e.message;
  }
  function throwException(e) {
    return function() {
      throw e;
    };
  }
  function catchException(c3) {
    return function(t) {
      return function() {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c3(e)();
          } else {
            return c3(new Error(e.toString()))();
          }
        }
      };
    };
  }

  // output/Effect.Exception/index.js
  var pure3 = /* @__PURE__ */ pure(applicativeEffect);
  var map7 = /* @__PURE__ */ map(functorEffect);
  var $$try = function(action2) {
    return catchException(function($3) {
      return pure3(Left.create($3));
    })(map7(Right.create)(action2));
  };
  var showError = {
    show: showErrorImpl
  };

  // output/Control.Monad.Error.Class/index.js
  var throwError = function(dict) {
    return dict.throwError;
  };
  var monadThrowEffect = {
    throwError: throwException,
    Monad0: function() {
      return monadEffect;
    }
  };
  var catchError = function(dict) {
    return dict.catchError;
  };
  var $$try2 = function(dictMonadError) {
    var catchError1 = catchError(dictMonadError);
    var Monad0 = dictMonadError.MonadThrow0().Monad0();
    var map43 = map(Monad0.Bind1().Apply0().Functor0());
    var pure64 = pure(Monad0.Applicative0());
    return function(a4) {
      return catchError1(map43(Right.create)(a4))(function($52) {
        return pure64(Left.create($52));
      });
    };
  };

  // output/Control.Monad.Trans.Class/index.js
  var lift = function(dict) {
    return dict.lift;
  };

  // output/Uncurried.RWSET/index.js
  var More = /* @__PURE__ */ function() {
    function More2(value0) {
      this.value0 = value0;
    }
    ;
    More2.create = function(value0) {
      return new More2(value0);
    };
    return More2;
  }();
  var Lift = /* @__PURE__ */ function() {
    function Lift2(value0) {
      this.value0 = value0;
    }
    ;
    Lift2.create = function(value0) {
      return new Lift2(value0);
    };
    return Lift2;
  }();
  var Stop = /* @__PURE__ */ function() {
    function Stop2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Stop2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Stop2(value0, value1, value22);
        };
      };
    };
    return Stop2;
  }();
  var monadTransRWSET = function(dictMonoid) {
    var mempty33 = mempty(dictMonoid);
    return {
      lift: function(dictMonad) {
        var map113 = map(dictMonad.Bind1().Apply0().Functor0());
        return function(m2) {
          return function(v2, state3, v1, lift$prime, v22, done) {
            return lift$prime(map113(function(a4) {
              return function(v3) {
                return done(state3, a4, mempty33);
              };
            })(m2));
          };
        };
      }
    };
  };
  var functorRWSET = {
    map: function(f2) {
      return function(v2) {
        return function(environment, state0, more, lift$prime, error5, done) {
          return more(function(v1) {
            return v2(environment, state0, more, lift$prime, error5, function(state1, a4, w2) {
              return more(function(v22) {
                return done(state1, f2(a4), w2);
              });
            });
          });
        };
      };
    }
  };
  var applyRWSET = function(dictMonoid) {
    var append39 = append(dictMonoid.Semigroup0());
    return {
      apply: function(v2) {
        return function(v1) {
          return function(environment, state0, more, lift$prime, error5, done) {
            return more(function(v22) {
              return v2(environment, state0, more, lift$prime, error5, function(state1, f2, w0) {
                return more(function(v3) {
                  return v1(environment, state1, more, lift$prime, error5, function(state22, a4, w1) {
                    return more(function(v42) {
                      return done(state22, f2(a4), append39(w0)(w1));
                    });
                  });
                });
              });
            });
          };
        };
      },
      Functor0: function() {
        return functorRWSET;
      }
    };
  };
  var bindRWSET = function(dictMonoid) {
    var append39 = append(dictMonoid.Semigroup0());
    var applyRWSET1 = applyRWSET(dictMonoid);
    return {
      bind: function(v2) {
        return function(f2) {
          return function(environment, state0, more, lift$prime, error5, done) {
            return more(function(v1) {
              return v2(environment, state0, more, lift$prime, error5, function(state1, x3, w0) {
                return more(function(v22) {
                  var v3 = f2(x3);
                  return v3(environment, state1, more, lift$prime, error5, function(state22, y2, w1) {
                    return more(function(v42) {
                      return done(state22, y2, append39(w0)(w1));
                    });
                  });
                });
              });
            });
          };
        };
      },
      Apply0: function() {
        return applyRWSET1;
      }
    };
  };
  var applicativeRWSET = function(dictMonoid) {
    var mempty33 = mempty(dictMonoid);
    var applyRWSET1 = applyRWSET(dictMonoid);
    return {
      pure: function(a4) {
        return function(v2, state3, v1, v22, v3, done) {
          return done(state3, a4, mempty33);
        };
      },
      Apply0: function() {
        return applyRWSET1;
      }
    };
  };
  var monadRWSET = function(dictMonoid) {
    var applicativeRWSET1 = applicativeRWSET(dictMonoid);
    var bindRWSET1 = bindRWSET(dictMonoid);
    return {
      Applicative0: function() {
        return applicativeRWSET1;
      },
      Bind1: function() {
        return bindRWSET1;
      }
    };
  };
  var monadAskRWSET = function(dictMonoid) {
    var mempty33 = mempty(dictMonoid);
    var monadRWSET1 = monadRWSET(dictMonoid);
    return {
      ask: function(environment, state3, v2, v1, v22, done) {
        return done(state3, environment, mempty33);
      },
      Monad0: function() {
        return monadRWSET1;
      }
    };
  };
  var monadEffectRWSET = function(dictMonoid) {
    var lift5 = lift(monadTransRWSET(dictMonoid));
    var monadRWSET1 = monadRWSET(dictMonoid);
    return function(dictMonadEffect) {
      return {
        liftEffect: function() {
          var $258 = lift5(dictMonadEffect.Monad0());
          var $259 = liftEffect(dictMonadEffect);
          return function($260) {
            return $258($259($260));
          };
        }(),
        Monad0: function() {
          return monadRWSET1;
        }
      };
    };
  };
  var runRWSET = function(dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var map113 = map(Monad0.Bind1().Apply0().Functor0());
    var pure64 = pure(Monad0.Applicative0());
    var tailRecM3 = tailRecM(dictMonadRec);
    return function(r2) {
      return function(s3) {
        return function(v2) {
          var go2 = function($copy_step) {
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(step3) {
              var v1 = step3(unit);
              if (v1 instanceof More) {
                $copy_step = v1.value0;
                return;
              }
              ;
              if (v1 instanceof Lift) {
                $tco_done = true;
                return map113(Loop.create)(v1.value0);
              }
              ;
              if (v1 instanceof Stop) {
                $tco_done = true;
                return pure64(new Done(new Tuple(v1.value0, new Tuple(v1.value1, v1.value2))));
              }
              ;
              throw new Error("Failed pattern match at Uncurried.RWSET (line 252, column 15 - line 258, column 35): " + [v1.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($copy_step);
            }
            ;
            return $tco_result;
          };
          return tailRecM3(go2)(function(v1) {
            return v2(r2, s3, More.create, Lift.create, function(s$prime2, e, w2) {
              return new Stop(s$prime2, new Left(e), w2);
            }, function(s$prime2, a4, w2) {
              return new Stop(s$prime2, new Right(a4), w2);
            });
          });
        };
      };
    };
  };

  // output/Uncurried.ReaderT/index.js
  var monadEffectRWSET2 = /* @__PURE__ */ monadEffectRWSET(monoidUnit);
  var monadEffectReaderT = function(dictMonadEffect) {
    return monadEffectRWSET2(dictMonadEffect);
  };
  var monadAskReaderT = /* @__PURE__ */ monadAskRWSET(monoidUnit);
  var functorReaderT = functorRWSET;
  var bindReaderT = /* @__PURE__ */ bindRWSET(monoidUnit);
  var runReaderT = function(dictMonadRec) {
    var map43 = map(dictMonadRec.Monad0().Bind1().Apply0().Functor0());
    var runRWSET2 = runRWSET(dictMonadRec);
    return function(r2) {
      return function(v2) {
        var go2 = function(v1) {
          if (v1.value1.value0 instanceof Left) {
            return absurd(v1.value1.value0.value0);
          }
          ;
          if (v1.value1.value0 instanceof Right) {
            return v1.value1.value0.value0;
          }
          ;
          throw new Error("Failed pattern match at Uncurried.ReaderT (line 40, column 5 - line 44, column 10): " + [v1.value1.value0.constructor.name]);
        };
        return map43(go2)(runRWSET2(r2)(unit)(v2));
      };
    };
  };

  // output/UI.Component/index.js
  var bind3 = /* @__PURE__ */ bind(bindReaderT);
  var ask2 = /* @__PURE__ */ ask(monadAskReaderT);
  var liftEffect2 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
  var runComponent = /* @__PURE__ */ runReaderT(monadRecEffect);
  var component2 = function(name15) {
    return function(render) {
      return bind3(ask2)(function() {
        var $6 = component(name15);
        return function($7) {
          return liftEffect2($6(render($7)));
        };
      }());
    };
  };

  // output/Data.String.Common/foreign.js
  var replaceAll = function(s1) {
    return function(s22) {
      return function(s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s22);
      };
    };
  };
  var split = function(sep) {
    return function(s3) {
      return s3.split(sep);
    };
  };
  var toLower = function(s3) {
    return s3.toLowerCase();
  };
  var joinWith = function(s3) {
    return function(xs) {
      return xs.join(s3);
    };
  };

  // output/Yoga.JSON/foreign.js
  var _parseJSON = JSON.parse;
  var _undefined = void 0;
  var _unsafeStringify = JSON.stringify;

  // output/Control.Monad.Except.Trans/index.js
  var map8 = /* @__PURE__ */ map(functorEither);
  var ExceptT = function(x3) {
    return x3;
  };
  var withExceptT = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(f2) {
      return function(v2) {
        var mapLeft = function(v1) {
          return function(v22) {
            if (v22 instanceof Right) {
              return new Right(v22.value0);
            }
            ;
            if (v22 instanceof Left) {
              return new Left(v1(v22.value0));
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [v1.constructor.name, v22.constructor.name]);
          };
        };
        return map113(mapLeft(f2))(v2);
      };
    };
  };
  var runExceptT = function(v2) {
    return v2;
  };
  var mapExceptT = function(f2) {
    return function(v2) {
      return f2(v2);
    };
  };
  var functorExceptT = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return {
      map: function(f2) {
        return mapExceptT(map113(map8(f2)));
      }
    };
  };
  var monadExceptT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeExceptT(dictMonad);
      },
      Bind1: function() {
        return bindExceptT(dictMonad);
      }
    };
  };
  var bindExceptT = function(dictMonad) {
    var bind61 = bind(dictMonad.Bind1());
    var pure64 = pure(dictMonad.Applicative0());
    return {
      bind: function(v2) {
        return function(k2) {
          return bind61(v2)(either(function($187) {
            return pure64(Left.create($187));
          })(function(a4) {
            var v1 = k2(a4);
            return v1;
          }));
        };
      },
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var applyExceptT = function(dictMonad) {
    var functorExceptT1 = functorExceptT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadExceptT(dictMonad)),
      Functor0: function() {
        return functorExceptT1;
      }
    };
  };
  var applicativeExceptT = function(dictMonad) {
    return {
      pure: function() {
        var $188 = pure(dictMonad.Applicative0());
        return function($189) {
          return ExceptT($188(Right.create($189)));
        };
      }(),
      Apply0: function() {
        return applyExceptT(dictMonad);
      }
    };
  };
  var monadThrowExceptT = function(dictMonad) {
    var monadExceptT1 = monadExceptT(dictMonad);
    return {
      throwError: function() {
        var $198 = pure(dictMonad.Applicative0());
        return function($199) {
          return ExceptT($198(Left.create($199)));
        };
      }(),
      Monad0: function() {
        return monadExceptT1;
      }
    };
  };
  var altExceptT = function(dictSemigroup) {
    var append39 = append(dictSemigroup);
    return function(dictMonad) {
      var Bind1 = dictMonad.Bind1();
      var bind61 = bind(Bind1);
      var pure64 = pure(dictMonad.Applicative0());
      var functorExceptT1 = functorExceptT(Bind1.Apply0().Functor0());
      return {
        alt: function(v2) {
          return function(v1) {
            return bind61(v2)(function(rm) {
              if (rm instanceof Right) {
                return pure64(new Right(rm.value0));
              }
              ;
              if (rm instanceof Left) {
                return bind61(v1)(function(rn2) {
                  if (rn2 instanceof Right) {
                    return pure64(new Right(rn2.value0));
                  }
                  ;
                  if (rn2 instanceof Left) {
                    return pure64(new Left(append39(rm.value0)(rn2.value0)));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 86, column 9 - line 88, column 49): " + [rn2.constructor.name]);
                });
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 82, column 5 - line 88, column 49): " + [rm.constructor.name]);
            });
          };
        },
        Functor0: function() {
          return functorExceptT1;
        }
      };
    };
  };

  // output/Control.Monad.Except/index.js
  var unwrap3 = /* @__PURE__ */ unwrap();
  var withExcept = /* @__PURE__ */ withExceptT(functorIdentity);
  var runExcept = function($3) {
    return unwrap3(runExceptT($3));
  };

  // output/Data.Array/foreign.js
  var range = function(start2) {
    return function(end3) {
      var step3 = start2 > end3 ? -1 : 1;
      var result = new Array(step3 * (end3 - start2) + 1);
      var i7 = start2, n2 = 0;
      while (i7 !== end3) {
        result[n2++] = i7;
        i7 += step3;
      }
      result[n2] = i7;
      return result;
    };
  };
  var replicateFill = function(count) {
    return function(value12) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value12);
    };
  };
  var replicatePolyfill = function(count) {
    return function(value12) {
      var result = [];
      var n2 = 0;
      for (var i7 = 0; i7 < count; i7++) {
        result[n2++] = value12;
      }
      return result;
    };
  };
  var replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var fromFoldableImpl = function() {
    function Cons3(head6, tail3) {
      this.head = head6;
      this.tail = tail3;
    }
    var emptyList = {};
    function curryCons(head6) {
      return function(tail3) {
        return new Cons3(head6, tail3);
      };
    }
    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }
    return function(foldr5) {
      return function(xs) {
        return listToArray(foldr5(curryCons)(emptyList)(xs));
      };
    };
  }();
  var length = function(xs) {
    return xs.length;
  };
  var unconsImpl = function(empty5) {
    return function(next2) {
      return function(xs) {
        return xs.length === 0 ? empty5({}) : next2(xs[0])(xs.slice(1));
      };
    };
  };
  var indexImpl = function(just) {
    return function(nothing) {
      return function(xs) {
        return function(i7) {
          return i7 < 0 || i7 >= xs.length ? nothing : just(xs[i7]);
        };
      };
    };
  };
  var reverse = function(l2) {
    return l2.slice().reverse();
  };
  var filter = function(f2) {
    return function(xs) {
      return xs.filter(f2);
    };
  };
  var sortByImpl = function() {
    function mergeFromTo(compare4, fromOrdering, xs1, xs2, from4, to2) {
      var mid;
      var i7;
      var j2;
      var k2;
      var x3;
      var y2;
      var c3;
      mid = from4 + (to2 - from4 >> 1);
      if (mid - from4 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, from4, mid);
      if (to2 - mid > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, mid, to2);
      i7 = from4;
      j2 = mid;
      k2 = from4;
      while (i7 < mid && j2 < to2) {
        x3 = xs2[i7];
        y2 = xs2[j2];
        c3 = fromOrdering(compare4(x3)(y2));
        if (c3 > 0) {
          xs1[k2++] = y2;
          ++j2;
        } else {
          xs1[k2++] = x3;
          ++i7;
        }
      }
      while (i7 < mid) {
        xs1[k2++] = xs2[i7++];
      }
      while (j2 < to2) {
        xs1[k2++] = xs2[j2++];
      }
    }
    return function(compare4) {
      return function(fromOrdering) {
        return function(xs) {
          var out;
          if (xs.length < 2)
            return xs;
          out = xs.slice(0);
          mergeFromTo(compare4, fromOrdering, out, xs.slice(0), 0, xs.length);
          return out;
        };
      };
    };
  }();
  var slice = function(s3) {
    return function(e) {
      return function(l2) {
        return l2.slice(s3, e);
      };
    };
  };
  var zipWith = function(f2) {
    return function(xs) {
      return function(ys) {
        var l2 = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l2);
        for (var i7 = 0; i7 < l2; i7++) {
          result[i7] = f2(xs[i7])(ys[i7]);
        }
        return result;
      };
    };
  };
  var all = function(p3) {
    return function(xs) {
      var len = xs.length;
      for (var i7 = 0; i7 < len; i7++) {
        if (!p3(xs[i7]))
          return false;
      }
      return true;
    };
  };
  var unsafeIndexImpl = function(xs) {
    return function(n2) {
      return xs[n2];
    };
  };

  // output/Control.Monad.ST.Internal/foreign.js
  var map_ = function(f2) {
    return function(a4) {
      return function() {
        return f2(a4());
      };
    };
  };
  var pure_ = function(a4) {
    return function() {
      return a4;
    };
  };
  var bind_ = function(a4) {
    return function(f2) {
      return function() {
        return f2(a4())();
      };
    };
  };
  function forST(lo) {
    return function(hi) {
      return function(f2) {
        return function() {
          for (var i7 = lo; i7 < hi; i7++) {
            f2(i7)();
          }
        };
      };
    };
  }
  var foreach = function(as2) {
    return function(f2) {
      return function() {
        for (var i7 = 0, l2 = as2.length; i7 < l2; i7++) {
          f2(as2[i7])();
        }
      };
    };
  };
  var read2 = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write2 = function(a4) {
    return function(ref) {
      return function() {
        return ref.value = a4;
      };
    };
  };

  // output/Control.Monad.ST.Internal/index.js
  var $runtime_lazy2 = function(name15, moduleName, init5) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init5();
      state3 = 2;
      return val;
    };
  };
  var functorST = {
    map: map_
  };
  var monadST = {
    Applicative0: function() {
      return applicativeST;
    },
    Bind1: function() {
      return bindST;
    }
  };
  var bindST = {
    bind: bind_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var applicativeST = {
    pure: pure_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
    return {
      apply: ap(monadST),
      Functor0: function() {
        return functorST;
      }
    };
  });

  // output/Data.Array.ST/foreign.js
  function newSTArray() {
    return [];
  }
  var pushAll = function(as2) {
    return function(xs) {
      return function() {
        return xs.push.apply(xs, as2);
      };
    };
  };
  var unsafeFreeze = function(xs) {
    return function() {
      return xs;
    };
  };
  function copyImpl(xs) {
    return function() {
      return xs.slice();
    };
  }
  var freeze = copyImpl;
  var thaw = copyImpl;
  var sortByImpl2 = function() {
    function mergeFromTo(compare4, fromOrdering, xs1, xs2, from4, to2) {
      var mid;
      var i7;
      var j2;
      var k2;
      var x3;
      var y2;
      var c3;
      mid = from4 + (to2 - from4 >> 1);
      if (mid - from4 > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, from4, mid);
      if (to2 - mid > 1)
        mergeFromTo(compare4, fromOrdering, xs2, xs1, mid, to2);
      i7 = from4;
      j2 = mid;
      k2 = from4;
      while (i7 < mid && j2 < to2) {
        x3 = xs2[i7];
        y2 = xs2[j2];
        c3 = fromOrdering(compare4(x3)(y2));
        if (c3 > 0) {
          xs1[k2++] = y2;
          ++j2;
        } else {
          xs1[k2++] = x3;
          ++i7;
        }
      }
      while (i7 < mid) {
        xs1[k2++] = xs2[i7++];
      }
      while (j2 < to2) {
        xs1[k2++] = xs2[j2++];
      }
    }
    return function(compare4) {
      return function(fromOrdering) {
        return function(xs) {
          return function() {
            if (xs.length < 2)
              return xs;
            mergeFromTo(compare4, fromOrdering, xs, xs.slice(0), 0, xs.length);
            return xs;
          };
        };
      };
    };
  }();

  // output/Data.Array.ST/index.js
  var bind4 = /* @__PURE__ */ bind(bindST);
  var withArray = function(f2) {
    return function(xs) {
      return function __do10() {
        var result = thaw(xs)();
        f2(result)();
        return unsafeFreeze(result)();
      };
    };
  };
  var run2 = function(st2) {
    return bind4(st2)(unsafeFreeze)();
  };
  var push = function(a4) {
    return pushAll([a4]);
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = function() {
    function array1(a4) {
      return [a4];
    }
    function array2(a4) {
      return function(b4) {
        return [a4, b4];
      };
    }
    function array3(a4) {
      return function(b4) {
        return function(c3) {
          return [a4, b4, c3];
        };
      };
    }
    function concat2(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply11) {
      return function(map43) {
        return function(pure64) {
          return function(f2) {
            return function(array) {
              function go2(bot, top6) {
                switch (top6 - bot) {
                  case 0:
                    return pure64([]);
                  case 1:
                    return map43(array1)(f2(array[bot]));
                  case 2:
                    return apply11(map43(array2)(f2(array[bot])))(f2(array[bot + 1]));
                  case 3:
                    return apply11(apply11(map43(array3)(f2(array[bot])))(f2(array[bot + 1])))(f2(array[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top6 - bot) / 4) * 2;
                    return apply11(map43(concat2)(go2(bot, pivot)))(go2(pivot, top6));
                }
              }
              return go2(0, array.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Traversable/index.js
  var identity7 = /* @__PURE__ */ identity(categoryFn);
  var traverse = function(dict) {
    return dict.traverse;
  };
  var traversableMaybe = {
    traverse: function(dictApplicative) {
      var pure64 = pure(dictApplicative);
      var map43 = map(dictApplicative.Apply0().Functor0());
      return function(v2) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return pure64(Nothing.value);
          }
          ;
          if (v1 instanceof Just) {
            return map43(Just.create)(v2(v1.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    },
    sequence: function(dictApplicative) {
      var pure64 = pure(dictApplicative);
      var map43 = map(dictApplicative.Apply0().Functor0());
      return function(v2) {
        if (v2 instanceof Nothing) {
          return pure64(Nothing.value);
        }
        ;
        if (v2 instanceof Just) {
          return map43(Just.create)(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Traversable (line 115, column 1 - line 119, column 33): " + [v2.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    },
    Foldable1: function() {
      return foldableMaybe;
    }
  };
  var sequenceDefault = function(dictTraversable) {
    var traverse2 = traverse(dictTraversable);
    return function(dictApplicative) {
      return traverse2(dictApplicative)(identity7);
    };
  };
  var traversableArray = {
    traverse: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      return traverseArrayImpl(apply(Apply0))(map(Apply0.Functor0()))(pure(dictApplicative));
    },
    sequence: function(dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
    },
    Functor0: function() {
      return functorArray;
    },
    Foldable1: function() {
      return foldableArray;
    }
  };
  var sequence = function(dict) {
    return dict.sequence;
  };
  var $$for = function(dictApplicative) {
    return function(dictTraversable) {
      var traverse2 = traverse(dictTraversable)(dictApplicative);
      return function(x3) {
        return function(f2) {
          return traverse2(f2)(x3);
        };
      };
    };
  };

  // output/Data.Unfoldable/foreign.js
  var unfoldrArrayImpl = function(isNothing2) {
    return function(fromJust7) {
      return function(fst2) {
        return function(snd2) {
          return function(f2) {
            return function(b4) {
              var result = [];
              var value12 = b4;
              while (true) {
                var maybe2 = f2(value12);
                if (isNothing2(maybe2))
                  return result;
                var tuple = fromJust7(maybe2);
                result.push(fst2(tuple));
                value12 = snd2(tuple);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/foreign.js
  var unfoldr1ArrayImpl = function(isNothing2) {
    return function(fromJust7) {
      return function(fst2) {
        return function(snd2) {
          return function(f2) {
            return function(b4) {
              var result = [];
              var value12 = b4;
              while (true) {
                var tuple = f2(value12);
                result.push(fst2(tuple));
                var maybe2 = snd2(tuple);
                if (isNothing2(maybe2))
                  return result;
                value12 = fromJust7(maybe2);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/index.js
  var fromJust2 = /* @__PURE__ */ fromJust();
  var unfoldr1 = function(dict) {
    return dict.unfoldr1;
  };
  var unfoldable1Array = {
    unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
  };
  var replicate1 = function(dictUnfoldable1) {
    var unfoldr11 = unfoldr1(dictUnfoldable1);
    return function(n2) {
      return function(v2) {
        var step3 = function(i7) {
          if (i7 <= 0) {
            return new Tuple(v2, Nothing.value);
          }
          ;
          if (otherwise) {
            return new Tuple(v2, new Just(i7 - 1 | 0));
          }
          ;
          throw new Error("Failed pattern match at Data.Unfoldable1 (line 68, column 5 - line 68, column 39): " + [i7.constructor.name]);
        };
        return unfoldr11(step3)(n2 - 1 | 0);
      };
    };
  };
  var singleton = function(dictUnfoldable1) {
    return replicate1(dictUnfoldable1)(1);
  };

  // output/Data.Unfoldable/index.js
  var fromJust3 = /* @__PURE__ */ fromJust();
  var unfoldr = function(dict) {
    return dict.unfoldr;
  };
  var unfoldableArray = {
    unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
    Unfoldable10: function() {
      return unfoldable1Array;
    }
  };

  // output/Data.Array/index.js
  var $$void3 = /* @__PURE__ */ $$void(functorST);
  var intercalate1 = /* @__PURE__ */ intercalate2(foldableArray);
  var append2 = /* @__PURE__ */ append(semigroupArray);
  var unsafeIndex = function() {
    return unsafeIndexImpl;
  };
  var unsafeIndex1 = /* @__PURE__ */ unsafeIndex();
  var take = function(n2) {
    return function(xs) {
      var $145 = n2 < 1;
      if ($145) {
        return [];
      }
      ;
      return slice(0)(n2)(xs);
    };
  };
  var tail = /* @__PURE__ */ function() {
    return unconsImpl($$const(Nothing.value))(function(v2) {
      return function(xs) {
        return new Just(xs);
      };
    });
  }();
  var snoc = function(xs) {
    return function(x3) {
      return withArray(push(x3))(xs)();
    };
  };
  var singleton2 = function(a4) {
    return [a4];
  };
  var $$null = function(xs) {
    return length(xs) === 0;
  };
  var mapWithIndex = function(f2) {
    return function(xs) {
      return zipWith(f2)(range(0)(length(xs) - 1 | 0))(xs);
    };
  };
  var intersperse = function(a4) {
    return function(arr) {
      var v2 = length(arr);
      if (v2 < 2) {
        return arr;
      }
      ;
      if (otherwise) {
        return run2(function() {
          var unsafeGetElem = function(idx) {
            return unsafeIndex1(arr)(idx);
          };
          return function __do10() {
            var out = newSTArray();
            push(unsafeGetElem(0))(out)();
            forST(1)(v2)(function(idx) {
              return function __do11() {
                push(a4)(out)();
                return $$void3(push(unsafeGetElem(idx))(out))();
              };
            })();
            return out;
          };
        }());
      }
      ;
      throw new Error("Failed pattern match at Data.Array (line 611, column 21 - line 620, column 19): " + [v2.constructor.name]);
    };
  };
  var intercalate3 = function(dictMonoid) {
    return intercalate1(dictMonoid);
  };
  var init = function(xs) {
    if ($$null(xs)) {
      return Nothing.value;
    }
    ;
    if (otherwise) {
      return new Just(slice(0)(length(xs) - 1 | 0)(xs));
    }
    ;
    throw new Error("Failed pattern match at Data.Array (line 338, column 1 - line 338, column 45): " + [xs.constructor.name]);
  };
  var index = /* @__PURE__ */ function() {
    return indexImpl(Just.create)(Nothing.value);
  }();
  var last = function(xs) {
    return index(xs)(length(xs) - 1 | 0);
  };
  var head = function(xs) {
    return index(xs)(0);
  };
  var fromFoldable = function(dictFoldable) {
    return fromFoldableImpl(foldr(dictFoldable));
  };
  var drop = function(n2) {
    return function(xs) {
      var $167 = n2 < 1;
      if ($167) {
        return xs;
      }
      ;
      return slice(n2)(length(xs))(xs);
    };
  };
  var cons2 = function(x3) {
    return function(xs) {
      return append2([x3])(xs);
    };
  };
  var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
  var mapMaybe = function(f2) {
    return concatMap(function() {
      var $185 = maybe([])(singleton2);
      return function($186) {
        return $185(f2($186));
      };
    }());
  };
  var catMaybes = /* @__PURE__ */ mapMaybe(/* @__PURE__ */ identity(categoryFn));

  // output/Data.Array.NonEmpty.Internal/foreign.js
  var traverse1Impl = function() {
    function Cont(fn) {
      this.fn = fn;
    }
    var emptyList = {};
    var ConsCell = function(head6, tail3) {
      this.head = head6;
      this.tail = tail3;
    };
    function finalCell(head6) {
      return new ConsCell(head6, emptyList);
    }
    function consList(x3) {
      return function(xs) {
        return new ConsCell(x3, xs);
      };
    }
    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }
    return function(apply11) {
      return function(map43) {
        return function(f2) {
          var buildFrom = function(x3, ys) {
            return apply11(map43(consList)(f2(x3)))(ys);
          };
          var go2 = function(acc, currentLen, xs) {
            if (currentLen === 0) {
              return acc;
            } else {
              var last7 = xs[currentLen - 1];
              return new Cont(function() {
                var built = go2(buildFrom(last7, acc), currentLen - 1, xs);
                return built;
              });
            }
          };
          return function(array) {
            var acc = map43(finalCell)(f2(array[array.length - 1]));
            var result = go2(acc, array.length - 1, array);
            while (result instanceof Cont) {
              result = result.fn();
            }
            return map43(listToArray)(result);
          };
        };
      };
    };
  }();

  // output/Data.FunctorWithIndex/foreign.js
  var mapWithIndexArray = function(f2) {
    return function(xs) {
      var l2 = xs.length;
      var result = Array(l2);
      for (var i7 = 0; i7 < l2; i7++) {
        result[i7] = f2(i7)(xs[i7]);
      }
      return result;
    };
  };

  // output/Data.FunctorWithIndex/index.js
  var mapWithIndex2 = function(dict) {
    return dict.mapWithIndex;
  };
  var functorWithIndexArray = {
    mapWithIndex: mapWithIndexArray,
    Functor0: function() {
      return functorArray;
    }
  };

  // output/Data.FoldableWithIndex/index.js
  var foldr8 = /* @__PURE__ */ foldr(foldableArray);
  var mapWithIndex3 = /* @__PURE__ */ mapWithIndex2(functorWithIndexArray);
  var foldl8 = /* @__PURE__ */ foldl(foldableArray);
  var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
  };
  var foldlWithIndex = function(dict) {
    return dict.foldlWithIndex;
  };
  var foldMapWithIndexDefaultR = function(dictFoldableWithIndex) {
    var foldrWithIndex12 = foldrWithIndex(dictFoldableWithIndex);
    return function(dictMonoid) {
      var append39 = append(dictMonoid.Semigroup0());
      var mempty33 = mempty(dictMonoid);
      return function(f2) {
        return foldrWithIndex12(function(i7) {
          return function(x3) {
            return function(acc) {
              return append39(f2(i7)(x3))(acc);
            };
          };
        })(mempty33);
      };
    };
  };
  var foldableWithIndexArray = {
    foldrWithIndex: function(f2) {
      return function(z2) {
        var $289 = foldr8(function(v2) {
          return function(y2) {
            return f2(v2.value0)(v2.value1)(y2);
          };
        })(z2);
        var $290 = mapWithIndex3(Tuple.create);
        return function($291) {
          return $289($290($291));
        };
      };
    },
    foldlWithIndex: function(f2) {
      return function(z2) {
        var $292 = foldl8(function(y2) {
          return function(v2) {
            return f2(v2.value0)(y2)(v2.value1);
          };
        })(z2);
        var $293 = mapWithIndex3(Tuple.create);
        return function($294) {
          return $292($293($294));
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      return foldMapWithIndexDefaultR(foldableWithIndexArray)(dictMonoid);
    },
    Foldable0: function() {
      return foldableArray;
    }
  };
  var foldMapWithIndex = function(dict) {
    return dict.foldMapWithIndex;
  };

  // output/Data.TraversableWithIndex/index.js
  var traverseWithIndexDefault = function(dictTraversableWithIndex) {
    var sequence3 = sequence(dictTraversableWithIndex.Traversable2());
    var mapWithIndex4 = mapWithIndex2(dictTraversableWithIndex.FunctorWithIndex0());
    return function(dictApplicative) {
      var sequence12 = sequence3(dictApplicative);
      return function(f2) {
        var $174 = mapWithIndex4(f2);
        return function($175) {
          return sequence12($174($175));
        };
      };
    };
  };
  var traverseWithIndex = function(dict) {
    return dict.traverseWithIndex;
  };
  var traversableWithIndexArray = {
    traverseWithIndex: function(dictApplicative) {
      return traverseWithIndexDefault(traversableWithIndexArray)(dictApplicative);
    },
    FunctorWithIndex0: function() {
      return functorWithIndexArray;
    },
    FoldableWithIndex1: function() {
      return foldableWithIndexArray;
    },
    Traversable2: function() {
      return traversableArray;
    }
  };

  // output/Data.Array.NonEmpty.Internal/index.js
  var NonEmptyArray = function(x3) {
    return x3;
  };
  var traversableNonEmptyArray = traversableArray;
  var semigroupNonEmptyArray = semigroupArray;
  var functorNonEmptyArray = functorArray;
  var foldableWithIndexNonEmptyArray = foldableWithIndexArray;
  var foldableNonEmptyArray = foldableArray;
  var eqNonEmptyArray = function(dictEq) {
    return eqArray(dictEq);
  };

  // output/Data.NonEmpty/index.js
  var NonEmpty = /* @__PURE__ */ function() {
    function NonEmpty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NonEmpty2.create = function(value0) {
      return function(value1) {
        return new NonEmpty2(value0, value1);
      };
    };
    return NonEmpty2;
  }();
  var singleton3 = function(dictPlus) {
    var empty5 = empty(dictPlus);
    return function(a4) {
      return new NonEmpty(a4, empty5);
    };
  };
  var showNonEmpty = function(dictShow) {
    var show26 = show(dictShow);
    return function(dictShow1) {
      var show110 = show(dictShow1);
      return {
        show: function(v2) {
          return "(NonEmpty " + (show26(v2.value0) + (" " + (show110(v2.value1) + ")")));
        }
      };
    };
  };
  var functorNonEmpty = function(dictFunctor) {
    var map210 = map(dictFunctor);
    return {
      map: function(f2) {
        return function(m2) {
          return new NonEmpty(f2(m2.value0), map210(f2)(m2.value1));
        };
      }
    };
  };
  var eqNonEmpty = function(dictEq1) {
    var eq111 = eq1(dictEq1);
    return function(dictEq) {
      var eq21 = eq(dictEq);
      var eq112 = eq111(dictEq);
      return {
        eq: function(x3) {
          return function(y2) {
            return eq21(x3.value0)(y2.value0) && eq112(x3.value1)(y2.value1);
          };
        }
      };
    };
  };

  // output/Data.Array.NonEmpty/index.js
  var fromJust4 = /* @__PURE__ */ fromJust();
  var unsafeFromArray = NonEmptyArray;
  var toArray = function(v2) {
    return v2;
  };
  var snoc$prime = function(xs) {
    return function(x3) {
      return unsafeFromArray(snoc(xs)(x3));
    };
  };
  var snoc2 = function(xs) {
    return function(x3) {
      return unsafeFromArray(snoc(toArray(xs))(x3));
    };
  };
  var singleton4 = function($108) {
    return unsafeFromArray(singleton2($108));
  };
  var fromArray = function(xs) {
    if (length(xs) > 0) {
      return new Just(unsafeFromArray(xs));
    }
    ;
    if (otherwise) {
      return Nothing.value;
    }
    ;
    throw new Error("Failed pattern match at Data.Array.NonEmpty (line 157, column 1 - line 157, column 58): " + [xs.constructor.name]);
  };
  var cons$prime = function(x3) {
    return function(xs) {
      return unsafeFromArray(cons2(x3)(xs));
    };
  };
  var adaptMaybe = function(f2) {
    return function($123) {
      return fromJust4(f2(toArray($123)));
    };
  };
  var head2 = /* @__PURE__ */ adaptMaybe(head);
  var init2 = /* @__PURE__ */ adaptMaybe(init);
  var last2 = /* @__PURE__ */ adaptMaybe(last);
  var tail2 = /* @__PURE__ */ adaptMaybe(tail);
  var adaptAny = function(f2) {
    return function($125) {
      return f2(toArray($125));
    };
  };
  var all3 = function(p3) {
    return adaptAny(all(p3));
  };
  var catMaybes2 = /* @__PURE__ */ adaptAny(catMaybes);
  var index2 = /* @__PURE__ */ adaptAny(index);
  var length2 = /* @__PURE__ */ adaptAny(length);
  var unsafeAdapt = function(f2) {
    var $126 = adaptAny(f2);
    return function($127) {
      return unsafeFromArray($126($127));
    };
  };
  var cons3 = function(x3) {
    return unsafeAdapt(cons2(x3));
  };

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n2) {
        return (n2 | 0) === n2 ? just(n2) : nothing;
      };
    };
  };
  var toNumber = function(n2) {
    return n2;
  };
  var toStringAs = function(radix) {
    return function(i7) {
      return i7.toString(radix);
    };
  };

  // output/Data.Number/foreign.js
  var nan = NaN;
  var isFiniteImpl = isFinite;
  var abs2 = Math.abs;
  var floor = Math.floor;
  var pow = function(n2) {
    return function(p3) {
      return Math.pow(n2, p3);
    };
  };
  var remainder = function(n2) {
    return function(m2) {
      return n2 % m2;
    };
  };
  var round = Math.round;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x3) {
    if (!isFiniteImpl(x3)) {
      return 0;
    }
    ;
    if (x3 >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x3 <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x3));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x3.constructor.name]);
  };
  var round2 = function($37) {
    return unsafeClamp(round($37));
  };
  var floor2 = function($39) {
    return unsafeClamp(floor($39));
  };
  var decimal = 10;

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil3() {
    }
    ;
    Nil3.value = new Nil3();
    return Nil3;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons3.create = function(value0) {
      return function(value1) {
        return new Cons3(value0, value1);
      };
    };
    return Cons3;
  }();
  var NonEmptyList = function(x3) {
    return x3;
  };
  var toList = function(v2) {
    return new Cons(v2.value0, v2.value1);
  };
  var listMap = function(f2) {
    var chunkedRevMap = function($copy_chunksAcc) {
      return function($copy_v) {
        var $tco_var_chunksAcc = $copy_chunksAcc;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(chunksAcc, v2) {
          if (v2 instanceof Cons && (v2.value1 instanceof Cons && v2.value1.value1 instanceof Cons)) {
            $tco_var_chunksAcc = new Cons(v2, chunksAcc);
            $copy_v = v2.value1.value1.value1;
            return;
          }
          ;
          var unrolledMap = function(v1) {
            if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
              return new Cons(f2(v1.value0), new Cons(f2(v1.value1.value0), Nil.value));
            }
            ;
            if (v1 instanceof Cons && v1.value1 instanceof Nil) {
              return new Cons(f2(v1.value0), Nil.value);
            }
            ;
            return Nil.value;
          };
          var reverseUnrolledMap = function($copy_v1) {
            return function($copy_acc) {
              var $tco_var_v1 = $copy_v1;
              var $tco_done1 = false;
              var $tco_result2;
              function $tco_loop2(v1, acc) {
                if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                  $tco_var_v1 = v1.value1;
                  $copy_acc = new Cons(f2(v1.value0.value0), new Cons(f2(v1.value0.value1.value0), new Cons(f2(v1.value0.value1.value1.value0), acc)));
                  return;
                }
                ;
                $tco_done1 = true;
                return acc;
              }
              ;
              while (!$tco_done1) {
                $tco_result2 = $tco_loop2($tco_var_v1, $copy_acc);
              }
              ;
              return $tco_result2;
            };
          };
          $tco_done = true;
          return reverseUnrolledMap(chunksAcc)(unrolledMap(v2));
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return chunkedRevMap(Nil.value);
  };
  var functorList = {
    map: listMap
  };
  var map9 = /* @__PURE__ */ map(functorList);
  var functorNonEmptyList = /* @__PURE__ */ functorNonEmpty(functorList);
  var foldableList = {
    foldr: function(f2) {
      return function(b4) {
        var rev3 = function() {
          var go2 = function($copy_acc) {
            return function($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v2) {
                if (v2 instanceof Nil) {
                  $tco_done = true;
                  return acc;
                }
                ;
                if (v2 instanceof Cons) {
                  $tco_var_acc = new Cons(v2.value0, acc);
                  $copy_v = v2.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.List.Types (line 107, column 7 - line 107, column 23): " + [acc.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_acc, $copy_v);
              }
              ;
              return $tco_result;
            };
          };
          return go2(Nil.value);
        }();
        var $281 = foldl(foldableList)(flip(f2))(b4);
        return function($282) {
          return $281(rev3($282));
        };
      };
    },
    foldl: function(f2) {
      var go2 = function($copy_b) {
        return function($copy_v) {
          var $tco_var_b = $copy_b;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(b4, v2) {
            if (v2 instanceof Nil) {
              $tco_done1 = true;
              return b4;
            }
            ;
            if (v2 instanceof Cons) {
              $tco_var_b = f2(b4)(v2.value0);
              $copy_v = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Types (line 111, column 12 - line 113, column 30): " + [v2.constructor.name]);
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_b, $copy_v);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append211 = append(dictMonoid.Semigroup0());
      var mempty33 = mempty(dictMonoid);
      return function(f2) {
        return foldl(foldableList)(function(acc) {
          var $283 = append211(acc);
          return function($284) {
            return $283(f2($284));
          };
        })(mempty33);
      };
    }
  };
  var foldr2 = /* @__PURE__ */ foldr(foldableList);
  var intercalate5 = /* @__PURE__ */ intercalate2(foldableList)(monoidString);
  var semigroupList = {
    append: function(xs) {
      return function(ys) {
        return foldr2(Cons.create)(ys)(xs);
      };
    }
  };
  var append1 = /* @__PURE__ */ append(semigroupList);
  var monoidList = /* @__PURE__ */ function() {
    return {
      mempty: Nil.value,
      Semigroup0: function() {
        return semigroupList;
      }
    };
  }();
  var semigroupNonEmptyList = {
    append: function(v2) {
      return function(as$prime) {
        return new NonEmpty(v2.value0, append1(v2.value1)(toList(as$prime)));
      };
    }
  };
  var showList = function(dictShow) {
    var show26 = show(dictShow);
    return {
      show: function(v2) {
        if (v2 instanceof Nil) {
          return "Nil";
        }
        ;
        return "(" + (intercalate5(" : ")(map9(show26)(v2)) + " : Nil)");
      }
    };
  };
  var showNonEmptyList = function(dictShow) {
    var show26 = show(showNonEmpty(dictShow)(showList(dictShow)));
    return {
      show: function(v2) {
        return "(NonEmptyList " + (show26(v2) + ")");
      }
    };
  };
  var eq1List = {
    eq1: function(dictEq) {
      var eq21 = eq(dictEq);
      return function(xs) {
        return function(ys) {
          var go2 = function($copy_v) {
            return function($copy_v1) {
              return function($copy_v2) {
                var $tco_var_v = $copy_v;
                var $tco_var_v1 = $copy_v1;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(v2, v1, v22) {
                  if (!v22) {
                    $tco_done = true;
                    return false;
                  }
                  ;
                  if (v2 instanceof Nil && v1 instanceof Nil) {
                    $tco_done = true;
                    return v22;
                  }
                  ;
                  if (v2 instanceof Cons && v1 instanceof Cons) {
                    $tco_var_v = v2.value1;
                    $tco_var_v1 = v1.value1;
                    $copy_v2 = v22 && eq21(v1.value0)(v2.value0);
                    return;
                  }
                  ;
                  $tco_done = true;
                  return false;
                }
                ;
                while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                }
                ;
                return $tco_result;
              };
            };
          };
          return go2(xs)(ys)(true);
        };
      };
    }
  };
  var eqNonEmpty2 = /* @__PURE__ */ eqNonEmpty(eq1List);
  var eqNonEmptyList = function(dictEq) {
    return eqNonEmpty2(dictEq);
  };
  var applyList = {
    apply: function(v2) {
      return function(v1) {
        if (v2 instanceof Nil) {
          return Nil.value;
        }
        ;
        if (v2 instanceof Cons) {
          return append1(map9(v2.value0)(v1))(apply(applyList)(v2.value1)(v1));
        }
        ;
        throw new Error("Failed pattern match at Data.List.Types (line 157, column 1 - line 159, column 48): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorList;
    }
  };
  var apply3 = /* @__PURE__ */ apply(applyList);
  var applyNonEmptyList = {
    apply: function(v2) {
      return function(v1) {
        return new NonEmpty(v2.value0(v1.value0), append1(apply3(v2.value1)(new Cons(v1.value0, Nil.value)))(apply3(new Cons(v2.value0, v2.value1))(v1.value1)));
      };
    },
    Functor0: function() {
      return functorNonEmptyList;
    }
  };
  var altList = {
    alt: append1,
    Functor0: function() {
      return functorList;
    }
  };
  var plusList = /* @__PURE__ */ function() {
    return {
      empty: Nil.value,
      Alt0: function() {
        return altList;
      }
    };
  }();
  var applicativeNonEmptyList = {
    pure: /* @__PURE__ */ function() {
      var $312 = singleton3(plusList);
      return function($313) {
        return NonEmptyList($312($313));
      };
    }(),
    Apply0: function() {
      return applyNonEmptyList;
    }
  };

  // output/Data.List/index.js
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_acc) {
      return function($copy_v) {
        var $tco_var_acc = $copy_acc;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(acc, v2) {
          if (v2 instanceof Nil) {
            $tco_done = true;
            return acc;
          }
          ;
          if (v2 instanceof Cons) {
            $tco_var_acc = new Cons(v2.value0, acc);
            $copy_v = v2.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [acc.constructor.name, v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();
  var mapMaybe2 = function(f2) {
    var go2 = function($copy_acc) {
      return function($copy_v) {
        var $tco_var_acc = $copy_acc;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(acc, v2) {
          if (v2 instanceof Nil) {
            $tco_done = true;
            return reverse2(acc);
          }
          ;
          if (v2 instanceof Cons) {
            var v1 = f2(v2.value0);
            if (v1 instanceof Nothing) {
              $tco_var_acc = acc;
              $copy_v = v2.value1;
              return;
            }
            ;
            if (v1 instanceof Just) {
              $tco_var_acc = new Cons(v1.value0, acc);
              $copy_v = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [acc.constructor.name, v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_acc, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  };

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f2) {
    return f2();
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg) {
    throw new Error(msg);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg) {
    return unsafePartial(function() {
      return crashWith2(msg);
    });
  };

  // output/Data.List.NonEmpty/index.js
  var singleton5 = /* @__PURE__ */ function() {
    var $199 = singleton3(plusList);
    return function($200) {
      return NonEmptyList($199($200));
    };
  }();

  // output/Data.Lazy/foreign.js
  var defer2 = function(thunk) {
    var v2 = null;
    return function() {
      if (thunk === void 0)
        return v2;
      v2 = thunk();
      thunk = void 0;
      return v2;
    };
  };
  var force = function(l2) {
    return l2();
  };

  // output/Data.Lazy/index.js
  var functorLazy = {
    map: function(f2) {
      return function(l2) {
        return defer2(function(v2) {
          return f2(force(l2));
        });
      };
    }
  };

  // output/Data.List.Lazy.Types/index.js
  var unwrap4 = /* @__PURE__ */ unwrap();
  var List = function(x3) {
    return x3;
  };
  var Nil2 = /* @__PURE__ */ function() {
    function Nil3() {
    }
    ;
    Nil3.value = new Nil3();
    return Nil3;
  }();
  var Cons2 = /* @__PURE__ */ function() {
    function Cons3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons3.create = function(value0) {
      return function(value1) {
        return new Cons3(value0, value1);
      };
    };
    return Cons3;
  }();
  var nil = /* @__PURE__ */ defer2(function(v2) {
    return Nil2.value;
  });
  var step = function($319) {
    return force(unwrap4($319));
  };
  var lazyList = {
    defer: function(f2) {
      return defer2(function($320) {
        return step(f2($320));
      });
    }
  };
  var defer3 = /* @__PURE__ */ defer(lazyList);
  var cons4 = function(x3) {
    return function(xs) {
      return defer2(function(v2) {
        return new Cons2(x3, xs);
      });
    };
  };
  var foldableList2 = {
    foldr: function(op) {
      return function(z2) {
        return function(xs) {
          var rev3 = foldl(foldableList2)(flip(cons4))(nil);
          return foldl(foldableList2)(flip(op))(z2)(rev3(xs));
        };
      };
    },
    foldl: function(op) {
      var go2 = function($copy_b) {
        return function($copy_xs) {
          var $tco_var_b = $copy_b;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(b4, xs) {
            var v2 = step(xs);
            if (v2 instanceof Nil2) {
              $tco_done = true;
              return b4;
            }
            ;
            if (v2 instanceof Cons2) {
              $tco_var_b = op(b4)(v2.value0);
              $copy_xs = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 127, column 7 - line 129, column 40): " + [v2.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_b, $copy_xs);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    },
    foldMap: function(dictMonoid) {
      var append211 = append(dictMonoid.Semigroup0());
      var mempty33 = mempty(dictMonoid);
      return function(f2) {
        return foldl(foldableList2)(function(b4) {
          return function(a4) {
            return append211(b4)(f2(a4));
          };
        })(mempty33);
      };
    }
  };
  var unfoldable1List = {
    unfoldr1: /* @__PURE__ */ function() {
      var go2 = function(f2) {
        return function(b4) {
          return defer3(function(v2) {
            var v1 = f2(b4);
            if (v1.value1 instanceof Just) {
              return cons4(v1.value0)(go2(f2)(v1.value1.value0));
            }
            ;
            if (v1.value1 instanceof Nothing) {
              return cons4(v1.value0)(nil);
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 151, column 28 - line 153, column 33): " + [v1.constructor.name]);
          });
        };
      };
      return go2;
    }()
  };
  var unfoldableList = {
    unfoldr: /* @__PURE__ */ function() {
      var go2 = function(f2) {
        return function(b4) {
          return defer3(function(v2) {
            var v1 = f2(b4);
            if (v1 instanceof Nothing) {
              return nil;
            }
            ;
            if (v1 instanceof Just) {
              return cons4(v1.value0.value0)(go2(f2)(v1.value0.value1));
            }
            ;
            throw new Error("Failed pattern match at Data.List.Lazy.Types (line 157, column 28 - line 159, column 39): " + [v1.constructor.name]);
          });
        };
      };
      return go2;
    }(),
    Unfoldable10: function() {
      return unfoldable1List;
    }
  };

  // output/Data.List.Lazy/index.js
  var map10 = /* @__PURE__ */ map(functorLazy);
  var unwrap5 = /* @__PURE__ */ unwrap();
  var filter3 = function(p3) {
    var go2 = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v2) {
        if (v2 instanceof Nil2) {
          $tco_done = true;
          return Nil2.value;
        }
        ;
        if (v2 instanceof Cons2) {
          if (p3(v2.value0)) {
            $tco_done = true;
            return new Cons2(v2.value0, filter3(p3)(v2.value1));
          }
          ;
          if (otherwise) {
            $copy_v = step(v2.value1);
            return;
          }
          ;
        }
        ;
        throw new Error("Failed pattern match at Data.List.Lazy (line 416, column 3 - line 416, column 15): " + [v2.constructor.name]);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    var $342 = map10(go2);
    return function($343) {
      return List($342(unwrap5($343)));
    };
  };

  // output/Data.Map.Internal/index.js
  var Leaf = /* @__PURE__ */ function() {
    function Leaf2() {
    }
    ;
    Leaf2.value = new Leaf2();
    return Leaf2;
  }();
  var Two = /* @__PURE__ */ function() {
    function Two2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Two2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Two2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Two2;
  }();
  var Three = /* @__PURE__ */ function() {
    function Three2(value0, value1, value22, value32, value42, value52, value62) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
      this.value6 = value62;
    }
    ;
    Three2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return function(value62) {
                  return new Three2(value0, value1, value22, value32, value42, value52, value62);
                };
              };
            };
          };
        };
      };
    };
    return Three2;
  }();
  var TwoLeft = /* @__PURE__ */ function() {
    function TwoLeft2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoLeft2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoLeft2(value0, value1, value22);
        };
      };
    };
    return TwoLeft2;
  }();
  var TwoRight = /* @__PURE__ */ function() {
    function TwoRight2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    TwoRight2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new TwoRight2(value0, value1, value22);
        };
      };
    };
    return TwoRight2;
  }();
  var ThreeLeft = /* @__PURE__ */ function() {
    function ThreeLeft2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeLeft2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeLeft2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeLeft2;
  }();
  var ThreeMiddle = /* @__PURE__ */ function() {
    function ThreeMiddle2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeMiddle2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeMiddle2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeMiddle2;
  }();
  var ThreeRight = /* @__PURE__ */ function() {
    function ThreeRight2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    ThreeRight2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new ThreeRight2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return ThreeRight2;
  }();
  var KickUp = /* @__PURE__ */ function() {
    function KickUp2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    KickUp2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new KickUp2(value0, value1, value22, value32);
          };
        };
      };
    };
    return KickUp2;
  }();
  var singleton6 = function(k2) {
    return function(v2) {
      return new Two(Leaf.value, k2, v2, Leaf.value);
    };
  };
  var toUnfoldable2 = function(dictUnfoldable) {
    var unfoldr3 = unfoldr(dictUnfoldable);
    return function(m2) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v2) {
          if (v2 instanceof Nil) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v2 instanceof Cons) {
            if (v2.value0 instanceof Leaf) {
              $copy_v = v2.value1;
              return;
            }
            ;
            if (v2.value0 instanceof Two && (v2.value0.value0 instanceof Leaf && v2.value0.value3 instanceof Leaf)) {
              $tco_done = true;
              return new Just(new Tuple(new Tuple(v2.value0.value1, v2.value0.value2), v2.value1));
            }
            ;
            if (v2.value0 instanceof Two && v2.value0.value0 instanceof Leaf) {
              $tco_done = true;
              return new Just(new Tuple(new Tuple(v2.value0.value1, v2.value0.value2), new Cons(v2.value0.value3, v2.value1)));
            }
            ;
            if (v2.value0 instanceof Two) {
              $copy_v = new Cons(v2.value0.value0, new Cons(singleton6(v2.value0.value1)(v2.value0.value2), new Cons(v2.value0.value3, v2.value1)));
              return;
            }
            ;
            if (v2.value0 instanceof Three) {
              $copy_v = new Cons(v2.value0.value0, new Cons(singleton6(v2.value0.value1)(v2.value0.value2), new Cons(v2.value0.value3, new Cons(singleton6(v2.value0.value4)(v2.value0.value5), new Cons(v2.value0.value6, v2.value1)))));
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 624, column 18 - line 633, column 71): " + [v2.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 623, column 3 - line 623, column 19): " + [v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return unfoldr3(go2)(new Cons(m2, Nil.value));
    };
  };
  var toUnfoldable1 = /* @__PURE__ */ toUnfoldable2(unfoldableList);
  var toAscArray = /* @__PURE__ */ toUnfoldable2(unfoldableArray);
  var lookup = function(dictOrd) {
    var compare4 = compare(dictOrd);
    return function(k2) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v2) {
          if (v2 instanceof Leaf) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v2 instanceof Two) {
            var v22 = compare4(k2)(v2.value1);
            if (v22 instanceof EQ) {
              $tco_done = true;
              return new Just(v2.value2);
            }
            ;
            if (v22 instanceof LT) {
              $copy_v = v2.value0;
              return;
            }
            ;
            $copy_v = v2.value3;
            return;
          }
          ;
          if (v2 instanceof Three) {
            var v3 = compare4(k2)(v2.value1);
            if (v3 instanceof EQ) {
              $tco_done = true;
              return new Just(v2.value2);
            }
            ;
            var v42 = compare4(k2)(v2.value4);
            if (v42 instanceof EQ) {
              $tco_done = true;
              return new Just(v2.value5);
            }
            ;
            if (v3 instanceof LT) {
              $copy_v = v2.value0;
              return;
            }
            ;
            if (v42 instanceof GT) {
              $copy_v = v2.value6;
              return;
            }
            ;
            $copy_v = v2.value3;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 241, column 5 - line 241, column 22): " + [v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var fromZipper = function($copy_dictOrd) {
    return function($copy_v) {
      return function($copy_tree) {
        var $tco_var_dictOrd = $copy_dictOrd;
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(dictOrd, v2, tree) {
          if (v2 instanceof Nil) {
            $tco_done = true;
            return tree;
          }
          ;
          if (v2 instanceof Cons) {
            if (v2.value0 instanceof TwoLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v2.value1;
              $copy_tree = new Two(tree, v2.value0.value0, v2.value0.value1, v2.value0.value2);
              return;
            }
            ;
            if (v2.value0 instanceof TwoRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v2.value1;
              $copy_tree = new Two(v2.value0.value0, v2.value0.value1, v2.value0.value2, tree);
              return;
            }
            ;
            if (v2.value0 instanceof ThreeLeft) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v2.value1;
              $copy_tree = new Three(tree, v2.value0.value0, v2.value0.value1, v2.value0.value2, v2.value0.value3, v2.value0.value4, v2.value0.value5);
              return;
            }
            ;
            if (v2.value0 instanceof ThreeMiddle) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v2.value1;
              $copy_tree = new Three(v2.value0.value0, v2.value0.value1, v2.value0.value2, tree, v2.value0.value3, v2.value0.value4, v2.value0.value5);
              return;
            }
            ;
            if (v2.value0 instanceof ThreeRight) {
              $tco_var_dictOrd = dictOrd;
              $tco_var_v = v2.value1;
              $copy_tree = new Three(v2.value0.value0, v2.value0.value1, v2.value0.value2, v2.value0.value3, v2.value0.value4, v2.value0.value5, tree);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 462, column 3 - line 467, column 88): " + [v2.value0.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 459, column 1 - line 459, column 80): " + [v2.constructor.name, tree.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
        }
        ;
        return $tco_result;
      };
    };
  };
  var insert2 = function(dictOrd) {
    var fromZipper1 = fromZipper(dictOrd);
    var compare4 = compare(dictOrd);
    return function(k2) {
      return function(v2) {
        var up = function($copy_v1) {
          return function($copy_v2) {
            var $tco_var_v1 = $copy_v1;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(v1, v22) {
              if (v1 instanceof Nil) {
                $tco_done = true;
                return new Two(v22.value0, v22.value1, v22.value2, v22.value3);
              }
              ;
              if (v1 instanceof Cons) {
                if (v1.value0 instanceof TwoLeft) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three(v22.value0, v22.value1, v22.value2, v22.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                }
                ;
                if (v1.value0 instanceof TwoRight) {
                  $tco_done = true;
                  return fromZipper1(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v22.value0, v22.value1, v22.value2, v22.value3));
                }
                ;
                if (v1.value0 instanceof ThreeLeft) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v22.value0, v22.value1, v22.value2, v22.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeMiddle) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v22.value0), v22.value1, v22.value2, new Two(v22.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                  return;
                }
                ;
                if (v1.value0 instanceof ThreeRight) {
                  $tco_var_v1 = v1.value1;
                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v22.value0, v22.value1, v22.value2, v22.value3));
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.Map.Internal (line 498, column 5 - line 503, column 108): " + [v1.value0.constructor.name, v22.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 495, column 3 - line 495, column 56): " + [v1.constructor.name, v22.constructor.name]);
            }
            ;
            while (!$tco_done) {
              $tco_result = $tco_loop($tco_var_v1, $copy_v2);
            }
            ;
            return $tco_result;
          };
        };
        var down = function($copy_ctx) {
          return function($copy_v1) {
            var $tco_var_ctx = $copy_ctx;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(ctx, v1) {
              if (v1 instanceof Leaf) {
                $tco_done1 = true;
                return up(ctx)(new KickUp(Leaf.value, k2, v2, Leaf.value));
              }
              ;
              if (v1 instanceof Two) {
                var v22 = compare4(k2)(v1.value1);
                if (v22 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Two(v1.value0, k2, v2, v1.value3));
                }
                ;
                if (v22 instanceof LT) {
                  $tco_var_ctx = new Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                $tco_var_ctx = new Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                $copy_v1 = v1.value3;
                return;
              }
              ;
              if (v1 instanceof Three) {
                var v3 = compare4(k2)(v1.value1);
                if (v3 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Three(v1.value0, k2, v2, v1.value3, v1.value4, v1.value5, v1.value6));
                }
                ;
                var v42 = compare4(k2)(v1.value4);
                if (v42 instanceof EQ) {
                  $tco_done1 = true;
                  return fromZipper1(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k2, v2, v1.value6));
                }
                ;
                if (v3 instanceof LT) {
                  $tco_var_ctx = new Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value0;
                  return;
                }
                ;
                if (v3 instanceof GT && v42 instanceof LT) {
                  $tco_var_ctx = new Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                  $copy_v1 = v1.value3;
                  return;
                }
                ;
                $tco_var_ctx = new Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                $copy_v1 = v1.value6;
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.Map.Internal (line 478, column 3 - line 478, column 55): " + [ctx.constructor.name, v1.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
            }
            ;
            return $tco_result;
          };
        };
        return down(Nil.value);
      };
    };
  };
  var pop = function(dictOrd) {
    var fromZipper1 = fromZipper(dictOrd);
    var compare4 = compare(dictOrd);
    return function(k2) {
      var up = function($copy_ctxs) {
        return function($copy_tree) {
          var $tco_var_ctxs = $copy_ctxs;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(ctxs, tree) {
            if (ctxs instanceof Nil) {
              $tco_done = true;
              return tree;
            }
            ;
            if (ctxs instanceof Cons) {
              if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
              }
              ;
              if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
              }
              ;
              if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                $tco_var_ctxs = ctxs.value1;
                $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                return;
              }
              ;
              if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                $tco_var_ctxs = ctxs.value1;
                $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                return;
              }
              ;
              if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
              }
              ;
              if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
              }
              ;
              if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
              }
              ;
              if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
              }
              ;
              if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
              }
              ;
              if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }
              ;
              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }
              ;
              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
              }
              ;
              if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
              }
              ;
              if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }
              ;
              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
              }
              ;
              if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
              }
              ;
              if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                $tco_done = true;
                return fromZipper1(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
              }
              ;
              $tco_done = true;
              return unsafeCrashWith("The impossible happened in partial function `up`.");
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 552, column 5 - line 573, column 86): " + [ctxs.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
          }
          ;
          return $tco_result;
        };
      };
      var removeMaxNode = function($copy_ctx) {
        return function($copy_m) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done1 = false;
          var $tco_result;
          function $tco_loop(ctx, m2) {
            if (m2 instanceof Two && (m2.value0 instanceof Leaf && m2.value3 instanceof Leaf)) {
              $tco_done1 = true;
              return up(ctx)(Leaf.value);
            }
            ;
            if (m2 instanceof Two) {
              $tco_var_ctx = new Cons(new TwoRight(m2.value0, m2.value1, m2.value2), ctx);
              $copy_m = m2.value3;
              return;
            }
            ;
            if (m2 instanceof Three && (m2.value0 instanceof Leaf && (m2.value3 instanceof Leaf && m2.value6 instanceof Leaf))) {
              $tco_done1 = true;
              return up(new Cons(new TwoRight(Leaf.value, m2.value1, m2.value2), ctx))(Leaf.value);
            }
            ;
            if (m2 instanceof Three) {
              $tco_var_ctx = new Cons(new ThreeRight(m2.value0, m2.value1, m2.value2, m2.value3, m2.value4, m2.value5), ctx);
              $copy_m = m2.value6;
              return;
            }
            ;
            $tco_done1 = true;
            return unsafeCrashWith("The impossible happened in partial function `removeMaxNode`.");
          }
          ;
          while (!$tco_done1) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_m);
          }
          ;
          return $tco_result;
        };
      };
      var maxNode = function($copy_m) {
        var $tco_done2 = false;
        var $tco_result;
        function $tco_loop(m2) {
          if (m2 instanceof Two && m2.value3 instanceof Leaf) {
            $tco_done2 = true;
            return {
              key: m2.value1,
              value: m2.value2
            };
          }
          ;
          if (m2 instanceof Two) {
            $copy_m = m2.value3;
            return;
          }
          ;
          if (m2 instanceof Three && m2.value6 instanceof Leaf) {
            $tco_done2 = true;
            return {
              key: m2.value4,
              value: m2.value5
            };
          }
          ;
          if (m2 instanceof Three) {
            $copy_m = m2.value6;
            return;
          }
          ;
          $tco_done2 = true;
          return unsafeCrashWith("The impossible happened in partial function `maxNode`.");
        }
        ;
        while (!$tco_done2) {
          $tco_result = $tco_loop($copy_m);
        }
        ;
        return $tco_result;
      };
      var down = function($copy_ctx) {
        return function($copy_m) {
          var $tco_var_ctx = $copy_ctx;
          var $tco_done3 = false;
          var $tco_result;
          function $tco_loop(ctx, m2) {
            if (m2 instanceof Leaf) {
              $tco_done3 = true;
              return Nothing.value;
            }
            ;
            if (m2 instanceof Two) {
              var v2 = compare4(k2)(m2.value1);
              if (m2.value3 instanceof Leaf && v2 instanceof EQ) {
                $tco_done3 = true;
                return new Just(new Tuple(m2.value2, up(ctx)(Leaf.value)));
              }
              ;
              if (v2 instanceof EQ) {
                var max7 = maxNode(m2.value0);
                $tco_done3 = true;
                return new Just(new Tuple(m2.value2, removeMaxNode(new Cons(new TwoLeft(max7.key, max7.value, m2.value3), ctx))(m2.value0)));
              }
              ;
              if (v2 instanceof LT) {
                $tco_var_ctx = new Cons(new TwoLeft(m2.value1, m2.value2, m2.value3), ctx);
                $copy_m = m2.value0;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new TwoRight(m2.value0, m2.value1, m2.value2), ctx);
              $copy_m = m2.value3;
              return;
            }
            ;
            if (m2 instanceof Three) {
              var leaves = function() {
                if (m2.value0 instanceof Leaf && (m2.value3 instanceof Leaf && m2.value6 instanceof Leaf)) {
                  return true;
                }
                ;
                return false;
              }();
              var v2 = compare4(k2)(m2.value4);
              var v3 = compare4(k2)(m2.value1);
              if (leaves && v3 instanceof EQ) {
                $tco_done3 = true;
                return new Just(new Tuple(m2.value2, fromZipper1(ctx)(new Two(Leaf.value, m2.value4, m2.value5, Leaf.value))));
              }
              ;
              if (leaves && v2 instanceof EQ) {
                $tco_done3 = true;
                return new Just(new Tuple(m2.value5, fromZipper1(ctx)(new Two(Leaf.value, m2.value1, m2.value2, Leaf.value))));
              }
              ;
              if (v3 instanceof EQ) {
                var max7 = maxNode(m2.value0);
                $tco_done3 = true;
                return new Just(new Tuple(m2.value2, removeMaxNode(new Cons(new ThreeLeft(max7.key, max7.value, m2.value3, m2.value4, m2.value5, m2.value6), ctx))(m2.value0)));
              }
              ;
              if (v2 instanceof EQ) {
                var max7 = maxNode(m2.value3);
                $tco_done3 = true;
                return new Just(new Tuple(m2.value5, removeMaxNode(new Cons(new ThreeMiddle(m2.value0, m2.value1, m2.value2, max7.key, max7.value, m2.value6), ctx))(m2.value3)));
              }
              ;
              if (v3 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeLeft(m2.value1, m2.value2, m2.value3, m2.value4, m2.value5, m2.value6), ctx);
                $copy_m = m2.value0;
                return;
              }
              ;
              if (v3 instanceof GT && v2 instanceof LT) {
                $tco_var_ctx = new Cons(new ThreeMiddle(m2.value0, m2.value1, m2.value2, m2.value4, m2.value5, m2.value6), ctx);
                $copy_m = m2.value3;
                return;
              }
              ;
              $tco_var_ctx = new Cons(new ThreeRight(m2.value0, m2.value1, m2.value2, m2.value3, m2.value4, m2.value5), ctx);
              $copy_m = m2.value6;
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 525, column 16 - line 548, column 80): " + [m2.constructor.name]);
          }
          ;
          while (!$tco_done3) {
            $tco_result = $tco_loop($tco_var_ctx, $copy_m);
          }
          ;
          return $tco_result;
        };
      };
      return down(Nil.value);
    };
  };
  var foldableMap = {
    foldr: function(f2) {
      return function(z2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return z2;
          }
          ;
          if (m2 instanceof Two) {
            return foldr(foldableMap)(f2)(f2(m2.value2)(foldr(foldableMap)(f2)(z2)(m2.value3)))(m2.value0);
          }
          ;
          if (m2 instanceof Three) {
            return foldr(foldableMap)(f2)(f2(m2.value2)(foldr(foldableMap)(f2)(f2(m2.value5)(foldr(foldableMap)(f2)(z2)(m2.value6)))(m2.value3)))(m2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 133, column 17 - line 136, column 85): " + [m2.constructor.name]);
        };
      };
    },
    foldl: function(f2) {
      return function(z2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return z2;
          }
          ;
          if (m2 instanceof Two) {
            return foldl(foldableMap)(f2)(f2(foldl(foldableMap)(f2)(z2)(m2.value0))(m2.value2))(m2.value3);
          }
          ;
          if (m2 instanceof Three) {
            return foldl(foldableMap)(f2)(f2(foldl(foldableMap)(f2)(f2(foldl(foldableMap)(f2)(z2)(m2.value0))(m2.value2))(m2.value3))(m2.value5))(m2.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 137, column 17 - line 140, column 85): " + [m2.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty33 = mempty(dictMonoid);
      var append211 = append(dictMonoid.Semigroup0());
      return function(f2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return mempty33;
          }
          ;
          if (m2 instanceof Two) {
            return append211(foldMap(foldableMap)(dictMonoid)(f2)(m2.value0))(append211(f2(m2.value2))(foldMap(foldableMap)(dictMonoid)(f2)(m2.value3)));
          }
          ;
          if (m2 instanceof Three) {
            return append211(foldMap(foldableMap)(dictMonoid)(f2)(m2.value0))(append211(f2(m2.value2))(append211(foldMap(foldableMap)(dictMonoid)(f2)(m2.value3))(append211(f2(m2.value5))(foldMap(foldableMap)(dictMonoid)(f2)(m2.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 141, column 17 - line 144, column 93): " + [m2.constructor.name]);
        };
      };
    }
  };
  var foldableWithIndexMap = {
    foldrWithIndex: function(f2) {
      return function(z2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return z2;
          }
          ;
          if (m2 instanceof Two) {
            return foldrWithIndex(foldableWithIndexMap)(f2)(f2(m2.value1)(m2.value2)(foldrWithIndex(foldableWithIndexMap)(f2)(z2)(m2.value3)))(m2.value0);
          }
          ;
          if (m2 instanceof Three) {
            return foldrWithIndex(foldableWithIndexMap)(f2)(f2(m2.value1)(m2.value2)(foldrWithIndex(foldableWithIndexMap)(f2)(f2(m2.value4)(m2.value5)(foldrWithIndex(foldableWithIndexMap)(f2)(z2)(m2.value6)))(m2.value3)))(m2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 147, column 26 - line 150, column 120): " + [m2.constructor.name]);
        };
      };
    },
    foldlWithIndex: function(f2) {
      return function(z2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return z2;
          }
          ;
          if (m2 instanceof Two) {
            return foldlWithIndex(foldableWithIndexMap)(f2)(f2(m2.value1)(foldlWithIndex(foldableWithIndexMap)(f2)(z2)(m2.value0))(m2.value2))(m2.value3);
          }
          ;
          if (m2 instanceof Three) {
            return foldlWithIndex(foldableWithIndexMap)(f2)(f2(m2.value4)(foldlWithIndex(foldableWithIndexMap)(f2)(f2(m2.value1)(foldlWithIndex(foldableWithIndexMap)(f2)(z2)(m2.value0))(m2.value2))(m2.value3))(m2.value5))(m2.value6);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 151, column 26 - line 154, column 120): " + [m2.constructor.name]);
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      var mempty33 = mempty(dictMonoid);
      var append211 = append(dictMonoid.Semigroup0());
      return function(f2) {
        return function(m2) {
          if (m2 instanceof Leaf) {
            return mempty33;
          }
          ;
          if (m2 instanceof Two) {
            return append211(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f2)(m2.value0))(append211(f2(m2.value1)(m2.value2))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f2)(m2.value3)));
          }
          ;
          if (m2 instanceof Three) {
            return append211(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f2)(m2.value0))(append211(f2(m2.value1)(m2.value2))(append211(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f2)(m2.value3))(append211(f2(m2.value4)(m2.value5))(foldMapWithIndex(foldableWithIndexMap)(dictMonoid)(f2)(m2.value6)))));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 155, column 26 - line 158, column 128): " + [m2.constructor.name]);
        };
      };
    },
    Foldable0: function() {
      return foldableMap;
    }
  };
  var foldrWithIndex2 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexMap);
  var foldlWithIndex2 = /* @__PURE__ */ foldlWithIndex(foldableWithIndexMap);
  var values = /* @__PURE__ */ function() {
    return foldr(foldableMap)(Cons.create)(Nil.value);
  }();
  var eqMap = function(dictEq) {
    var eqTuple2 = eqTuple(dictEq);
    return function(dictEq1) {
      var eq111 = eq(eqArray(eqTuple2(dictEq1)));
      return {
        eq: function(m1) {
          return function(m2) {
            return eq111(toAscArray(m1))(toAscArray(m2));
          };
        }
      };
    };
  };
  var empty3 = /* @__PURE__ */ function() {
    return Leaf.value;
  }();
  var fromFoldable3 = function(dictOrd) {
    var insert12 = insert2(dictOrd);
    return function(dictFoldable) {
      return foldl(dictFoldable)(function(m2) {
        return function(v2) {
          return insert12(v2.value0)(v2.value1)(m2);
        };
      })(empty3);
    };
  };
  var filterWithKey = function(dictOrd) {
    var fromFoldable12 = fromFoldable3(dictOrd)(foldableList2);
    return function(predicate) {
      var $923 = filter3(uncurry(predicate));
      return function($924) {
        return fromFoldable12($923(toUnfoldable1($924)));
      };
    };
  };
  var mapMaybeWithKey = function(dictOrd) {
    var insert12 = insert2(dictOrd);
    return function(f2) {
      return foldrWithIndex2(function(k2) {
        return function(a4) {
          return function(acc) {
            return maybe(acc)(function(b4) {
              return insert12(k2)(b4)(acc);
            })(f2(k2)(a4));
          };
        };
      })(empty3);
    };
  };
  var mapMaybe3 = function(dictOrd) {
    var $926 = mapMaybeWithKey(dictOrd);
    return function($927) {
      return $926($$const($927));
    };
  };
  var $$delete2 = function(dictOrd) {
    var pop1 = pop(dictOrd);
    return function(k2) {
      return function(m2) {
        return maybe(m2)(snd)(pop1(k2)(m2));
      };
    };
  };
  var alter = function(dictOrd) {
    var lookup1 = lookup(dictOrd);
    var delete13 = $$delete2(dictOrd);
    var insert12 = insert2(dictOrd);
    return function(f2) {
      return function(k2) {
        return function(m2) {
          var v2 = f2(lookup1(k2)(m2));
          if (v2 instanceof Nothing) {
            return delete13(k2)(m2);
          }
          ;
          if (v2 instanceof Just) {
            return insert12(k2)(v2.value0)(m2);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 596, column 15 - line 598, column 25): " + [v2.constructor.name]);
        };
      };
    };
  };
  var unionWith = function(dictOrd) {
    var alter1 = alter(dictOrd);
    return function(f2) {
      return function(m1) {
        return function(m2) {
          var go2 = function(k2) {
            return function(m3) {
              return function(v2) {
                return alter1(function() {
                  var $932 = maybe(v2)(f2(v2));
                  return function($933) {
                    return Just.create($932($933));
                  };
                }())(k2)(m3);
              };
            };
          };
          return foldlWithIndex2(go2)(m2)(m1);
        };
      };
    };
  };
  var semigroupMap = function() {
    return function(dictOrd) {
      var unionWith1 = unionWith(dictOrd);
      return function(dictSemigroup) {
        var append211 = append(dictSemigroup);
        return {
          append: function(l2) {
            return function(r2) {
              return unionWith1(append211)(l2)(r2);
            };
          }
        };
      };
    };
  };
  var union2 = function(dictOrd) {
    return unionWith(dictOrd)($$const);
  };

  // output/Data.Enum/foreign.js
  function toCharCode(c3) {
    return c3.charCodeAt(0);
  }
  function fromCharCode(c3) {
    return String.fromCharCode(c3);
  }

  // output/Control.Alternative/index.js
  var guard2 = function(dictAlternative) {
    var pure64 = pure(dictAlternative.Applicative0());
    var empty5 = empty(dictAlternative.Plus1());
    return function(v2) {
      if (v2) {
        return pure64(unit);
      }
      ;
      if (!v2) {
        return empty5;
      }
      ;
      throw new Error("Failed pattern match at Control.Alternative (line 48, column 1 - line 48, column 54): " + [v2.constructor.name]);
    };
  };

  // output/Data.Enum/index.js
  var top3 = /* @__PURE__ */ top(boundedInt);
  var bottom3 = /* @__PURE__ */ bottom(boundedInt);
  var bind5 = /* @__PURE__ */ bind(bindMaybe);
  var voidLeft2 = /* @__PURE__ */ voidLeft(functorMaybe);
  var guard3 = /* @__PURE__ */ guard2(alternativeMaybe);
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var succ = function(dict) {
    return dict.succ;
  };
  var pred = function(dict) {
    return dict.pred;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };
  var toEnumWithDefaults = function(dictBoundedEnum) {
    var toEnum1 = toEnum(dictBoundedEnum);
    var fromEnum1 = fromEnum(dictBoundedEnum);
    var bottom1 = bottom(dictBoundedEnum.Bounded0());
    return function(low2) {
      return function(high2) {
        return function(x3) {
          var v2 = toEnum1(x3);
          if (v2 instanceof Just) {
            return v2.value0;
          }
          ;
          if (v2 instanceof Nothing) {
            var $140 = x3 < fromEnum1(bottom1);
            if ($140) {
              return low2;
            }
            ;
            return high2;
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [v2.constructor.name]);
        };
      };
    };
  };
  var enumFromTo = function(dictEnum) {
    var Ord0 = dictEnum.Ord0();
    var eq111 = eq(Ord0.Eq0());
    var lessThan1 = lessThan(Ord0);
    var succ1 = succ(dictEnum);
    var lessThanOrEq1 = lessThanOrEq(Ord0);
    var pred1 = pred(dictEnum);
    var greaterThanOrEq1 = greaterThanOrEq(Ord0);
    return function(dictUnfoldable1) {
      var singleton11 = singleton(dictUnfoldable1);
      var unfoldr12 = unfoldr1(dictUnfoldable1);
      var go2 = function(step3) {
        return function(op) {
          return function(to2) {
            return function(a4) {
              return new Tuple(a4, bind5(step3(a4))(function(a$prime5) {
                return voidLeft2(guard3(op(a$prime5)(to2)))(a$prime5);
              }));
            };
          };
        };
      };
      return function(v2) {
        return function(v1) {
          if (eq111(v2)(v1)) {
            return singleton11(v2);
          }
          ;
          if (lessThan1(v2)(v1)) {
            return unfoldr12(go2(succ1)(lessThanOrEq1)(v1))(v2);
          }
          ;
          if (otherwise) {
            return unfoldr12(go2(pred1)(greaterThanOrEq1)(v1))(v2);
          }
          ;
          throw new Error("Failed pattern match at Data.Enum (line 186, column 14 - line 190, column 51): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    };
  };
  var defaultSucc = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a4) {
        return toEnum$prime(fromEnum$prime(a4) + 1 | 0);
      };
    };
  };
  var defaultPred = function(toEnum$prime) {
    return function(fromEnum$prime) {
      return function(a4) {
        return toEnum$prime(fromEnum$prime(a4) - 1 | 0);
      };
    };
  };
  var charToEnum = function(v2) {
    if (v2 >= bottom3 && v2 <= top3) {
      return new Just(fromCharCode(v2));
    }
    ;
    return Nothing.value;
  };
  var enumChar = {
    succ: /* @__PURE__ */ defaultSucc(charToEnum)(toCharCode),
    pred: /* @__PURE__ */ defaultPred(charToEnum)(toCharCode),
    Ord0: function() {
      return ordChar;
    }
  };
  var boundedEnumChar = /* @__PURE__ */ function() {
    return {
      cardinality: toCharCode(top(boundedChar)) - toCharCode(bottom(boundedChar)) | 0,
      toEnum: charToEnum,
      fromEnum: toCharCode,
      Bounded0: function() {
        return boundedChar;
      },
      Enum1: function() {
        return enumChar;
      }
    };
  }();

  // output/Data.Variant.Internal/index.js
  var variantTagsNil = {
    variantTags: function(v2) {
      return Nil.value;
    }
  };
  var variantTags = function(dict) {
    return dict.variantTags;
  };
  var variantTagsCons = function(dictVariantTags) {
    var variantTags1 = variantTags(dictVariantTags);
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return {
        variantTags: function(v2) {
          return new Cons(reflectSymbol2($$Proxy.value), variantTags1($$Proxy.value));
        }
      };
    };
  };
  var impossible = function(str2) {
    return unsafeCrashWith("Data.Variant: impossible `" + (str2 + "`"));
  };
  var lookup2 = function(name15) {
    return function(tag2) {
      var go2 = function($copy_v) {
        return function($copy_v1) {
          var $tco_var_v = $copy_v;
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v2, v1) {
            if (v2 instanceof Cons && v1 instanceof Cons) {
              if (v2.value0 === tag2) {
                $tco_done = true;
                return v1.value0;
              }
              ;
              if (otherwise) {
                $tco_var_v = v2.value1;
                $copy_v1 = v1.value1;
                return;
              }
              ;
            }
            ;
            $tco_done = true;
            return impossible(name15);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($tco_var_v, $copy_v1);
          }
          ;
          return $tco_result;
        };
      };
      return go2;
    };
  };
  var lookupEq = function(tags) {
    return function(eqs) {
      return function(v2) {
        return function(v1) {
          if (v2.type === v1.type) {
            return lookup2("eq")(v2.type)(tags)(eqs)(v2.value)(v1.value);
          }
          ;
          if (otherwise) {
            return false;
          }
          ;
          throw new Error("Failed pattern match at Data.Variant.Internal (line 160, column 1 - line 165, column 12): " + [tags.constructor.name, eqs.constructor.name, v2.constructor.name, v1.constructor.name]);
        };
      };
    };
  };

  // output/Data.Variant/index.js
  var variantEqs = function(dict) {
    return dict.variantEqs;
  };
  var onMatch = function() {
    return function() {
      return function() {
        return function(r2) {
          return function(k2) {
            return function(v2) {
              if (unsafeHas(v2.type)(r2)) {
                return unsafeGet(v2.type)(r2)(v2.value);
              }
              ;
              return k2(v2);
            };
          };
        };
      };
    };
  };
  var onMatch1 = /* @__PURE__ */ onMatch()()();
  var on2 = function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(p3) {
        return function(f2) {
          return function(g3) {
            return function(r2) {
              if (r2.type === reflectSymbol2(p3)) {
                return f2(r2.value);
              }
              ;
              return g3(r2);
            };
          };
        };
      };
    };
  };
  var inj = function() {
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return function(p3) {
        return function(value12) {
          return {
            type: reflectSymbol2(p3),
            value: value12
          };
        };
      };
    };
  };
  var eqVariantNil = {
    variantEqs: function(v2) {
      return Nil.value;
    }
  };
  var eqVariantCons = function(dictVariantEqs) {
    var variantEqs1 = variantEqs(dictVariantEqs);
    return function(dictEq) {
      var eq111 = eq(dictEq);
      return {
        variantEqs: function(v2) {
          return new Cons(eq111, variantEqs1($$Proxy.value));
        }
      };
    };
  };
  var eqVariant = function() {
    return function(dictVariantTags) {
      var variantTags2 = variantTags(dictVariantTags);
      return function(dictVariantEqs) {
        var variantEqs1 = variantEqs(dictVariantEqs);
        return {
          eq: function(v1) {
            return function(v2) {
              var tags = variantTags2($$Proxy.value);
              var eqs = variantEqs1($$Proxy.value);
              return lookupEq(tags)(eqs)(v1)(v2);
            };
          }
        };
      };
    };
  };
  var case_ = function(r2) {
    return unsafeCrashWith("Data.Variant: pattern match failure [" + (r2.type + "]"));
  };
  var match = function() {
    return function() {
      return function() {
        return function(r2) {
          return onMatch1(r2)(case_);
        };
      };
    };
  };

  // output/Effect.Unsafe/foreign.js
  var unsafePerformEffect = function(f2) {
    return f2();
  };

  // output/Foreign/foreign.js
  function typeOf(value12) {
    return typeof value12;
  }
  function tagOf(value12) {
    return Object.prototype.toString.call(value12).slice(8, -1);
  }
  function isNull(value12) {
    return value12 === null;
  }
  function isUndefined(value12) {
    return value12 === void 0;
  }
  var isArray = Array.isArray || function(value12) {
    return Object.prototype.toString.call(value12) === "[object Array]";
  };

  // output/Data.String.CodeUnits/foreign.js
  var singleton7 = function(c3) {
    return c3;
  };
  var length4 = function(s3) {
    return s3.length;
  };
  var _indexOf = function(just) {
    return function(nothing) {
      return function(x3) {
        return function(s3) {
          var i7 = s3.indexOf(x3);
          return i7 === -1 ? nothing : just(i7);
        };
      };
    };
  };
  var take3 = function(n2) {
    return function(s3) {
      return s3.substr(0, n2);
    };
  };
  var drop3 = function(n2) {
    return function(s3) {
      return s3.substring(n2);
    };
  };
  var splitAt2 = function(i7) {
    return function(s3) {
      return { before: s3.substring(0, i7), after: s3.substring(i7) };
    };
  };

  // output/Data.String.Unsafe/foreign.js
  var charAt = function(i7) {
    return function(s3) {
      if (i7 >= 0 && i7 < s3.length)
        return s3.charAt(i7);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };

  // output/Data.String.CodeUnits/index.js
  var stripSuffix = function(v2) {
    return function(str2) {
      var v1 = splitAt2(length4(str2) - length4(v2) | 0)(str2);
      var $14 = v1.after === v2;
      if ($14) {
        return new Just(v1.before);
      }
      ;
      return Nothing.value;
    };
  };
  var stripPrefix = function(v2) {
    return function(str2) {
      var v1 = splitAt2(length4(v2))(str2);
      var $20 = v1.before === v2;
      if ($20) {
        return new Just(v1.after);
      }
      ;
      return Nothing.value;
    };
  };
  var indexOf = /* @__PURE__ */ function() {
    return _indexOf(Just.create)(Nothing.value);
  }();
  var contains = function(pat) {
    var $23 = indexOf(pat);
    return function($24) {
      return isJust($23($24));
    };
  };

  // output/Foreign/index.js
  var show2 = /* @__PURE__ */ show(showString);
  var show1 = /* @__PURE__ */ show(showInt);
  var ForeignError = /* @__PURE__ */ function() {
    function ForeignError2(value0) {
      this.value0 = value0;
    }
    ;
    ForeignError2.create = function(value0) {
      return new ForeignError2(value0);
    };
    return ForeignError2;
  }();
  var TypeMismatch = /* @__PURE__ */ function() {
    function TypeMismatch2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    TypeMismatch2.create = function(value0) {
      return function(value1) {
        return new TypeMismatch2(value0, value1);
      };
    };
    return TypeMismatch2;
  }();
  var ErrorAtIndex = /* @__PURE__ */ function() {
    function ErrorAtIndex2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ErrorAtIndex2.create = function(value0) {
      return function(value1) {
        return new ErrorAtIndex2(value0, value1);
      };
    };
    return ErrorAtIndex2;
  }();
  var ErrorAtProperty = /* @__PURE__ */ function() {
    function ErrorAtProperty2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ErrorAtProperty2.create = function(value0) {
      return function(value1) {
        return new ErrorAtProperty2(value0, value1);
      };
    };
    return ErrorAtProperty2;
  }();
  var unsafeToForeign = unsafeCoerce2;
  var unsafeFromForeign = unsafeCoerce2;
  var showForeignError = {
    show: function(v2) {
      if (v2 instanceof ForeignError) {
        return "(ForeignError " + (show2(v2.value0) + ")");
      }
      ;
      if (v2 instanceof ErrorAtIndex) {
        return "(ErrorAtIndex " + (show1(v2.value0) + (" " + (show(showForeignError)(v2.value1) + ")")));
      }
      ;
      if (v2 instanceof ErrorAtProperty) {
        return "(ErrorAtProperty " + (show2(v2.value0) + (" " + (show(showForeignError)(v2.value1) + ")")));
      }
      ;
      if (v2 instanceof TypeMismatch) {
        return "(TypeMismatch " + (show2(v2.value0) + (" " + (show2(v2.value1) + ")")));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 69, column 1 - line 73, column 89): " + [v2.constructor.name]);
    }
  };
  var fail = function(dictMonad) {
    var $153 = throwError(monadThrowExceptT(dictMonad));
    return function($154) {
      return $153(singleton5($154));
    };
  };
  var readArray = function(dictMonad) {
    var pure122 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(value12) {
      if (isArray(value12)) {
        return pure122(unsafeFromForeign(value12));
      }
      ;
      if (otherwise) {
        return fail1(new TypeMismatch("array", tagOf(value12)));
      }
      ;
      throw new Error("Failed pattern match at Foreign (line 164, column 1 - line 164, column 99): " + [value12.constructor.name]);
    };
  };
  var unsafeReadTagged = function(dictMonad) {
    var pure122 = pure(applicativeExceptT(dictMonad));
    var fail1 = fail(dictMonad);
    return function(tag2) {
      return function(value12) {
        if (tagOf(value12) === tag2) {
          return pure122(unsafeFromForeign(value12));
        }
        ;
        if (otherwise) {
          return fail1(new TypeMismatch(tag2, tagOf(value12)));
        }
        ;
        throw new Error("Failed pattern match at Foreign (line 123, column 1 - line 123, column 104): " + [tag2.constructor.name, value12.constructor.name]);
      };
    };
  };
  var readBoolean = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("Boolean");
  };
  var readNumber = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("Number");
  };
  var readString = function(dictMonad) {
    return unsafeReadTagged(dictMonad)("String");
  };
  var eqForeignError = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof ForeignError && y2 instanceof ForeignError) {
          return x3.value0 === y2.value0;
        }
        ;
        if (x3 instanceof TypeMismatch && y2 instanceof TypeMismatch) {
          return x3.value0 === y2.value0 && x3.value1 === y2.value1;
        }
        ;
        if (x3 instanceof ErrorAtIndex && y2 instanceof ErrorAtIndex) {
          return x3.value0 === y2.value0 && eq(eqForeignError)(x3.value1)(y2.value1);
        }
        ;
        if (x3 instanceof ErrorAtProperty && y2 instanceof ErrorAtProperty) {
          return x3.value0 === y2.value0 && eq(eqForeignError)(x3.value1)(y2.value1);
        }
        ;
        return false;
      };
    }
  };

  // output/Foreign.Index/foreign.js
  function unsafeReadPropImpl(f2, s3, key, value12) {
    return value12 == null ? f2 : s3(value12[key]);
  }

  // output/Foreign.Index/index.js
  var unsafeReadProp = function(dictMonad) {
    var fail5 = fail(dictMonad);
    var pure64 = pure(applicativeExceptT(dictMonad));
    return function(k2) {
      return function(value12) {
        return unsafeReadPropImpl(fail5(new TypeMismatch("object", typeOf(value12))), pure64, k2, value12);
      };
    };
  };
  var readProp = function(dictMonad) {
    return unsafeReadProp(dictMonad);
  };

  // output/Foreign.Object/foreign.js
  function _copyST(m2) {
    return function() {
      var r2 = {};
      for (var k2 in m2) {
        if (hasOwnProperty.call(m2, k2)) {
          r2[k2] = m2[k2];
        }
      }
      return r2;
    };
  }
  var empty4 = {};
  function runST(f2) {
    return f2();
  }
  function _fmapObject(m0, f2) {
    var m2 = {};
    for (var k2 in m0) {
      if (hasOwnProperty.call(m0, k2)) {
        m2[k2] = f2(m0[k2]);
      }
    }
    return m2;
  }
  function _mapWithKey(m0, f2) {
    var m2 = {};
    for (var k2 in m0) {
      if (hasOwnProperty.call(m0, k2)) {
        m2[k2] = f2(k2)(m0[k2]);
      }
    }
    return m2;
  }
  function _foldM(bind61) {
    return function(f2) {
      return function(mz) {
        return function(m2) {
          var acc = mz;
          function g3(k3) {
            return function(z2) {
              return f2(z2)(k3)(m2[k3]);
            };
          }
          for (var k2 in m2) {
            if (hasOwnProperty.call(m2, k2)) {
              acc = bind61(acc)(g3(k2));
            }
          }
          return acc;
        };
      };
    };
  }
  function all4(f2) {
    return function(m2) {
      for (var k2 in m2) {
        if (hasOwnProperty.call(m2, k2) && !f2(k2)(m2[k2]))
          return false;
      }
      return true;
    };
  }
  function _lookup(no, yes, k2, m2) {
    return k2 in m2 ? yes(m2[k2]) : no;
  }
  function toArrayWithKey(f2) {
    return function(m2) {
      var r2 = [];
      for (var k2 in m2) {
        if (hasOwnProperty.call(m2, k2)) {
          r2.push(f2(k2)(m2[k2]));
        }
      }
      return r2;
    };
  }
  var keys = Object.keys || toArrayWithKey(function(k2) {
    return function() {
      return k2;
    };
  });

  // output/Foreign.Object.ST/foreign.js
  var newImpl = function() {
    return {};
  };
  function poke2(k2) {
    return function(v2) {
      return function(m2) {
        return function() {
          m2[k2] = v2;
          return m2;
        };
      };
    };
  }

  // output/Foreign.Object/index.js
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindST);
  var $$void4 = /* @__PURE__ */ $$void(functorST);
  var foldr3 = /* @__PURE__ */ foldr(foldableArray);
  var identity8 = /* @__PURE__ */ identity(categoryFn);
  var values2 = /* @__PURE__ */ toArrayWithKey(function(v2) {
    return function(v1) {
      return v1;
    };
  });
  var thawST = _copyST;
  var singleton8 = function(k2) {
    return function(v2) {
      return runST(bindFlipped3(poke2(k2)(v2))(newImpl));
    };
  };
  var mutate = function(f2) {
    return function(m2) {
      return runST(function __do10() {
        var s3 = thawST(m2)();
        f2(s3)();
        return s3;
      });
    };
  };
  var mapWithKey = function(f2) {
    return function(m2) {
      return _mapWithKey(m2, f2);
    };
  };
  var lookup3 = /* @__PURE__ */ function() {
    return runFn4(_lookup)(Nothing.value)(Just.create);
  }();
  var isSubmap = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(m1) {
      return function(m2) {
        var f2 = function(k2) {
          return function(v2) {
            return _lookup(false, eq21(v2), k2, m2);
          };
        };
        return all4(f2)(m1);
      };
    };
  };
  var insert3 = function(k2) {
    return function(v2) {
      return mutate(poke2(k2)(v2));
    };
  };
  var functorObject = {
    map: function(f2) {
      return function(m2) {
        return _fmapObject(m2, f2);
      };
    }
  };
  var functorWithIndexObject = {
    mapWithIndex: mapWithKey,
    Functor0: function() {
      return functorObject;
    }
  };
  var fromHomogeneous = function() {
    return unsafeCoerce2;
  };
  var fromFoldable4 = function(dictFoldable) {
    var fromFoldable12 = fromFoldable(dictFoldable);
    return function(l2) {
      return runST(function __do10() {
        var s3 = newImpl();
        foreach(fromFoldable12(l2))(function(v2) {
          return $$void4(poke2(v2.value0)(v2.value1)(s3));
        })();
        return s3;
      });
    };
  };
  var foldM3 = function(dictMonad) {
    var bind124 = bind(dictMonad.Bind1());
    var pure122 = pure(dictMonad.Applicative0());
    return function(f2) {
      return function(z2) {
        return _foldM(bind124)(f2)(pure122(z2));
      };
    };
  };
  var foldM1 = /* @__PURE__ */ foldM3(monadST);
  var unionWith2 = function(f2) {
    return function(m1) {
      return function(m2) {
        return mutate(function(s1) {
          return foldM1(function(s22) {
            return function(k2) {
              return function(v1) {
                return poke2(k2)(_lookup(v1, function(v2) {
                  return f2(v1)(v2);
                }, k2, m2))(s22);
              };
            };
          })(s1)(m1);
        })(m2);
      };
    };
  };
  var semigroupObject = function(dictSemigroup) {
    return {
      append: unionWith2(append(dictSemigroup))
    };
  };
  var monoidObject = function(dictSemigroup) {
    var semigroupObject1 = semigroupObject(dictSemigroup);
    return {
      mempty: empty4,
      Semigroup0: function() {
        return semigroupObject1;
      }
    };
  };
  var fold2 = /* @__PURE__ */ _foldM(applyFlipped);
  var foldMap2 = function(dictMonoid) {
    var append113 = append(dictMonoid.Semigroup0());
    var mempty33 = mempty(dictMonoid);
    return function(f2) {
      return fold2(function(acc) {
        return function(k2) {
          return function(v2) {
            return append113(acc)(f2(k2)(v2));
          };
        };
      })(mempty33);
    };
  };
  var foldableObject = {
    foldl: function(f2) {
      return fold2(function(z2) {
        return function(v2) {
          return f2(z2);
        };
      });
    },
    foldr: function(f2) {
      return function(z2) {
        return function(m2) {
          return foldr3(f2)(z2)(values2(m2));
        };
      };
    },
    foldMap: function(dictMonoid) {
      var foldMap111 = foldMap2(dictMonoid);
      return function(f2) {
        return foldMap111($$const(f2));
      };
    }
  };
  var foldableWithIndexObject = {
    foldlWithIndex: function(f2) {
      return fold2(flip(f2));
    },
    foldrWithIndex: function(f2) {
      return function(z2) {
        return function(m2) {
          return foldr3(uncurry(f2))(z2)(toArrayWithKey(Tuple.create)(m2));
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      return foldMap2(dictMonoid);
    },
    Foldable0: function() {
      return foldableObject;
    }
  };
  var traversableWithIndexObject = {
    traverseWithIndex: function(dictApplicative) {
      var Apply0 = dictApplicative.Apply0();
      var apply11 = apply(Apply0);
      var map43 = map(Apply0.Functor0());
      var pure122 = pure(dictApplicative);
      return function(f2) {
        return function(ms) {
          return fold2(function(acc) {
            return function(k2) {
              return function(v2) {
                return apply11(map43(flip(insert3(k2)))(acc))(f2(k2)(v2));
              };
            };
          })(pure122(empty4))(ms);
        };
      };
    },
    FunctorWithIndex0: function() {
      return functorWithIndexObject;
    },
    FoldableWithIndex1: function() {
      return foldableWithIndexObject;
    },
    Traversable2: function() {
      return traversableObject;
    }
  };
  var traversableObject = {
    traverse: function(dictApplicative) {
      var $93 = traverseWithIndex(traversableWithIndexObject)(dictApplicative);
      return function($94) {
        return $93($$const($94));
      };
    },
    sequence: function(dictApplicative) {
      return traverse(traversableObject)(dictApplicative)(identity8);
    },
    Functor0: function() {
      return functorObject;
    },
    Foldable1: function() {
      return foldableObject;
    }
  };
  var eqObject = function(dictEq) {
    var isSubmap1 = isSubmap(dictEq);
    return {
      eq: function(m1) {
        return function(m2) {
          return isSubmap1(m1)(m2) && isSubmap1(m2)(m1);
        };
      }
    };
  };

  // output/Record.Unsafe.Union/foreign.js
  function unsafeUnionFn(r1, r2) {
    var copy2 = {};
    for (var k1 in r2) {
      if ({}.hasOwnProperty.call(r2, k1)) {
        copy2[k1] = r2[k1];
      }
    }
    for (var k2 in r1) {
      if ({}.hasOwnProperty.call(r1, k2)) {
        copy2[k2] = r1[k2];
      }
    }
    return copy2;
  }

  // output/Record.Unsafe.Union/index.js
  var unsafeUnion = /* @__PURE__ */ runFn2(unsafeUnionFn);

  // output/Record/index.js
  var insert4 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l2) {
          return function(a4) {
            return function(r2) {
              return unsafeSet(reflectSymbol2(l2))(a4)(r2);
            };
          };
        };
      };
    };
  };
  var get = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function(l2) {
        return function(r2) {
          return unsafeGet(reflectSymbol2(l2))(r2);
        };
      };
    };
  };
  var disjointUnion = function() {
    return function() {
      return function(l2) {
        return function(r2) {
          return unsafeUnionFn(l2, r2);
        };
      };
    };
  };
  var $$delete3 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l2) {
          return function(r2) {
            return unsafeDelete(reflectSymbol2(l2))(r2);
          };
        };
      };
    };
  };

  // output/Record.Builder/foreign.js
  function copyRecord(rec) {
    var copy2 = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy2[key] = rec[key];
      }
    }
    return copy2;
  }
  function unsafeInsert(l2) {
    return function(a4) {
      return function(rec) {
        rec[l2] = a4;
        return rec;
      };
    };
  }
  function unsafeModify(l2) {
    return function(f2) {
      return function(rec) {
        rec[l2] = f2(rec[l2]);
        return rec;
      };
    };
  }
  function unsafeDelete2(l2) {
    return function(rec) {
      delete rec[l2];
      return rec;
    };
  }

  // output/Record.Builder/index.js
  var semigroupoidBuilder = semigroupoidFn;
  var modify4 = function() {
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(l2) {
          return function(f2) {
            return function(r1) {
              return unsafeModify(reflectSymbol2(l2))(f2)(r1);
            };
          };
        };
      };
    };
  };
  var insert5 = function() {
    return function() {
      return function(dictIsSymbol) {
        var reflectSymbol2 = reflectSymbol(dictIsSymbol);
        return function(l2) {
          return function(a4) {
            return function(r1) {
              return unsafeInsert(reflectSymbol2(l2))(a4)(r1);
            };
          };
        };
      };
    };
  };
  var $$delete4 = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function() {
      return function() {
        return function(l2) {
          return function(r2) {
            return unsafeDelete2(reflectSymbol2(l2))(r2);
          };
        };
      };
    };
  };
  var categoryBuilder = categoryFn;
  var build = function(v2) {
    return function(r1) {
      return v2(copyRecord(r1));
    };
  };

  // output/Yoga.JSON/index.js
  var identity9 = /* @__PURE__ */ identity(categoryBuilder);
  var fail2 = /* @__PURE__ */ fail(monadIdentity);
  var applicativeExceptT2 = /* @__PURE__ */ applicativeExceptT(monadIdentity);
  var pure4 = /* @__PURE__ */ pure(applicativeExceptT2);
  var map11 = /* @__PURE__ */ map(functorArray);
  var compose1 = /* @__PURE__ */ compose(semigroupoidBuilder);
  var insert6 = /* @__PURE__ */ insert5()();
  var show3 = /* @__PURE__ */ show(showInt);
  var on3 = /* @__PURE__ */ on2();
  var map1 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var map22 = /* @__PURE__ */ map(functorNonEmptyList);
  var bindExceptT2 = /* @__PURE__ */ bindExceptT(monadIdentity);
  var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindExceptT2);
  var composeKleisliFlipped2 = /* @__PURE__ */ composeKleisliFlipped(bindExceptT2);
  var sequence2 = /* @__PURE__ */ sequence(traversableObject)(applicativeExceptT2);
  var foldrWithIndex1 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexObject);
  var insert22 = /* @__PURE__ */ insert2(ordString);
  var alt2 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var inj2 = /* @__PURE__ */ inj();
  var bind6 = /* @__PURE__ */ bind(bindExceptT2);
  var readProp2 = /* @__PURE__ */ readProp(monadIdentity);
  var traverseWithIndex2 = /* @__PURE__ */ traverseWithIndex(traversableWithIndexArray)(applicativeExceptT2);
  var readArray2 = /* @__PURE__ */ readArray(monadIdentity);
  var composeKleisli2 = /* @__PURE__ */ composeKleisli(bindExceptT2);
  var applyExceptT2 = /* @__PURE__ */ applyExceptT(monadIdentity);
  var lift23 = /* @__PURE__ */ lift2(applyExceptT2);
  var throwError2 = /* @__PURE__ */ throwError(/* @__PURE__ */ monadThrowExceptT(monadIdentity));
  var pure1 = /* @__PURE__ */ pure(applicativeNonEmptyList);
  var apply4 = /* @__PURE__ */ apply(applyExceptT2);
  var writeForeignVariantNilRow = {
    writeVariantImpl: function(v2) {
      return function(v1) {
        return unsafeCrashWith("Attempted to write empty variant.");
      };
    }
  };
  var writeForeignString = {
    writeImpl: unsafeToForeign
  };
  var writeForeignNumber = {
    writeImpl: unsafeToForeign
  };
  var writeForeignForeign = {
    writeImpl: /* @__PURE__ */ identity(categoryFn)
  };
  var writeForeignFieldsNilRowR = {
    writeImplFields: function(v2) {
      return function(v1) {
        return identity9;
      };
    }
  };
  var writeForeignBoolean = {
    writeImpl: unsafeToForeign
  };
  var readForeignVariantNil = {
    readVariantImpl: function(v2) {
      return function(v1) {
        return fail2(new ForeignError("Unable to match any variant member."));
      };
    }
  };
  var readForeignString = {
    readImpl: /* @__PURE__ */ readString(monadIdentity)
  };
  var readForeignNumber = {
    readImpl: /* @__PURE__ */ readNumber(monadIdentity)
  };
  var readForeignForeign = {
    readImpl: pure4
  };
  var readForeignFieldsNilRowRo = {
    getFields: function(v2) {
      return function(v1) {
        return pure4(identity9);
      };
    }
  };
  var readForeignBoolean = {
    readImpl: /* @__PURE__ */ readBoolean(monadIdentity)
  };
  var writeVariantImpl = function(dict) {
    return dict.writeVariantImpl;
  };
  var writeForeignVariant = function() {
    return function(dictWriteForeignVariant) {
      var writeVariantImpl1 = writeVariantImpl(dictWriteForeignVariant);
      return {
        writeImpl: function(variant) {
          return writeVariantImpl1($$Proxy.value)(variant);
        }
      };
    };
  };
  var writeImplFields = function(dict) {
    return dict.writeImplFields;
  };
  var writeForeignRecord = function() {
    return function(dictWriteForeignFields) {
      var writeImplFields1 = writeImplFields(dictWriteForeignFields);
      return {
        writeImpl: function(rec) {
          var steps2 = writeImplFields1($$Proxy.value)(rec);
          return unsafeToForeign(build(steps2)({}));
        }
      };
    };
  };
  var writeImpl = function(dict) {
    return dict.writeImpl;
  };
  var writeJSON = function(dictWriteForeign) {
    var $271 = writeImpl(dictWriteForeign);
    return function($272) {
      return _unsafeStringify($271($272));
    };
  };
  var writeForeignArray = function(dictWriteForeign) {
    var writeImpl32 = writeImpl(dictWriteForeign);
    return {
      writeImpl: function(xs) {
        return unsafeToForeign(map11(writeImpl32)(xs));
      }
    };
  };
  var writeImpl1 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignArray(writeForeignForeign));
  var writeForeignFieldsCons = function(dictIsSymbol) {
    var get4 = get(dictIsSymbol)();
    var insert32 = insert6(dictIsSymbol);
    return function(dictWriteForeign) {
      var writeImpl32 = writeImpl(dictWriteForeign);
      return function(dictWriteForeignFields) {
        var writeImplFields1 = writeImplFields(dictWriteForeignFields);
        return function() {
          return function() {
            return function() {
              return {
                writeImplFields: function(v2) {
                  return function(rec) {
                    var rest2 = writeImplFields1($$Proxy.value)(rec);
                    var value12 = writeImpl32(get4($$Proxy.value)(rec));
                    var result = compose1(insert32($$Proxy.value)(value12))(rest2);
                    return result;
                  };
                }
              };
            };
          };
        };
      };
    };
  };
  var writeForeignObject = function(dictWriteForeign) {
    return {
      writeImpl: function() {
        var $277 = mapWithKey($$const(writeImpl(dictWriteForeign)));
        return function($278) {
          return unsafeToForeign($277($278));
        };
      }()
    };
  };
  var writeImpl2 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignObject(writeForeignForeign));
  var writeForeignTuple = function(dictWriteForeign) {
    var writeImpl32 = writeImpl(dictWriteForeign);
    return function(dictWriteForeign1) {
      var writeImpl42 = writeImpl(dictWriteForeign1);
      return {
        writeImpl: function(v2) {
          return writeImpl1([writeImpl32(v2.value0), writeImpl42(v2.value1)]);
        }
      };
    };
  };
  var writeForeignVariantCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var on1 = on3(dictIsSymbol);
    return function(dictWriteForeign) {
      var writeImpl32 = writeImpl(dictWriteForeign);
      return function() {
        return function(dictWriteForeignVariant) {
          var writeVariantImpl1 = writeVariantImpl(dictWriteForeignVariant);
          return {
            writeVariantImpl: function(v2) {
              return function(variant) {
                var name15 = reflectSymbol2($$Proxy.value);
                var writeVariant = function(value12) {
                  return writeImpl2(singleton8(name15)(writeImpl32(value12)));
                };
                return on1($$Proxy.value)(writeVariant)(writeVariantImpl1($$Proxy.value))(variant);
              };
            }
          };
        };
      };
    };
  };
  var write3 = function(dictWriteForeign) {
    return writeImpl(dictWriteForeign);
  };
  var $$undefined = _undefined;
  var writeForeignMaybe = function(dictWriteForeign) {
    return {
      writeImpl: maybe($$undefined)(writeImpl(dictWriteForeign))
    };
  };
  var readVariantImpl = function(dict) {
    return dict.readVariantImpl;
  };
  var readForeignVariant = function() {
    return function(dictReadForeignVariant) {
      var readVariantImpl1 = readVariantImpl(dictReadForeignVariant);
      return {
        readImpl: function(o2) {
          return readVariantImpl1($$Proxy.value)(o2);
        }
      };
    };
  };
  var readTupleImpl = function(dict) {
    return dict.readTupleImpl;
  };
  var readForeignTuple = function(dictReadTuple) {
    return {
      readImpl: readTupleImpl(dictReadTuple)(0)
    };
  };
  var readImpl = function(dict) {
    return dict.readImpl;
  };
  var readForeignMap = function() {
    return function(dictReadForeign) {
      return {
        readImpl: function() {
          var $288 = map1(unsafeCoerce2);
          var $289 = readImpl(dictReadForeign);
          return function($290) {
            return $288($289($290));
          };
        }()
      };
    };
  };
  var readForeignMaybe = function(dictReadForeign) {
    return {
      readImpl: function() {
        var readNullOrUndefined = function(v2) {
          return function(value12) {
            if (isNull(value12) || isUndefined(value12)) {
              return pure4(Nothing.value);
            }
            ;
            return map1(Just.create)(v2(value12));
          };
        };
        return readNullOrUndefined(readImpl(dictReadForeign));
      }()
    };
  };
  var readForeignObject = function(dictReadForeign) {
    return {
      readImpl: function() {
        var readObject$prime = function(value12) {
          if (tagOf(value12) === "Object") {
            return pure4(unsafeFromForeign(value12));
          }
          ;
          if (otherwise) {
            return fail2(new TypeMismatch("Object", tagOf(value12)));
          }
          ;
          throw new Error("Failed pattern match at Yoga.JSON (line 207, column 5 - line 207, column 47): " + [value12.constructor.name]);
        };
        return composeKleisliFlipped2(function() {
          var $291 = mapWithKey($$const(readImpl(dictReadForeign)));
          return function($292) {
            return sequence2($291($292));
          };
        }())(readObject$prime);
      }()
    };
  };
  var readForeignMapString = function(dictReadForeign) {
    return {
      readImpl: function() {
        var $297 = map1(foldrWithIndex1(insert22)(empty3));
        var $298 = readImpl(readForeignObject(dictReadForeign));
        return function($299) {
          return $297($298($299));
        };
      }()
    };
  };
  var readForeignVariantCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var inj1 = inj2(dictIsSymbol);
    return function(dictReadForeign) {
      var readImpl22 = readImpl(dictReadForeign);
      return function() {
        return function(dictReadForeignVariant) {
          var readVariantImpl1 = readVariantImpl(dictReadForeignVariant);
          return {
            readVariantImpl: function(v2) {
              return function(o2) {
                var name15 = reflectSymbol2($$Proxy.value);
                return alt2(readVariantImpl1($$Proxy.value)(o2))(map1(function(v1) {
                  return inj1($$Proxy.value)(v1);
                })(bind6(readProp2(name15)(o2))(readImpl22)));
              };
            }
          };
        };
      };
    };
  };
  var readAtIdx = function(dictReadForeign) {
    var readImpl22 = readImpl(dictReadForeign);
    return function(i7) {
      return function(f2) {
        return withExcept(map22(ErrorAtIndex.create(i7)))(readImpl22(f2));
      };
    };
  };
  var readForeignArray = function(dictReadForeign) {
    return {
      readImpl: composeKleisliFlipped2(traverseWithIndex2(readAtIdx(dictReadForeign)))(readArray2)
    };
  };
  var readForeignArray1 = /* @__PURE__ */ readForeignArray(readForeignForeign);
  var readImpl1 = /* @__PURE__ */ readImpl(readForeignArray1);
  var readTupleHelper = function(dictReadForeign) {
    var readAtIdx1 = readAtIdx(dictReadForeign);
    return function(dictReadForeign1) {
      var readAtIdx2 = readAtIdx(dictReadForeign1);
      return {
        readTupleImpl: function(n2) {
          return composeKleisli2(readImpl1)(function(v2) {
            if (v2.length === 2) {
              return lift23(Tuple.create)(readAtIdx1(n2)(v2[0]))(readAtIdx2(n2 + 1 | 0)(v2[1]));
            }
            ;
            return throwError2(pure1(new TypeMismatch("array of length " + show3(n2 + 2 | 0), "array of length " + show3(n2 + length(v2) | 0))));
          });
        },
        tupleSize: $$const(2)
      };
    };
  };
  var read$prime = function(dictReadForeign) {
    return readImpl(dictReadForeign);
  };
  var read3 = function(dictReadForeign) {
    var $300 = readImpl(dictReadForeign);
    return function($301) {
      return runExcept($300($301));
    };
  };
  var parseJSON = /* @__PURE__ */ function() {
    var $304 = lmap(bifunctorEither)(function($307) {
      return pure1(ForeignError.create(message($307)));
    });
    var $305 = runEffectFn1(_parseJSON);
    return function($306) {
      return ExceptT(Identity($304(unsafePerformEffect($$try($305($306))))));
    };
  }();
  var readJSON = function(dictReadForeign) {
    var $308 = composeKleisliFlipped2(readImpl(dictReadForeign))(parseJSON);
    return function($309) {
      return runExcept($308($309));
    };
  };
  var getFields = function(dict) {
    return dict.getFields;
  };
  var readForeignFieldsCons = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    var insert32 = insert6(dictIsSymbol);
    return function(dictReadForeign) {
      var readImpl22 = readImpl(dictReadForeign);
      return function(dictReadForeignFields) {
        var getFields1 = getFields(dictReadForeignFields);
        return function() {
          return function() {
            return {
              getFields: function(v2) {
                return function(obj) {
                  var rest2 = getFields1($$Proxy.value)(obj);
                  var name15 = reflectSymbol2($$Proxy.value);
                  var withExcept$prime = withExcept(map22(ErrorAtProperty.create(name15)));
                  var value12 = withExcept$prime(bindFlipped4(readImpl22)(readProp2(name15)(obj)));
                  var first2 = map1(insert32($$Proxy.value))(value12);
                  return apply4(map1(compose1)(first2))(rest2);
                };
              }
            };
          };
        };
      };
    };
  };
  var readForeignRecord = function() {
    return function(dictReadForeignFields) {
      var getFields1 = getFields(dictReadForeignFields);
      return {
        readImpl: function(o2) {
          return map1(flip(build)({}))(getFields1($$Proxy.value)(o2));
        }
      };
    };
  };

  // output/Biz.GraphQL/index.js
  var writeForeignRecord2 = /* @__PURE__ */ writeForeignRecord();
  var queryIsSymbol = {
    reflectSymbol: function() {
      return "query";
    }
  };
  var writeForeignFieldsCons2 = /* @__PURE__ */ writeForeignFieldsCons(queryIsSymbol)(writeForeignString);
  var variablesIsSymbol = {
    reflectSymbol: function() {
      return "variables";
    }
  };
  var writeForeignFieldsCons1 = /* @__PURE__ */ writeForeignFieldsCons(variablesIsSymbol);
  var un2 = /* @__PURE__ */ un();
  var GraphQL = function(x3) {
    return x3;
  };
  var writeForeignGraphQLQuery = function(dictWriteForeign) {
    return writeForeignRecord2(writeForeignFieldsCons2(writeForeignFieldsCons1(dictWriteForeign)(writeForeignFieldsNilRowR)()()())()()());
  };
  var graphQLQuery = function(query) {
    return function(variables3) {
      return {
        variables: variables3,
        query: replaceAll("\n")(" ")(replaceAll("\r\n")(" ")(un2(GraphQL)(query)))
      };
    };
  };

  // output/Backend.Github.API.Types/index.js
  var GithubGraphQLQuery = function(x3) {
    return x3;
  };
  var writeForeignGithubGraphQL = writeForeignString;
  var writeForeignGithubGraphQL1 = writeForeignString;
  var readForeignGithubGraphQLR = readForeignString;
  var eqGithubGraphQLResponse = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var githubGraphQLQuery = function(dictWriteForeign) {
    var $43 = writeJSON(writeForeignGraphQLQuery(dictWriteForeign));
    return function($44) {
      return GithubGraphQLQuery($43($44));
    };
  };

  // output/Backend.Tool.Spago.Types/index.js
  var writeForeignSpagoGlobalCa = writeForeignString;
  var readForeignSpagoGlobalCac = readForeignString;
  var eqSpagoGlobalCacheDir = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };

  // output/Biz.OAuth.Types/index.js
  var writeForeignTokenType = writeForeignString;
  var writeForeignScopeList = writeForeignString;
  var writeForeignClientID = writeForeignString;
  var writeForeignAccessToken = writeForeignString;
  var readForeignTokenType = readForeignString;
  var readForeignScopeList = readForeignString;
  var readForeignAccessToken = readForeignString;
  var eqTokenType = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqScopeList = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqAccessToken = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };

  // output/Data.Time.Duration/index.js
  var over2 = /* @__PURE__ */ over()();
  var negate2 = /* @__PURE__ */ negate(ringNumber);
  var identity10 = /* @__PURE__ */ identity(categoryFn);
  var Seconds = function(x3) {
    return x3;
  };
  var Milliseconds = function(x3) {
    return x3;
  };
  var Days = function(x3) {
    return x3;
  };
  var toDuration = function(dict) {
    return dict.toDuration;
  };
  var semigroupSeconds = {
    append: function(v2) {
      return function(v1) {
        return v2 + v1;
      };
    }
  };
  var semigroupMilliseconds = {
    append: function(v2) {
      return function(v1) {
        return v2 + v1;
      };
    }
  };
  var fromDuration = function(dict) {
    return dict.fromDuration;
  };
  var negateDuration = function(dictDuration) {
    var $57 = toDuration(dictDuration);
    var $58 = over2(Milliseconds)(negate2);
    var $59 = fromDuration(dictDuration);
    return function($60) {
      return $57($58($59($60)));
    };
  };
  var eqSeconds = eqNumber;
  var durationSeconds = {
    fromDuration: /* @__PURE__ */ over2(Seconds)(function(v2) {
      return v2 * 1e3;
    }),
    toDuration: /* @__PURE__ */ over2(Milliseconds)(function(v2) {
      return v2 / 1e3;
    })
  };
  var durationMilliseconds = {
    fromDuration: identity10,
    toDuration: identity10
  };
  var durationDays = {
    fromDuration: /* @__PURE__ */ over2(Days)(function(v2) {
      return v2 * 864e5;
    }),
    toDuration: /* @__PURE__ */ over2(Milliseconds)(function(v2) {
      return v2 / 864e5;
    })
  };

  // output/Biz.Github.Types/index.js
  var writeForeignRecord3 = /* @__PURE__ */ writeForeignRecord();
  var writeImpl3 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignRecord3(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "client_id";
    }
  })(writeForeignClientID)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "scope";
    }
  })(writeForeignString)(writeForeignFieldsNilRowR)()()())()()()));
  var intercalate6 = /* @__PURE__ */ intercalate3(monoidString);
  var device_codeIsSymbol = {
    reflectSymbol: function() {
      return "device_code";
    }
  };
  var expires_inIsSymbol = {
    reflectSymbol: function() {
      return "expires_in";
    }
  };
  var intervalIsSymbol = {
    reflectSymbol: function() {
      return "interval";
    }
  };
  var user_codeIsSymbol = {
    reflectSymbol: function() {
      return "user_code";
    }
  };
  var verification_uriIsSymbol = {
    reflectSymbol: function() {
      return "verification_uri";
    }
  };
  var un3 = /* @__PURE__ */ un();
  var map12 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var VerificationURI = function(x3) {
    return x3;
  };
  var UserCode = function(x3) {
    return x3;
  };
  var writeForeignVerificationU = writeForeignString;
  var writeForeignUserCode = writeForeignString;
  var writeForeignGrantType = writeForeignString;
  var writeForeignDeviceCodeReq = {
    writeImpl: function(v2) {
      return writeImpl3({
        scope: intercalate6(" ")(v2.scope),
        client_id: v2.client_id
      });
    }
  };
  var writeForeignDeviceCode = writeForeignString;
  var writeImpl12 = /* @__PURE__ */ writeImpl(/* @__PURE__ */ writeForeignRecord3(/* @__PURE__ */ writeForeignFieldsCons(device_codeIsSymbol)(writeForeignDeviceCode)(/* @__PURE__ */ writeForeignFieldsCons(expires_inIsSymbol)(writeForeignNumber)(/* @__PURE__ */ writeForeignFieldsCons(intervalIsSymbol)(writeForeignNumber)(/* @__PURE__ */ writeForeignFieldsCons(user_codeIsSymbol)(writeForeignUserCode)(/* @__PURE__ */ writeForeignFieldsCons(verification_uriIsSymbol)(writeForeignVerificationU)(writeForeignFieldsNilRowR)()()())()()())()()())()()())()()()));
  var writeForeignDeviceCodeRes = {
    writeImpl: function(v2) {
      return writeImpl12({
        expires_in: un3(Seconds)(v2.expires_in),
        interval: un3(Seconds)(v2.interval),
        device_code: v2.device_code,
        user_code: v2.user_code,
        verification_uri: v2.verification_uri
      });
    }
  };
  var readForeignVerificationUR = readForeignString;
  var readForeignUserCode = readForeignString;
  var readForeignDeviceCode = readForeignString;
  var readImpl2 = /* @__PURE__ */ readImpl(/* @__PURE__ */ readForeignRecord()(/* @__PURE__ */ readForeignFieldsCons(device_codeIsSymbol)(readForeignDeviceCode)(/* @__PURE__ */ readForeignFieldsCons(expires_inIsSymbol)(readForeignNumber)(/* @__PURE__ */ readForeignFieldsCons(intervalIsSymbol)(readForeignNumber)(/* @__PURE__ */ readForeignFieldsCons(user_codeIsSymbol)(readForeignUserCode)(/* @__PURE__ */ readForeignFieldsCons(verification_uriIsSymbol)(readForeignVerificationUR)(readForeignFieldsNilRowRo)()())()())()())()())()()));
  var readForeignDeviceCodeResp = {
    readImpl: function(fgn) {
      return map12(function(v2) {
        return {
          device_code: v2.device_code,
          expires_in: v2.expires_in,
          interval: v2.interval,
          user_code: v2.user_code,
          verification_uri: v2.verification_uri
        };
      })(readImpl2(fgn));
    }
  };
  var eqVerificationURI = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqUserCode = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqDeviceCode = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqDeviceCodeResponse = /* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()(verification_uriIsSymbol)(eqVerificationURI))()(user_codeIsSymbol)(eqUserCode))()(intervalIsSymbol)(eqSeconds))()(expires_inIsSymbol)(eqSeconds))()(device_codeIsSymbol)(eqDeviceCode));

  // output/Data.Bounded.Generic/index.js
  var genericTopNoArguments = /* @__PURE__ */ function() {
    return {
      "genericTop'": NoArguments.value
    };
  }();
  var genericTop$prime = function(dict) {
    return dict["genericTop'"];
  };
  var genericTopConstructor = function(dictGenericTop) {
    return {
      "genericTop'": genericTop$prime(dictGenericTop)
    };
  };
  var genericTopSum = function(dictGenericTop) {
    return {
      "genericTop'": new Inr(genericTop$prime(dictGenericTop))
    };
  };
  var genericTop = function(dictGeneric) {
    var to2 = to(dictGeneric);
    return function(dictGenericTop) {
      return to2(genericTop$prime(dictGenericTop));
    };
  };
  var genericBottomNoArguments = /* @__PURE__ */ function() {
    return {
      "genericBottom'": NoArguments.value
    };
  }();
  var genericBottom$prime = function(dict) {
    return dict["genericBottom'"];
  };
  var genericBottomConstructor = function(dictGenericBottom) {
    return {
      "genericBottom'": genericBottom$prime(dictGenericBottom)
    };
  };
  var genericBottomSum = function(dictGenericBottom) {
    return {
      "genericBottom'": new Inl(genericBottom$prime(dictGenericBottom))
    };
  };
  var genericBottom = function(dictGeneric) {
    var to2 = to(dictGeneric);
    return function(dictGenericBottom) {
      return to2(genericBottom$prime(dictGenericBottom));
    };
  };

  // output/Data.Enum.Generic/index.js
  var map13 = /* @__PURE__ */ map(functorMaybe);
  var genericSucc$prime = function(dict) {
    return dict["genericSucc'"];
  };
  var genericSucc = function(dictGeneric) {
    var to2 = to(dictGeneric);
    var from4 = from(dictGeneric);
    return function(dictGenericEnum) {
      var $156 = map13(to2);
      var $157 = genericSucc$prime(dictGenericEnum);
      return function($158) {
        return $156($157(from4($158)));
      };
    };
  };
  var genericPred$prime = function(dict) {
    return dict["genericPred'"];
  };
  var genericPred = function(dictGeneric) {
    var to2 = to(dictGeneric);
    var from4 = from(dictGeneric);
    return function(dictGenericEnum) {
      var $159 = map13(to2);
      var $160 = genericPred$prime(dictGenericEnum);
      return function($161) {
        return $159($160(from4($161)));
      };
    };
  };
  var genericEnumSum = function(dictGenericEnum) {
    var genericPred$prime1 = genericPred$prime(dictGenericEnum);
    var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
    return function(dictGenericTop) {
      var genericTop$prime2 = genericTop$prime(dictGenericTop);
      return function(dictGenericEnum1) {
        var genericPred$prime2 = genericPred$prime(dictGenericEnum1);
        var genericSucc$prime2 = genericSucc$prime(dictGenericEnum1);
        return function(dictGenericBottom) {
          var genericBottom$prime2 = genericBottom$prime(dictGenericBottom);
          return {
            "genericPred'": function(v2) {
              if (v2 instanceof Inl) {
                return map13(Inl.create)(genericPred$prime1(v2.value0));
              }
              ;
              if (v2 instanceof Inr) {
                var v1 = genericPred$prime2(v2.value0);
                if (v1 instanceof Nothing) {
                  return new Just(new Inl(genericTop$prime2));
                }
                ;
                if (v1 instanceof Just) {
                  return new Just(new Inr(v1.value0));
                }
                ;
                throw new Error("Failed pattern match at Data.Enum.Generic (line 30, column 14 - line 32, column 31): " + [v1.constructor.name]);
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 28, column 18 - line 32, column 31): " + [v2.constructor.name]);
            },
            "genericSucc'": function(v2) {
              if (v2 instanceof Inl) {
                var v1 = genericSucc$prime1(v2.value0);
                if (v1 instanceof Nothing) {
                  return new Just(new Inr(genericBottom$prime2));
                }
                ;
                if (v1 instanceof Just) {
                  return new Just(new Inl(v1.value0));
                }
                ;
                throw new Error("Failed pattern match at Data.Enum.Generic (line 34, column 14 - line 36, column 31): " + [v1.constructor.name]);
              }
              ;
              if (v2 instanceof Inr) {
                return map13(Inr.create)(genericSucc$prime2(v2.value0));
              }
              ;
              throw new Error("Failed pattern match at Data.Enum.Generic (line 33, column 18 - line 37, column 36): " + [v2.constructor.name]);
            }
          };
        };
      };
    };
  };
  var genericEnumNoArguments = {
    "genericPred'": function(v2) {
      return Nothing.value;
    },
    "genericSucc'": function(v2) {
      return Nothing.value;
    }
  };
  var genericEnumConstructor = function(dictGenericEnum) {
    var genericPred$prime1 = genericPred$prime(dictGenericEnum);
    var genericSucc$prime1 = genericSucc$prime(dictGenericEnum);
    return {
      "genericPred'": function(v2) {
        return map13(Constructor)(genericPred$prime1(v2));
      },
      "genericSucc'": function(v2) {
        return map13(Constructor)(genericSucc$prime1(v2));
      }
    };
  };

  // output/Yoga.JSON.Generics.EnumSumRep/index.js
  var bind7 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadIdentity));
  var readImpl3 = /* @__PURE__ */ readImpl(readForeignString);
  var pure5 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadIdentity));
  var fail3 = /* @__PURE__ */ fail(monadIdentity);
  var writeImpl4 = /* @__PURE__ */ writeImpl(writeForeignString);
  var map14 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var alt3 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var genericEnumSumRepConstruc = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      genericEnumReadForeign: function(f2) {
        var name15 = reflectSymbol2($$Proxy.value);
        return bind7(readImpl3(f2))(function(s3) {
          var $35 = s3 === name15;
          if ($35) {
            return pure5(NoArguments.value);
          }
          ;
          return fail3(ForeignError.create("Enum string " + (s3 + (" did not match expected string " + name15))));
        });
      },
      genericEnumWriteForeign: function(v2) {
        return writeImpl4(reflectSymbol2($$Proxy.value));
      }
    };
  };
  var genericEnumWriteForeign = function(dict) {
    return dict.genericEnumWriteForeign;
  };
  var genericWriteForeignEnum = function(dictGeneric) {
    var from4 = from(dictGeneric);
    return function(dictGenericEnumSumRep) {
      var genericEnumWriteForeign1 = genericEnumWriteForeign(dictGenericEnumSumRep);
      return function(a4) {
        return genericEnumWriteForeign1(from4(a4));
      };
    };
  };
  var genericEnumReadForeign = function(dict) {
    return dict.genericEnumReadForeign;
  };
  var genericReadForeignEnum = function(dictGeneric) {
    var to2 = to(dictGeneric);
    return function(dictGenericEnumSumRep) {
      var genericEnumReadForeign1 = genericEnumReadForeign(dictGenericEnumSumRep);
      return function(f2) {
        return map14(to2)(genericEnumReadForeign1(f2));
      };
    };
  };
  var genericEnumSumRepSum = function(dictGenericEnumSumRep) {
    var genericEnumReadForeign1 = genericEnumReadForeign(dictGenericEnumSumRep);
    var genericEnumWriteForeign1 = genericEnumWriteForeign(dictGenericEnumSumRep);
    return function(dictGenericEnumSumRep1) {
      var genericEnumReadForeign2 = genericEnumReadForeign(dictGenericEnumSumRep1);
      var genericEnumWriteForeign2 = genericEnumWriteForeign(dictGenericEnumSumRep1);
      return {
        genericEnumReadForeign: function(f2) {
          return alt3(map14(Inl.create)(genericEnumReadForeign1(f2)))(map14(Inr.create)(genericEnumReadForeign2(f2)));
        },
        genericEnumWriteForeign: function(v2) {
          if (v2 instanceof Inl) {
            return genericEnumWriteForeign1(v2.value0);
          }
          ;
          if (v2 instanceof Inr) {
            return genericEnumWriteForeign2(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Yoga.JSON.Generics.EnumSumRep (line 38, column 29 - line 40, column 43): " + [v2.constructor.name]);
        }
      };
    };
  };

  // output/Backend.Tool.Types/index.js
  var genericEnumSumRepSum2 = /* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
    reflectSymbol: function() {
      return "NPM";
    }
  }))(/* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
    reflectSymbol: function() {
      return "Spago";
    }
  }))(/* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc({
    reflectSymbol: function() {
      return "Purs";
    }
  }))(/* @__PURE__ */ genericEnumSumRepConstruc({
    reflectSymbol: function() {
      return "DhallToJSON";
    }
  }))));
  var NPM = /* @__PURE__ */ function() {
    function NPM2() {
    }
    ;
    NPM2.value = new NPM2();
    return NPM2;
  }();
  var Spago = /* @__PURE__ */ function() {
    function Spago3() {
    }
    ;
    Spago3.value = new Spago3();
    return Spago3;
  }();
  var Purs = /* @__PURE__ */ function() {
    function Purs2() {
    }
    ;
    Purs2.value = new Purs2();
    return Purs2;
  }();
  var DhallToJSON = /* @__PURE__ */ function() {
    function DhallToJSON2() {
    }
    ;
    DhallToJSON2.value = new DhallToJSON2();
    return DhallToJSON2;
  }();
  var writeForeignToolPath = writeForeignString;
  var readForeignToolPath = readForeignString;
  var genericTool_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return NPM.value;
      }
      ;
      if (x3 instanceof Inr && x3.value0 instanceof Inl) {
        return Spago.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inl)) {
        return Purs.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inr)) {
        return DhallToJSON.value;
      }
      ;
      throw new Error("Failed pattern match at Backend.Tool.Types (line 32, column 1 - line 32, column 31): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof NPM) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof Spago) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x3 instanceof Purs) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x3 instanceof DhallToJSON) {
        return new Inr(new Inr(new Inr(NoArguments.value)));
      }
      ;
      throw new Error("Failed pattern match at Backend.Tool.Types (line 32, column 1 - line 32, column 31): " + [x3.constructor.name]);
    }
  };
  var readForeignTool = {
    readImpl: /* @__PURE__ */ genericReadForeignEnum(genericTool_)(genericEnumSumRepSum2)
  };
  var writeForeignTool = {
    writeImpl: /* @__PURE__ */ genericWriteForeignEnum(genericTool_)(genericEnumSumRepSum2)
  };
  var eqToolPath = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var eqTool = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof NPM && y2 instanceof NPM) {
          return true;
        }
        ;
        if (x3 instanceof Spago && y2 instanceof Spago) {
          return true;
        }
        ;
        if (x3 instanceof Purs && y2 instanceof Purs) {
          return true;
        }
        ;
        if (x3 instanceof DhallToJSON && y2 instanceof DhallToJSON) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var toName = function(v2) {
    if (v2 instanceof NPM) {
      return "Node Package Manager";
    }
    ;
    if (v2 instanceof DhallToJSON) {
      return "Dhall to JSON";
    }
    ;
    if (v2 instanceof Spago) {
      return "Spago";
    }
    ;
    if (v2 instanceof Purs) {
      return "PureScript Compiler";
    }
    ;
    throw new Error("Failed pattern match at Backend.Tool.Types (line 26, column 10 - line 30, column 31): " + [v2.constructor.name]);
  };
  var toCommand = function(v2) {
    if (v2 instanceof NPM) {
      return "npm";
    }
    ;
    if (v2 instanceof DhallToJSON) {
      return "dhall-to-json";
    }
    ;
    if (v2 instanceof Spago) {
      return "spago";
    }
    ;
    if (v2 instanceof Purs) {
      return "purs";
    }
    ;
    throw new Error("Failed pattern match at Backend.Tool.Types (line 19, column 13 - line 23, column 16): " + [v2.constructor.name]);
  };

  // output/Yoga.JSON.Generics.TaggedSumRep/index.js
  var bind8 = /* @__PURE__ */ bind(/* @__PURE__ */ bindExceptT(monadIdentity));
  var read$prime2 = /* @__PURE__ */ read$prime(/* @__PURE__ */ readForeignObject(readForeignForeign));
  var fail4 = /* @__PURE__ */ fail(monadIdentity);
  var pure6 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeExceptT(monadIdentity));
  var read$prime1 = /* @__PURE__ */ read$prime(readForeignString);
  var map15 = /* @__PURE__ */ map(functorNonEmptyList);
  var map16 = /* @__PURE__ */ map(/* @__PURE__ */ functorExceptT(functorIdentity));
  var write4 = /* @__PURE__ */ write3(/* @__PURE__ */ writeForeignObject(writeForeignForeign));
  var fromFoldable5 = /* @__PURE__ */ fromFoldable4(foldableArray);
  var write1 = /* @__PURE__ */ write3(writeForeignString);
  var alt4 = /* @__PURE__ */ alt(/* @__PURE__ */ altExceptT(semigroupNonEmptyList)(monadIdentity));
  var writeGenericTaggedSumRepN = {
    genericWriteForeignTaggedSumRep: function(v2) {
      return function(v1) {
        return $$undefined;
      };
    }
  };
  var writeGenericTaggedSumRepA = function(dictWriteForeign) {
    var writeImpl6 = writeImpl(dictWriteForeign);
    return {
      genericWriteForeignTaggedSumRep: function(v2) {
        return function(v1) {
          return writeImpl6(v1);
        };
      }
    };
  };
  var readGenericTaggedSumRepCo = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      genericReadForeignTaggedSumRep: function(v2) {
        return function(f2) {
          var name15 = v2.toConstructorName(reflectSymbol2($$Proxy.value));
          return bind8(read$prime2(f2))(function(v1) {
            return bind8(maybe(fail4(new ErrorAtProperty(v2.typeTag, new ForeignError("Missing type tag: " + v2.typeTag))))(pure6)(lookup3(v2.typeTag)(v1)))(function(typeFgn) {
              return bind8(read$prime1(typeFgn))(function(typeStr) {
                var $78 = typeStr === name15;
                if ($78) {
                  return withExcept(map15(ErrorAtProperty.create(name15)))(pure6(NoArguments.value));
                }
                ;
                return fail4(new ForeignError("Wrong type tag " + (typeStr + (" where " + (v2.typeTag + " was expected.")))));
              });
            });
          });
        };
      }
    };
  };
  var readGenericTaggedSumRepAr = function(dictReadForeign) {
    var readImpl4 = readImpl(dictReadForeign);
    return {
      genericReadForeignTaggedSumRep: function(v2) {
        return function(f2) {
          return map16(Argument)(readImpl4(f2));
        };
      }
    };
  };
  var genericWriteForeignTaggedSumRep = function(dict) {
    return dict.genericWriteForeignTaggedSumRep;
  };
  var writeGenericTaggedSumRepC = function(dictWriteGenericTaggedSumRep) {
    var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return {
        genericWriteForeignTaggedSumRep: function(v2) {
          return function(v1) {
            var name15 = v2.toConstructorName(reflectSymbol2($$Proxy.value));
            return write4(fromFoldable5([new Tuple(v2.typeTag, write1(name15)), new Tuple(v2.valueTag, genericWriteForeignTaggedSumRep1(v2)(v1))]));
          };
        }
      };
    };
  };
  var writeGenericTaggedSumRepS = function(dictWriteGenericTaggedSumRep) {
    var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
    return function(dictWriteGenericTaggedSumRep1) {
      var genericWriteForeignTaggedSumRep2 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep1);
      return {
        genericWriteForeignTaggedSumRep: function(options3) {
          return function(v2) {
            if (v2 instanceof Inl) {
              return genericWriteForeignTaggedSumRep1(options3)(v2.value0);
            }
            ;
            if (v2 instanceof Inr) {
              return genericWriteForeignTaggedSumRep2(options3)(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Yoga.JSON.Generics.TaggedSumRep (line 106, column 45 - line 108, column 57): " + [v2.constructor.name]);
          };
        }
      };
    };
  };
  var genericWriteForeignTaggedSum = function(dictGeneric) {
    var from4 = from(dictGeneric);
    return function(dictWriteGenericTaggedSumRep) {
      var genericWriteForeignTaggedSumRep1 = genericWriteForeignTaggedSumRep(dictWriteGenericTaggedSumRep);
      return function(options3) {
        return function(r2) {
          return genericWriteForeignTaggedSumRep1(options3)(from4(r2));
        };
      };
    };
  };
  var genericReadForeignTaggedSumRep = function(dict) {
    return dict.genericReadForeignTaggedSumRep;
  };
  var readGenericTaggedSumRepCo1 = function(dictReadGenericTaggedSumRep) {
    var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
    return function(dictIsSymbol) {
      var reflectSymbol2 = reflectSymbol(dictIsSymbol);
      return {
        genericReadForeignTaggedSumRep: function(v2) {
          return function(f2) {
            var name15 = v2.toConstructorName(reflectSymbol2($$Proxy.value));
            return bind8(read$prime2(f2))(function(v1) {
              return bind8(maybe(fail4(new ErrorAtProperty(v2.typeTag, new ForeignError("Missing type tag: " + v2.typeTag))))(pure6)(lookup3(v2.typeTag)(v1)))(function(typeFgn) {
                return bind8(read$prime1(typeFgn))(function(typeStr) {
                  return bind8(maybe(fail4(new ErrorAtProperty(v2.valueTag, new ForeignError("Missing value tag: " + v2.valueTag))))(pure6)(lookup3(v2.valueTag)(v1)))(function(value12) {
                    var $94 = typeStr === name15;
                    if ($94) {
                      return withExcept(map15(ErrorAtProperty.create(name15)))(map16(Constructor)(genericReadForeignTaggedSumRep1(v2)(value12)));
                    }
                    ;
                    return fail4(new ForeignError("Wrong constructor name tag " + (typeStr + (" where " + (name15 + " was expected.")))));
                  });
                });
              });
            });
          };
        }
      };
    };
  };
  var readGenericTaggedSumRepSu = function(dictReadGenericTaggedSumRep) {
    var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
    return function(dictReadGenericTaggedSumRep1) {
      var genericReadForeignTaggedSumRep2 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep1);
      return {
        genericReadForeignTaggedSumRep: function(options3) {
          return function(f2) {
            return alt4(map16(Inl.create)(genericReadForeignTaggedSumRep1(options3)(f2)))(map16(Inr.create)(genericReadForeignTaggedSumRep2(options3)(f2)));
          };
        }
      };
    };
  };
  var genericReadForeignTaggedSum = function(dictGeneric) {
    var to2 = to(dictGeneric);
    return function(dictReadGenericTaggedSumRep) {
      var genericReadForeignTaggedSumRep1 = genericReadForeignTaggedSumRep(dictReadGenericTaggedSumRep);
      return function(options3) {
        return function(f2) {
          return map16(to2)(genericReadForeignTaggedSumRep1(options3)(f2));
        };
      };
    };
  };
  var defaultOptions = {
    typeTag: "type",
    valueTag: "value",
    toConstructorName: /* @__PURE__ */ identity(categoryFn)
  };

  // output/Biz.IPC.GetInstalledTools.Types/index.js
  var UnsupportedOperatingSystemIsSymbol = {
    reflectSymbol: function() {
      return "UnsupportedOperatingSystem";
    }
  };
  var ToolsResultIsSymbol = {
    reflectSymbol: function() {
      return "ToolsResult";
    }
  };
  var eq3 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqTuple(eqTool)(/* @__PURE__ */ eqMaybe(eqToolPath))));
  var UnsupportedOperatingSystem = /* @__PURE__ */ function() {
    function UnsupportedOperatingSystem2() {
    }
    ;
    UnsupportedOperatingSystem2.value = new UnsupportedOperatingSystem2();
    return UnsupportedOperatingSystem2;
  }();
  var ToolsResult = /* @__PURE__ */ function() {
    function ToolsResult2(value0) {
      this.value0 = value0;
    }
    ;
    ToolsResult2.create = function(value0) {
      return new ToolsResult2(value0);
    };
    return ToolsResult2;
  }();
  var genericGetInstalledToolsR = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return UnsupportedOperatingSystem.value;
      }
      ;
      if (x3 instanceof Inr) {
        return new ToolsResult(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.GetInstalledTools.Types (line 14, column 1 - line 14, column 50): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof UnsupportedOperatingSystem) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof ToolsResult) {
        return new Inr(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.GetInstalledTools.Types (line 14, column 1 - line 14, column 50): " + [x3.constructor.name]);
    }
  };
  var readForeignGetInstalledTo = {
    readImpl: /* @__PURE__ */ genericReadForeignTaggedSum(genericGetInstalledToolsR)(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo(UnsupportedOperatingSystemIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignArray(/* @__PURE__ */ readForeignTuple(/* @__PURE__ */ readTupleHelper(readForeignTool)(/* @__PURE__ */ readForeignMaybe(readForeignToolPath))))))(ToolsResultIsSymbol)))(defaultOptions)
  };
  var writeForeignGetInstalledT = {
    writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericGetInstalledToolsR)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(writeGenericTaggedSumRepN)(UnsupportedOperatingSystemIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignTuple(writeForeignTool)(/* @__PURE__ */ writeForeignMaybe(writeForeignToolPath)))))(ToolsResultIsSymbol)))(defaultOptions)
  };
  var eqGetInstalledToolsResult = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof UnsupportedOperatingSystem && y2 instanceof UnsupportedOperatingSystem) {
          return true;
        }
        ;
        if (x3 instanceof ToolsResult && y2 instanceof ToolsResult) {
          return eq3(x3.value0)(y2.value0);
        }
        ;
        return false;
      };
    }
  };

  // output/Data.CodePoint.Unicode.Internal/index.js
  var unsafeIndex2 = /* @__PURE__ */ unsafeIndex();
  var NUMCAT_LU = /* @__PURE__ */ function() {
    function NUMCAT_LU2() {
    }
    ;
    NUMCAT_LU2.value = new NUMCAT_LU2();
    return NUMCAT_LU2;
  }();
  var NUMCAT_LL = /* @__PURE__ */ function() {
    function NUMCAT_LL2() {
    }
    ;
    NUMCAT_LL2.value = new NUMCAT_LL2();
    return NUMCAT_LL2;
  }();
  var NUMCAT_LT = /* @__PURE__ */ function() {
    function NUMCAT_LT2() {
    }
    ;
    NUMCAT_LT2.value = new NUMCAT_LT2();
    return NUMCAT_LT2;
  }();
  var NUMCAT_MN = /* @__PURE__ */ function() {
    function NUMCAT_MN2() {
    }
    ;
    NUMCAT_MN2.value = new NUMCAT_MN2();
    return NUMCAT_MN2;
  }();
  var NUMCAT_NL = /* @__PURE__ */ function() {
    function NUMCAT_NL2() {
    }
    ;
    NUMCAT_NL2.value = new NUMCAT_NL2();
    return NUMCAT_NL2;
  }();
  var NUMCAT_SO = /* @__PURE__ */ function() {
    function NUMCAT_SO2() {
    }
    ;
    NUMCAT_SO2.value = new NUMCAT_SO2();
    return NUMCAT_SO2;
  }();
  var NUMCAT_CN = /* @__PURE__ */ function() {
    function NUMCAT_CN2() {
    }
    ;
    NUMCAT_CN2.value = new NUMCAT_CN2();
    return NUMCAT_CN2;
  }();
  var numConvBlocks = 1332;
  var gencatSO = 8192;
  var rule170 = /* @__PURE__ */ function() {
    return {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
    };
  }();
  var rule171 = /* @__PURE__ */ function() {
    return {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
    };
  }();
  var gencatNL = 16777216;
  var rule168 = /* @__PURE__ */ function() {
    return {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
    };
  }();
  var rule169 = /* @__PURE__ */ function() {
    return {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
    };
  }();
  var gencatMN = 2097152;
  var rule93 = /* @__PURE__ */ function() {
    return {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
    };
  }();
  var gencatLU = 512;
  var nullrule = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
    };
  }();
  var rule104 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
    };
  }();
  var rule115 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
    };
  }();
  var rule117 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
    };
  }();
  var rule118 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
    };
  }();
  var rule120 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
    };
  }();
  var rule122 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
    };
  }();
  var rule125 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
    };
  }();
  var rule127 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38864,
      titledist: 0
    };
  }();
  var rule137 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3008 | 0,
      titledist: 0
    };
  }();
  var rule142 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
    };
  }();
  var rule144 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
    };
  }();
  var rule153 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
    };
  }();
  var rule156 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
    };
  }();
  var rule157 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
    };
  }();
  var rule158 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
    };
  }();
  var rule159 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
    };
  }();
  var rule160 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
    };
  }();
  var rule163 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
    };
  }();
  var rule164 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
    };
  }();
  var rule165 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
    };
  }();
  var rule166 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
    };
  }();
  var rule172 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
    };
  }();
  var rule173 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
    };
  }();
  var rule174 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
    };
  }();
  var rule177 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
    };
  }();
  var rule178 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
    };
  }();
  var rule179 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
    };
  }();
  var rule180 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
    };
  }();
  var rule181 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
    };
  }();
  var rule183 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
    };
  }();
  var rule184 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
    };
  }();
  var rule186 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42308 | 0,
      titledist: 0
    };
  }();
  var rule187 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42319 | 0,
      titledist: 0
    };
  }();
  var rule188 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42315 | 0,
      titledist: 0
    };
  }();
  var rule189 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42305 | 0,
      titledist: 0
    };
  }();
  var rule190 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42258 | 0,
      titledist: 0
    };
  }();
  var rule191 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42282 | 0,
      titledist: 0
    };
  }();
  var rule192 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42261 | 0,
      titledist: 0
    };
  }();
  var rule193 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 928,
      titledist: 0
    };
  }();
  var rule194 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -48 | 0,
      titledist: 0
    };
  }();
  var rule195 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42307 | 0,
      titledist: 0
    };
  }();
  var rule196 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35384 | 0,
      titledist: 0
    };
  }();
  var rule201 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
    };
  }();
  var rule203 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 34,
      titledist: 0
    };
  }();
  var rule22 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
    };
  }();
  var rule24 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
    };
  }();
  var rule26 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
    };
  }();
  var rule29 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
    };
  }();
  var rule30 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
    };
  }();
  var rule31 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
    };
  }();
  var rule32 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
    };
  }();
  var rule33 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
    };
  }();
  var rule34 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
    };
  }();
  var rule35 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
    };
  }();
  var rule37 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
    };
  }();
  var rule38 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
    };
  }();
  var rule40 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
    };
  }();
  var rule42 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
    };
  }();
  var rule43 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
    };
  }();
  var rule44 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
    };
  }();
  var rule45 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
    };
  }();
  var rule47 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
    };
  }();
  var rule51 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
    };
  }();
  var rule52 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
    };
  }();
  var rule53 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
    };
  }();
  var rule54 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
    };
  }();
  var rule55 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
    };
  }();
  var rule56 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
    };
  }();
  var rule58 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
    };
  }();
  var rule59 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
    };
  }();
  var rule60 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
    };
  }();
  var rule9 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
    };
  }();
  var rule94 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 116,
      titledist: 0
    };
  }();
  var rule95 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
    };
  }();
  var rule96 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
    };
  }();
  var rule97 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
    };
  }();
  var rule98 = /* @__PURE__ */ function() {
    return {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
    };
  }();
  var gencatLT = 524288;
  var rule151 = /* @__PURE__ */ function() {
    return {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
    };
  }();
  var rule154 = /* @__PURE__ */ function() {
    return {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
    };
  }();
  var rule48 = /* @__PURE__ */ function() {
    return {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
    };
  }();
  var gencatLL = 4096;
  var rule100 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
    };
  }();
  var rule101 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
    };
  }();
  var rule102 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
    };
  }();
  var rule103 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
    };
  }();
  var rule105 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
    };
  }();
  var rule106 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
    };
  }();
  var rule108 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
    };
  }();
  var rule109 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
    };
  }();
  var rule110 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
    };
  }();
  var rule111 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
    };
  }();
  var rule112 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
    };
  }();
  var rule113 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
    };
  }();
  var rule114 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -116 | 0,
      lowdist: 0,
      titledist: -116 | 0
    };
  }();
  var rule116 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
    };
  }();
  var rule12 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
    };
  }();
  var rule121 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
    };
  }();
  var rule123 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
    };
  }();
  var rule126 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3008,
      lowdist: 0,
      titledist: 0
    };
  }();
  var rule129 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6254 | 0,
      lowdist: 0,
      titledist: -6254 | 0
    };
  }();
  var rule130 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6253 | 0,
      lowdist: 0,
      titledist: -6253 | 0
    };
  }();
  var rule131 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6244 | 0,
      lowdist: 0,
      titledist: -6244 | 0
    };
  }();
  var rule132 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6242 | 0,
      lowdist: 0,
      titledist: -6242 | 0
    };
  }();
  var rule133 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6243 | 0,
      lowdist: 0,
      titledist: -6243 | 0
    };
  }();
  var rule134 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6236 | 0,
      lowdist: 0,
      titledist: -6236 | 0
    };
  }();
  var rule135 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -6181 | 0,
      lowdist: 0,
      titledist: -6181 | 0
    };
  }();
  var rule136 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35266,
      lowdist: 0,
      titledist: 35266
    };
  }();
  var rule138 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
    };
  }();
  var rule139 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
    };
  }();
  var rule140 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35384,
      lowdist: 0,
      titledist: 35384
    };
  }();
  var rule141 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
    };
  }();
  var rule143 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
    };
  }();
  var rule145 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
    };
  }();
  var rule146 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
    };
  }();
  var rule147 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
    };
  }();
  var rule148 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
    };
  }();
  var rule149 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
    };
  }();
  var rule150 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
    };
  }();
  var rule152 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
    };
  }();
  var rule155 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
    };
  }();
  var rule167 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
    };
  }();
  var rule175 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
    };
  }();
  var rule176 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
    };
  }();
  var rule18 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
    };
  }();
  var rule182 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
    };
  }();
  var rule185 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 48,
      lowdist: 0,
      titledist: 48
    };
  }();
  var rule197 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -928 | 0,
      lowdist: 0,
      titledist: -928 | 0
    };
  }();
  var rule198 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38864 | 0,
      lowdist: 0,
      titledist: -38864 | 0
    };
  }();
  var rule202 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
    };
  }();
  var rule204 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -34 | 0,
      lowdist: 0,
      titledist: -34 | 0
    };
  }();
  var rule21 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
    };
  }();
  var rule23 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
    };
  }();
  var rule25 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
    };
  }();
  var rule27 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
    };
  }();
  var rule28 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
    };
  }();
  var rule36 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
    };
  }();
  var rule39 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
    };
  }();
  var rule41 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
    };
  }();
  var rule46 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
    };
  }();
  var rule49 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
    };
  }();
  var rule50 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
    };
  }();
  var rule57 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
    };
  }();
  var rule61 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
    };
  }();
  var rule62 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
    };
  }();
  var rule63 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
    };
  }();
  var rule64 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
    };
  }();
  var rule65 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
    };
  }();
  var rule66 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
    };
  }();
  var rule67 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
    };
  }();
  var rule68 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
    };
  }();
  var rule69 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42319,
      lowdist: 0,
      titledist: 42319
    };
  }();
  var rule70 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42315,
      lowdist: 0,
      titledist: 42315
    };
  }();
  var rule71 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
    };
  }();
  var rule72 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
    };
  }();
  var rule73 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42308,
      lowdist: 0,
      titledist: 42308
    };
  }();
  var rule74 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
    };
  }();
  var rule75 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
    };
  }();
  var rule76 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
    };
  }();
  var rule77 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42305,
      lowdist: 0,
      titledist: 42305
    };
  }();
  var rule78 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
    };
  }();
  var rule79 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
    };
  }();
  var rule80 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
    };
  }();
  var rule81 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
    };
  }();
  var rule82 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
    };
  }();
  var rule83 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42307,
      lowdist: 0,
      titledist: 42307
    };
  }();
  var rule84 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42282,
      lowdist: 0,
      titledist: 42282
    };
  }();
  var rule85 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
    };
  }();
  var rule86 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
    };
  }();
  var rule87 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
    };
  }();
  var rule88 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
    };
  }();
  var rule89 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42261,
      lowdist: 0,
      titledist: 42261
    };
  }();
  var rule90 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42258,
      lowdist: 0,
      titledist: 42258
    };
  }();
  var rule99 = /* @__PURE__ */ function() {
    return {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
    };
  }();
  var convchars = [{
    start: 65,
    length: 26,
    convRule: rule9
  }, {
    start: 97,
    length: 26,
    convRule: rule12
  }, {
    start: 181,
    length: 1,
    convRule: rule18
  }, {
    start: 192,
    length: 23,
    convRule: rule9
  }, {
    start: 216,
    length: 7,
    convRule: rule9
  }, {
    start: 224,
    length: 23,
    convRule: rule12
  }, {
    start: 248,
    length: 7,
    convRule: rule12
  }, {
    start: 255,
    length: 1,
    convRule: rule21
  }, {
    start: 256,
    length: 1,
    convRule: rule22
  }, {
    start: 257,
    length: 1,
    convRule: rule23
  }, {
    start: 258,
    length: 1,
    convRule: rule22
  }, {
    start: 259,
    length: 1,
    convRule: rule23
  }, {
    start: 260,
    length: 1,
    convRule: rule22
  }, {
    start: 261,
    length: 1,
    convRule: rule23
  }, {
    start: 262,
    length: 1,
    convRule: rule22
  }, {
    start: 263,
    length: 1,
    convRule: rule23
  }, {
    start: 264,
    length: 1,
    convRule: rule22
  }, {
    start: 265,
    length: 1,
    convRule: rule23
  }, {
    start: 266,
    length: 1,
    convRule: rule22
  }, {
    start: 267,
    length: 1,
    convRule: rule23
  }, {
    start: 268,
    length: 1,
    convRule: rule22
  }, {
    start: 269,
    length: 1,
    convRule: rule23
  }, {
    start: 270,
    length: 1,
    convRule: rule22
  }, {
    start: 271,
    length: 1,
    convRule: rule23
  }, {
    start: 272,
    length: 1,
    convRule: rule22
  }, {
    start: 273,
    length: 1,
    convRule: rule23
  }, {
    start: 274,
    length: 1,
    convRule: rule22
  }, {
    start: 275,
    length: 1,
    convRule: rule23
  }, {
    start: 276,
    length: 1,
    convRule: rule22
  }, {
    start: 277,
    length: 1,
    convRule: rule23
  }, {
    start: 278,
    length: 1,
    convRule: rule22
  }, {
    start: 279,
    length: 1,
    convRule: rule23
  }, {
    start: 280,
    length: 1,
    convRule: rule22
  }, {
    start: 281,
    length: 1,
    convRule: rule23
  }, {
    start: 282,
    length: 1,
    convRule: rule22
  }, {
    start: 283,
    length: 1,
    convRule: rule23
  }, {
    start: 284,
    length: 1,
    convRule: rule22
  }, {
    start: 285,
    length: 1,
    convRule: rule23
  }, {
    start: 286,
    length: 1,
    convRule: rule22
  }, {
    start: 287,
    length: 1,
    convRule: rule23
  }, {
    start: 288,
    length: 1,
    convRule: rule22
  }, {
    start: 289,
    length: 1,
    convRule: rule23
  }, {
    start: 290,
    length: 1,
    convRule: rule22
  }, {
    start: 291,
    length: 1,
    convRule: rule23
  }, {
    start: 292,
    length: 1,
    convRule: rule22
  }, {
    start: 293,
    length: 1,
    convRule: rule23
  }, {
    start: 294,
    length: 1,
    convRule: rule22
  }, {
    start: 295,
    length: 1,
    convRule: rule23
  }, {
    start: 296,
    length: 1,
    convRule: rule22
  }, {
    start: 297,
    length: 1,
    convRule: rule23
  }, {
    start: 298,
    length: 1,
    convRule: rule22
  }, {
    start: 299,
    length: 1,
    convRule: rule23
  }, {
    start: 300,
    length: 1,
    convRule: rule22
  }, {
    start: 301,
    length: 1,
    convRule: rule23
  }, {
    start: 302,
    length: 1,
    convRule: rule22
  }, {
    start: 303,
    length: 1,
    convRule: rule23
  }, {
    start: 304,
    length: 1,
    convRule: rule24
  }, {
    start: 305,
    length: 1,
    convRule: rule25
  }, {
    start: 306,
    length: 1,
    convRule: rule22
  }, {
    start: 307,
    length: 1,
    convRule: rule23
  }, {
    start: 308,
    length: 1,
    convRule: rule22
  }, {
    start: 309,
    length: 1,
    convRule: rule23
  }, {
    start: 310,
    length: 1,
    convRule: rule22
  }, {
    start: 311,
    length: 1,
    convRule: rule23
  }, {
    start: 313,
    length: 1,
    convRule: rule22
  }, {
    start: 314,
    length: 1,
    convRule: rule23
  }, {
    start: 315,
    length: 1,
    convRule: rule22
  }, {
    start: 316,
    length: 1,
    convRule: rule23
  }, {
    start: 317,
    length: 1,
    convRule: rule22
  }, {
    start: 318,
    length: 1,
    convRule: rule23
  }, {
    start: 319,
    length: 1,
    convRule: rule22
  }, {
    start: 320,
    length: 1,
    convRule: rule23
  }, {
    start: 321,
    length: 1,
    convRule: rule22
  }, {
    start: 322,
    length: 1,
    convRule: rule23
  }, {
    start: 323,
    length: 1,
    convRule: rule22
  }, {
    start: 324,
    length: 1,
    convRule: rule23
  }, {
    start: 325,
    length: 1,
    convRule: rule22
  }, {
    start: 326,
    length: 1,
    convRule: rule23
  }, {
    start: 327,
    length: 1,
    convRule: rule22
  }, {
    start: 328,
    length: 1,
    convRule: rule23
  }, {
    start: 330,
    length: 1,
    convRule: rule22
  }, {
    start: 331,
    length: 1,
    convRule: rule23
  }, {
    start: 332,
    length: 1,
    convRule: rule22
  }, {
    start: 333,
    length: 1,
    convRule: rule23
  }, {
    start: 334,
    length: 1,
    convRule: rule22
  }, {
    start: 335,
    length: 1,
    convRule: rule23
  }, {
    start: 336,
    length: 1,
    convRule: rule22
  }, {
    start: 337,
    length: 1,
    convRule: rule23
  }, {
    start: 338,
    length: 1,
    convRule: rule22
  }, {
    start: 339,
    length: 1,
    convRule: rule23
  }, {
    start: 340,
    length: 1,
    convRule: rule22
  }, {
    start: 341,
    length: 1,
    convRule: rule23
  }, {
    start: 342,
    length: 1,
    convRule: rule22
  }, {
    start: 343,
    length: 1,
    convRule: rule23
  }, {
    start: 344,
    length: 1,
    convRule: rule22
  }, {
    start: 345,
    length: 1,
    convRule: rule23
  }, {
    start: 346,
    length: 1,
    convRule: rule22
  }, {
    start: 347,
    length: 1,
    convRule: rule23
  }, {
    start: 348,
    length: 1,
    convRule: rule22
  }, {
    start: 349,
    length: 1,
    convRule: rule23
  }, {
    start: 350,
    length: 1,
    convRule: rule22
  }, {
    start: 351,
    length: 1,
    convRule: rule23
  }, {
    start: 352,
    length: 1,
    convRule: rule22
  }, {
    start: 353,
    length: 1,
    convRule: rule23
  }, {
    start: 354,
    length: 1,
    convRule: rule22
  }, {
    start: 355,
    length: 1,
    convRule: rule23
  }, {
    start: 356,
    length: 1,
    convRule: rule22
  }, {
    start: 357,
    length: 1,
    convRule: rule23
  }, {
    start: 358,
    length: 1,
    convRule: rule22
  }, {
    start: 359,
    length: 1,
    convRule: rule23
  }, {
    start: 360,
    length: 1,
    convRule: rule22
  }, {
    start: 361,
    length: 1,
    convRule: rule23
  }, {
    start: 362,
    length: 1,
    convRule: rule22
  }, {
    start: 363,
    length: 1,
    convRule: rule23
  }, {
    start: 364,
    length: 1,
    convRule: rule22
  }, {
    start: 365,
    length: 1,
    convRule: rule23
  }, {
    start: 366,
    length: 1,
    convRule: rule22
  }, {
    start: 367,
    length: 1,
    convRule: rule23
  }, {
    start: 368,
    length: 1,
    convRule: rule22
  }, {
    start: 369,
    length: 1,
    convRule: rule23
  }, {
    start: 370,
    length: 1,
    convRule: rule22
  }, {
    start: 371,
    length: 1,
    convRule: rule23
  }, {
    start: 372,
    length: 1,
    convRule: rule22
  }, {
    start: 373,
    length: 1,
    convRule: rule23
  }, {
    start: 374,
    length: 1,
    convRule: rule22
  }, {
    start: 375,
    length: 1,
    convRule: rule23
  }, {
    start: 376,
    length: 1,
    convRule: rule26
  }, {
    start: 377,
    length: 1,
    convRule: rule22
  }, {
    start: 378,
    length: 1,
    convRule: rule23
  }, {
    start: 379,
    length: 1,
    convRule: rule22
  }, {
    start: 380,
    length: 1,
    convRule: rule23
  }, {
    start: 381,
    length: 1,
    convRule: rule22
  }, {
    start: 382,
    length: 1,
    convRule: rule23
  }, {
    start: 383,
    length: 1,
    convRule: rule27
  }, {
    start: 384,
    length: 1,
    convRule: rule28
  }, {
    start: 385,
    length: 1,
    convRule: rule29
  }, {
    start: 386,
    length: 1,
    convRule: rule22
  }, {
    start: 387,
    length: 1,
    convRule: rule23
  }, {
    start: 388,
    length: 1,
    convRule: rule22
  }, {
    start: 389,
    length: 1,
    convRule: rule23
  }, {
    start: 390,
    length: 1,
    convRule: rule30
  }, {
    start: 391,
    length: 1,
    convRule: rule22
  }, {
    start: 392,
    length: 1,
    convRule: rule23
  }, {
    start: 393,
    length: 2,
    convRule: rule31
  }, {
    start: 395,
    length: 1,
    convRule: rule22
  }, {
    start: 396,
    length: 1,
    convRule: rule23
  }, {
    start: 398,
    length: 1,
    convRule: rule32
  }, {
    start: 399,
    length: 1,
    convRule: rule33
  }, {
    start: 400,
    length: 1,
    convRule: rule34
  }, {
    start: 401,
    length: 1,
    convRule: rule22
  }, {
    start: 402,
    length: 1,
    convRule: rule23
  }, {
    start: 403,
    length: 1,
    convRule: rule31
  }, {
    start: 404,
    length: 1,
    convRule: rule35
  }, {
    start: 405,
    length: 1,
    convRule: rule36
  }, {
    start: 406,
    length: 1,
    convRule: rule37
  }, {
    start: 407,
    length: 1,
    convRule: rule38
  }, {
    start: 408,
    length: 1,
    convRule: rule22
  }, {
    start: 409,
    length: 1,
    convRule: rule23
  }, {
    start: 410,
    length: 1,
    convRule: rule39
  }, {
    start: 412,
    length: 1,
    convRule: rule37
  }, {
    start: 413,
    length: 1,
    convRule: rule40
  }, {
    start: 414,
    length: 1,
    convRule: rule41
  }, {
    start: 415,
    length: 1,
    convRule: rule42
  }, {
    start: 416,
    length: 1,
    convRule: rule22
  }, {
    start: 417,
    length: 1,
    convRule: rule23
  }, {
    start: 418,
    length: 1,
    convRule: rule22
  }, {
    start: 419,
    length: 1,
    convRule: rule23
  }, {
    start: 420,
    length: 1,
    convRule: rule22
  }, {
    start: 421,
    length: 1,
    convRule: rule23
  }, {
    start: 422,
    length: 1,
    convRule: rule43
  }, {
    start: 423,
    length: 1,
    convRule: rule22
  }, {
    start: 424,
    length: 1,
    convRule: rule23
  }, {
    start: 425,
    length: 1,
    convRule: rule43
  }, {
    start: 428,
    length: 1,
    convRule: rule22
  }, {
    start: 429,
    length: 1,
    convRule: rule23
  }, {
    start: 430,
    length: 1,
    convRule: rule43
  }, {
    start: 431,
    length: 1,
    convRule: rule22
  }, {
    start: 432,
    length: 1,
    convRule: rule23
  }, {
    start: 433,
    length: 2,
    convRule: rule44
  }, {
    start: 435,
    length: 1,
    convRule: rule22
  }, {
    start: 436,
    length: 1,
    convRule: rule23
  }, {
    start: 437,
    length: 1,
    convRule: rule22
  }, {
    start: 438,
    length: 1,
    convRule: rule23
  }, {
    start: 439,
    length: 1,
    convRule: rule45
  }, {
    start: 440,
    length: 1,
    convRule: rule22
  }, {
    start: 441,
    length: 1,
    convRule: rule23
  }, {
    start: 444,
    length: 1,
    convRule: rule22
  }, {
    start: 445,
    length: 1,
    convRule: rule23
  }, {
    start: 447,
    length: 1,
    convRule: rule46
  }, {
    start: 452,
    length: 1,
    convRule: rule47
  }, {
    start: 453,
    length: 1,
    convRule: rule48
  }, {
    start: 454,
    length: 1,
    convRule: rule49
  }, {
    start: 455,
    length: 1,
    convRule: rule47
  }, {
    start: 456,
    length: 1,
    convRule: rule48
  }, {
    start: 457,
    length: 1,
    convRule: rule49
  }, {
    start: 458,
    length: 1,
    convRule: rule47
  }, {
    start: 459,
    length: 1,
    convRule: rule48
  }, {
    start: 460,
    length: 1,
    convRule: rule49
  }, {
    start: 461,
    length: 1,
    convRule: rule22
  }, {
    start: 462,
    length: 1,
    convRule: rule23
  }, {
    start: 463,
    length: 1,
    convRule: rule22
  }, {
    start: 464,
    length: 1,
    convRule: rule23
  }, {
    start: 465,
    length: 1,
    convRule: rule22
  }, {
    start: 466,
    length: 1,
    convRule: rule23
  }, {
    start: 467,
    length: 1,
    convRule: rule22
  }, {
    start: 468,
    length: 1,
    convRule: rule23
  }, {
    start: 469,
    length: 1,
    convRule: rule22
  }, {
    start: 470,
    length: 1,
    convRule: rule23
  }, {
    start: 471,
    length: 1,
    convRule: rule22
  }, {
    start: 472,
    length: 1,
    convRule: rule23
  }, {
    start: 473,
    length: 1,
    convRule: rule22
  }, {
    start: 474,
    length: 1,
    convRule: rule23
  }, {
    start: 475,
    length: 1,
    convRule: rule22
  }, {
    start: 476,
    length: 1,
    convRule: rule23
  }, {
    start: 477,
    length: 1,
    convRule: rule50
  }, {
    start: 478,
    length: 1,
    convRule: rule22
  }, {
    start: 479,
    length: 1,
    convRule: rule23
  }, {
    start: 480,
    length: 1,
    convRule: rule22
  }, {
    start: 481,
    length: 1,
    convRule: rule23
  }, {
    start: 482,
    length: 1,
    convRule: rule22
  }, {
    start: 483,
    length: 1,
    convRule: rule23
  }, {
    start: 484,
    length: 1,
    convRule: rule22
  }, {
    start: 485,
    length: 1,
    convRule: rule23
  }, {
    start: 486,
    length: 1,
    convRule: rule22
  }, {
    start: 487,
    length: 1,
    convRule: rule23
  }, {
    start: 488,
    length: 1,
    convRule: rule22
  }, {
    start: 489,
    length: 1,
    convRule: rule23
  }, {
    start: 490,
    length: 1,
    convRule: rule22
  }, {
    start: 491,
    length: 1,
    convRule: rule23
  }, {
    start: 492,
    length: 1,
    convRule: rule22
  }, {
    start: 493,
    length: 1,
    convRule: rule23
  }, {
    start: 494,
    length: 1,
    convRule: rule22
  }, {
    start: 495,
    length: 1,
    convRule: rule23
  }, {
    start: 497,
    length: 1,
    convRule: rule47
  }, {
    start: 498,
    length: 1,
    convRule: rule48
  }, {
    start: 499,
    length: 1,
    convRule: rule49
  }, {
    start: 500,
    length: 1,
    convRule: rule22
  }, {
    start: 501,
    length: 1,
    convRule: rule23
  }, {
    start: 502,
    length: 1,
    convRule: rule51
  }, {
    start: 503,
    length: 1,
    convRule: rule52
  }, {
    start: 504,
    length: 1,
    convRule: rule22
  }, {
    start: 505,
    length: 1,
    convRule: rule23
  }, {
    start: 506,
    length: 1,
    convRule: rule22
  }, {
    start: 507,
    length: 1,
    convRule: rule23
  }, {
    start: 508,
    length: 1,
    convRule: rule22
  }, {
    start: 509,
    length: 1,
    convRule: rule23
  }, {
    start: 510,
    length: 1,
    convRule: rule22
  }, {
    start: 511,
    length: 1,
    convRule: rule23
  }, {
    start: 512,
    length: 1,
    convRule: rule22
  }, {
    start: 513,
    length: 1,
    convRule: rule23
  }, {
    start: 514,
    length: 1,
    convRule: rule22
  }, {
    start: 515,
    length: 1,
    convRule: rule23
  }, {
    start: 516,
    length: 1,
    convRule: rule22
  }, {
    start: 517,
    length: 1,
    convRule: rule23
  }, {
    start: 518,
    length: 1,
    convRule: rule22
  }, {
    start: 519,
    length: 1,
    convRule: rule23
  }, {
    start: 520,
    length: 1,
    convRule: rule22
  }, {
    start: 521,
    length: 1,
    convRule: rule23
  }, {
    start: 522,
    length: 1,
    convRule: rule22
  }, {
    start: 523,
    length: 1,
    convRule: rule23
  }, {
    start: 524,
    length: 1,
    convRule: rule22
  }, {
    start: 525,
    length: 1,
    convRule: rule23
  }, {
    start: 526,
    length: 1,
    convRule: rule22
  }, {
    start: 527,
    length: 1,
    convRule: rule23
  }, {
    start: 528,
    length: 1,
    convRule: rule22
  }, {
    start: 529,
    length: 1,
    convRule: rule23
  }, {
    start: 530,
    length: 1,
    convRule: rule22
  }, {
    start: 531,
    length: 1,
    convRule: rule23
  }, {
    start: 532,
    length: 1,
    convRule: rule22
  }, {
    start: 533,
    length: 1,
    convRule: rule23
  }, {
    start: 534,
    length: 1,
    convRule: rule22
  }, {
    start: 535,
    length: 1,
    convRule: rule23
  }, {
    start: 536,
    length: 1,
    convRule: rule22
  }, {
    start: 537,
    length: 1,
    convRule: rule23
  }, {
    start: 538,
    length: 1,
    convRule: rule22
  }, {
    start: 539,
    length: 1,
    convRule: rule23
  }, {
    start: 540,
    length: 1,
    convRule: rule22
  }, {
    start: 541,
    length: 1,
    convRule: rule23
  }, {
    start: 542,
    length: 1,
    convRule: rule22
  }, {
    start: 543,
    length: 1,
    convRule: rule23
  }, {
    start: 544,
    length: 1,
    convRule: rule53
  }, {
    start: 546,
    length: 1,
    convRule: rule22
  }, {
    start: 547,
    length: 1,
    convRule: rule23
  }, {
    start: 548,
    length: 1,
    convRule: rule22
  }, {
    start: 549,
    length: 1,
    convRule: rule23
  }, {
    start: 550,
    length: 1,
    convRule: rule22
  }, {
    start: 551,
    length: 1,
    convRule: rule23
  }, {
    start: 552,
    length: 1,
    convRule: rule22
  }, {
    start: 553,
    length: 1,
    convRule: rule23
  }, {
    start: 554,
    length: 1,
    convRule: rule22
  }, {
    start: 555,
    length: 1,
    convRule: rule23
  }, {
    start: 556,
    length: 1,
    convRule: rule22
  }, {
    start: 557,
    length: 1,
    convRule: rule23
  }, {
    start: 558,
    length: 1,
    convRule: rule22
  }, {
    start: 559,
    length: 1,
    convRule: rule23
  }, {
    start: 560,
    length: 1,
    convRule: rule22
  }, {
    start: 561,
    length: 1,
    convRule: rule23
  }, {
    start: 562,
    length: 1,
    convRule: rule22
  }, {
    start: 563,
    length: 1,
    convRule: rule23
  }, {
    start: 570,
    length: 1,
    convRule: rule54
  }, {
    start: 571,
    length: 1,
    convRule: rule22
  }, {
    start: 572,
    length: 1,
    convRule: rule23
  }, {
    start: 573,
    length: 1,
    convRule: rule55
  }, {
    start: 574,
    length: 1,
    convRule: rule56
  }, {
    start: 575,
    length: 2,
    convRule: rule57
  }, {
    start: 577,
    length: 1,
    convRule: rule22
  }, {
    start: 578,
    length: 1,
    convRule: rule23
  }, {
    start: 579,
    length: 1,
    convRule: rule58
  }, {
    start: 580,
    length: 1,
    convRule: rule59
  }, {
    start: 581,
    length: 1,
    convRule: rule60
  }, {
    start: 582,
    length: 1,
    convRule: rule22
  }, {
    start: 583,
    length: 1,
    convRule: rule23
  }, {
    start: 584,
    length: 1,
    convRule: rule22
  }, {
    start: 585,
    length: 1,
    convRule: rule23
  }, {
    start: 586,
    length: 1,
    convRule: rule22
  }, {
    start: 587,
    length: 1,
    convRule: rule23
  }, {
    start: 588,
    length: 1,
    convRule: rule22
  }, {
    start: 589,
    length: 1,
    convRule: rule23
  }, {
    start: 590,
    length: 1,
    convRule: rule22
  }, {
    start: 591,
    length: 1,
    convRule: rule23
  }, {
    start: 592,
    length: 1,
    convRule: rule61
  }, {
    start: 593,
    length: 1,
    convRule: rule62
  }, {
    start: 594,
    length: 1,
    convRule: rule63
  }, {
    start: 595,
    length: 1,
    convRule: rule64
  }, {
    start: 596,
    length: 1,
    convRule: rule65
  }, {
    start: 598,
    length: 2,
    convRule: rule66
  }, {
    start: 601,
    length: 1,
    convRule: rule67
  }, {
    start: 603,
    length: 1,
    convRule: rule68
  }, {
    start: 604,
    length: 1,
    convRule: rule69
  }, {
    start: 608,
    length: 1,
    convRule: rule66
  }, {
    start: 609,
    length: 1,
    convRule: rule70
  }, {
    start: 611,
    length: 1,
    convRule: rule71
  }, {
    start: 613,
    length: 1,
    convRule: rule72
  }, {
    start: 614,
    length: 1,
    convRule: rule73
  }, {
    start: 616,
    length: 1,
    convRule: rule74
  }, {
    start: 617,
    length: 1,
    convRule: rule75
  }, {
    start: 618,
    length: 1,
    convRule: rule73
  }, {
    start: 619,
    length: 1,
    convRule: rule76
  }, {
    start: 620,
    length: 1,
    convRule: rule77
  }, {
    start: 623,
    length: 1,
    convRule: rule75
  }, {
    start: 625,
    length: 1,
    convRule: rule78
  }, {
    start: 626,
    length: 1,
    convRule: rule79
  }, {
    start: 629,
    length: 1,
    convRule: rule80
  }, {
    start: 637,
    length: 1,
    convRule: rule81
  }, {
    start: 640,
    length: 1,
    convRule: rule82
  }, {
    start: 642,
    length: 1,
    convRule: rule83
  }, {
    start: 643,
    length: 1,
    convRule: rule82
  }, {
    start: 647,
    length: 1,
    convRule: rule84
  }, {
    start: 648,
    length: 1,
    convRule: rule82
  }, {
    start: 649,
    length: 1,
    convRule: rule85
  }, {
    start: 650,
    length: 2,
    convRule: rule86
  }, {
    start: 652,
    length: 1,
    convRule: rule87
  }, {
    start: 658,
    length: 1,
    convRule: rule88
  }, {
    start: 669,
    length: 1,
    convRule: rule89
  }, {
    start: 670,
    length: 1,
    convRule: rule90
  }, {
    start: 837,
    length: 1,
    convRule: rule93
  }, {
    start: 880,
    length: 1,
    convRule: rule22
  }, {
    start: 881,
    length: 1,
    convRule: rule23
  }, {
    start: 882,
    length: 1,
    convRule: rule22
  }, {
    start: 883,
    length: 1,
    convRule: rule23
  }, {
    start: 886,
    length: 1,
    convRule: rule22
  }, {
    start: 887,
    length: 1,
    convRule: rule23
  }, {
    start: 891,
    length: 3,
    convRule: rule41
  }, {
    start: 895,
    length: 1,
    convRule: rule94
  }, {
    start: 902,
    length: 1,
    convRule: rule95
  }, {
    start: 904,
    length: 3,
    convRule: rule96
  }, {
    start: 908,
    length: 1,
    convRule: rule97
  }, {
    start: 910,
    length: 2,
    convRule: rule98
  }, {
    start: 913,
    length: 17,
    convRule: rule9
  }, {
    start: 931,
    length: 9,
    convRule: rule9
  }, {
    start: 940,
    length: 1,
    convRule: rule99
  }, {
    start: 941,
    length: 3,
    convRule: rule100
  }, {
    start: 945,
    length: 17,
    convRule: rule12
  }, {
    start: 962,
    length: 1,
    convRule: rule101
  }, {
    start: 963,
    length: 9,
    convRule: rule12
  }, {
    start: 972,
    length: 1,
    convRule: rule102
  }, {
    start: 973,
    length: 2,
    convRule: rule103
  }, {
    start: 975,
    length: 1,
    convRule: rule104
  }, {
    start: 976,
    length: 1,
    convRule: rule105
  }, {
    start: 977,
    length: 1,
    convRule: rule106
  }, {
    start: 981,
    length: 1,
    convRule: rule108
  }, {
    start: 982,
    length: 1,
    convRule: rule109
  }, {
    start: 983,
    length: 1,
    convRule: rule110
  }, {
    start: 984,
    length: 1,
    convRule: rule22
  }, {
    start: 985,
    length: 1,
    convRule: rule23
  }, {
    start: 986,
    length: 1,
    convRule: rule22
  }, {
    start: 987,
    length: 1,
    convRule: rule23
  }, {
    start: 988,
    length: 1,
    convRule: rule22
  }, {
    start: 989,
    length: 1,
    convRule: rule23
  }, {
    start: 990,
    length: 1,
    convRule: rule22
  }, {
    start: 991,
    length: 1,
    convRule: rule23
  }, {
    start: 992,
    length: 1,
    convRule: rule22
  }, {
    start: 993,
    length: 1,
    convRule: rule23
  }, {
    start: 994,
    length: 1,
    convRule: rule22
  }, {
    start: 995,
    length: 1,
    convRule: rule23
  }, {
    start: 996,
    length: 1,
    convRule: rule22
  }, {
    start: 997,
    length: 1,
    convRule: rule23
  }, {
    start: 998,
    length: 1,
    convRule: rule22
  }, {
    start: 999,
    length: 1,
    convRule: rule23
  }, {
    start: 1e3,
    length: 1,
    convRule: rule22
  }, {
    start: 1001,
    length: 1,
    convRule: rule23
  }, {
    start: 1002,
    length: 1,
    convRule: rule22
  }, {
    start: 1003,
    length: 1,
    convRule: rule23
  }, {
    start: 1004,
    length: 1,
    convRule: rule22
  }, {
    start: 1005,
    length: 1,
    convRule: rule23
  }, {
    start: 1006,
    length: 1,
    convRule: rule22
  }, {
    start: 1007,
    length: 1,
    convRule: rule23
  }, {
    start: 1008,
    length: 1,
    convRule: rule111
  }, {
    start: 1009,
    length: 1,
    convRule: rule112
  }, {
    start: 1010,
    length: 1,
    convRule: rule113
  }, {
    start: 1011,
    length: 1,
    convRule: rule114
  }, {
    start: 1012,
    length: 1,
    convRule: rule115
  }, {
    start: 1013,
    length: 1,
    convRule: rule116
  }, {
    start: 1015,
    length: 1,
    convRule: rule22
  }, {
    start: 1016,
    length: 1,
    convRule: rule23
  }, {
    start: 1017,
    length: 1,
    convRule: rule117
  }, {
    start: 1018,
    length: 1,
    convRule: rule22
  }, {
    start: 1019,
    length: 1,
    convRule: rule23
  }, {
    start: 1021,
    length: 3,
    convRule: rule53
  }, {
    start: 1024,
    length: 16,
    convRule: rule118
  }, {
    start: 1040,
    length: 32,
    convRule: rule9
  }, {
    start: 1072,
    length: 32,
    convRule: rule12
  }, {
    start: 1104,
    length: 16,
    convRule: rule112
  }, {
    start: 1120,
    length: 1,
    convRule: rule22
  }, {
    start: 1121,
    length: 1,
    convRule: rule23
  }, {
    start: 1122,
    length: 1,
    convRule: rule22
  }, {
    start: 1123,
    length: 1,
    convRule: rule23
  }, {
    start: 1124,
    length: 1,
    convRule: rule22
  }, {
    start: 1125,
    length: 1,
    convRule: rule23
  }, {
    start: 1126,
    length: 1,
    convRule: rule22
  }, {
    start: 1127,
    length: 1,
    convRule: rule23
  }, {
    start: 1128,
    length: 1,
    convRule: rule22
  }, {
    start: 1129,
    length: 1,
    convRule: rule23
  }, {
    start: 1130,
    length: 1,
    convRule: rule22
  }, {
    start: 1131,
    length: 1,
    convRule: rule23
  }, {
    start: 1132,
    length: 1,
    convRule: rule22
  }, {
    start: 1133,
    length: 1,
    convRule: rule23
  }, {
    start: 1134,
    length: 1,
    convRule: rule22
  }, {
    start: 1135,
    length: 1,
    convRule: rule23
  }, {
    start: 1136,
    length: 1,
    convRule: rule22
  }, {
    start: 1137,
    length: 1,
    convRule: rule23
  }, {
    start: 1138,
    length: 1,
    convRule: rule22
  }, {
    start: 1139,
    length: 1,
    convRule: rule23
  }, {
    start: 1140,
    length: 1,
    convRule: rule22
  }, {
    start: 1141,
    length: 1,
    convRule: rule23
  }, {
    start: 1142,
    length: 1,
    convRule: rule22
  }, {
    start: 1143,
    length: 1,
    convRule: rule23
  }, {
    start: 1144,
    length: 1,
    convRule: rule22
  }, {
    start: 1145,
    length: 1,
    convRule: rule23
  }, {
    start: 1146,
    length: 1,
    convRule: rule22
  }, {
    start: 1147,
    length: 1,
    convRule: rule23
  }, {
    start: 1148,
    length: 1,
    convRule: rule22
  }, {
    start: 1149,
    length: 1,
    convRule: rule23
  }, {
    start: 1150,
    length: 1,
    convRule: rule22
  }, {
    start: 1151,
    length: 1,
    convRule: rule23
  }, {
    start: 1152,
    length: 1,
    convRule: rule22
  }, {
    start: 1153,
    length: 1,
    convRule: rule23
  }, {
    start: 1162,
    length: 1,
    convRule: rule22
  }, {
    start: 1163,
    length: 1,
    convRule: rule23
  }, {
    start: 1164,
    length: 1,
    convRule: rule22
  }, {
    start: 1165,
    length: 1,
    convRule: rule23
  }, {
    start: 1166,
    length: 1,
    convRule: rule22
  }, {
    start: 1167,
    length: 1,
    convRule: rule23
  }, {
    start: 1168,
    length: 1,
    convRule: rule22
  }, {
    start: 1169,
    length: 1,
    convRule: rule23
  }, {
    start: 1170,
    length: 1,
    convRule: rule22
  }, {
    start: 1171,
    length: 1,
    convRule: rule23
  }, {
    start: 1172,
    length: 1,
    convRule: rule22
  }, {
    start: 1173,
    length: 1,
    convRule: rule23
  }, {
    start: 1174,
    length: 1,
    convRule: rule22
  }, {
    start: 1175,
    length: 1,
    convRule: rule23
  }, {
    start: 1176,
    length: 1,
    convRule: rule22
  }, {
    start: 1177,
    length: 1,
    convRule: rule23
  }, {
    start: 1178,
    length: 1,
    convRule: rule22
  }, {
    start: 1179,
    length: 1,
    convRule: rule23
  }, {
    start: 1180,
    length: 1,
    convRule: rule22
  }, {
    start: 1181,
    length: 1,
    convRule: rule23
  }, {
    start: 1182,
    length: 1,
    convRule: rule22
  }, {
    start: 1183,
    length: 1,
    convRule: rule23
  }, {
    start: 1184,
    length: 1,
    convRule: rule22
  }, {
    start: 1185,
    length: 1,
    convRule: rule23
  }, {
    start: 1186,
    length: 1,
    convRule: rule22
  }, {
    start: 1187,
    length: 1,
    convRule: rule23
  }, {
    start: 1188,
    length: 1,
    convRule: rule22
  }, {
    start: 1189,
    length: 1,
    convRule: rule23
  }, {
    start: 1190,
    length: 1,
    convRule: rule22
  }, {
    start: 1191,
    length: 1,
    convRule: rule23
  }, {
    start: 1192,
    length: 1,
    convRule: rule22
  }, {
    start: 1193,
    length: 1,
    convRule: rule23
  }, {
    start: 1194,
    length: 1,
    convRule: rule22
  }, {
    start: 1195,
    length: 1,
    convRule: rule23
  }, {
    start: 1196,
    length: 1,
    convRule: rule22
  }, {
    start: 1197,
    length: 1,
    convRule: rule23
  }, {
    start: 1198,
    length: 1,
    convRule: rule22
  }, {
    start: 1199,
    length: 1,
    convRule: rule23
  }, {
    start: 1200,
    length: 1,
    convRule: rule22
  }, {
    start: 1201,
    length: 1,
    convRule: rule23
  }, {
    start: 1202,
    length: 1,
    convRule: rule22
  }, {
    start: 1203,
    length: 1,
    convRule: rule23
  }, {
    start: 1204,
    length: 1,
    convRule: rule22
  }, {
    start: 1205,
    length: 1,
    convRule: rule23
  }, {
    start: 1206,
    length: 1,
    convRule: rule22
  }, {
    start: 1207,
    length: 1,
    convRule: rule23
  }, {
    start: 1208,
    length: 1,
    convRule: rule22
  }, {
    start: 1209,
    length: 1,
    convRule: rule23
  }, {
    start: 1210,
    length: 1,
    convRule: rule22
  }, {
    start: 1211,
    length: 1,
    convRule: rule23
  }, {
    start: 1212,
    length: 1,
    convRule: rule22
  }, {
    start: 1213,
    length: 1,
    convRule: rule23
  }, {
    start: 1214,
    length: 1,
    convRule: rule22
  }, {
    start: 1215,
    length: 1,
    convRule: rule23
  }, {
    start: 1216,
    length: 1,
    convRule: rule120
  }, {
    start: 1217,
    length: 1,
    convRule: rule22
  }, {
    start: 1218,
    length: 1,
    convRule: rule23
  }, {
    start: 1219,
    length: 1,
    convRule: rule22
  }, {
    start: 1220,
    length: 1,
    convRule: rule23
  }, {
    start: 1221,
    length: 1,
    convRule: rule22
  }, {
    start: 1222,
    length: 1,
    convRule: rule23
  }, {
    start: 1223,
    length: 1,
    convRule: rule22
  }, {
    start: 1224,
    length: 1,
    convRule: rule23
  }, {
    start: 1225,
    length: 1,
    convRule: rule22
  }, {
    start: 1226,
    length: 1,
    convRule: rule23
  }, {
    start: 1227,
    length: 1,
    convRule: rule22
  }, {
    start: 1228,
    length: 1,
    convRule: rule23
  }, {
    start: 1229,
    length: 1,
    convRule: rule22
  }, {
    start: 1230,
    length: 1,
    convRule: rule23
  }, {
    start: 1231,
    length: 1,
    convRule: rule121
  }, {
    start: 1232,
    length: 1,
    convRule: rule22
  }, {
    start: 1233,
    length: 1,
    convRule: rule23
  }, {
    start: 1234,
    length: 1,
    convRule: rule22
  }, {
    start: 1235,
    length: 1,
    convRule: rule23
  }, {
    start: 1236,
    length: 1,
    convRule: rule22
  }, {
    start: 1237,
    length: 1,
    convRule: rule23
  }, {
    start: 1238,
    length: 1,
    convRule: rule22
  }, {
    start: 1239,
    length: 1,
    convRule: rule23
  }, {
    start: 1240,
    length: 1,
    convRule: rule22
  }, {
    start: 1241,
    length: 1,
    convRule: rule23
  }, {
    start: 1242,
    length: 1,
    convRule: rule22
  }, {
    start: 1243,
    length: 1,
    convRule: rule23
  }, {
    start: 1244,
    length: 1,
    convRule: rule22
  }, {
    start: 1245,
    length: 1,
    convRule: rule23
  }, {
    start: 1246,
    length: 1,
    convRule: rule22
  }, {
    start: 1247,
    length: 1,
    convRule: rule23
  }, {
    start: 1248,
    length: 1,
    convRule: rule22
  }, {
    start: 1249,
    length: 1,
    convRule: rule23
  }, {
    start: 1250,
    length: 1,
    convRule: rule22
  }, {
    start: 1251,
    length: 1,
    convRule: rule23
  }, {
    start: 1252,
    length: 1,
    convRule: rule22
  }, {
    start: 1253,
    length: 1,
    convRule: rule23
  }, {
    start: 1254,
    length: 1,
    convRule: rule22
  }, {
    start: 1255,
    length: 1,
    convRule: rule23
  }, {
    start: 1256,
    length: 1,
    convRule: rule22
  }, {
    start: 1257,
    length: 1,
    convRule: rule23
  }, {
    start: 1258,
    length: 1,
    convRule: rule22
  }, {
    start: 1259,
    length: 1,
    convRule: rule23
  }, {
    start: 1260,
    length: 1,
    convRule: rule22
  }, {
    start: 1261,
    length: 1,
    convRule: rule23
  }, {
    start: 1262,
    length: 1,
    convRule: rule22
  }, {
    start: 1263,
    length: 1,
    convRule: rule23
  }, {
    start: 1264,
    length: 1,
    convRule: rule22
  }, {
    start: 1265,
    length: 1,
    convRule: rule23
  }, {
    start: 1266,
    length: 1,
    convRule: rule22
  }, {
    start: 1267,
    length: 1,
    convRule: rule23
  }, {
    start: 1268,
    length: 1,
    convRule: rule22
  }, {
    start: 1269,
    length: 1,
    convRule: rule23
  }, {
    start: 1270,
    length: 1,
    convRule: rule22
  }, {
    start: 1271,
    length: 1,
    convRule: rule23
  }, {
    start: 1272,
    length: 1,
    convRule: rule22
  }, {
    start: 1273,
    length: 1,
    convRule: rule23
  }, {
    start: 1274,
    length: 1,
    convRule: rule22
  }, {
    start: 1275,
    length: 1,
    convRule: rule23
  }, {
    start: 1276,
    length: 1,
    convRule: rule22
  }, {
    start: 1277,
    length: 1,
    convRule: rule23
  }, {
    start: 1278,
    length: 1,
    convRule: rule22
  }, {
    start: 1279,
    length: 1,
    convRule: rule23
  }, {
    start: 1280,
    length: 1,
    convRule: rule22
  }, {
    start: 1281,
    length: 1,
    convRule: rule23
  }, {
    start: 1282,
    length: 1,
    convRule: rule22
  }, {
    start: 1283,
    length: 1,
    convRule: rule23
  }, {
    start: 1284,
    length: 1,
    convRule: rule22
  }, {
    start: 1285,
    length: 1,
    convRule: rule23
  }, {
    start: 1286,
    length: 1,
    convRule: rule22
  }, {
    start: 1287,
    length: 1,
    convRule: rule23
  }, {
    start: 1288,
    length: 1,
    convRule: rule22
  }, {
    start: 1289,
    length: 1,
    convRule: rule23
  }, {
    start: 1290,
    length: 1,
    convRule: rule22
  }, {
    start: 1291,
    length: 1,
    convRule: rule23
  }, {
    start: 1292,
    length: 1,
    convRule: rule22
  }, {
    start: 1293,
    length: 1,
    convRule: rule23
  }, {
    start: 1294,
    length: 1,
    convRule: rule22
  }, {
    start: 1295,
    length: 1,
    convRule: rule23
  }, {
    start: 1296,
    length: 1,
    convRule: rule22
  }, {
    start: 1297,
    length: 1,
    convRule: rule23
  }, {
    start: 1298,
    length: 1,
    convRule: rule22
  }, {
    start: 1299,
    length: 1,
    convRule: rule23
  }, {
    start: 1300,
    length: 1,
    convRule: rule22
  }, {
    start: 1301,
    length: 1,
    convRule: rule23
  }, {
    start: 1302,
    length: 1,
    convRule: rule22
  }, {
    start: 1303,
    length: 1,
    convRule: rule23
  }, {
    start: 1304,
    length: 1,
    convRule: rule22
  }, {
    start: 1305,
    length: 1,
    convRule: rule23
  }, {
    start: 1306,
    length: 1,
    convRule: rule22
  }, {
    start: 1307,
    length: 1,
    convRule: rule23
  }, {
    start: 1308,
    length: 1,
    convRule: rule22
  }, {
    start: 1309,
    length: 1,
    convRule: rule23
  }, {
    start: 1310,
    length: 1,
    convRule: rule22
  }, {
    start: 1311,
    length: 1,
    convRule: rule23
  }, {
    start: 1312,
    length: 1,
    convRule: rule22
  }, {
    start: 1313,
    length: 1,
    convRule: rule23
  }, {
    start: 1314,
    length: 1,
    convRule: rule22
  }, {
    start: 1315,
    length: 1,
    convRule: rule23
  }, {
    start: 1316,
    length: 1,
    convRule: rule22
  }, {
    start: 1317,
    length: 1,
    convRule: rule23
  }, {
    start: 1318,
    length: 1,
    convRule: rule22
  }, {
    start: 1319,
    length: 1,
    convRule: rule23
  }, {
    start: 1320,
    length: 1,
    convRule: rule22
  }, {
    start: 1321,
    length: 1,
    convRule: rule23
  }, {
    start: 1322,
    length: 1,
    convRule: rule22
  }, {
    start: 1323,
    length: 1,
    convRule: rule23
  }, {
    start: 1324,
    length: 1,
    convRule: rule22
  }, {
    start: 1325,
    length: 1,
    convRule: rule23
  }, {
    start: 1326,
    length: 1,
    convRule: rule22
  }, {
    start: 1327,
    length: 1,
    convRule: rule23
  }, {
    start: 1329,
    length: 38,
    convRule: rule122
  }, {
    start: 1377,
    length: 38,
    convRule: rule123
  }, {
    start: 4256,
    length: 38,
    convRule: rule125
  }, {
    start: 4295,
    length: 1,
    convRule: rule125
  }, {
    start: 4301,
    length: 1,
    convRule: rule125
  }, {
    start: 4304,
    length: 43,
    convRule: rule126
  }, {
    start: 4349,
    length: 3,
    convRule: rule126
  }, {
    start: 5024,
    length: 80,
    convRule: rule127
  }, {
    start: 5104,
    length: 6,
    convRule: rule104
  }, {
    start: 5112,
    length: 6,
    convRule: rule110
  }, {
    start: 7296,
    length: 1,
    convRule: rule129
  }, {
    start: 7297,
    length: 1,
    convRule: rule130
  }, {
    start: 7298,
    length: 1,
    convRule: rule131
  }, {
    start: 7299,
    length: 2,
    convRule: rule132
  }, {
    start: 7301,
    length: 1,
    convRule: rule133
  }, {
    start: 7302,
    length: 1,
    convRule: rule134
  }, {
    start: 7303,
    length: 1,
    convRule: rule135
  }, {
    start: 7304,
    length: 1,
    convRule: rule136
  }, {
    start: 7312,
    length: 43,
    convRule: rule137
  }, {
    start: 7357,
    length: 3,
    convRule: rule137
  }, {
    start: 7545,
    length: 1,
    convRule: rule138
  }, {
    start: 7549,
    length: 1,
    convRule: rule139
  }, {
    start: 7566,
    length: 1,
    convRule: rule140
  }, {
    start: 7680,
    length: 1,
    convRule: rule22
  }, {
    start: 7681,
    length: 1,
    convRule: rule23
  }, {
    start: 7682,
    length: 1,
    convRule: rule22
  }, {
    start: 7683,
    length: 1,
    convRule: rule23
  }, {
    start: 7684,
    length: 1,
    convRule: rule22
  }, {
    start: 7685,
    length: 1,
    convRule: rule23
  }, {
    start: 7686,
    length: 1,
    convRule: rule22
  }, {
    start: 7687,
    length: 1,
    convRule: rule23
  }, {
    start: 7688,
    length: 1,
    convRule: rule22
  }, {
    start: 7689,
    length: 1,
    convRule: rule23
  }, {
    start: 7690,
    length: 1,
    convRule: rule22
  }, {
    start: 7691,
    length: 1,
    convRule: rule23
  }, {
    start: 7692,
    length: 1,
    convRule: rule22
  }, {
    start: 7693,
    length: 1,
    convRule: rule23
  }, {
    start: 7694,
    length: 1,
    convRule: rule22
  }, {
    start: 7695,
    length: 1,
    convRule: rule23
  }, {
    start: 7696,
    length: 1,
    convRule: rule22
  }, {
    start: 7697,
    length: 1,
    convRule: rule23
  }, {
    start: 7698,
    length: 1,
    convRule: rule22
  }, {
    start: 7699,
    length: 1,
    convRule: rule23
  }, {
    start: 7700,
    length: 1,
    convRule: rule22
  }, {
    start: 7701,
    length: 1,
    convRule: rule23
  }, {
    start: 7702,
    length: 1,
    convRule: rule22
  }, {
    start: 7703,
    length: 1,
    convRule: rule23
  }, {
    start: 7704,
    length: 1,
    convRule: rule22
  }, {
    start: 7705,
    length: 1,
    convRule: rule23
  }, {
    start: 7706,
    length: 1,
    convRule: rule22
  }, {
    start: 7707,
    length: 1,
    convRule: rule23
  }, {
    start: 7708,
    length: 1,
    convRule: rule22
  }, {
    start: 7709,
    length: 1,
    convRule: rule23
  }, {
    start: 7710,
    length: 1,
    convRule: rule22
  }, {
    start: 7711,
    length: 1,
    convRule: rule23
  }, {
    start: 7712,
    length: 1,
    convRule: rule22
  }, {
    start: 7713,
    length: 1,
    convRule: rule23
  }, {
    start: 7714,
    length: 1,
    convRule: rule22
  }, {
    start: 7715,
    length: 1,
    convRule: rule23
  }, {
    start: 7716,
    length: 1,
    convRule: rule22
  }, {
    start: 7717,
    length: 1,
    convRule: rule23
  }, {
    start: 7718,
    length: 1,
    convRule: rule22
  }, {
    start: 7719,
    length: 1,
    convRule: rule23
  }, {
    start: 7720,
    length: 1,
    convRule: rule22
  }, {
    start: 7721,
    length: 1,
    convRule: rule23
  }, {
    start: 7722,
    length: 1,
    convRule: rule22
  }, {
    start: 7723,
    length: 1,
    convRule: rule23
  }, {
    start: 7724,
    length: 1,
    convRule: rule22
  }, {
    start: 7725,
    length: 1,
    convRule: rule23
  }, {
    start: 7726,
    length: 1,
    convRule: rule22
  }, {
    start: 7727,
    length: 1,
    convRule: rule23
  }, {
    start: 7728,
    length: 1,
    convRule: rule22
  }, {
    start: 7729,
    length: 1,
    convRule: rule23
  }, {
    start: 7730,
    length: 1,
    convRule: rule22
  }, {
    start: 7731,
    length: 1,
    convRule: rule23
  }, {
    start: 7732,
    length: 1,
    convRule: rule22
  }, {
    start: 7733,
    length: 1,
    convRule: rule23
  }, {
    start: 7734,
    length: 1,
    convRule: rule22
  }, {
    start: 7735,
    length: 1,
    convRule: rule23
  }, {
    start: 7736,
    length: 1,
    convRule: rule22
  }, {
    start: 7737,
    length: 1,
    convRule: rule23
  }, {
    start: 7738,
    length: 1,
    convRule: rule22
  }, {
    start: 7739,
    length: 1,
    convRule: rule23
  }, {
    start: 7740,
    length: 1,
    convRule: rule22
  }, {
    start: 7741,
    length: 1,
    convRule: rule23
  }, {
    start: 7742,
    length: 1,
    convRule: rule22
  }, {
    start: 7743,
    length: 1,
    convRule: rule23
  }, {
    start: 7744,
    length: 1,
    convRule: rule22
  }, {
    start: 7745,
    length: 1,
    convRule: rule23
  }, {
    start: 7746,
    length: 1,
    convRule: rule22
  }, {
    start: 7747,
    length: 1,
    convRule: rule23
  }, {
    start: 7748,
    length: 1,
    convRule: rule22
  }, {
    start: 7749,
    length: 1,
    convRule: rule23
  }, {
    start: 7750,
    length: 1,
    convRule: rule22
  }, {
    start: 7751,
    length: 1,
    convRule: rule23
  }, {
    start: 7752,
    length: 1,
    convRule: rule22
  }, {
    start: 7753,
    length: 1,
    convRule: rule23
  }, {
    start: 7754,
    length: 1,
    convRule: rule22
  }, {
    start: 7755,
    length: 1,
    convRule: rule23
  }, {
    start: 7756,
    length: 1,
    convRule: rule22
  }, {
    start: 7757,
    length: 1,
    convRule: rule23
  }, {
    start: 7758,
    length: 1,
    convRule: rule22
  }, {
    start: 7759,
    length: 1,
    convRule: rule23
  }, {
    start: 7760,
    length: 1,
    convRule: rule22
  }, {
    start: 7761,
    length: 1,
    convRule: rule23
  }, {
    start: 7762,
    length: 1,
    convRule: rule22
  }, {
    start: 7763,
    length: 1,
    convRule: rule23
  }, {
    start: 7764,
    length: 1,
    convRule: rule22
  }, {
    start: 7765,
    length: 1,
    convRule: rule23
  }, {
    start: 7766,
    length: 1,
    convRule: rule22
  }, {
    start: 7767,
    length: 1,
    convRule: rule23
  }, {
    start: 7768,
    length: 1,
    convRule: rule22
  }, {
    start: 7769,
    length: 1,
    convRule: rule23
  }, {
    start: 7770,
    length: 1,
    convRule: rule22
  }, {
    start: 7771,
    length: 1,
    convRule: rule23
  }, {
    start: 7772,
    length: 1,
    convRule: rule22
  }, {
    start: 7773,
    length: 1,
    convRule: rule23
  }, {
    start: 7774,
    length: 1,
    convRule: rule22
  }, {
    start: 7775,
    length: 1,
    convRule: rule23
  }, {
    start: 7776,
    length: 1,
    convRule: rule22
  }, {
    start: 7777,
    length: 1,
    convRule: rule23
  }, {
    start: 7778,
    length: 1,
    convRule: rule22
  }, {
    start: 7779,
    length: 1,
    convRule: rule23
  }, {
    start: 7780,
    length: 1,
    convRule: rule22
  }, {
    start: 7781,
    length: 1,
    convRule: rule23
  }, {
    start: 7782,
    length: 1,
    convRule: rule22
  }, {
    start: 7783,
    length: 1,
    convRule: rule23
  }, {
    start: 7784,
    length: 1,
    convRule: rule22
  }, {
    start: 7785,
    length: 1,
    convRule: rule23
  }, {
    start: 7786,
    length: 1,
    convRule: rule22
  }, {
    start: 7787,
    length: 1,
    convRule: rule23
  }, {
    start: 7788,
    length: 1,
    convRule: rule22
  }, {
    start: 7789,
    length: 1,
    convRule: rule23
  }, {
    start: 7790,
    length: 1,
    convRule: rule22
  }, {
    start: 7791,
    length: 1,
    convRule: rule23
  }, {
    start: 7792,
    length: 1,
    convRule: rule22
  }, {
    start: 7793,
    length: 1,
    convRule: rule23
  }, {
    start: 7794,
    length: 1,
    convRule: rule22
  }, {
    start: 7795,
    length: 1,
    convRule: rule23
  }, {
    start: 7796,
    length: 1,
    convRule: rule22
  }, {
    start: 7797,
    length: 1,
    convRule: rule23
  }, {
    start: 7798,
    length: 1,
    convRule: rule22
  }, {
    start: 7799,
    length: 1,
    convRule: rule23
  }, {
    start: 7800,
    length: 1,
    convRule: rule22
  }, {
    start: 7801,
    length: 1,
    convRule: rule23
  }, {
    start: 7802,
    length: 1,
    convRule: rule22
  }, {
    start: 7803,
    length: 1,
    convRule: rule23
  }, {
    start: 7804,
    length: 1,
    convRule: rule22
  }, {
    start: 7805,
    length: 1,
    convRule: rule23
  }, {
    start: 7806,
    length: 1,
    convRule: rule22
  }, {
    start: 7807,
    length: 1,
    convRule: rule23
  }, {
    start: 7808,
    length: 1,
    convRule: rule22
  }, {
    start: 7809,
    length: 1,
    convRule: rule23
  }, {
    start: 7810,
    length: 1,
    convRule: rule22
  }, {
    start: 7811,
    length: 1,
    convRule: rule23
  }, {
    start: 7812,
    length: 1,
    convRule: rule22
  }, {
    start: 7813,
    length: 1,
    convRule: rule23
  }, {
    start: 7814,
    length: 1,
    convRule: rule22
  }, {
    start: 7815,
    length: 1,
    convRule: rule23
  }, {
    start: 7816,
    length: 1,
    convRule: rule22
  }, {
    start: 7817,
    length: 1,
    convRule: rule23
  }, {
    start: 7818,
    length: 1,
    convRule: rule22
  }, {
    start: 7819,
    length: 1,
    convRule: rule23
  }, {
    start: 7820,
    length: 1,
    convRule: rule22
  }, {
    start: 7821,
    length: 1,
    convRule: rule23
  }, {
    start: 7822,
    length: 1,
    convRule: rule22
  }, {
    start: 7823,
    length: 1,
    convRule: rule23
  }, {
    start: 7824,
    length: 1,
    convRule: rule22
  }, {
    start: 7825,
    length: 1,
    convRule: rule23
  }, {
    start: 7826,
    length: 1,
    convRule: rule22
  }, {
    start: 7827,
    length: 1,
    convRule: rule23
  }, {
    start: 7828,
    length: 1,
    convRule: rule22
  }, {
    start: 7829,
    length: 1,
    convRule: rule23
  }, {
    start: 7835,
    length: 1,
    convRule: rule141
  }, {
    start: 7838,
    length: 1,
    convRule: rule142
  }, {
    start: 7840,
    length: 1,
    convRule: rule22
  }, {
    start: 7841,
    length: 1,
    convRule: rule23
  }, {
    start: 7842,
    length: 1,
    convRule: rule22
  }, {
    start: 7843,
    length: 1,
    convRule: rule23
  }, {
    start: 7844,
    length: 1,
    convRule: rule22
  }, {
    start: 7845,
    length: 1,
    convRule: rule23
  }, {
    start: 7846,
    length: 1,
    convRule: rule22
  }, {
    start: 7847,
    length: 1,
    convRule: rule23
  }, {
    start: 7848,
    length: 1,
    convRule: rule22
  }, {
    start: 7849,
    length: 1,
    convRule: rule23
  }, {
    start: 7850,
    length: 1,
    convRule: rule22
  }, {
    start: 7851,
    length: 1,
    convRule: rule23
  }, {
    start: 7852,
    length: 1,
    convRule: rule22
  }, {
    start: 7853,
    length: 1,
    convRule: rule23
  }, {
    start: 7854,
    length: 1,
    convRule: rule22
  }, {
    start: 7855,
    length: 1,
    convRule: rule23
  }, {
    start: 7856,
    length: 1,
    convRule: rule22
  }, {
    start: 7857,
    length: 1,
    convRule: rule23
  }, {
    start: 7858,
    length: 1,
    convRule: rule22
  }, {
    start: 7859,
    length: 1,
    convRule: rule23
  }, {
    start: 7860,
    length: 1,
    convRule: rule22
  }, {
    start: 7861,
    length: 1,
    convRule: rule23
  }, {
    start: 7862,
    length: 1,
    convRule: rule22
  }, {
    start: 7863,
    length: 1,
    convRule: rule23
  }, {
    start: 7864,
    length: 1,
    convRule: rule22
  }, {
    start: 7865,
    length: 1,
    convRule: rule23
  }, {
    start: 7866,
    length: 1,
    convRule: rule22
  }, {
    start: 7867,
    length: 1,
    convRule: rule23
  }, {
    start: 7868,
    length: 1,
    convRule: rule22
  }, {
    start: 7869,
    length: 1,
    convRule: rule23
  }, {
    start: 7870,
    length: 1,
    convRule: rule22
  }, {
    start: 7871,
    length: 1,
    convRule: rule23
  }, {
    start: 7872,
    length: 1,
    convRule: rule22
  }, {
    start: 7873,
    length: 1,
    convRule: rule23
  }, {
    start: 7874,
    length: 1,
    convRule: rule22
  }, {
    start: 7875,
    length: 1,
    convRule: rule23
  }, {
    start: 7876,
    length: 1,
    convRule: rule22
  }, {
    start: 7877,
    length: 1,
    convRule: rule23
  }, {
    start: 7878,
    length: 1,
    convRule: rule22
  }, {
    start: 7879,
    length: 1,
    convRule: rule23
  }, {
    start: 7880,
    length: 1,
    convRule: rule22
  }, {
    start: 7881,
    length: 1,
    convRule: rule23
  }, {
    start: 7882,
    length: 1,
    convRule: rule22
  }, {
    start: 7883,
    length: 1,
    convRule: rule23
  }, {
    start: 7884,
    length: 1,
    convRule: rule22
  }, {
    start: 7885,
    length: 1,
    convRule: rule23
  }, {
    start: 7886,
    length: 1,
    convRule: rule22
  }, {
    start: 7887,
    length: 1,
    convRule: rule23
  }, {
    start: 7888,
    length: 1,
    convRule: rule22
  }, {
    start: 7889,
    length: 1,
    convRule: rule23
  }, {
    start: 7890,
    length: 1,
    convRule: rule22
  }, {
    start: 7891,
    length: 1,
    convRule: rule23
  }, {
    start: 7892,
    length: 1,
    convRule: rule22
  }, {
    start: 7893,
    length: 1,
    convRule: rule23
  }, {
    start: 7894,
    length: 1,
    convRule: rule22
  }, {
    start: 7895,
    length: 1,
    convRule: rule23
  }, {
    start: 7896,
    length: 1,
    convRule: rule22
  }, {
    start: 7897,
    length: 1,
    convRule: rule23
  }, {
    start: 7898,
    length: 1,
    convRule: rule22
  }, {
    start: 7899,
    length: 1,
    convRule: rule23
  }, {
    start: 7900,
    length: 1,
    convRule: rule22
  }, {
    start: 7901,
    length: 1,
    convRule: rule23
  }, {
    start: 7902,
    length: 1,
    convRule: rule22
  }, {
    start: 7903,
    length: 1,
    convRule: rule23
  }, {
    start: 7904,
    length: 1,
    convRule: rule22
  }, {
    start: 7905,
    length: 1,
    convRule: rule23
  }, {
    start: 7906,
    length: 1,
    convRule: rule22
  }, {
    start: 7907,
    length: 1,
    convRule: rule23
  }, {
    start: 7908,
    length: 1,
    convRule: rule22
  }, {
    start: 7909,
    length: 1,
    convRule: rule23
  }, {
    start: 7910,
    length: 1,
    convRule: rule22
  }, {
    start: 7911,
    length: 1,
    convRule: rule23
  }, {
    start: 7912,
    length: 1,
    convRule: rule22
  }, {
    start: 7913,
    length: 1,
    convRule: rule23
  }, {
    start: 7914,
    length: 1,
    convRule: rule22
  }, {
    start: 7915,
    length: 1,
    convRule: rule23
  }, {
    start: 7916,
    length: 1,
    convRule: rule22
  }, {
    start: 7917,
    length: 1,
    convRule: rule23
  }, {
    start: 7918,
    length: 1,
    convRule: rule22
  }, {
    start: 7919,
    length: 1,
    convRule: rule23
  }, {
    start: 7920,
    length: 1,
    convRule: rule22
  }, {
    start: 7921,
    length: 1,
    convRule: rule23
  }, {
    start: 7922,
    length: 1,
    convRule: rule22
  }, {
    start: 7923,
    length: 1,
    convRule: rule23
  }, {
    start: 7924,
    length: 1,
    convRule: rule22
  }, {
    start: 7925,
    length: 1,
    convRule: rule23
  }, {
    start: 7926,
    length: 1,
    convRule: rule22
  }, {
    start: 7927,
    length: 1,
    convRule: rule23
  }, {
    start: 7928,
    length: 1,
    convRule: rule22
  }, {
    start: 7929,
    length: 1,
    convRule: rule23
  }, {
    start: 7930,
    length: 1,
    convRule: rule22
  }, {
    start: 7931,
    length: 1,
    convRule: rule23
  }, {
    start: 7932,
    length: 1,
    convRule: rule22
  }, {
    start: 7933,
    length: 1,
    convRule: rule23
  }, {
    start: 7934,
    length: 1,
    convRule: rule22
  }, {
    start: 7935,
    length: 1,
    convRule: rule23
  }, {
    start: 7936,
    length: 8,
    convRule: rule143
  }, {
    start: 7944,
    length: 8,
    convRule: rule144
  }, {
    start: 7952,
    length: 6,
    convRule: rule143
  }, {
    start: 7960,
    length: 6,
    convRule: rule144
  }, {
    start: 7968,
    length: 8,
    convRule: rule143
  }, {
    start: 7976,
    length: 8,
    convRule: rule144
  }, {
    start: 7984,
    length: 8,
    convRule: rule143
  }, {
    start: 7992,
    length: 8,
    convRule: rule144
  }, {
    start: 8e3,
    length: 6,
    convRule: rule143
  }, {
    start: 8008,
    length: 6,
    convRule: rule144
  }, {
    start: 8017,
    length: 1,
    convRule: rule143
  }, {
    start: 8019,
    length: 1,
    convRule: rule143
  }, {
    start: 8021,
    length: 1,
    convRule: rule143
  }, {
    start: 8023,
    length: 1,
    convRule: rule143
  }, {
    start: 8025,
    length: 1,
    convRule: rule144
  }, {
    start: 8027,
    length: 1,
    convRule: rule144
  }, {
    start: 8029,
    length: 1,
    convRule: rule144
  }, {
    start: 8031,
    length: 1,
    convRule: rule144
  }, {
    start: 8032,
    length: 8,
    convRule: rule143
  }, {
    start: 8040,
    length: 8,
    convRule: rule144
  }, {
    start: 8048,
    length: 2,
    convRule: rule145
  }, {
    start: 8050,
    length: 4,
    convRule: rule146
  }, {
    start: 8054,
    length: 2,
    convRule: rule147
  }, {
    start: 8056,
    length: 2,
    convRule: rule148
  }, {
    start: 8058,
    length: 2,
    convRule: rule149
  }, {
    start: 8060,
    length: 2,
    convRule: rule150
  }, {
    start: 8064,
    length: 8,
    convRule: rule143
  }, {
    start: 8072,
    length: 8,
    convRule: rule151
  }, {
    start: 8080,
    length: 8,
    convRule: rule143
  }, {
    start: 8088,
    length: 8,
    convRule: rule151
  }, {
    start: 8096,
    length: 8,
    convRule: rule143
  }, {
    start: 8104,
    length: 8,
    convRule: rule151
  }, {
    start: 8112,
    length: 2,
    convRule: rule143
  }, {
    start: 8115,
    length: 1,
    convRule: rule152
  }, {
    start: 8120,
    length: 2,
    convRule: rule144
  }, {
    start: 8122,
    length: 2,
    convRule: rule153
  }, {
    start: 8124,
    length: 1,
    convRule: rule154
  }, {
    start: 8126,
    length: 1,
    convRule: rule155
  }, {
    start: 8131,
    length: 1,
    convRule: rule152
  }, {
    start: 8136,
    length: 4,
    convRule: rule156
  }, {
    start: 8140,
    length: 1,
    convRule: rule154
  }, {
    start: 8144,
    length: 2,
    convRule: rule143
  }, {
    start: 8152,
    length: 2,
    convRule: rule144
  }, {
    start: 8154,
    length: 2,
    convRule: rule157
  }, {
    start: 8160,
    length: 2,
    convRule: rule143
  }, {
    start: 8165,
    length: 1,
    convRule: rule113
  }, {
    start: 8168,
    length: 2,
    convRule: rule144
  }, {
    start: 8170,
    length: 2,
    convRule: rule158
  }, {
    start: 8172,
    length: 1,
    convRule: rule117
  }, {
    start: 8179,
    length: 1,
    convRule: rule152
  }, {
    start: 8184,
    length: 2,
    convRule: rule159
  }, {
    start: 8186,
    length: 2,
    convRule: rule160
  }, {
    start: 8188,
    length: 1,
    convRule: rule154
  }, {
    start: 8486,
    length: 1,
    convRule: rule163
  }, {
    start: 8490,
    length: 1,
    convRule: rule164
  }, {
    start: 8491,
    length: 1,
    convRule: rule165
  }, {
    start: 8498,
    length: 1,
    convRule: rule166
  }, {
    start: 8526,
    length: 1,
    convRule: rule167
  }, {
    start: 8544,
    length: 16,
    convRule: rule168
  }, {
    start: 8560,
    length: 16,
    convRule: rule169
  }, {
    start: 8579,
    length: 1,
    convRule: rule22
  }, {
    start: 8580,
    length: 1,
    convRule: rule23
  }, {
    start: 9398,
    length: 26,
    convRule: rule170
  }, {
    start: 9424,
    length: 26,
    convRule: rule171
  }, {
    start: 11264,
    length: 47,
    convRule: rule122
  }, {
    start: 11312,
    length: 47,
    convRule: rule123
  }, {
    start: 11360,
    length: 1,
    convRule: rule22
  }, {
    start: 11361,
    length: 1,
    convRule: rule23
  }, {
    start: 11362,
    length: 1,
    convRule: rule172
  }, {
    start: 11363,
    length: 1,
    convRule: rule173
  }, {
    start: 11364,
    length: 1,
    convRule: rule174
  }, {
    start: 11365,
    length: 1,
    convRule: rule175
  }, {
    start: 11366,
    length: 1,
    convRule: rule176
  }, {
    start: 11367,
    length: 1,
    convRule: rule22
  }, {
    start: 11368,
    length: 1,
    convRule: rule23
  }, {
    start: 11369,
    length: 1,
    convRule: rule22
  }, {
    start: 11370,
    length: 1,
    convRule: rule23
  }, {
    start: 11371,
    length: 1,
    convRule: rule22
  }, {
    start: 11372,
    length: 1,
    convRule: rule23
  }, {
    start: 11373,
    length: 1,
    convRule: rule177
  }, {
    start: 11374,
    length: 1,
    convRule: rule178
  }, {
    start: 11375,
    length: 1,
    convRule: rule179
  }, {
    start: 11376,
    length: 1,
    convRule: rule180
  }, {
    start: 11378,
    length: 1,
    convRule: rule22
  }, {
    start: 11379,
    length: 1,
    convRule: rule23
  }, {
    start: 11381,
    length: 1,
    convRule: rule22
  }, {
    start: 11382,
    length: 1,
    convRule: rule23
  }, {
    start: 11390,
    length: 2,
    convRule: rule181
  }, {
    start: 11392,
    length: 1,
    convRule: rule22
  }, {
    start: 11393,
    length: 1,
    convRule: rule23
  }, {
    start: 11394,
    length: 1,
    convRule: rule22
  }, {
    start: 11395,
    length: 1,
    convRule: rule23
  }, {
    start: 11396,
    length: 1,
    convRule: rule22
  }, {
    start: 11397,
    length: 1,
    convRule: rule23
  }, {
    start: 11398,
    length: 1,
    convRule: rule22
  }, {
    start: 11399,
    length: 1,
    convRule: rule23
  }, {
    start: 11400,
    length: 1,
    convRule: rule22
  }, {
    start: 11401,
    length: 1,
    convRule: rule23
  }, {
    start: 11402,
    length: 1,
    convRule: rule22
  }, {
    start: 11403,
    length: 1,
    convRule: rule23
  }, {
    start: 11404,
    length: 1,
    convRule: rule22
  }, {
    start: 11405,
    length: 1,
    convRule: rule23
  }, {
    start: 11406,
    length: 1,
    convRule: rule22
  }, {
    start: 11407,
    length: 1,
    convRule: rule23
  }, {
    start: 11408,
    length: 1,
    convRule: rule22
  }, {
    start: 11409,
    length: 1,
    convRule: rule23
  }, {
    start: 11410,
    length: 1,
    convRule: rule22
  }, {
    start: 11411,
    length: 1,
    convRule: rule23
  }, {
    start: 11412,
    length: 1,
    convRule: rule22
  }, {
    start: 11413,
    length: 1,
    convRule: rule23
  }, {
    start: 11414,
    length: 1,
    convRule: rule22
  }, {
    start: 11415,
    length: 1,
    convRule: rule23
  }, {
    start: 11416,
    length: 1,
    convRule: rule22
  }, {
    start: 11417,
    length: 1,
    convRule: rule23
  }, {
    start: 11418,
    length: 1,
    convRule: rule22
  }, {
    start: 11419,
    length: 1,
    convRule: rule23
  }, {
    start: 11420,
    length: 1,
    convRule: rule22
  }, {
    start: 11421,
    length: 1,
    convRule: rule23
  }, {
    start: 11422,
    length: 1,
    convRule: rule22
  }, {
    start: 11423,
    length: 1,
    convRule: rule23
  }, {
    start: 11424,
    length: 1,
    convRule: rule22
  }, {
    start: 11425,
    length: 1,
    convRule: rule23
  }, {
    start: 11426,
    length: 1,
    convRule: rule22
  }, {
    start: 11427,
    length: 1,
    convRule: rule23
  }, {
    start: 11428,
    length: 1,
    convRule: rule22
  }, {
    start: 11429,
    length: 1,
    convRule: rule23
  }, {
    start: 11430,
    length: 1,
    convRule: rule22
  }, {
    start: 11431,
    length: 1,
    convRule: rule23
  }, {
    start: 11432,
    length: 1,
    convRule: rule22
  }, {
    start: 11433,
    length: 1,
    convRule: rule23
  }, {
    start: 11434,
    length: 1,
    convRule: rule22
  }, {
    start: 11435,
    length: 1,
    convRule: rule23
  }, {
    start: 11436,
    length: 1,
    convRule: rule22
  }, {
    start: 11437,
    length: 1,
    convRule: rule23
  }, {
    start: 11438,
    length: 1,
    convRule: rule22
  }, {
    start: 11439,
    length: 1,
    convRule: rule23
  }, {
    start: 11440,
    length: 1,
    convRule: rule22
  }, {
    start: 11441,
    length: 1,
    convRule: rule23
  }, {
    start: 11442,
    length: 1,
    convRule: rule22
  }, {
    start: 11443,
    length: 1,
    convRule: rule23
  }, {
    start: 11444,
    length: 1,
    convRule: rule22
  }, {
    start: 11445,
    length: 1,
    convRule: rule23
  }, {
    start: 11446,
    length: 1,
    convRule: rule22
  }, {
    start: 11447,
    length: 1,
    convRule: rule23
  }, {
    start: 11448,
    length: 1,
    convRule: rule22
  }, {
    start: 11449,
    length: 1,
    convRule: rule23
  }, {
    start: 11450,
    length: 1,
    convRule: rule22
  }, {
    start: 11451,
    length: 1,
    convRule: rule23
  }, {
    start: 11452,
    length: 1,
    convRule: rule22
  }, {
    start: 11453,
    length: 1,
    convRule: rule23
  }, {
    start: 11454,
    length: 1,
    convRule: rule22
  }, {
    start: 11455,
    length: 1,
    convRule: rule23
  }, {
    start: 11456,
    length: 1,
    convRule: rule22
  }, {
    start: 11457,
    length: 1,
    convRule: rule23
  }, {
    start: 11458,
    length: 1,
    convRule: rule22
  }, {
    start: 11459,
    length: 1,
    convRule: rule23
  }, {
    start: 11460,
    length: 1,
    convRule: rule22
  }, {
    start: 11461,
    length: 1,
    convRule: rule23
  }, {
    start: 11462,
    length: 1,
    convRule: rule22
  }, {
    start: 11463,
    length: 1,
    convRule: rule23
  }, {
    start: 11464,
    length: 1,
    convRule: rule22
  }, {
    start: 11465,
    length: 1,
    convRule: rule23
  }, {
    start: 11466,
    length: 1,
    convRule: rule22
  }, {
    start: 11467,
    length: 1,
    convRule: rule23
  }, {
    start: 11468,
    length: 1,
    convRule: rule22
  }, {
    start: 11469,
    length: 1,
    convRule: rule23
  }, {
    start: 11470,
    length: 1,
    convRule: rule22
  }, {
    start: 11471,
    length: 1,
    convRule: rule23
  }, {
    start: 11472,
    length: 1,
    convRule: rule22
  }, {
    start: 11473,
    length: 1,
    convRule: rule23
  }, {
    start: 11474,
    length: 1,
    convRule: rule22
  }, {
    start: 11475,
    length: 1,
    convRule: rule23
  }, {
    start: 11476,
    length: 1,
    convRule: rule22
  }, {
    start: 11477,
    length: 1,
    convRule: rule23
  }, {
    start: 11478,
    length: 1,
    convRule: rule22
  }, {
    start: 11479,
    length: 1,
    convRule: rule23
  }, {
    start: 11480,
    length: 1,
    convRule: rule22
  }, {
    start: 11481,
    length: 1,
    convRule: rule23
  }, {
    start: 11482,
    length: 1,
    convRule: rule22
  }, {
    start: 11483,
    length: 1,
    convRule: rule23
  }, {
    start: 11484,
    length: 1,
    convRule: rule22
  }, {
    start: 11485,
    length: 1,
    convRule: rule23
  }, {
    start: 11486,
    length: 1,
    convRule: rule22
  }, {
    start: 11487,
    length: 1,
    convRule: rule23
  }, {
    start: 11488,
    length: 1,
    convRule: rule22
  }, {
    start: 11489,
    length: 1,
    convRule: rule23
  }, {
    start: 11490,
    length: 1,
    convRule: rule22
  }, {
    start: 11491,
    length: 1,
    convRule: rule23
  }, {
    start: 11499,
    length: 1,
    convRule: rule22
  }, {
    start: 11500,
    length: 1,
    convRule: rule23
  }, {
    start: 11501,
    length: 1,
    convRule: rule22
  }, {
    start: 11502,
    length: 1,
    convRule: rule23
  }, {
    start: 11506,
    length: 1,
    convRule: rule22
  }, {
    start: 11507,
    length: 1,
    convRule: rule23
  }, {
    start: 11520,
    length: 38,
    convRule: rule182
  }, {
    start: 11559,
    length: 1,
    convRule: rule182
  }, {
    start: 11565,
    length: 1,
    convRule: rule182
  }, {
    start: 42560,
    length: 1,
    convRule: rule22
  }, {
    start: 42561,
    length: 1,
    convRule: rule23
  }, {
    start: 42562,
    length: 1,
    convRule: rule22
  }, {
    start: 42563,
    length: 1,
    convRule: rule23
  }, {
    start: 42564,
    length: 1,
    convRule: rule22
  }, {
    start: 42565,
    length: 1,
    convRule: rule23
  }, {
    start: 42566,
    length: 1,
    convRule: rule22
  }, {
    start: 42567,
    length: 1,
    convRule: rule23
  }, {
    start: 42568,
    length: 1,
    convRule: rule22
  }, {
    start: 42569,
    length: 1,
    convRule: rule23
  }, {
    start: 42570,
    length: 1,
    convRule: rule22
  }, {
    start: 42571,
    length: 1,
    convRule: rule23
  }, {
    start: 42572,
    length: 1,
    convRule: rule22
  }, {
    start: 42573,
    length: 1,
    convRule: rule23
  }, {
    start: 42574,
    length: 1,
    convRule: rule22
  }, {
    start: 42575,
    length: 1,
    convRule: rule23
  }, {
    start: 42576,
    length: 1,
    convRule: rule22
  }, {
    start: 42577,
    length: 1,
    convRule: rule23
  }, {
    start: 42578,
    length: 1,
    convRule: rule22
  }, {
    start: 42579,
    length: 1,
    convRule: rule23
  }, {
    start: 42580,
    length: 1,
    convRule: rule22
  }, {
    start: 42581,
    length: 1,
    convRule: rule23
  }, {
    start: 42582,
    length: 1,
    convRule: rule22
  }, {
    start: 42583,
    length: 1,
    convRule: rule23
  }, {
    start: 42584,
    length: 1,
    convRule: rule22
  }, {
    start: 42585,
    length: 1,
    convRule: rule23
  }, {
    start: 42586,
    length: 1,
    convRule: rule22
  }, {
    start: 42587,
    length: 1,
    convRule: rule23
  }, {
    start: 42588,
    length: 1,
    convRule: rule22
  }, {
    start: 42589,
    length: 1,
    convRule: rule23
  }, {
    start: 42590,
    length: 1,
    convRule: rule22
  }, {
    start: 42591,
    length: 1,
    convRule: rule23
  }, {
    start: 42592,
    length: 1,
    convRule: rule22
  }, {
    start: 42593,
    length: 1,
    convRule: rule23
  }, {
    start: 42594,
    length: 1,
    convRule: rule22
  }, {
    start: 42595,
    length: 1,
    convRule: rule23
  }, {
    start: 42596,
    length: 1,
    convRule: rule22
  }, {
    start: 42597,
    length: 1,
    convRule: rule23
  }, {
    start: 42598,
    length: 1,
    convRule: rule22
  }, {
    start: 42599,
    length: 1,
    convRule: rule23
  }, {
    start: 42600,
    length: 1,
    convRule: rule22
  }, {
    start: 42601,
    length: 1,
    convRule: rule23
  }, {
    start: 42602,
    length: 1,
    convRule: rule22
  }, {
    start: 42603,
    length: 1,
    convRule: rule23
  }, {
    start: 42604,
    length: 1,
    convRule: rule22
  }, {
    start: 42605,
    length: 1,
    convRule: rule23
  }, {
    start: 42624,
    length: 1,
    convRule: rule22
  }, {
    start: 42625,
    length: 1,
    convRule: rule23
  }, {
    start: 42626,
    length: 1,
    convRule: rule22
  }, {
    start: 42627,
    length: 1,
    convRule: rule23
  }, {
    start: 42628,
    length: 1,
    convRule: rule22
  }, {
    start: 42629,
    length: 1,
    convRule: rule23
  }, {
    start: 42630,
    length: 1,
    convRule: rule22
  }, {
    start: 42631,
    length: 1,
    convRule: rule23
  }, {
    start: 42632,
    length: 1,
    convRule: rule22
  }, {
    start: 42633,
    length: 1,
    convRule: rule23
  }, {
    start: 42634,
    length: 1,
    convRule: rule22
  }, {
    start: 42635,
    length: 1,
    convRule: rule23
  }, {
    start: 42636,
    length: 1,
    convRule: rule22
  }, {
    start: 42637,
    length: 1,
    convRule: rule23
  }, {
    start: 42638,
    length: 1,
    convRule: rule22
  }, {
    start: 42639,
    length: 1,
    convRule: rule23
  }, {
    start: 42640,
    length: 1,
    convRule: rule22
  }, {
    start: 42641,
    length: 1,
    convRule: rule23
  }, {
    start: 42642,
    length: 1,
    convRule: rule22
  }, {
    start: 42643,
    length: 1,
    convRule: rule23
  }, {
    start: 42644,
    length: 1,
    convRule: rule22
  }, {
    start: 42645,
    length: 1,
    convRule: rule23
  }, {
    start: 42646,
    length: 1,
    convRule: rule22
  }, {
    start: 42647,
    length: 1,
    convRule: rule23
  }, {
    start: 42648,
    length: 1,
    convRule: rule22
  }, {
    start: 42649,
    length: 1,
    convRule: rule23
  }, {
    start: 42650,
    length: 1,
    convRule: rule22
  }, {
    start: 42651,
    length: 1,
    convRule: rule23
  }, {
    start: 42786,
    length: 1,
    convRule: rule22
  }, {
    start: 42787,
    length: 1,
    convRule: rule23
  }, {
    start: 42788,
    length: 1,
    convRule: rule22
  }, {
    start: 42789,
    length: 1,
    convRule: rule23
  }, {
    start: 42790,
    length: 1,
    convRule: rule22
  }, {
    start: 42791,
    length: 1,
    convRule: rule23
  }, {
    start: 42792,
    length: 1,
    convRule: rule22
  }, {
    start: 42793,
    length: 1,
    convRule: rule23
  }, {
    start: 42794,
    length: 1,
    convRule: rule22
  }, {
    start: 42795,
    length: 1,
    convRule: rule23
  }, {
    start: 42796,
    length: 1,
    convRule: rule22
  }, {
    start: 42797,
    length: 1,
    convRule: rule23
  }, {
    start: 42798,
    length: 1,
    convRule: rule22
  }, {
    start: 42799,
    length: 1,
    convRule: rule23
  }, {
    start: 42802,
    length: 1,
    convRule: rule22
  }, {
    start: 42803,
    length: 1,
    convRule: rule23
  }, {
    start: 42804,
    length: 1,
    convRule: rule22
  }, {
    start: 42805,
    length: 1,
    convRule: rule23
  }, {
    start: 42806,
    length: 1,
    convRule: rule22
  }, {
    start: 42807,
    length: 1,
    convRule: rule23
  }, {
    start: 42808,
    length: 1,
    convRule: rule22
  }, {
    start: 42809,
    length: 1,
    convRule: rule23
  }, {
    start: 42810,
    length: 1,
    convRule: rule22
  }, {
    start: 42811,
    length: 1,
    convRule: rule23
  }, {
    start: 42812,
    length: 1,
    convRule: rule22
  }, {
    start: 42813,
    length: 1,
    convRule: rule23
  }, {
    start: 42814,
    length: 1,
    convRule: rule22
  }, {
    start: 42815,
    length: 1,
    convRule: rule23
  }, {
    start: 42816,
    length: 1,
    convRule: rule22
  }, {
    start: 42817,
    length: 1,
    convRule: rule23
  }, {
    start: 42818,
    length: 1,
    convRule: rule22
  }, {
    start: 42819,
    length: 1,
    convRule: rule23
  }, {
    start: 42820,
    length: 1,
    convRule: rule22
  }, {
    start: 42821,
    length: 1,
    convRule: rule23
  }, {
    start: 42822,
    length: 1,
    convRule: rule22
  }, {
    start: 42823,
    length: 1,
    convRule: rule23
  }, {
    start: 42824,
    length: 1,
    convRule: rule22
  }, {
    start: 42825,
    length: 1,
    convRule: rule23
  }, {
    start: 42826,
    length: 1,
    convRule: rule22
  }, {
    start: 42827,
    length: 1,
    convRule: rule23
  }, {
    start: 42828,
    length: 1,
    convRule: rule22
  }, {
    start: 42829,
    length: 1,
    convRule: rule23
  }, {
    start: 42830,
    length: 1,
    convRule: rule22
  }, {
    start: 42831,
    length: 1,
    convRule: rule23
  }, {
    start: 42832,
    length: 1,
    convRule: rule22
  }, {
    start: 42833,
    length: 1,
    convRule: rule23
  }, {
    start: 42834,
    length: 1,
    convRule: rule22
  }, {
    start: 42835,
    length: 1,
    convRule: rule23
  }, {
    start: 42836,
    length: 1,
    convRule: rule22
  }, {
    start: 42837,
    length: 1,
    convRule: rule23
  }, {
    start: 42838,
    length: 1,
    convRule: rule22
  }, {
    start: 42839,
    length: 1,
    convRule: rule23
  }, {
    start: 42840,
    length: 1,
    convRule: rule22
  }, {
    start: 42841,
    length: 1,
    convRule: rule23
  }, {
    start: 42842,
    length: 1,
    convRule: rule22
  }, {
    start: 42843,
    length: 1,
    convRule: rule23
  }, {
    start: 42844,
    length: 1,
    convRule: rule22
  }, {
    start: 42845,
    length: 1,
    convRule: rule23
  }, {
    start: 42846,
    length: 1,
    convRule: rule22
  }, {
    start: 42847,
    length: 1,
    convRule: rule23
  }, {
    start: 42848,
    length: 1,
    convRule: rule22
  }, {
    start: 42849,
    length: 1,
    convRule: rule23
  }, {
    start: 42850,
    length: 1,
    convRule: rule22
  }, {
    start: 42851,
    length: 1,
    convRule: rule23
  }, {
    start: 42852,
    length: 1,
    convRule: rule22
  }, {
    start: 42853,
    length: 1,
    convRule: rule23
  }, {
    start: 42854,
    length: 1,
    convRule: rule22
  }, {
    start: 42855,
    length: 1,
    convRule: rule23
  }, {
    start: 42856,
    length: 1,
    convRule: rule22
  }, {
    start: 42857,
    length: 1,
    convRule: rule23
  }, {
    start: 42858,
    length: 1,
    convRule: rule22
  }, {
    start: 42859,
    length: 1,
    convRule: rule23
  }, {
    start: 42860,
    length: 1,
    convRule: rule22
  }, {
    start: 42861,
    length: 1,
    convRule: rule23
  }, {
    start: 42862,
    length: 1,
    convRule: rule22
  }, {
    start: 42863,
    length: 1,
    convRule: rule23
  }, {
    start: 42873,
    length: 1,
    convRule: rule22
  }, {
    start: 42874,
    length: 1,
    convRule: rule23
  }, {
    start: 42875,
    length: 1,
    convRule: rule22
  }, {
    start: 42876,
    length: 1,
    convRule: rule23
  }, {
    start: 42877,
    length: 1,
    convRule: rule183
  }, {
    start: 42878,
    length: 1,
    convRule: rule22
  }, {
    start: 42879,
    length: 1,
    convRule: rule23
  }, {
    start: 42880,
    length: 1,
    convRule: rule22
  }, {
    start: 42881,
    length: 1,
    convRule: rule23
  }, {
    start: 42882,
    length: 1,
    convRule: rule22
  }, {
    start: 42883,
    length: 1,
    convRule: rule23
  }, {
    start: 42884,
    length: 1,
    convRule: rule22
  }, {
    start: 42885,
    length: 1,
    convRule: rule23
  }, {
    start: 42886,
    length: 1,
    convRule: rule22
  }, {
    start: 42887,
    length: 1,
    convRule: rule23
  }, {
    start: 42891,
    length: 1,
    convRule: rule22
  }, {
    start: 42892,
    length: 1,
    convRule: rule23
  }, {
    start: 42893,
    length: 1,
    convRule: rule184
  }, {
    start: 42896,
    length: 1,
    convRule: rule22
  }, {
    start: 42897,
    length: 1,
    convRule: rule23
  }, {
    start: 42898,
    length: 1,
    convRule: rule22
  }, {
    start: 42899,
    length: 1,
    convRule: rule23
  }, {
    start: 42900,
    length: 1,
    convRule: rule185
  }, {
    start: 42902,
    length: 1,
    convRule: rule22
  }, {
    start: 42903,
    length: 1,
    convRule: rule23
  }, {
    start: 42904,
    length: 1,
    convRule: rule22
  }, {
    start: 42905,
    length: 1,
    convRule: rule23
  }, {
    start: 42906,
    length: 1,
    convRule: rule22
  }, {
    start: 42907,
    length: 1,
    convRule: rule23
  }, {
    start: 42908,
    length: 1,
    convRule: rule22
  }, {
    start: 42909,
    length: 1,
    convRule: rule23
  }, {
    start: 42910,
    length: 1,
    convRule: rule22
  }, {
    start: 42911,
    length: 1,
    convRule: rule23
  }, {
    start: 42912,
    length: 1,
    convRule: rule22
  }, {
    start: 42913,
    length: 1,
    convRule: rule23
  }, {
    start: 42914,
    length: 1,
    convRule: rule22
  }, {
    start: 42915,
    length: 1,
    convRule: rule23
  }, {
    start: 42916,
    length: 1,
    convRule: rule22
  }, {
    start: 42917,
    length: 1,
    convRule: rule23
  }, {
    start: 42918,
    length: 1,
    convRule: rule22
  }, {
    start: 42919,
    length: 1,
    convRule: rule23
  }, {
    start: 42920,
    length: 1,
    convRule: rule22
  }, {
    start: 42921,
    length: 1,
    convRule: rule23
  }, {
    start: 42922,
    length: 1,
    convRule: rule186
  }, {
    start: 42923,
    length: 1,
    convRule: rule187
  }, {
    start: 42924,
    length: 1,
    convRule: rule188
  }, {
    start: 42925,
    length: 1,
    convRule: rule189
  }, {
    start: 42926,
    length: 1,
    convRule: rule186
  }, {
    start: 42928,
    length: 1,
    convRule: rule190
  }, {
    start: 42929,
    length: 1,
    convRule: rule191
  }, {
    start: 42930,
    length: 1,
    convRule: rule192
  }, {
    start: 42931,
    length: 1,
    convRule: rule193
  }, {
    start: 42932,
    length: 1,
    convRule: rule22
  }, {
    start: 42933,
    length: 1,
    convRule: rule23
  }, {
    start: 42934,
    length: 1,
    convRule: rule22
  }, {
    start: 42935,
    length: 1,
    convRule: rule23
  }, {
    start: 42936,
    length: 1,
    convRule: rule22
  }, {
    start: 42937,
    length: 1,
    convRule: rule23
  }, {
    start: 42938,
    length: 1,
    convRule: rule22
  }, {
    start: 42939,
    length: 1,
    convRule: rule23
  }, {
    start: 42940,
    length: 1,
    convRule: rule22
  }, {
    start: 42941,
    length: 1,
    convRule: rule23
  }, {
    start: 42942,
    length: 1,
    convRule: rule22
  }, {
    start: 42943,
    length: 1,
    convRule: rule23
  }, {
    start: 42946,
    length: 1,
    convRule: rule22
  }, {
    start: 42947,
    length: 1,
    convRule: rule23
  }, {
    start: 42948,
    length: 1,
    convRule: rule194
  }, {
    start: 42949,
    length: 1,
    convRule: rule195
  }, {
    start: 42950,
    length: 1,
    convRule: rule196
  }, {
    start: 42951,
    length: 1,
    convRule: rule22
  }, {
    start: 42952,
    length: 1,
    convRule: rule23
  }, {
    start: 42953,
    length: 1,
    convRule: rule22
  }, {
    start: 42954,
    length: 1,
    convRule: rule23
  }, {
    start: 42997,
    length: 1,
    convRule: rule22
  }, {
    start: 42998,
    length: 1,
    convRule: rule23
  }, {
    start: 43859,
    length: 1,
    convRule: rule197
  }, {
    start: 43888,
    length: 80,
    convRule: rule198
  }, {
    start: 65313,
    length: 26,
    convRule: rule9
  }, {
    start: 65345,
    length: 26,
    convRule: rule12
  }, {
    start: 66560,
    length: 40,
    convRule: rule201
  }, {
    start: 66600,
    length: 40,
    convRule: rule202
  }, {
    start: 66736,
    length: 36,
    convRule: rule201
  }, {
    start: 66776,
    length: 36,
    convRule: rule202
  }, {
    start: 68736,
    length: 51,
    convRule: rule97
  }, {
    start: 68800,
    length: 51,
    convRule: rule102
  }, {
    start: 71840,
    length: 32,
    convRule: rule9
  }, {
    start: 71872,
    length: 32,
    convRule: rule12
  }, {
    start: 93760,
    length: 32,
    convRule: rule9
  }, {
    start: 93792,
    length: 32,
    convRule: rule12
  }, {
    start: 125184,
    length: 34,
    convRule: rule203
  }, {
    start: 125218,
    length: 34,
    convRule: rule204
  }];
  var bsearch = function(a4) {
    return function(array) {
      return function(size5) {
        return function(compare4) {
          var go2 = function($copy_i) {
            return function($copy_k) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i7, k2) {
                if (i7 > k2 || i7 >= length(array)) {
                  $tco_done = true;
                  return Nothing.value;
                }
                ;
                if (otherwise) {
                  var j2 = floor2(toNumber(i7 + k2 | 0) / 2);
                  var b4 = unsafeIndex2(array)(j2);
                  var v2 = compare4(a4)(b4);
                  if (v2 instanceof EQ) {
                    $tco_done = true;
                    return new Just(b4);
                  }
                  ;
                  if (v2 instanceof GT) {
                    $tco_var_i = j2 + 1 | 0;
                    $copy_k = k2;
                    return;
                  }
                  ;
                  $tco_var_i = i7;
                  $copy_k = j2 - 1 | 0;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5622, column 3 - line 5632, column 30): " + [i7.constructor.name, k2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_k);
              }
              ;
              return $tco_result;
            };
          };
          return go2(0)(size5);
        };
      };
    };
  };
  var blkCmp = function(v2) {
    return function(v1) {
      if (v2.start >= v1.start && v2.start < (v1.start + v1.length | 0)) {
        return EQ.value;
      }
      ;
      if (v2.start > v1.start) {
        return GT.value;
      }
      ;
      if (otherwise) {
        return LT.value;
      }
      ;
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5598, column 1 - line 5598, column 45): " + [v2.constructor.name, v1.constructor.name]);
    };
  };
  var getRule = function(blocks) {
    return function(unichar) {
      return function(size5) {
        var key = {
          start: unichar,
          length: 1,
          convRule: nullrule
        };
        var maybeCharBlock = bsearch(key)(blocks)(size5)(blkCmp);
        if (maybeCharBlock instanceof Nothing) {
          return Nothing.value;
        }
        ;
        if (maybeCharBlock instanceof Just) {
          return new Just(maybeCharBlock.value0.convRule);
        }
        ;
        throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5612, column 5 - line 5614, column 60): " + [maybeCharBlock.constructor.name]);
      };
    };
  };
  var caseConv = function(f2) {
    return function($$char) {
      var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
      if (maybeConversionRule instanceof Nothing) {
        return $$char;
      }
      ;
      if (maybeConversionRule instanceof Just) {
        return $$char + f2(maybeConversionRule.value0) | 0;
      }
      ;
      throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal (line 5727, column 5 - line 5729, column 53): " + [maybeConversionRule.constructor.name]);
    };
  };
  var uTowlower = /* @__PURE__ */ caseConv(function(v2) {
    return v2.lowdist;
  });

  // output/Data.CodePoint.Unicode.Internal.Casing/index.js
  var compare2 = /* @__PURE__ */ compare(ordInt);
  var zeroRec = function(code3) {
    return {
      code: code3,
      lower: [],
      title: [],
      upper: [],
      fold: 0,
      foldFull: []
    };
  };
  var rules = [{
    code: 65,
    lower: [],
    title: [],
    upper: [],
    fold: 97,
    foldFull: [97]
  }, {
    code: 66,
    lower: [],
    title: [],
    upper: [],
    fold: 98,
    foldFull: [98]
  }, {
    code: 67,
    lower: [],
    title: [],
    upper: [],
    fold: 99,
    foldFull: [99]
  }, {
    code: 68,
    lower: [],
    title: [],
    upper: [],
    fold: 100,
    foldFull: [100]
  }, {
    code: 69,
    lower: [],
    title: [],
    upper: [],
    fold: 101,
    foldFull: [101]
  }, {
    code: 70,
    lower: [],
    title: [],
    upper: [],
    fold: 102,
    foldFull: [102]
  }, {
    code: 71,
    lower: [],
    title: [],
    upper: [],
    fold: 103,
    foldFull: [103]
  }, {
    code: 72,
    lower: [],
    title: [],
    upper: [],
    fold: 104,
    foldFull: [104]
  }, {
    code: 73,
    lower: [],
    title: [],
    upper: [],
    fold: 105,
    foldFull: [105]
  }, {
    code: 74,
    lower: [],
    title: [],
    upper: [],
    fold: 106,
    foldFull: [106]
  }, {
    code: 75,
    lower: [],
    title: [],
    upper: [],
    fold: 107,
    foldFull: [107]
  }, {
    code: 76,
    lower: [],
    title: [],
    upper: [],
    fold: 108,
    foldFull: [108]
  }, {
    code: 77,
    lower: [],
    title: [],
    upper: [],
    fold: 109,
    foldFull: [109]
  }, {
    code: 78,
    lower: [],
    title: [],
    upper: [],
    fold: 110,
    foldFull: [110]
  }, {
    code: 79,
    lower: [],
    title: [],
    upper: [],
    fold: 111,
    foldFull: [111]
  }, {
    code: 80,
    lower: [],
    title: [],
    upper: [],
    fold: 112,
    foldFull: [112]
  }, {
    code: 81,
    lower: [],
    title: [],
    upper: [],
    fold: 113,
    foldFull: [113]
  }, {
    code: 82,
    lower: [],
    title: [],
    upper: [],
    fold: 114,
    foldFull: [114]
  }, {
    code: 83,
    lower: [],
    title: [],
    upper: [],
    fold: 115,
    foldFull: [115]
  }, {
    code: 84,
    lower: [],
    title: [],
    upper: [],
    fold: 116,
    foldFull: [116]
  }, {
    code: 85,
    lower: [],
    title: [],
    upper: [],
    fold: 117,
    foldFull: [117]
  }, {
    code: 86,
    lower: [],
    title: [],
    upper: [],
    fold: 118,
    foldFull: [118]
  }, {
    code: 87,
    lower: [],
    title: [],
    upper: [],
    fold: 119,
    foldFull: [119]
  }, {
    code: 88,
    lower: [],
    title: [],
    upper: [],
    fold: 120,
    foldFull: [120]
  }, {
    code: 89,
    lower: [],
    title: [],
    upper: [],
    fold: 121,
    foldFull: [121]
  }, {
    code: 90,
    lower: [],
    title: [],
    upper: [],
    fold: 122,
    foldFull: [122]
  }, {
    code: 181,
    lower: [],
    title: [],
    upper: [],
    fold: 956,
    foldFull: [956]
  }, {
    code: 192,
    lower: [],
    title: [],
    upper: [],
    fold: 224,
    foldFull: [224]
  }, {
    code: 193,
    lower: [],
    title: [],
    upper: [],
    fold: 225,
    foldFull: [225]
  }, {
    code: 194,
    lower: [],
    title: [],
    upper: [],
    fold: 226,
    foldFull: [226]
  }, {
    code: 195,
    lower: [],
    title: [],
    upper: [],
    fold: 227,
    foldFull: [227]
  }, {
    code: 196,
    lower: [],
    title: [],
    upper: [],
    fold: 228,
    foldFull: [228]
  }, {
    code: 197,
    lower: [],
    title: [],
    upper: [],
    fold: 229,
    foldFull: [229]
  }, {
    code: 198,
    lower: [],
    title: [],
    upper: [],
    fold: 230,
    foldFull: [230]
  }, {
    code: 199,
    lower: [],
    title: [],
    upper: [],
    fold: 231,
    foldFull: [231]
  }, {
    code: 200,
    lower: [],
    title: [],
    upper: [],
    fold: 232,
    foldFull: [232]
  }, {
    code: 201,
    lower: [],
    title: [],
    upper: [],
    fold: 233,
    foldFull: [233]
  }, {
    code: 202,
    lower: [],
    title: [],
    upper: [],
    fold: 234,
    foldFull: [234]
  }, {
    code: 203,
    lower: [],
    title: [],
    upper: [],
    fold: 235,
    foldFull: [235]
  }, {
    code: 204,
    lower: [],
    title: [],
    upper: [],
    fold: 236,
    foldFull: [236]
  }, {
    code: 205,
    lower: [],
    title: [],
    upper: [],
    fold: 237,
    foldFull: [237]
  }, {
    code: 206,
    lower: [],
    title: [],
    upper: [],
    fold: 238,
    foldFull: [238]
  }, {
    code: 207,
    lower: [],
    title: [],
    upper: [],
    fold: 239,
    foldFull: [239]
  }, {
    code: 208,
    lower: [],
    title: [],
    upper: [],
    fold: 240,
    foldFull: [240]
  }, {
    code: 209,
    lower: [],
    title: [],
    upper: [],
    fold: 241,
    foldFull: [241]
  }, {
    code: 210,
    lower: [],
    title: [],
    upper: [],
    fold: 242,
    foldFull: [242]
  }, {
    code: 211,
    lower: [],
    title: [],
    upper: [],
    fold: 243,
    foldFull: [243]
  }, {
    code: 212,
    lower: [],
    title: [],
    upper: [],
    fold: 244,
    foldFull: [244]
  }, {
    code: 213,
    lower: [],
    title: [],
    upper: [],
    fold: 245,
    foldFull: [245]
  }, {
    code: 214,
    lower: [],
    title: [],
    upper: [],
    fold: 246,
    foldFull: [246]
  }, {
    code: 216,
    lower: [],
    title: [],
    upper: [],
    fold: 248,
    foldFull: [248]
  }, {
    code: 217,
    lower: [],
    title: [],
    upper: [],
    fold: 249,
    foldFull: [249]
  }, {
    code: 218,
    lower: [],
    title: [],
    upper: [],
    fold: 250,
    foldFull: [250]
  }, {
    code: 219,
    lower: [],
    title: [],
    upper: [],
    fold: 251,
    foldFull: [251]
  }, {
    code: 220,
    lower: [],
    title: [],
    upper: [],
    fold: 252,
    foldFull: [252]
  }, {
    code: 221,
    lower: [],
    title: [],
    upper: [],
    fold: 253,
    foldFull: [253]
  }, {
    code: 222,
    lower: [],
    title: [],
    upper: [],
    fold: 254,
    foldFull: [254]
  }, {
    code: 223,
    lower: [223],
    title: [83, 115],
    upper: [83, 83],
    fold: 0,
    foldFull: [115, 115]
  }, {
    code: 223,
    lower: [223],
    title: [83, 115],
    upper: [83, 83],
    fold: 0,
    foldFull: [115, 115]
  }, {
    code: 256,
    lower: [],
    title: [],
    upper: [],
    fold: 257,
    foldFull: [257]
  }, {
    code: 258,
    lower: [],
    title: [],
    upper: [],
    fold: 259,
    foldFull: [259]
  }, {
    code: 260,
    lower: [],
    title: [],
    upper: [],
    fold: 261,
    foldFull: [261]
  }, {
    code: 262,
    lower: [],
    title: [],
    upper: [],
    fold: 263,
    foldFull: [263]
  }, {
    code: 264,
    lower: [],
    title: [],
    upper: [],
    fold: 265,
    foldFull: [265]
  }, {
    code: 266,
    lower: [],
    title: [],
    upper: [],
    fold: 267,
    foldFull: [267]
  }, {
    code: 268,
    lower: [],
    title: [],
    upper: [],
    fold: 269,
    foldFull: [269]
  }, {
    code: 270,
    lower: [],
    title: [],
    upper: [],
    fold: 271,
    foldFull: [271]
  }, {
    code: 272,
    lower: [],
    title: [],
    upper: [],
    fold: 273,
    foldFull: [273]
  }, {
    code: 274,
    lower: [],
    title: [],
    upper: [],
    fold: 275,
    foldFull: [275]
  }, {
    code: 276,
    lower: [],
    title: [],
    upper: [],
    fold: 277,
    foldFull: [277]
  }, {
    code: 278,
    lower: [],
    title: [],
    upper: [],
    fold: 279,
    foldFull: [279]
  }, {
    code: 280,
    lower: [],
    title: [],
    upper: [],
    fold: 281,
    foldFull: [281]
  }, {
    code: 282,
    lower: [],
    title: [],
    upper: [],
    fold: 283,
    foldFull: [283]
  }, {
    code: 284,
    lower: [],
    title: [],
    upper: [],
    fold: 285,
    foldFull: [285]
  }, {
    code: 286,
    lower: [],
    title: [],
    upper: [],
    fold: 287,
    foldFull: [287]
  }, {
    code: 288,
    lower: [],
    title: [],
    upper: [],
    fold: 289,
    foldFull: [289]
  }, {
    code: 290,
    lower: [],
    title: [],
    upper: [],
    fold: 291,
    foldFull: [291]
  }, {
    code: 292,
    lower: [],
    title: [],
    upper: [],
    fold: 293,
    foldFull: [293]
  }, {
    code: 294,
    lower: [],
    title: [],
    upper: [],
    fold: 295,
    foldFull: [295]
  }, {
    code: 296,
    lower: [],
    title: [],
    upper: [],
    fold: 297,
    foldFull: [297]
  }, {
    code: 298,
    lower: [],
    title: [],
    upper: [],
    fold: 299,
    foldFull: [299]
  }, {
    code: 300,
    lower: [],
    title: [],
    upper: [],
    fold: 301,
    foldFull: [301]
  }, {
    code: 302,
    lower: [],
    title: [],
    upper: [],
    fold: 303,
    foldFull: [303]
  }, {
    code: 304,
    lower: [105, 775],
    title: [304],
    upper: [304],
    fold: 0,
    foldFull: [105, 775]
  }, {
    code: 304,
    lower: [105, 775],
    title: [304],
    upper: [304],
    fold: 0,
    foldFull: [105, 775]
  }, {
    code: 306,
    lower: [],
    title: [],
    upper: [],
    fold: 307,
    foldFull: [307]
  }, {
    code: 308,
    lower: [],
    title: [],
    upper: [],
    fold: 309,
    foldFull: [309]
  }, {
    code: 310,
    lower: [],
    title: [],
    upper: [],
    fold: 311,
    foldFull: [311]
  }, {
    code: 313,
    lower: [],
    title: [],
    upper: [],
    fold: 314,
    foldFull: [314]
  }, {
    code: 315,
    lower: [],
    title: [],
    upper: [],
    fold: 316,
    foldFull: [316]
  }, {
    code: 317,
    lower: [],
    title: [],
    upper: [],
    fold: 318,
    foldFull: [318]
  }, {
    code: 319,
    lower: [],
    title: [],
    upper: [],
    fold: 320,
    foldFull: [320]
  }, {
    code: 321,
    lower: [],
    title: [],
    upper: [],
    fold: 322,
    foldFull: [322]
  }, {
    code: 323,
    lower: [],
    title: [],
    upper: [],
    fold: 324,
    foldFull: [324]
  }, {
    code: 325,
    lower: [],
    title: [],
    upper: [],
    fold: 326,
    foldFull: [326]
  }, {
    code: 327,
    lower: [],
    title: [],
    upper: [],
    fold: 328,
    foldFull: [328]
  }, {
    code: 329,
    lower: [329],
    title: [700, 78],
    upper: [700, 78],
    fold: 0,
    foldFull: [700, 110]
  }, {
    code: 329,
    lower: [329],
    title: [700, 78],
    upper: [700, 78],
    fold: 0,
    foldFull: [700, 110]
  }, {
    code: 330,
    lower: [],
    title: [],
    upper: [],
    fold: 331,
    foldFull: [331]
  }, {
    code: 332,
    lower: [],
    title: [],
    upper: [],
    fold: 333,
    foldFull: [333]
  }, {
    code: 334,
    lower: [],
    title: [],
    upper: [],
    fold: 335,
    foldFull: [335]
  }, {
    code: 336,
    lower: [],
    title: [],
    upper: [],
    fold: 337,
    foldFull: [337]
  }, {
    code: 338,
    lower: [],
    title: [],
    upper: [],
    fold: 339,
    foldFull: [339]
  }, {
    code: 340,
    lower: [],
    title: [],
    upper: [],
    fold: 341,
    foldFull: [341]
  }, {
    code: 342,
    lower: [],
    title: [],
    upper: [],
    fold: 343,
    foldFull: [343]
  }, {
    code: 344,
    lower: [],
    title: [],
    upper: [],
    fold: 345,
    foldFull: [345]
  }, {
    code: 346,
    lower: [],
    title: [],
    upper: [],
    fold: 347,
    foldFull: [347]
  }, {
    code: 348,
    lower: [],
    title: [],
    upper: [],
    fold: 349,
    foldFull: [349]
  }, {
    code: 350,
    lower: [],
    title: [],
    upper: [],
    fold: 351,
    foldFull: [351]
  }, {
    code: 352,
    lower: [],
    title: [],
    upper: [],
    fold: 353,
    foldFull: [353]
  }, {
    code: 354,
    lower: [],
    title: [],
    upper: [],
    fold: 355,
    foldFull: [355]
  }, {
    code: 356,
    lower: [],
    title: [],
    upper: [],
    fold: 357,
    foldFull: [357]
  }, {
    code: 358,
    lower: [],
    title: [],
    upper: [],
    fold: 359,
    foldFull: [359]
  }, {
    code: 360,
    lower: [],
    title: [],
    upper: [],
    fold: 361,
    foldFull: [361]
  }, {
    code: 362,
    lower: [],
    title: [],
    upper: [],
    fold: 363,
    foldFull: [363]
  }, {
    code: 364,
    lower: [],
    title: [],
    upper: [],
    fold: 365,
    foldFull: [365]
  }, {
    code: 366,
    lower: [],
    title: [],
    upper: [],
    fold: 367,
    foldFull: [367]
  }, {
    code: 368,
    lower: [],
    title: [],
    upper: [],
    fold: 369,
    foldFull: [369]
  }, {
    code: 370,
    lower: [],
    title: [],
    upper: [],
    fold: 371,
    foldFull: [371]
  }, {
    code: 372,
    lower: [],
    title: [],
    upper: [],
    fold: 373,
    foldFull: [373]
  }, {
    code: 374,
    lower: [],
    title: [],
    upper: [],
    fold: 375,
    foldFull: [375]
  }, {
    code: 376,
    lower: [],
    title: [],
    upper: [],
    fold: 255,
    foldFull: [255]
  }, {
    code: 377,
    lower: [],
    title: [],
    upper: [],
    fold: 378,
    foldFull: [378]
  }, {
    code: 379,
    lower: [],
    title: [],
    upper: [],
    fold: 380,
    foldFull: [380]
  }, {
    code: 381,
    lower: [],
    title: [],
    upper: [],
    fold: 382,
    foldFull: [382]
  }, {
    code: 383,
    lower: [],
    title: [],
    upper: [],
    fold: 115,
    foldFull: [115]
  }, {
    code: 385,
    lower: [],
    title: [],
    upper: [],
    fold: 595,
    foldFull: [595]
  }, {
    code: 386,
    lower: [],
    title: [],
    upper: [],
    fold: 387,
    foldFull: [387]
  }, {
    code: 388,
    lower: [],
    title: [],
    upper: [],
    fold: 389,
    foldFull: [389]
  }, {
    code: 390,
    lower: [],
    title: [],
    upper: [],
    fold: 596,
    foldFull: [596]
  }, {
    code: 391,
    lower: [],
    title: [],
    upper: [],
    fold: 392,
    foldFull: [392]
  }, {
    code: 393,
    lower: [],
    title: [],
    upper: [],
    fold: 598,
    foldFull: [598]
  }, {
    code: 394,
    lower: [],
    title: [],
    upper: [],
    fold: 599,
    foldFull: [599]
  }, {
    code: 395,
    lower: [],
    title: [],
    upper: [],
    fold: 396,
    foldFull: [396]
  }, {
    code: 398,
    lower: [],
    title: [],
    upper: [],
    fold: 477,
    foldFull: [477]
  }, {
    code: 399,
    lower: [],
    title: [],
    upper: [],
    fold: 601,
    foldFull: [601]
  }, {
    code: 400,
    lower: [],
    title: [],
    upper: [],
    fold: 603,
    foldFull: [603]
  }, {
    code: 401,
    lower: [],
    title: [],
    upper: [],
    fold: 402,
    foldFull: [402]
  }, {
    code: 403,
    lower: [],
    title: [],
    upper: [],
    fold: 608,
    foldFull: [608]
  }, {
    code: 404,
    lower: [],
    title: [],
    upper: [],
    fold: 611,
    foldFull: [611]
  }, {
    code: 406,
    lower: [],
    title: [],
    upper: [],
    fold: 617,
    foldFull: [617]
  }, {
    code: 407,
    lower: [],
    title: [],
    upper: [],
    fold: 616,
    foldFull: [616]
  }, {
    code: 408,
    lower: [],
    title: [],
    upper: [],
    fold: 409,
    foldFull: [409]
  }, {
    code: 412,
    lower: [],
    title: [],
    upper: [],
    fold: 623,
    foldFull: [623]
  }, {
    code: 413,
    lower: [],
    title: [],
    upper: [],
    fold: 626,
    foldFull: [626]
  }, {
    code: 415,
    lower: [],
    title: [],
    upper: [],
    fold: 629,
    foldFull: [629]
  }, {
    code: 416,
    lower: [],
    title: [],
    upper: [],
    fold: 417,
    foldFull: [417]
  }, {
    code: 418,
    lower: [],
    title: [],
    upper: [],
    fold: 419,
    foldFull: [419]
  }, {
    code: 420,
    lower: [],
    title: [],
    upper: [],
    fold: 421,
    foldFull: [421]
  }, {
    code: 422,
    lower: [],
    title: [],
    upper: [],
    fold: 640,
    foldFull: [640]
  }, {
    code: 423,
    lower: [],
    title: [],
    upper: [],
    fold: 424,
    foldFull: [424]
  }, {
    code: 425,
    lower: [],
    title: [],
    upper: [],
    fold: 643,
    foldFull: [643]
  }, {
    code: 428,
    lower: [],
    title: [],
    upper: [],
    fold: 429,
    foldFull: [429]
  }, {
    code: 430,
    lower: [],
    title: [],
    upper: [],
    fold: 648,
    foldFull: [648]
  }, {
    code: 431,
    lower: [],
    title: [],
    upper: [],
    fold: 432,
    foldFull: [432]
  }, {
    code: 433,
    lower: [],
    title: [],
    upper: [],
    fold: 650,
    foldFull: [650]
  }, {
    code: 434,
    lower: [],
    title: [],
    upper: [],
    fold: 651,
    foldFull: [651]
  }, {
    code: 435,
    lower: [],
    title: [],
    upper: [],
    fold: 436,
    foldFull: [436]
  }, {
    code: 437,
    lower: [],
    title: [],
    upper: [],
    fold: 438,
    foldFull: [438]
  }, {
    code: 439,
    lower: [],
    title: [],
    upper: [],
    fold: 658,
    foldFull: [658]
  }, {
    code: 440,
    lower: [],
    title: [],
    upper: [],
    fold: 441,
    foldFull: [441]
  }, {
    code: 444,
    lower: [],
    title: [],
    upper: [],
    fold: 445,
    foldFull: [445]
  }, {
    code: 452,
    lower: [],
    title: [],
    upper: [],
    fold: 454,
    foldFull: [454]
  }, {
    code: 453,
    lower: [],
    title: [],
    upper: [],
    fold: 454,
    foldFull: [454]
  }, {
    code: 455,
    lower: [],
    title: [],
    upper: [],
    fold: 457,
    foldFull: [457]
  }, {
    code: 456,
    lower: [],
    title: [],
    upper: [],
    fold: 457,
    foldFull: [457]
  }, {
    code: 458,
    lower: [],
    title: [],
    upper: [],
    fold: 460,
    foldFull: [460]
  }, {
    code: 459,
    lower: [],
    title: [],
    upper: [],
    fold: 460,
    foldFull: [460]
  }, {
    code: 461,
    lower: [],
    title: [],
    upper: [],
    fold: 462,
    foldFull: [462]
  }, {
    code: 463,
    lower: [],
    title: [],
    upper: [],
    fold: 464,
    foldFull: [464]
  }, {
    code: 465,
    lower: [],
    title: [],
    upper: [],
    fold: 466,
    foldFull: [466]
  }, {
    code: 467,
    lower: [],
    title: [],
    upper: [],
    fold: 468,
    foldFull: [468]
  }, {
    code: 469,
    lower: [],
    title: [],
    upper: [],
    fold: 470,
    foldFull: [470]
  }, {
    code: 471,
    lower: [],
    title: [],
    upper: [],
    fold: 472,
    foldFull: [472]
  }, {
    code: 473,
    lower: [],
    title: [],
    upper: [],
    fold: 474,
    foldFull: [474]
  }, {
    code: 475,
    lower: [],
    title: [],
    upper: [],
    fold: 476,
    foldFull: [476]
  }, {
    code: 478,
    lower: [],
    title: [],
    upper: [],
    fold: 479,
    foldFull: [479]
  }, {
    code: 480,
    lower: [],
    title: [],
    upper: [],
    fold: 481,
    foldFull: [481]
  }, {
    code: 482,
    lower: [],
    title: [],
    upper: [],
    fold: 483,
    foldFull: [483]
  }, {
    code: 484,
    lower: [],
    title: [],
    upper: [],
    fold: 485,
    foldFull: [485]
  }, {
    code: 486,
    lower: [],
    title: [],
    upper: [],
    fold: 487,
    foldFull: [487]
  }, {
    code: 488,
    lower: [],
    title: [],
    upper: [],
    fold: 489,
    foldFull: [489]
  }, {
    code: 490,
    lower: [],
    title: [],
    upper: [],
    fold: 491,
    foldFull: [491]
  }, {
    code: 492,
    lower: [],
    title: [],
    upper: [],
    fold: 493,
    foldFull: [493]
  }, {
    code: 494,
    lower: [],
    title: [],
    upper: [],
    fold: 495,
    foldFull: [495]
  }, {
    code: 496,
    lower: [496],
    title: [74, 780],
    upper: [74, 780],
    fold: 0,
    foldFull: [106, 780]
  }, {
    code: 496,
    lower: [496],
    title: [74, 780],
    upper: [74, 780],
    fold: 0,
    foldFull: [106, 780]
  }, {
    code: 497,
    lower: [],
    title: [],
    upper: [],
    fold: 499,
    foldFull: [499]
  }, {
    code: 498,
    lower: [],
    title: [],
    upper: [],
    fold: 499,
    foldFull: [499]
  }, {
    code: 500,
    lower: [],
    title: [],
    upper: [],
    fold: 501,
    foldFull: [501]
  }, {
    code: 502,
    lower: [],
    title: [],
    upper: [],
    fold: 405,
    foldFull: [405]
  }, {
    code: 503,
    lower: [],
    title: [],
    upper: [],
    fold: 447,
    foldFull: [447]
  }, {
    code: 504,
    lower: [],
    title: [],
    upper: [],
    fold: 505,
    foldFull: [505]
  }, {
    code: 506,
    lower: [],
    title: [],
    upper: [],
    fold: 507,
    foldFull: [507]
  }, {
    code: 508,
    lower: [],
    title: [],
    upper: [],
    fold: 509,
    foldFull: [509]
  }, {
    code: 510,
    lower: [],
    title: [],
    upper: [],
    fold: 511,
    foldFull: [511]
  }, {
    code: 512,
    lower: [],
    title: [],
    upper: [],
    fold: 513,
    foldFull: [513]
  }, {
    code: 514,
    lower: [],
    title: [],
    upper: [],
    fold: 515,
    foldFull: [515]
  }, {
    code: 516,
    lower: [],
    title: [],
    upper: [],
    fold: 517,
    foldFull: [517]
  }, {
    code: 518,
    lower: [],
    title: [],
    upper: [],
    fold: 519,
    foldFull: [519]
  }, {
    code: 520,
    lower: [],
    title: [],
    upper: [],
    fold: 521,
    foldFull: [521]
  }, {
    code: 522,
    lower: [],
    title: [],
    upper: [],
    fold: 523,
    foldFull: [523]
  }, {
    code: 524,
    lower: [],
    title: [],
    upper: [],
    fold: 525,
    foldFull: [525]
  }, {
    code: 526,
    lower: [],
    title: [],
    upper: [],
    fold: 527,
    foldFull: [527]
  }, {
    code: 528,
    lower: [],
    title: [],
    upper: [],
    fold: 529,
    foldFull: [529]
  }, {
    code: 530,
    lower: [],
    title: [],
    upper: [],
    fold: 531,
    foldFull: [531]
  }, {
    code: 532,
    lower: [],
    title: [],
    upper: [],
    fold: 533,
    foldFull: [533]
  }, {
    code: 534,
    lower: [],
    title: [],
    upper: [],
    fold: 535,
    foldFull: [535]
  }, {
    code: 536,
    lower: [],
    title: [],
    upper: [],
    fold: 537,
    foldFull: [537]
  }, {
    code: 538,
    lower: [],
    title: [],
    upper: [],
    fold: 539,
    foldFull: [539]
  }, {
    code: 540,
    lower: [],
    title: [],
    upper: [],
    fold: 541,
    foldFull: [541]
  }, {
    code: 542,
    lower: [],
    title: [],
    upper: [],
    fold: 543,
    foldFull: [543]
  }, {
    code: 544,
    lower: [],
    title: [],
    upper: [],
    fold: 414,
    foldFull: [414]
  }, {
    code: 546,
    lower: [],
    title: [],
    upper: [],
    fold: 547,
    foldFull: [547]
  }, {
    code: 548,
    lower: [],
    title: [],
    upper: [],
    fold: 549,
    foldFull: [549]
  }, {
    code: 550,
    lower: [],
    title: [],
    upper: [],
    fold: 551,
    foldFull: [551]
  }, {
    code: 552,
    lower: [],
    title: [],
    upper: [],
    fold: 553,
    foldFull: [553]
  }, {
    code: 554,
    lower: [],
    title: [],
    upper: [],
    fold: 555,
    foldFull: [555]
  }, {
    code: 556,
    lower: [],
    title: [],
    upper: [],
    fold: 557,
    foldFull: [557]
  }, {
    code: 558,
    lower: [],
    title: [],
    upper: [],
    fold: 559,
    foldFull: [559]
  }, {
    code: 560,
    lower: [],
    title: [],
    upper: [],
    fold: 561,
    foldFull: [561]
  }, {
    code: 562,
    lower: [],
    title: [],
    upper: [],
    fold: 563,
    foldFull: [563]
  }, {
    code: 570,
    lower: [],
    title: [],
    upper: [],
    fold: 11365,
    foldFull: [11365]
  }, {
    code: 571,
    lower: [],
    title: [],
    upper: [],
    fold: 572,
    foldFull: [572]
  }, {
    code: 573,
    lower: [],
    title: [],
    upper: [],
    fold: 410,
    foldFull: [410]
  }, {
    code: 574,
    lower: [],
    title: [],
    upper: [],
    fold: 11366,
    foldFull: [11366]
  }, {
    code: 577,
    lower: [],
    title: [],
    upper: [],
    fold: 578,
    foldFull: [578]
  }, {
    code: 579,
    lower: [],
    title: [],
    upper: [],
    fold: 384,
    foldFull: [384]
  }, {
    code: 580,
    lower: [],
    title: [],
    upper: [],
    fold: 649,
    foldFull: [649]
  }, {
    code: 581,
    lower: [],
    title: [],
    upper: [],
    fold: 652,
    foldFull: [652]
  }, {
    code: 582,
    lower: [],
    title: [],
    upper: [],
    fold: 583,
    foldFull: [583]
  }, {
    code: 584,
    lower: [],
    title: [],
    upper: [],
    fold: 585,
    foldFull: [585]
  }, {
    code: 586,
    lower: [],
    title: [],
    upper: [],
    fold: 587,
    foldFull: [587]
  }, {
    code: 588,
    lower: [],
    title: [],
    upper: [],
    fold: 589,
    foldFull: [589]
  }, {
    code: 590,
    lower: [],
    title: [],
    upper: [],
    fold: 591,
    foldFull: [591]
  }, {
    code: 837,
    lower: [],
    title: [],
    upper: [],
    fold: 953,
    foldFull: [953]
  }, {
    code: 880,
    lower: [],
    title: [],
    upper: [],
    fold: 881,
    foldFull: [881]
  }, {
    code: 882,
    lower: [],
    title: [],
    upper: [],
    fold: 883,
    foldFull: [883]
  }, {
    code: 886,
    lower: [],
    title: [],
    upper: [],
    fold: 887,
    foldFull: [887]
  }, {
    code: 895,
    lower: [],
    title: [],
    upper: [],
    fold: 1011,
    foldFull: [1011]
  }, {
    code: 902,
    lower: [],
    title: [],
    upper: [],
    fold: 940,
    foldFull: [940]
  }, {
    code: 904,
    lower: [],
    title: [],
    upper: [],
    fold: 941,
    foldFull: [941]
  }, {
    code: 905,
    lower: [],
    title: [],
    upper: [],
    fold: 942,
    foldFull: [942]
  }, {
    code: 906,
    lower: [],
    title: [],
    upper: [],
    fold: 943,
    foldFull: [943]
  }, {
    code: 908,
    lower: [],
    title: [],
    upper: [],
    fold: 972,
    foldFull: [972]
  }, {
    code: 910,
    lower: [],
    title: [],
    upper: [],
    fold: 973,
    foldFull: [973]
  }, {
    code: 911,
    lower: [],
    title: [],
    upper: [],
    fold: 974,
    foldFull: [974]
  }, {
    code: 912,
    lower: [912],
    title: [921, 776, 769],
    upper: [921, 776, 769],
    fold: 0,
    foldFull: [953, 776, 769]
  }, {
    code: 912,
    lower: [912],
    title: [921, 776, 769],
    upper: [921, 776, 769],
    fold: 0,
    foldFull: [953, 776, 769]
  }, {
    code: 913,
    lower: [],
    title: [],
    upper: [],
    fold: 945,
    foldFull: [945]
  }, {
    code: 914,
    lower: [],
    title: [],
    upper: [],
    fold: 946,
    foldFull: [946]
  }, {
    code: 915,
    lower: [],
    title: [],
    upper: [],
    fold: 947,
    foldFull: [947]
  }, {
    code: 916,
    lower: [],
    title: [],
    upper: [],
    fold: 948,
    foldFull: [948]
  }, {
    code: 917,
    lower: [],
    title: [],
    upper: [],
    fold: 949,
    foldFull: [949]
  }, {
    code: 918,
    lower: [],
    title: [],
    upper: [],
    fold: 950,
    foldFull: [950]
  }, {
    code: 919,
    lower: [],
    title: [],
    upper: [],
    fold: 951,
    foldFull: [951]
  }, {
    code: 920,
    lower: [],
    title: [],
    upper: [],
    fold: 952,
    foldFull: [952]
  }, {
    code: 921,
    lower: [],
    title: [],
    upper: [],
    fold: 953,
    foldFull: [953]
  }, {
    code: 922,
    lower: [],
    title: [],
    upper: [],
    fold: 954,
    foldFull: [954]
  }, {
    code: 923,
    lower: [],
    title: [],
    upper: [],
    fold: 955,
    foldFull: [955]
  }, {
    code: 924,
    lower: [],
    title: [],
    upper: [],
    fold: 956,
    foldFull: [956]
  }, {
    code: 925,
    lower: [],
    title: [],
    upper: [],
    fold: 957,
    foldFull: [957]
  }, {
    code: 926,
    lower: [],
    title: [],
    upper: [],
    fold: 958,
    foldFull: [958]
  }, {
    code: 927,
    lower: [],
    title: [],
    upper: [],
    fold: 959,
    foldFull: [959]
  }, {
    code: 928,
    lower: [],
    title: [],
    upper: [],
    fold: 960,
    foldFull: [960]
  }, {
    code: 929,
    lower: [],
    title: [],
    upper: [],
    fold: 961,
    foldFull: [961]
  }, {
    code: 931,
    lower: [],
    title: [],
    upper: [],
    fold: 963,
    foldFull: [963]
  }, {
    code: 932,
    lower: [],
    title: [],
    upper: [],
    fold: 964,
    foldFull: [964]
  }, {
    code: 933,
    lower: [],
    title: [],
    upper: [],
    fold: 965,
    foldFull: [965]
  }, {
    code: 934,
    lower: [],
    title: [],
    upper: [],
    fold: 966,
    foldFull: [966]
  }, {
    code: 935,
    lower: [],
    title: [],
    upper: [],
    fold: 967,
    foldFull: [967]
  }, {
    code: 936,
    lower: [],
    title: [],
    upper: [],
    fold: 968,
    foldFull: [968]
  }, {
    code: 937,
    lower: [],
    title: [],
    upper: [],
    fold: 969,
    foldFull: [969]
  }, {
    code: 938,
    lower: [],
    title: [],
    upper: [],
    fold: 970,
    foldFull: [970]
  }, {
    code: 939,
    lower: [],
    title: [],
    upper: [],
    fold: 971,
    foldFull: [971]
  }, {
    code: 944,
    lower: [944],
    title: [933, 776, 769],
    upper: [933, 776, 769],
    fold: 0,
    foldFull: [965, 776, 769]
  }, {
    code: 944,
    lower: [944],
    title: [933, 776, 769],
    upper: [933, 776, 769],
    fold: 0,
    foldFull: [965, 776, 769]
  }, {
    code: 962,
    lower: [],
    title: [],
    upper: [],
    fold: 963,
    foldFull: [963]
  }, {
    code: 975,
    lower: [],
    title: [],
    upper: [],
    fold: 983,
    foldFull: [983]
  }, {
    code: 976,
    lower: [],
    title: [],
    upper: [],
    fold: 946,
    foldFull: [946]
  }, {
    code: 977,
    lower: [],
    title: [],
    upper: [],
    fold: 952,
    foldFull: [952]
  }, {
    code: 981,
    lower: [],
    title: [],
    upper: [],
    fold: 966,
    foldFull: [966]
  }, {
    code: 982,
    lower: [],
    title: [],
    upper: [],
    fold: 960,
    foldFull: [960]
  }, {
    code: 984,
    lower: [],
    title: [],
    upper: [],
    fold: 985,
    foldFull: [985]
  }, {
    code: 986,
    lower: [],
    title: [],
    upper: [],
    fold: 987,
    foldFull: [987]
  }, {
    code: 988,
    lower: [],
    title: [],
    upper: [],
    fold: 989,
    foldFull: [989]
  }, {
    code: 990,
    lower: [],
    title: [],
    upper: [],
    fold: 991,
    foldFull: [991]
  }, {
    code: 992,
    lower: [],
    title: [],
    upper: [],
    fold: 993,
    foldFull: [993]
  }, {
    code: 994,
    lower: [],
    title: [],
    upper: [],
    fold: 995,
    foldFull: [995]
  }, {
    code: 996,
    lower: [],
    title: [],
    upper: [],
    fold: 997,
    foldFull: [997]
  }, {
    code: 998,
    lower: [],
    title: [],
    upper: [],
    fold: 999,
    foldFull: [999]
  }, {
    code: 1e3,
    lower: [],
    title: [],
    upper: [],
    fold: 1001,
    foldFull: [1001]
  }, {
    code: 1002,
    lower: [],
    title: [],
    upper: [],
    fold: 1003,
    foldFull: [1003]
  }, {
    code: 1004,
    lower: [],
    title: [],
    upper: [],
    fold: 1005,
    foldFull: [1005]
  }, {
    code: 1006,
    lower: [],
    title: [],
    upper: [],
    fold: 1007,
    foldFull: [1007]
  }, {
    code: 1008,
    lower: [],
    title: [],
    upper: [],
    fold: 954,
    foldFull: [954]
  }, {
    code: 1009,
    lower: [],
    title: [],
    upper: [],
    fold: 961,
    foldFull: [961]
  }, {
    code: 1012,
    lower: [],
    title: [],
    upper: [],
    fold: 952,
    foldFull: [952]
  }, {
    code: 1013,
    lower: [],
    title: [],
    upper: [],
    fold: 949,
    foldFull: [949]
  }, {
    code: 1015,
    lower: [],
    title: [],
    upper: [],
    fold: 1016,
    foldFull: [1016]
  }, {
    code: 1017,
    lower: [],
    title: [],
    upper: [],
    fold: 1010,
    foldFull: [1010]
  }, {
    code: 1018,
    lower: [],
    title: [],
    upper: [],
    fold: 1019,
    foldFull: [1019]
  }, {
    code: 1021,
    lower: [],
    title: [],
    upper: [],
    fold: 891,
    foldFull: [891]
  }, {
    code: 1022,
    lower: [],
    title: [],
    upper: [],
    fold: 892,
    foldFull: [892]
  }, {
    code: 1023,
    lower: [],
    title: [],
    upper: [],
    fold: 893,
    foldFull: [893]
  }, {
    code: 1024,
    lower: [],
    title: [],
    upper: [],
    fold: 1104,
    foldFull: [1104]
  }, {
    code: 1025,
    lower: [],
    title: [],
    upper: [],
    fold: 1105,
    foldFull: [1105]
  }, {
    code: 1026,
    lower: [],
    title: [],
    upper: [],
    fold: 1106,
    foldFull: [1106]
  }, {
    code: 1027,
    lower: [],
    title: [],
    upper: [],
    fold: 1107,
    foldFull: [1107]
  }, {
    code: 1028,
    lower: [],
    title: [],
    upper: [],
    fold: 1108,
    foldFull: [1108]
  }, {
    code: 1029,
    lower: [],
    title: [],
    upper: [],
    fold: 1109,
    foldFull: [1109]
  }, {
    code: 1030,
    lower: [],
    title: [],
    upper: [],
    fold: 1110,
    foldFull: [1110]
  }, {
    code: 1031,
    lower: [],
    title: [],
    upper: [],
    fold: 1111,
    foldFull: [1111]
  }, {
    code: 1032,
    lower: [],
    title: [],
    upper: [],
    fold: 1112,
    foldFull: [1112]
  }, {
    code: 1033,
    lower: [],
    title: [],
    upper: [],
    fold: 1113,
    foldFull: [1113]
  }, {
    code: 1034,
    lower: [],
    title: [],
    upper: [],
    fold: 1114,
    foldFull: [1114]
  }, {
    code: 1035,
    lower: [],
    title: [],
    upper: [],
    fold: 1115,
    foldFull: [1115]
  }, {
    code: 1036,
    lower: [],
    title: [],
    upper: [],
    fold: 1116,
    foldFull: [1116]
  }, {
    code: 1037,
    lower: [],
    title: [],
    upper: [],
    fold: 1117,
    foldFull: [1117]
  }, {
    code: 1038,
    lower: [],
    title: [],
    upper: [],
    fold: 1118,
    foldFull: [1118]
  }, {
    code: 1039,
    lower: [],
    title: [],
    upper: [],
    fold: 1119,
    foldFull: [1119]
  }, {
    code: 1040,
    lower: [],
    title: [],
    upper: [],
    fold: 1072,
    foldFull: [1072]
  }, {
    code: 1041,
    lower: [],
    title: [],
    upper: [],
    fold: 1073,
    foldFull: [1073]
  }, {
    code: 1042,
    lower: [],
    title: [],
    upper: [],
    fold: 1074,
    foldFull: [1074]
  }, {
    code: 1043,
    lower: [],
    title: [],
    upper: [],
    fold: 1075,
    foldFull: [1075]
  }, {
    code: 1044,
    lower: [],
    title: [],
    upper: [],
    fold: 1076,
    foldFull: [1076]
  }, {
    code: 1045,
    lower: [],
    title: [],
    upper: [],
    fold: 1077,
    foldFull: [1077]
  }, {
    code: 1046,
    lower: [],
    title: [],
    upper: [],
    fold: 1078,
    foldFull: [1078]
  }, {
    code: 1047,
    lower: [],
    title: [],
    upper: [],
    fold: 1079,
    foldFull: [1079]
  }, {
    code: 1048,
    lower: [],
    title: [],
    upper: [],
    fold: 1080,
    foldFull: [1080]
  }, {
    code: 1049,
    lower: [],
    title: [],
    upper: [],
    fold: 1081,
    foldFull: [1081]
  }, {
    code: 1050,
    lower: [],
    title: [],
    upper: [],
    fold: 1082,
    foldFull: [1082]
  }, {
    code: 1051,
    lower: [],
    title: [],
    upper: [],
    fold: 1083,
    foldFull: [1083]
  }, {
    code: 1052,
    lower: [],
    title: [],
    upper: [],
    fold: 1084,
    foldFull: [1084]
  }, {
    code: 1053,
    lower: [],
    title: [],
    upper: [],
    fold: 1085,
    foldFull: [1085]
  }, {
    code: 1054,
    lower: [],
    title: [],
    upper: [],
    fold: 1086,
    foldFull: [1086]
  }, {
    code: 1055,
    lower: [],
    title: [],
    upper: [],
    fold: 1087,
    foldFull: [1087]
  }, {
    code: 1056,
    lower: [],
    title: [],
    upper: [],
    fold: 1088,
    foldFull: [1088]
  }, {
    code: 1057,
    lower: [],
    title: [],
    upper: [],
    fold: 1089,
    foldFull: [1089]
  }, {
    code: 1058,
    lower: [],
    title: [],
    upper: [],
    fold: 1090,
    foldFull: [1090]
  }, {
    code: 1059,
    lower: [],
    title: [],
    upper: [],
    fold: 1091,
    foldFull: [1091]
  }, {
    code: 1060,
    lower: [],
    title: [],
    upper: [],
    fold: 1092,
    foldFull: [1092]
  }, {
    code: 1061,
    lower: [],
    title: [],
    upper: [],
    fold: 1093,
    foldFull: [1093]
  }, {
    code: 1062,
    lower: [],
    title: [],
    upper: [],
    fold: 1094,
    foldFull: [1094]
  }, {
    code: 1063,
    lower: [],
    title: [],
    upper: [],
    fold: 1095,
    foldFull: [1095]
  }, {
    code: 1064,
    lower: [],
    title: [],
    upper: [],
    fold: 1096,
    foldFull: [1096]
  }, {
    code: 1065,
    lower: [],
    title: [],
    upper: [],
    fold: 1097,
    foldFull: [1097]
  }, {
    code: 1066,
    lower: [],
    title: [],
    upper: [],
    fold: 1098,
    foldFull: [1098]
  }, {
    code: 1067,
    lower: [],
    title: [],
    upper: [],
    fold: 1099,
    foldFull: [1099]
  }, {
    code: 1068,
    lower: [],
    title: [],
    upper: [],
    fold: 1100,
    foldFull: [1100]
  }, {
    code: 1069,
    lower: [],
    title: [],
    upper: [],
    fold: 1101,
    foldFull: [1101]
  }, {
    code: 1070,
    lower: [],
    title: [],
    upper: [],
    fold: 1102,
    foldFull: [1102]
  }, {
    code: 1071,
    lower: [],
    title: [],
    upper: [],
    fold: 1103,
    foldFull: [1103]
  }, {
    code: 1120,
    lower: [],
    title: [],
    upper: [],
    fold: 1121,
    foldFull: [1121]
  }, {
    code: 1122,
    lower: [],
    title: [],
    upper: [],
    fold: 1123,
    foldFull: [1123]
  }, {
    code: 1124,
    lower: [],
    title: [],
    upper: [],
    fold: 1125,
    foldFull: [1125]
  }, {
    code: 1126,
    lower: [],
    title: [],
    upper: [],
    fold: 1127,
    foldFull: [1127]
  }, {
    code: 1128,
    lower: [],
    title: [],
    upper: [],
    fold: 1129,
    foldFull: [1129]
  }, {
    code: 1130,
    lower: [],
    title: [],
    upper: [],
    fold: 1131,
    foldFull: [1131]
  }, {
    code: 1132,
    lower: [],
    title: [],
    upper: [],
    fold: 1133,
    foldFull: [1133]
  }, {
    code: 1134,
    lower: [],
    title: [],
    upper: [],
    fold: 1135,
    foldFull: [1135]
  }, {
    code: 1136,
    lower: [],
    title: [],
    upper: [],
    fold: 1137,
    foldFull: [1137]
  }, {
    code: 1138,
    lower: [],
    title: [],
    upper: [],
    fold: 1139,
    foldFull: [1139]
  }, {
    code: 1140,
    lower: [],
    title: [],
    upper: [],
    fold: 1141,
    foldFull: [1141]
  }, {
    code: 1142,
    lower: [],
    title: [],
    upper: [],
    fold: 1143,
    foldFull: [1143]
  }, {
    code: 1144,
    lower: [],
    title: [],
    upper: [],
    fold: 1145,
    foldFull: [1145]
  }, {
    code: 1146,
    lower: [],
    title: [],
    upper: [],
    fold: 1147,
    foldFull: [1147]
  }, {
    code: 1148,
    lower: [],
    title: [],
    upper: [],
    fold: 1149,
    foldFull: [1149]
  }, {
    code: 1150,
    lower: [],
    title: [],
    upper: [],
    fold: 1151,
    foldFull: [1151]
  }, {
    code: 1152,
    lower: [],
    title: [],
    upper: [],
    fold: 1153,
    foldFull: [1153]
  }, {
    code: 1162,
    lower: [],
    title: [],
    upper: [],
    fold: 1163,
    foldFull: [1163]
  }, {
    code: 1164,
    lower: [],
    title: [],
    upper: [],
    fold: 1165,
    foldFull: [1165]
  }, {
    code: 1166,
    lower: [],
    title: [],
    upper: [],
    fold: 1167,
    foldFull: [1167]
  }, {
    code: 1168,
    lower: [],
    title: [],
    upper: [],
    fold: 1169,
    foldFull: [1169]
  }, {
    code: 1170,
    lower: [],
    title: [],
    upper: [],
    fold: 1171,
    foldFull: [1171]
  }, {
    code: 1172,
    lower: [],
    title: [],
    upper: [],
    fold: 1173,
    foldFull: [1173]
  }, {
    code: 1174,
    lower: [],
    title: [],
    upper: [],
    fold: 1175,
    foldFull: [1175]
  }, {
    code: 1176,
    lower: [],
    title: [],
    upper: [],
    fold: 1177,
    foldFull: [1177]
  }, {
    code: 1178,
    lower: [],
    title: [],
    upper: [],
    fold: 1179,
    foldFull: [1179]
  }, {
    code: 1180,
    lower: [],
    title: [],
    upper: [],
    fold: 1181,
    foldFull: [1181]
  }, {
    code: 1182,
    lower: [],
    title: [],
    upper: [],
    fold: 1183,
    foldFull: [1183]
  }, {
    code: 1184,
    lower: [],
    title: [],
    upper: [],
    fold: 1185,
    foldFull: [1185]
  }, {
    code: 1186,
    lower: [],
    title: [],
    upper: [],
    fold: 1187,
    foldFull: [1187]
  }, {
    code: 1188,
    lower: [],
    title: [],
    upper: [],
    fold: 1189,
    foldFull: [1189]
  }, {
    code: 1190,
    lower: [],
    title: [],
    upper: [],
    fold: 1191,
    foldFull: [1191]
  }, {
    code: 1192,
    lower: [],
    title: [],
    upper: [],
    fold: 1193,
    foldFull: [1193]
  }, {
    code: 1194,
    lower: [],
    title: [],
    upper: [],
    fold: 1195,
    foldFull: [1195]
  }, {
    code: 1196,
    lower: [],
    title: [],
    upper: [],
    fold: 1197,
    foldFull: [1197]
  }, {
    code: 1198,
    lower: [],
    title: [],
    upper: [],
    fold: 1199,
    foldFull: [1199]
  }, {
    code: 1200,
    lower: [],
    title: [],
    upper: [],
    fold: 1201,
    foldFull: [1201]
  }, {
    code: 1202,
    lower: [],
    title: [],
    upper: [],
    fold: 1203,
    foldFull: [1203]
  }, {
    code: 1204,
    lower: [],
    title: [],
    upper: [],
    fold: 1205,
    foldFull: [1205]
  }, {
    code: 1206,
    lower: [],
    title: [],
    upper: [],
    fold: 1207,
    foldFull: [1207]
  }, {
    code: 1208,
    lower: [],
    title: [],
    upper: [],
    fold: 1209,
    foldFull: [1209]
  }, {
    code: 1210,
    lower: [],
    title: [],
    upper: [],
    fold: 1211,
    foldFull: [1211]
  }, {
    code: 1212,
    lower: [],
    title: [],
    upper: [],
    fold: 1213,
    foldFull: [1213]
  }, {
    code: 1214,
    lower: [],
    title: [],
    upper: [],
    fold: 1215,
    foldFull: [1215]
  }, {
    code: 1216,
    lower: [],
    title: [],
    upper: [],
    fold: 1231,
    foldFull: [1231]
  }, {
    code: 1217,
    lower: [],
    title: [],
    upper: [],
    fold: 1218,
    foldFull: [1218]
  }, {
    code: 1219,
    lower: [],
    title: [],
    upper: [],
    fold: 1220,
    foldFull: [1220]
  }, {
    code: 1221,
    lower: [],
    title: [],
    upper: [],
    fold: 1222,
    foldFull: [1222]
  }, {
    code: 1223,
    lower: [],
    title: [],
    upper: [],
    fold: 1224,
    foldFull: [1224]
  }, {
    code: 1225,
    lower: [],
    title: [],
    upper: [],
    fold: 1226,
    foldFull: [1226]
  }, {
    code: 1227,
    lower: [],
    title: [],
    upper: [],
    fold: 1228,
    foldFull: [1228]
  }, {
    code: 1229,
    lower: [],
    title: [],
    upper: [],
    fold: 1230,
    foldFull: [1230]
  }, {
    code: 1232,
    lower: [],
    title: [],
    upper: [],
    fold: 1233,
    foldFull: [1233]
  }, {
    code: 1234,
    lower: [],
    title: [],
    upper: [],
    fold: 1235,
    foldFull: [1235]
  }, {
    code: 1236,
    lower: [],
    title: [],
    upper: [],
    fold: 1237,
    foldFull: [1237]
  }, {
    code: 1238,
    lower: [],
    title: [],
    upper: [],
    fold: 1239,
    foldFull: [1239]
  }, {
    code: 1240,
    lower: [],
    title: [],
    upper: [],
    fold: 1241,
    foldFull: [1241]
  }, {
    code: 1242,
    lower: [],
    title: [],
    upper: [],
    fold: 1243,
    foldFull: [1243]
  }, {
    code: 1244,
    lower: [],
    title: [],
    upper: [],
    fold: 1245,
    foldFull: [1245]
  }, {
    code: 1246,
    lower: [],
    title: [],
    upper: [],
    fold: 1247,
    foldFull: [1247]
  }, {
    code: 1248,
    lower: [],
    title: [],
    upper: [],
    fold: 1249,
    foldFull: [1249]
  }, {
    code: 1250,
    lower: [],
    title: [],
    upper: [],
    fold: 1251,
    foldFull: [1251]
  }, {
    code: 1252,
    lower: [],
    title: [],
    upper: [],
    fold: 1253,
    foldFull: [1253]
  }, {
    code: 1254,
    lower: [],
    title: [],
    upper: [],
    fold: 1255,
    foldFull: [1255]
  }, {
    code: 1256,
    lower: [],
    title: [],
    upper: [],
    fold: 1257,
    foldFull: [1257]
  }, {
    code: 1258,
    lower: [],
    title: [],
    upper: [],
    fold: 1259,
    foldFull: [1259]
  }, {
    code: 1260,
    lower: [],
    title: [],
    upper: [],
    fold: 1261,
    foldFull: [1261]
  }, {
    code: 1262,
    lower: [],
    title: [],
    upper: [],
    fold: 1263,
    foldFull: [1263]
  }, {
    code: 1264,
    lower: [],
    title: [],
    upper: [],
    fold: 1265,
    foldFull: [1265]
  }, {
    code: 1266,
    lower: [],
    title: [],
    upper: [],
    fold: 1267,
    foldFull: [1267]
  }, {
    code: 1268,
    lower: [],
    title: [],
    upper: [],
    fold: 1269,
    foldFull: [1269]
  }, {
    code: 1270,
    lower: [],
    title: [],
    upper: [],
    fold: 1271,
    foldFull: [1271]
  }, {
    code: 1272,
    lower: [],
    title: [],
    upper: [],
    fold: 1273,
    foldFull: [1273]
  }, {
    code: 1274,
    lower: [],
    title: [],
    upper: [],
    fold: 1275,
    foldFull: [1275]
  }, {
    code: 1276,
    lower: [],
    title: [],
    upper: [],
    fold: 1277,
    foldFull: [1277]
  }, {
    code: 1278,
    lower: [],
    title: [],
    upper: [],
    fold: 1279,
    foldFull: [1279]
  }, {
    code: 1280,
    lower: [],
    title: [],
    upper: [],
    fold: 1281,
    foldFull: [1281]
  }, {
    code: 1282,
    lower: [],
    title: [],
    upper: [],
    fold: 1283,
    foldFull: [1283]
  }, {
    code: 1284,
    lower: [],
    title: [],
    upper: [],
    fold: 1285,
    foldFull: [1285]
  }, {
    code: 1286,
    lower: [],
    title: [],
    upper: [],
    fold: 1287,
    foldFull: [1287]
  }, {
    code: 1288,
    lower: [],
    title: [],
    upper: [],
    fold: 1289,
    foldFull: [1289]
  }, {
    code: 1290,
    lower: [],
    title: [],
    upper: [],
    fold: 1291,
    foldFull: [1291]
  }, {
    code: 1292,
    lower: [],
    title: [],
    upper: [],
    fold: 1293,
    foldFull: [1293]
  }, {
    code: 1294,
    lower: [],
    title: [],
    upper: [],
    fold: 1295,
    foldFull: [1295]
  }, {
    code: 1296,
    lower: [],
    title: [],
    upper: [],
    fold: 1297,
    foldFull: [1297]
  }, {
    code: 1298,
    lower: [],
    title: [],
    upper: [],
    fold: 1299,
    foldFull: [1299]
  }, {
    code: 1300,
    lower: [],
    title: [],
    upper: [],
    fold: 1301,
    foldFull: [1301]
  }, {
    code: 1302,
    lower: [],
    title: [],
    upper: [],
    fold: 1303,
    foldFull: [1303]
  }, {
    code: 1304,
    lower: [],
    title: [],
    upper: [],
    fold: 1305,
    foldFull: [1305]
  }, {
    code: 1306,
    lower: [],
    title: [],
    upper: [],
    fold: 1307,
    foldFull: [1307]
  }, {
    code: 1308,
    lower: [],
    title: [],
    upper: [],
    fold: 1309,
    foldFull: [1309]
  }, {
    code: 1310,
    lower: [],
    title: [],
    upper: [],
    fold: 1311,
    foldFull: [1311]
  }, {
    code: 1312,
    lower: [],
    title: [],
    upper: [],
    fold: 1313,
    foldFull: [1313]
  }, {
    code: 1314,
    lower: [],
    title: [],
    upper: [],
    fold: 1315,
    foldFull: [1315]
  }, {
    code: 1316,
    lower: [],
    title: [],
    upper: [],
    fold: 1317,
    foldFull: [1317]
  }, {
    code: 1318,
    lower: [],
    title: [],
    upper: [],
    fold: 1319,
    foldFull: [1319]
  }, {
    code: 1320,
    lower: [],
    title: [],
    upper: [],
    fold: 1321,
    foldFull: [1321]
  }, {
    code: 1322,
    lower: [],
    title: [],
    upper: [],
    fold: 1323,
    foldFull: [1323]
  }, {
    code: 1324,
    lower: [],
    title: [],
    upper: [],
    fold: 1325,
    foldFull: [1325]
  }, {
    code: 1326,
    lower: [],
    title: [],
    upper: [],
    fold: 1327,
    foldFull: [1327]
  }, {
    code: 1329,
    lower: [],
    title: [],
    upper: [],
    fold: 1377,
    foldFull: [1377]
  }, {
    code: 1330,
    lower: [],
    title: [],
    upper: [],
    fold: 1378,
    foldFull: [1378]
  }, {
    code: 1331,
    lower: [],
    title: [],
    upper: [],
    fold: 1379,
    foldFull: [1379]
  }, {
    code: 1332,
    lower: [],
    title: [],
    upper: [],
    fold: 1380,
    foldFull: [1380]
  }, {
    code: 1333,
    lower: [],
    title: [],
    upper: [],
    fold: 1381,
    foldFull: [1381]
  }, {
    code: 1334,
    lower: [],
    title: [],
    upper: [],
    fold: 1382,
    foldFull: [1382]
  }, {
    code: 1335,
    lower: [],
    title: [],
    upper: [],
    fold: 1383,
    foldFull: [1383]
  }, {
    code: 1336,
    lower: [],
    title: [],
    upper: [],
    fold: 1384,
    foldFull: [1384]
  }, {
    code: 1337,
    lower: [],
    title: [],
    upper: [],
    fold: 1385,
    foldFull: [1385]
  }, {
    code: 1338,
    lower: [],
    title: [],
    upper: [],
    fold: 1386,
    foldFull: [1386]
  }, {
    code: 1339,
    lower: [],
    title: [],
    upper: [],
    fold: 1387,
    foldFull: [1387]
  }, {
    code: 1340,
    lower: [],
    title: [],
    upper: [],
    fold: 1388,
    foldFull: [1388]
  }, {
    code: 1341,
    lower: [],
    title: [],
    upper: [],
    fold: 1389,
    foldFull: [1389]
  }, {
    code: 1342,
    lower: [],
    title: [],
    upper: [],
    fold: 1390,
    foldFull: [1390]
  }, {
    code: 1343,
    lower: [],
    title: [],
    upper: [],
    fold: 1391,
    foldFull: [1391]
  }, {
    code: 1344,
    lower: [],
    title: [],
    upper: [],
    fold: 1392,
    foldFull: [1392]
  }, {
    code: 1345,
    lower: [],
    title: [],
    upper: [],
    fold: 1393,
    foldFull: [1393]
  }, {
    code: 1346,
    lower: [],
    title: [],
    upper: [],
    fold: 1394,
    foldFull: [1394]
  }, {
    code: 1347,
    lower: [],
    title: [],
    upper: [],
    fold: 1395,
    foldFull: [1395]
  }, {
    code: 1348,
    lower: [],
    title: [],
    upper: [],
    fold: 1396,
    foldFull: [1396]
  }, {
    code: 1349,
    lower: [],
    title: [],
    upper: [],
    fold: 1397,
    foldFull: [1397]
  }, {
    code: 1350,
    lower: [],
    title: [],
    upper: [],
    fold: 1398,
    foldFull: [1398]
  }, {
    code: 1351,
    lower: [],
    title: [],
    upper: [],
    fold: 1399,
    foldFull: [1399]
  }, {
    code: 1352,
    lower: [],
    title: [],
    upper: [],
    fold: 1400,
    foldFull: [1400]
  }, {
    code: 1353,
    lower: [],
    title: [],
    upper: [],
    fold: 1401,
    foldFull: [1401]
  }, {
    code: 1354,
    lower: [],
    title: [],
    upper: [],
    fold: 1402,
    foldFull: [1402]
  }, {
    code: 1355,
    lower: [],
    title: [],
    upper: [],
    fold: 1403,
    foldFull: [1403]
  }, {
    code: 1356,
    lower: [],
    title: [],
    upper: [],
    fold: 1404,
    foldFull: [1404]
  }, {
    code: 1357,
    lower: [],
    title: [],
    upper: [],
    fold: 1405,
    foldFull: [1405]
  }, {
    code: 1358,
    lower: [],
    title: [],
    upper: [],
    fold: 1406,
    foldFull: [1406]
  }, {
    code: 1359,
    lower: [],
    title: [],
    upper: [],
    fold: 1407,
    foldFull: [1407]
  }, {
    code: 1360,
    lower: [],
    title: [],
    upper: [],
    fold: 1408,
    foldFull: [1408]
  }, {
    code: 1361,
    lower: [],
    title: [],
    upper: [],
    fold: 1409,
    foldFull: [1409]
  }, {
    code: 1362,
    lower: [],
    title: [],
    upper: [],
    fold: 1410,
    foldFull: [1410]
  }, {
    code: 1363,
    lower: [],
    title: [],
    upper: [],
    fold: 1411,
    foldFull: [1411]
  }, {
    code: 1364,
    lower: [],
    title: [],
    upper: [],
    fold: 1412,
    foldFull: [1412]
  }, {
    code: 1365,
    lower: [],
    title: [],
    upper: [],
    fold: 1413,
    foldFull: [1413]
  }, {
    code: 1366,
    lower: [],
    title: [],
    upper: [],
    fold: 1414,
    foldFull: [1414]
  }, {
    code: 1415,
    lower: [1415],
    title: [1333, 1410],
    upper: [1333, 1362],
    fold: 0,
    foldFull: [1381, 1410]
  }, {
    code: 1415,
    lower: [1415],
    title: [1333, 1410],
    upper: [1333, 1362],
    fold: 0,
    foldFull: [1381, 1410]
  }, {
    code: 4256,
    lower: [],
    title: [],
    upper: [],
    fold: 11520,
    foldFull: [11520]
  }, {
    code: 4257,
    lower: [],
    title: [],
    upper: [],
    fold: 11521,
    foldFull: [11521]
  }, {
    code: 4258,
    lower: [],
    title: [],
    upper: [],
    fold: 11522,
    foldFull: [11522]
  }, {
    code: 4259,
    lower: [],
    title: [],
    upper: [],
    fold: 11523,
    foldFull: [11523]
  }, {
    code: 4260,
    lower: [],
    title: [],
    upper: [],
    fold: 11524,
    foldFull: [11524]
  }, {
    code: 4261,
    lower: [],
    title: [],
    upper: [],
    fold: 11525,
    foldFull: [11525]
  }, {
    code: 4262,
    lower: [],
    title: [],
    upper: [],
    fold: 11526,
    foldFull: [11526]
  }, {
    code: 4263,
    lower: [],
    title: [],
    upper: [],
    fold: 11527,
    foldFull: [11527]
  }, {
    code: 4264,
    lower: [],
    title: [],
    upper: [],
    fold: 11528,
    foldFull: [11528]
  }, {
    code: 4265,
    lower: [],
    title: [],
    upper: [],
    fold: 11529,
    foldFull: [11529]
  }, {
    code: 4266,
    lower: [],
    title: [],
    upper: [],
    fold: 11530,
    foldFull: [11530]
  }, {
    code: 4267,
    lower: [],
    title: [],
    upper: [],
    fold: 11531,
    foldFull: [11531]
  }, {
    code: 4268,
    lower: [],
    title: [],
    upper: [],
    fold: 11532,
    foldFull: [11532]
  }, {
    code: 4269,
    lower: [],
    title: [],
    upper: [],
    fold: 11533,
    foldFull: [11533]
  }, {
    code: 4270,
    lower: [],
    title: [],
    upper: [],
    fold: 11534,
    foldFull: [11534]
  }, {
    code: 4271,
    lower: [],
    title: [],
    upper: [],
    fold: 11535,
    foldFull: [11535]
  }, {
    code: 4272,
    lower: [],
    title: [],
    upper: [],
    fold: 11536,
    foldFull: [11536]
  }, {
    code: 4273,
    lower: [],
    title: [],
    upper: [],
    fold: 11537,
    foldFull: [11537]
  }, {
    code: 4274,
    lower: [],
    title: [],
    upper: [],
    fold: 11538,
    foldFull: [11538]
  }, {
    code: 4275,
    lower: [],
    title: [],
    upper: [],
    fold: 11539,
    foldFull: [11539]
  }, {
    code: 4276,
    lower: [],
    title: [],
    upper: [],
    fold: 11540,
    foldFull: [11540]
  }, {
    code: 4277,
    lower: [],
    title: [],
    upper: [],
    fold: 11541,
    foldFull: [11541]
  }, {
    code: 4278,
    lower: [],
    title: [],
    upper: [],
    fold: 11542,
    foldFull: [11542]
  }, {
    code: 4279,
    lower: [],
    title: [],
    upper: [],
    fold: 11543,
    foldFull: [11543]
  }, {
    code: 4280,
    lower: [],
    title: [],
    upper: [],
    fold: 11544,
    foldFull: [11544]
  }, {
    code: 4281,
    lower: [],
    title: [],
    upper: [],
    fold: 11545,
    foldFull: [11545]
  }, {
    code: 4282,
    lower: [],
    title: [],
    upper: [],
    fold: 11546,
    foldFull: [11546]
  }, {
    code: 4283,
    lower: [],
    title: [],
    upper: [],
    fold: 11547,
    foldFull: [11547]
  }, {
    code: 4284,
    lower: [],
    title: [],
    upper: [],
    fold: 11548,
    foldFull: [11548]
  }, {
    code: 4285,
    lower: [],
    title: [],
    upper: [],
    fold: 11549,
    foldFull: [11549]
  }, {
    code: 4286,
    lower: [],
    title: [],
    upper: [],
    fold: 11550,
    foldFull: [11550]
  }, {
    code: 4287,
    lower: [],
    title: [],
    upper: [],
    fold: 11551,
    foldFull: [11551]
  }, {
    code: 4288,
    lower: [],
    title: [],
    upper: [],
    fold: 11552,
    foldFull: [11552]
  }, {
    code: 4289,
    lower: [],
    title: [],
    upper: [],
    fold: 11553,
    foldFull: [11553]
  }, {
    code: 4290,
    lower: [],
    title: [],
    upper: [],
    fold: 11554,
    foldFull: [11554]
  }, {
    code: 4291,
    lower: [],
    title: [],
    upper: [],
    fold: 11555,
    foldFull: [11555]
  }, {
    code: 4292,
    lower: [],
    title: [],
    upper: [],
    fold: 11556,
    foldFull: [11556]
  }, {
    code: 4293,
    lower: [],
    title: [],
    upper: [],
    fold: 11557,
    foldFull: [11557]
  }, {
    code: 4295,
    lower: [],
    title: [],
    upper: [],
    fold: 11559,
    foldFull: [11559]
  }, {
    code: 4301,
    lower: [],
    title: [],
    upper: [],
    fold: 11565,
    foldFull: [11565]
  }, {
    code: 5112,
    lower: [],
    title: [],
    upper: [],
    fold: 5104,
    foldFull: [5104]
  }, {
    code: 5113,
    lower: [],
    title: [],
    upper: [],
    fold: 5105,
    foldFull: [5105]
  }, {
    code: 5114,
    lower: [],
    title: [],
    upper: [],
    fold: 5106,
    foldFull: [5106]
  }, {
    code: 5115,
    lower: [],
    title: [],
    upper: [],
    fold: 5107,
    foldFull: [5107]
  }, {
    code: 5116,
    lower: [],
    title: [],
    upper: [],
    fold: 5108,
    foldFull: [5108]
  }, {
    code: 5117,
    lower: [],
    title: [],
    upper: [],
    fold: 5109,
    foldFull: [5109]
  }, {
    code: 7296,
    lower: [],
    title: [],
    upper: [],
    fold: 1074,
    foldFull: [1074]
  }, {
    code: 7297,
    lower: [],
    title: [],
    upper: [],
    fold: 1076,
    foldFull: [1076]
  }, {
    code: 7298,
    lower: [],
    title: [],
    upper: [],
    fold: 1086,
    foldFull: [1086]
  }, {
    code: 7299,
    lower: [],
    title: [],
    upper: [],
    fold: 1089,
    foldFull: [1089]
  }, {
    code: 7300,
    lower: [],
    title: [],
    upper: [],
    fold: 1090,
    foldFull: [1090]
  }, {
    code: 7301,
    lower: [],
    title: [],
    upper: [],
    fold: 1090,
    foldFull: [1090]
  }, {
    code: 7302,
    lower: [],
    title: [],
    upper: [],
    fold: 1098,
    foldFull: [1098]
  }, {
    code: 7303,
    lower: [],
    title: [],
    upper: [],
    fold: 1123,
    foldFull: [1123]
  }, {
    code: 7304,
    lower: [],
    title: [],
    upper: [],
    fold: 42571,
    foldFull: [42571]
  }, {
    code: 7312,
    lower: [],
    title: [],
    upper: [],
    fold: 4304,
    foldFull: [4304]
  }, {
    code: 7313,
    lower: [],
    title: [],
    upper: [],
    fold: 4305,
    foldFull: [4305]
  }, {
    code: 7314,
    lower: [],
    title: [],
    upper: [],
    fold: 4306,
    foldFull: [4306]
  }, {
    code: 7315,
    lower: [],
    title: [],
    upper: [],
    fold: 4307,
    foldFull: [4307]
  }, {
    code: 7316,
    lower: [],
    title: [],
    upper: [],
    fold: 4308,
    foldFull: [4308]
  }, {
    code: 7317,
    lower: [],
    title: [],
    upper: [],
    fold: 4309,
    foldFull: [4309]
  }, {
    code: 7318,
    lower: [],
    title: [],
    upper: [],
    fold: 4310,
    foldFull: [4310]
  }, {
    code: 7319,
    lower: [],
    title: [],
    upper: [],
    fold: 4311,
    foldFull: [4311]
  }, {
    code: 7320,
    lower: [],
    title: [],
    upper: [],
    fold: 4312,
    foldFull: [4312]
  }, {
    code: 7321,
    lower: [],
    title: [],
    upper: [],
    fold: 4313,
    foldFull: [4313]
  }, {
    code: 7322,
    lower: [],
    title: [],
    upper: [],
    fold: 4314,
    foldFull: [4314]
  }, {
    code: 7323,
    lower: [],
    title: [],
    upper: [],
    fold: 4315,
    foldFull: [4315]
  }, {
    code: 7324,
    lower: [],
    title: [],
    upper: [],
    fold: 4316,
    foldFull: [4316]
  }, {
    code: 7325,
    lower: [],
    title: [],
    upper: [],
    fold: 4317,
    foldFull: [4317]
  }, {
    code: 7326,
    lower: [],
    title: [],
    upper: [],
    fold: 4318,
    foldFull: [4318]
  }, {
    code: 7327,
    lower: [],
    title: [],
    upper: [],
    fold: 4319,
    foldFull: [4319]
  }, {
    code: 7328,
    lower: [],
    title: [],
    upper: [],
    fold: 4320,
    foldFull: [4320]
  }, {
    code: 7329,
    lower: [],
    title: [],
    upper: [],
    fold: 4321,
    foldFull: [4321]
  }, {
    code: 7330,
    lower: [],
    title: [],
    upper: [],
    fold: 4322,
    foldFull: [4322]
  }, {
    code: 7331,
    lower: [],
    title: [],
    upper: [],
    fold: 4323,
    foldFull: [4323]
  }, {
    code: 7332,
    lower: [],
    title: [],
    upper: [],
    fold: 4324,
    foldFull: [4324]
  }, {
    code: 7333,
    lower: [],
    title: [],
    upper: [],
    fold: 4325,
    foldFull: [4325]
  }, {
    code: 7334,
    lower: [],
    title: [],
    upper: [],
    fold: 4326,
    foldFull: [4326]
  }, {
    code: 7335,
    lower: [],
    title: [],
    upper: [],
    fold: 4327,
    foldFull: [4327]
  }, {
    code: 7336,
    lower: [],
    title: [],
    upper: [],
    fold: 4328,
    foldFull: [4328]
  }, {
    code: 7337,
    lower: [],
    title: [],
    upper: [],
    fold: 4329,
    foldFull: [4329]
  }, {
    code: 7338,
    lower: [],
    title: [],
    upper: [],
    fold: 4330,
    foldFull: [4330]
  }, {
    code: 7339,
    lower: [],
    title: [],
    upper: [],
    fold: 4331,
    foldFull: [4331]
  }, {
    code: 7340,
    lower: [],
    title: [],
    upper: [],
    fold: 4332,
    foldFull: [4332]
  }, {
    code: 7341,
    lower: [],
    title: [],
    upper: [],
    fold: 4333,
    foldFull: [4333]
  }, {
    code: 7342,
    lower: [],
    title: [],
    upper: [],
    fold: 4334,
    foldFull: [4334]
  }, {
    code: 7343,
    lower: [],
    title: [],
    upper: [],
    fold: 4335,
    foldFull: [4335]
  }, {
    code: 7344,
    lower: [],
    title: [],
    upper: [],
    fold: 4336,
    foldFull: [4336]
  }, {
    code: 7345,
    lower: [],
    title: [],
    upper: [],
    fold: 4337,
    foldFull: [4337]
  }, {
    code: 7346,
    lower: [],
    title: [],
    upper: [],
    fold: 4338,
    foldFull: [4338]
  }, {
    code: 7347,
    lower: [],
    title: [],
    upper: [],
    fold: 4339,
    foldFull: [4339]
  }, {
    code: 7348,
    lower: [],
    title: [],
    upper: [],
    fold: 4340,
    foldFull: [4340]
  }, {
    code: 7349,
    lower: [],
    title: [],
    upper: [],
    fold: 4341,
    foldFull: [4341]
  }, {
    code: 7350,
    lower: [],
    title: [],
    upper: [],
    fold: 4342,
    foldFull: [4342]
  }, {
    code: 7351,
    lower: [],
    title: [],
    upper: [],
    fold: 4343,
    foldFull: [4343]
  }, {
    code: 7352,
    lower: [],
    title: [],
    upper: [],
    fold: 4344,
    foldFull: [4344]
  }, {
    code: 7353,
    lower: [],
    title: [],
    upper: [],
    fold: 4345,
    foldFull: [4345]
  }, {
    code: 7354,
    lower: [],
    title: [],
    upper: [],
    fold: 4346,
    foldFull: [4346]
  }, {
    code: 7357,
    lower: [],
    title: [],
    upper: [],
    fold: 4349,
    foldFull: [4349]
  }, {
    code: 7358,
    lower: [],
    title: [],
    upper: [],
    fold: 4350,
    foldFull: [4350]
  }, {
    code: 7359,
    lower: [],
    title: [],
    upper: [],
    fold: 4351,
    foldFull: [4351]
  }, {
    code: 7680,
    lower: [],
    title: [],
    upper: [],
    fold: 7681,
    foldFull: [7681]
  }, {
    code: 7682,
    lower: [],
    title: [],
    upper: [],
    fold: 7683,
    foldFull: [7683]
  }, {
    code: 7684,
    lower: [],
    title: [],
    upper: [],
    fold: 7685,
    foldFull: [7685]
  }, {
    code: 7686,
    lower: [],
    title: [],
    upper: [],
    fold: 7687,
    foldFull: [7687]
  }, {
    code: 7688,
    lower: [],
    title: [],
    upper: [],
    fold: 7689,
    foldFull: [7689]
  }, {
    code: 7690,
    lower: [],
    title: [],
    upper: [],
    fold: 7691,
    foldFull: [7691]
  }, {
    code: 7692,
    lower: [],
    title: [],
    upper: [],
    fold: 7693,
    foldFull: [7693]
  }, {
    code: 7694,
    lower: [],
    title: [],
    upper: [],
    fold: 7695,
    foldFull: [7695]
  }, {
    code: 7696,
    lower: [],
    title: [],
    upper: [],
    fold: 7697,
    foldFull: [7697]
  }, {
    code: 7698,
    lower: [],
    title: [],
    upper: [],
    fold: 7699,
    foldFull: [7699]
  }, {
    code: 7700,
    lower: [],
    title: [],
    upper: [],
    fold: 7701,
    foldFull: [7701]
  }, {
    code: 7702,
    lower: [],
    title: [],
    upper: [],
    fold: 7703,
    foldFull: [7703]
  }, {
    code: 7704,
    lower: [],
    title: [],
    upper: [],
    fold: 7705,
    foldFull: [7705]
  }, {
    code: 7706,
    lower: [],
    title: [],
    upper: [],
    fold: 7707,
    foldFull: [7707]
  }, {
    code: 7708,
    lower: [],
    title: [],
    upper: [],
    fold: 7709,
    foldFull: [7709]
  }, {
    code: 7710,
    lower: [],
    title: [],
    upper: [],
    fold: 7711,
    foldFull: [7711]
  }, {
    code: 7712,
    lower: [],
    title: [],
    upper: [],
    fold: 7713,
    foldFull: [7713]
  }, {
    code: 7714,
    lower: [],
    title: [],
    upper: [],
    fold: 7715,
    foldFull: [7715]
  }, {
    code: 7716,
    lower: [],
    title: [],
    upper: [],
    fold: 7717,
    foldFull: [7717]
  }, {
    code: 7718,
    lower: [],
    title: [],
    upper: [],
    fold: 7719,
    foldFull: [7719]
  }, {
    code: 7720,
    lower: [],
    title: [],
    upper: [],
    fold: 7721,
    foldFull: [7721]
  }, {
    code: 7722,
    lower: [],
    title: [],
    upper: [],
    fold: 7723,
    foldFull: [7723]
  }, {
    code: 7724,
    lower: [],
    title: [],
    upper: [],
    fold: 7725,
    foldFull: [7725]
  }, {
    code: 7726,
    lower: [],
    title: [],
    upper: [],
    fold: 7727,
    foldFull: [7727]
  }, {
    code: 7728,
    lower: [],
    title: [],
    upper: [],
    fold: 7729,
    foldFull: [7729]
  }, {
    code: 7730,
    lower: [],
    title: [],
    upper: [],
    fold: 7731,
    foldFull: [7731]
  }, {
    code: 7732,
    lower: [],
    title: [],
    upper: [],
    fold: 7733,
    foldFull: [7733]
  }, {
    code: 7734,
    lower: [],
    title: [],
    upper: [],
    fold: 7735,
    foldFull: [7735]
  }, {
    code: 7736,
    lower: [],
    title: [],
    upper: [],
    fold: 7737,
    foldFull: [7737]
  }, {
    code: 7738,
    lower: [],
    title: [],
    upper: [],
    fold: 7739,
    foldFull: [7739]
  }, {
    code: 7740,
    lower: [],
    title: [],
    upper: [],
    fold: 7741,
    foldFull: [7741]
  }, {
    code: 7742,
    lower: [],
    title: [],
    upper: [],
    fold: 7743,
    foldFull: [7743]
  }, {
    code: 7744,
    lower: [],
    title: [],
    upper: [],
    fold: 7745,
    foldFull: [7745]
  }, {
    code: 7746,
    lower: [],
    title: [],
    upper: [],
    fold: 7747,
    foldFull: [7747]
  }, {
    code: 7748,
    lower: [],
    title: [],
    upper: [],
    fold: 7749,
    foldFull: [7749]
  }, {
    code: 7750,
    lower: [],
    title: [],
    upper: [],
    fold: 7751,
    foldFull: [7751]
  }, {
    code: 7752,
    lower: [],
    title: [],
    upper: [],
    fold: 7753,
    foldFull: [7753]
  }, {
    code: 7754,
    lower: [],
    title: [],
    upper: [],
    fold: 7755,
    foldFull: [7755]
  }, {
    code: 7756,
    lower: [],
    title: [],
    upper: [],
    fold: 7757,
    foldFull: [7757]
  }, {
    code: 7758,
    lower: [],
    title: [],
    upper: [],
    fold: 7759,
    foldFull: [7759]
  }, {
    code: 7760,
    lower: [],
    title: [],
    upper: [],
    fold: 7761,
    foldFull: [7761]
  }, {
    code: 7762,
    lower: [],
    title: [],
    upper: [],
    fold: 7763,
    foldFull: [7763]
  }, {
    code: 7764,
    lower: [],
    title: [],
    upper: [],
    fold: 7765,
    foldFull: [7765]
  }, {
    code: 7766,
    lower: [],
    title: [],
    upper: [],
    fold: 7767,
    foldFull: [7767]
  }, {
    code: 7768,
    lower: [],
    title: [],
    upper: [],
    fold: 7769,
    foldFull: [7769]
  }, {
    code: 7770,
    lower: [],
    title: [],
    upper: [],
    fold: 7771,
    foldFull: [7771]
  }, {
    code: 7772,
    lower: [],
    title: [],
    upper: [],
    fold: 7773,
    foldFull: [7773]
  }, {
    code: 7774,
    lower: [],
    title: [],
    upper: [],
    fold: 7775,
    foldFull: [7775]
  }, {
    code: 7776,
    lower: [],
    title: [],
    upper: [],
    fold: 7777,
    foldFull: [7777]
  }, {
    code: 7778,
    lower: [],
    title: [],
    upper: [],
    fold: 7779,
    foldFull: [7779]
  }, {
    code: 7780,
    lower: [],
    title: [],
    upper: [],
    fold: 7781,
    foldFull: [7781]
  }, {
    code: 7782,
    lower: [],
    title: [],
    upper: [],
    fold: 7783,
    foldFull: [7783]
  }, {
    code: 7784,
    lower: [],
    title: [],
    upper: [],
    fold: 7785,
    foldFull: [7785]
  }, {
    code: 7786,
    lower: [],
    title: [],
    upper: [],
    fold: 7787,
    foldFull: [7787]
  }, {
    code: 7788,
    lower: [],
    title: [],
    upper: [],
    fold: 7789,
    foldFull: [7789]
  }, {
    code: 7790,
    lower: [],
    title: [],
    upper: [],
    fold: 7791,
    foldFull: [7791]
  }, {
    code: 7792,
    lower: [],
    title: [],
    upper: [],
    fold: 7793,
    foldFull: [7793]
  }, {
    code: 7794,
    lower: [],
    title: [],
    upper: [],
    fold: 7795,
    foldFull: [7795]
  }, {
    code: 7796,
    lower: [],
    title: [],
    upper: [],
    fold: 7797,
    foldFull: [7797]
  }, {
    code: 7798,
    lower: [],
    title: [],
    upper: [],
    fold: 7799,
    foldFull: [7799]
  }, {
    code: 7800,
    lower: [],
    title: [],
    upper: [],
    fold: 7801,
    foldFull: [7801]
  }, {
    code: 7802,
    lower: [],
    title: [],
    upper: [],
    fold: 7803,
    foldFull: [7803]
  }, {
    code: 7804,
    lower: [],
    title: [],
    upper: [],
    fold: 7805,
    foldFull: [7805]
  }, {
    code: 7806,
    lower: [],
    title: [],
    upper: [],
    fold: 7807,
    foldFull: [7807]
  }, {
    code: 7808,
    lower: [],
    title: [],
    upper: [],
    fold: 7809,
    foldFull: [7809]
  }, {
    code: 7810,
    lower: [],
    title: [],
    upper: [],
    fold: 7811,
    foldFull: [7811]
  }, {
    code: 7812,
    lower: [],
    title: [],
    upper: [],
    fold: 7813,
    foldFull: [7813]
  }, {
    code: 7814,
    lower: [],
    title: [],
    upper: [],
    fold: 7815,
    foldFull: [7815]
  }, {
    code: 7816,
    lower: [],
    title: [],
    upper: [],
    fold: 7817,
    foldFull: [7817]
  }, {
    code: 7818,
    lower: [],
    title: [],
    upper: [],
    fold: 7819,
    foldFull: [7819]
  }, {
    code: 7820,
    lower: [],
    title: [],
    upper: [],
    fold: 7821,
    foldFull: [7821]
  }, {
    code: 7822,
    lower: [],
    title: [],
    upper: [],
    fold: 7823,
    foldFull: [7823]
  }, {
    code: 7824,
    lower: [],
    title: [],
    upper: [],
    fold: 7825,
    foldFull: [7825]
  }, {
    code: 7826,
    lower: [],
    title: [],
    upper: [],
    fold: 7827,
    foldFull: [7827]
  }, {
    code: 7828,
    lower: [],
    title: [],
    upper: [],
    fold: 7829,
    foldFull: [7829]
  }, {
    code: 7830,
    lower: [7830],
    title: [72, 817],
    upper: [72, 817],
    fold: 0,
    foldFull: [104, 817]
  }, {
    code: 7830,
    lower: [7830],
    title: [72, 817],
    upper: [72, 817],
    fold: 0,
    foldFull: [104, 817]
  }, {
    code: 7831,
    lower: [7831],
    title: [84, 776],
    upper: [84, 776],
    fold: 0,
    foldFull: [116, 776]
  }, {
    code: 7831,
    lower: [7831],
    title: [84, 776],
    upper: [84, 776],
    fold: 0,
    foldFull: [116, 776]
  }, {
    code: 7832,
    lower: [7832],
    title: [87, 778],
    upper: [87, 778],
    fold: 0,
    foldFull: [119, 778]
  }, {
    code: 7832,
    lower: [7832],
    title: [87, 778],
    upper: [87, 778],
    fold: 0,
    foldFull: [119, 778]
  }, {
    code: 7833,
    lower: [7833],
    title: [89, 778],
    upper: [89, 778],
    fold: 0,
    foldFull: [121, 778]
  }, {
    code: 7833,
    lower: [7833],
    title: [89, 778],
    upper: [89, 778],
    fold: 0,
    foldFull: [121, 778]
  }, {
    code: 7834,
    lower: [7834],
    title: [65, 702],
    upper: [65, 702],
    fold: 0,
    foldFull: [97, 702]
  }, {
    code: 7834,
    lower: [7834],
    title: [65, 702],
    upper: [65, 702],
    fold: 0,
    foldFull: [97, 702]
  }, {
    code: 7835,
    lower: [],
    title: [],
    upper: [],
    fold: 7777,
    foldFull: [7777]
  }, {
    code: 7838,
    lower: [],
    title: [],
    upper: [],
    fold: 223,
    foldFull: [115, 115]
  }, {
    code: 7840,
    lower: [],
    title: [],
    upper: [],
    fold: 7841,
    foldFull: [7841]
  }, {
    code: 7842,
    lower: [],
    title: [],
    upper: [],
    fold: 7843,
    foldFull: [7843]
  }, {
    code: 7844,
    lower: [],
    title: [],
    upper: [],
    fold: 7845,
    foldFull: [7845]
  }, {
    code: 7846,
    lower: [],
    title: [],
    upper: [],
    fold: 7847,
    foldFull: [7847]
  }, {
    code: 7848,
    lower: [],
    title: [],
    upper: [],
    fold: 7849,
    foldFull: [7849]
  }, {
    code: 7850,
    lower: [],
    title: [],
    upper: [],
    fold: 7851,
    foldFull: [7851]
  }, {
    code: 7852,
    lower: [],
    title: [],
    upper: [],
    fold: 7853,
    foldFull: [7853]
  }, {
    code: 7854,
    lower: [],
    title: [],
    upper: [],
    fold: 7855,
    foldFull: [7855]
  }, {
    code: 7856,
    lower: [],
    title: [],
    upper: [],
    fold: 7857,
    foldFull: [7857]
  }, {
    code: 7858,
    lower: [],
    title: [],
    upper: [],
    fold: 7859,
    foldFull: [7859]
  }, {
    code: 7860,
    lower: [],
    title: [],
    upper: [],
    fold: 7861,
    foldFull: [7861]
  }, {
    code: 7862,
    lower: [],
    title: [],
    upper: [],
    fold: 7863,
    foldFull: [7863]
  }, {
    code: 7864,
    lower: [],
    title: [],
    upper: [],
    fold: 7865,
    foldFull: [7865]
  }, {
    code: 7866,
    lower: [],
    title: [],
    upper: [],
    fold: 7867,
    foldFull: [7867]
  }, {
    code: 7868,
    lower: [],
    title: [],
    upper: [],
    fold: 7869,
    foldFull: [7869]
  }, {
    code: 7870,
    lower: [],
    title: [],
    upper: [],
    fold: 7871,
    foldFull: [7871]
  }, {
    code: 7872,
    lower: [],
    title: [],
    upper: [],
    fold: 7873,
    foldFull: [7873]
  }, {
    code: 7874,
    lower: [],
    title: [],
    upper: [],
    fold: 7875,
    foldFull: [7875]
  }, {
    code: 7876,
    lower: [],
    title: [],
    upper: [],
    fold: 7877,
    foldFull: [7877]
  }, {
    code: 7878,
    lower: [],
    title: [],
    upper: [],
    fold: 7879,
    foldFull: [7879]
  }, {
    code: 7880,
    lower: [],
    title: [],
    upper: [],
    fold: 7881,
    foldFull: [7881]
  }, {
    code: 7882,
    lower: [],
    title: [],
    upper: [],
    fold: 7883,
    foldFull: [7883]
  }, {
    code: 7884,
    lower: [],
    title: [],
    upper: [],
    fold: 7885,
    foldFull: [7885]
  }, {
    code: 7886,
    lower: [],
    title: [],
    upper: [],
    fold: 7887,
    foldFull: [7887]
  }, {
    code: 7888,
    lower: [],
    title: [],
    upper: [],
    fold: 7889,
    foldFull: [7889]
  }, {
    code: 7890,
    lower: [],
    title: [],
    upper: [],
    fold: 7891,
    foldFull: [7891]
  }, {
    code: 7892,
    lower: [],
    title: [],
    upper: [],
    fold: 7893,
    foldFull: [7893]
  }, {
    code: 7894,
    lower: [],
    title: [],
    upper: [],
    fold: 7895,
    foldFull: [7895]
  }, {
    code: 7896,
    lower: [],
    title: [],
    upper: [],
    fold: 7897,
    foldFull: [7897]
  }, {
    code: 7898,
    lower: [],
    title: [],
    upper: [],
    fold: 7899,
    foldFull: [7899]
  }, {
    code: 7900,
    lower: [],
    title: [],
    upper: [],
    fold: 7901,
    foldFull: [7901]
  }, {
    code: 7902,
    lower: [],
    title: [],
    upper: [],
    fold: 7903,
    foldFull: [7903]
  }, {
    code: 7904,
    lower: [],
    title: [],
    upper: [],
    fold: 7905,
    foldFull: [7905]
  }, {
    code: 7906,
    lower: [],
    title: [],
    upper: [],
    fold: 7907,
    foldFull: [7907]
  }, {
    code: 7908,
    lower: [],
    title: [],
    upper: [],
    fold: 7909,
    foldFull: [7909]
  }, {
    code: 7910,
    lower: [],
    title: [],
    upper: [],
    fold: 7911,
    foldFull: [7911]
  }, {
    code: 7912,
    lower: [],
    title: [],
    upper: [],
    fold: 7913,
    foldFull: [7913]
  }, {
    code: 7914,
    lower: [],
    title: [],
    upper: [],
    fold: 7915,
    foldFull: [7915]
  }, {
    code: 7916,
    lower: [],
    title: [],
    upper: [],
    fold: 7917,
    foldFull: [7917]
  }, {
    code: 7918,
    lower: [],
    title: [],
    upper: [],
    fold: 7919,
    foldFull: [7919]
  }, {
    code: 7920,
    lower: [],
    title: [],
    upper: [],
    fold: 7921,
    foldFull: [7921]
  }, {
    code: 7922,
    lower: [],
    title: [],
    upper: [],
    fold: 7923,
    foldFull: [7923]
  }, {
    code: 7924,
    lower: [],
    title: [],
    upper: [],
    fold: 7925,
    foldFull: [7925]
  }, {
    code: 7926,
    lower: [],
    title: [],
    upper: [],
    fold: 7927,
    foldFull: [7927]
  }, {
    code: 7928,
    lower: [],
    title: [],
    upper: [],
    fold: 7929,
    foldFull: [7929]
  }, {
    code: 7930,
    lower: [],
    title: [],
    upper: [],
    fold: 7931,
    foldFull: [7931]
  }, {
    code: 7932,
    lower: [],
    title: [],
    upper: [],
    fold: 7933,
    foldFull: [7933]
  }, {
    code: 7934,
    lower: [],
    title: [],
    upper: [],
    fold: 7935,
    foldFull: [7935]
  }, {
    code: 7944,
    lower: [],
    title: [],
    upper: [],
    fold: 7936,
    foldFull: [7936]
  }, {
    code: 7945,
    lower: [],
    title: [],
    upper: [],
    fold: 7937,
    foldFull: [7937]
  }, {
    code: 7946,
    lower: [],
    title: [],
    upper: [],
    fold: 7938,
    foldFull: [7938]
  }, {
    code: 7947,
    lower: [],
    title: [],
    upper: [],
    fold: 7939,
    foldFull: [7939]
  }, {
    code: 7948,
    lower: [],
    title: [],
    upper: [],
    fold: 7940,
    foldFull: [7940]
  }, {
    code: 7949,
    lower: [],
    title: [],
    upper: [],
    fold: 7941,
    foldFull: [7941]
  }, {
    code: 7950,
    lower: [],
    title: [],
    upper: [],
    fold: 7942,
    foldFull: [7942]
  }, {
    code: 7951,
    lower: [],
    title: [],
    upper: [],
    fold: 7943,
    foldFull: [7943]
  }, {
    code: 7960,
    lower: [],
    title: [],
    upper: [],
    fold: 7952,
    foldFull: [7952]
  }, {
    code: 7961,
    lower: [],
    title: [],
    upper: [],
    fold: 7953,
    foldFull: [7953]
  }, {
    code: 7962,
    lower: [],
    title: [],
    upper: [],
    fold: 7954,
    foldFull: [7954]
  }, {
    code: 7963,
    lower: [],
    title: [],
    upper: [],
    fold: 7955,
    foldFull: [7955]
  }, {
    code: 7964,
    lower: [],
    title: [],
    upper: [],
    fold: 7956,
    foldFull: [7956]
  }, {
    code: 7965,
    lower: [],
    title: [],
    upper: [],
    fold: 7957,
    foldFull: [7957]
  }, {
    code: 7976,
    lower: [],
    title: [],
    upper: [],
    fold: 7968,
    foldFull: [7968]
  }, {
    code: 7977,
    lower: [],
    title: [],
    upper: [],
    fold: 7969,
    foldFull: [7969]
  }, {
    code: 7978,
    lower: [],
    title: [],
    upper: [],
    fold: 7970,
    foldFull: [7970]
  }, {
    code: 7979,
    lower: [],
    title: [],
    upper: [],
    fold: 7971,
    foldFull: [7971]
  }, {
    code: 7980,
    lower: [],
    title: [],
    upper: [],
    fold: 7972,
    foldFull: [7972]
  }, {
    code: 7981,
    lower: [],
    title: [],
    upper: [],
    fold: 7973,
    foldFull: [7973]
  }, {
    code: 7982,
    lower: [],
    title: [],
    upper: [],
    fold: 7974,
    foldFull: [7974]
  }, {
    code: 7983,
    lower: [],
    title: [],
    upper: [],
    fold: 7975,
    foldFull: [7975]
  }, {
    code: 7992,
    lower: [],
    title: [],
    upper: [],
    fold: 7984,
    foldFull: [7984]
  }, {
    code: 7993,
    lower: [],
    title: [],
    upper: [],
    fold: 7985,
    foldFull: [7985]
  }, {
    code: 7994,
    lower: [],
    title: [],
    upper: [],
    fold: 7986,
    foldFull: [7986]
  }, {
    code: 7995,
    lower: [],
    title: [],
    upper: [],
    fold: 7987,
    foldFull: [7987]
  }, {
    code: 7996,
    lower: [],
    title: [],
    upper: [],
    fold: 7988,
    foldFull: [7988]
  }, {
    code: 7997,
    lower: [],
    title: [],
    upper: [],
    fold: 7989,
    foldFull: [7989]
  }, {
    code: 7998,
    lower: [],
    title: [],
    upper: [],
    fold: 7990,
    foldFull: [7990]
  }, {
    code: 7999,
    lower: [],
    title: [],
    upper: [],
    fold: 7991,
    foldFull: [7991]
  }, {
    code: 8008,
    lower: [],
    title: [],
    upper: [],
    fold: 8e3,
    foldFull: [8e3]
  }, {
    code: 8009,
    lower: [],
    title: [],
    upper: [],
    fold: 8001,
    foldFull: [8001]
  }, {
    code: 8010,
    lower: [],
    title: [],
    upper: [],
    fold: 8002,
    foldFull: [8002]
  }, {
    code: 8011,
    lower: [],
    title: [],
    upper: [],
    fold: 8003,
    foldFull: [8003]
  }, {
    code: 8012,
    lower: [],
    title: [],
    upper: [],
    fold: 8004,
    foldFull: [8004]
  }, {
    code: 8013,
    lower: [],
    title: [],
    upper: [],
    fold: 8005,
    foldFull: [8005]
  }, {
    code: 8016,
    lower: [8016],
    title: [933, 787],
    upper: [933, 787],
    fold: 0,
    foldFull: [965, 787]
  }, {
    code: 8016,
    lower: [8016],
    title: [933, 787],
    upper: [933, 787],
    fold: 0,
    foldFull: [965, 787]
  }, {
    code: 8018,
    lower: [8018],
    title: [933, 787, 768],
    upper: [933, 787, 768],
    fold: 0,
    foldFull: [965, 787, 768]
  }, {
    code: 8018,
    lower: [8018],
    title: [933, 787, 768],
    upper: [933, 787, 768],
    fold: 0,
    foldFull: [965, 787, 768]
  }, {
    code: 8020,
    lower: [8020],
    title: [933, 787, 769],
    upper: [933, 787, 769],
    fold: 0,
    foldFull: [965, 787, 769]
  }, {
    code: 8020,
    lower: [8020],
    title: [933, 787, 769],
    upper: [933, 787, 769],
    fold: 0,
    foldFull: [965, 787, 769]
  }, {
    code: 8022,
    lower: [8022],
    title: [933, 787, 834],
    upper: [933, 787, 834],
    fold: 0,
    foldFull: [965, 787, 834]
  }, {
    code: 8022,
    lower: [8022],
    title: [933, 787, 834],
    upper: [933, 787, 834],
    fold: 0,
    foldFull: [965, 787, 834]
  }, {
    code: 8025,
    lower: [],
    title: [],
    upper: [],
    fold: 8017,
    foldFull: [8017]
  }, {
    code: 8027,
    lower: [],
    title: [],
    upper: [],
    fold: 8019,
    foldFull: [8019]
  }, {
    code: 8029,
    lower: [],
    title: [],
    upper: [],
    fold: 8021,
    foldFull: [8021]
  }, {
    code: 8031,
    lower: [],
    title: [],
    upper: [],
    fold: 8023,
    foldFull: [8023]
  }, {
    code: 8040,
    lower: [],
    title: [],
    upper: [],
    fold: 8032,
    foldFull: [8032]
  }, {
    code: 8041,
    lower: [],
    title: [],
    upper: [],
    fold: 8033,
    foldFull: [8033]
  }, {
    code: 8042,
    lower: [],
    title: [],
    upper: [],
    fold: 8034,
    foldFull: [8034]
  }, {
    code: 8043,
    lower: [],
    title: [],
    upper: [],
    fold: 8035,
    foldFull: [8035]
  }, {
    code: 8044,
    lower: [],
    title: [],
    upper: [],
    fold: 8036,
    foldFull: [8036]
  }, {
    code: 8045,
    lower: [],
    title: [],
    upper: [],
    fold: 8037,
    foldFull: [8037]
  }, {
    code: 8046,
    lower: [],
    title: [],
    upper: [],
    fold: 8038,
    foldFull: [8038]
  }, {
    code: 8047,
    lower: [],
    title: [],
    upper: [],
    fold: 8039,
    foldFull: [8039]
  }, {
    code: 8064,
    lower: [8064],
    title: [8072],
    upper: [7944, 921],
    fold: 0,
    foldFull: [7936, 953]
  }, {
    code: 8064,
    lower: [8064],
    title: [8072],
    upper: [7944, 921],
    fold: 0,
    foldFull: [7936, 953]
  }, {
    code: 8065,
    lower: [8065],
    title: [8073],
    upper: [7945, 921],
    fold: 0,
    foldFull: [7937, 953]
  }, {
    code: 8065,
    lower: [8065],
    title: [8073],
    upper: [7945, 921],
    fold: 0,
    foldFull: [7937, 953]
  }, {
    code: 8066,
    lower: [8066],
    title: [8074],
    upper: [7946, 921],
    fold: 0,
    foldFull: [7938, 953]
  }, {
    code: 8066,
    lower: [8066],
    title: [8074],
    upper: [7946, 921],
    fold: 0,
    foldFull: [7938, 953]
  }, {
    code: 8067,
    lower: [8067],
    title: [8075],
    upper: [7947, 921],
    fold: 0,
    foldFull: [7939, 953]
  }, {
    code: 8067,
    lower: [8067],
    title: [8075],
    upper: [7947, 921],
    fold: 0,
    foldFull: [7939, 953]
  }, {
    code: 8068,
    lower: [8068],
    title: [8076],
    upper: [7948, 921],
    fold: 0,
    foldFull: [7940, 953]
  }, {
    code: 8068,
    lower: [8068],
    title: [8076],
    upper: [7948, 921],
    fold: 0,
    foldFull: [7940, 953]
  }, {
    code: 8069,
    lower: [8069],
    title: [8077],
    upper: [7949, 921],
    fold: 0,
    foldFull: [7941, 953]
  }, {
    code: 8069,
    lower: [8069],
    title: [8077],
    upper: [7949, 921],
    fold: 0,
    foldFull: [7941, 953]
  }, {
    code: 8070,
    lower: [8070],
    title: [8078],
    upper: [7950, 921],
    fold: 0,
    foldFull: [7942, 953]
  }, {
    code: 8070,
    lower: [8070],
    title: [8078],
    upper: [7950, 921],
    fold: 0,
    foldFull: [7942, 953]
  }, {
    code: 8071,
    lower: [8071],
    title: [8079],
    upper: [7951, 921],
    fold: 0,
    foldFull: [7943, 953]
  }, {
    code: 8071,
    lower: [8071],
    title: [8079],
    upper: [7951, 921],
    fold: 0,
    foldFull: [7943, 953]
  }, {
    code: 8072,
    lower: [8064],
    title: [8072],
    upper: [7944, 921],
    fold: 8064,
    foldFull: [7936, 953]
  }, {
    code: 8072,
    lower: [8064],
    title: [8072],
    upper: [7944, 921],
    fold: 8064,
    foldFull: [7936, 953]
  }, {
    code: 8073,
    lower: [8065],
    title: [8073],
    upper: [7945, 921],
    fold: 8065,
    foldFull: [7937, 953]
  }, {
    code: 8073,
    lower: [8065],
    title: [8073],
    upper: [7945, 921],
    fold: 8065,
    foldFull: [7937, 953]
  }, {
    code: 8074,
    lower: [8066],
    title: [8074],
    upper: [7946, 921],
    fold: 8066,
    foldFull: [7938, 953]
  }, {
    code: 8074,
    lower: [8066],
    title: [8074],
    upper: [7946, 921],
    fold: 8066,
    foldFull: [7938, 953]
  }, {
    code: 8075,
    lower: [8067],
    title: [8075],
    upper: [7947, 921],
    fold: 8067,
    foldFull: [7939, 953]
  }, {
    code: 8075,
    lower: [8067],
    title: [8075],
    upper: [7947, 921],
    fold: 8067,
    foldFull: [7939, 953]
  }, {
    code: 8076,
    lower: [8068],
    title: [8076],
    upper: [7948, 921],
    fold: 8068,
    foldFull: [7940, 953]
  }, {
    code: 8076,
    lower: [8068],
    title: [8076],
    upper: [7948, 921],
    fold: 8068,
    foldFull: [7940, 953]
  }, {
    code: 8077,
    lower: [8069],
    title: [8077],
    upper: [7949, 921],
    fold: 8069,
    foldFull: [7941, 953]
  }, {
    code: 8077,
    lower: [8069],
    title: [8077],
    upper: [7949, 921],
    fold: 8069,
    foldFull: [7941, 953]
  }, {
    code: 8078,
    lower: [8070],
    title: [8078],
    upper: [7950, 921],
    fold: 8070,
    foldFull: [7942, 953]
  }, {
    code: 8078,
    lower: [8070],
    title: [8078],
    upper: [7950, 921],
    fold: 8070,
    foldFull: [7942, 953]
  }, {
    code: 8079,
    lower: [8071],
    title: [8079],
    upper: [7951, 921],
    fold: 8071,
    foldFull: [7943, 953]
  }, {
    code: 8079,
    lower: [8071],
    title: [8079],
    upper: [7951, 921],
    fold: 8071,
    foldFull: [7943, 953]
  }, {
    code: 8080,
    lower: [8080],
    title: [8088],
    upper: [7976, 921],
    fold: 0,
    foldFull: [7968, 953]
  }, {
    code: 8080,
    lower: [8080],
    title: [8088],
    upper: [7976, 921],
    fold: 0,
    foldFull: [7968, 953]
  }, {
    code: 8081,
    lower: [8081],
    title: [8089],
    upper: [7977, 921],
    fold: 0,
    foldFull: [7969, 953]
  }, {
    code: 8081,
    lower: [8081],
    title: [8089],
    upper: [7977, 921],
    fold: 0,
    foldFull: [7969, 953]
  }, {
    code: 8082,
    lower: [8082],
    title: [8090],
    upper: [7978, 921],
    fold: 0,
    foldFull: [7970, 953]
  }, {
    code: 8082,
    lower: [8082],
    title: [8090],
    upper: [7978, 921],
    fold: 0,
    foldFull: [7970, 953]
  }, {
    code: 8083,
    lower: [8083],
    title: [8091],
    upper: [7979, 921],
    fold: 0,
    foldFull: [7971, 953]
  }, {
    code: 8083,
    lower: [8083],
    title: [8091],
    upper: [7979, 921],
    fold: 0,
    foldFull: [7971, 953]
  }, {
    code: 8084,
    lower: [8084],
    title: [8092],
    upper: [7980, 921],
    fold: 0,
    foldFull: [7972, 953]
  }, {
    code: 8084,
    lower: [8084],
    title: [8092],
    upper: [7980, 921],
    fold: 0,
    foldFull: [7972, 953]
  }, {
    code: 8085,
    lower: [8085],
    title: [8093],
    upper: [7981, 921],
    fold: 0,
    foldFull: [7973, 953]
  }, {
    code: 8085,
    lower: [8085],
    title: [8093],
    upper: [7981, 921],
    fold: 0,
    foldFull: [7973, 953]
  }, {
    code: 8086,
    lower: [8086],
    title: [8094],
    upper: [7982, 921],
    fold: 0,
    foldFull: [7974, 953]
  }, {
    code: 8086,
    lower: [8086],
    title: [8094],
    upper: [7982, 921],
    fold: 0,
    foldFull: [7974, 953]
  }, {
    code: 8087,
    lower: [8087],
    title: [8095],
    upper: [7983, 921],
    fold: 0,
    foldFull: [7975, 953]
  }, {
    code: 8087,
    lower: [8087],
    title: [8095],
    upper: [7983, 921],
    fold: 0,
    foldFull: [7975, 953]
  }, {
    code: 8088,
    lower: [8080],
    title: [8088],
    upper: [7976, 921],
    fold: 8080,
    foldFull: [7968, 953]
  }, {
    code: 8088,
    lower: [8080],
    title: [8088],
    upper: [7976, 921],
    fold: 8080,
    foldFull: [7968, 953]
  }, {
    code: 8089,
    lower: [8081],
    title: [8089],
    upper: [7977, 921],
    fold: 8081,
    foldFull: [7969, 953]
  }, {
    code: 8089,
    lower: [8081],
    title: [8089],
    upper: [7977, 921],
    fold: 8081,
    foldFull: [7969, 953]
  }, {
    code: 8090,
    lower: [8082],
    title: [8090],
    upper: [7978, 921],
    fold: 8082,
    foldFull: [7970, 953]
  }, {
    code: 8090,
    lower: [8082],
    title: [8090],
    upper: [7978, 921],
    fold: 8082,
    foldFull: [7970, 953]
  }, {
    code: 8091,
    lower: [8083],
    title: [8091],
    upper: [7979, 921],
    fold: 8083,
    foldFull: [7971, 953]
  }, {
    code: 8091,
    lower: [8083],
    title: [8091],
    upper: [7979, 921],
    fold: 8083,
    foldFull: [7971, 953]
  }, {
    code: 8092,
    lower: [8084],
    title: [8092],
    upper: [7980, 921],
    fold: 8084,
    foldFull: [7972, 953]
  }, {
    code: 8092,
    lower: [8084],
    title: [8092],
    upper: [7980, 921],
    fold: 8084,
    foldFull: [7972, 953]
  }, {
    code: 8093,
    lower: [8085],
    title: [8093],
    upper: [7981, 921],
    fold: 8085,
    foldFull: [7973, 953]
  }, {
    code: 8093,
    lower: [8085],
    title: [8093],
    upper: [7981, 921],
    fold: 8085,
    foldFull: [7973, 953]
  }, {
    code: 8094,
    lower: [8086],
    title: [8094],
    upper: [7982, 921],
    fold: 8086,
    foldFull: [7974, 953]
  }, {
    code: 8094,
    lower: [8086],
    title: [8094],
    upper: [7982, 921],
    fold: 8086,
    foldFull: [7974, 953]
  }, {
    code: 8095,
    lower: [8087],
    title: [8095],
    upper: [7983, 921],
    fold: 8087,
    foldFull: [7975, 953]
  }, {
    code: 8095,
    lower: [8087],
    title: [8095],
    upper: [7983, 921],
    fold: 8087,
    foldFull: [7975, 953]
  }, {
    code: 8096,
    lower: [8096],
    title: [8104],
    upper: [8040, 921],
    fold: 0,
    foldFull: [8032, 953]
  }, {
    code: 8096,
    lower: [8096],
    title: [8104],
    upper: [8040, 921],
    fold: 0,
    foldFull: [8032, 953]
  }, {
    code: 8097,
    lower: [8097],
    title: [8105],
    upper: [8041, 921],
    fold: 0,
    foldFull: [8033, 953]
  }, {
    code: 8097,
    lower: [8097],
    title: [8105],
    upper: [8041, 921],
    fold: 0,
    foldFull: [8033, 953]
  }, {
    code: 8098,
    lower: [8098],
    title: [8106],
    upper: [8042, 921],
    fold: 0,
    foldFull: [8034, 953]
  }, {
    code: 8098,
    lower: [8098],
    title: [8106],
    upper: [8042, 921],
    fold: 0,
    foldFull: [8034, 953]
  }, {
    code: 8099,
    lower: [8099],
    title: [8107],
    upper: [8043, 921],
    fold: 0,
    foldFull: [8035, 953]
  }, {
    code: 8099,
    lower: [8099],
    title: [8107],
    upper: [8043, 921],
    fold: 0,
    foldFull: [8035, 953]
  }, {
    code: 8100,
    lower: [8100],
    title: [8108],
    upper: [8044, 921],
    fold: 0,
    foldFull: [8036, 953]
  }, {
    code: 8100,
    lower: [8100],
    title: [8108],
    upper: [8044, 921],
    fold: 0,
    foldFull: [8036, 953]
  }, {
    code: 8101,
    lower: [8101],
    title: [8109],
    upper: [8045, 921],
    fold: 0,
    foldFull: [8037, 953]
  }, {
    code: 8101,
    lower: [8101],
    title: [8109],
    upper: [8045, 921],
    fold: 0,
    foldFull: [8037, 953]
  }, {
    code: 8102,
    lower: [8102],
    title: [8110],
    upper: [8046, 921],
    fold: 0,
    foldFull: [8038, 953]
  }, {
    code: 8102,
    lower: [8102],
    title: [8110],
    upper: [8046, 921],
    fold: 0,
    foldFull: [8038, 953]
  }, {
    code: 8103,
    lower: [8103],
    title: [8111],
    upper: [8047, 921],
    fold: 0,
    foldFull: [8039, 953]
  }, {
    code: 8103,
    lower: [8103],
    title: [8111],
    upper: [8047, 921],
    fold: 0,
    foldFull: [8039, 953]
  }, {
    code: 8104,
    lower: [8096],
    title: [8104],
    upper: [8040, 921],
    fold: 8096,
    foldFull: [8032, 953]
  }, {
    code: 8104,
    lower: [8096],
    title: [8104],
    upper: [8040, 921],
    fold: 8096,
    foldFull: [8032, 953]
  }, {
    code: 8105,
    lower: [8097],
    title: [8105],
    upper: [8041, 921],
    fold: 8097,
    foldFull: [8033, 953]
  }, {
    code: 8105,
    lower: [8097],
    title: [8105],
    upper: [8041, 921],
    fold: 8097,
    foldFull: [8033, 953]
  }, {
    code: 8106,
    lower: [8098],
    title: [8106],
    upper: [8042, 921],
    fold: 8098,
    foldFull: [8034, 953]
  }, {
    code: 8106,
    lower: [8098],
    title: [8106],
    upper: [8042, 921],
    fold: 8098,
    foldFull: [8034, 953]
  }, {
    code: 8107,
    lower: [8099],
    title: [8107],
    upper: [8043, 921],
    fold: 8099,
    foldFull: [8035, 953]
  }, {
    code: 8107,
    lower: [8099],
    title: [8107],
    upper: [8043, 921],
    fold: 8099,
    foldFull: [8035, 953]
  }, {
    code: 8108,
    lower: [8100],
    title: [8108],
    upper: [8044, 921],
    fold: 8100,
    foldFull: [8036, 953]
  }, {
    code: 8108,
    lower: [8100],
    title: [8108],
    upper: [8044, 921],
    fold: 8100,
    foldFull: [8036, 953]
  }, {
    code: 8109,
    lower: [8101],
    title: [8109],
    upper: [8045, 921],
    fold: 8101,
    foldFull: [8037, 953]
  }, {
    code: 8109,
    lower: [8101],
    title: [8109],
    upper: [8045, 921],
    fold: 8101,
    foldFull: [8037, 953]
  }, {
    code: 8110,
    lower: [8102],
    title: [8110],
    upper: [8046, 921],
    fold: 8102,
    foldFull: [8038, 953]
  }, {
    code: 8110,
    lower: [8102],
    title: [8110],
    upper: [8046, 921],
    fold: 8102,
    foldFull: [8038, 953]
  }, {
    code: 8111,
    lower: [8103],
    title: [8111],
    upper: [8047, 921],
    fold: 8103,
    foldFull: [8039, 953]
  }, {
    code: 8111,
    lower: [8103],
    title: [8111],
    upper: [8047, 921],
    fold: 8103,
    foldFull: [8039, 953]
  }, {
    code: 8114,
    lower: [8114],
    title: [8122, 837],
    upper: [8122, 921],
    fold: 0,
    foldFull: [8048, 953]
  }, {
    code: 8114,
    lower: [8114],
    title: [8122, 837],
    upper: [8122, 921],
    fold: 0,
    foldFull: [8048, 953]
  }, {
    code: 8115,
    lower: [8115],
    title: [8124],
    upper: [913, 921],
    fold: 0,
    foldFull: [945, 953]
  }, {
    code: 8115,
    lower: [8115],
    title: [8124],
    upper: [913, 921],
    fold: 0,
    foldFull: [945, 953]
  }, {
    code: 8116,
    lower: [8116],
    title: [902, 837],
    upper: [902, 921],
    fold: 0,
    foldFull: [940, 953]
  }, {
    code: 8116,
    lower: [8116],
    title: [902, 837],
    upper: [902, 921],
    fold: 0,
    foldFull: [940, 953]
  }, {
    code: 8118,
    lower: [8118],
    title: [913, 834],
    upper: [913, 834],
    fold: 0,
    foldFull: [945, 834]
  }, {
    code: 8118,
    lower: [8118],
    title: [913, 834],
    upper: [913, 834],
    fold: 0,
    foldFull: [945, 834]
  }, {
    code: 8119,
    lower: [8119],
    title: [913, 834, 837],
    upper: [913, 834, 921],
    fold: 0,
    foldFull: [945, 834, 953]
  }, {
    code: 8119,
    lower: [8119],
    title: [913, 834, 837],
    upper: [913, 834, 921],
    fold: 0,
    foldFull: [945, 834, 953]
  }, {
    code: 8120,
    lower: [],
    title: [],
    upper: [],
    fold: 8112,
    foldFull: [8112]
  }, {
    code: 8121,
    lower: [],
    title: [],
    upper: [],
    fold: 8113,
    foldFull: [8113]
  }, {
    code: 8122,
    lower: [],
    title: [],
    upper: [],
    fold: 8048,
    foldFull: [8048]
  }, {
    code: 8123,
    lower: [],
    title: [],
    upper: [],
    fold: 8049,
    foldFull: [8049]
  }, {
    code: 8124,
    lower: [8115],
    title: [8124],
    upper: [913, 921],
    fold: 8115,
    foldFull: [945, 953]
  }, {
    code: 8124,
    lower: [8115],
    title: [8124],
    upper: [913, 921],
    fold: 8115,
    foldFull: [945, 953]
  }, {
    code: 8126,
    lower: [],
    title: [],
    upper: [],
    fold: 953,
    foldFull: [953]
  }, {
    code: 8130,
    lower: [8130],
    title: [8138, 837],
    upper: [8138, 921],
    fold: 0,
    foldFull: [8052, 953]
  }, {
    code: 8130,
    lower: [8130],
    title: [8138, 837],
    upper: [8138, 921],
    fold: 0,
    foldFull: [8052, 953]
  }, {
    code: 8131,
    lower: [8131],
    title: [8140],
    upper: [919, 921],
    fold: 0,
    foldFull: [951, 953]
  }, {
    code: 8131,
    lower: [8131],
    title: [8140],
    upper: [919, 921],
    fold: 0,
    foldFull: [951, 953]
  }, {
    code: 8132,
    lower: [8132],
    title: [905, 837],
    upper: [905, 921],
    fold: 0,
    foldFull: [942, 953]
  }, {
    code: 8132,
    lower: [8132],
    title: [905, 837],
    upper: [905, 921],
    fold: 0,
    foldFull: [942, 953]
  }, {
    code: 8134,
    lower: [8134],
    title: [919, 834],
    upper: [919, 834],
    fold: 0,
    foldFull: [951, 834]
  }, {
    code: 8134,
    lower: [8134],
    title: [919, 834],
    upper: [919, 834],
    fold: 0,
    foldFull: [951, 834]
  }, {
    code: 8135,
    lower: [8135],
    title: [919, 834, 837],
    upper: [919, 834, 921],
    fold: 0,
    foldFull: [951, 834, 953]
  }, {
    code: 8135,
    lower: [8135],
    title: [919, 834, 837],
    upper: [919, 834, 921],
    fold: 0,
    foldFull: [951, 834, 953]
  }, {
    code: 8136,
    lower: [],
    title: [],
    upper: [],
    fold: 8050,
    foldFull: [8050]
  }, {
    code: 8137,
    lower: [],
    title: [],
    upper: [],
    fold: 8051,
    foldFull: [8051]
  }, {
    code: 8138,
    lower: [],
    title: [],
    upper: [],
    fold: 8052,
    foldFull: [8052]
  }, {
    code: 8139,
    lower: [],
    title: [],
    upper: [],
    fold: 8053,
    foldFull: [8053]
  }, {
    code: 8140,
    lower: [8131],
    title: [8140],
    upper: [919, 921],
    fold: 8131,
    foldFull: [951, 953]
  }, {
    code: 8140,
    lower: [8131],
    title: [8140],
    upper: [919, 921],
    fold: 8131,
    foldFull: [951, 953]
  }, {
    code: 8146,
    lower: [8146],
    title: [921, 776, 768],
    upper: [921, 776, 768],
    fold: 0,
    foldFull: [953, 776, 768]
  }, {
    code: 8146,
    lower: [8146],
    title: [921, 776, 768],
    upper: [921, 776, 768],
    fold: 0,
    foldFull: [953, 776, 768]
  }, {
    code: 8147,
    lower: [8147],
    title: [921, 776, 769],
    upper: [921, 776, 769],
    fold: 0,
    foldFull: [953, 776, 769]
  }, {
    code: 8147,
    lower: [8147],
    title: [921, 776, 769],
    upper: [921, 776, 769],
    fold: 0,
    foldFull: [953, 776, 769]
  }, {
    code: 8150,
    lower: [8150],
    title: [921, 834],
    upper: [921, 834],
    fold: 0,
    foldFull: [953, 834]
  }, {
    code: 8150,
    lower: [8150],
    title: [921, 834],
    upper: [921, 834],
    fold: 0,
    foldFull: [953, 834]
  }, {
    code: 8151,
    lower: [8151],
    title: [921, 776, 834],
    upper: [921, 776, 834],
    fold: 0,
    foldFull: [953, 776, 834]
  }, {
    code: 8151,
    lower: [8151],
    title: [921, 776, 834],
    upper: [921, 776, 834],
    fold: 0,
    foldFull: [953, 776, 834]
  }, {
    code: 8152,
    lower: [],
    title: [],
    upper: [],
    fold: 8144,
    foldFull: [8144]
  }, {
    code: 8153,
    lower: [],
    title: [],
    upper: [],
    fold: 8145,
    foldFull: [8145]
  }, {
    code: 8154,
    lower: [],
    title: [],
    upper: [],
    fold: 8054,
    foldFull: [8054]
  }, {
    code: 8155,
    lower: [],
    title: [],
    upper: [],
    fold: 8055,
    foldFull: [8055]
  }, {
    code: 8162,
    lower: [8162],
    title: [933, 776, 768],
    upper: [933, 776, 768],
    fold: 0,
    foldFull: [965, 776, 768]
  }, {
    code: 8162,
    lower: [8162],
    title: [933, 776, 768],
    upper: [933, 776, 768],
    fold: 0,
    foldFull: [965, 776, 768]
  }, {
    code: 8163,
    lower: [8163],
    title: [933, 776, 769],
    upper: [933, 776, 769],
    fold: 0,
    foldFull: [965, 776, 769]
  }, {
    code: 8163,
    lower: [8163],
    title: [933, 776, 769],
    upper: [933, 776, 769],
    fold: 0,
    foldFull: [965, 776, 769]
  }, {
    code: 8164,
    lower: [8164],
    title: [929, 787],
    upper: [929, 787],
    fold: 0,
    foldFull: [961, 787]
  }, {
    code: 8164,
    lower: [8164],
    title: [929, 787],
    upper: [929, 787],
    fold: 0,
    foldFull: [961, 787]
  }, {
    code: 8166,
    lower: [8166],
    title: [933, 834],
    upper: [933, 834],
    fold: 0,
    foldFull: [965, 834]
  }, {
    code: 8166,
    lower: [8166],
    title: [933, 834],
    upper: [933, 834],
    fold: 0,
    foldFull: [965, 834]
  }, {
    code: 8167,
    lower: [8167],
    title: [933, 776, 834],
    upper: [933, 776, 834],
    fold: 0,
    foldFull: [965, 776, 834]
  }, {
    code: 8167,
    lower: [8167],
    title: [933, 776, 834],
    upper: [933, 776, 834],
    fold: 0,
    foldFull: [965, 776, 834]
  }, {
    code: 8168,
    lower: [],
    title: [],
    upper: [],
    fold: 8160,
    foldFull: [8160]
  }, {
    code: 8169,
    lower: [],
    title: [],
    upper: [],
    fold: 8161,
    foldFull: [8161]
  }, {
    code: 8170,
    lower: [],
    title: [],
    upper: [],
    fold: 8058,
    foldFull: [8058]
  }, {
    code: 8171,
    lower: [],
    title: [],
    upper: [],
    fold: 8059,
    foldFull: [8059]
  }, {
    code: 8172,
    lower: [],
    title: [],
    upper: [],
    fold: 8165,
    foldFull: [8165]
  }, {
    code: 8178,
    lower: [8178],
    title: [8186, 837],
    upper: [8186, 921],
    fold: 0,
    foldFull: [8060, 953]
  }, {
    code: 8178,
    lower: [8178],
    title: [8186, 837],
    upper: [8186, 921],
    fold: 0,
    foldFull: [8060, 953]
  }, {
    code: 8179,
    lower: [8179],
    title: [8188],
    upper: [937, 921],
    fold: 0,
    foldFull: [969, 953]
  }, {
    code: 8179,
    lower: [8179],
    title: [8188],
    upper: [937, 921],
    fold: 0,
    foldFull: [969, 953]
  }, {
    code: 8180,
    lower: [8180],
    title: [911, 837],
    upper: [911, 921],
    fold: 0,
    foldFull: [974, 953]
  }, {
    code: 8180,
    lower: [8180],
    title: [911, 837],
    upper: [911, 921],
    fold: 0,
    foldFull: [974, 953]
  }, {
    code: 8182,
    lower: [8182],
    title: [937, 834],
    upper: [937, 834],
    fold: 0,
    foldFull: [969, 834]
  }, {
    code: 8182,
    lower: [8182],
    title: [937, 834],
    upper: [937, 834],
    fold: 0,
    foldFull: [969, 834]
  }, {
    code: 8183,
    lower: [8183],
    title: [937, 834, 837],
    upper: [937, 834, 921],
    fold: 0,
    foldFull: [969, 834, 953]
  }, {
    code: 8183,
    lower: [8183],
    title: [937, 834, 837],
    upper: [937, 834, 921],
    fold: 0,
    foldFull: [969, 834, 953]
  }, {
    code: 8184,
    lower: [],
    title: [],
    upper: [],
    fold: 8056,
    foldFull: [8056]
  }, {
    code: 8185,
    lower: [],
    title: [],
    upper: [],
    fold: 8057,
    foldFull: [8057]
  }, {
    code: 8186,
    lower: [],
    title: [],
    upper: [],
    fold: 8060,
    foldFull: [8060]
  }, {
    code: 8187,
    lower: [],
    title: [],
    upper: [],
    fold: 8061,
    foldFull: [8061]
  }, {
    code: 8188,
    lower: [8179],
    title: [8188],
    upper: [937, 921],
    fold: 8179,
    foldFull: [969, 953]
  }, {
    code: 8188,
    lower: [8179],
    title: [8188],
    upper: [937, 921],
    fold: 8179,
    foldFull: [969, 953]
  }, {
    code: 8486,
    lower: [],
    title: [],
    upper: [],
    fold: 969,
    foldFull: [969]
  }, {
    code: 8490,
    lower: [],
    title: [],
    upper: [],
    fold: 107,
    foldFull: [107]
  }, {
    code: 8491,
    lower: [],
    title: [],
    upper: [],
    fold: 229,
    foldFull: [229]
  }, {
    code: 8498,
    lower: [],
    title: [],
    upper: [],
    fold: 8526,
    foldFull: [8526]
  }, {
    code: 8544,
    lower: [],
    title: [],
    upper: [],
    fold: 8560,
    foldFull: [8560]
  }, {
    code: 8545,
    lower: [],
    title: [],
    upper: [],
    fold: 8561,
    foldFull: [8561]
  }, {
    code: 8546,
    lower: [],
    title: [],
    upper: [],
    fold: 8562,
    foldFull: [8562]
  }, {
    code: 8547,
    lower: [],
    title: [],
    upper: [],
    fold: 8563,
    foldFull: [8563]
  }, {
    code: 8548,
    lower: [],
    title: [],
    upper: [],
    fold: 8564,
    foldFull: [8564]
  }, {
    code: 8549,
    lower: [],
    title: [],
    upper: [],
    fold: 8565,
    foldFull: [8565]
  }, {
    code: 8550,
    lower: [],
    title: [],
    upper: [],
    fold: 8566,
    foldFull: [8566]
  }, {
    code: 8551,
    lower: [],
    title: [],
    upper: [],
    fold: 8567,
    foldFull: [8567]
  }, {
    code: 8552,
    lower: [],
    title: [],
    upper: [],
    fold: 8568,
    foldFull: [8568]
  }, {
    code: 8553,
    lower: [],
    title: [],
    upper: [],
    fold: 8569,
    foldFull: [8569]
  }, {
    code: 8554,
    lower: [],
    title: [],
    upper: [],
    fold: 8570,
    foldFull: [8570]
  }, {
    code: 8555,
    lower: [],
    title: [],
    upper: [],
    fold: 8571,
    foldFull: [8571]
  }, {
    code: 8556,
    lower: [],
    title: [],
    upper: [],
    fold: 8572,
    foldFull: [8572]
  }, {
    code: 8557,
    lower: [],
    title: [],
    upper: [],
    fold: 8573,
    foldFull: [8573]
  }, {
    code: 8558,
    lower: [],
    title: [],
    upper: [],
    fold: 8574,
    foldFull: [8574]
  }, {
    code: 8559,
    lower: [],
    title: [],
    upper: [],
    fold: 8575,
    foldFull: [8575]
  }, {
    code: 8579,
    lower: [],
    title: [],
    upper: [],
    fold: 8580,
    foldFull: [8580]
  }, {
    code: 9398,
    lower: [],
    title: [],
    upper: [],
    fold: 9424,
    foldFull: [9424]
  }, {
    code: 9399,
    lower: [],
    title: [],
    upper: [],
    fold: 9425,
    foldFull: [9425]
  }, {
    code: 9400,
    lower: [],
    title: [],
    upper: [],
    fold: 9426,
    foldFull: [9426]
  }, {
    code: 9401,
    lower: [],
    title: [],
    upper: [],
    fold: 9427,
    foldFull: [9427]
  }, {
    code: 9402,
    lower: [],
    title: [],
    upper: [],
    fold: 9428,
    foldFull: [9428]
  }, {
    code: 9403,
    lower: [],
    title: [],
    upper: [],
    fold: 9429,
    foldFull: [9429]
  }, {
    code: 9404,
    lower: [],
    title: [],
    upper: [],
    fold: 9430,
    foldFull: [9430]
  }, {
    code: 9405,
    lower: [],
    title: [],
    upper: [],
    fold: 9431,
    foldFull: [9431]
  }, {
    code: 9406,
    lower: [],
    title: [],
    upper: [],
    fold: 9432,
    foldFull: [9432]
  }, {
    code: 9407,
    lower: [],
    title: [],
    upper: [],
    fold: 9433,
    foldFull: [9433]
  }, {
    code: 9408,
    lower: [],
    title: [],
    upper: [],
    fold: 9434,
    foldFull: [9434]
  }, {
    code: 9409,
    lower: [],
    title: [],
    upper: [],
    fold: 9435,
    foldFull: [9435]
  }, {
    code: 9410,
    lower: [],
    title: [],
    upper: [],
    fold: 9436,
    foldFull: [9436]
  }, {
    code: 9411,
    lower: [],
    title: [],
    upper: [],
    fold: 9437,
    foldFull: [9437]
  }, {
    code: 9412,
    lower: [],
    title: [],
    upper: [],
    fold: 9438,
    foldFull: [9438]
  }, {
    code: 9413,
    lower: [],
    title: [],
    upper: [],
    fold: 9439,
    foldFull: [9439]
  }, {
    code: 9414,
    lower: [],
    title: [],
    upper: [],
    fold: 9440,
    foldFull: [9440]
  }, {
    code: 9415,
    lower: [],
    title: [],
    upper: [],
    fold: 9441,
    foldFull: [9441]
  }, {
    code: 9416,
    lower: [],
    title: [],
    upper: [],
    fold: 9442,
    foldFull: [9442]
  }, {
    code: 9417,
    lower: [],
    title: [],
    upper: [],
    fold: 9443,
    foldFull: [9443]
  }, {
    code: 9418,
    lower: [],
    title: [],
    upper: [],
    fold: 9444,
    foldFull: [9444]
  }, {
    code: 9419,
    lower: [],
    title: [],
    upper: [],
    fold: 9445,
    foldFull: [9445]
  }, {
    code: 9420,
    lower: [],
    title: [],
    upper: [],
    fold: 9446,
    foldFull: [9446]
  }, {
    code: 9421,
    lower: [],
    title: [],
    upper: [],
    fold: 9447,
    foldFull: [9447]
  }, {
    code: 9422,
    lower: [],
    title: [],
    upper: [],
    fold: 9448,
    foldFull: [9448]
  }, {
    code: 9423,
    lower: [],
    title: [],
    upper: [],
    fold: 9449,
    foldFull: [9449]
  }, {
    code: 11264,
    lower: [],
    title: [],
    upper: [],
    fold: 11312,
    foldFull: [11312]
  }, {
    code: 11265,
    lower: [],
    title: [],
    upper: [],
    fold: 11313,
    foldFull: [11313]
  }, {
    code: 11266,
    lower: [],
    title: [],
    upper: [],
    fold: 11314,
    foldFull: [11314]
  }, {
    code: 11267,
    lower: [],
    title: [],
    upper: [],
    fold: 11315,
    foldFull: [11315]
  }, {
    code: 11268,
    lower: [],
    title: [],
    upper: [],
    fold: 11316,
    foldFull: [11316]
  }, {
    code: 11269,
    lower: [],
    title: [],
    upper: [],
    fold: 11317,
    foldFull: [11317]
  }, {
    code: 11270,
    lower: [],
    title: [],
    upper: [],
    fold: 11318,
    foldFull: [11318]
  }, {
    code: 11271,
    lower: [],
    title: [],
    upper: [],
    fold: 11319,
    foldFull: [11319]
  }, {
    code: 11272,
    lower: [],
    title: [],
    upper: [],
    fold: 11320,
    foldFull: [11320]
  }, {
    code: 11273,
    lower: [],
    title: [],
    upper: [],
    fold: 11321,
    foldFull: [11321]
  }, {
    code: 11274,
    lower: [],
    title: [],
    upper: [],
    fold: 11322,
    foldFull: [11322]
  }, {
    code: 11275,
    lower: [],
    title: [],
    upper: [],
    fold: 11323,
    foldFull: [11323]
  }, {
    code: 11276,
    lower: [],
    title: [],
    upper: [],
    fold: 11324,
    foldFull: [11324]
  }, {
    code: 11277,
    lower: [],
    title: [],
    upper: [],
    fold: 11325,
    foldFull: [11325]
  }, {
    code: 11278,
    lower: [],
    title: [],
    upper: [],
    fold: 11326,
    foldFull: [11326]
  }, {
    code: 11279,
    lower: [],
    title: [],
    upper: [],
    fold: 11327,
    foldFull: [11327]
  }, {
    code: 11280,
    lower: [],
    title: [],
    upper: [],
    fold: 11328,
    foldFull: [11328]
  }, {
    code: 11281,
    lower: [],
    title: [],
    upper: [],
    fold: 11329,
    foldFull: [11329]
  }, {
    code: 11282,
    lower: [],
    title: [],
    upper: [],
    fold: 11330,
    foldFull: [11330]
  }, {
    code: 11283,
    lower: [],
    title: [],
    upper: [],
    fold: 11331,
    foldFull: [11331]
  }, {
    code: 11284,
    lower: [],
    title: [],
    upper: [],
    fold: 11332,
    foldFull: [11332]
  }, {
    code: 11285,
    lower: [],
    title: [],
    upper: [],
    fold: 11333,
    foldFull: [11333]
  }, {
    code: 11286,
    lower: [],
    title: [],
    upper: [],
    fold: 11334,
    foldFull: [11334]
  }, {
    code: 11287,
    lower: [],
    title: [],
    upper: [],
    fold: 11335,
    foldFull: [11335]
  }, {
    code: 11288,
    lower: [],
    title: [],
    upper: [],
    fold: 11336,
    foldFull: [11336]
  }, {
    code: 11289,
    lower: [],
    title: [],
    upper: [],
    fold: 11337,
    foldFull: [11337]
  }, {
    code: 11290,
    lower: [],
    title: [],
    upper: [],
    fold: 11338,
    foldFull: [11338]
  }, {
    code: 11291,
    lower: [],
    title: [],
    upper: [],
    fold: 11339,
    foldFull: [11339]
  }, {
    code: 11292,
    lower: [],
    title: [],
    upper: [],
    fold: 11340,
    foldFull: [11340]
  }, {
    code: 11293,
    lower: [],
    title: [],
    upper: [],
    fold: 11341,
    foldFull: [11341]
  }, {
    code: 11294,
    lower: [],
    title: [],
    upper: [],
    fold: 11342,
    foldFull: [11342]
  }, {
    code: 11295,
    lower: [],
    title: [],
    upper: [],
    fold: 11343,
    foldFull: [11343]
  }, {
    code: 11296,
    lower: [],
    title: [],
    upper: [],
    fold: 11344,
    foldFull: [11344]
  }, {
    code: 11297,
    lower: [],
    title: [],
    upper: [],
    fold: 11345,
    foldFull: [11345]
  }, {
    code: 11298,
    lower: [],
    title: [],
    upper: [],
    fold: 11346,
    foldFull: [11346]
  }, {
    code: 11299,
    lower: [],
    title: [],
    upper: [],
    fold: 11347,
    foldFull: [11347]
  }, {
    code: 11300,
    lower: [],
    title: [],
    upper: [],
    fold: 11348,
    foldFull: [11348]
  }, {
    code: 11301,
    lower: [],
    title: [],
    upper: [],
    fold: 11349,
    foldFull: [11349]
  }, {
    code: 11302,
    lower: [],
    title: [],
    upper: [],
    fold: 11350,
    foldFull: [11350]
  }, {
    code: 11303,
    lower: [],
    title: [],
    upper: [],
    fold: 11351,
    foldFull: [11351]
  }, {
    code: 11304,
    lower: [],
    title: [],
    upper: [],
    fold: 11352,
    foldFull: [11352]
  }, {
    code: 11305,
    lower: [],
    title: [],
    upper: [],
    fold: 11353,
    foldFull: [11353]
  }, {
    code: 11306,
    lower: [],
    title: [],
    upper: [],
    fold: 11354,
    foldFull: [11354]
  }, {
    code: 11307,
    lower: [],
    title: [],
    upper: [],
    fold: 11355,
    foldFull: [11355]
  }, {
    code: 11308,
    lower: [],
    title: [],
    upper: [],
    fold: 11356,
    foldFull: [11356]
  }, {
    code: 11309,
    lower: [],
    title: [],
    upper: [],
    fold: 11357,
    foldFull: [11357]
  }, {
    code: 11310,
    lower: [],
    title: [],
    upper: [],
    fold: 11358,
    foldFull: [11358]
  }, {
    code: 11360,
    lower: [],
    title: [],
    upper: [],
    fold: 11361,
    foldFull: [11361]
  }, {
    code: 11362,
    lower: [],
    title: [],
    upper: [],
    fold: 619,
    foldFull: [619]
  }, {
    code: 11363,
    lower: [],
    title: [],
    upper: [],
    fold: 7549,
    foldFull: [7549]
  }, {
    code: 11364,
    lower: [],
    title: [],
    upper: [],
    fold: 637,
    foldFull: [637]
  }, {
    code: 11367,
    lower: [],
    title: [],
    upper: [],
    fold: 11368,
    foldFull: [11368]
  }, {
    code: 11369,
    lower: [],
    title: [],
    upper: [],
    fold: 11370,
    foldFull: [11370]
  }, {
    code: 11371,
    lower: [],
    title: [],
    upper: [],
    fold: 11372,
    foldFull: [11372]
  }, {
    code: 11373,
    lower: [],
    title: [],
    upper: [],
    fold: 593,
    foldFull: [593]
  }, {
    code: 11374,
    lower: [],
    title: [],
    upper: [],
    fold: 625,
    foldFull: [625]
  }, {
    code: 11375,
    lower: [],
    title: [],
    upper: [],
    fold: 592,
    foldFull: [592]
  }, {
    code: 11376,
    lower: [],
    title: [],
    upper: [],
    fold: 594,
    foldFull: [594]
  }, {
    code: 11378,
    lower: [],
    title: [],
    upper: [],
    fold: 11379,
    foldFull: [11379]
  }, {
    code: 11381,
    lower: [],
    title: [],
    upper: [],
    fold: 11382,
    foldFull: [11382]
  }, {
    code: 11390,
    lower: [],
    title: [],
    upper: [],
    fold: 575,
    foldFull: [575]
  }, {
    code: 11391,
    lower: [],
    title: [],
    upper: [],
    fold: 576,
    foldFull: [576]
  }, {
    code: 11392,
    lower: [],
    title: [],
    upper: [],
    fold: 11393,
    foldFull: [11393]
  }, {
    code: 11394,
    lower: [],
    title: [],
    upper: [],
    fold: 11395,
    foldFull: [11395]
  }, {
    code: 11396,
    lower: [],
    title: [],
    upper: [],
    fold: 11397,
    foldFull: [11397]
  }, {
    code: 11398,
    lower: [],
    title: [],
    upper: [],
    fold: 11399,
    foldFull: [11399]
  }, {
    code: 11400,
    lower: [],
    title: [],
    upper: [],
    fold: 11401,
    foldFull: [11401]
  }, {
    code: 11402,
    lower: [],
    title: [],
    upper: [],
    fold: 11403,
    foldFull: [11403]
  }, {
    code: 11404,
    lower: [],
    title: [],
    upper: [],
    fold: 11405,
    foldFull: [11405]
  }, {
    code: 11406,
    lower: [],
    title: [],
    upper: [],
    fold: 11407,
    foldFull: [11407]
  }, {
    code: 11408,
    lower: [],
    title: [],
    upper: [],
    fold: 11409,
    foldFull: [11409]
  }, {
    code: 11410,
    lower: [],
    title: [],
    upper: [],
    fold: 11411,
    foldFull: [11411]
  }, {
    code: 11412,
    lower: [],
    title: [],
    upper: [],
    fold: 11413,
    foldFull: [11413]
  }, {
    code: 11414,
    lower: [],
    title: [],
    upper: [],
    fold: 11415,
    foldFull: [11415]
  }, {
    code: 11416,
    lower: [],
    title: [],
    upper: [],
    fold: 11417,
    foldFull: [11417]
  }, {
    code: 11418,
    lower: [],
    title: [],
    upper: [],
    fold: 11419,
    foldFull: [11419]
  }, {
    code: 11420,
    lower: [],
    title: [],
    upper: [],
    fold: 11421,
    foldFull: [11421]
  }, {
    code: 11422,
    lower: [],
    title: [],
    upper: [],
    fold: 11423,
    foldFull: [11423]
  }, {
    code: 11424,
    lower: [],
    title: [],
    upper: [],
    fold: 11425,
    foldFull: [11425]
  }, {
    code: 11426,
    lower: [],
    title: [],
    upper: [],
    fold: 11427,
    foldFull: [11427]
  }, {
    code: 11428,
    lower: [],
    title: [],
    upper: [],
    fold: 11429,
    foldFull: [11429]
  }, {
    code: 11430,
    lower: [],
    title: [],
    upper: [],
    fold: 11431,
    foldFull: [11431]
  }, {
    code: 11432,
    lower: [],
    title: [],
    upper: [],
    fold: 11433,
    foldFull: [11433]
  }, {
    code: 11434,
    lower: [],
    title: [],
    upper: [],
    fold: 11435,
    foldFull: [11435]
  }, {
    code: 11436,
    lower: [],
    title: [],
    upper: [],
    fold: 11437,
    foldFull: [11437]
  }, {
    code: 11438,
    lower: [],
    title: [],
    upper: [],
    fold: 11439,
    foldFull: [11439]
  }, {
    code: 11440,
    lower: [],
    title: [],
    upper: [],
    fold: 11441,
    foldFull: [11441]
  }, {
    code: 11442,
    lower: [],
    title: [],
    upper: [],
    fold: 11443,
    foldFull: [11443]
  }, {
    code: 11444,
    lower: [],
    title: [],
    upper: [],
    fold: 11445,
    foldFull: [11445]
  }, {
    code: 11446,
    lower: [],
    title: [],
    upper: [],
    fold: 11447,
    foldFull: [11447]
  }, {
    code: 11448,
    lower: [],
    title: [],
    upper: [],
    fold: 11449,
    foldFull: [11449]
  }, {
    code: 11450,
    lower: [],
    title: [],
    upper: [],
    fold: 11451,
    foldFull: [11451]
  }, {
    code: 11452,
    lower: [],
    title: [],
    upper: [],
    fold: 11453,
    foldFull: [11453]
  }, {
    code: 11454,
    lower: [],
    title: [],
    upper: [],
    fold: 11455,
    foldFull: [11455]
  }, {
    code: 11456,
    lower: [],
    title: [],
    upper: [],
    fold: 11457,
    foldFull: [11457]
  }, {
    code: 11458,
    lower: [],
    title: [],
    upper: [],
    fold: 11459,
    foldFull: [11459]
  }, {
    code: 11460,
    lower: [],
    title: [],
    upper: [],
    fold: 11461,
    foldFull: [11461]
  }, {
    code: 11462,
    lower: [],
    title: [],
    upper: [],
    fold: 11463,
    foldFull: [11463]
  }, {
    code: 11464,
    lower: [],
    title: [],
    upper: [],
    fold: 11465,
    foldFull: [11465]
  }, {
    code: 11466,
    lower: [],
    title: [],
    upper: [],
    fold: 11467,
    foldFull: [11467]
  }, {
    code: 11468,
    lower: [],
    title: [],
    upper: [],
    fold: 11469,
    foldFull: [11469]
  }, {
    code: 11470,
    lower: [],
    title: [],
    upper: [],
    fold: 11471,
    foldFull: [11471]
  }, {
    code: 11472,
    lower: [],
    title: [],
    upper: [],
    fold: 11473,
    foldFull: [11473]
  }, {
    code: 11474,
    lower: [],
    title: [],
    upper: [],
    fold: 11475,
    foldFull: [11475]
  }, {
    code: 11476,
    lower: [],
    title: [],
    upper: [],
    fold: 11477,
    foldFull: [11477]
  }, {
    code: 11478,
    lower: [],
    title: [],
    upper: [],
    fold: 11479,
    foldFull: [11479]
  }, {
    code: 11480,
    lower: [],
    title: [],
    upper: [],
    fold: 11481,
    foldFull: [11481]
  }, {
    code: 11482,
    lower: [],
    title: [],
    upper: [],
    fold: 11483,
    foldFull: [11483]
  }, {
    code: 11484,
    lower: [],
    title: [],
    upper: [],
    fold: 11485,
    foldFull: [11485]
  }, {
    code: 11486,
    lower: [],
    title: [],
    upper: [],
    fold: 11487,
    foldFull: [11487]
  }, {
    code: 11488,
    lower: [],
    title: [],
    upper: [],
    fold: 11489,
    foldFull: [11489]
  }, {
    code: 11490,
    lower: [],
    title: [],
    upper: [],
    fold: 11491,
    foldFull: [11491]
  }, {
    code: 11499,
    lower: [],
    title: [],
    upper: [],
    fold: 11500,
    foldFull: [11500]
  }, {
    code: 11501,
    lower: [],
    title: [],
    upper: [],
    fold: 11502,
    foldFull: [11502]
  }, {
    code: 11506,
    lower: [],
    title: [],
    upper: [],
    fold: 11507,
    foldFull: [11507]
  }, {
    code: 42560,
    lower: [],
    title: [],
    upper: [],
    fold: 42561,
    foldFull: [42561]
  }, {
    code: 42562,
    lower: [],
    title: [],
    upper: [],
    fold: 42563,
    foldFull: [42563]
  }, {
    code: 42564,
    lower: [],
    title: [],
    upper: [],
    fold: 42565,
    foldFull: [42565]
  }, {
    code: 42566,
    lower: [],
    title: [],
    upper: [],
    fold: 42567,
    foldFull: [42567]
  }, {
    code: 42568,
    lower: [],
    title: [],
    upper: [],
    fold: 42569,
    foldFull: [42569]
  }, {
    code: 42570,
    lower: [],
    title: [],
    upper: [],
    fold: 42571,
    foldFull: [42571]
  }, {
    code: 42572,
    lower: [],
    title: [],
    upper: [],
    fold: 42573,
    foldFull: [42573]
  }, {
    code: 42574,
    lower: [],
    title: [],
    upper: [],
    fold: 42575,
    foldFull: [42575]
  }, {
    code: 42576,
    lower: [],
    title: [],
    upper: [],
    fold: 42577,
    foldFull: [42577]
  }, {
    code: 42578,
    lower: [],
    title: [],
    upper: [],
    fold: 42579,
    foldFull: [42579]
  }, {
    code: 42580,
    lower: [],
    title: [],
    upper: [],
    fold: 42581,
    foldFull: [42581]
  }, {
    code: 42582,
    lower: [],
    title: [],
    upper: [],
    fold: 42583,
    foldFull: [42583]
  }, {
    code: 42584,
    lower: [],
    title: [],
    upper: [],
    fold: 42585,
    foldFull: [42585]
  }, {
    code: 42586,
    lower: [],
    title: [],
    upper: [],
    fold: 42587,
    foldFull: [42587]
  }, {
    code: 42588,
    lower: [],
    title: [],
    upper: [],
    fold: 42589,
    foldFull: [42589]
  }, {
    code: 42590,
    lower: [],
    title: [],
    upper: [],
    fold: 42591,
    foldFull: [42591]
  }, {
    code: 42592,
    lower: [],
    title: [],
    upper: [],
    fold: 42593,
    foldFull: [42593]
  }, {
    code: 42594,
    lower: [],
    title: [],
    upper: [],
    fold: 42595,
    foldFull: [42595]
  }, {
    code: 42596,
    lower: [],
    title: [],
    upper: [],
    fold: 42597,
    foldFull: [42597]
  }, {
    code: 42598,
    lower: [],
    title: [],
    upper: [],
    fold: 42599,
    foldFull: [42599]
  }, {
    code: 42600,
    lower: [],
    title: [],
    upper: [],
    fold: 42601,
    foldFull: [42601]
  }, {
    code: 42602,
    lower: [],
    title: [],
    upper: [],
    fold: 42603,
    foldFull: [42603]
  }, {
    code: 42604,
    lower: [],
    title: [],
    upper: [],
    fold: 42605,
    foldFull: [42605]
  }, {
    code: 42624,
    lower: [],
    title: [],
    upper: [],
    fold: 42625,
    foldFull: [42625]
  }, {
    code: 42626,
    lower: [],
    title: [],
    upper: [],
    fold: 42627,
    foldFull: [42627]
  }, {
    code: 42628,
    lower: [],
    title: [],
    upper: [],
    fold: 42629,
    foldFull: [42629]
  }, {
    code: 42630,
    lower: [],
    title: [],
    upper: [],
    fold: 42631,
    foldFull: [42631]
  }, {
    code: 42632,
    lower: [],
    title: [],
    upper: [],
    fold: 42633,
    foldFull: [42633]
  }, {
    code: 42634,
    lower: [],
    title: [],
    upper: [],
    fold: 42635,
    foldFull: [42635]
  }, {
    code: 42636,
    lower: [],
    title: [],
    upper: [],
    fold: 42637,
    foldFull: [42637]
  }, {
    code: 42638,
    lower: [],
    title: [],
    upper: [],
    fold: 42639,
    foldFull: [42639]
  }, {
    code: 42640,
    lower: [],
    title: [],
    upper: [],
    fold: 42641,
    foldFull: [42641]
  }, {
    code: 42642,
    lower: [],
    title: [],
    upper: [],
    fold: 42643,
    foldFull: [42643]
  }, {
    code: 42644,
    lower: [],
    title: [],
    upper: [],
    fold: 42645,
    foldFull: [42645]
  }, {
    code: 42646,
    lower: [],
    title: [],
    upper: [],
    fold: 42647,
    foldFull: [42647]
  }, {
    code: 42648,
    lower: [],
    title: [],
    upper: [],
    fold: 42649,
    foldFull: [42649]
  }, {
    code: 42650,
    lower: [],
    title: [],
    upper: [],
    fold: 42651,
    foldFull: [42651]
  }, {
    code: 42786,
    lower: [],
    title: [],
    upper: [],
    fold: 42787,
    foldFull: [42787]
  }, {
    code: 42788,
    lower: [],
    title: [],
    upper: [],
    fold: 42789,
    foldFull: [42789]
  }, {
    code: 42790,
    lower: [],
    title: [],
    upper: [],
    fold: 42791,
    foldFull: [42791]
  }, {
    code: 42792,
    lower: [],
    title: [],
    upper: [],
    fold: 42793,
    foldFull: [42793]
  }, {
    code: 42794,
    lower: [],
    title: [],
    upper: [],
    fold: 42795,
    foldFull: [42795]
  }, {
    code: 42796,
    lower: [],
    title: [],
    upper: [],
    fold: 42797,
    foldFull: [42797]
  }, {
    code: 42798,
    lower: [],
    title: [],
    upper: [],
    fold: 42799,
    foldFull: [42799]
  }, {
    code: 42802,
    lower: [],
    title: [],
    upper: [],
    fold: 42803,
    foldFull: [42803]
  }, {
    code: 42804,
    lower: [],
    title: [],
    upper: [],
    fold: 42805,
    foldFull: [42805]
  }, {
    code: 42806,
    lower: [],
    title: [],
    upper: [],
    fold: 42807,
    foldFull: [42807]
  }, {
    code: 42808,
    lower: [],
    title: [],
    upper: [],
    fold: 42809,
    foldFull: [42809]
  }, {
    code: 42810,
    lower: [],
    title: [],
    upper: [],
    fold: 42811,
    foldFull: [42811]
  }, {
    code: 42812,
    lower: [],
    title: [],
    upper: [],
    fold: 42813,
    foldFull: [42813]
  }, {
    code: 42814,
    lower: [],
    title: [],
    upper: [],
    fold: 42815,
    foldFull: [42815]
  }, {
    code: 42816,
    lower: [],
    title: [],
    upper: [],
    fold: 42817,
    foldFull: [42817]
  }, {
    code: 42818,
    lower: [],
    title: [],
    upper: [],
    fold: 42819,
    foldFull: [42819]
  }, {
    code: 42820,
    lower: [],
    title: [],
    upper: [],
    fold: 42821,
    foldFull: [42821]
  }, {
    code: 42822,
    lower: [],
    title: [],
    upper: [],
    fold: 42823,
    foldFull: [42823]
  }, {
    code: 42824,
    lower: [],
    title: [],
    upper: [],
    fold: 42825,
    foldFull: [42825]
  }, {
    code: 42826,
    lower: [],
    title: [],
    upper: [],
    fold: 42827,
    foldFull: [42827]
  }, {
    code: 42828,
    lower: [],
    title: [],
    upper: [],
    fold: 42829,
    foldFull: [42829]
  }, {
    code: 42830,
    lower: [],
    title: [],
    upper: [],
    fold: 42831,
    foldFull: [42831]
  }, {
    code: 42832,
    lower: [],
    title: [],
    upper: [],
    fold: 42833,
    foldFull: [42833]
  }, {
    code: 42834,
    lower: [],
    title: [],
    upper: [],
    fold: 42835,
    foldFull: [42835]
  }, {
    code: 42836,
    lower: [],
    title: [],
    upper: [],
    fold: 42837,
    foldFull: [42837]
  }, {
    code: 42838,
    lower: [],
    title: [],
    upper: [],
    fold: 42839,
    foldFull: [42839]
  }, {
    code: 42840,
    lower: [],
    title: [],
    upper: [],
    fold: 42841,
    foldFull: [42841]
  }, {
    code: 42842,
    lower: [],
    title: [],
    upper: [],
    fold: 42843,
    foldFull: [42843]
  }, {
    code: 42844,
    lower: [],
    title: [],
    upper: [],
    fold: 42845,
    foldFull: [42845]
  }, {
    code: 42846,
    lower: [],
    title: [],
    upper: [],
    fold: 42847,
    foldFull: [42847]
  }, {
    code: 42848,
    lower: [],
    title: [],
    upper: [],
    fold: 42849,
    foldFull: [42849]
  }, {
    code: 42850,
    lower: [],
    title: [],
    upper: [],
    fold: 42851,
    foldFull: [42851]
  }, {
    code: 42852,
    lower: [],
    title: [],
    upper: [],
    fold: 42853,
    foldFull: [42853]
  }, {
    code: 42854,
    lower: [],
    title: [],
    upper: [],
    fold: 42855,
    foldFull: [42855]
  }, {
    code: 42856,
    lower: [],
    title: [],
    upper: [],
    fold: 42857,
    foldFull: [42857]
  }, {
    code: 42858,
    lower: [],
    title: [],
    upper: [],
    fold: 42859,
    foldFull: [42859]
  }, {
    code: 42860,
    lower: [],
    title: [],
    upper: [],
    fold: 42861,
    foldFull: [42861]
  }, {
    code: 42862,
    lower: [],
    title: [],
    upper: [],
    fold: 42863,
    foldFull: [42863]
  }, {
    code: 42873,
    lower: [],
    title: [],
    upper: [],
    fold: 42874,
    foldFull: [42874]
  }, {
    code: 42875,
    lower: [],
    title: [],
    upper: [],
    fold: 42876,
    foldFull: [42876]
  }, {
    code: 42877,
    lower: [],
    title: [],
    upper: [],
    fold: 7545,
    foldFull: [7545]
  }, {
    code: 42878,
    lower: [],
    title: [],
    upper: [],
    fold: 42879,
    foldFull: [42879]
  }, {
    code: 42880,
    lower: [],
    title: [],
    upper: [],
    fold: 42881,
    foldFull: [42881]
  }, {
    code: 42882,
    lower: [],
    title: [],
    upper: [],
    fold: 42883,
    foldFull: [42883]
  }, {
    code: 42884,
    lower: [],
    title: [],
    upper: [],
    fold: 42885,
    foldFull: [42885]
  }, {
    code: 42886,
    lower: [],
    title: [],
    upper: [],
    fold: 42887,
    foldFull: [42887]
  }, {
    code: 42891,
    lower: [],
    title: [],
    upper: [],
    fold: 42892,
    foldFull: [42892]
  }, {
    code: 42893,
    lower: [],
    title: [],
    upper: [],
    fold: 613,
    foldFull: [613]
  }, {
    code: 42896,
    lower: [],
    title: [],
    upper: [],
    fold: 42897,
    foldFull: [42897]
  }, {
    code: 42898,
    lower: [],
    title: [],
    upper: [],
    fold: 42899,
    foldFull: [42899]
  }, {
    code: 42902,
    lower: [],
    title: [],
    upper: [],
    fold: 42903,
    foldFull: [42903]
  }, {
    code: 42904,
    lower: [],
    title: [],
    upper: [],
    fold: 42905,
    foldFull: [42905]
  }, {
    code: 42906,
    lower: [],
    title: [],
    upper: [],
    fold: 42907,
    foldFull: [42907]
  }, {
    code: 42908,
    lower: [],
    title: [],
    upper: [],
    fold: 42909,
    foldFull: [42909]
  }, {
    code: 42910,
    lower: [],
    title: [],
    upper: [],
    fold: 42911,
    foldFull: [42911]
  }, {
    code: 42912,
    lower: [],
    title: [],
    upper: [],
    fold: 42913,
    foldFull: [42913]
  }, {
    code: 42914,
    lower: [],
    title: [],
    upper: [],
    fold: 42915,
    foldFull: [42915]
  }, {
    code: 42916,
    lower: [],
    title: [],
    upper: [],
    fold: 42917,
    foldFull: [42917]
  }, {
    code: 42918,
    lower: [],
    title: [],
    upper: [],
    fold: 42919,
    foldFull: [42919]
  }, {
    code: 42920,
    lower: [],
    title: [],
    upper: [],
    fold: 42921,
    foldFull: [42921]
  }, {
    code: 42922,
    lower: [],
    title: [],
    upper: [],
    fold: 614,
    foldFull: [614]
  }, {
    code: 42923,
    lower: [],
    title: [],
    upper: [],
    fold: 604,
    foldFull: [604]
  }, {
    code: 42924,
    lower: [],
    title: [],
    upper: [],
    fold: 609,
    foldFull: [609]
  }, {
    code: 42925,
    lower: [],
    title: [],
    upper: [],
    fold: 620,
    foldFull: [620]
  }, {
    code: 42926,
    lower: [],
    title: [],
    upper: [],
    fold: 618,
    foldFull: [618]
  }, {
    code: 42928,
    lower: [],
    title: [],
    upper: [],
    fold: 670,
    foldFull: [670]
  }, {
    code: 42929,
    lower: [],
    title: [],
    upper: [],
    fold: 647,
    foldFull: [647]
  }, {
    code: 42930,
    lower: [],
    title: [],
    upper: [],
    fold: 669,
    foldFull: [669]
  }, {
    code: 42931,
    lower: [],
    title: [],
    upper: [],
    fold: 43859,
    foldFull: [43859]
  }, {
    code: 42932,
    lower: [],
    title: [],
    upper: [],
    fold: 42933,
    foldFull: [42933]
  }, {
    code: 42934,
    lower: [],
    title: [],
    upper: [],
    fold: 42935,
    foldFull: [42935]
  }, {
    code: 42936,
    lower: [],
    title: [],
    upper: [],
    fold: 42937,
    foldFull: [42937]
  }, {
    code: 42938,
    lower: [],
    title: [],
    upper: [],
    fold: 42939,
    foldFull: [42939]
  }, {
    code: 42940,
    lower: [],
    title: [],
    upper: [],
    fold: 42941,
    foldFull: [42941]
  }, {
    code: 42942,
    lower: [],
    title: [],
    upper: [],
    fold: 42943,
    foldFull: [42943]
  }, {
    code: 42946,
    lower: [],
    title: [],
    upper: [],
    fold: 42947,
    foldFull: [42947]
  }, {
    code: 42948,
    lower: [],
    title: [],
    upper: [],
    fold: 42900,
    foldFull: [42900]
  }, {
    code: 42949,
    lower: [],
    title: [],
    upper: [],
    fold: 642,
    foldFull: [642]
  }, {
    code: 42950,
    lower: [],
    title: [],
    upper: [],
    fold: 7566,
    foldFull: [7566]
  }, {
    code: 42951,
    lower: [],
    title: [],
    upper: [],
    fold: 42952,
    foldFull: [42952]
  }, {
    code: 42953,
    lower: [],
    title: [],
    upper: [],
    fold: 42954,
    foldFull: [42954]
  }, {
    code: 42997,
    lower: [],
    title: [],
    upper: [],
    fold: 42998,
    foldFull: [42998]
  }, {
    code: 43888,
    lower: [],
    title: [],
    upper: [],
    fold: 5024,
    foldFull: [5024]
  }, {
    code: 43889,
    lower: [],
    title: [],
    upper: [],
    fold: 5025,
    foldFull: [5025]
  }, {
    code: 43890,
    lower: [],
    title: [],
    upper: [],
    fold: 5026,
    foldFull: [5026]
  }, {
    code: 43891,
    lower: [],
    title: [],
    upper: [],
    fold: 5027,
    foldFull: [5027]
  }, {
    code: 43892,
    lower: [],
    title: [],
    upper: [],
    fold: 5028,
    foldFull: [5028]
  }, {
    code: 43893,
    lower: [],
    title: [],
    upper: [],
    fold: 5029,
    foldFull: [5029]
  }, {
    code: 43894,
    lower: [],
    title: [],
    upper: [],
    fold: 5030,
    foldFull: [5030]
  }, {
    code: 43895,
    lower: [],
    title: [],
    upper: [],
    fold: 5031,
    foldFull: [5031]
  }, {
    code: 43896,
    lower: [],
    title: [],
    upper: [],
    fold: 5032,
    foldFull: [5032]
  }, {
    code: 43897,
    lower: [],
    title: [],
    upper: [],
    fold: 5033,
    foldFull: [5033]
  }, {
    code: 43898,
    lower: [],
    title: [],
    upper: [],
    fold: 5034,
    foldFull: [5034]
  }, {
    code: 43899,
    lower: [],
    title: [],
    upper: [],
    fold: 5035,
    foldFull: [5035]
  }, {
    code: 43900,
    lower: [],
    title: [],
    upper: [],
    fold: 5036,
    foldFull: [5036]
  }, {
    code: 43901,
    lower: [],
    title: [],
    upper: [],
    fold: 5037,
    foldFull: [5037]
  }, {
    code: 43902,
    lower: [],
    title: [],
    upper: [],
    fold: 5038,
    foldFull: [5038]
  }, {
    code: 43903,
    lower: [],
    title: [],
    upper: [],
    fold: 5039,
    foldFull: [5039]
  }, {
    code: 43904,
    lower: [],
    title: [],
    upper: [],
    fold: 5040,
    foldFull: [5040]
  }, {
    code: 43905,
    lower: [],
    title: [],
    upper: [],
    fold: 5041,
    foldFull: [5041]
  }, {
    code: 43906,
    lower: [],
    title: [],
    upper: [],
    fold: 5042,
    foldFull: [5042]
  }, {
    code: 43907,
    lower: [],
    title: [],
    upper: [],
    fold: 5043,
    foldFull: [5043]
  }, {
    code: 43908,
    lower: [],
    title: [],
    upper: [],
    fold: 5044,
    foldFull: [5044]
  }, {
    code: 43909,
    lower: [],
    title: [],
    upper: [],
    fold: 5045,
    foldFull: [5045]
  }, {
    code: 43910,
    lower: [],
    title: [],
    upper: [],
    fold: 5046,
    foldFull: [5046]
  }, {
    code: 43911,
    lower: [],
    title: [],
    upper: [],
    fold: 5047,
    foldFull: [5047]
  }, {
    code: 43912,
    lower: [],
    title: [],
    upper: [],
    fold: 5048,
    foldFull: [5048]
  }, {
    code: 43913,
    lower: [],
    title: [],
    upper: [],
    fold: 5049,
    foldFull: [5049]
  }, {
    code: 43914,
    lower: [],
    title: [],
    upper: [],
    fold: 5050,
    foldFull: [5050]
  }, {
    code: 43915,
    lower: [],
    title: [],
    upper: [],
    fold: 5051,
    foldFull: [5051]
  }, {
    code: 43916,
    lower: [],
    title: [],
    upper: [],
    fold: 5052,
    foldFull: [5052]
  }, {
    code: 43917,
    lower: [],
    title: [],
    upper: [],
    fold: 5053,
    foldFull: [5053]
  }, {
    code: 43918,
    lower: [],
    title: [],
    upper: [],
    fold: 5054,
    foldFull: [5054]
  }, {
    code: 43919,
    lower: [],
    title: [],
    upper: [],
    fold: 5055,
    foldFull: [5055]
  }, {
    code: 43920,
    lower: [],
    title: [],
    upper: [],
    fold: 5056,
    foldFull: [5056]
  }, {
    code: 43921,
    lower: [],
    title: [],
    upper: [],
    fold: 5057,
    foldFull: [5057]
  }, {
    code: 43922,
    lower: [],
    title: [],
    upper: [],
    fold: 5058,
    foldFull: [5058]
  }, {
    code: 43923,
    lower: [],
    title: [],
    upper: [],
    fold: 5059,
    foldFull: [5059]
  }, {
    code: 43924,
    lower: [],
    title: [],
    upper: [],
    fold: 5060,
    foldFull: [5060]
  }, {
    code: 43925,
    lower: [],
    title: [],
    upper: [],
    fold: 5061,
    foldFull: [5061]
  }, {
    code: 43926,
    lower: [],
    title: [],
    upper: [],
    fold: 5062,
    foldFull: [5062]
  }, {
    code: 43927,
    lower: [],
    title: [],
    upper: [],
    fold: 5063,
    foldFull: [5063]
  }, {
    code: 43928,
    lower: [],
    title: [],
    upper: [],
    fold: 5064,
    foldFull: [5064]
  }, {
    code: 43929,
    lower: [],
    title: [],
    upper: [],
    fold: 5065,
    foldFull: [5065]
  }, {
    code: 43930,
    lower: [],
    title: [],
    upper: [],
    fold: 5066,
    foldFull: [5066]
  }, {
    code: 43931,
    lower: [],
    title: [],
    upper: [],
    fold: 5067,
    foldFull: [5067]
  }, {
    code: 43932,
    lower: [],
    title: [],
    upper: [],
    fold: 5068,
    foldFull: [5068]
  }, {
    code: 43933,
    lower: [],
    title: [],
    upper: [],
    fold: 5069,
    foldFull: [5069]
  }, {
    code: 43934,
    lower: [],
    title: [],
    upper: [],
    fold: 5070,
    foldFull: [5070]
  }, {
    code: 43935,
    lower: [],
    title: [],
    upper: [],
    fold: 5071,
    foldFull: [5071]
  }, {
    code: 43936,
    lower: [],
    title: [],
    upper: [],
    fold: 5072,
    foldFull: [5072]
  }, {
    code: 43937,
    lower: [],
    title: [],
    upper: [],
    fold: 5073,
    foldFull: [5073]
  }, {
    code: 43938,
    lower: [],
    title: [],
    upper: [],
    fold: 5074,
    foldFull: [5074]
  }, {
    code: 43939,
    lower: [],
    title: [],
    upper: [],
    fold: 5075,
    foldFull: [5075]
  }, {
    code: 43940,
    lower: [],
    title: [],
    upper: [],
    fold: 5076,
    foldFull: [5076]
  }, {
    code: 43941,
    lower: [],
    title: [],
    upper: [],
    fold: 5077,
    foldFull: [5077]
  }, {
    code: 43942,
    lower: [],
    title: [],
    upper: [],
    fold: 5078,
    foldFull: [5078]
  }, {
    code: 43943,
    lower: [],
    title: [],
    upper: [],
    fold: 5079,
    foldFull: [5079]
  }, {
    code: 43944,
    lower: [],
    title: [],
    upper: [],
    fold: 5080,
    foldFull: [5080]
  }, {
    code: 43945,
    lower: [],
    title: [],
    upper: [],
    fold: 5081,
    foldFull: [5081]
  }, {
    code: 43946,
    lower: [],
    title: [],
    upper: [],
    fold: 5082,
    foldFull: [5082]
  }, {
    code: 43947,
    lower: [],
    title: [],
    upper: [],
    fold: 5083,
    foldFull: [5083]
  }, {
    code: 43948,
    lower: [],
    title: [],
    upper: [],
    fold: 5084,
    foldFull: [5084]
  }, {
    code: 43949,
    lower: [],
    title: [],
    upper: [],
    fold: 5085,
    foldFull: [5085]
  }, {
    code: 43950,
    lower: [],
    title: [],
    upper: [],
    fold: 5086,
    foldFull: [5086]
  }, {
    code: 43951,
    lower: [],
    title: [],
    upper: [],
    fold: 5087,
    foldFull: [5087]
  }, {
    code: 43952,
    lower: [],
    title: [],
    upper: [],
    fold: 5088,
    foldFull: [5088]
  }, {
    code: 43953,
    lower: [],
    title: [],
    upper: [],
    fold: 5089,
    foldFull: [5089]
  }, {
    code: 43954,
    lower: [],
    title: [],
    upper: [],
    fold: 5090,
    foldFull: [5090]
  }, {
    code: 43955,
    lower: [],
    title: [],
    upper: [],
    fold: 5091,
    foldFull: [5091]
  }, {
    code: 43956,
    lower: [],
    title: [],
    upper: [],
    fold: 5092,
    foldFull: [5092]
  }, {
    code: 43957,
    lower: [],
    title: [],
    upper: [],
    fold: 5093,
    foldFull: [5093]
  }, {
    code: 43958,
    lower: [],
    title: [],
    upper: [],
    fold: 5094,
    foldFull: [5094]
  }, {
    code: 43959,
    lower: [],
    title: [],
    upper: [],
    fold: 5095,
    foldFull: [5095]
  }, {
    code: 43960,
    lower: [],
    title: [],
    upper: [],
    fold: 5096,
    foldFull: [5096]
  }, {
    code: 43961,
    lower: [],
    title: [],
    upper: [],
    fold: 5097,
    foldFull: [5097]
  }, {
    code: 43962,
    lower: [],
    title: [],
    upper: [],
    fold: 5098,
    foldFull: [5098]
  }, {
    code: 43963,
    lower: [],
    title: [],
    upper: [],
    fold: 5099,
    foldFull: [5099]
  }, {
    code: 43964,
    lower: [],
    title: [],
    upper: [],
    fold: 5100,
    foldFull: [5100]
  }, {
    code: 43965,
    lower: [],
    title: [],
    upper: [],
    fold: 5101,
    foldFull: [5101]
  }, {
    code: 43966,
    lower: [],
    title: [],
    upper: [],
    fold: 5102,
    foldFull: [5102]
  }, {
    code: 43967,
    lower: [],
    title: [],
    upper: [],
    fold: 5103,
    foldFull: [5103]
  }, {
    code: 64256,
    lower: [64256],
    title: [70, 102],
    upper: [70, 70],
    fold: 0,
    foldFull: [102, 102]
  }, {
    code: 64256,
    lower: [64256],
    title: [70, 102],
    upper: [70, 70],
    fold: 0,
    foldFull: [102, 102]
  }, {
    code: 64257,
    lower: [64257],
    title: [70, 105],
    upper: [70, 73],
    fold: 0,
    foldFull: [102, 105]
  }, {
    code: 64257,
    lower: [64257],
    title: [70, 105],
    upper: [70, 73],
    fold: 0,
    foldFull: [102, 105]
  }, {
    code: 64258,
    lower: [64258],
    title: [70, 108],
    upper: [70, 76],
    fold: 0,
    foldFull: [102, 108]
  }, {
    code: 64258,
    lower: [64258],
    title: [70, 108],
    upper: [70, 76],
    fold: 0,
    foldFull: [102, 108]
  }, {
    code: 64259,
    lower: [64259],
    title: [70, 102, 105],
    upper: [70, 70, 73],
    fold: 0,
    foldFull: [102, 102, 105]
  }, {
    code: 64259,
    lower: [64259],
    title: [70, 102, 105],
    upper: [70, 70, 73],
    fold: 0,
    foldFull: [102, 102, 105]
  }, {
    code: 64260,
    lower: [64260],
    title: [70, 102, 108],
    upper: [70, 70, 76],
    fold: 0,
    foldFull: [102, 102, 108]
  }, {
    code: 64260,
    lower: [64260],
    title: [70, 102, 108],
    upper: [70, 70, 76],
    fold: 0,
    foldFull: [102, 102, 108]
  }, {
    code: 64261,
    lower: [64261],
    title: [83, 116],
    upper: [83, 84],
    fold: 0,
    foldFull: [115, 116]
  }, {
    code: 64261,
    lower: [64261],
    title: [83, 116],
    upper: [83, 84],
    fold: 0,
    foldFull: [115, 116]
  }, {
    code: 64262,
    lower: [64262],
    title: [83, 116],
    upper: [83, 84],
    fold: 0,
    foldFull: [115, 116]
  }, {
    code: 64262,
    lower: [64262],
    title: [83, 116],
    upper: [83, 84],
    fold: 0,
    foldFull: [115, 116]
  }, {
    code: 64275,
    lower: [64275],
    title: [1348, 1398],
    upper: [1348, 1350],
    fold: 0,
    foldFull: [1396, 1398]
  }, {
    code: 64275,
    lower: [64275],
    title: [1348, 1398],
    upper: [1348, 1350],
    fold: 0,
    foldFull: [1396, 1398]
  }, {
    code: 64276,
    lower: [64276],
    title: [1348, 1381],
    upper: [1348, 1333],
    fold: 0,
    foldFull: [1396, 1381]
  }, {
    code: 64276,
    lower: [64276],
    title: [1348, 1381],
    upper: [1348, 1333],
    fold: 0,
    foldFull: [1396, 1381]
  }, {
    code: 64277,
    lower: [64277],
    title: [1348, 1387],
    upper: [1348, 1339],
    fold: 0,
    foldFull: [1396, 1387]
  }, {
    code: 64277,
    lower: [64277],
    title: [1348, 1387],
    upper: [1348, 1339],
    fold: 0,
    foldFull: [1396, 1387]
  }, {
    code: 64278,
    lower: [64278],
    title: [1358, 1398],
    upper: [1358, 1350],
    fold: 0,
    foldFull: [1406, 1398]
  }, {
    code: 64278,
    lower: [64278],
    title: [1358, 1398],
    upper: [1358, 1350],
    fold: 0,
    foldFull: [1406, 1398]
  }, {
    code: 64279,
    lower: [64279],
    title: [1348, 1389],
    upper: [1348, 1341],
    fold: 0,
    foldFull: [1396, 1389]
  }, {
    code: 64279,
    lower: [64279],
    title: [1348, 1389],
    upper: [1348, 1341],
    fold: 0,
    foldFull: [1396, 1389]
  }, {
    code: 65313,
    lower: [],
    title: [],
    upper: [],
    fold: 65345,
    foldFull: [65345]
  }, {
    code: 65314,
    lower: [],
    title: [],
    upper: [],
    fold: 65346,
    foldFull: [65346]
  }, {
    code: 65315,
    lower: [],
    title: [],
    upper: [],
    fold: 65347,
    foldFull: [65347]
  }, {
    code: 65316,
    lower: [],
    title: [],
    upper: [],
    fold: 65348,
    foldFull: [65348]
  }, {
    code: 65317,
    lower: [],
    title: [],
    upper: [],
    fold: 65349,
    foldFull: [65349]
  }, {
    code: 65318,
    lower: [],
    title: [],
    upper: [],
    fold: 65350,
    foldFull: [65350]
  }, {
    code: 65319,
    lower: [],
    title: [],
    upper: [],
    fold: 65351,
    foldFull: [65351]
  }, {
    code: 65320,
    lower: [],
    title: [],
    upper: [],
    fold: 65352,
    foldFull: [65352]
  }, {
    code: 65321,
    lower: [],
    title: [],
    upper: [],
    fold: 65353,
    foldFull: [65353]
  }, {
    code: 65322,
    lower: [],
    title: [],
    upper: [],
    fold: 65354,
    foldFull: [65354]
  }, {
    code: 65323,
    lower: [],
    title: [],
    upper: [],
    fold: 65355,
    foldFull: [65355]
  }, {
    code: 65324,
    lower: [],
    title: [],
    upper: [],
    fold: 65356,
    foldFull: [65356]
  }, {
    code: 65325,
    lower: [],
    title: [],
    upper: [],
    fold: 65357,
    foldFull: [65357]
  }, {
    code: 65326,
    lower: [],
    title: [],
    upper: [],
    fold: 65358,
    foldFull: [65358]
  }, {
    code: 65327,
    lower: [],
    title: [],
    upper: [],
    fold: 65359,
    foldFull: [65359]
  }, {
    code: 65328,
    lower: [],
    title: [],
    upper: [],
    fold: 65360,
    foldFull: [65360]
  }, {
    code: 65329,
    lower: [],
    title: [],
    upper: [],
    fold: 65361,
    foldFull: [65361]
  }, {
    code: 65330,
    lower: [],
    title: [],
    upper: [],
    fold: 65362,
    foldFull: [65362]
  }, {
    code: 65331,
    lower: [],
    title: [],
    upper: [],
    fold: 65363,
    foldFull: [65363]
  }, {
    code: 65332,
    lower: [],
    title: [],
    upper: [],
    fold: 65364,
    foldFull: [65364]
  }, {
    code: 65333,
    lower: [],
    title: [],
    upper: [],
    fold: 65365,
    foldFull: [65365]
  }, {
    code: 65334,
    lower: [],
    title: [],
    upper: [],
    fold: 65366,
    foldFull: [65366]
  }, {
    code: 65335,
    lower: [],
    title: [],
    upper: [],
    fold: 65367,
    foldFull: [65367]
  }, {
    code: 65336,
    lower: [],
    title: [],
    upper: [],
    fold: 65368,
    foldFull: [65368]
  }, {
    code: 65337,
    lower: [],
    title: [],
    upper: [],
    fold: 65369,
    foldFull: [65369]
  }, {
    code: 65338,
    lower: [],
    title: [],
    upper: [],
    fold: 65370,
    foldFull: [65370]
  }, {
    code: 66560,
    lower: [],
    title: [],
    upper: [],
    fold: 66600,
    foldFull: [66600]
  }, {
    code: 66561,
    lower: [],
    title: [],
    upper: [],
    fold: 66601,
    foldFull: [66601]
  }, {
    code: 66562,
    lower: [],
    title: [],
    upper: [],
    fold: 66602,
    foldFull: [66602]
  }, {
    code: 66563,
    lower: [],
    title: [],
    upper: [],
    fold: 66603,
    foldFull: [66603]
  }, {
    code: 66564,
    lower: [],
    title: [],
    upper: [],
    fold: 66604,
    foldFull: [66604]
  }, {
    code: 66565,
    lower: [],
    title: [],
    upper: [],
    fold: 66605,
    foldFull: [66605]
  }, {
    code: 66566,
    lower: [],
    title: [],
    upper: [],
    fold: 66606,
    foldFull: [66606]
  }, {
    code: 66567,
    lower: [],
    title: [],
    upper: [],
    fold: 66607,
    foldFull: [66607]
  }, {
    code: 66568,
    lower: [],
    title: [],
    upper: [],
    fold: 66608,
    foldFull: [66608]
  }, {
    code: 66569,
    lower: [],
    title: [],
    upper: [],
    fold: 66609,
    foldFull: [66609]
  }, {
    code: 66570,
    lower: [],
    title: [],
    upper: [],
    fold: 66610,
    foldFull: [66610]
  }, {
    code: 66571,
    lower: [],
    title: [],
    upper: [],
    fold: 66611,
    foldFull: [66611]
  }, {
    code: 66572,
    lower: [],
    title: [],
    upper: [],
    fold: 66612,
    foldFull: [66612]
  }, {
    code: 66573,
    lower: [],
    title: [],
    upper: [],
    fold: 66613,
    foldFull: [66613]
  }, {
    code: 66574,
    lower: [],
    title: [],
    upper: [],
    fold: 66614,
    foldFull: [66614]
  }, {
    code: 66575,
    lower: [],
    title: [],
    upper: [],
    fold: 66615,
    foldFull: [66615]
  }, {
    code: 66576,
    lower: [],
    title: [],
    upper: [],
    fold: 66616,
    foldFull: [66616]
  }, {
    code: 66577,
    lower: [],
    title: [],
    upper: [],
    fold: 66617,
    foldFull: [66617]
  }, {
    code: 66578,
    lower: [],
    title: [],
    upper: [],
    fold: 66618,
    foldFull: [66618]
  }, {
    code: 66579,
    lower: [],
    title: [],
    upper: [],
    fold: 66619,
    foldFull: [66619]
  }, {
    code: 66580,
    lower: [],
    title: [],
    upper: [],
    fold: 66620,
    foldFull: [66620]
  }, {
    code: 66581,
    lower: [],
    title: [],
    upper: [],
    fold: 66621,
    foldFull: [66621]
  }, {
    code: 66582,
    lower: [],
    title: [],
    upper: [],
    fold: 66622,
    foldFull: [66622]
  }, {
    code: 66583,
    lower: [],
    title: [],
    upper: [],
    fold: 66623,
    foldFull: [66623]
  }, {
    code: 66584,
    lower: [],
    title: [],
    upper: [],
    fold: 66624,
    foldFull: [66624]
  }, {
    code: 66585,
    lower: [],
    title: [],
    upper: [],
    fold: 66625,
    foldFull: [66625]
  }, {
    code: 66586,
    lower: [],
    title: [],
    upper: [],
    fold: 66626,
    foldFull: [66626]
  }, {
    code: 66587,
    lower: [],
    title: [],
    upper: [],
    fold: 66627,
    foldFull: [66627]
  }, {
    code: 66588,
    lower: [],
    title: [],
    upper: [],
    fold: 66628,
    foldFull: [66628]
  }, {
    code: 66589,
    lower: [],
    title: [],
    upper: [],
    fold: 66629,
    foldFull: [66629]
  }, {
    code: 66590,
    lower: [],
    title: [],
    upper: [],
    fold: 66630,
    foldFull: [66630]
  }, {
    code: 66591,
    lower: [],
    title: [],
    upper: [],
    fold: 66631,
    foldFull: [66631]
  }, {
    code: 66592,
    lower: [],
    title: [],
    upper: [],
    fold: 66632,
    foldFull: [66632]
  }, {
    code: 66593,
    lower: [],
    title: [],
    upper: [],
    fold: 66633,
    foldFull: [66633]
  }, {
    code: 66594,
    lower: [],
    title: [],
    upper: [],
    fold: 66634,
    foldFull: [66634]
  }, {
    code: 66595,
    lower: [],
    title: [],
    upper: [],
    fold: 66635,
    foldFull: [66635]
  }, {
    code: 66596,
    lower: [],
    title: [],
    upper: [],
    fold: 66636,
    foldFull: [66636]
  }, {
    code: 66597,
    lower: [],
    title: [],
    upper: [],
    fold: 66637,
    foldFull: [66637]
  }, {
    code: 66598,
    lower: [],
    title: [],
    upper: [],
    fold: 66638,
    foldFull: [66638]
  }, {
    code: 66599,
    lower: [],
    title: [],
    upper: [],
    fold: 66639,
    foldFull: [66639]
  }, {
    code: 66736,
    lower: [],
    title: [],
    upper: [],
    fold: 66776,
    foldFull: [66776]
  }, {
    code: 66737,
    lower: [],
    title: [],
    upper: [],
    fold: 66777,
    foldFull: [66777]
  }, {
    code: 66738,
    lower: [],
    title: [],
    upper: [],
    fold: 66778,
    foldFull: [66778]
  }, {
    code: 66739,
    lower: [],
    title: [],
    upper: [],
    fold: 66779,
    foldFull: [66779]
  }, {
    code: 66740,
    lower: [],
    title: [],
    upper: [],
    fold: 66780,
    foldFull: [66780]
  }, {
    code: 66741,
    lower: [],
    title: [],
    upper: [],
    fold: 66781,
    foldFull: [66781]
  }, {
    code: 66742,
    lower: [],
    title: [],
    upper: [],
    fold: 66782,
    foldFull: [66782]
  }, {
    code: 66743,
    lower: [],
    title: [],
    upper: [],
    fold: 66783,
    foldFull: [66783]
  }, {
    code: 66744,
    lower: [],
    title: [],
    upper: [],
    fold: 66784,
    foldFull: [66784]
  }, {
    code: 66745,
    lower: [],
    title: [],
    upper: [],
    fold: 66785,
    foldFull: [66785]
  }, {
    code: 66746,
    lower: [],
    title: [],
    upper: [],
    fold: 66786,
    foldFull: [66786]
  }, {
    code: 66747,
    lower: [],
    title: [],
    upper: [],
    fold: 66787,
    foldFull: [66787]
  }, {
    code: 66748,
    lower: [],
    title: [],
    upper: [],
    fold: 66788,
    foldFull: [66788]
  }, {
    code: 66749,
    lower: [],
    title: [],
    upper: [],
    fold: 66789,
    foldFull: [66789]
  }, {
    code: 66750,
    lower: [],
    title: [],
    upper: [],
    fold: 66790,
    foldFull: [66790]
  }, {
    code: 66751,
    lower: [],
    title: [],
    upper: [],
    fold: 66791,
    foldFull: [66791]
  }, {
    code: 66752,
    lower: [],
    title: [],
    upper: [],
    fold: 66792,
    foldFull: [66792]
  }, {
    code: 66753,
    lower: [],
    title: [],
    upper: [],
    fold: 66793,
    foldFull: [66793]
  }, {
    code: 66754,
    lower: [],
    title: [],
    upper: [],
    fold: 66794,
    foldFull: [66794]
  }, {
    code: 66755,
    lower: [],
    title: [],
    upper: [],
    fold: 66795,
    foldFull: [66795]
  }, {
    code: 66756,
    lower: [],
    title: [],
    upper: [],
    fold: 66796,
    foldFull: [66796]
  }, {
    code: 66757,
    lower: [],
    title: [],
    upper: [],
    fold: 66797,
    foldFull: [66797]
  }, {
    code: 66758,
    lower: [],
    title: [],
    upper: [],
    fold: 66798,
    foldFull: [66798]
  }, {
    code: 66759,
    lower: [],
    title: [],
    upper: [],
    fold: 66799,
    foldFull: [66799]
  }, {
    code: 66760,
    lower: [],
    title: [],
    upper: [],
    fold: 66800,
    foldFull: [66800]
  }, {
    code: 66761,
    lower: [],
    title: [],
    upper: [],
    fold: 66801,
    foldFull: [66801]
  }, {
    code: 66762,
    lower: [],
    title: [],
    upper: [],
    fold: 66802,
    foldFull: [66802]
  }, {
    code: 66763,
    lower: [],
    title: [],
    upper: [],
    fold: 66803,
    foldFull: [66803]
  }, {
    code: 66764,
    lower: [],
    title: [],
    upper: [],
    fold: 66804,
    foldFull: [66804]
  }, {
    code: 66765,
    lower: [],
    title: [],
    upper: [],
    fold: 66805,
    foldFull: [66805]
  }, {
    code: 66766,
    lower: [],
    title: [],
    upper: [],
    fold: 66806,
    foldFull: [66806]
  }, {
    code: 66767,
    lower: [],
    title: [],
    upper: [],
    fold: 66807,
    foldFull: [66807]
  }, {
    code: 66768,
    lower: [],
    title: [],
    upper: [],
    fold: 66808,
    foldFull: [66808]
  }, {
    code: 66769,
    lower: [],
    title: [],
    upper: [],
    fold: 66809,
    foldFull: [66809]
  }, {
    code: 66770,
    lower: [],
    title: [],
    upper: [],
    fold: 66810,
    foldFull: [66810]
  }, {
    code: 66771,
    lower: [],
    title: [],
    upper: [],
    fold: 66811,
    foldFull: [66811]
  }, {
    code: 68736,
    lower: [],
    title: [],
    upper: [],
    fold: 68800,
    foldFull: [68800]
  }, {
    code: 68737,
    lower: [],
    title: [],
    upper: [],
    fold: 68801,
    foldFull: [68801]
  }, {
    code: 68738,
    lower: [],
    title: [],
    upper: [],
    fold: 68802,
    foldFull: [68802]
  }, {
    code: 68739,
    lower: [],
    title: [],
    upper: [],
    fold: 68803,
    foldFull: [68803]
  }, {
    code: 68740,
    lower: [],
    title: [],
    upper: [],
    fold: 68804,
    foldFull: [68804]
  }, {
    code: 68741,
    lower: [],
    title: [],
    upper: [],
    fold: 68805,
    foldFull: [68805]
  }, {
    code: 68742,
    lower: [],
    title: [],
    upper: [],
    fold: 68806,
    foldFull: [68806]
  }, {
    code: 68743,
    lower: [],
    title: [],
    upper: [],
    fold: 68807,
    foldFull: [68807]
  }, {
    code: 68744,
    lower: [],
    title: [],
    upper: [],
    fold: 68808,
    foldFull: [68808]
  }, {
    code: 68745,
    lower: [],
    title: [],
    upper: [],
    fold: 68809,
    foldFull: [68809]
  }, {
    code: 68746,
    lower: [],
    title: [],
    upper: [],
    fold: 68810,
    foldFull: [68810]
  }, {
    code: 68747,
    lower: [],
    title: [],
    upper: [],
    fold: 68811,
    foldFull: [68811]
  }, {
    code: 68748,
    lower: [],
    title: [],
    upper: [],
    fold: 68812,
    foldFull: [68812]
  }, {
    code: 68749,
    lower: [],
    title: [],
    upper: [],
    fold: 68813,
    foldFull: [68813]
  }, {
    code: 68750,
    lower: [],
    title: [],
    upper: [],
    fold: 68814,
    foldFull: [68814]
  }, {
    code: 68751,
    lower: [],
    title: [],
    upper: [],
    fold: 68815,
    foldFull: [68815]
  }, {
    code: 68752,
    lower: [],
    title: [],
    upper: [],
    fold: 68816,
    foldFull: [68816]
  }, {
    code: 68753,
    lower: [],
    title: [],
    upper: [],
    fold: 68817,
    foldFull: [68817]
  }, {
    code: 68754,
    lower: [],
    title: [],
    upper: [],
    fold: 68818,
    foldFull: [68818]
  }, {
    code: 68755,
    lower: [],
    title: [],
    upper: [],
    fold: 68819,
    foldFull: [68819]
  }, {
    code: 68756,
    lower: [],
    title: [],
    upper: [],
    fold: 68820,
    foldFull: [68820]
  }, {
    code: 68757,
    lower: [],
    title: [],
    upper: [],
    fold: 68821,
    foldFull: [68821]
  }, {
    code: 68758,
    lower: [],
    title: [],
    upper: [],
    fold: 68822,
    foldFull: [68822]
  }, {
    code: 68759,
    lower: [],
    title: [],
    upper: [],
    fold: 68823,
    foldFull: [68823]
  }, {
    code: 68760,
    lower: [],
    title: [],
    upper: [],
    fold: 68824,
    foldFull: [68824]
  }, {
    code: 68761,
    lower: [],
    title: [],
    upper: [],
    fold: 68825,
    foldFull: [68825]
  }, {
    code: 68762,
    lower: [],
    title: [],
    upper: [],
    fold: 68826,
    foldFull: [68826]
  }, {
    code: 68763,
    lower: [],
    title: [],
    upper: [],
    fold: 68827,
    foldFull: [68827]
  }, {
    code: 68764,
    lower: [],
    title: [],
    upper: [],
    fold: 68828,
    foldFull: [68828]
  }, {
    code: 68765,
    lower: [],
    title: [],
    upper: [],
    fold: 68829,
    foldFull: [68829]
  }, {
    code: 68766,
    lower: [],
    title: [],
    upper: [],
    fold: 68830,
    foldFull: [68830]
  }, {
    code: 68767,
    lower: [],
    title: [],
    upper: [],
    fold: 68831,
    foldFull: [68831]
  }, {
    code: 68768,
    lower: [],
    title: [],
    upper: [],
    fold: 68832,
    foldFull: [68832]
  }, {
    code: 68769,
    lower: [],
    title: [],
    upper: [],
    fold: 68833,
    foldFull: [68833]
  }, {
    code: 68770,
    lower: [],
    title: [],
    upper: [],
    fold: 68834,
    foldFull: [68834]
  }, {
    code: 68771,
    lower: [],
    title: [],
    upper: [],
    fold: 68835,
    foldFull: [68835]
  }, {
    code: 68772,
    lower: [],
    title: [],
    upper: [],
    fold: 68836,
    foldFull: [68836]
  }, {
    code: 68773,
    lower: [],
    title: [],
    upper: [],
    fold: 68837,
    foldFull: [68837]
  }, {
    code: 68774,
    lower: [],
    title: [],
    upper: [],
    fold: 68838,
    foldFull: [68838]
  }, {
    code: 68775,
    lower: [],
    title: [],
    upper: [],
    fold: 68839,
    foldFull: [68839]
  }, {
    code: 68776,
    lower: [],
    title: [],
    upper: [],
    fold: 68840,
    foldFull: [68840]
  }, {
    code: 68777,
    lower: [],
    title: [],
    upper: [],
    fold: 68841,
    foldFull: [68841]
  }, {
    code: 68778,
    lower: [],
    title: [],
    upper: [],
    fold: 68842,
    foldFull: [68842]
  }, {
    code: 68779,
    lower: [],
    title: [],
    upper: [],
    fold: 68843,
    foldFull: [68843]
  }, {
    code: 68780,
    lower: [],
    title: [],
    upper: [],
    fold: 68844,
    foldFull: [68844]
  }, {
    code: 68781,
    lower: [],
    title: [],
    upper: [],
    fold: 68845,
    foldFull: [68845]
  }, {
    code: 68782,
    lower: [],
    title: [],
    upper: [],
    fold: 68846,
    foldFull: [68846]
  }, {
    code: 68783,
    lower: [],
    title: [],
    upper: [],
    fold: 68847,
    foldFull: [68847]
  }, {
    code: 68784,
    lower: [],
    title: [],
    upper: [],
    fold: 68848,
    foldFull: [68848]
  }, {
    code: 68785,
    lower: [],
    title: [],
    upper: [],
    fold: 68849,
    foldFull: [68849]
  }, {
    code: 68786,
    lower: [],
    title: [],
    upper: [],
    fold: 68850,
    foldFull: [68850]
  }, {
    code: 71840,
    lower: [],
    title: [],
    upper: [],
    fold: 71872,
    foldFull: [71872]
  }, {
    code: 71841,
    lower: [],
    title: [],
    upper: [],
    fold: 71873,
    foldFull: [71873]
  }, {
    code: 71842,
    lower: [],
    title: [],
    upper: [],
    fold: 71874,
    foldFull: [71874]
  }, {
    code: 71843,
    lower: [],
    title: [],
    upper: [],
    fold: 71875,
    foldFull: [71875]
  }, {
    code: 71844,
    lower: [],
    title: [],
    upper: [],
    fold: 71876,
    foldFull: [71876]
  }, {
    code: 71845,
    lower: [],
    title: [],
    upper: [],
    fold: 71877,
    foldFull: [71877]
  }, {
    code: 71846,
    lower: [],
    title: [],
    upper: [],
    fold: 71878,
    foldFull: [71878]
  }, {
    code: 71847,
    lower: [],
    title: [],
    upper: [],
    fold: 71879,
    foldFull: [71879]
  }, {
    code: 71848,
    lower: [],
    title: [],
    upper: [],
    fold: 71880,
    foldFull: [71880]
  }, {
    code: 71849,
    lower: [],
    title: [],
    upper: [],
    fold: 71881,
    foldFull: [71881]
  }, {
    code: 71850,
    lower: [],
    title: [],
    upper: [],
    fold: 71882,
    foldFull: [71882]
  }, {
    code: 71851,
    lower: [],
    title: [],
    upper: [],
    fold: 71883,
    foldFull: [71883]
  }, {
    code: 71852,
    lower: [],
    title: [],
    upper: [],
    fold: 71884,
    foldFull: [71884]
  }, {
    code: 71853,
    lower: [],
    title: [],
    upper: [],
    fold: 71885,
    foldFull: [71885]
  }, {
    code: 71854,
    lower: [],
    title: [],
    upper: [],
    fold: 71886,
    foldFull: [71886]
  }, {
    code: 71855,
    lower: [],
    title: [],
    upper: [],
    fold: 71887,
    foldFull: [71887]
  }, {
    code: 71856,
    lower: [],
    title: [],
    upper: [],
    fold: 71888,
    foldFull: [71888]
  }, {
    code: 71857,
    lower: [],
    title: [],
    upper: [],
    fold: 71889,
    foldFull: [71889]
  }, {
    code: 71858,
    lower: [],
    title: [],
    upper: [],
    fold: 71890,
    foldFull: [71890]
  }, {
    code: 71859,
    lower: [],
    title: [],
    upper: [],
    fold: 71891,
    foldFull: [71891]
  }, {
    code: 71860,
    lower: [],
    title: [],
    upper: [],
    fold: 71892,
    foldFull: [71892]
  }, {
    code: 71861,
    lower: [],
    title: [],
    upper: [],
    fold: 71893,
    foldFull: [71893]
  }, {
    code: 71862,
    lower: [],
    title: [],
    upper: [],
    fold: 71894,
    foldFull: [71894]
  }, {
    code: 71863,
    lower: [],
    title: [],
    upper: [],
    fold: 71895,
    foldFull: [71895]
  }, {
    code: 71864,
    lower: [],
    title: [],
    upper: [],
    fold: 71896,
    foldFull: [71896]
  }, {
    code: 71865,
    lower: [],
    title: [],
    upper: [],
    fold: 71897,
    foldFull: [71897]
  }, {
    code: 71866,
    lower: [],
    title: [],
    upper: [],
    fold: 71898,
    foldFull: [71898]
  }, {
    code: 71867,
    lower: [],
    title: [],
    upper: [],
    fold: 71899,
    foldFull: [71899]
  }, {
    code: 71868,
    lower: [],
    title: [],
    upper: [],
    fold: 71900,
    foldFull: [71900]
  }, {
    code: 71869,
    lower: [],
    title: [],
    upper: [],
    fold: 71901,
    foldFull: [71901]
  }, {
    code: 71870,
    lower: [],
    title: [],
    upper: [],
    fold: 71902,
    foldFull: [71902]
  }, {
    code: 71871,
    lower: [],
    title: [],
    upper: [],
    fold: 71903,
    foldFull: [71903]
  }, {
    code: 93760,
    lower: [],
    title: [],
    upper: [],
    fold: 93792,
    foldFull: [93792]
  }, {
    code: 93761,
    lower: [],
    title: [],
    upper: [],
    fold: 93793,
    foldFull: [93793]
  }, {
    code: 93762,
    lower: [],
    title: [],
    upper: [],
    fold: 93794,
    foldFull: [93794]
  }, {
    code: 93763,
    lower: [],
    title: [],
    upper: [],
    fold: 93795,
    foldFull: [93795]
  }, {
    code: 93764,
    lower: [],
    title: [],
    upper: [],
    fold: 93796,
    foldFull: [93796]
  }, {
    code: 93765,
    lower: [],
    title: [],
    upper: [],
    fold: 93797,
    foldFull: [93797]
  }, {
    code: 93766,
    lower: [],
    title: [],
    upper: [],
    fold: 93798,
    foldFull: [93798]
  }, {
    code: 93767,
    lower: [],
    title: [],
    upper: [],
    fold: 93799,
    foldFull: [93799]
  }, {
    code: 93768,
    lower: [],
    title: [],
    upper: [],
    fold: 93800,
    foldFull: [93800]
  }, {
    code: 93769,
    lower: [],
    title: [],
    upper: [],
    fold: 93801,
    foldFull: [93801]
  }, {
    code: 93770,
    lower: [],
    title: [],
    upper: [],
    fold: 93802,
    foldFull: [93802]
  }, {
    code: 93771,
    lower: [],
    title: [],
    upper: [],
    fold: 93803,
    foldFull: [93803]
  }, {
    code: 93772,
    lower: [],
    title: [],
    upper: [],
    fold: 93804,
    foldFull: [93804]
  }, {
    code: 93773,
    lower: [],
    title: [],
    upper: [],
    fold: 93805,
    foldFull: [93805]
  }, {
    code: 93774,
    lower: [],
    title: [],
    upper: [],
    fold: 93806,
    foldFull: [93806]
  }, {
    code: 93775,
    lower: [],
    title: [],
    upper: [],
    fold: 93807,
    foldFull: [93807]
  }, {
    code: 93776,
    lower: [],
    title: [],
    upper: [],
    fold: 93808,
    foldFull: [93808]
  }, {
    code: 93777,
    lower: [],
    title: [],
    upper: [],
    fold: 93809,
    foldFull: [93809]
  }, {
    code: 93778,
    lower: [],
    title: [],
    upper: [],
    fold: 93810,
    foldFull: [93810]
  }, {
    code: 93779,
    lower: [],
    title: [],
    upper: [],
    fold: 93811,
    foldFull: [93811]
  }, {
    code: 93780,
    lower: [],
    title: [],
    upper: [],
    fold: 93812,
    foldFull: [93812]
  }, {
    code: 93781,
    lower: [],
    title: [],
    upper: [],
    fold: 93813,
    foldFull: [93813]
  }, {
    code: 93782,
    lower: [],
    title: [],
    upper: [],
    fold: 93814,
    foldFull: [93814]
  }, {
    code: 93783,
    lower: [],
    title: [],
    upper: [],
    fold: 93815,
    foldFull: [93815]
  }, {
    code: 93784,
    lower: [],
    title: [],
    upper: [],
    fold: 93816,
    foldFull: [93816]
  }, {
    code: 93785,
    lower: [],
    title: [],
    upper: [],
    fold: 93817,
    foldFull: [93817]
  }, {
    code: 93786,
    lower: [],
    title: [],
    upper: [],
    fold: 93818,
    foldFull: [93818]
  }, {
    code: 93787,
    lower: [],
    title: [],
    upper: [],
    fold: 93819,
    foldFull: [93819]
  }, {
    code: 93788,
    lower: [],
    title: [],
    upper: [],
    fold: 93820,
    foldFull: [93820]
  }, {
    code: 93789,
    lower: [],
    title: [],
    upper: [],
    fold: 93821,
    foldFull: [93821]
  }, {
    code: 93790,
    lower: [],
    title: [],
    upper: [],
    fold: 93822,
    foldFull: [93822]
  }, {
    code: 93791,
    lower: [],
    title: [],
    upper: [],
    fold: 93823,
    foldFull: [93823]
  }, {
    code: 125184,
    lower: [],
    title: [],
    upper: [],
    fold: 125218,
    foldFull: [125218]
  }, {
    code: 125185,
    lower: [],
    title: [],
    upper: [],
    fold: 125219,
    foldFull: [125219]
  }, {
    code: 125186,
    lower: [],
    title: [],
    upper: [],
    fold: 125220,
    foldFull: [125220]
  }, {
    code: 125187,
    lower: [],
    title: [],
    upper: [],
    fold: 125221,
    foldFull: [125221]
  }, {
    code: 125188,
    lower: [],
    title: [],
    upper: [],
    fold: 125222,
    foldFull: [125222]
  }, {
    code: 125189,
    lower: [],
    title: [],
    upper: [],
    fold: 125223,
    foldFull: [125223]
  }, {
    code: 125190,
    lower: [],
    title: [],
    upper: [],
    fold: 125224,
    foldFull: [125224]
  }, {
    code: 125191,
    lower: [],
    title: [],
    upper: [],
    fold: 125225,
    foldFull: [125225]
  }, {
    code: 125192,
    lower: [],
    title: [],
    upper: [],
    fold: 125226,
    foldFull: [125226]
  }, {
    code: 125193,
    lower: [],
    title: [],
    upper: [],
    fold: 125227,
    foldFull: [125227]
  }, {
    code: 125194,
    lower: [],
    title: [],
    upper: [],
    fold: 125228,
    foldFull: [125228]
  }, {
    code: 125195,
    lower: [],
    title: [],
    upper: [],
    fold: 125229,
    foldFull: [125229]
  }, {
    code: 125196,
    lower: [],
    title: [],
    upper: [],
    fold: 125230,
    foldFull: [125230]
  }, {
    code: 125197,
    lower: [],
    title: [],
    upper: [],
    fold: 125231,
    foldFull: [125231]
  }, {
    code: 125198,
    lower: [],
    title: [],
    upper: [],
    fold: 125232,
    foldFull: [125232]
  }, {
    code: 125199,
    lower: [],
    title: [],
    upper: [],
    fold: 125233,
    foldFull: [125233]
  }, {
    code: 125200,
    lower: [],
    title: [],
    upper: [],
    fold: 125234,
    foldFull: [125234]
  }, {
    code: 125201,
    lower: [],
    title: [],
    upper: [],
    fold: 125235,
    foldFull: [125235]
  }, {
    code: 125202,
    lower: [],
    title: [],
    upper: [],
    fold: 125236,
    foldFull: [125236]
  }, {
    code: 125203,
    lower: [],
    title: [],
    upper: [],
    fold: 125237,
    foldFull: [125237]
  }, {
    code: 125204,
    lower: [],
    title: [],
    upper: [],
    fold: 125238,
    foldFull: [125238]
  }, {
    code: 125205,
    lower: [],
    title: [],
    upper: [],
    fold: 125239,
    foldFull: [125239]
  }, {
    code: 125206,
    lower: [],
    title: [],
    upper: [],
    fold: 125240,
    foldFull: [125240]
  }, {
    code: 125207,
    lower: [],
    title: [],
    upper: [],
    fold: 125241,
    foldFull: [125241]
  }, {
    code: 125208,
    lower: [],
    title: [],
    upper: [],
    fold: 125242,
    foldFull: [125242]
  }, {
    code: 125209,
    lower: [],
    title: [],
    upper: [],
    fold: 125243,
    foldFull: [125243]
  }, {
    code: 125210,
    lower: [],
    title: [],
    upper: [],
    fold: 125244,
    foldFull: [125244]
  }, {
    code: 125211,
    lower: [],
    title: [],
    upper: [],
    fold: 125245,
    foldFull: [125245]
  }, {
    code: 125212,
    lower: [],
    title: [],
    upper: [],
    fold: 125246,
    foldFull: [125246]
  }, {
    code: 125213,
    lower: [],
    title: [],
    upper: [],
    fold: 125247,
    foldFull: [125247]
  }, {
    code: 125214,
    lower: [],
    title: [],
    upper: [],
    fold: 125248,
    foldFull: [125248]
  }, {
    code: 125215,
    lower: [],
    title: [],
    upper: [],
    fold: 125249,
    foldFull: [125249]
  }, {
    code: 125216,
    lower: [],
    title: [],
    upper: [],
    fold: 125250,
    foldFull: [125250]
  }, {
    code: 125217,
    lower: [],
    title: [],
    upper: [],
    fold: 125251,
    foldFull: [125251]
  }];
  var recCmp = function(v2) {
    return function(v1) {
      return compare2(v2.code)(v1.code);
    };
  };
  var findRule = function(code3) {
    var v2 = bsearch(zeroRec(code3))(rules)(length(rules))(recCmp);
    if (v2 instanceof Nothing) {
      return zeroRec(code3);
    }
    ;
    if (v2 instanceof Just) {
      return v2.value0;
    }
    ;
    throw new Error("Failed pattern match at Data.CodePoint.Unicode.Internal.Casing (line 1627, column 17 - line 1629, column 14): " + [v2.constructor.name]);
  };
  var lower = function(code3) {
    var lowered = findRule(code3).lower;
    var $13 = $$null(lowered);
    if ($13) {
      return [uTowlower(code3)];
    }
    ;
    return lowered;
  };

  // output/Data.String.CodePoints/foreign.js
  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator = typeof Symbol !== "undefined" && Symbol != null && typeof Symbol.iterator !== "undefined" && typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";
  var _unsafeCodePointAt0 = function(fallback) {
    return hasCodePointAt ? function(str2) {
      return str2.codePointAt(0);
    } : fallback;
  };
  var _fromCodePointArray = function(singleton11) {
    return hasFromCodePoint ? function(cps) {
      if (cps.length < 1e4) {
        return String.fromCodePoint.apply(String, cps);
      }
      return cps.map(singleton11).join("");
    } : function(cps) {
      return cps.map(singleton11).join("");
    };
  };
  var _singleton = function(fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };
  var _take = function(fallback) {
    return function(n2) {
      if (hasStringIterator) {
        return function(str2) {
          var accum = "";
          var iter = str2[Symbol.iterator]();
          for (var i7 = 0; i7 < n2; ++i7) {
            var o2 = iter.next();
            if (o2.done)
              return accum;
            accum += o2.value;
          }
          return accum;
        };
      }
      return fallback(n2);
    };
  };
  var _toCodePointArray = function(fallback) {
    return function(unsafeCodePointAt02) {
      if (hasArrayFrom) {
        return function(str2) {
          return Array.from(str2, unsafeCodePointAt02);
        };
      }
      return fallback;
    };
  };

  // output/Data.String.CodePoints/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumChar);
  var map17 = /* @__PURE__ */ map(functorMaybe);
  var unfoldr2 = /* @__PURE__ */ unfoldr(unfoldableArray);
  var div2 = /* @__PURE__ */ div(euclideanRingInt);
  var mod2 = /* @__PURE__ */ mod(euclideanRingInt);
  var unsurrogate = function(lead) {
    return function(trail) {
      return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
    };
  };
  var isTrail = function(cu) {
    return 56320 <= cu && cu <= 57343;
  };
  var isLead = function(cu) {
    return 55296 <= cu && cu <= 56319;
  };
  var uncons3 = function(s3) {
    var v2 = length4(s3);
    if (v2 === 0) {
      return Nothing.value;
    }
    ;
    if (v2 === 1) {
      return new Just({
        head: fromEnum2(charAt(0)(s3)),
        tail: ""
      });
    }
    ;
    var cu1 = fromEnum2(charAt(1)(s3));
    var cu0 = fromEnum2(charAt(0)(s3));
    var $42 = isLead(cu0) && isTrail(cu1);
    if ($42) {
      return new Just({
        head: unsurrogate(cu0)(cu1),
        tail: drop3(2)(s3)
      });
    }
    ;
    return new Just({
      head: cu0,
      tail: drop3(1)(s3)
    });
  };
  var unconsButWithTuple = function(s3) {
    return map17(function(v2) {
      return new Tuple(v2.head, v2.tail);
    })(uncons3(s3));
  };
  var toCodePointArrayFallback = function(s3) {
    return unfoldr2(unconsButWithTuple)(s3);
  };
  var unsafeCodePointAt0Fallback = function(s3) {
    var cu0 = fromEnum2(charAt(0)(s3));
    var $46 = isLead(cu0) && length4(s3) > 1;
    if ($46) {
      var cu1 = fromEnum2(charAt(1)(s3));
      var $47 = isTrail(cu1);
      if ($47) {
        return unsurrogate(cu0)(cu1);
      }
      ;
      return cu0;
    }
    ;
    return cu0;
  };
  var unsafeCodePointAt0 = /* @__PURE__ */ _unsafeCodePointAt0(unsafeCodePointAt0Fallback);
  var toCodePointArray = /* @__PURE__ */ _toCodePointArray(toCodePointArrayFallback)(unsafeCodePointAt0);
  var length5 = function($73) {
    return length(toCodePointArray($73));
  };
  var fromCharCode2 = /* @__PURE__ */ function() {
    var $74 = toEnumWithDefaults(boundedEnumChar)(bottom(boundedChar))(top(boundedChar));
    return function($75) {
      return singleton7($74($75));
    };
  }();
  var singletonFallback = function(v2) {
    if (v2 <= 65535) {
      return fromCharCode2(v2);
    }
    ;
    var lead = div2(v2 - 65536 | 0)(1024) + 55296 | 0;
    var trail = mod2(v2 - 65536 | 0)(1024) + 56320 | 0;
    return fromCharCode2(lead) + fromCharCode2(trail);
  };
  var fromCodePointArray = /* @__PURE__ */ _fromCodePointArray(singletonFallback);
  var singleton9 = /* @__PURE__ */ _singleton(singletonFallback);
  var takeFallback = function(n2) {
    return function(v2) {
      if (n2 < 1) {
        return "";
      }
      ;
      var v1 = uncons3(v2);
      if (v1 instanceof Just) {
        return singleton9(v1.value0.head) + takeFallback(n2 - 1 | 0)(v1.value0.tail);
      }
      ;
      return v2;
    };
  };
  var take4 = /* @__PURE__ */ _take(takeFallback);

  // output/Data.CodePoint.Unicode/index.js
  var modifyFull = unsafeCoerce2;
  var toLower2 = /* @__PURE__ */ modifyFull(lower);

  // output/Data.String.Regex/foreign.js
  var regexImpl = function(left4) {
    return function(right3) {
      return function(s1) {
        return function(s22) {
          try {
            return right3(new RegExp(s1, s22));
          } catch (e) {
            return left4(e.message);
          }
        };
      };
    };
  };
  var test = function(r2) {
    return function(s3) {
      var lastIndex = r2.lastIndex;
      var result = r2.test(s3);
      r2.lastIndex = lastIndex;
      return result;
    };
  };
  var _match = function(just) {
    return function(nothing) {
      return function(r2) {
        return function(s3) {
          var m2 = s3.match(r2);
          if (m2 == null || m2.length === 0) {
            return nothing;
          } else {
            for (var i7 = 0; i7 < m2.length; i7++) {
              m2[i7] = m2[i7] == null ? nothing : just(m2[i7]);
            }
            return just(m2);
          }
        };
      };
    };
  };

  // output/Data.String.Regex.Flags/index.js
  var global2 = {
    global: true,
    ignoreCase: false,
    multiline: false,
    dotAll: false,
    sticky: false,
    unicode: false
  };

  // output/Data.String.Regex/index.js
  var renderFlags = function(v2) {
    return function() {
      if (v2.global) {
        return "g";
      }
      ;
      return "";
    }() + (function() {
      if (v2.ignoreCase) {
        return "i";
      }
      ;
      return "";
    }() + (function() {
      if (v2.multiline) {
        return "m";
      }
      ;
      return "";
    }() + (function() {
      if (v2.dotAll) {
        return "s";
      }
      ;
      return "";
    }() + (function() {
      if (v2.sticky) {
        return "y";
      }
      ;
      return "";
    }() + function() {
      if (v2.unicode) {
        return "u";
      }
      ;
      return "";
    }()))));
  };
  var regex = function(s3) {
    return function(f2) {
      return regexImpl(Left.create)(Right.create)(s3)(renderFlags(f2));
    };
  };
  var match2 = /* @__PURE__ */ function() {
    return _match(Just.create)(Nothing.value);
  }();

  // output/Data.String.Regex.Unsafe/index.js
  var identity11 = /* @__PURE__ */ identity(categoryFn);
  var unsafeRegex = function(s3) {
    return function(f2) {
      return either(unsafeCrashWith)(identity11)(regex(s3)(f2));
    };
  };

  // output/Data.String.Unicode/index.js
  var bindFlipped5 = /* @__PURE__ */ bindFlipped(bindArray);
  var convertFull = function(f2) {
    var $4 = bindFlipped5(f2);
    return function($5) {
      return fromCodePointArray($4(toCodePointArray($5)));
    };
  };
  var toLower3 = /* @__PURE__ */ convertFull(toLower2);

  // output/Data.String.Extra/index.js
  var foldMap3 = /* @__PURE__ */ foldMap(foldableMaybe);
  var foldMap22 = /* @__PURE__ */ foldMap3(monoidArray);
  var map18 = /* @__PURE__ */ map(functorArray);
  var regexGlobal = function(regexStr) {
    return unsafeRegex(regexStr)(global2);
  };
  var regexHasASCIIWords = /* @__PURE__ */ regexGlobal("[^\0-/:-@[-`{-\x7F]+");
  var regexHasUnicodeWords = /* @__PURE__ */ regexGlobal("[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]");
  var regexUnicodeWords = /* @__PURE__ */ function() {
    var rsUpper = "[A-Z\\xc0-\\xd6\\xd8-\\xde]";
    var rsOptVar = "[\\ufe0e\\ufe0f]?";
    var rsLower = "[a-z\\xdf-\\xf6\\xf8-\\xff]";
    var rsDingbat = "[\\u2700-\\u27bf]";
    var rsBreakRange = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsBreak = "[" + (rsBreakRange + "]");
    var rsMisc = "[^" + ("\\ud800-\\udfff" + (rsBreakRange + "\\d\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]"));
    var rsMiscLower = "(?:" + (rsLower + ("|" + (rsMisc + ")")));
    var rsMiscUpper = "(?:" + (rsUpper + ("|" + (rsMisc + ")")));
    var rsNonAstral = "[^\\ud800-\\udfff]";
    var rsOptContrLower = "(?:['\\u2019](?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:['\\u2019](?:D|LL|M|RE|S|T|VE))?";
    var rsComboRange = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\u1ab0-\\u1aff\\u1dc0-\\u1dff";
    var rsCombo = "[" + (rsComboRange + "]");
    var rsModifier = "(?:" + (rsCombo + "|\\ud83c[\\udffb-\\udfff])");
    var reOptMod = rsModifier + "?";
    var rsOptJoin = "(?:" + ("\\u200d" + ("(?:" + (rsNonAstral + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + (rsOptVar + (reOptMod + ")*"))))))))));
    var rsSeq = rsOptVar + (reOptMod + rsOptJoin);
    var rsEmoji = "(?:" + (rsDingbat + ("|" + ("(?:\\ud83c[\\udde6-\\uddff]){2}" + ("|" + ("[\\ud800-\\udbff][\\udc00-\\udfff]" + (")" + rsSeq))))));
    return regexGlobal(joinWith("|")([rsUpper + ("?" + (rsLower + ("+" + (rsOptContrLower + ("(?=" + (rsBreak + ("|" + (rsUpper + "|$)")))))))), rsMiscUpper + ("+" + (rsOptContrUpper + ("(?=" + (rsBreak + ("|" + (rsUpper + (rsMiscLower + "|$)"))))))), rsUpper + ("?" + (rsMiscLower + ("+" + rsOptContrLower))), rsUpper + ("+" + rsOptContrUpper), "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", "\\d+", rsEmoji]));
  }();
  var unicodeWords = /* @__PURE__ */ function() {
    var $19 = foldMap22(catMaybes2);
    var $20 = match2(regexUnicodeWords);
    return function($21) {
      return $19($20($21));
    };
  }();
  var hasUnicodeWords = /* @__PURE__ */ test(regexHasUnicodeWords);
  var asciiWords = /* @__PURE__ */ function() {
    var $22 = foldMap22(catMaybes2);
    var $23 = match2(regexHasASCIIWords);
    return function($24) {
      return $22($23($24));
    };
  }();
  var words = function(string) {
    var $13 = hasUnicodeWords(string);
    if ($13) {
      return unicodeWords(string);
    }
    ;
    return asciiWords(string);
  };
  var kebabCase = /* @__PURE__ */ function() {
    var $25 = joinWith("-");
    var $26 = map18(toLower3);
    return function($27) {
      return $25($26(words($27)));
    };
  }();

  // output/Biz.PureScriptSolutionDefinition.Types/index.js
  var TestIsSymbol = {
    reflectSymbol: function() {
      return "Test";
    }
  };
  var BuildIsSymbol = {
    reflectSymbol: function() {
      return "Build";
    }
  };
  var genericEnumSumRepSum3 = /* @__PURE__ */ genericEnumSumRepSum(/* @__PURE__ */ genericEnumSumRepConstruc(TestIsSymbol))(/* @__PURE__ */ genericEnumSumRepConstruc(BuildIsSymbol));
  var entrypointsIsSymbol = {
    reflectSymbol: function() {
      return "entrypoints";
    }
  };
  var rootIsSymbol = {
    reflectSymbol: function() {
      return "root";
    }
  };
  var build_commandIsSymbol = {
    reflectSymbol: function() {
      return "build_command";
    }
  };
  var spago_fileIsSymbol = {
    reflectSymbol: function() {
      return "spago_file";
    }
  };
  var typeIsSymbol = {
    reflectSymbol: function() {
      return "type";
    }
  };
  var SpagoAppIsSymbol = {
    reflectSymbol: function() {
      return "SpagoApp";
    }
  };
  var SpagoLibraryIsSymbol = {
    reflectSymbol: function() {
      return "SpagoLibrary";
    }
  };
  var readForeignRecord2 = /* @__PURE__ */ readForeignRecord();
  var writeForeignRecord4 = /* @__PURE__ */ writeForeignRecord();
  var Test = /* @__PURE__ */ function() {
    function Test2() {
    }
    ;
    Test2.value = new Test2();
    return Test2;
  }();
  var Build = /* @__PURE__ */ function() {
    function Build2() {
    }
    ;
    Build2.value = new Build2();
    return Build2;
  }();
  var SpagoApp = /* @__PURE__ */ function() {
    function SpagoApp2(value0) {
      this.value0 = value0;
    }
    ;
    SpagoApp2.create = function(value0) {
      return new SpagoApp2(value0);
    };
    return SpagoApp2;
  }();
  var SpagoLibrary = /* @__PURE__ */ function() {
    function SpagoLibrary2(value0) {
      this.value0 = value0;
    }
    ;
    SpagoLibrary2.create = function(value0) {
      return new SpagoLibrary2(value0);
    };
    return SpagoLibrary2;
  }();
  var genericPureScriptProjectD = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return new SpagoApp(x3.value0);
      }
      ;
      if (x3 instanceof Inr) {
        return new SpagoLibrary(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 60, column 1 - line 60, column 54): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof SpagoApp) {
        return new Inl(x3.value0);
      }
      ;
      if (x3 instanceof SpagoLibrary) {
        return new Inr(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 60, column 1 - line 60, column 54): " + [x3.constructor.name]);
    }
  };
  var genericEntryPointType_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return Test.value;
      }
      ;
      if (x3 instanceof Inr) {
        return Build.value;
      }
      ;
      throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 48, column 1 - line 48, column 41): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof Test) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof Build) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at Biz.PureScriptSolutionDefinition.Types (line 48, column 1 - line 48, column 41): " + [x3.constructor.name]);
    }
  };
  var readForeignEntryPointType = {
    readImpl: /* @__PURE__ */ genericReadForeignEnum(genericEntryPointType_)(genericEnumSumRepSum3)
  };
  var readGenericTaggedSumRepCo12 = /* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignRecord2(/* @__PURE__ */ readForeignFieldsCons(entrypointsIsSymbol)(/* @__PURE__ */ readForeignArray(/* @__PURE__ */ readForeignRecord2(/* @__PURE__ */ readForeignFieldsCons(build_commandIsSymbol)(/* @__PURE__ */ readForeignMaybe(readForeignString))(/* @__PURE__ */ readForeignFieldsCons(spago_fileIsSymbol)(readForeignString)(/* @__PURE__ */ readForeignFieldsCons(typeIsSymbol)(readForeignEntryPointType)(readForeignFieldsNilRowRo)()())()())()())))(/* @__PURE__ */ readForeignFieldsCons(rootIsSymbol)(readForeignString)(readForeignFieldsNilRowRo)()())()())));
  var writeForeignEntryPointTyp = {
    writeImpl: /* @__PURE__ */ genericWriteForeignEnum(genericEntryPointType_)(genericEnumSumRepSum3)
  };
  var writeGenericTaggedSumRepC2 = /* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignRecord4(/* @__PURE__ */ writeForeignFieldsCons(entrypointsIsSymbol)(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignRecord4(/* @__PURE__ */ writeForeignFieldsCons(build_commandIsSymbol)(/* @__PURE__ */ writeForeignMaybe(writeForeignString))(/* @__PURE__ */ writeForeignFieldsCons(spago_fileIsSymbol)(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(typeIsSymbol)(writeForeignEntryPointTyp)(writeForeignFieldsNilRowR)()()())()()())()()())))(/* @__PURE__ */ writeForeignFieldsCons(rootIsSymbol)(writeForeignString)(writeForeignFieldsNilRowR)()()())()()())));
  var eqEntryPointType = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof Test && y2 instanceof Test) {
          return true;
        }
        ;
        if (x3 instanceof Build && y2 instanceof Build) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var eq12 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()(typeIsSymbol)(eqEntryPointType))()(spago_fileIsSymbol)(eqString))()(build_commandIsSymbol)(/* @__PURE__ */ eqMaybe(eqString)))));
  var eqPureScriptProjectDefini = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof SpagoApp && y2 instanceof SpagoApp) {
          return eq12(x3.value0.entrypoints)(y2.value0.entrypoints) && x3.value0.root === y2.value0.root;
        }
        ;
        if (x3 instanceof SpagoLibrary && y2 instanceof SpagoLibrary) {
          return eq12(x3.value0.entrypoints)(y2.value0.entrypoints) && x3.value0.root === y2.value0.root;
        }
        ;
        return false;
      };
    }
  };
  var serialisationConfig = {
    typeTag: "type",
    valueTag: "definition",
    toConstructorName: kebabCase
  };
  var readForeignPureScriptProj = {
    readImpl: /* @__PURE__ */ genericReadForeignTaggedSum(genericPureScriptProjectD)(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo12(SpagoAppIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepCo12(SpagoLibraryIsSymbol)))(serialisationConfig)
  };
  var writeForeignPureScriptPro = {
    writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericPureScriptProjectD)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC2(SpagoAppIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC2(SpagoLibraryIsSymbol)))(serialisationConfig)
  };

  // output/Biz.Spago.Types/index.js
  var Repository = function(x3) {
    return x3;
  };
  var ProjectName = function(x3) {
    return x3;
  };
  var writeForeignVersion = writeForeignString;
  var writeForeignSourceGlob = writeForeignString;
  var writeForeignRepository = writeForeignString;
  var writeForeignProjectName = writeForeignString;
  var semigroupRepository = semigroupString;
  var readForeignVersion = readForeignString;
  var readForeignSourceGlob = readForeignString;
  var readForeignRepository = readForeignString;
  var readForeignProjectName = readForeignString;
  var ordProjectName = ordString;
  var eqVersion = eqString;
  var eqSourceGlob = eqString;
  var eqRepository = eqString;
  var eqProjectName = eqString;

  // output/Biz.IPC.Message.Types/index.js
  var writeImpl5 = /* @__PURE__ */ writeImpl(writeForeignString);
  var ShowFolderSelectorIsSymbol = {
    reflectSymbol: function() {
      return "ShowFolderSelector";
    }
  };
  var readForeignRecord3 = /* @__PURE__ */ readForeignRecord();
  var directoryIsSymbol = {
    reflectSymbol: function() {
      return "directory";
    }
  };
  var filtersIsSymbol = {
    reflectSymbol: function() {
      return "filters";
    }
  };
  var extensionsIsSymbol = {
    reflectSymbol: function() {
      return "extensions";
    }
  };
  var nameIsSymbol = {
    reflectSymbol: function() {
      return "name";
    }
  };
  var readForeignFieldsCons2 = /* @__PURE__ */ readForeignFieldsCons(nameIsSymbol);
  var readForeignMaybe2 = /* @__PURE__ */ readForeignMaybe(readForeignString);
  var ShowOpenDialogIsSymbol = {
    reflectSymbol: function() {
      return "ShowOpenDialog";
    }
  };
  var GetInstalledToolsIsSymbol = {
    reflectSymbol: function() {
      return "GetInstalledTools";
    }
  };
  var GetPureScriptSolutionDefinitionsIsSymbol = {
    reflectSymbol: function() {
      return "GetPureScriptSolutionDefinitions";
    }
  };
  var GetIsLoggedIntoGithubIsSymbol = {
    reflectSymbol: function() {
      return "GetIsLoggedIntoGithub";
    }
  };
  var QueryGithubGraphQLIsSymbol = {
    reflectSymbol: function() {
      return "QueryGithubGraphQL";
    }
  };
  var GithubLoginGetDeviceCodeIsSymbol = {
    reflectSymbol: function() {
      return "GithubLoginGetDeviceCode";
    }
  };
  var GithubPollAccessTokenIsSymbol = {
    reflectSymbol: function() {
      return "GithubPollAccessToken";
    }
  };
  var readGenericTaggedSumRepCo13 = /* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(readForeignString));
  var CopyToClipboardIsSymbol = {
    reflectSymbol: function() {
      return "CopyToClipboard";
    }
  };
  var GetClipboardTextIsSymbol = {
    reflectSymbol: function() {
      return "GetClipboardText";
    }
  };
  var GetSpagoGlobalCacheIsSymbol = {
    reflectSymbol: function() {
      return "GetSpagoGlobalCache";
    }
  };
  var writeGenericTaggedSumRepC3 = /* @__PURE__ */ writeGenericTaggedSumRepC(writeGenericTaggedSumRepN);
  var writeForeignRecord5 = /* @__PURE__ */ writeForeignRecord();
  var writeForeignFieldsCons3 = /* @__PURE__ */ writeForeignFieldsCons(nameIsSymbol);
  var writeForeignMaybe2 = /* @__PURE__ */ writeForeignMaybe(writeForeignString);
  var writeGenericTaggedSumRepC1 = /* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignString));
  var FailedIsSymbol = {
    reflectSymbol: function() {
      return "Failed";
    }
  };
  var SucceededIsSymbol = {
    reflectSymbol: function() {
      return "Succeeded";
    }
  };
  var invalidSpagoDhallIsSymbol = {
    reflectSymbol: function() {
      return "invalidSpagoDhall";
    }
  };
  var noSpagoDhallIsSymbol = {
    reflectSymbol: function() {
      return "noSpagoDhall";
    }
  };
  var readForeignRecord1 = /* @__PURE__ */ readForeignRecord3(readForeignFieldsNilRowRo);
  var nothingSelectedIsSymbol = {
    reflectSymbol: function() {
      return "nothingSelected";
    }
  };
  var validSpagoDhallIsSymbol = {
    reflectSymbol: function() {
      return "validSpagoDhall";
    }
  };
  var dependenciesIsSymbol = {
    reflectSymbol: function() {
      return "dependencies";
    }
  };
  var readForeignFieldsCons1 = /* @__PURE__ */ readForeignFieldsCons(dependenciesIsSymbol)(/* @__PURE__ */ readForeignArray(readForeignProjectName));
  var packagesIsSymbol = {
    reflectSymbol: function() {
      return "packages";
    }
  };
  var repoIsSymbol = {
    reflectSymbol: function() {
      return "repo";
    }
  };
  var versionIsSymbol = {
    reflectSymbol: function() {
      return "version";
    }
  };
  var repositoryIsSymbol = {
    reflectSymbol: function() {
      return "repository";
    }
  };
  var sourcesIsSymbol = {
    reflectSymbol: function() {
      return "sources";
    }
  };
  var ShowFolderSelectorResponseIsSymbol = {
    reflectSymbol: function() {
      return "ShowFolderSelectorResponse";
    }
  };
  var UserSelectedFileIsSymbol = {
    reflectSymbol: function() {
      return "UserSelectedFile";
    }
  };
  var GetInstalledToolsResponseIsSymbol = {
    reflectSymbol: function() {
      return "GetInstalledToolsResponse";
    }
  };
  var projectsIsSymbol = {
    reflectSymbol: function() {
      return "projects";
    }
  };
  var GetPureScriptSolutionDefinitionsResponseIsSymbol = {
    reflectSymbol: function() {
      return "GetPureScriptSolutionDefinitionsResponse";
    }
  };
  var GetIsLoggedIntoGithubResultIsSymbol = {
    reflectSymbol: function() {
      return "GetIsLoggedIntoGithubResult";
    }
  };
  var GithubGraphQLResultIsSymbol = {
    reflectSymbol: function() {
      return "GithubGraphQLResult";
    }
  };
  var GithubLoginGetDeviceCodeResultIsSymbol = {
    reflectSymbol: function() {
      return "GithubLoginGetDeviceCodeResult";
    }
  };
  var errorIsSymbol = {
    reflectSymbol: function() {
      return "error";
    }
  };
  var error_descriptionIsSymbol = {
    reflectSymbol: function() {
      return "error_description";
    }
  };
  var error_uriIsSymbol = {
    reflectSymbol: function() {
      return "error_uri";
    }
  };
  var access_tokenIsSymbol = {
    reflectSymbol: function() {
      return "access_token";
    }
  };
  var scopeIsSymbol = {
    reflectSymbol: function() {
      return "scope";
    }
  };
  var token_typeIsSymbol = {
    reflectSymbol: function() {
      return "token_type";
    }
  };
  var GithubPollAccessTokenResultIsSymbol = {
    reflectSymbol: function() {
      return "GithubPollAccessTokenResult";
    }
  };
  var CopyToClipboardResultIsSymbol = {
    reflectSymbol: function() {
      return "CopyToClipboardResult";
    }
  };
  var GetClipboardTextResultIsSymbol = {
    reflectSymbol: function() {
      return "GetClipboardTextResult";
    }
  };
  var GetSpagoGlobalCacheResultIsSymbol = {
    reflectSymbol: function() {
      return "GetSpagoGlobalCacheResult";
    }
  };
  var writeForeignRecord1 = /* @__PURE__ */ writeForeignRecord5(writeForeignFieldsNilRowR);
  var writeForeignFieldsCons12 = /* @__PURE__ */ writeForeignFieldsCons(dependenciesIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignProjectName));
  var eqRec3 = /* @__PURE__ */ eqRec();
  var eqRowCons2 = /* @__PURE__ */ eqRowCons(eqRowNil)();
  var eqMaybe2 = /* @__PURE__ */ eqMaybe(eqString);
  var variantTagsCons2 = /* @__PURE__ */ variantTagsCons(/* @__PURE__ */ variantTagsCons(/* @__PURE__ */ variantTagsCons(/* @__PURE__ */ variantTagsCons(variantTagsNil)(validSpagoDhallIsSymbol))(nothingSelectedIsSymbol))(noSpagoDhallIsSymbol))(invalidSpagoDhallIsSymbol);
  var eqArray2 = /* @__PURE__ */ eqArray(eqProjectName);
  var eqRec1 = /* @__PURE__ */ eqRec3(eqRowNil);
  var eqVariantCons2 = /* @__PURE__ */ eqVariantCons(/* @__PURE__ */ eqVariantCons(/* @__PURE__ */ eqVariantCons(/* @__PURE__ */ eqVariantCons(eqVariantNil)(/* @__PURE__ */ eqRec3(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2(sourcesIsSymbol)(/* @__PURE__ */ eqArray(eqSourceGlob)))()(repositoryIsSymbol)(/* @__PURE__ */ eqMaybe(eqRepository)))()(packagesIsSymbol)(/* @__PURE__ */ eqObject(/* @__PURE__ */ eqRec3(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2(versionIsSymbol)(eqVersion))()(repoIsSymbol)(eqRepository))()(dependenciesIsSymbol)(eqArray2)))))()(nameIsSymbol)(eqProjectName))()(dependenciesIsSymbol)(eqArray2))))(eqRec1))(eqRec1))(eqString);
  var eq5 = /* @__PURE__ */ eq(/* @__PURE__ */ eqVariant()(variantTagsCons2)(eqVariantCons2));
  var eq6 = /* @__PURE__ */ eq(eqMaybe2);
  var eq7 = /* @__PURE__ */ eq(eqGetInstalledToolsResult);
  var eq8 = /* @__PURE__ */ eq(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqTuple(eqString)(/* @__PURE__ */ eqRec3(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2(projectsIsSymbol)(/* @__PURE__ */ eqArray(eqPureScriptProjectDefini)))()(nameIsSymbol)(eqString)))));
  var NoGithubToken = /* @__PURE__ */ function() {
    function NoGithubToken2() {
    }
    ;
    NoGithubToken2.value = new NoGithubToken2();
    return NoGithubToken2;
  }();
  var ShowFolderSelector = /* @__PURE__ */ function() {
    function ShowFolderSelector2() {
    }
    ;
    ShowFolderSelector2.value = new ShowFolderSelector2();
    return ShowFolderSelector2;
  }();
  var ShowOpenDialog = /* @__PURE__ */ function() {
    function ShowOpenDialog2(value0) {
      this.value0 = value0;
    }
    ;
    ShowOpenDialog2.create = function(value0) {
      return new ShowOpenDialog2(value0);
    };
    return ShowOpenDialog2;
  }();
  var GetInstalledTools = /* @__PURE__ */ function() {
    function GetInstalledTools2() {
    }
    ;
    GetInstalledTools2.value = new GetInstalledTools2();
    return GetInstalledTools2;
  }();
  var GetPureScriptSolutionDefinitions = /* @__PURE__ */ function() {
    function GetPureScriptSolutionDefinitions2() {
    }
    ;
    GetPureScriptSolutionDefinitions2.value = new GetPureScriptSolutionDefinitions2();
    return GetPureScriptSolutionDefinitions2;
  }();
  var GetIsLoggedIntoGithub = /* @__PURE__ */ function() {
    function GetIsLoggedIntoGithub2() {
    }
    ;
    GetIsLoggedIntoGithub2.value = new GetIsLoggedIntoGithub2();
    return GetIsLoggedIntoGithub2;
  }();
  var QueryGithubGraphQL = /* @__PURE__ */ function() {
    function QueryGithubGraphQL2(value0) {
      this.value0 = value0;
    }
    ;
    QueryGithubGraphQL2.create = function(value0) {
      return new QueryGithubGraphQL2(value0);
    };
    return QueryGithubGraphQL2;
  }();
  var GithubLoginGetDeviceCode = /* @__PURE__ */ function() {
    function GithubLoginGetDeviceCode2() {
    }
    ;
    GithubLoginGetDeviceCode2.value = new GithubLoginGetDeviceCode2();
    return GithubLoginGetDeviceCode2;
  }();
  var GithubPollAccessToken = /* @__PURE__ */ function() {
    function GithubPollAccessToken2(value0) {
      this.value0 = value0;
    }
    ;
    GithubPollAccessToken2.create = function(value0) {
      return new GithubPollAccessToken2(value0);
    };
    return GithubPollAccessToken2;
  }();
  var CopyToClipboard = /* @__PURE__ */ function() {
    function CopyToClipboard2(value0) {
      this.value0 = value0;
    }
    ;
    CopyToClipboard2.create = function(value0) {
      return new CopyToClipboard2(value0);
    };
    return CopyToClipboard2;
  }();
  var GetClipboardText = /* @__PURE__ */ function() {
    function GetClipboardText2() {
    }
    ;
    GetClipboardText2.value = new GetClipboardText2();
    return GetClipboardText2;
  }();
  var GetSpagoGlobalCache = /* @__PURE__ */ function() {
    function GetSpagoGlobalCache2() {
    }
    ;
    GetSpagoGlobalCache2.value = new GetSpagoGlobalCache2();
    return GetSpagoGlobalCache2;
  }();
  var Failed = /* @__PURE__ */ function() {
    function Failed2(value0) {
      this.value0 = value0;
    }
    ;
    Failed2.create = function(value0) {
      return new Failed2(value0);
    };
    return Failed2;
  }();
  var Succeeded = /* @__PURE__ */ function() {
    function Succeeded2(value0) {
      this.value0 = value0;
    }
    ;
    Succeeded2.create = function(value0) {
      return new Succeeded2(value0);
    };
    return Succeeded2;
  }();
  var ShowFolderSelectorResponse = /* @__PURE__ */ function() {
    function ShowFolderSelectorResponse2(value0) {
      this.value0 = value0;
    }
    ;
    ShowFolderSelectorResponse2.create = function(value0) {
      return new ShowFolderSelectorResponse2(value0);
    };
    return ShowFolderSelectorResponse2;
  }();
  var UserSelectedFile = /* @__PURE__ */ function() {
    function UserSelectedFile2(value0) {
      this.value0 = value0;
    }
    ;
    UserSelectedFile2.create = function(value0) {
      return new UserSelectedFile2(value0);
    };
    return UserSelectedFile2;
  }();
  var GetInstalledToolsResponse = /* @__PURE__ */ function() {
    function GetInstalledToolsResponse2(value0) {
      this.value0 = value0;
    }
    ;
    GetInstalledToolsResponse2.create = function(value0) {
      return new GetInstalledToolsResponse2(value0);
    };
    return GetInstalledToolsResponse2;
  }();
  var GetPureScriptSolutionDefinitionsResponse = /* @__PURE__ */ function() {
    function GetPureScriptSolutionDefinitionsResponse2(value0) {
      this.value0 = value0;
    }
    ;
    GetPureScriptSolutionDefinitionsResponse2.create = function(value0) {
      return new GetPureScriptSolutionDefinitionsResponse2(value0);
    };
    return GetPureScriptSolutionDefinitionsResponse2;
  }();
  var GetIsLoggedIntoGithubResult = /* @__PURE__ */ function() {
    function GetIsLoggedIntoGithubResult2(value0) {
      this.value0 = value0;
    }
    ;
    GetIsLoggedIntoGithubResult2.create = function(value0) {
      return new GetIsLoggedIntoGithubResult2(value0);
    };
    return GetIsLoggedIntoGithubResult2;
  }();
  var GithubGraphQLResult = /* @__PURE__ */ function() {
    function GithubGraphQLResult2(value0) {
      this.value0 = value0;
    }
    ;
    GithubGraphQLResult2.create = function(value0) {
      return new GithubGraphQLResult2(value0);
    };
    return GithubGraphQLResult2;
  }();
  var GithubLoginGetDeviceCodeResult = /* @__PURE__ */ function() {
    function GithubLoginGetDeviceCodeResult2(value0) {
      this.value0 = value0;
    }
    ;
    GithubLoginGetDeviceCodeResult2.create = function(value0) {
      return new GithubLoginGetDeviceCodeResult2(value0);
    };
    return GithubLoginGetDeviceCodeResult2;
  }();
  var GithubPollAccessTokenResult = /* @__PURE__ */ function() {
    function GithubPollAccessTokenResult2(value0) {
      this.value0 = value0;
    }
    ;
    GithubPollAccessTokenResult2.create = function(value0) {
      return new GithubPollAccessTokenResult2(value0);
    };
    return GithubPollAccessTokenResult2;
  }();
  var CopyToClipboardResult = /* @__PURE__ */ function() {
    function CopyToClipboardResult2(value0) {
      this.value0 = value0;
    }
    ;
    CopyToClipboardResult2.create = function(value0) {
      return new CopyToClipboardResult2(value0);
    };
    return CopyToClipboardResult2;
  }();
  var GetClipboardTextResult = /* @__PURE__ */ function() {
    function GetClipboardTextResult2(value0) {
      this.value0 = value0;
    }
    ;
    GetClipboardTextResult2.create = function(value0) {
      return new GetClipboardTextResult2(value0);
    };
    return GetClipboardTextResult2;
  }();
  var GetSpagoGlobalCacheResult = /* @__PURE__ */ function() {
    function GetSpagoGlobalCacheResult2(value0) {
      this.value0 = value0;
    }
    ;
    GetSpagoGlobalCacheResult2.create = function(value0) {
      return new GetSpagoGlobalCacheResult2(value0);
    };
    return GetSpagoGlobalCacheResult2;
  }();
  var writeForeignNoGithubToken = {
    writeImpl: function(v2) {
      return writeImpl5("no_github_token");
    }
  };
  var readForeignNoGithubToken = /* @__PURE__ */ function() {
    return {
      readImpl: pure(applicativeFn)(pure(applicativeExceptT(monadIdentity))(NoGithubToken.value))
    };
  }();
  var genericMessageToRenderer_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return new ShowFolderSelectorResponse(x3.value0);
      }
      ;
      if (x3 instanceof Inr && x3.value0 instanceof Inl) {
        return new UserSelectedFile(x3.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inl)) {
        return new GetInstalledToolsResponse(x3.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && x3.value0.value0.value0 instanceof Inl))) {
        return new GetPureScriptSolutionDefinitionsResponse(x3.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0 instanceof Inl)))) {
        return new GetIsLoggedIntoGithubResult(x3.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return new GithubGraphQLResult(x3.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return new GithubLoginGetDeviceCodeResult(x3.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return new GithubPollAccessTokenResult(x3.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return new CopyToClipboardResult(x3.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return new GetClipboardTextResult(x3.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))))) {
        return new GetSpagoGlobalCacheResult(x3.value0.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 83, column 1 - line 83, column 44): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof ShowFolderSelectorResponse) {
        return new Inl(x3.value0);
      }
      ;
      if (x3 instanceof UserSelectedFile) {
        return new Inr(new Inl(x3.value0));
      }
      ;
      if (x3 instanceof GetInstalledToolsResponse) {
        return new Inr(new Inr(new Inl(x3.value0)));
      }
      ;
      if (x3 instanceof GetPureScriptSolutionDefinitionsResponse) {
        return new Inr(new Inr(new Inr(new Inl(x3.value0))));
      }
      ;
      if (x3 instanceof GetIsLoggedIntoGithubResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0)))));
      }
      ;
      if (x3 instanceof GithubGraphQLResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0))))));
      }
      ;
      if (x3 instanceof GithubLoginGetDeviceCodeResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0)))))));
      }
      ;
      if (x3 instanceof GithubPollAccessTokenResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0))))))));
      }
      ;
      if (x3 instanceof CopyToClipboardResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0)))))))));
      }
      ;
      if (x3 instanceof GetClipboardTextResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0))))))))));
      }
      ;
      if (x3 instanceof GetSpagoGlobalCacheResult) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(x3.value0))))))))));
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 83, column 1 - line 83, column 44): " + [x3.constructor.name]);
    }
  };
  var genericMessageToMain_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return ShowFolderSelector.value;
      }
      ;
      if (x3 instanceof Inr && x3.value0 instanceof Inl) {
        return new ShowOpenDialog(x3.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inl)) {
        return GetInstalledTools.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && x3.value0.value0.value0 instanceof Inl))) {
        return GetPureScriptSolutionDefinitions.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0 instanceof Inl)))) {
        return GetIsLoggedIntoGithub.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0 instanceof Inl))))) {
        return new QueryGithubGraphQL(x3.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0 instanceof Inl)))))) {
        return GithubLoginGetDeviceCode.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))) {
        return new GithubPollAccessToken(x3.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl)))))))) {
        return new CopyToClipboard(x3.value0.value0.value0.value0.value0.value0.value0.value0.value0);
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inl))))))))) {
        return GetClipboardText.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && (x3.value0.value0 instanceof Inr && (x3.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && (x3.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr && x3.value0.value0.value0.value0.value0.value0.value0.value0.value0 instanceof Inr))))))))) {
        return GetSpagoGlobalCache.value;
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 70, column 1 - line 70, column 40): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof ShowFolderSelector) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof ShowOpenDialog) {
        return new Inr(new Inl(x3.value0));
      }
      ;
      if (x3 instanceof GetInstalledTools) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x3 instanceof GetPureScriptSolutionDefinitions) {
        return new Inr(new Inr(new Inr(new Inl(NoArguments.value))));
      }
      ;
      if (x3 instanceof GetIsLoggedIntoGithub) {
        return new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))));
      }
      ;
      if (x3 instanceof QueryGithubGraphQL) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0))))));
      }
      ;
      if (x3 instanceof GithubLoginGetDeviceCode) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value)))))));
      }
      ;
      if (x3 instanceof GithubPollAccessToken) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0))))))));
      }
      ;
      if (x3 instanceof CopyToClipboard) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(x3.value0)))))))));
      }
      ;
      if (x3 instanceof GetClipboardText) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inl(NoArguments.value))))))))));
      }
      ;
      if (x3 instanceof GetSpagoGlobalCache) {
        return new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(new Inr(NoArguments.value))))))))));
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 70, column 1 - line 70, column 40): " + [x3.constructor.name]);
    }
  };
  var writeForeignMessageToMain = {
    writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericMessageToMain_)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(ShowFolderSelectorIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons(directoryIsSymbol)(writeForeignBoolean)(/* @__PURE__ */ writeForeignFieldsCons(filtersIsSymbol)(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons(extensionsIsSymbol)(/* @__PURE__ */ writeForeignMaybe(/* @__PURE__ */ writeForeignArray(writeForeignString)))(/* @__PURE__ */ writeForeignFieldsCons3(writeForeignMaybe2)(writeForeignFieldsNilRowR)()()())()()())))(writeForeignFieldsNilRowR)()()())()()())))(ShowOpenDialogIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(GetInstalledToolsIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(GetPureScriptSolutionDefinitionsIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(GetIsLoggedIntoGithubIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignGithubGraphQL1))(QueryGithubGraphQLIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(GithubLoginGetDeviceCodeIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignDeviceCode))(GithubPollAccessTokenIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC1(CopyToClipboardIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC3(GetClipboardTextIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC3(GetSpagoGlobalCacheIsSymbol))))))))))))(defaultOptions)
  };
  var genericFailedOr_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return new Failed(x3.value0);
      }
      ;
      if (x3 instanceof Inr) {
        return new Succeeded(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 61, column 1 - line 61, column 41): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof Failed) {
        return new Inl(x3.value0);
      }
      ;
      if (x3 instanceof Succeeded) {
        return new Inr(x3.value0);
      }
      ;
      throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 61, column 1 - line 61, column 41): " + [x3.constructor.name]);
    }
  };
  var genericReadForeignTaggedSum2 = /* @__PURE__ */ genericReadForeignTaggedSum(genericFailedOr_);
  var genericWriteForeignTaggedSum2 = /* @__PURE__ */ genericWriteForeignTaggedSum(genericFailedOr_);
  var readForeignFailedOr = function(dictReadForeign) {
    var readGenericTaggedSumRepSu2 = readGenericTaggedSumRepSu(readGenericTaggedSumRepCo1(readGenericTaggedSumRepAr(dictReadForeign))(FailedIsSymbol));
    return function(dictReadForeign1) {
      return {
        readImpl: genericReadForeignTaggedSum2(readGenericTaggedSumRepSu2(readGenericTaggedSumRepCo1(readGenericTaggedSumRepAr(dictReadForeign1))(SucceededIsSymbol)))(defaultOptions)
      };
    };
  };
  var readForeignFailedOr1 = /* @__PURE__ */ readForeignFailedOr(readForeignString);
  var readForeignMessageToRende = {
    readImpl: /* @__PURE__ */ genericReadForeignTaggedSum(genericMessageToRenderer_)(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignVariant()(/* @__PURE__ */ readForeignVariantCons(invalidSpagoDhallIsSymbol)(readForeignString)()(/* @__PURE__ */ readForeignVariantCons(noSpagoDhallIsSymbol)(readForeignRecord1)()(/* @__PURE__ */ readForeignVariantCons(nothingSelectedIsSymbol)(readForeignRecord1)()(/* @__PURE__ */ readForeignVariantCons(validSpagoDhallIsSymbol)(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons1(/* @__PURE__ */ readForeignFieldsCons2(readForeignProjectName)(/* @__PURE__ */ readForeignFieldsCons(packagesIsSymbol)(/* @__PURE__ */ readForeignObject(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons1(/* @__PURE__ */ readForeignFieldsCons(repoIsSymbol)(readForeignRepository)(/* @__PURE__ */ readForeignFieldsCons(versionIsSymbol)(readForeignVersion)(readForeignFieldsNilRowRo)()())()())()())))(/* @__PURE__ */ readForeignFieldsCons(repositoryIsSymbol)(/* @__PURE__ */ readForeignMaybe(readForeignRepository))(/* @__PURE__ */ readForeignFieldsCons(sourcesIsSymbol)(/* @__PURE__ */ readForeignArray(readForeignSourceGlob))(readForeignFieldsNilRowRo)()())()())()())()())()()))()(readForeignVariantNil)))))))(ShowFolderSelectorResponseIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(readForeignMaybe2))(UserSelectedFileIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(readForeignGetInstalledTo))(GetInstalledToolsResponseIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignArray(/* @__PURE__ */ readForeignTuple(/* @__PURE__ */ readTupleHelper(readForeignString)(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons2(readForeignString)(/* @__PURE__ */ readForeignFieldsCons(projectsIsSymbol)(/* @__PURE__ */ readForeignArray(readForeignPureScriptProj))(readForeignFieldsNilRowRo)()())()()))))))(GetPureScriptSolutionDefinitionsResponseIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(readForeignBoolean))(GetIsLoggedIntoGithubResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignFailedOr(readForeignNoGithubToken)(readForeignGithubGraphQLR)))(GithubGraphQLResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignFailedOr1(readForeignDeviceCodeResp)))(GithubLoginGetDeviceCodeResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignFailedOr1(/* @__PURE__ */ readForeignFailedOr(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons(errorIsSymbol)(readForeignString)(/* @__PURE__ */ readForeignFieldsCons(error_descriptionIsSymbol)(readForeignString)(/* @__PURE__ */ readForeignFieldsCons(error_uriIsSymbol)(readForeignString)(readForeignFieldsNilRowRo)()())()())()()))(/* @__PURE__ */ readForeignRecord3(/* @__PURE__ */ readForeignFieldsCons(access_tokenIsSymbol)(readForeignAccessToken)(/* @__PURE__ */ readForeignFieldsCons(scopeIsSymbol)(readForeignScopeList)(/* @__PURE__ */ readForeignFieldsCons(token_typeIsSymbol)(readForeignTokenType)(readForeignFieldsNilRowRo)()())()())()())))))(GithubPollAccessTokenResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo13(CopyToClipboardResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepSu(/* @__PURE__ */ readGenericTaggedSumRepCo13(GetClipboardTextResultIsSymbol))(/* @__PURE__ */ readGenericTaggedSumRepCo1(/* @__PURE__ */ readGenericTaggedSumRepAr(/* @__PURE__ */ readForeignFailedOr1(readForeignSpagoGlobalCac)))(GetSpagoGlobalCacheResultIsSymbol))))))))))))(defaultOptions)
  };
  var writeForeignFailedOr = function(dictWriteForeign) {
    var writeGenericTaggedSumRepS2 = writeGenericTaggedSumRepS(writeGenericTaggedSumRepC(writeGenericTaggedSumRepA(dictWriteForeign))(FailedIsSymbol));
    return function(dictWriteForeign1) {
      return {
        writeImpl: genericWriteForeignTaggedSum2(writeGenericTaggedSumRepS2(writeGenericTaggedSumRepC(writeGenericTaggedSumRepA(dictWriteForeign1))(SucceededIsSymbol)))(defaultOptions)
      };
    };
  };
  var writeForeignFailedOr1 = /* @__PURE__ */ writeForeignFailedOr(writeForeignString);
  var writeForeignMessageToRend = {
    writeImpl: /* @__PURE__ */ genericWriteForeignTaggedSum(genericMessageToRenderer_)(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignVariant()(/* @__PURE__ */ writeForeignVariantCons(invalidSpagoDhallIsSymbol)(writeForeignString)()(/* @__PURE__ */ writeForeignVariantCons(noSpagoDhallIsSymbol)(writeForeignRecord1)()(/* @__PURE__ */ writeForeignVariantCons(nothingSelectedIsSymbol)(writeForeignRecord1)()(/* @__PURE__ */ writeForeignVariantCons(validSpagoDhallIsSymbol)(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons12(/* @__PURE__ */ writeForeignFieldsCons3(writeForeignProjectName)(/* @__PURE__ */ writeForeignFieldsCons(packagesIsSymbol)(/* @__PURE__ */ writeForeignObject(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons12(/* @__PURE__ */ writeForeignFieldsCons(repoIsSymbol)(writeForeignRepository)(/* @__PURE__ */ writeForeignFieldsCons(versionIsSymbol)(writeForeignVersion)(writeForeignFieldsNilRowR)()()())()()())()()())))(/* @__PURE__ */ writeForeignFieldsCons(repositoryIsSymbol)(/* @__PURE__ */ writeForeignMaybe(writeForeignRepository))(/* @__PURE__ */ writeForeignFieldsCons(sourcesIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignSourceGlob))(writeForeignFieldsNilRowR)()()())()()())()()())()()())()()()))()(writeForeignVariantNilRow)))))))(ShowFolderSelectorResponseIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignMaybe2))(UserSelectedFileIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignGetInstalledT))(GetInstalledToolsResponseIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignArray(/* @__PURE__ */ writeForeignTuple(writeForeignString)(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons3(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(projectsIsSymbol)(/* @__PURE__ */ writeForeignArray(writeForeignPureScriptPro))(writeForeignFieldsNilRowR)()()())()()())))))(GetPureScriptSolutionDefinitionsResponseIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(writeForeignBoolean))(GetIsLoggedIntoGithubResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignFailedOr(writeForeignNoGithubToken)(writeForeignGithubGraphQL)))(GithubGraphQLResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignFailedOr1(writeForeignDeviceCodeRes)))(GithubLoginGetDeviceCodeResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignFailedOr1(/* @__PURE__ */ writeForeignFailedOr(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons(errorIsSymbol)(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(error_descriptionIsSymbol)(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons(error_uriIsSymbol)(writeForeignString)(writeForeignFieldsNilRowR)()()())()()())()()()))(/* @__PURE__ */ writeForeignRecord5(/* @__PURE__ */ writeForeignFieldsCons(access_tokenIsSymbol)(writeForeignAccessToken)(/* @__PURE__ */ writeForeignFieldsCons(scopeIsSymbol)(writeForeignScopeList)(/* @__PURE__ */ writeForeignFieldsCons(token_typeIsSymbol)(writeForeignTokenType)(writeForeignFieldsNilRowR)()()())()()())()()())))))(GithubPollAccessTokenResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC1(CopyToClipboardResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepS(/* @__PURE__ */ writeGenericTaggedSumRepC1(GetClipboardTextResultIsSymbol))(/* @__PURE__ */ writeGenericTaggedSumRepC(/* @__PURE__ */ writeGenericTaggedSumRepA(/* @__PURE__ */ writeForeignFailedOr1(writeForeignSpagoGlobalCa)))(GetSpagoGlobalCacheResultIsSymbol))))))))))))(defaultOptions)
  };
  var eqNoGithubToken = {
    eq: function(x3) {
      return function(y2) {
        return true;
      };
    }
  };
  var eqFailedOr = function(dictEq) {
    var eq132 = eq(dictEq);
    return function(dictEq1) {
      var eq142 = eq(dictEq1);
      return {
        eq: function(x3) {
          return function(y2) {
            if (x3 instanceof Failed && y2 instanceof Failed) {
              return eq132(x3.value0)(y2.value0);
            }
            ;
            if (x3 instanceof Succeeded && y2 instanceof Succeeded) {
              return eq142(x3.value0)(y2.value0);
            }
            ;
            return false;
          };
        }
      };
    };
  };
  var eq9 = /* @__PURE__ */ eq(/* @__PURE__ */ eqFailedOr(eqNoGithubToken)(eqGithubGraphQLResponse));
  var eqFailedOr1 = /* @__PURE__ */ eqFailedOr(eqString);
  var eq10 = /* @__PURE__ */ eq(/* @__PURE__ */ eqFailedOr1(eqDeviceCodeResponse));
  var eq11 = /* @__PURE__ */ eq(/* @__PURE__ */ eqFailedOr1(/* @__PURE__ */ eqFailedOr(/* @__PURE__ */ eqRec3(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2(error_uriIsSymbol)(eqString))()(error_descriptionIsSymbol)(eqString))()(errorIsSymbol)(eqString)))(/* @__PURE__ */ eqRec3(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons2(token_typeIsSymbol)(eqTokenType))()(scopeIsSymbol)(eqScopeList))()(access_tokenIsSymbol)(eqAccessToken)))));
  var eq122 = /* @__PURE__ */ eq(/* @__PURE__ */ eqFailedOr1(eqSpagoGlobalCacheDir));
  var eqMessageToRenderer = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof ShowFolderSelectorResponse && y2 instanceof ShowFolderSelectorResponse) {
          return eq5(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof UserSelectedFile && y2 instanceof UserSelectedFile) {
          return eq6(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof GetInstalledToolsResponse && y2 instanceof GetInstalledToolsResponse) {
          return eq7(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof GetPureScriptSolutionDefinitionsResponse && y2 instanceof GetPureScriptSolutionDefinitionsResponse) {
          return eq8(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof GetIsLoggedIntoGithubResult && y2 instanceof GetIsLoggedIntoGithubResult) {
          return x3.value0 === y2.value0;
        }
        ;
        if (x3 instanceof GithubGraphQLResult && y2 instanceof GithubGraphQLResult) {
          return eq9(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof GithubLoginGetDeviceCodeResult && y2 instanceof GithubLoginGetDeviceCodeResult) {
          return eq10(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof GithubPollAccessTokenResult && y2 instanceof GithubPollAccessTokenResult) {
          return eq11(x3.value0)(y2.value0);
        }
        ;
        if (x3 instanceof CopyToClipboardResult && y2 instanceof CopyToClipboardResult) {
          return x3.value0 === y2.value0;
        }
        ;
        if (x3 instanceof GetClipboardTextResult && y2 instanceof GetClipboardTextResult) {
          return x3.value0 === y2.value0;
        }
        ;
        if (x3 instanceof GetSpagoGlobalCacheResult && y2 instanceof GetSpagoGlobalCacheResult) {
          return eq122(x3.value0)(y2.value0);
        }
        ;
        return false;
      };
    }
  };
  var failedOrToEither = function(v2) {
    if (v2 instanceof Failed) {
      return new Left(v2.value0);
    }
    ;
    if (v2 instanceof Succeeded) {
      return new Right(v2.value0);
    }
    ;
    throw new Error("Failed pattern match at Biz.IPC.Message.Types (line 52, column 20 - line 54, column 24): " + [v2.constructor.name]);
  };

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/regex.js
  var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

  // node_modules/uuid/dist/esm-browser/validate.js
  function validate(uuid) {
    return typeof uuid === "string" && regex_default.test(uuid);
  }
  var validate_default = validate;

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (i7 = 0; i7 < 256; ++i7) {
    byteToHex.push((i7 + 256).toString(16).substr(1));
  }
  var i7;
  function stringify(arr) {
    var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var uuid = (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
    if (!validate_default(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  var stringify_default = stringify;

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options3, buf, offset2) {
    options3 = options3 || {};
    var rnds = options3.random || (options3.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset2 = offset2 || 0;
      for (var i7 = 0; i7 < 16; ++i7) {
        buf[offset2 + i7] = rnds[i7];
      }
      return buf;
    }
    return stringify_default(rnds);
  }
  var v4_default = v4;

  // output/Data.UUID/foreign.js
  var getUUIDImpl = v4_default;

  // output/Data.UUID/index.js
  var UUID = function(x3) {
    return x3;
  };
  var toString = function(v2) {
    return v2;
  };
  var genUUID = /* @__PURE__ */ bind(bindEffect)(getUUIDImpl)(/* @__PURE__ */ function() {
    var $35 = pure(applicativeEffect);
    return function($36) {
      return $35(UUID($36));
    };
  }());

  // output/ElectronAPI/foreign.js
  var on4 = (channel) => (handler2) => () => window.electronAPI.on(channel, handler2);

  // output/ElectronAPI/index.js
  var pure7 = /* @__PURE__ */ pure(applicativeEffect);
  var mkListener = function(callback2) {
    return pure7(mkEffectFn1(callback2));
  };

  // output/Biz.Github/index.js
  var scopes = ["user", "repo"];
  var clientID = "e1bbd08c15830196cff5";

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag2, _1, _2, _3) {
      this.tag = tag2;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag2) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag2, _1, _2, _3);
      };
      fn.tag = tag2;
      return fn;
    }
    function nonCanceler2(error5) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error5) {
        setTimeout(function() {
          throw error5;
        }, 0);
      }
    }
    function runSync(left4, right3, eff) {
      try {
        return right3(eff());
      } catch (error5) {
        return left4(error5);
      }
    }
    function runAsync(left4, eff, k2) {
      try {
        return eff(k2)();
      } catch (error5) {
        k2(left4(error5))();
        return nonCanceler2;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size5 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size5 !== 0) {
          size5--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb2) {
          var i7, tmp;
          if (size5 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size5) % limit] = cb2;
          size5++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function() {
          return count === 0;
        },
        killAll: function(killError, cb2) {
          return function() {
            if (count === 0) {
              return cb2();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb2();
                  }
                };
              })();
            }
            for (var k2 in fibers) {
              if (fibers.hasOwnProperty(k2)) {
                killCount++;
                kill(k2);
              }
            }
            fibers = {};
            fiberId = 0;
            count = 0;
            return function(error5) {
              return new Aff2(SYNC, function() {
                for (var k3 in kills) {
                  if (kills.hasOwnProperty(k3)) {
                    kills[k3]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step3 = aff;
      var fail5 = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run5(localRunTick) {
        var tmp, result, attempt2;
        while (true) {
          tmp = null;
          result = null;
          attempt2 = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step3 = bhead(step3);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail5 = util.left(e);
                step3 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step3)) {
                status = RETURN;
                fail5 = step3;
                step3 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step3 = util.fromRight(step3);
              }
              break;
            case CONTINUE:
              switch (step3.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step3._2;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step3 = util.right(step3._1);
                  } else {
                    status = STEP_BIND;
                    step3 = step3._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step3 = runSync(util.left, util.right, step3._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step3 = runAsync(util.left, step3._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step3 = result2;
                        run5(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail5 = util.left(step3._1);
                  step3 = null;
                  break;
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step3, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step3, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step3 = step3._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step3._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step3._1) {
                    tmp.run();
                  }
                  step3 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step3 = sequential2(util, supervisor, step3._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step3 = interrupt || fail5 || step3;
              } else {
                tmp = attempts._3;
                attempt2 = attempts._1;
                attempts = attempts._2;
                switch (attempt2.tag) {
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail5) {
                      status = CONTINUE;
                      step3 = attempt2._2(util.fromLeft(fail5));
                      fail5 = null;
                    }
                    break;
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail5) {
                      status = RETURN;
                    } else {
                      bhead = attempt2._1;
                      btail = attempt2._2;
                      status = STEP_BIND;
                      step3 = util.fromRight(step3);
                    }
                    break;
                  case BRACKET:
                    bracketCount--;
                    if (fail5 === null) {
                      result = util.fromRight(step3);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt2._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step3 = attempt2._3(result);
                      }
                    }
                    break;
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail5), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step3 = attempt2._1.killed(util.fromLeft(interrupt))(attempt2._2);
                    } else if (fail5) {
                      step3 = attempt2._1.failed(util.fromLeft(fail5))(attempt2._2);
                    } else {
                      step3 = attempt2._1.completed(util.fromRight(step3))(attempt2._2);
                    }
                    fail5 = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step3, fail5), attempts, interrupt);
                    status = CONTINUE;
                    step3 = attempt2._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step3 = attempt2._1;
                    fail5 = attempt2._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k2 in joins) {
                if (joins.hasOwnProperty(k2)) {
                  rethrow = rethrow && joins[k2].rethrow;
                  runEff(joins[k2].handler(step3));
                }
              }
              joins = null;
              if (interrupt && fail5) {
                setTimeout(function() {
                  throw util.fromLeft(fail5);
                }, 0);
              } else if (util.isLeft(step3) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step3);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join6) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join6.rethrow;
            join6.handler(step3)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join6;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error5, cb2) {
        return function() {
          if (status === COMPLETED) {
            cb2(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb2(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error5);
              status = COMPLETED;
              step3 = interrupt;
              run5(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error5);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step3(error5)), attempts, interrupt);
                }
                status = RETURN;
                step3 = null;
                fail5 = null;
                run5(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error5);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step3 = null;
                fail5 = null;
              }
          }
          return canceler;
        };
      }
      function join5(cb2) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb2
          })();
          if (status === SUSPENDED) {
            run5(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join5,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run5(runTick);
              });
            } else {
              run5(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb2) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root2 = EMPTY;
      function kill(error5, par2, cb3) {
        var step3 = par2;
        var head6 = null;
        var tail3 = null;
        var count = 0;
        var kills2 = {};
        var tmp, kid;
        loop:
          while (true) {
            tmp = null;
            switch (step3.tag) {
              case FORKED:
                if (step3._3 === EMPTY) {
                  tmp = fibers[step3._1];
                  kills2[count++] = tmp.kill(error5, function(result) {
                    return function() {
                      count--;
                      if (count === 0) {
                        cb3(result)();
                      }
                    };
                  });
                }
                if (head6 === null) {
                  break loop;
                }
                step3 = head6._2;
                if (tail3 === null) {
                  head6 = null;
                } else {
                  head6 = tail3._1;
                  tail3 = tail3._2;
                }
                break;
              case MAP:
                step3 = step3._2;
                break;
              case APPLY:
              case ALT:
                if (head6) {
                  tail3 = new Aff2(CONS, head6, tail3);
                }
                head6 = step3;
                step3 = step3._1;
                break;
            }
          }
        if (count === 0) {
          cb3(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join5(result, head6, tail3) {
        var fail5, step3, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail5 = result;
          step3 = null;
        } else {
          step3 = result;
          fail5 = null;
        }
        loop:
          while (true) {
            lhs = null;
            rhs = null;
            tmp = null;
            kid = null;
            if (interrupt !== null) {
              return;
            }
            if (head6 === null) {
              cb2(fail5 || step3)();
              return;
            }
            if (head6._3 !== EMPTY) {
              return;
            }
            switch (head6.tag) {
              case MAP:
                if (fail5 === null) {
                  head6._3 = util.right(head6._1(util.fromRight(step3)));
                  step3 = head6._3;
                } else {
                  head6._3 = fail5;
                }
                break;
              case APPLY:
                lhs = head6._1._3;
                rhs = head6._2._3;
                if (fail5) {
                  head6._3 = fail5;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, fail5 === lhs ? head6._2 : head6._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join5(fail5, null, null);
                      } else {
                        join5(fail5, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                } else if (lhs === EMPTY || rhs === EMPTY) {
                  return;
                } else {
                  step3 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                  head6._3 = step3;
                }
                break;
              case ALT:
                lhs = head6._1._3;
                rhs = head6._2._3;
                if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                  return;
                }
                if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                  fail5 = step3 === lhs ? rhs : lhs;
                  step3 = null;
                  head6._3 = fail5;
                } else {
                  head6._3 = step3;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, step3 === lhs ? head6._2 : head6._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join5(step3, null, null);
                      } else {
                        join5(step3, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                }
                break;
            }
            if (tail3 === null) {
              head6 = null;
            } else {
              head6 = tail3._1;
              tail3 = tail3._2;
            }
          }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join5(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run5() {
        var status = CONTINUE;
        var step3 = par;
        var head6 = null;
        var tail3 = null;
        var tmp, fid;
        loop:
          while (true) {
            tmp = null;
            fid = null;
            switch (status) {
              case CONTINUE:
                switch (step3.tag) {
                  case MAP:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(MAP, step3._1, EMPTY, EMPTY);
                    step3 = step3._2;
                    break;
                  case APPLY:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(APPLY, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  case ALT:
                    if (head6) {
                      tail3 = new Aff2(CONS, head6, tail3);
                    }
                    head6 = new Aff2(ALT, EMPTY, step3._2, EMPTY);
                    step3 = step3._1;
                    break;
                  default:
                    fid = fiberId++;
                    status = RETURN;
                    tmp = step3;
                    step3 = new Aff2(FORKED, fid, new Aff2(CONS, head6, tail3), EMPTY);
                    tmp = Fiber(util, supervisor, tmp);
                    tmp.onComplete({
                      rethrow: false,
                      handler: resolve(step3)
                    })();
                    fibers[fid] = tmp;
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                }
                break;
              case RETURN:
                if (head6 === null) {
                  break loop;
                }
                if (head6._1 === EMPTY) {
                  head6._1 = step3;
                  status = CONTINUE;
                  step3 = head6._2;
                  head6._2 = EMPTY;
                } else {
                  head6._2 = step3;
                  step3 = head6;
                  if (tail3 === null) {
                    head6 = null;
                  } else {
                    head6 = tail3._1;
                    tail3 = tail3._2;
                  }
                }
            }
          }
        root2 = step3;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error5, cb3) {
        interrupt = util.left(error5);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error5, root2, cb3);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler2;
            };
          });
        };
      }
      run5();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb2) {
        return function() {
          return runPar(util, supervisor, par, cb2);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler2;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _catchError(aff) {
    return function(k2) {
      return Aff.Catch(aff, k2);
    };
  }
  function _map(f2) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f2(aff._1));
      } else {
        return Aff.Bind(aff, function(value12) {
          return Aff.Pure(f2(value12));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k2) {
      return Aff.Bind(aff, k2);
    };
  }
  var _liftEffect = Aff.Sync;
  function _parAffMap(f2) {
    return function(aff) {
      return Aff.ParMap(f2, aff);
    };
  }
  function _parAffApply(aff1) {
    return function(aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  }
  var makeAff = Aff.Async;
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _delay = function() {
    function setDelay(n2, k2) {
      if (n2 === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k2);
      } else {
        return setTimeout(k2, n2);
      }
    }
    function clearDelay(n2, t) {
      if (n2 === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }
    return function(right3, ms) {
      return Aff.Async(function(cb2) {
        return function() {
          var timer = setDelay(ms, cb2(right3()));
          return function() {
            return Aff.Sync(function() {
              return right3(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
  var _sequential = Aff.Seq;

  // output/Control.Monad.Maybe.Trans/index.js
  var map19 = /* @__PURE__ */ map(functorMaybe);
  var MaybeT = function(x3) {
    return x3;
  };
  var runMaybeT = function(v2) {
    return v2;
  };
  var monadTransMaybeT = {
    lift: function(dictMonad) {
      var $157 = liftM1(dictMonad)(Just.create);
      return function($158) {
        return MaybeT($157($158));
      };
    }
  };
  var functorMaybeT = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return {
      map: function(f2) {
        return function(v2) {
          return map113(map19(f2))(v2);
        };
      }
    };
  };
  var monadMaybeT = function(dictMonad) {
    return {
      Applicative0: function() {
        return applicativeMaybeT(dictMonad);
      },
      Bind1: function() {
        return bindMaybeT(dictMonad);
      }
    };
  };
  var bindMaybeT = function(dictMonad) {
    var bind61 = bind(dictMonad.Bind1());
    var pure64 = pure(dictMonad.Applicative0());
    return {
      bind: function(v2) {
        return function(f2) {
          return bind61(v2)(function(v1) {
            if (v1 instanceof Nothing) {
              return pure64(Nothing.value);
            }
            ;
            if (v1 instanceof Just) {
              var v22 = f2(v1.value0);
              return v22;
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Maybe.Trans (line 54, column 11 - line 56, column 42): " + [v1.constructor.name]);
          });
        };
      },
      Apply0: function() {
        return applyMaybeT(dictMonad);
      }
    };
  };
  var applyMaybeT = function(dictMonad) {
    var functorMaybeT1 = functorMaybeT(dictMonad.Bind1().Apply0().Functor0());
    return {
      apply: ap(monadMaybeT(dictMonad)),
      Functor0: function() {
        return functorMaybeT1;
      }
    };
  };
  var applicativeMaybeT = function(dictMonad) {
    return {
      pure: function() {
        var $159 = pure(dictMonad.Applicative0());
        return function($160) {
          return MaybeT($159(Just.create($160)));
        };
      }(),
      Apply0: function() {
        return applyMaybeT(dictMonad);
      }
    };
  };

  // output/Type.Equality/index.js
  var refl = {
    proof: function(a4) {
      return a4;
    },
    Coercible0: function() {
      return void 0;
    }
  };

  // output/Data.Profunctor/index.js
  var dimap = function(dict) {
    return dict.dimap;
  };

  // output/Control.Parallel.Class/index.js
  var sequential = function(dict) {
    return dict.sequential;
  };
  var parallel = function(dict) {
    return dict.parallel;
  };

  // output/Control.Parallel/index.js
  var identity12 = /* @__PURE__ */ identity(categoryFn);
  var parTraverse_ = function(dictParallel) {
    var sequential2 = sequential(dictParallel);
    var traverse_4 = traverse_(dictParallel.Applicative1());
    var parallel2 = parallel(dictParallel);
    return function(dictFoldable) {
      var traverse_1 = traverse_4(dictFoldable);
      return function(f2) {
        var $48 = traverse_1(function($50) {
          return parallel2(f2($50));
        });
        return function($49) {
          return sequential2($48($49));
        };
      };
    };
  };
  var parSequence_ = function(dictParallel) {
    var parTraverse_1 = parTraverse_(dictParallel);
    return function(dictFoldable) {
      return parTraverse_1(dictFoldable)(identity12);
    };
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy3 = function(name15, moduleName, init5) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init5();
      state3 = 2;
      return val;
    };
  };
  var pure8 = /* @__PURE__ */ pure(applicativeEffect);
  var $$void5 = /* @__PURE__ */ $$void(functorEffect);
  var map20 = /* @__PURE__ */ map(functorEffect);
  var Canceler = function(x3) {
    return x3;
  };
  var functorParAff = {
    map: _parAffMap
  };
  var functorAff = {
    map: _map
  };
  var map110 = /* @__PURE__ */ map(functorAff);
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v2) {
      if (v2 instanceof Right) {
        return v2.value0;
      }
      ;
      if (v2 instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 21 - line 409, column 54): " + [v2.constructor.name]);
    };
    var unsafeFromLeft = function(v2) {
      if (v2 instanceof Left) {
        return v2.value0;
      }
      ;
      if (v2 instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 20 - line 404, column 55): " + [v2.constructor.name]);
    };
    var isLeft = function(v2) {
      if (v2 instanceof Left) {
        return true;
      }
      ;
      if (v2 instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 397, column 12 - line 399, column 21): " + [v2.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do10() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var launchAff_ = function($73) {
    return $$void5(launchAff($73));
  };
  var delay = function(v2) {
    return _delay(Right.create, v2);
  };
  var applyParAff = {
    apply: _parAffApply,
    Functor0: function() {
      return functorParAff;
    }
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy3("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var applyAff = /* @__PURE__ */ $lazy_applyAff(71);
  var pure22 = /* @__PURE__ */ pure(applicativeAff);
  var bind1 = /* @__PURE__ */ bind(bindAff);
  var lift21 = /* @__PURE__ */ lift2(applyAff);
  var apply5 = /* @__PURE__ */ apply(applyAff);
  var semigroupAff = function(dictSemigroup) {
    return {
      append: lift21(append(dictSemigroup))
    };
  };
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var effectCanceler = function($74) {
    return Canceler($$const(liftEffect3($74)));
  };
  var joinFiber = function(v2) {
    return makeAff(function(k2) {
      return map20(effectCanceler)(v2.join(k2));
    });
  };
  var functorFiber = {
    map: function(f2) {
      return function(t) {
        return unsafePerformEffect(makeFiber(map110(f2)(joinFiber(t))));
      };
    }
  };
  var applyFiber = {
    apply: function(t1) {
      return function(t2) {
        return unsafePerformEffect(makeFiber(apply5(joinFiber(t1))(joinFiber(t2))));
      };
    },
    Functor0: function() {
      return functorFiber;
    }
  };
  var applicativeFiber = {
    pure: function(a4) {
      return unsafePerformEffect(makeFiber(pure22(a4)));
    },
    Apply0: function() {
      return applyFiber;
    }
  };
  var killFiber = function(e) {
    return function(v2) {
      return bind1(liftEffect3(v2.isSuspended))(function(suspended) {
        if (suspended) {
          return liftEffect3($$void5(v2.kill(e, $$const(pure8(unit)))));
        }
        ;
        return makeAff(function(k2) {
          return map20(effectCanceler)(v2.kill(e, k2));
        });
      });
    };
  };
  var monadThrowAff = {
    throwError: _throwError,
    Monad0: function() {
      return monadAff;
    }
  };
  var monadErrorAff = {
    catchError: _catchError,
    MonadThrow0: function() {
      return monadThrowAff;
    }
  };
  var $$try3 = /* @__PURE__ */ $$try2(monadErrorAff);
  var attempt = $$try3;
  var parallelAff = {
    parallel: unsafeCoerce2,
    sequential: _sequential,
    Monad0: function() {
      return monadAff;
    },
    Applicative1: function() {
      return $lazy_applicativeParAff(0);
    }
  };
  var $lazy_applicativeParAff = /* @__PURE__ */ $runtime_lazy3("applicativeParAff", "Effect.Aff", function() {
    return {
      pure: function() {
        var $79 = parallel(parallelAff);
        return function($80) {
          return $79(pure22($80));
        };
      }(),
      Apply0: function() {
        return applyParAff;
      }
    };
  });
  var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(foldableArray);
  var semigroupCanceler = {
    append: function(v2) {
      return function(v1) {
        return function(err) {
          return parSequence_2([v2(err), v1(err)]);
        };
      };
    }
  };
  var monadRecAff = {
    tailRecM: function(k2) {
      var go2 = function(a4) {
        return bind1(k2(a4))(function(res) {
          if (res instanceof Done) {
            return pure22(res.value0);
          }
          ;
          if (res instanceof Loop) {
            return go2(res.value0);
          }
          ;
          throw new Error("Failed pattern match at Effect.Aff (line 102, column 7 - line 104, column 23): " + [res.constructor.name]);
        });
      };
      return go2;
    },
    Monad0: function() {
      return monadAff;
    }
  };
  var monoidAff = function(dictMonoid) {
    var semigroupAff1 = semigroupAff(dictMonoid.Semigroup0());
    return {
      mempty: pure22(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupAff1;
      }
    };
  };
  var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure22(unit));
  var monoidCanceler = {
    mempty: nonCanceler,
    Semigroup0: function() {
      return semigroupCanceler;
    }
  };

  // output/Yoga.Fetch/foreign.js
  var _fetch = (fetchImpl) => (url2) => (options3) => () => {
    return fetchImpl(url2, options3).catch(function(e) {
      throw new Error(e);
    });
  };
  var textImpl = (response) => () => response.text();

  // output/Control.Promise/foreign.js
  function thenImpl(promise2) {
    return function(errCB) {
      return function(succCB) {
        return function() {
          promise2.then(succCB, errCB);
        };
      };
    };
  }

  // output/Control.Promise/index.js
  var voidRight2 = /* @__PURE__ */ voidRight(functorEffect);
  var mempty2 = /* @__PURE__ */ mempty(monoidCanceler);
  var toAff$prime = function(customCoerce) {
    return function(p3) {
      return makeAff(function(cb2) {
        return voidRight2(mempty2)(thenImpl(p3)(function($14) {
          return cb2(Left.create(customCoerce($14)))();
        })(function($15) {
          return cb2(Right.create($15))();
        }));
      });
    };
  };

  // output/Foreign.Internal.Stringify/foreign.js
  var unsafeStringify = JSON.stringify;

  // output/Yoga.Fetch/index.js
  var bind9 = /* @__PURE__ */ bind(bindAff);
  var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var text = function(res) {
    var toAffE$prime = function(f2) {
      return bind9(liftEffect4(f2))(toAff$prime(function($14) {
        return error(unsafeStringify($14));
      }));
    };
    return toAffE$prime(textImpl(res));
  };
  var statusCode = function(response) {
    return response.status;
  };
  var postMethod = "POST";
  var fetch = function(impl) {
    return function() {
      return function(url$prime) {
        return function(opts) {
          var toAffE$prime = function(f2) {
            return bind9(liftEffect4(f2))(toAff$prime(function($15) {
              return error(unsafeStringify($15));
            }));
          };
          return toAffE$prime(_fetch(impl)(url$prime)(opts));
        };
      };
    };
  };

  // output/UI.GithubLogin.Repository/index.js
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorAff);
  var lmap2 = /* @__PURE__ */ lmap(bifunctorEither);
  var show4 = /* @__PURE__ */ show(showError);
  var join2 = /* @__PURE__ */ join(bindEither);
  var bind10 = /* @__PURE__ */ bind(bindAff);
  var fromHomogeneous2 = /* @__PURE__ */ fromHomogeneous();
  var writeJSON2 = /* @__PURE__ */ writeJSON(writeForeignDeviceCodeReq);
  var readJSON2 = /* @__PURE__ */ readJSON(readForeignDeviceCodeResp);
  var pure9 = /* @__PURE__ */ pure(applicativeAff);
  var show12 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
  var show22 = /* @__PURE__ */ show(showInt);
  var writeJSON1 = /* @__PURE__ */ writeJSON(/* @__PURE__ */ writeForeignRecord()(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "client_id";
    }
  })(writeForeignClientID)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "device_code";
    }
  })(writeForeignDeviceCode)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "grant_type";
    }
  })(writeForeignGrantType)(writeForeignFieldsNilRowR)()()())()()())()()()));
  var alt5 = /* @__PURE__ */ alt(altEither);
  var bimap2 = /* @__PURE__ */ bimap(bifunctorEither);
  var readForeignRecord4 = /* @__PURE__ */ readForeignRecord();
  var readJSON1 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignRecord4(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "error";
    }
  })(readForeignString)(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "error_description";
    }
  })(readForeignString)(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "error_uri";
    }
  })(readForeignString)(readForeignFieldsNilRowRo)()())()())()()));
  var readJSON22 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignRecord4(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "access_token";
    }
  })(readForeignAccessToken)(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "scope";
    }
  })(readForeignScopeList)(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "token_type";
    }
  })(readForeignTokenType)(readForeignFieldsNilRowRo)()())()())()()));
  var attemptString = function(aff) {
    return mapFlipped3(attempt(aff))(function() {
      var $89 = lmap2(show4);
      return function($90) {
        return join2($89($90));
      };
    }());
  };
  var getDeviceCode = function(fetch2) {
    return attemptString(bind10(fetch2()("https://github.com/login/device/code")({
      method: postMethod,
      headers: fromHomogeneous2({
        Accept: "application/json",
        "Content-Type": "application/json"
      }),
      body: writeJSON2({
        client_id: clientID,
        scope: scopes
      })
    }))(function(res) {
      var v2 = statusCode(res);
      if (v2 === 200) {
        return bind10(mapFlipped3(text(res))(readJSON2))(function(errorOrBody) {
          return pure9(lmap2(show12)(errorOrBody));
        });
      }
      ;
      return mapFlipped3(text(res))(function($91) {
        return Left.create(function(v1) {
          return show22(v2) + v1;
        }($91));
      });
    }));
  };
  var pollAccessToken = function(fetch2) {
    var fetch1 = fetch2();
    return function(device_code) {
      return attemptString(bind10(fetch1("https://github.com/login/oauth/access_token")({
        method: postMethod,
        headers: fromHomogeneous2({
          Accept: "application/json",
          "Content-Type": "application/json"
        }),
        body: writeJSON1({
          client_id: clientID,
          device_code,
          grant_type: "urn:ietf:params:oauth:grant-type:device_code"
        })
      }))(function(res) {
        var v2 = statusCode(res);
        if (v2 === 200) {
          return bind10(text(res))(function(stringBody) {
            return pure9(alt5(bimap2(show12)(Left.create)(readJSON1(stringBody)))(bimap2(show12)(Right.create)(readJSON22(stringBody))));
          });
        }
        ;
        return mapFlipped3(text(res))(function($92) {
          return Left.create(function(v1) {
            return show22(v2) + v1;
          }($92));
        });
      }));
    };
  };

  // output/UI.PostMessage/foreign.js
  var postMessageImpl = (message2) => () => window.postMessage(message2);

  // output/UI.PostMessage/index.js
  var postMessage = function(dictWriteForeign) {
    var $3 = write3(dictWriteForeign);
    return function($4) {
      return postMessageImpl($3($4));
    };
  };

  // output/Yoga.Block.Organism.NotificationCentre.Types/index.js
  var compare3 = /* @__PURE__ */ compare(ordInt);
  var NotificationAdded = /* @__PURE__ */ function() {
    function NotificationAdded2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    NotificationAdded2.create = function(value0) {
      return function(value1) {
        return new NotificationAdded2(value0, value1);
      };
    };
    return NotificationAdded2;
  }();
  var NotificationDismissed = /* @__PURE__ */ function() {
    function NotificationDismissed2(value0) {
      this.value0 = value0;
    }
    ;
    NotificationDismissed2.create = function(value0) {
      return new NotificationDismissed2(value0);
    };
    return NotificationDismissed2;
  }();
  var eqSubscriberId = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var ordSubscriberId = {
    compare: function(x3) {
      return function(y2) {
        return compare3(x3)(y2);
      };
    },
    Eq0: function() {
      return eqSubscriberId;
    }
  };
  var eqNotificationId = {
    eq: function(x3) {
      return function(y2) {
        return x3 === y2;
      };
    }
  };
  var ordNotificationId = {
    compare: function(x3) {
      return function(y2) {
        return compare3(x3)(y2);
      };
    },
    Eq0: function() {
      return eqNotificationId;
    }
  };

  // output/Yoga.Block.Organism.NotificationCentre/index.js
  var $$delete5 = /* @__PURE__ */ $$delete2(ordNotificationId);
  var traverse_2 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMap);
  var map21 = /* @__PURE__ */ map(functorEffect);
  var wrap2 = /* @__PURE__ */ wrap();
  var insert7 = /* @__PURE__ */ insert2(ordSubscriberId);
  var delete1 = /* @__PURE__ */ $$delete2(ordSubscriberId);
  var insert1 = /* @__PURE__ */ insert2(ordNotificationId);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var applySecond2 = /* @__PURE__ */ applySecond(applyAff);
  var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var removeNotification = function(notificationsRef) {
    return function(subscribersRef) {
      return function(id5) {
        return function __do10() {
          modify_($$delete5(id5))(notificationsRef)();
          var subscribers = read(subscribersRef)();
          return traverse_2(function(v2) {
            return v2(new NotificationDismissed(id5));
          })(subscribers)();
        };
      };
    };
  };
  var mkGenerateId = function() {
    return map21(function(v2) {
      return map21(wrap2)(modify(function(v1) {
        return v1 + 1 | 0;
      })(v2));
    })($$new(0));
  };
  var mkGenerateId1 = /* @__PURE__ */ mkGenerateId();
  var mkSubscribe = function(subscribersRef) {
    return function __do10() {
      var generateId = mkGenerateId1();
      return function(callback2) {
        return function __do11() {
          var id5 = generateId();
          modify_(insert7(id5)(callback2))(subscribersRef)();
          var unsubscribe = modify_(delete1(id5))(subscribersRef);
          return unsubscribe;
        };
      };
    };
  };
  var mkEnqueueNotification = function(notificationsRef) {
    return function(subscribersRef) {
      return function __do10() {
        var generateId = mkGenerateId1();
        return function(n2) {
          return function __do11() {
            var id5 = generateId();
            modify_(insert1(id5)(n2))(notificationsRef)();
            var remove = removeNotification(notificationsRef)(subscribersRef)(id5);
            var subscribers = read(subscribersRef)();
            traverse_2(function(v2) {
              return v2(new NotificationAdded(id5, n2.render({
                dismiss: remove
              })));
            })(subscribers)();
            return for_2(n2.autoHideAfter)(function(hideAfter) {
              return launchAff_(applySecond2(delay(hideAfter))(liftEffect5(remove)));
            })();
          };
        };
      };
    };
  };
  var mkNotificationCentre = function __do() {
    var notificationsRef = $$new(empty3)();
    var subscribersRef = $$new(empty3)();
    var enqueueNotification = mkEnqueueNotification(notificationsRef)(subscribersRef)();
    var subscribe2 = mkSubscribe(subscribersRef)();
    return {
      enqueueNotification,
      subscribe: subscribe2
    };
  };

  // output/Yoga.Fetch.Impl.Window/foreign.js
  var windowFetch = window.fetch;

  // output/UI.Ctx.Electron/index.js
  var postMessage2 = /* @__PURE__ */ postMessage(writeForeignForeign);
  var writeForeignRecord6 = /* @__PURE__ */ writeForeignRecord();
  var write5 = /* @__PURE__ */ write3(/* @__PURE__ */ writeForeignRecord6(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "data";
    }
  })(/* @__PURE__ */ writeForeignRecord6(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "message_id";
    }
  })(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "payload";
    }
  })(writeForeignMessageToMain)(writeForeignFieldsNilRowR)()()())()()()))(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "type";
    }
  })(writeForeignString)(writeForeignFieldsNilRowR)()()())()()()));
  var mkElectronCtx = /* @__PURE__ */ map(functorEffect)(function(v2) {
    return {
      registerListener: on4("ipc"),
      postMessage: function(uuid) {
        return function(payload) {
          return postMessage2(write5({
            type: "ipc",
            data: {
              message_id: toString(uuid),
              payload
            }
          }));
        };
      },
      notificationCentre: v2,
      githubAuth: {
        getDeviceCode: getDeviceCode(fetch(windowFetch)),
        pollAccessToken: pollAccessToken(fetch(windowFetch))
      }
    };
  })(mkNotificationCentre);

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React3 = __toESM(require_react());
  var import_react4 = __toESM(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag2) {
    if (tag2.sheet) {
      return tag2.sheet;
    }
    for (var i7 = 0; i7 < document.styleSheets.length; i7++) {
      if (document.styleSheets[i7].ownerNode === tag2) {
        return document.styleSheets[i7];
      }
    }
  }
  function createStyleElement(options3) {
    var tag2 = document.createElement("style");
    tag2.setAttribute("data-emotion", options3.key);
    if (options3.nonce !== void 0) {
      tag2.setAttribute("nonce", options3.nonce);
    }
    tag2.appendChild(document.createTextNode(""));
    tag2.setAttribute("data-s", "");
    return tag2;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options3) {
      var _this = this;
      this._insertTag = function(tag2) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag2, before);
        _this.tags.push(tag2);
      };
      this.isSpeedy = options3.speedy === void 0 ? false : options3.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options3.nonce;
      this.key = options3.key;
      this.container = options3.container;
      this.prepend = options3.prepend;
      this.insertionPoint = options3.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert11(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag2 = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet2 = sheetForTag(tag2);
        try {
          sheet2.insertRule(rule, sheet2.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag2.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag2) {
        return tag2.parentNode && tag2.parentNode.removeChild(tag2);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";

  // node_modules/stylis/src/Utility.js
  var abs3 = Math.abs;
  var from3 = String.fromCharCode;
  var assign = Object.assign;
  function hash(value12, length10) {
    return (((length10 << 2 ^ charat(value12, 0)) << 2 ^ charat(value12, 1)) << 2 ^ charat(value12, 2)) << 2 ^ charat(value12, 3);
  }
  function trim2(value12) {
    return value12.trim();
  }
  function match3(value12, pattern2) {
    return (value12 = pattern2.exec(value12)) ? value12[0] : value12;
  }
  function replace3(value12, pattern2, replacement) {
    return value12.replace(pattern2, replacement);
  }
  function indexof(value12, search3) {
    return value12.indexOf(search3);
  }
  function charat(value12, index6) {
    return value12.charCodeAt(index6) | 0;
  }
  function substr(value12, begin, end3) {
    return value12.slice(begin, end3);
  }
  function strlen(value12) {
    return value12.length;
  }
  function sizeof(value12) {
    return value12.length;
  }
  function append3(value12, array) {
    return array.push(value12), value12;
  }
  function combine(array, callback2) {
    return array.map(callback2).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length6 = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value12, root2, parent2, type, props, children2, length10) {
    return { value: value12, root: root2, parent: parent2, type, props, children: children2, line, column, length: length10, return: "" };
  }
  function copy(root2, props) {
    return assign(node("", null, null, "", null, null, 0), root2, { length: -root2.length }, props);
  }
  function char2() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length6 ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice3(begin, end3) {
    return substr(characters, begin, end3);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value12) {
    return line = column = 1, length6 = strlen(characters = value12), position = 0, [];
  }
  function dealloc(value12) {
    return characters = "", value12;
  }
  function delimit(type) {
    return trim2(slice3(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index6, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice3(index6, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index6) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice3(index6, position - 1) + "*" + from3(type === 47 ? type : next());
  }
  function identifier(index6) {
    while (!token(peek()))
      next();
    return slice3(index6, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value12) {
    return dealloc(parse("", null, null, null, [""], value12 = alloc(value12), 0, [0], value12));
  }
  function parse(value12, root2, parent2, rule, rules2, rulesets, pseudo, points, declarations) {
    var index6 = 0;
    var offset2 = 0;
    var length10 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules2;
    var children2 = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && characters2.charCodeAt(length10 - 1) == 58) {
            if (indexof(characters2 += replace3(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append3(comment(commenter(next(), caret()), root2, parent2), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index6++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset2:
              if (property > 0 && strlen(characters2) - length10)
                append3(property > 32 ? declaration(characters2 + ";", rule, parent2, length10 - 1) : declaration(replace3(characters2, " ", "") + ";", rule, parent2, length10 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append3(reference = ruleset(characters2, root2, parent2, index6, offset2, rules2, points, type, props = [], children2 = [], length10), rulesets);
              if (character2 === 123)
                if (offset2 === 0)
                  parse(characters2, root2, reference, reference, props, rulesets, length10, points, children2);
                else
                  switch (atrule) {
                    case 100:
                    case 109:
                    case 115:
                      parse(value12, reference, reference, rule && append3(ruleset(value12, reference, reference, 0, 0, rules2, points, type, rules2, props = [], length10), children2), rules2, children2, length10, points, rule ? props : children2);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children2, 0, points, children2);
                  }
          }
          index6 = offset2 = property = 0, variable = ampersand = 1, type = characters2 = "", length10 = pseudo;
          break;
        case 58:
          length10 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from3(character2), character2 * variable) {
            case 38:
              ampersand = offset2 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index6++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset2 = length10 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value12, root2, parent2, index6, offset2, rules2, points, type, props, children2, length10) {
    var post = offset2 - 1;
    var rule = offset2 === 0 ? rules2 : [""];
    var size5 = sizeof(rule);
    for (var i7 = 0, j2 = 0, k2 = 0; i7 < index6; ++i7)
      for (var x3 = 0, y2 = substr(value12, post + 1, post = abs3(j2 = points[i7])), z2 = value12; x3 < size5; ++x3)
        if (z2 = trim2(j2 > 0 ? rule[x3] + " " + y2 : replace3(y2, /&\f/g, rule[x3])))
          props[k2++] = z2;
    return node(value12, root2, parent2, offset2 === 0 ? RULESET : type, props, children2, length10);
  }
  function comment(value12, root2, parent2) {
    return node(value12, root2, parent2, COMMENT, from3(char2()), substr(value12, 2, -2), 0);
  }
  function declaration(value12, root2, parent2, length10) {
    return node(value12, root2, parent2, DECLARATION, substr(value12, 0, length10), substr(value12, length10 + 1, -1), length10);
  }

  // node_modules/stylis/src/Prefixer.js
  function prefix(value12, length10) {
    switch (hash(value12, length10)) {
      case 5103:
        return WEBKIT + "print-" + value12 + value12;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value12 + value12;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value12 + MOZ + value12 + MS + value12 + value12;
      case 6828:
      case 4268:
        return WEBKIT + value12 + MS + value12 + value12;
      case 6165:
        return WEBKIT + value12 + MS + "flex-" + value12 + value12;
      case 5187:
        return WEBKIT + value12 + replace3(value12, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value12;
      case 5443:
        return WEBKIT + value12 + MS + "flex-item-" + replace3(value12, /flex-|-self/, "") + value12;
      case 4675:
        return WEBKIT + value12 + MS + "flex-line-pack" + replace3(value12, /align-content|flex-|-self/, "") + value12;
      case 5548:
        return WEBKIT + value12 + MS + replace3(value12, "shrink", "negative") + value12;
      case 5292:
        return WEBKIT + value12 + MS + replace3(value12, "basis", "preferred-size") + value12;
      case 6060:
        return WEBKIT + "box-" + replace3(value12, "-grow", "") + WEBKIT + value12 + MS + replace3(value12, "grow", "positive") + value12;
      case 4554:
        return WEBKIT + replace3(value12, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value12;
      case 6187:
        return replace3(replace3(replace3(value12, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value12, "") + value12;
      case 5495:
      case 3959:
        return replace3(value12, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace3(replace3(value12, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value12 + value12;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace3(value12, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value12;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value12) - 1 - length10 > 6)
          switch (charat(value12, length10 + 1)) {
            case 109:
              if (charat(value12, length10 + 4) !== 45)
                break;
            case 102:
              return replace3(value12, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value12, length10 + 3) == 108 ? "$3" : "$2-$3")) + value12;
            case 115:
              return ~indexof(value12, "stretch") ? prefix(replace3(value12, "stretch", "fill-available"), length10) + value12 : value12;
          }
        break;
      case 4949:
        if (charat(value12, length10 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value12, strlen(value12) - 3 - (~indexof(value12, "!important") && 10))) {
          case 107:
            return replace3(value12, ":", ":" + WEBKIT) + value12;
          case 101:
            return replace3(value12, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value12, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value12;
        }
        break;
      case 5936:
        switch (charat(value12, length10 + 11)) {
          case 114:
            return WEBKIT + value12 + MS + replace3(value12, /[svh]\w+-[tblr]{2}/, "tb") + value12;
          case 108:
            return WEBKIT + value12 + MS + replace3(value12, /[svh]\w+-[tblr]{2}/, "tb-rl") + value12;
          case 45:
            return WEBKIT + value12 + MS + replace3(value12, /[svh]\w+-[tblr]{2}/, "lr") + value12;
        }
        return WEBKIT + value12 + MS + value12 + value12;
    }
    return value12;
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children2, callback2) {
    var output2 = "";
    var length10 = sizeof(children2);
    for (var i7 = 0; i7 < length10; i7++)
      output2 += callback2(children2[i7], i7, children2, callback2) || "";
    return output2;
  }
  function stringify2(element3, index6, children2, callback2) {
    switch (element3.type) {
      case IMPORT:
      case DECLARATION:
        return element3.return = element3.return || element3.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element3.return = element3.value + "{" + serialize(element3.children, callback2) + "}";
      case RULESET:
        element3.value = element3.props.join(",");
    }
    return strlen(children2 = serialize(element3.children, callback2)) ? element3.return = element3.value + "{" + children2 + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length10 = sizeof(collection);
    return function(element3, index6, children2, callback2) {
      var output2 = "";
      for (var i7 = 0; i7 < length10; i7++)
        output2 += collection[i7](element3, index6, children2, callback2) || "";
      return output2;
    };
  }
  function prefixer(element3, index6, children2, callback2) {
    if (element3.length > -1) {
      if (!element3.return)
        switch (element3.type) {
          case DECLARATION:
            element3.return = prefix(element3.value, element3.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element3, { value: replace3(element3.value, "@", "@" + WEBKIT) })], callback2);
          case RULESET:
            if (element3.length)
              return combine(element3.props, function(value12) {
                switch (match3(value12, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element3, { props: [replace3(value12, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback2);
                  case "::placeholder":
                    return serialize([
                      copy(element3, { props: [replace3(value12, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element3, { props: [replace3(value12, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element3, { props: [replace3(value12, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback2);
                }
                return "";
              });
        }
    }
  }

  // node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
  function memoize(fn) {
    var cache = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache[arg] === void 0)
        cache[arg] = fn(arg);
      return cache[arg];
    };
  }
  var emotion_memoize_browser_esm_default = memoize;

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var last4 = function last5(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  };
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index6) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index6] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice3(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index6 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index6] = 1;
          }
          parsed[index6] += identifierWithPointTracking(position - 1, points, index6);
          break;
        case 2:
          parsed[index6] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index6] = peek() === 58 ? "&\f" : "";
            points[index6] = parsed[index6].length;
            break;
          }
        default:
          parsed[index6] += from3(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value12, points) {
    return dealloc(toRules(alloc(value12), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element3) {
    if (element3.type !== "rule" || !element3.parent || element3.length < 1) {
      return;
    }
    var value12 = element3.value, parent2 = element3.parent;
    var isImplicitRule = element3.column === parent2.column && element3.line === parent2.line;
    while (parent2.type !== "rule") {
      parent2 = parent2.parent;
      if (!parent2)
        return;
    }
    if (element3.props.length === 1 && value12.charCodeAt(0) !== 58 && !fixedElements.get(parent2)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element3, true);
    var points = [];
    var rules2 = getRules(value12, points);
    var parentRules = parent2.props;
    for (var i7 = 0, k2 = 0; i7 < rules2.length; i7++) {
      for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
        element3.props[k2] = points[i7] ? rules2[i7].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules2[i7];
      }
    }
  };
  var removeLabel = function removeLabel2(element3) {
    if (element3.type === "decl") {
      var value12 = element3.value;
      if (value12.charCodeAt(0) === 108 && value12.charCodeAt(2) === 98) {
        element3["return"] = "";
        element3.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element3) {
    return !!element3 && element3.type === "comm" && element3.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
    return function(element3, index6, children2) {
      if (element3.type !== "rule")
        return;
      var unsafePseudoClasses = element3.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses && cache.compat !== true) {
        var prevElement = index6 > 0 ? children2[index6 - 1] : null;
        if (prevElement && isIgnoringComment(last4(prevElement.children))) {
          return;
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element3) {
    return element3.type.charCodeAt(1) === 105 && element3.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index6, children2) {
    for (var i7 = index6 - 1; i7 >= 0; i7--) {
      if (!isImportRule(children2[i7])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element3) {
    element3.type = "";
    element3.value = "";
    element3["return"] = "";
    element3.children = "";
    element3.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element3, index6, children2) {
    if (!isImportRule(element3)) {
      return;
    }
    if (element3.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element3);
    } else if (isPrependedWithRegularRules(index6, children2)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element3);
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options3) {
    var key = options3.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options3.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container5;
    var nodesToHydrate = [];
    {
      container5 = options3.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i7 = 1; i7 < attrib.length; i7++) {
          inserted[attrib[i7]] = true;
        }
        nodesToHydrate.push(node2);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify2, true ? function(element3) {
        if (!element3.root) {
          if (element3["return"]) {
            currentSheet.insert(element3["return"]);
          } else if (element3.value && element3.type !== COMMENT) {
            currentSheet.insert(element3.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles) {
        return serialize(compile(styles), serializer);
      };
      _insert = function insert11(selector, serialized, sheet2, shouldCache) {
        currentSheet = sheet2;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert12(rule) {
              sheet2.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache.inserted[serialized.name] = true;
        }
      };
    }
    var cache = {
      key,
      sheet: new StyleSheet({
        key,
        container: container5,
        nonce: options3.nonce,
        speedy: options3.speedy,
        prepend: options3.prepend,
        insertionPoint: options3.insertionPoint
      }),
      nonce: options3.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache.sheet.hydrate(nodesToHydrate);
    return cache;
  };
  var emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var React2 = __toESM(require_react());
  var import_react3 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target6) {
      for (var i7 = 1; i7 < arguments.length; i7++) {
        var source3 = arguments[i7];
        for (var key in source3) {
          if (Object.prototype.hasOwnProperty.call(source3, key)) {
            target6[key] = source3[key];
          }
        }
      }
      return target6;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className2) {
      if (registered[className2] !== void 0) {
        registeredStyles.push(registered[className2] + ";");
      } else {
        rawClassName += className2 + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
    var className2 = cache.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false) && cache.registered[className2] === void 0) {
      cache.registered[className2] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
    registerStyles(cache, serialized, isStringTag);
    var className2 = cache.key + "-" + serialized.name;
    if (cache.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache.insert(serialized === current ? "." + className2 : "", current, cache.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str2) {
    var h7 = 0;
    var k2, i7 = 0, len = str2.length;
    for (; len >= 4; ++i7, len -= 4) {
      k2 = str2.charCodeAt(i7) & 255 | (str2.charCodeAt(++i7) & 255) << 8 | (str2.charCodeAt(++i7) & 255) << 16 | (str2.charCodeAt(++i7) & 255) << 24;
      k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= k2 >>> 24;
      h7 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h7 & 65535) * 1540483477 + ((h7 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h7 ^= (str2.charCodeAt(i7 + 2) & 255) << 16;
      case 2:
        h7 ^= (str2.charCodeAt(i7 + 1) & 255) << 8;
      case 1:
        h7 ^= str2.charCodeAt(i7) & 255;
        h7 = (h7 & 65535) * 1540483477 + ((h7 >>> 16) * 59797 << 16);
    }
    h7 ^= h7 >>> 13;
    h7 = (h7 & 65535) * 1540483477 + ((h7 >>> 16) * 59797 << 16);
    return ((h7 ^ h7 >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value12) {
    return value12 != null && typeof value12 !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value12) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value12 === "string") {
          return value12.replace(animationRegex, function(match6, p1, p22) {
            cursor = {
              name: p1,
              styles: p22,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value12 === "number" && value12 !== 0) {
      return value12 + "px";
    }
    return value12;
  };
  if (true) {
    contentValuePattern = /(var|attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    contentValues = ["normal", "none", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern2 = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value12) {
      if (key === "content") {
        if (typeof value12 !== "string" || contentValues.indexOf(value12) === -1 && !contentValuePattern.test(value12) && (value12.charAt(0) !== value12.charAt(value12.length - 1) || value12.charAt(0) !== '"' && value12.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value12 + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value12);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern2, "ms-").replace(hyphenPattern, function(str2, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern2;
  var hyphenPattern;
  var hyphenatedCache;
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles += interpolation.map;
          }
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match6, p1, p22) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p22.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i7 = 0; i7 < obj.length; i7++) {
        string += handleInterpolation(mergedProps, registered, obj[i7]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value12 = obj[_key];
        if (typeof value12 !== "object") {
          if (registered != null && registered[value12] !== void 0) {
            string += _key + "{" + registered[value12] + "}";
          } else if (isProcessableValue(value12)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value12) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value12) && typeof value12[0] === "string" && (registered == null || registered[value12[0]] === void 0)) {
            for (var _i = 0; _i < value12.length; _i++) {
              if (isProcessableValue(value12[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value12[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value12);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles += strings[0];
    }
    for (var i7 = 1; i7 < args.length; i7++) {
      styles += handleInterpolation(mergedProps, registered, args[i7]);
      if (stringMode) {
        if (strings[i7] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles += strings[i7];
      }
    }
    var sourceMap;
    if (true) {
      styles = styles.replace(sourceMapPattern, function(match7) {
        sourceMap = match7;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match6;
    while ((match6 = labelPattern.exec(styles)) !== null) {
      identifierName += "-" + match6[1];
    }
    var name15 = hash_browser_esm_default(styles) + identifierName;
    if (true) {
      return {
        name: name15,
        styles,
        map: sourceMap,
        next: cursor,
        toString: function toString5() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name: name15,
      styles,
      next: cursor
    };
  };

  // node_modules/@emotion/react/dist/emotion-element-cbed451f.browser.esm.js
  var hasOwnProperty2 = {}.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ (0, import_react3.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  if (true) {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react3.forwardRef)(function(props, ref) {
      var cache = (0, import_react3.useContext)(EmotionCacheContext);
      return func(props, cache, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ (0, import_react3.createContext)({});
  if (true) {
    ThemeContext.displayName = "EmotionThemeContext";
  }
  var getLastPart = function getLastPart2(functionName) {
    var parts = functionName.split(".");
    return parts[parts.length - 1];
  };
  var getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
    var match6 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
    if (match6)
      return getLastPart(match6[1]);
    match6 = /^([A-Za-z0-9$.]+)@/.exec(line2);
    if (match6)
      return getLastPart(match6[1]);
    return void 0;
  };
  var internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
  var sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
    return identifier2.replace(/\$/g, "-");
  };
  var getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
    if (!stackTrace)
      return void 0;
    var lines = stackTrace.split("\n");
    for (var i7 = 0; i7 < lines.length; i7++) {
      var functionName = getFunctionNameFromStackTraceLine(lines[i7]);
      if (!functionName)
        continue;
      if (internalReactFunctionNames.has(functionName))
        break;
      if (/^[A-Z]/.test(functionName))
        return sanitizeIdentifier(functionName);
    }
    return void 0;
  };
  var useInsertionEffect2 = React2["useInsertionEffect"] ? React2["useInsertionEffect"] : function useInsertionEffect3(create4) {
    create4();
  };
  function useInsertionEffectMaybe(create4) {
    useInsertionEffect2(create4);
  }
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var createEmotionProps = function createEmotionProps2(type, props) {
    if (typeof props.css === "string" && props.css.indexOf(":") !== -1) {
      throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
    }
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty2.call(props, key)) {
        newProps[key] = props[key];
      }
    }
    newProps[typePropName] = type;
    if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
      var label6 = getLabelFromStackTrace(new Error().stack);
      if (label6)
        newProps[labelPropName] = label6;
    }
    return newProps;
  };
  var Insertion = function Insertion2(_ref) {
    var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
    registerStyles(cache, serialized, isStringTag);
    var rules2 = useInsertionEffectMaybe(function() {
      return insertStyles(cache, serialized, isStringTag);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
      cssProp = cache.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className2 = "";
    if (typeof props.className === "string") {
      className2 = getRegisteredStyles(cache.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className2 = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, (0, import_react3.useContext)(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    className2 += cache.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty2.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className2;
    return /* @__PURE__ */ (0, import_react3.createElement)(import_react3.Fragment, null, /* @__PURE__ */ (0, import_react3.createElement)(Insertion, {
      cache,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ (0, import_react3.createElement)(WrappedComponent, newProps));
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.9.3",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "Emotion Contributors",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.13.10",
      "@emotion/babel-plugin": "^11.7.1",
      "@emotion/cache": "^11.9.3",
      "@emotion/serialize": "^1.0.4",
      "@emotion/utils": "^1.1.0",
      "@emotion/weak-memoize": "^0.2.5",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0",
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@babel/core": {
        optional: true
      },
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@babel/core": "^7.13.10",
      "@definitelytyped/dtslint": "0.0.112",
      "@emotion/css": "11.9.0",
      "@emotion/css-prettifier": "1.0.1",
      "@emotion/server": "11.4.0",
      "@emotion/styled": "11.9.3",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1",
      typescript: "^4.5.5"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact"
    }
  };
  var jsx = function jsx2(type, props) {
    var args = arguments;
    if (props == null || !hasOwnProperty2.call(props, "css")) {
      return import_react4.createElement.apply(void 0, args);
    }
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = Emotion;
    createElementArgArray[1] = createEmotionProps(type, props);
    for (var i7 = 2; i7 < argsLength; i7++) {
      createElementArgArray[i7] = args[i7];
    }
    return import_react4.createElement.apply(null, createElementArgArray);
  };
  var useInsertionEffect5 = React3["useInsertionEffect"] ? React3["useInsertionEffect"] : import_react4.useLayoutEffect;
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles = props.styles;
    var serialized = serializeStyles([styles], void 0, (0, import_react4.useContext)(ThemeContext));
    var sheetRef = (0, import_react4.useRef)();
    useInsertionEffect5(function() {
      var key = cache.key + "-global";
      var sheet2 = new cache.sheet.constructor({
        key,
        nonce: cache.sheet.nonce,
        container: cache.sheet.container,
        speedy: cache.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache.sheet.tags.length) {
        sheet2.before = cache.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet2.hydrate([node2]);
      }
      sheetRef.current = [sheet2, rehydrating];
      return function() {
        sheet2.flush();
      };
    }, [cache]);
    useInsertionEffect5(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet2 = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache, serialized.next, true);
      }
      if (sheet2.tags.length) {
        var element3 = sheet2.tags[sheet2.tags.length - 1].nextElementSibling;
        sheet2.before = element3;
        sheet2.flush();
      }
      cache.insert("", serialized, sheet2, false);
    }, [cache, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name15 = "animation-" + insertable.name;
    return {
      name: name15,
      styles: "@keyframes " + name15 + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString5() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i7 = 0;
    var cls = "";
    for (; i7 < len; i7++) {
      var arg = args[i7];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k2 in arg) {
              if (arg[k2] && k2) {
                toAdd && (toAdd += " ");
                toAdd += k2;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge(registered, css50, className2) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className2);
    if (registeredStyles.length < 2) {
      return className2;
    }
    return rawClassName + css50(registeredStyles);
  }
  var Insertion3 = function Insertion4(_ref) {
    var cache = _ref.cache, serializedArr = _ref.serializedArr;
    var rules2 = useInsertionEffectMaybe(function() {
      for (var i7 = 0; i7 < serializedArr.length; i7++) {
        var res = insertStyles(cache, serializedArr[i7], false);
      }
    });
    return null;
  };
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache) {
    var hasRendered = false;
    var serializedArr = [];
    var css50 = function css51() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache.registered);
      serializedArr.push(serialized);
      registerStyles(cache, serialized, false);
      return cache.key + "-" + serialized.name;
    };
    var cx = function cx2() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge(cache.registered, css50, classnames(args));
    };
    var content3 = {
      css: css50,
      cx,
      theme: (0, import_react4.useContext)(ThemeContext)
    };
    var ele = props.children(content3);
    hasRendered = true;
    return /* @__PURE__ */ (0, import_react4.createElement)(import_react4.Fragment, null, /* @__PURE__ */ (0, import_react4.createElement)(Insertion3, {
      cache,
      serializedArr
    }), ele);
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    isBrowser3 = true;
    isJest = typeof jest !== "undefined";
    if (isBrowser3 && !isJest) {
      globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser3 ? window : global;
      globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }
  var isBrowser3;
  var isJest;
  var globalContext;
  var globalKey;

  // output/React.Basic.Emotion/foreign.js
  var createElement4 = jsx;
  var emptyStyle = void 0;
  var emptyStyleProperty = void 0;
  var flattenDataProp = (component26, props) => {
    let data = null;
    if (typeof component26 === "string" && props._data != null) {
      data = { _data: void 0 };
      Object.entries(props._data).forEach(function(entry) {
        data["data-" + entry[0]] = entry[1];
      });
    }
    return data == null ? props : Object.assign({}, props, data);
  };
  function element_(component26, props, areChildrenDynamic) {
    const args = [component26, flattenDataProp(component26, props)];
    return createElement4.apply(null, areChildrenDynamic || props.children == null ? args : args.concat(props.children));
  }
  function elementKeyed_(component26, props) {
    return element_(component26, props, true);
  }
  var global3 = Global;
  var css_ = css;
  var keyframes_ = keyframes;

  // output/Color/index.js
  var clamp2 = /* @__PURE__ */ clamp(ordInt);
  var max3 = /* @__PURE__ */ max(ordInt);
  var min3 = /* @__PURE__ */ min(ordInt);
  var clamp1 = /* @__PURE__ */ clamp(ordNumber);
  var show5 = /* @__PURE__ */ show(showNumber);
  var show13 = /* @__PURE__ */ show(showInt);
  var HSLA = /* @__PURE__ */ function() {
    function HSLA2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    HSLA2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new HSLA2(value0, value1, value22, value32);
          };
        };
      };
    };
    return HSLA2;
  }();
  var modPos = function(x3) {
    return function(y2) {
      return remainder(remainder(x3)(y2) + y2)(y2);
    };
  };
  var rgba = function(red$prime) {
    return function(green$prime) {
      return function(blue$prime) {
        return function(alpha2) {
          var red = clamp2(0)(255)(red$prime);
          var r2 = toNumber(red) / 255;
          var green2 = clamp2(0)(255)(green$prime);
          var g3 = toNumber(green2) / 255;
          var blue = clamp2(0)(255)(blue$prime);
          var maxChroma = max3(max3(red)(green2))(blue);
          var minChroma = min3(min3(red)(green2))(blue);
          var chroma = maxChroma - minChroma | 0;
          var chroma$prime = toNumber(chroma) / 255;
          var lightness2 = toNumber(maxChroma + minChroma | 0) / (255 * 2);
          var saturation = function() {
            if (chroma === 0) {
              return 0;
            }
            ;
            if (otherwise) {
              return chroma$prime / (1 - abs2(2 * lightness2 - 1));
            }
            ;
            throw new Error("Failed pattern match at Color (line 160, column 3 - line 162, column 64): " + []);
          }();
          var b4 = toNumber(blue) / 255;
          var hue$prime = function(v2) {
            if (v2 === 0) {
              return 0;
            }
            ;
            if (maxChroma === red) {
              return modPos((g3 - b4) / chroma$prime)(6);
            }
            ;
            if (maxChroma === green2) {
              return (b4 - r2) / chroma$prime + 2;
            }
            ;
            if (otherwise) {
              return (r2 - g3) / chroma$prime + 4;
            }
            ;
            throw new Error("Failed pattern match at Color (line 150, column 3 - line 150, column 15): " + [v2.constructor.name]);
          };
          var hue = 60 * hue$prime(chroma);
          return new HSLA(hue, saturation, lightness2, alpha2);
        };
      };
    };
  };
  var rgb = function(r2) {
    return function(g3) {
      return function(b4) {
        return rgba(r2)(g3)(b4)(1);
      };
    };
  };
  var rgba$prime = function(r2) {
    return function(g3) {
      return function(b4) {
        return function(a4) {
          return rgba(round2(r2 * 255))(round2(g3 * 255))(round2(b4 * 255))(a4);
        };
      };
    };
  };
  var hsla = function(h7) {
    return function(s3) {
      return function(l2) {
        return function(a4) {
          var s$prime2 = clamp1(0)(1)(s3);
          var l$prime = clamp1(0)(1)(l2);
          var a$prime5 = clamp1(0)(1)(a4);
          return new HSLA(h7, s$prime2, l$prime, a$prime5);
        };
      };
    };
  };
  var hsva = function(h7) {
    return function(v2) {
      return function(v1) {
        return function(a4) {
          var s3 = v2;
          if (v1 === 0) {
            return hsla(h7)(s3 / (2 - s3))(0)(a4);
          }
          ;
          if (v2 === 0 && v1 === 1) {
            return hsla(h7)(0)(1)(a4);
          }
          ;
          var tmp = (2 - v2) * v1;
          var s3 = v2 * v1 / function() {
            var $89 = tmp < 1;
            if ($89) {
              return tmp;
            }
            ;
            return 2 - tmp;
          }();
          var l2 = tmp / 2;
          return hsla(h7)(s3)(l2)(a4);
        };
      };
    };
  };
  var hsv = function(h7) {
    return function(s3) {
      return function(v2) {
        return hsva(h7)(s3)(v2)(1);
      };
    };
  };
  var lighten = function(f2) {
    return function(v2) {
      return hsla(v2.value0)(v2.value1)(v2.value2 + f2)(v2.value3);
    };
  };
  var rotateHue = function(angle) {
    return function(v2) {
      return hsla(v2.value0 + angle)(v2.value1)(v2.value2)(v2.value3);
    };
  };
  var saturate = function(f2) {
    return function(v2) {
      return hsla(v2.value0)(v2.value1 + f2)(v2.value2)(v2.value3);
    };
  };
  var hsl = function(h7) {
    return function(s3) {
      return function(l2) {
        return hsla(h7)(s3)(l2)(1);
      };
    };
  };
  var white = /* @__PURE__ */ hsl(0)(0)(1);
  var fromInt = function(m2) {
    var n2 = clamp2(0)(16777215)(m2);
    var r2 = n2 >> 16 & 255;
    var g3 = n2 >> 8 & 255;
    var b4 = n2 & 255;
    return rgb(r2)(g3)(b4);
  };
  var desaturate = function(f2) {
    return saturate(-f2);
  };
  var darken = function(f2) {
    return lighten(-f2);
  };
  var cssStringHSLA = function(v2) {
    var toString5 = function(n2) {
      return show5(toNumber(round2(100 * n2)) / 100);
    };
    var saturation = toString5(v2.value1 * 100) + "%";
    var lightness2 = toString5(v2.value2 * 100) + "%";
    var hue = toString5(v2.value0);
    var alpha2 = show5(v2.value3);
    var $113 = v2.value3 === 1;
    if ($113) {
      return "hsl(" + (hue + (", " + (saturation + (", " + (lightness2 + ")")))));
    }
    ;
    return "hsla(" + (hue + (", " + (saturation + (", " + (lightness2 + (", " + (alpha2 + ")")))))));
  };
  var clipHue = function(v2) {
    var $119 = v2 === 360;
    if ($119) {
      return v2;
    }
    ;
    return modPos(v2)(360);
  };
  var toHSLA = function(v2) {
    return {
      h: clipHue(v2.value0),
      s: v2.value1,
      l: v2.value2,
      a: v2.value3
    };
  };
  var toRGBA$prime = function(v2) {
    var h$prime = clipHue(v2.value0) / 60;
    var chr = (1 - abs2(2 * v2.value2 - 1)) * v2.value1;
    var m2 = v2.value2 - chr / 2;
    var x3 = chr * (1 - abs2(remainder(h$prime)(2) - 1));
    var col3 = function() {
      if (h$prime < 1) {
        return {
          r: chr,
          g: x3,
          b: 0
        };
      }
      ;
      if (1 <= h$prime && h$prime < 2) {
        return {
          r: x3,
          g: chr,
          b: 0
        };
      }
      ;
      if (2 <= h$prime && h$prime < 3) {
        return {
          r: 0,
          g: chr,
          b: x3
        };
      }
      ;
      if (3 <= h$prime && h$prime < 4) {
        return {
          r: 0,
          g: x3,
          b: chr
        };
      }
      ;
      if (4 <= h$prime && h$prime < 5) {
        return {
          r: x3,
          g: 0,
          b: chr
        };
      }
      ;
      if (otherwise) {
        return {
          r: chr,
          g: 0,
          b: x3
        };
      }
      ;
      throw new Error("Failed pattern match at Color (line 356, column 3 - line 362, column 43): " + []);
    }();
    return {
      r: col3.r + m2,
      g: col3.g + m2,
      b: col3.b + m2,
      a: v2.value3
    };
  };
  var toRGBA = function(col3) {
    var c3 = toRGBA$prime(col3);
    var g3 = round2(255 * c3.g);
    var r2 = round2(255 * c3.r);
    var b4 = round2(255 * c3.b);
    return {
      r: r2,
      g: g3,
      b: b4,
      a: c3.a
    };
  };
  var cssStringRGBA = function(col3) {
    var c3 = toRGBA(col3);
    var green2 = show13(c3.g);
    var red = show13(c3.r);
    var blue = show13(c3.b);
    var alpha2 = show5(c3.a);
    var $146 = c3.a === 1;
    if ($146) {
      return "rgb(" + (red + (", " + (green2 + (", " + (blue + ")")))));
    }
    ;
    return "rgba(" + (red + (", " + (green2 + (", " + (blue + (", " + (alpha2 + ")")))))));
  };
  var black = /* @__PURE__ */ hsl(0)(0)(0);

  // output/Data.Number.Format/foreign.js
  function wrap3(method2) {
    return function(d2) {
      return function(num2) {
        return method2.apply(num2, [d2]);
      };
    };
  }
  var toPrecisionNative = wrap3(Number.prototype.toPrecision);
  var toFixedNative = wrap3(Number.prototype.toFixed);
  var toExponentialNative = wrap3(Number.prototype.toExponential);
  function toString2(num2) {
    return num2.toString();
  }

  // output/React.Basic.Emotion/index.js
  var readArray3 = /* @__PURE__ */ readArray(monadIdentity);
  var append12 = /* @__PURE__ */ append(semigroupArray);
  var fromHomogeneous3 = /* @__PURE__ */ fromHomogeneous();
  var str = unsafeCoerce2;
  var toUnitWith = function(f2) {
    return function(s3) {
      return function(a4) {
        return str(f2(a4) + s3);
      };
    };
  };
  var vh = /* @__PURE__ */ toUnitWith(toString2)("vh");
  var vw = /* @__PURE__ */ toUnitWith(toString2)("vw");
  var $$var = function(n2) {
    return str("var(" + (n2 + ")"));
  };
  var visible = /* @__PURE__ */ str("visible");
  var wrap4 = /* @__PURE__ */ str("wrap");
  var spaceBetween = /* @__PURE__ */ str("space-between");
  var spaceAround = /* @__PURE__ */ str("space-around");
  var solid = /* @__PURE__ */ str("solid");
  var scroll = /* @__PURE__ */ str("scroll");
  var row = /* @__PURE__ */ str("row");
  var rem2 = /* @__PURE__ */ toUnitWith(toString2)("rem");
  var relative = /* @__PURE__ */ str("relative");
  var px = /* @__PURE__ */ toUnitWith(/* @__PURE__ */ toStringAs(decimal))("px");
  var preWrap = /* @__PURE__ */ str("pre-wrap");
  var pointer = /* @__PURE__ */ str("pointer");
  var percent = /* @__PURE__ */ toUnitWith(toString2)("%");
  var num = unsafeCoerce2;
  var nowrap = /* @__PURE__ */ str("nowrap");
  var none = /* @__PURE__ */ str("none");
  var nested = unsafeCoerce2;
  var merge2 = unsafeCoerce2;
  var semigroupStyle = {
    append: function(x3) {
      return function(y2) {
        var yF = unsafeToForeign(y2);
        var xF = unsafeToForeign(x3);
        var v2 = runExcept(readArray3(yF));
        var v1 = runExcept(readArray3(xF));
        if (v1 instanceof Right && v2 instanceof Right) {
          return merge2(append12(v1.value0)(v2.value0));
        }
        ;
        if (v1 instanceof Left && v2 instanceof Right) {
          return merge2(cons2(x3)(v2.value0));
        }
        ;
        if (v1 instanceof Right && v2 instanceof Left) {
          return merge2(snoc(v1.value0)(y2));
        }
        ;
        if (v1 instanceof Left && v2 instanceof Left) {
          return merge2([x3, y2]);
        }
        ;
        throw new Error("Failed pattern match at React.Basic.Emotion (line 99, column 7 - line 103, column 41): " + [v1.constructor.name, v2.constructor.name]);
      };
    }
  };
  var monoidStyle = {
    mempty: emptyStyle,
    Semigroup0: function() {
      return semigroupStyle;
    }
  };
  var manipulation = /* @__PURE__ */ str("manipulation");
  var keyframes3 = function() {
    return function($39) {
      return keyframes_(fromHomogeneous3($39));
    };
  };
  var $$int = unsafeCoerce2;
  var inlineFlex = /* @__PURE__ */ str("inline-flex");
  var inlineBlock = /* @__PURE__ */ str("inline-block");
  var inherit = /* @__PURE__ */ str("inherit");
  var hidden = /* @__PURE__ */ str("hidden");
  var grid = /* @__PURE__ */ str("grid");
  var flexStart = /* @__PURE__ */ str("flex-start");
  var flex = /* @__PURE__ */ str("flex");
  var fixed = /* @__PURE__ */ str("fixed");
  var fallbacks = unsafeCoerce2;
  var semigroupStyleProperty = {
    append: function(x3) {
      return function(y2) {
        var yF = unsafeToForeign(y2);
        var xF = unsafeToForeign(x3);
        var v2 = runExcept(readArray3(yF));
        var v1 = runExcept(readArray3(xF));
        if (v1 instanceof Right && v2 instanceof Right) {
          return fallbacks(append12(v1.value0)(v2.value0));
        }
        ;
        if (v1 instanceof Left && v2 instanceof Right) {
          return fallbacks(cons2(x3)(v2.value0));
        }
        ;
        if (v1 instanceof Right && v2 instanceof Left) {
          return fallbacks(snoc(v1.value0)(y2));
        }
        ;
        if (v1 instanceof Left && v2 instanceof Left) {
          return fallbacks([x3, y2]);
        }
        ;
        throw new Error("Failed pattern match at React.Basic.Emotion (line 125, column 7 - line 129, column 45): " + [v1.constructor.name, v2.constructor.name]);
      };
    }
  };
  var monoidStyleProperty = {
    mempty: emptyStyleProperty,
    Semigroup0: function() {
      return semigroupStyleProperty;
    }
  };
  var em = /* @__PURE__ */ toUnitWith(toString2)("em");
  var elementKeyed2 = /* @__PURE__ */ runFn2(elementKeyed_);
  var element2 = /* @__PURE__ */ runFn2(element_);
  var css2 = function() {
    return function($40) {
      return css_(fromHomogeneous3($40));
    };
  };
  var contentBox = /* @__PURE__ */ str("content-box");
  var column2 = /* @__PURE__ */ str("column");
  var color = function($41) {
    return str(cssStringHSLA($41));
  };
  var ch = /* @__PURE__ */ toUnitWith(toString2)("ch");
  var center = /* @__PURE__ */ str("center");
  var borderBox = /* @__PURE__ */ str("border-box");
  var block = /* @__PURE__ */ str("block");
  var baseline = /* @__PURE__ */ str("baseline");
  var auto = /* @__PURE__ */ str("auto");
  var absolute = /* @__PURE__ */ str("absolute");

  // output/Fahrtwind.Style.BoxModel/index.js
  var css3 = /* @__PURE__ */ css2();
  var append4 = /* @__PURE__ */ append(semigroupStyle);
  var pXY = function($23) {
    return css3(function(v2) {
      return {
        padding: v2
      };
    }(px($23)));
  };
  var pT$prime = function($24) {
    return css3(function(v2) {
      return {
        paddingTop: v2
      };
    }($24));
  };
  var pT = function($25) {
    return css3(function(v2) {
      return {
        paddingTop: v2
      };
    }(px($25)));
  };
  var pR$prime = function($26) {
    return css3(function(v2) {
      return {
        paddingRight: v2
      };
    }($26));
  };
  var pR = function($27) {
    return css3(function(v2) {
      return {
        paddingRight: v2
      };
    }(px($27)));
  };
  var pL$prime = function($28) {
    return css3(function(v2) {
      return {
        paddingLeft: v2
      };
    }($28));
  };
  var pX$prime = function(n2) {
    return append4(pR$prime(n2))(pL$prime(n2));
  };
  var pL = function($29) {
    return css3(function(v2) {
      return {
        paddingLeft: v2
      };
    }(px($29)));
  };
  var pX = function(n2) {
    return append4(pR(n2))(pL(n2));
  };
  var pB$prime = function($30) {
    return css3(function(v2) {
      return {
        paddingBottom: v2
      };
    }($30));
  };
  var pY$prime = function(n2) {
    return append4(pT$prime(n2))(pB$prime(n2));
  };
  var pB = function($31) {
    return css3(function(v2) {
      return {
        paddingBottom: v2
      };
    }(px($31)));
  };
  var pY = function(n2) {
    return append4(pT(n2))(pB(n2));
  };
  var mXY = function($33) {
    return css3(function(v2) {
      return {
        margin: v2
      };
    }(px($33)));
  };
  var mT = function($35) {
    return css3(function(v2) {
      return {
        marginTop: v2
      };
    }(px($35)));
  };
  var mR$prime = function($36) {
    return css3(function(v2) {
      return {
        marginRight: v2
      };
    }($36));
  };
  var mR = function($37) {
    return css3(function(v2) {
      return {
        marginRight: v2
      };
    }(px($37)));
  };
  var mL$prime = function($38) {
    return css3(function(v2) {
      return {
        marginLeft: v2
      };
    }($38));
  };
  var mX$prime = function(n2) {
    return append4(mR$prime(n2))(mL$prime(n2));
  };
  var mXAuto = /* @__PURE__ */ mX$prime(auto);
  var mL = function($39) {
    return css3(function(v2) {
      return {
        marginLeft: v2
      };
    }(px($39)));
  };
  var mB = function($41) {
    return css3(function(v2) {
      return {
        marginBottom: v2
      };
    }(px($41)));
  };

  // output/Fahrtwind.Style.Inset/index.js
  var css4 = /* @__PURE__ */ css2();
  var top$prime = function($7) {
    return css4(function(v2) {
      return {
        top: v2
      };
    }($7));
  };
  var top4 = function($8) {
    return top$prime(px($8));
  };
  var right$prime = function($9) {
    return css4(function(v2) {
      return {
        right: v2
      };
    }($9));
  };
  var right = function($10) {
    return right$prime(px($10));
  };
  var left$prime = function($11) {
    return css4(function(v2) {
      return {
        left: v2
      };
    }($11));
  };
  var left = function($12) {
    return left$prime(px($12));
  };
  var bottom$prime = function($13) {
    return css4(function(v2) {
      return {
        bottom: v2
      };
    }($13));
  };
  var bottom4 = function($14) {
    return bottom$prime(px($14));
  };

  // output/Fahrtwind.Style.Overflow/index.js
  var css5 = /* @__PURE__ */ css2();
  var overflowYScroll = /* @__PURE__ */ css5({
    overflowY: scroll
  });
  var overflowXScroll = /* @__PURE__ */ css5({
    overflowX: scroll
  });
  var overflowVisible = /* @__PURE__ */ css5({
    overflow: visible
  });
  var overflowHidden = /* @__PURE__ */ css5({
    overflow: hidden
  });

  // output/Fahrtwind.Style.Position/index.js
  var css6 = /* @__PURE__ */ css2();
  var positionRelative = /* @__PURE__ */ css6({
    position: relative
  });
  var positionFixed = /* @__PURE__ */ css6({
    position: fixed
  });
  var positionAbsolute = /* @__PURE__ */ css6({
    position: absolute
  });

  // output/Fahrtwind.Style.Size/index.js
  var css7 = /* @__PURE__ */ css2();
  var widthAndHeight$prime = function(wh) {
    return css7({
      width: wh,
      height: wh
    });
  };
  var widthAndHeight = function(wh) {
    return widthAndHeight$prime(px(wh));
  };
  var width$prime = function($9) {
    return css7(function(v2) {
      return {
        width: v2
      };
    }($9));
  };
  var width = function($10) {
    return width$prime(px($10));
  };
  var screenWidth = /* @__PURE__ */ vw(100);
  var widthScreen = /* @__PURE__ */ width$prime(screenWidth);
  var screenHeight = /* @__PURE__ */ vh(100);
  var maxWidth$prime = function($15) {
    return css7(function(v2) {
      return {
        maxWidth: v2
      };
    }($15));
  };
  var maxWidth = function($16) {
    return maxWidth$prime(px($16));
  };
  var maxHeight$prime = function($17) {
    return css7(function(v2) {
      return {
        maxHeight: v2
      };
    }($17));
  };
  var height$prime = function($19) {
    return css7(function(v2) {
      return {
        height: v2
      };
    }($19));
  };
  var heightScreen = /* @__PURE__ */ height$prime(screenHeight);
  var height = function($20) {
    return height$prime(px($20));
  };
  var full = /* @__PURE__ */ percent(100);
  var heightFull = /* @__PURE__ */ height$prime(full);
  var widthFull = /* @__PURE__ */ width$prime(full);

  // output/React.Basic.DOM/foreign.js
  var import_react_dom = __toESM(require_react_dom(), 1);
  function createPortal(jsx4) {
    return (node2) => import_react_dom.default.createPortal(jsx4, node2);
  }

  // output/React.Basic.DOM.Internal/foreign.js
  var import_react6 = __toESM(require_react(), 1);
  function mergeStyles(styles) {
    return Object.assign.apply(null, [{}].concat(styles));
  }
  function unsafeCreateDOMComponent_(createElement13) {
    return (el15) => {
      const flattenDataProp2 = (props, ref) => {
        var data = null;
        if (props._data != null) {
          data = { _data: void 0 };
          Object.entries(props._data).forEach(function(entry) {
            data["data-" + entry[0]] = entry[1];
          });
        }
        var aria = null;
        if (props._aria != null) {
          aria = { _aria: void 0 };
          Object.entries(props._aria).forEach(function(entry) {
            aria["aria-" + entry[0]] = entry[1];
          });
        }
        return Object.assign({ ref }, props, data, aria);
      };
      return () => {
        const c3 = import_react6.default.forwardRef((props, ref) => createElement13(el15)(flattenDataProp2(props, ref)));
        c3.displayName = el15;
        return c3;
      };
    };
  }

  // output/React.Basic.DOM.Internal/index.js
  var unsafeCreateDOMComponent = /* @__PURE__ */ unsafeCreateDOMComponent_(element);
  var semigroupCSS = {
    append: function(a4) {
      return function(b4) {
        return mergeStyles([b4, a4]);
      };
    }
  };
  var css8 = unsafeCoerce2;
  var monoidCSS = {
    mempty: /* @__PURE__ */ css8({}),
    Semigroup0: function() {
      return semigroupCSS;
    }
  };

  // output/React.Basic.DOM.Generated/index.js
  var _ul$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("ul"));
  var ul$prime = function() {
    return _ul$prime;
  };
  var ul$prime1 = /* @__PURE__ */ ul$prime();
  var ul = function() {
    return element(ul$prime1);
  };
  var ul1 = /* @__PURE__ */ ul();
  var ul_ = function(children2) {
    return ul1({
      children: children2
    });
  };
  var _span$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("span"));
  var span$prime = function() {
    return _span$prime;
  };
  var _li$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("li"));
  var li$prime = function() {
    return _li$prime;
  };
  var li$prime1 = /* @__PURE__ */ li$prime();
  var li = function() {
    return element(li$prime1);
  };
  var li1 = /* @__PURE__ */ li();
  var li_ = function(children2) {
    return li1({
      children: children2
    });
  };
  var _label$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("label"));
  var label$prime = function() {
    return _label$prime;
  };
  var _img$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("img"));
  var img$prime = function() {
    return _img$prime;
  };
  var img$prime1 = /* @__PURE__ */ img$prime();
  var img = function() {
    return element(img$prime1);
  };
  var _h3$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h3"));
  var h3$prime = function() {
    return _h3$prime;
  };
  var h3$prime1 = /* @__PURE__ */ h3$prime();
  var h3 = function() {
    return element(h3$prime1);
  };
  var h31 = /* @__PURE__ */ h3();
  var h3_ = function(children2) {
    return h31({
      children: children2
    });
  };
  var _h2$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h2"));
  var h2$prime = function() {
    return _h2$prime;
  };
  var _h1$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("h1"));
  var h1$prime = function() {
    return _h1$prime;
  };
  var h1$prime1 = /* @__PURE__ */ h1$prime();
  var h1 = function() {
    return element(h1$prime1);
  };
  var h11 = /* @__PURE__ */ h1();
  var h1_ = function(children2) {
    return h11({
      children: children2
    });
  };
  var _div$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("div"));
  var div$prime = function() {
    return _div$prime;
  };
  var div$prime1 = /* @__PURE__ */ div$prime();
  var div3 = function() {
    return element(div$prime1);
  };
  var div1 = /* @__PURE__ */ div3();
  var div_ = function(children2) {
    return div1({
      children: children2
    });
  };
  var _code$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("code"));
  var code$prime = function() {
    return _code$prime;
  };
  var _button$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("button"));
  var button$prime = function() {
    return _button$prime;
  };
  var _a$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("a"));
  var a$prime = function() {
    return _a$prime;
  };

  // output/React.Basic.DOM/index.js
  var text2 = unsafeCoerce2;

  // output/Plumage.Util.HTML/index.js
  var span$prime2 = /* @__PURE__ */ span$prime();
  var div$prime2 = /* @__PURE__ */ div$prime();
  var jsx3 = function(component26) {
    return function(className2) {
      return function(css50) {
        return function(children2) {
          return element2(component26)({
            className: className2,
            css: css50,
            children: children2
          });
        };
      };
    };
  };
  var jsx_ = function(component26) {
    return jsx3(component26)("");
  };
  var span_2 = /* @__PURE__ */ jsx_(span$prime2);
  var div_2 = /* @__PURE__ */ jsx_(div$prime2);
  var div4 = /* @__PURE__ */ jsx3(div$prime2);

  // output/Fahrtwind.Layer/index.js
  var css9 = /* @__PURE__ */ css2();
  var show6 = /* @__PURE__ */ show(showInt);
  var zIndex = function(n2) {
    return css9({
      zIndex: str(show6(n2))
    });
  };

  // output/Fahrtwind.Style.Color.Util/index.js
  var withAlpha = function(alpha2) {
    return function(c1) {
      var v2 = toRGBA$prime(c1);
      return rgba$prime(v2.r)(v2.g)(v2.b)(alpha2);
    };
  };
  var lightness = function($25) {
    return function(v2) {
      return v2.l;
    }(toHSLA($25));
  };

  // output/React.Basic.DOM.Server/foreign.js
  var import_server = __toESM(require_server_browser(), 1);

  // output/Fahrtwind.Style.Color.Background/index.js
  var css10 = /* @__PURE__ */ css2();
  var background$prime = function($26) {
    return css10(function(v2) {
      return {
        backgroundColor: v2
      };
    }($26));
  };
  var background = function($27) {
    return css10(function(v2) {
      return {
        backgroundColor: v2
      };
    }(color($27)));
  };

  // output/Fahrtwind.Style.PointerEvents/index.js
  var css11 = /* @__PURE__ */ css2();
  var pointerEventsNone = /* @__PURE__ */ css11({
    pointerEvents: none
  });
  var pointerEventsAuto = /* @__PURE__ */ css11({
    pointerEvents: auto
  });
  var ignoreClicks = pointerEventsNone;
  var acceptClicks = pointerEventsAuto;

  // output/Fahrtwind.Style.PseudoClasses/index.js
  var css12 = /* @__PURE__ */ css2();
  var hover = function(style3) {
    return css12({
      "&:hover": nested(style3)
    });
  };
  var focusWithin = function(s3) {
    return css12({
      "&:focus-within": nested(s3)
    });
  };
  var active = function(style3) {
    return css12({
      "&:active": nested(style3)
    });
  };

  // output/Yoga/index.js
  var insert8 = /* @__PURE__ */ insert4({
    reflectSymbol: function() {
      return "children";
    }
  })()();
  var span$prime3 = /* @__PURE__ */ span$prime();
  var div$prime3 = /* @__PURE__ */ div$prime();
  var styledLeaf = element2;
  var styled = function() {
    return function(x3) {
      return function(props) {
        return function(children2) {
          return element2(x3)(insert8($$Proxy.value)(children2)(props));
        };
      };
    };
  };
  var span4 = function() {
    return span$prime3;
  };
  var leaf = function() {
    return function(x3) {
      return function(props) {
        return element(x3)(props);
      };
    };
  };
  var el = function() {
    return function(x3) {
      return function(props) {
        return function(children2) {
          return element(x3)(insert8($$Proxy.value)(children2)(props));
        };
      };
    };
  };
  var div5 = function() {
    return div$prime3;
  };

  // output/Yoga.Block.Container.Style/foreign.js
  function getComputedStyleImpl(el15, window3) {
    return window3.getComputedStyle(el15);
  }
  function getPropertyValueImpl(propName, computedStyle) {
    return computedStyle.getPropertyValue(propName);
  }
  function getElementStyle(el15) {
    return () => el15.style;
  }
  function setStyleProperty(prop3) {
    return (value12) => (style3) => () => style3.setProperty(prop3, value12);
  }

  // output/Heterogeneous.Mapping/index.js
  var identity13 = /* @__PURE__ */ identity(categoryBuilder);
  var compose12 = /* @__PURE__ */ compose(semigroupoidBuilder);
  var modify5 = /* @__PURE__ */ modify4()();
  var ConstMapping = function(x3) {
    return x3;
  };
  var mappingWithIndex = function(dict) {
    return dict.mappingWithIndex;
  };
  var mappingFunction = {
    mapping: function(k2) {
      return k2;
    }
  };
  var mapping = function(dict) {
    return dict.mapping;
  };
  var mapRecordWithIndexNil = {
    mapRecordWithIndexBuilder: function(v2) {
      return function(v1) {
        return identity13;
      };
    }
  };
  var mapRecordWithIndexBuilder = function(dict) {
    return dict.mapRecordWithIndexBuilder;
  };
  var mapRecordWithIndexCons = function(dictIsSymbol) {
    var modify1 = modify5(dictIsSymbol);
    return function(dictMappingWithIndex) {
      var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
      return function(dictMapRecordWithIndex) {
        var mapRecordWithIndexBuilder1 = mapRecordWithIndexBuilder(dictMapRecordWithIndex);
        return function() {
          return function() {
            return {
              mapRecordWithIndexBuilder: function(v2) {
                return function(f2) {
                  return compose12(modify1($$Proxy.value)(mappingWithIndex1(f2)($$Proxy.value)))(mapRecordWithIndexBuilder1($$Proxy.value)(f2));
                };
              }
            };
          };
        };
      };
    };
  };
  var hmapWithIndexRecord = function() {
    return function(dictMapRecordWithIndex) {
      return {
        hmapWithIndex: function() {
          var $102 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)($$Proxy.value);
          return function($103) {
            return build($102($103));
          };
        }()
      };
    };
  };
  var hmapWithIndex = function(dict) {
    return dict.hmapWithIndex;
  };
  var hmapRecord = function() {
    return function(dictMapRecordWithIndex) {
      return {
        hmap: function() {
          var $108 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)($$Proxy.value);
          return function($109) {
            return build($108(ConstMapping($109)));
          };
        }()
      };
    };
  };
  var hmap = function(dict) {
    return dict.hmap;
  };
  var constMapping = function(dictMapping) {
    var mapping1 = mapping(dictMapping);
    return {
      mappingWithIndex: function(v2) {
        return function(v1) {
          return mapping1(v2);
        };
      }
    };
  };

  // output/Record.Extra/foreign.js
  function pickFn(ks, r2) {
    var copy2 = {};
    for (var i7 = 0; i7 < ks.length; i7++) {
      copy2[ks[i7]] = r2[ks[i7]];
    }
    return copy2;
  }

  // output/Record.Extra/index.js
  var identity14 = /* @__PURE__ */ identity(categoryBuilder);
  var insert9 = /* @__PURE__ */ insert5()();
  var compose2 = /* @__PURE__ */ compose(semigroupoidBuilder);
  var flap2 = /* @__PURE__ */ flap(functorFn);
  var mempty3 = /* @__PURE__ */ mempty(monoidList);
  var fromFoldable6 = /* @__PURE__ */ fromFoldable(foldableList);
  var sequenceRecordSingle = function(dictIsSymbol) {
    var get4 = get(dictIsSymbol)();
    var insert12 = insert9(dictIsSymbol);
    return function() {
      return function(dictFunctor) {
        var map43 = map(dictFunctor);
        return function() {
          return function() {
            return {
              sequenceRecordImpl: function(v2) {
                return function(a4) {
                  var valA = get4($$Proxy.value)(a4);
                  return map43(insert12($$Proxy.value))(valA);
                };
              },
              Functor0: function() {
                return dictFunctor;
              }
            };
          };
        };
      };
    };
  };
  var sequenceRecordImpl = function(dict) {
    return dict.sequenceRecordImpl;
  };
  var sequenceRecordCons = function(dictIsSymbol) {
    var get4 = get(dictIsSymbol)();
    var insert12 = insert9(dictIsSymbol);
    return function() {
      return function(dictApply) {
        var apply11 = apply(dictApply);
        var Functor0 = dictApply.Functor0();
        var map43 = map(Functor0);
        return function(dictSequenceRecord) {
          var sequenceRecordImpl1 = sequenceRecordImpl(dictSequenceRecord);
          return function() {
            return function() {
              return {
                sequenceRecordImpl: function(v2) {
                  return function(a4) {
                    var rest2 = sequenceRecordImpl1($$Proxy.value)(a4);
                    var valA = get4($$Proxy.value)(a4);
                    var fn = function(valA$prime) {
                      return function(rest$prime) {
                        return compose2(insert12($$Proxy.value)(valA$prime))(rest$prime);
                      };
                    };
                    return apply11(map43(fn)(valA))(rest2);
                  };
                },
                Functor0: function() {
                  return Functor0;
                }
              };
            };
          };
        };
      };
    };
  };
  var sequenceRecord = function() {
    return function(dictSequenceRecord) {
      var sequenceRecordImpl1 = sequenceRecordImpl(dictSequenceRecord);
      var map43 = map(dictSequenceRecord.Functor0());
      return function(a4) {
        var builder = sequenceRecordImpl1($$Proxy.value)(a4);
        return map43(flap2(build)({}))(builder);
      };
    };
  };
  var nilKeys = {
    keysImpl: function(v2) {
      return mempty3;
    }
  };
  var mapRecordNil = {
    mapRecordBuilder: function(v2) {
      return function(v1) {
        return function(v22) {
          return identity14;
        };
      };
    }
  };
  var mapRecordBuilder = function(dict) {
    return dict.mapRecordBuilder;
  };
  var mapRecordCons = function(dictIsSymbol) {
    var get4 = get(dictIsSymbol)();
    var insert12 = insert9(dictIsSymbol);
    return function() {
      return function(dictMapRecord) {
        var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
        return function() {
          return function() {
            return {
              mapRecordBuilder: function(v2) {
                return function(f2) {
                  return function(r2) {
                    var rest2 = mapRecordBuilder1($$Proxy.value)(f2)(r2);
                    var val = f2(get4($$Proxy.value)(r2));
                    var first2 = insert12($$Proxy.value)(val);
                    return compose2(first2)(rest2);
                  };
                };
              }
            };
          };
        };
      };
    };
  };
  var mapRecord = function() {
    return function(dictMapRecord) {
      var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
      return function(f2) {
        return function(r2) {
          var builder = mapRecordBuilder1($$Proxy.value)(f2)(r2);
          return build(builder)({});
        };
      };
    };
  };
  var keysImpl = function(dict) {
    return dict.keysImpl;
  };
  var keys2 = function() {
    return function(dictKeys) {
      var keysImpl1 = keysImpl(dictKeys);
      return function(v2) {
        return keysImpl1($$Proxy.value);
      };
    };
  };
  var keys1 = /* @__PURE__ */ keys2();
  var pick = function() {
    return function() {
      return function(dictKeys) {
        var ks = fromFoldable6(keys1(dictKeys)($$Proxy.value));
        return runFn2(pickFn)(ks);
      };
    };
  };
  var consKeys = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return function(dictKeys) {
      var keysImpl1 = keysImpl(dictKeys);
      return {
        keysImpl: function(v2) {
          var rest2 = keysImpl1($$Proxy.value);
          var first2 = reflectSymbol2($$Proxy.value);
          return new Cons(first2, rest2);
        }
      };
    };
  };

  // output/Web.DOM.Document/foreign.js
  var getEffProp = function(name15) {
    return function(doc) {
      return function() {
        return doc[name15];
      };
    };
  };
  var url = getEffProp("URL");
  var documentURI = getEffProp("documentURI");
  var origin = getEffProp("origin");
  var compatMode = getEffProp("compatMode");
  var characterSet = getEffProp("characterSet");
  var contentType = getEffProp("contentType");
  var _documentElement = getEffProp("documentElement");

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name15, value12) {
    if (typeof window !== "undefined") {
      var ty = window[name15];
      if (ty != null && value12 instanceof ty) {
        return just(value12);
      }
    }
    var obj = value12;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name15) {
        return just(value12);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name15) {
    return function(value12) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name15, value12);
    };
  };

  // output/Web.DOM.Document/index.js
  var documentElement = /* @__PURE__ */ function() {
    var $3 = map(functorEffect)(toMaybe);
    return function($4) {
      return $3(_documentElement($4));
    };
  }();

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var toNonElementParentNode = unsafeCoerce2;
  var toEventTarget = unsafeCoerce2;
  var toDocument = unsafeCoerce2;

  // output/Web.HTML.HTMLElement/foreign.js
  function _read(nothing, just, value12) {
    var tag2 = Object.prototype.toString.call(value12);
    if (tag2.indexOf("[object HTML") === 0 && tag2.indexOf("Element]") === tag2.length - 8) {
      return just(value12);
    } else {
      return nothing;
    }
  }
  function focus(elt) {
    return function() {
      return elt.focus();
    };
  }
  function offsetWidth(el15) {
    return function() {
      return el15.offsetWidth;
    };
  }
  function offsetHeight(el15) {
    return function() {
      return el15.offsetHeight;
    };
  }

  // output/Web.HTML.HTMLElement/index.js
  var fromNode = function(x3) {
    return _read(Nothing.value, Just.create, x3);
  };

  // output/Web.HTML.HTMLInputElement/foreign.js
  function placeholder(input6) {
    return function() {
      return input6.placeholder;
    };
  }
  function setPlaceholder(placeholder3) {
    return function(input6) {
      return function() {
        input6.placeholder = placeholder3;
      };
    };
  }
  function value3(input6) {
    return function() {
      return input6.value;
    };
  }

  // output/Web.HTML.HTMLInputElement/index.js
  var fromNode2 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLInputElement");
  var fromHTMLElement = /* @__PURE__ */ unsafeReadProtoTagged("HTMLInputElement");

  // output/Web.HTML.Location/foreign.js
  function hash2(location3) {
    return function() {
      return location3.hash;
    };
  }
  function setHash(hash3) {
    return function(location3) {
      return function() {
        location3.hash = hash3;
      };
    };
  }

  // output/Web.HTML.Window/foreign.js
  function document2(window3) {
    return function() {
      return window3.document;
    };
  }
  function location2(window3) {
    return function() {
      return window3.location;
    };
  }
  function innerWidth(window3) {
    return function() {
      return window3.innerWidth;
    };
  }
  function innerHeight(window3) {
    return function() {
      return window3.innerHeight;
    };
  }
  function scrollX(window3) {
    return function() {
      return window3.scrollX;
    };
  }
  function scrollY(window3) {
    return function() {
      return window3.scrollY;
    };
  }
  function requestAnimationFrame2(fn) {
    return function(window3) {
      return function() {
        return window3.requestAnimationFrame(fn);
      };
    };
  }

  // output/Web.HTML.Window/index.js
  var toEventTarget2 = unsafeCoerce2;

  // output/Yoga.Block.Internal.CSS/index.js
  var css13 = /* @__PURE__ */ css2();
  var transparent = /* @__PURE__ */ rgba(0)(0)(0)(0);
  var nestDynamic = function() {
    return function(key) {
      return function(sp) {
        return singleton8(key)(css13(sp));
      };
    };
  };
  var nest = function() {
    return function() {
      return function($2) {
        return nested(css13($2));
      };
    };
  };
  var left2 = /* @__PURE__ */ str("left");
  var _100percent = /* @__PURE__ */ percent(100);
  var _0 = /* @__PURE__ */ str("0");

  // output/Yoga.Prelude.Default/index.js
  var runMaybeT_ = function(dictFunctor) {
    var $3 = $$void(dictFunctor);
    return function($4) {
      return $3(runMaybeT($4));
    };
  };

  // output/Yoga.Block.Container.Style/index.js
  var css14 = /* @__PURE__ */ css2();
  var bind11 = /* @__PURE__ */ bind(/* @__PURE__ */ bindMaybeT(monadEffect));
  var lift3 = /* @__PURE__ */ lift(monadTransMaybeT)(monadEffect);
  var runMaybeT_2 = /* @__PURE__ */ runMaybeT_(functorEffect);
  var pure10 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeMaybeT(monadEffect));
  var pure12 = /* @__PURE__ */ pure(applicativeEffect);
  var foldMap4 = /* @__PURE__ */ foldMap2(/* @__PURE__ */ monoidObject(semigroupStyleProperty));
  var fromHomogeneous4 = /* @__PURE__ */ fromHomogeneous();
  var backgroundIsSymbol = {
    reflectSymbol: function() {
      return "background";
    }
  };
  var mapRecordWithIndexCons2 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundIsSymbol);
  var constMapping2 = /* @__PURE__ */ constMapping(mappingFunction);
  var backgroundAlpha0IsSymbol = {
    reflectSymbol: function() {
      return "backgroundAlpha0";
    }
  };
  var mapRecordWithIndexCons1 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha0IsSymbol);
  var backgroundAlpha25IsSymbol = {
    reflectSymbol: function() {
      return "backgroundAlpha25";
    }
  };
  var mapRecordWithIndexCons22 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha25IsSymbol);
  var backgroundAlpha50IsSymbol = {
    reflectSymbol: function() {
      return "backgroundAlpha50";
    }
  };
  var mapRecordWithIndexCons3 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha50IsSymbol);
  var backgroundAlpha75IsSymbol = {
    reflectSymbol: function() {
      return "backgroundAlpha75";
    }
  };
  var mapRecordWithIndexCons4 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundAlpha75IsSymbol);
  var backgroundBright1IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright1";
    }
  };
  var mapRecordWithIndexCons5 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright1IsSymbol);
  var backgroundBright2IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright2";
    }
  };
  var mapRecordWithIndexCons6 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright2IsSymbol);
  var backgroundBright3IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright3";
    }
  };
  var mapRecordWithIndexCons7 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright3IsSymbol);
  var backgroundBright4IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright4";
    }
  };
  var mapRecordWithIndexCons8 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright4IsSymbol);
  var backgroundBright5IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright5";
    }
  };
  var mapRecordWithIndexCons9 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright5IsSymbol);
  var backgroundBright6IsSymbol = {
    reflectSymbol: function() {
      return "backgroundBright6";
    }
  };
  var mapRecordWithIndexCons10 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundBright6IsSymbol);
  var backgroundCardIsSymbol = {
    reflectSymbol: function() {
      return "backgroundCard";
    }
  };
  var mapRecordWithIndexCons11 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundCardIsSymbol);
  var backgroundInvertedIsSymbol = {
    reflectSymbol: function() {
      return "backgroundInverted";
    }
  };
  var mapRecordWithIndexCons12 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundInvertedIsSymbol);
  var backgroundLayer1IsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer1";
    }
  };
  var mapRecordWithIndexCons13 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer1IsSymbol);
  var backgroundLayer2IsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer2";
    }
  };
  var mapRecordWithIndexCons14 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer2IsSymbol);
  var backgroundLayer3IsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer3";
    }
  };
  var mapRecordWithIndexCons15 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer3IsSymbol);
  var backgroundLayer4IsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer4";
    }
  };
  var mapRecordWithIndexCons16 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer4IsSymbol);
  var backgroundLayer5IsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer5";
    }
  };
  var mapRecordWithIndexCons17 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer5IsSymbol);
  var backgroundLayer5BorderIsSymbol = {
    reflectSymbol: function() {
      return "backgroundLayer5Border";
    }
  };
  var mapRecordWithIndexCons18 = /* @__PURE__ */ mapRecordWithIndexCons(backgroundLayer5BorderIsSymbol);
  var boxShadowIsSymbol = {
    reflectSymbol: function() {
      return "boxShadow";
    }
  };
  var mapRecordWithIndexCons19 = /* @__PURE__ */ mapRecordWithIndexCons(boxShadowIsSymbol);
  var highlightIsSymbol = {
    reflectSymbol: function() {
      return "highlight";
    }
  };
  var mapRecordWithIndexCons20 = /* @__PURE__ */ mapRecordWithIndexCons(highlightIsSymbol);
  var highlightAlpha10IsSymbol = {
    reflectSymbol: function() {
      return "highlightAlpha10";
    }
  };
  var mapRecordWithIndexCons21 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha10IsSymbol);
  var highlightAlpha25IsSymbol = {
    reflectSymbol: function() {
      return "highlightAlpha25";
    }
  };
  var mapRecordWithIndexCons222 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha25IsSymbol);
  var highlightAlpha50IsSymbol = {
    reflectSymbol: function() {
      return "highlightAlpha50";
    }
  };
  var mapRecordWithIndexCons23 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha50IsSymbol);
  var highlightAlpha67IsSymbol = {
    reflectSymbol: function() {
      return "highlightAlpha67";
    }
  };
  var mapRecordWithIndexCons24 = /* @__PURE__ */ mapRecordWithIndexCons(highlightAlpha67IsSymbol);
  var highlightDarkerIsSymbol = {
    reflectSymbol: function() {
      return "highlightDarker";
    }
  };
  var mapRecordWithIndexCons25 = /* @__PURE__ */ mapRecordWithIndexCons(highlightDarkerIsSymbol);
  var highlightDisabledIsSymbol = {
    reflectSymbol: function() {
      return "highlightDisabled";
    }
  };
  var mapRecordWithIndexCons26 = /* @__PURE__ */ mapRecordWithIndexCons(highlightDisabledIsSymbol);
  var highlightLighterIsSymbol = {
    reflectSymbol: function() {
      return "highlightLighter";
    }
  };
  var mapRecordWithIndexCons27 = /* @__PURE__ */ mapRecordWithIndexCons(highlightLighterIsSymbol);
  var highlightRotatedBackwardsIsSymbol = {
    reflectSymbol: function() {
      return "highlightRotatedBackwards";
    }
  };
  var mapRecordWithIndexCons28 = /* @__PURE__ */ mapRecordWithIndexCons(highlightRotatedBackwardsIsSymbol);
  var highlightRotatedForwardsIsSymbol = {
    reflectSymbol: function() {
      return "highlightRotatedForwards";
    }
  };
  var mapRecordWithIndexCons29 = /* @__PURE__ */ mapRecordWithIndexCons(highlightRotatedForwardsIsSymbol);
  var highlightTextIsSymbol = {
    reflectSymbol: function() {
      return "highlightText";
    }
  };
  var mapRecordWithIndexCons30 = /* @__PURE__ */ mapRecordWithIndexCons(highlightTextIsSymbol);
  var highlightTextOnBackgroundIsSymbol = {
    reflectSymbol: function() {
      return "highlightTextOnBackground";
    }
  };
  var mapRecordWithIndexCons31 = /* @__PURE__ */ mapRecordWithIndexCons(highlightTextOnBackgroundIsSymbol);
  var inputBackgroundIsSymbol = {
    reflectSymbol: function() {
      return "inputBackground";
    }
  };
  var mapRecordWithIndexCons32 = /* @__PURE__ */ mapRecordWithIndexCons(inputBackgroundIsSymbol);
  var inputBorderIsSymbol = {
    reflectSymbol: function() {
      return "inputBorder";
    }
  };
  var mapRecordWithIndexCons33 = /* @__PURE__ */ mapRecordWithIndexCons(inputBorderIsSymbol);
  var interfaceBackgroundIsSymbol = {
    reflectSymbol: function() {
      return "interfaceBackground";
    }
  };
  var mapRecordWithIndexCons34 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundIsSymbol);
  var interfaceBackgroundDangerousIsSymbol = {
    reflectSymbol: function() {
      return "interfaceBackgroundDangerous";
    }
  };
  var mapRecordWithIndexCons35 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundDangerousIsSymbol);
  var interfaceBackgroundDisabledIsSymbol = {
    reflectSymbol: function() {
      return "interfaceBackgroundDisabled";
    }
  };
  var mapRecordWithIndexCons36 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundDisabledIsSymbol);
  var interfaceBackgroundHighlightIsSymbol = {
    reflectSymbol: function() {
      return "interfaceBackgroundHighlight";
    }
  };
  var mapRecordWithIndexCons37 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundHighlightIsSymbol);
  var interfaceBackgroundShadowIsSymbol = {
    reflectSymbol: function() {
      return "interfaceBackgroundShadow";
    }
  };
  var mapRecordWithIndexCons38 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceBackgroundShadowIsSymbol);
  var interfaceDangerousTextIsSymbol = {
    reflectSymbol: function() {
      return "interfaceDangerousText";
    }
  };
  var mapRecordWithIndexCons39 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceDangerousTextIsSymbol);
  var interfaceTextDisabledIsSymbol = {
    reflectSymbol: function() {
      return "interfaceTextDisabled";
    }
  };
  var mapRecordWithIndexCons40 = /* @__PURE__ */ mapRecordWithIndexCons(interfaceTextDisabledIsSymbol);
  var invalidIsSymbol = {
    reflectSymbol: function() {
      return "invalid";
    }
  };
  var mapRecordWithIndexCons41 = /* @__PURE__ */ mapRecordWithIndexCons(invalidIsSymbol);
  var invalidTextIsSymbol = {
    reflectSymbol: function() {
      return "invalidText";
    }
  };
  var mapRecordWithIndexCons42 = /* @__PURE__ */ mapRecordWithIndexCons(invalidTextIsSymbol);
  var linkIsSymbol = {
    reflectSymbol: function() {
      return "link";
    }
  };
  var mapRecordWithIndexCons43 = /* @__PURE__ */ mapRecordWithIndexCons(linkIsSymbol);
  var placeholderTextIsSymbol = {
    reflectSymbol: function() {
      return "placeholderText";
    }
  };
  var mapRecordWithIndexCons44 = /* @__PURE__ */ mapRecordWithIndexCons(placeholderTextIsSymbol);
  var popperBackgroundIsSymbol = {
    reflectSymbol: function() {
      return "popperBackground";
    }
  };
  var mapRecordWithIndexCons45 = /* @__PURE__ */ mapRecordWithIndexCons(popperBackgroundIsSymbol);
  var popperBackgroundNoAlphaIsSymbol = {
    reflectSymbol: function() {
      return "popperBackgroundNoAlpha";
    }
  };
  var mapRecordWithIndexCons46 = /* @__PURE__ */ mapRecordWithIndexCons(popperBackgroundNoAlphaIsSymbol);
  var popperInnerBorderIsSymbol = {
    reflectSymbol: function() {
      return "popperInnerBorder";
    }
  };
  var mapRecordWithIndexCons47 = /* @__PURE__ */ mapRecordWithIndexCons(popperInnerBorderIsSymbol);
  var popperOuterBorderIsSymbol = {
    reflectSymbol: function() {
      return "popperOuterBorder";
    }
  };
  var mapRecordWithIndexCons48 = /* @__PURE__ */ mapRecordWithIndexCons(popperOuterBorderIsSymbol);
  var requiredIsSymbol = {
    reflectSymbol: function() {
      return "required";
    }
  };
  var mapRecordWithIndexCons49 = /* @__PURE__ */ mapRecordWithIndexCons(requiredIsSymbol);
  var rippleIsSymbol = {
    reflectSymbol: function() {
      return "ripple";
    }
  };
  var mapRecordWithIndexCons50 = /* @__PURE__ */ mapRecordWithIndexCons(rippleIsSymbol);
  var successIsSymbol = {
    reflectSymbol: function() {
      return "success";
    }
  };
  var mapRecordWithIndexCons51 = /* @__PURE__ */ mapRecordWithIndexCons(successIsSymbol);
  var successTextIsSymbol = {
    reflectSymbol: function() {
      return "successText";
    }
  };
  var mapRecordWithIndexCons52 = /* @__PURE__ */ mapRecordWithIndexCons(successTextIsSymbol);
  var textIsSymbol = {
    reflectSymbol: function() {
      return "text";
    }
  };
  var mapRecordWithIndexCons53 = /* @__PURE__ */ mapRecordWithIndexCons(textIsSymbol);
  var textInvertedIsSymbol = {
    reflectSymbol: function() {
      return "textInverted";
    }
  };
  var mapRecordWithIndexCons54 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedIsSymbol);
  var textInvertedPaler1IsSymbol = {
    reflectSymbol: function() {
      return "textInvertedPaler1";
    }
  };
  var mapRecordWithIndexCons55 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler1IsSymbol);
  var textInvertedPaler2IsSymbol = {
    reflectSymbol: function() {
      return "textInvertedPaler2";
    }
  };
  var mapRecordWithIndexCons56 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler2IsSymbol);
  var textInvertedPaler3IsSymbol = {
    reflectSymbol: function() {
      return "textInvertedPaler3";
    }
  };
  var mapRecordWithIndexCons57 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler3IsSymbol);
  var textInvertedPaler4IsSymbol = {
    reflectSymbol: function() {
      return "textInvertedPaler4";
    }
  };
  var mapRecordWithIndexCons58 = /* @__PURE__ */ mapRecordWithIndexCons(textInvertedPaler4IsSymbol);
  var textPaler1IsSymbol = {
    reflectSymbol: function() {
      return "textPaler1";
    }
  };
  var mapRecordWithIndexCons59 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler1IsSymbol);
  var textPaler2IsSymbol = {
    reflectSymbol: function() {
      return "textPaler2";
    }
  };
  var mapRecordWithIndexCons60 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler2IsSymbol);
  var textPaler3IsSymbol = {
    reflectSymbol: function() {
      return "textPaler3";
    }
  };
  var mapRecordWithIndexCons61 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler3IsSymbol);
  var textPaler4IsSymbol = {
    reflectSymbol: function() {
      return "textPaler4";
    }
  };
  var mapRecordWithIndexCons62 = /* @__PURE__ */ mapRecordWithIndexCons(textPaler4IsSymbol);
  var append13 = /* @__PURE__ */ append(semigroupStyle);
  var nest2 = /* @__PURE__ */ nest()();
  var MakeCSSVarLabels = /* @__PURE__ */ function() {
    function MakeCSSVarLabels2() {
    }
    ;
    MakeCSSVarLabels2.value = new MakeCSSVarLabels2();
    return MakeCSSVarLabels2;
  }();
  var DarkMode = /* @__PURE__ */ function() {
    function DarkMode2() {
    }
    ;
    DarkMode2.value = new DarkMode2();
    return DarkMode2;
  }();
  var LightMode = /* @__PURE__ */ function() {
    function LightMode2() {
    }
    ;
    LightMode2.value = new LightMode2();
    return LightMode2;
  }();
  var withAlpha2 = function(alpha2) {
    return function(c1) {
      var v2 = toRGBA$prime(c1);
      return rgba$prime(v2.r)(v2.g)(v2.b)(alpha2);
    };
  };
  var variables = /* @__PURE__ */ css14({
    "--ratio": /* @__PURE__ */ str("1.61"),
    "--line-height": /* @__PURE__ */ str("var(--ratio)"),
    "--line-height-small": /* @__PURE__ */ str("calc(var(--ratio) * 0.8)"),
    "--s-6": /* @__PURE__ */ str("calc(var(--s-5) / var(--ratio))"),
    "--s-5": /* @__PURE__ */ str("calc(var(--s-4) / var(--ratio))"),
    "--s-4": /* @__PURE__ */ str("calc(var(--s-3) / var(--ratio))"),
    "--s-3": /* @__PURE__ */ str("calc(var(--s-2) / var(--ratio))"),
    "--s-2": /* @__PURE__ */ str("calc(var(--s-1) / var(--ratio))"),
    "--s-1": /* @__PURE__ */ str("calc(var(--s0) / var(--ratio))"),
    "--s0": /* @__PURE__ */ rem2(1),
    "--s1": /* @__PURE__ */ str("calc(var(--s0) * var(--ratio))"),
    "--s2": /* @__PURE__ */ str("calc(var(--s1) * var(--ratio))"),
    "--s3": /* @__PURE__ */ str("calc(var(--s2) * var(--ratio))"),
    "--s4": /* @__PURE__ */ str("calc(var(--s3) * var(--ratio))"),
    "--s5": /* @__PURE__ */ str("calc(var(--s4) * var(--ratio))"),
    "--s6": /* @__PURE__ */ str("calc(var(--s5) * var(--ratio))"),
    "--theme-variant": /* @__PURE__ */ str("light"),
    "--light-mode": /* @__PURE__ */ str("1"),
    "--dark-mode": /* @__PURE__ */ str("0")
  });
  var size4 = {
    "5xs": "var(--s-6)",
    "4xs": "var(--s-5)",
    "3xs": "var(--s-4)",
    xxs: "var(--s-3)",
    xs: "var(--s-2)",
    s: "var(--s-1)",
    m: "var(--s0)",
    l: "var(--s1)",
    xl: "var(--s2)",
    xxl: "var(--s3)",
    "3xl": "var(--s4)",
    "4xl": "var(--s5)",
    "5xl": "var(--s6)",
    text: {
      label: "var(--s-1)",
      interactive: "calc(var(--s0) * 0.85)",
      copy: "var(--s0)",
      small: "calc(var(--s0) * 0.85)",
      tiny: "calc(var(--s0) * 0.75)",
      heading: {
        h1: "calc(var(--s0) * 2.0)",
        h2: "calc(var(--s0) * 1.8)",
        h3: "calc(var(--s0) * 1.4)",
        h4: "calc(var(--s0) * 1.1)"
      }
    }
  };
  var makeCSSVarLabels$prime = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      mappingWithIndex: function(v2) {
        return function(prop3) {
          return function(v1) {
            return "--" + reflectSymbol2(prop3);
          };
        };
      }
    };
  };
  var makeCSSVarLabels = function(dictHMapWithIndex) {
    return hmapWithIndex(dictHMapWithIndex)(MakeCSSVarLabels.value);
  };
  var getPropertyValue = /* @__PURE__ */ runEffectFn2(getPropertyValueImpl);
  var getDocumentElement = /* @__PURE__ */ bind11(/* @__PURE__ */ lift3(windowImpl))(function(win) {
    return bind11(lift3(document2(win)))(function(htmlDoc) {
      var doc = toDocument(htmlDoc);
      return documentElement(doc);
    });
  });
  var setDarkOrLightMode = function(desiredMode) {
    return runMaybeT_2(bind11(getDocumentElement)(function(docElem) {
      return bind11(lift3(getElementStyle(docElem)))(function(style3) {
        return lift3(function() {
          if (desiredMode instanceof LightMode) {
            return function __do10() {
              setStyleProperty("--theme-variant")("light")(style3)();
              setStyleProperty("--light-mode")("1")(style3)();
              return setStyleProperty("--dark-mode")("0")(style3)();
            };
          }
          ;
          if (desiredMode instanceof DarkMode) {
            return function __do10() {
              setStyleProperty("--theme-variant")("dark")(style3)();
              setStyleProperty("--light-mode")("0")(style3)();
              return setStyleProperty("--dark-mode")("1")(style3)();
            };
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Container.Style (line 87, column 10 - line 95, column 49): " + [desiredMode.constructor.name]);
        }());
      });
    }));
  };
  var getComputedStyle2 = /* @__PURE__ */ runEffectFn2(getComputedStyleImpl);
  var getDarkOrLightMode = /* @__PURE__ */ runMaybeT(/* @__PURE__ */ bind11(/* @__PURE__ */ lift3(windowImpl))(function(win) {
    return bind11(getDocumentElement)(function(v2) {
      return bind11(lift3(getComputedStyle2(v2)(win)))(function(computedStyle) {
        return bind11(lift3(getPropertyValue("--theme-variant")(computedStyle)))(function(pv) {
          var $1058 = pv === "dark";
          if ($1058) {
            return pure10(DarkMode.value);
          }
          ;
          var $1059 = pv === "light";
          if ($1059) {
            return pure10(LightMode.value);
          }
          ;
          return pure12(Nothing.value);
        });
      });
    });
  }));
  var fontVariables = function(v2) {
    return css14({
      "--main-font": str(v2.main + ', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"'),
      "--mono-font": str(v2.mono + ", monospace, monospace")
    });
  };
  var eqDarkOrLightMode = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof DarkMode && y2 instanceof DarkMode) {
          return true;
        }
        ;
        if (x3 instanceof LightMode && y2 instanceof LightMode) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var defaultColours = /* @__PURE__ */ function() {
    var textDark = rgb(204)(212)(220);
    var successText = rgb(250)(250)(250);
    var successDark = rgb(20)(200)(60);
    var success = rgb(10)(150)(25);
    var required4 = rgb(200)(50)(80);
    var linkDark = hsl(265)(1)(0.83);
    var link2 = hsl(320)(1)(0.33);
    var lightBg = hsl(205)(0.13)(0.982);
    var text7 = darken(0.8)(lightBg);
    var invalidDark = rgb(230)(30)(60);
    var invalid2 = rgb(173)(0)(69);
    var interfaceDangerousTextDark = hsl(340)(1)(0.9);
    var interfaceBackgroundDangerousDark = hsl(340)(0.55)(0.3);
    var highlightDarkBase = hsla(240)(1)(0.6);
    var highlightDark = hsla(240)(1)(0.63)(1);
    var highlightBase = hsla(244)(0.9)(0.62);
    var highlight = highlightBase(1);
    var highlightText = saturate(0.4)(lighten(0.36)(highlight));
    var darkBg = hsl(210)(0.21)(0.02);
    var interfaceBackgroundDark = saturate(0.12)(lighten(0.14)(darkBg));
    var boxShadowLight = rgba(0)(0)(0)(0.2);
    var boxShadowDark = rgba(0)(0)(0)(0.6);
    return {
      light: {
        background: lightBg,
        backgroundAlpha0: withAlpha2(0)(lightBg),
        backgroundAlpha25: withAlpha2(0.25)(lightBg),
        backgroundAlpha50: withAlpha2(0.5)(lightBg),
        backgroundAlpha75: withAlpha2(0.75)(lightBg),
        backgroundInverted: darken(0.85)(lightBg),
        backgroundLayer1: saturate(0.05)(darken(0.12)(lightBg)),
        backgroundLayer2: saturate(0.04)(darken(0.09)(lightBg)),
        backgroundLayer3: saturate(0.03)(darken(0.06)(lightBg)),
        backgroundLayer4: saturate(0.04)(darken(0.03)(lightBg)),
        backgroundLayer5: saturate(0.05)(darken(0.01)(lightBg)),
        backgroundBright1: lightBg,
        backgroundBright2: saturate(0.05)(darken(0.01)(lightBg)),
        backgroundBright3: saturate(0.04)(darken(0.03)(lightBg)),
        backgroundBright4: saturate(0.03)(darken(0.06)(lightBg)),
        backgroundBright5: saturate(0.04)(darken(0.09)(lightBg)),
        backgroundBright6: saturate(0.05)(darken(0.12)(lightBg)),
        backgroundLayer5Border: lightBg,
        backgroundCard: lightBg,
        popperBackground: function() {
          var $1068 = desaturate(0.3);
          var $1069 = darken(0.07);
          return function($1070) {
            return $1068($1069($1070));
          };
        }()(withAlpha2(0.9)(lightBg)),
        popperBackgroundNoAlpha: desaturate(0.3)(darken(0.07)(lightBg)),
        popperInnerBorder: function() {
          var $1071 = desaturate(0.3);
          var $1072 = darken(0.25);
          return function($1073) {
            return $1071($1072($1073));
          };
        }()(withAlpha2(0.9)(lightBg)),
        popperOuterBorder: transparent,
        highlight,
        highlightAlpha10: highlightBase(0.1),
        highlightAlpha25: highlightBase(0.25),
        highlightAlpha50: highlightBase(0.5),
        highlightAlpha67: highlightBase(0.67),
        highlightDarker: withAlpha2(0.15)(darken(0.2)(highlight)),
        highlightDisabled: lighten(0.5)(desaturate(0.6)(highlight)),
        highlightLighter: withAlpha2(0.2)(lighten(0.2)(highlight)),
        highlightRotatedBackwards: darken(0.05)(rotateHue(-13)(highlight)),
        highlightRotatedForwards: saturate(0.1)(lighten(0.05)(rotateHue(3)(highlight))),
        highlightText,
        highlightTextOnBackground: saturate(0.1)(darken(0.1)(highlight)),
        inputBackground: lightBg,
        inputBorder: desaturate(0.2)(darken(0.07)(lightBg)),
        interfaceBackground: lightBg,
        interfaceBackgroundDangerous: lightBg,
        interfaceBackgroundDisabled: darken(0.03)(lightBg),
        interfaceBackgroundHighlight: lighten(0.05)(lightBg),
        interfaceBackgroundShadow: darken(0.04)(lightBg),
        interfaceDangerousText: invalid2,
        interfaceTextDisabled: darken(0.3)(lightBg),
        invalid: invalid2,
        invalidText: white,
        link: link2,
        placeholderText: desaturate(0.1)(lighten(0.35)(darkBg)),
        required: required4,
        ripple: darken(0.1)(lightBg),
        success,
        successText,
        text: text7,
        textPaler1: desaturate(0.04)(lighten(0.1)(text7)),
        textPaler2: desaturate(0.08)(lighten(0.2)(text7)),
        textPaler3: desaturate(0.12)(lighten(0.3)(text7)),
        textPaler4: desaturate(0.16)(lighten(0.4)(text7)),
        textInverted: lightBg,
        textInvertedPaler1: desaturate(0.02)(darken(0.1)(textDark)),
        textInvertedPaler2: desaturate(0.04)(darken(0.2)(textDark)),
        textInvertedPaler3: desaturate(0.06)(darken(0.3)(textDark)),
        textInvertedPaler4: desaturate(0.08)(darken(0.4)(textDark)),
        boxShadow: boxShadowLight
      },
      dark: {
        background: darkBg,
        backgroundAlpha0: withAlpha2(0)(darkBg),
        backgroundAlpha25: withAlpha2(0.25)(darkBg),
        backgroundAlpha50: withAlpha2(0.5)(darkBg),
        backgroundAlpha75: withAlpha2(0.75)(darkBg),
        backgroundInverted: lightBg,
        backgroundLayer1: saturate(0.1)(lighten(0.04)(darkBg)),
        backgroundLayer2: saturate(0.04)(lighten(0.13)(darkBg)),
        backgroundLayer3: saturate(0.02)(lighten(0.15)(darkBg)),
        backgroundLayer4: saturate(0)(lighten(0.19)(darkBg)),
        backgroundLayer5: saturate(0)(lighten(0.23)(darkBg)),
        backgroundBright1: darkBg,
        backgroundBright2: saturate(0.1)(lighten(0.04)(darkBg)),
        backgroundBright3: saturate(0.04)(lighten(0.13)(darkBg)),
        backgroundBright4: saturate(0.02)(lighten(0.15)(darkBg)),
        backgroundBright5: saturate(0)(lighten(0.19)(darkBg)),
        backgroundBright6: saturate(0)(lighten(0.23)(darkBg)),
        backgroundLayer5Border: lighten(0.37)(darkBg),
        backgroundCard: saturate(0.1)(lighten(0.05)(darkBg)),
        popperBackground: function() {
          var $1074 = saturate(0.05);
          var $1075 = lighten(0.09);
          return function($1076) {
            return $1074($1075($1076));
          };
        }()(withAlpha2(0.8)(darkBg)),
        popperBackgroundNoAlpha: saturate(0.05)(lighten(0.09)(darkBg)),
        popperInnerBorder: function() {
          var $1077 = desaturate(0.3);
          var $1078 = darken(0.7);
          return function($1079) {
            return $1077($1078($1079));
          };
        }()(withAlpha2(0.9)(lightBg)),
        popperOuterBorder: darkBg,
        highlight: highlightDark,
        highlightAlpha10: highlightDarkBase(0.1),
        highlightAlpha25: highlightDarkBase(0.25),
        highlightAlpha50: highlightDarkBase(0.5),
        highlightAlpha67: highlightDarkBase(0.67),
        highlightDarker: withAlpha2(0.4)(darken(0.5)(highlightDark)),
        highlightDisabled: darken(0.32)(desaturate(0.76)(highlightDark)),
        highlightLighter: withAlpha2(0.2)(lighten(0.5)(highlightDark)),
        highlightRotatedBackwards: rotateHue(-10)(highlightDark),
        highlightRotatedForwards: rotateHue(50)(highlightDark),
        highlightText: lighten(0.3)(highlightDark),
        highlightTextOnBackground: saturate(1)(lighten(0.09)(highlightDark)),
        inputBackground: saturate(0.04)(lighten(0.09)(darkBg)),
        inputBorder: saturate(0.02)(lighten(0.12)(darkBg)),
        interfaceBackground: interfaceBackgroundDark,
        interfaceBackgroundDangerous: interfaceBackgroundDangerousDark,
        interfaceBackgroundDisabled: saturate(0.02)(lighten(0.14)(darkBg)),
        interfaceBackgroundHighlight: lighten(0.1)(interfaceBackgroundDark),
        interfaceBackgroundShadow: darken(0.1)(interfaceBackgroundDark),
        interfaceDangerousText: interfaceDangerousTextDark,
        interfaceTextDisabled: function() {
          var $1080 = desaturate(0.3);
          var $1081 = lighten(0.25);
          return function($1082) {
            return $1080($1081($1082));
          };
        }()(desaturate(0.3)(interfaceBackgroundDark)),
        invalid: invalidDark,
        invalidText: successText,
        link: linkDark,
        placeholderText: desaturate(0.3)(darken(0.3)(textDark)),
        required: required4,
        ripple: saturate(0)(lighten(0.31)(darkBg)),
        success: successDark,
        successText,
        text: textDark,
        textPaler1: desaturate(0.02)(darken(0.1)(textDark)),
        textPaler2: desaturate(0.04)(darken(0.2)(textDark)),
        textPaler3: desaturate(0.06)(darken(0.3)(textDark)),
        textPaler4: desaturate(0.08)(darken(0.4)(textDark)),
        textInverted: darkBg,
        textInvertedPaler1: desaturate(0.02)(lighten(0.1)(darkBg)),
        textInvertedPaler2: desaturate(0.04)(lighten(0.2)(darkBg)),
        textInvertedPaler3: desaturate(0.06)(lighten(0.3)(darkBg)),
        textInvertedPaler4: desaturate(0.08)(lighten(0.4)(darkBg)),
        boxShadow: boxShadowDark
      }
    };
  }();
  var lightModeVariables = /* @__PURE__ */ function() {
    return foldMap4(function(k2) {
      return function(v2) {
        return singleton8("--" + k2)(str(cssStringRGBA(v2)));
      };
    })(fromHomogeneous4(defaultColours.light));
  }();
  var lightModeStyle = lightModeVariables;
  var darkModeVariables = /* @__PURE__ */ function() {
    return foldMap4(function(k2) {
      return function(v2) {
        return singleton8("--" + k2)(str(cssStringRGBA(v2)));
      };
    })(fromHomogeneous4(defaultColours.dark));
  }();
  var darkModeStyle = darkModeVariables;
  var colour = /* @__PURE__ */ function() {
    return hmap(hmapRecord()(mapRecordWithIndexCons2(constMapping2)(mapRecordWithIndexCons1(constMapping2)(mapRecordWithIndexCons22(constMapping2)(mapRecordWithIndexCons3(constMapping2)(mapRecordWithIndexCons4(constMapping2)(mapRecordWithIndexCons5(constMapping2)(mapRecordWithIndexCons6(constMapping2)(mapRecordWithIndexCons7(constMapping2)(mapRecordWithIndexCons8(constMapping2)(mapRecordWithIndexCons9(constMapping2)(mapRecordWithIndexCons10(constMapping2)(mapRecordWithIndexCons11(constMapping2)(mapRecordWithIndexCons12(constMapping2)(mapRecordWithIndexCons13(constMapping2)(mapRecordWithIndexCons14(constMapping2)(mapRecordWithIndexCons15(constMapping2)(mapRecordWithIndexCons16(constMapping2)(mapRecordWithIndexCons17(constMapping2)(mapRecordWithIndexCons18(constMapping2)(mapRecordWithIndexCons19(constMapping2)(mapRecordWithIndexCons20(constMapping2)(mapRecordWithIndexCons21(constMapping2)(mapRecordWithIndexCons222(constMapping2)(mapRecordWithIndexCons23(constMapping2)(mapRecordWithIndexCons24(constMapping2)(mapRecordWithIndexCons25(constMapping2)(mapRecordWithIndexCons26(constMapping2)(mapRecordWithIndexCons27(constMapping2)(mapRecordWithIndexCons28(constMapping2)(mapRecordWithIndexCons29(constMapping2)(mapRecordWithIndexCons30(constMapping2)(mapRecordWithIndexCons31(constMapping2)(mapRecordWithIndexCons32(constMapping2)(mapRecordWithIndexCons33(constMapping2)(mapRecordWithIndexCons34(constMapping2)(mapRecordWithIndexCons35(constMapping2)(mapRecordWithIndexCons36(constMapping2)(mapRecordWithIndexCons37(constMapping2)(mapRecordWithIndexCons38(constMapping2)(mapRecordWithIndexCons39(constMapping2)(mapRecordWithIndexCons40(constMapping2)(mapRecordWithIndexCons41(constMapping2)(mapRecordWithIndexCons42(constMapping2)(mapRecordWithIndexCons43(constMapping2)(mapRecordWithIndexCons44(constMapping2)(mapRecordWithIndexCons45(constMapping2)(mapRecordWithIndexCons46(constMapping2)(mapRecordWithIndexCons47(constMapping2)(mapRecordWithIndexCons48(constMapping2)(mapRecordWithIndexCons49(constMapping2)(mapRecordWithIndexCons50(constMapping2)(mapRecordWithIndexCons51(constMapping2)(mapRecordWithIndexCons52(constMapping2)(mapRecordWithIndexCons53(constMapping2)(mapRecordWithIndexCons54(constMapping2)(mapRecordWithIndexCons55(constMapping2)(mapRecordWithIndexCons56(constMapping2)(mapRecordWithIndexCons57(constMapping2)(mapRecordWithIndexCons58(constMapping2)(mapRecordWithIndexCons59(constMapping2)(mapRecordWithIndexCons60(constMapping2)(mapRecordWithIndexCons61(constMapping2)(mapRecordWithIndexCons62(constMapping2)(mapRecordWithIndexNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(function(x3) {
      return "var(" + (x3 + ")");
    })(makeCSSVarLabels(hmapWithIndexRecord()(mapRecordWithIndexCons2(makeCSSVarLabels$prime(backgroundIsSymbol))(mapRecordWithIndexCons1(makeCSSVarLabels$prime(backgroundAlpha0IsSymbol))(mapRecordWithIndexCons22(makeCSSVarLabels$prime(backgroundAlpha25IsSymbol))(mapRecordWithIndexCons3(makeCSSVarLabels$prime(backgroundAlpha50IsSymbol))(mapRecordWithIndexCons4(makeCSSVarLabels$prime(backgroundAlpha75IsSymbol))(mapRecordWithIndexCons5(makeCSSVarLabels$prime(backgroundBright1IsSymbol))(mapRecordWithIndexCons6(makeCSSVarLabels$prime(backgroundBright2IsSymbol))(mapRecordWithIndexCons7(makeCSSVarLabels$prime(backgroundBright3IsSymbol))(mapRecordWithIndexCons8(makeCSSVarLabels$prime(backgroundBright4IsSymbol))(mapRecordWithIndexCons9(makeCSSVarLabels$prime(backgroundBright5IsSymbol))(mapRecordWithIndexCons10(makeCSSVarLabels$prime(backgroundBright6IsSymbol))(mapRecordWithIndexCons11(makeCSSVarLabels$prime(backgroundCardIsSymbol))(mapRecordWithIndexCons12(makeCSSVarLabels$prime(backgroundInvertedIsSymbol))(mapRecordWithIndexCons13(makeCSSVarLabels$prime(backgroundLayer1IsSymbol))(mapRecordWithIndexCons14(makeCSSVarLabels$prime(backgroundLayer2IsSymbol))(mapRecordWithIndexCons15(makeCSSVarLabels$prime(backgroundLayer3IsSymbol))(mapRecordWithIndexCons16(makeCSSVarLabels$prime(backgroundLayer4IsSymbol))(mapRecordWithIndexCons17(makeCSSVarLabels$prime(backgroundLayer5IsSymbol))(mapRecordWithIndexCons18(makeCSSVarLabels$prime(backgroundLayer5BorderIsSymbol))(mapRecordWithIndexCons19(makeCSSVarLabels$prime(boxShadowIsSymbol))(mapRecordWithIndexCons20(makeCSSVarLabels$prime(highlightIsSymbol))(mapRecordWithIndexCons21(makeCSSVarLabels$prime(highlightAlpha10IsSymbol))(mapRecordWithIndexCons222(makeCSSVarLabels$prime(highlightAlpha25IsSymbol))(mapRecordWithIndexCons23(makeCSSVarLabels$prime(highlightAlpha50IsSymbol))(mapRecordWithIndexCons24(makeCSSVarLabels$prime(highlightAlpha67IsSymbol))(mapRecordWithIndexCons25(makeCSSVarLabels$prime(highlightDarkerIsSymbol))(mapRecordWithIndexCons26(makeCSSVarLabels$prime(highlightDisabledIsSymbol))(mapRecordWithIndexCons27(makeCSSVarLabels$prime(highlightLighterIsSymbol))(mapRecordWithIndexCons28(makeCSSVarLabels$prime(highlightRotatedBackwardsIsSymbol))(mapRecordWithIndexCons29(makeCSSVarLabels$prime(highlightRotatedForwardsIsSymbol))(mapRecordWithIndexCons30(makeCSSVarLabels$prime(highlightTextIsSymbol))(mapRecordWithIndexCons31(makeCSSVarLabels$prime(highlightTextOnBackgroundIsSymbol))(mapRecordWithIndexCons32(makeCSSVarLabels$prime(inputBackgroundIsSymbol))(mapRecordWithIndexCons33(makeCSSVarLabels$prime(inputBorderIsSymbol))(mapRecordWithIndexCons34(makeCSSVarLabels$prime(interfaceBackgroundIsSymbol))(mapRecordWithIndexCons35(makeCSSVarLabels$prime(interfaceBackgroundDangerousIsSymbol))(mapRecordWithIndexCons36(makeCSSVarLabels$prime(interfaceBackgroundDisabledIsSymbol))(mapRecordWithIndexCons37(makeCSSVarLabels$prime(interfaceBackgroundHighlightIsSymbol))(mapRecordWithIndexCons38(makeCSSVarLabels$prime(interfaceBackgroundShadowIsSymbol))(mapRecordWithIndexCons39(makeCSSVarLabels$prime(interfaceDangerousTextIsSymbol))(mapRecordWithIndexCons40(makeCSSVarLabels$prime(interfaceTextDisabledIsSymbol))(mapRecordWithIndexCons41(makeCSSVarLabels$prime(invalidIsSymbol))(mapRecordWithIndexCons42(makeCSSVarLabels$prime(invalidTextIsSymbol))(mapRecordWithIndexCons43(makeCSSVarLabels$prime(linkIsSymbol))(mapRecordWithIndexCons44(makeCSSVarLabels$prime(placeholderTextIsSymbol))(mapRecordWithIndexCons45(makeCSSVarLabels$prime(popperBackgroundIsSymbol))(mapRecordWithIndexCons46(makeCSSVarLabels$prime(popperBackgroundNoAlphaIsSymbol))(mapRecordWithIndexCons47(makeCSSVarLabels$prime(popperInnerBorderIsSymbol))(mapRecordWithIndexCons48(makeCSSVarLabels$prime(popperOuterBorderIsSymbol))(mapRecordWithIndexCons49(makeCSSVarLabels$prime(requiredIsSymbol))(mapRecordWithIndexCons50(makeCSSVarLabels$prime(rippleIsSymbol))(mapRecordWithIndexCons51(makeCSSVarLabels$prime(successIsSymbol))(mapRecordWithIndexCons52(makeCSSVarLabels$prime(successTextIsSymbol))(mapRecordWithIndexCons53(makeCSSVarLabels$prime(textIsSymbol))(mapRecordWithIndexCons54(makeCSSVarLabels$prime(textInvertedIsSymbol))(mapRecordWithIndexCons55(makeCSSVarLabels$prime(textInvertedPaler1IsSymbol))(mapRecordWithIndexCons56(makeCSSVarLabels$prime(textInvertedPaler2IsSymbol))(mapRecordWithIndexCons57(makeCSSVarLabels$prime(textInvertedPaler3IsSymbol))(mapRecordWithIndexCons58(makeCSSVarLabels$prime(textInvertedPaler4IsSymbol))(mapRecordWithIndexCons59(makeCSSVarLabels$prime(textPaler1IsSymbol))(mapRecordWithIndexCons60(makeCSSVarLabels$prime(textPaler2IsSymbol))(mapRecordWithIndexCons61(makeCSSVarLabels$prime(textPaler3IsSymbol))(mapRecordWithIndexCons62(makeCSSVarLabels$prime(textPaler4IsSymbol))(mapRecordWithIndexNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()()))(defaultColours.light));
  }();
  var col2 = /* @__PURE__ */ mapRecord()(/* @__PURE__ */ mapRecordCons(backgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha0IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha25IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha50IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundAlpha75IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright1IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright2IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright3IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright4IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright5IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundBright6IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundCardIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundInvertedIsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer1IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer2IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer3IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer4IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer5IsSymbol)()(/* @__PURE__ */ mapRecordCons(backgroundLayer5BorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(boxShadowIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha10IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha25IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha50IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightAlpha67IsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightDarkerIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightLighterIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightRotatedBackwardsIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightRotatedForwardsIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(highlightTextOnBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(inputBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(inputBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundDangerousIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundHighlightIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceBackgroundShadowIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceDangerousTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(interfaceTextDisabledIsSymbol)()(/* @__PURE__ */ mapRecordCons(invalidIsSymbol)()(/* @__PURE__ */ mapRecordCons(invalidTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(linkIsSymbol)()(/* @__PURE__ */ mapRecordCons(placeholderTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperBackgroundIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperBackgroundNoAlphaIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperInnerBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(popperOuterBorderIsSymbol)()(/* @__PURE__ */ mapRecordCons(requiredIsSymbol)()(/* @__PURE__ */ mapRecordCons(rippleIsSymbol)()(/* @__PURE__ */ mapRecordCons(successIsSymbol)()(/* @__PURE__ */ mapRecordCons(successTextIsSymbol)()(/* @__PURE__ */ mapRecordCons(textIsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedIsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler1IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler2IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler3IsSymbol)()(/* @__PURE__ */ mapRecordCons(textInvertedPaler4IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler1IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler2IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler3IsSymbol)()(/* @__PURE__ */ mapRecordCons(textPaler4IsSymbol)()(mapRecordNil)()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())()())(str)(colour);
  var autoSwitchColourTheme = /* @__PURE__ */ function() {
    var darkObj = foldMap4(function(k2) {
      return function(v2) {
        return singleton8("--" + k2)(str(cssStringRGBA(v2)));
      };
    })(fromHomogeneous4(defaultColours.dark));
    var lightObj = foldMap4(function(k2) {
      return function(v2) {
        return insert3("&:th")(nested(darkObj))(insert3("@media (prefers-color-scheme: dark)")(nested(darkObj))(singleton8("--" + k2)(str(cssStringRGBA(v2)))));
      };
    })(fromHomogeneous4(defaultColours.light));
    return lightObj;
  }();
  var mkGlobal = function(maybeMode) {
    return css14({
      "html, body": nested(css14({
        minHeight: percent(100),
        minWidth: percent(100),
        WebkitTextSizeAdjust: _100percent
      })),
      ":root": nested(append13(css14({
        "@media (prefers-color-scheme: dark)": nest2({
          "--theme-variant": str("dark"),
          "--light-mode": str("0"),
          "--dark-mode": str("1")
        })
      }))(append13(variables)(fontVariables({
        main: '"Inter V", "Inter var", Inter',
        mono: "Victor Mono, Menlo, Consolas, Monaco, Liberation Mono, Lucida Console"
      })))),
      html: nested(css14({
        boxSizing: str("border-box")
      })),
      body: nested(append13(css14({
        fontFamily: str("var(--main-font)"),
        backgroundColor: col2.background,
        color: col2.text,
        margin: str("0")
      }))(function() {
        if (maybeMode instanceof Nothing) {
          return autoSwitchColourTheme;
        }
        ;
        if (maybeMode instanceof Just && maybeMode.value0 instanceof DarkMode) {
          return darkModeStyle;
        }
        ;
        if (maybeMode instanceof Just && maybeMode.value0 instanceof LightMode) {
          return lightModeStyle;
        }
        ;
        throw new Error("Failed pattern match at Yoga.Block.Container.Style (line 137, column 14 - line 140, column 44): " + [maybeMode.constructor.name]);
      }())),
      "pre,code": nest2({
        fontFamily: str("var(--mono-font)")
      }),
      "h1,h2,h3,h4": nest2({
        fontWeight: str("700")
      }),
      a: nest2({
        fontWeight: str("600"),
        textDecoration: str("underline"),
        cursor: str("pointer"),
        "&:hover": nest2({
          textDecoration: str("none")
        })
      }),
      "::selection": nest2({
        color: col2.highlightText,
        background: col2.highlight
      }),
      "*, *:before, *:after": nested(css14({
        boxSizing: str("inherit")
      }))
    });
  };
  var darkMode = /* @__PURE__ */ function() {
    return mkGlobal(new Just(DarkMode.value));
  }();
  var global4 = /* @__PURE__ */ function() {
    return mkGlobal(Nothing.value);
  }();
  var lightMode = /* @__PURE__ */ function() {
    return mkGlobal(new Just(LightMode.value));
  }();

  // output/React.Basic.DOM.SVG/index.js
  var _svg$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("svg"));
  var svg$prime = function() {
    return _svg$prime;
  };
  var svg$prime1 = /* @__PURE__ */ svg$prime();
  var svg2 = function() {
    return element(svg$prime1);
  };
  var _rect$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("rect"));
  var rect$prime = function() {
    return _rect$prime;
  };
  var rect$prime1 = /* @__PURE__ */ rect$prime();
  var rect = function() {
    return element(rect$prime1);
  };
  var _path$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("path"));
  var path$prime = function() {
    return _path$prime;
  };
  var path$prime1 = /* @__PURE__ */ path$prime();
  var path = function() {
    return element(path$prime1);
  };
  var _g$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("g"));
  var g$prime = function() {
    return _g$prime;
  };
  var _circle$prime = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ unsafeCreateDOMComponent("circle"));
  var circle$prime = function() {
    return _circle$prime;
  };
  var circle$prime1 = /* @__PURE__ */ circle$prime();
  var circle = function() {
    return element(circle$prime1);
  };

  // output/Fahrtwind.Icon.Common/index.js
  var svg3 = /* @__PURE__ */ svg2();
  var mapFlipped4 = /* @__PURE__ */ mapFlipped(functorArray);
  var path2 = /* @__PURE__ */ path();
  var outlines = function(ds) {
    return svg3({
      viewBox: "0 0 24 24",
      xmlns: "http://www.w3.org/2000/svg",
      xmlSpace: "preserve",
      stroke: "var(--icon-colour, currentColor)",
      fill: "none",
      children: mapFlipped4(ds)(function(d2) {
        return path2({
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          d: d2
        });
      })
    });
  };
  var outline = function(d2) {
    return outlines([d2]);
  };

  // output/Fahrtwind.Icon.Heroicons/index.js
  var x = /* @__PURE__ */ outline("M6 18L18 6M6 6l12 12");
  var user = /* @__PURE__ */ outline("M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z");
  var search2 = /* @__PURE__ */ outline("M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z");
  var questionMarkCircle = /* @__PURE__ */ outline("M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z");
  var plus = /* @__PURE__ */ outline("M12 4v16m8-8H4");
  var pencil = /* @__PURE__ */ outline("M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z");
  var identification = /* @__PURE__ */ outline("M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2");
  var home = /* @__PURE__ */ outline("M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6");
  var fingerPrint = /* @__PURE__ */ outline("M12 11c0 3.517-1.009 6.799-2.753 9.571m-3.44-2.04l.054-.09A13.916 13.916 0 008 11a4 4 0 118 0c0 1.017-.07 2.019-.203 3m-2.118 6.844A21.88 21.88 0 0015.171 17m3.839 1.132c.645-2.266.99-4.659.99-7.132A8 8 0 008 4.07M3 15.364c.64-1.319 1-2.8 1-4.364 0-1.457.39-2.823 1.07-4");
  var exclamationCircle = /* @__PURE__ */ outline("M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z");
  var dotsVertical = /* @__PURE__ */ outline("M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z");
  var cross = /* @__PURE__ */ outline("M6 18L18 6M6 6l12 12");
  var cog = /* @__PURE__ */ outlines(["M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z", "M15 12a3 3 0 11-6 0 3 3 0 016 0z"]);
  var code2 = /* @__PURE__ */ outline("M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4");
  var clipboardCheck = /* @__PURE__ */ outline("M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4");
  var clipboard = /* @__PURE__ */ outline("M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2");
  var chevronDown = /* @__PURE__ */ outline("M19 9l-7 7-7-7");

  // node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __spreadArray,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet,
    __classPrivateFieldIn
  } = import_tslib.default;

  // node_modules/framer-motion/dist/es/motion/index.mjs
  var React6 = __toESM(require_react(), 1);
  var import_react22 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/motion/features/use-features.mjs
  var React5 = __toESM(require_react(), 1);
  var import_react8 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/process.mjs
  var defaultEnvironment = "production";
  var env = typeof process === "undefined" || process.env === void 0 ? defaultEnvironment : "development";

  // node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  var createDefinition = function(propNames) {
    return {
      isEnabled: function(props) {
        return propNames.some(function(name15) {
          return !!props[name15];
        });
      }
    };
  };
  var featureDefinitions = {
    measureLayout: createDefinition(["layout", "layoutId", "drag"]),
    animation: createDefinition([
      "animate",
      "exit",
      "variants",
      "whileHover",
      "whileTap",
      "whileFocus",
      "whileDrag",
      "whileInView"
    ]),
    exit: createDefinition(["exit"]),
    drag: createDefinition(["drag", "dragControls"]),
    focus: createDefinition(["whileFocus"]),
    hover: createDefinition(["whileHover", "onHoverStart", "onHoverEnd"]),
    tap: createDefinition(["whileTap", "onTap", "onTapStart", "onTapCancel"]),
    pan: createDefinition([
      "onPan",
      "onPanStart",
      "onPanSessionStart",
      "onPanEnd"
    ]),
    inView: createDefinition([
      "whileInView",
      "onViewportEnter",
      "onViewportLeave"
    ])
  };
  function loadFeatures(features) {
    for (var key in features) {
      if (features[key] === null)
        continue;
      if (key === "projectionNodeConstructor") {
        featureDefinitions.projectionNodeConstructor = features[key];
      } else {
        featureDefinitions[key].Component = features[key];
      }
    }
  }

  // node_modules/hey-listen/dist/hey-listen.es.js
  var warning = function() {
  };
  var invariant = function() {
  };
  if (true) {
    warning = function(check, message2) {
      if (!check && typeof console !== "undefined") {
        console.warn(message2);
      }
    };
    invariant = function(check, message2) {
      if (!check) {
        throw new Error(message2);
      }
    };
  }

  // node_modules/framer-motion/dist/es/context/LazyContext.mjs
  var import_react7 = __toESM(require_react(), 1);
  var LazyContext = (0, import_react7.createContext)({ strict: false });

  // node_modules/framer-motion/dist/es/motion/features/use-features.mjs
  var featureNames = Object.keys(featureDefinitions);
  var numFeatures = featureNames.length;
  function useFeatures(props, visualElement2, preloadedFeatures) {
    var features = [];
    var lazyContext = (0, import_react8.useContext)(LazyContext);
    if (!visualElement2)
      return null;
    if (env !== "production" && preloadedFeatures && lazyContext.strict) {
      invariant(false, "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.");
    }
    for (var i7 = 0; i7 < numFeatures; i7++) {
      var name_1 = featureNames[i7];
      var _a2 = featureDefinitions[name_1], isEnabled = _a2.isEnabled, Component = _a2.Component;
      if (isEnabled(props) && Component) {
        features.push(React5.createElement(Component, __assign({ key: name_1 }, props, { visualElement: visualElement2 })));
      }
    }
    return features;
  }

  // node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  var import_react9 = __toESM(require_react(), 1);
  var MotionConfigContext = (0, import_react9.createContext)({
    transformPagePoint: function(p3) {
      return p3;
    },
    isStatic: false,
    reducedMotion: "never"
  });

  // node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  var import_react10 = __toESM(require_react(), 1);
  var MotionContext = (0, import_react10.createContext)({});
  function useVisualElementContext() {
    return (0, import_react10.useContext)(MotionContext).visualElement;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  var import_react14 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  var import_react11 = __toESM(require_react(), 1);
  var PresenceContext = (0, import_react11.createContext)(null);

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var import_react12 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-browser.mjs
  var isBrowser2 = typeof document !== "undefined";

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var useIsomorphicLayoutEffect = isBrowser2 ? import_react12.useLayoutEffect : import_react12.useEffect;

  // node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs
  var import_react13 = __toESM(require_react(), 1);
  var prefersReducedMotion = { current: null };
  var hasDetected = false;
  function initPrefersReducedMotion() {
    hasDetected = true;
    if (!isBrowser2)
      return;
    if (window.matchMedia) {
      var motionMediaQuery_1 = window.matchMedia("(prefers-reduced-motion)");
      var setReducedMotionPreferences = function() {
        return prefersReducedMotion.current = motionMediaQuery_1.matches;
      };
      motionMediaQuery_1.addListener(setReducedMotionPreferences);
      setReducedMotionPreferences();
    } else {
      prefersReducedMotion.current = false;
    }
  }
  function useReducedMotion() {
    !hasDetected && initPrefersReducedMotion();
    var _a2 = __read((0, import_react13.useState)(prefersReducedMotion.current), 1), shouldReduceMotion = _a2[0];
    return shouldReduceMotion;
  }
  function useReducedMotionConfig() {
    var reducedMotionPreference = useReducedMotion();
    var reducedMotion = (0, import_react13.useContext)(MotionConfigContext).reducedMotion;
    if (reducedMotion === "never") {
      return false;
    } else if (reducedMotion === "always") {
      return true;
    } else {
      return reducedMotionPreference;
    }
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  function useVisualElement(Component, visualState, props, createVisualElement) {
    var lazyContext = (0, import_react14.useContext)(LazyContext);
    var parent2 = useVisualElementContext();
    var presenceContext = (0, import_react14.useContext)(PresenceContext);
    var shouldReduceMotion = useReducedMotionConfig();
    var visualElementRef = (0, import_react14.useRef)(void 0);
    if (!createVisualElement)
      createVisualElement = lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component, {
        visualState,
        parent: parent2,
        props,
        presenceId: presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.id,
        blockInitialAnimation: (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false,
        shouldReduceMotion
      });
    }
    var visualElement2 = visualElementRef.current;
    useIsomorphicLayoutEffect(function() {
      visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
    });
    (0, import_react14.useEffect)(function() {
      var _a2;
      (_a2 = visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.animateChanges();
    });
    useIsomorphicLayoutEffect(function() {
      return function() {
        return visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.notifyUnmount();
      };
    }, []);
    return visualElement2;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  var import_react15 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  function isRefObject(ref) {
    return typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  function useMotionRef(visualState, visualElement2, externalRef) {
    return (0, import_react15.useCallback)(function(instance) {
      var _a2;
      instance && ((_a2 = visualState.mount) === null || _a2 === void 0 ? void 0 : _a2.call(visualState, instance));
      if (visualElement2) {
        instance ? visualElement2.mount(instance) : visualElement2.unmount();
      }
      if (externalRef) {
        if (typeof externalRef === "function") {
          externalRef(instance);
        } else if (isRefObject(externalRef)) {
          externalRef.current = instance;
        }
      }
    }, [visualElement2]);
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  var import_react16 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/utils/variants.mjs
  function isVariantLabels(v2) {
    return Array.isArray(v2);
  }
  function isVariantLabel(v2) {
    return typeof v2 === "string" || isVariantLabels(v2);
  }
  function getCurrent(visualElement2) {
    var current = {};
    visualElement2.forEachValue(function(value12, key) {
      return current[key] = value12.get();
    });
    return current;
  }
  function getVelocity(visualElement2) {
    var velocity = {};
    visualElement2.forEachValue(function(value12, key) {
      return velocity[key] = value12.getVelocity();
    });
    return velocity;
  }
  function resolveVariantFromProps(props, definition, custom2, currentValues, currentVelocity) {
    var _a2;
    if (currentValues === void 0) {
      currentValues = {};
    }
    if (currentVelocity === void 0) {
      currentVelocity = {};
    }
    if (typeof definition === "function") {
      definition = definition(custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, currentValues, currentVelocity);
    }
    if (typeof definition === "string") {
      definition = (_a2 = props.variants) === null || _a2 === void 0 ? void 0 : _a2[definition];
    }
    if (typeof definition === "function") {
      definition = definition(custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, currentValues, currentVelocity);
    }
    return definition;
  }
  function resolveVariant(visualElement2, definition, custom2) {
    var props = visualElement2.getProps();
    return resolveVariantFromProps(props, definition, custom2 !== null && custom2 !== void 0 ? custom2 : props.custom, getCurrent(visualElement2), getVelocity(visualElement2));
  }
  function checkIfControllingVariants(props) {
    var _a2;
    return typeof ((_a2 = props.animate) === null || _a2 === void 0 ? void 0 : _a2.start) === "function" || isVariantLabel(props.initial) || isVariantLabel(props.animate) || isVariantLabel(props.whileHover) || isVariantLabel(props.whileDrag) || isVariantLabel(props.whileTap) || isVariantLabel(props.whileFocus) || isVariantLabel(props.exit);
  }
  function checkIfVariantNode(props) {
    return Boolean(checkIfControllingVariants(props) || props.variants);
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  function getCurrentTreeVariants(props, context) {
    if (checkIfControllingVariants(props)) {
      var initial8 = props.initial, animate11 = props.animate;
      return {
        initial: initial8 === false || isVariantLabel(initial8) ? initial8 : void 0,
        animate: isVariantLabel(animate11) ? animate11 : void 0
      };
    }
    return props.inherit !== false ? context : {};
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  function useCreateMotionContext(props) {
    var _a2 = getCurrentTreeVariants(props, (0, import_react16.useContext)(MotionContext)), initial8 = _a2.initial, animate11 = _a2.animate;
    return (0, import_react16.useMemo)(function() {
      return { initial: initial8, animate: animate11 };
    }, [variantLabelsAsDependency(initial8), variantLabelsAsDependency(animate11)]);
  }
  function variantLabelsAsDependency(prop3) {
    return Array.isArray(prop3) ? prop3.join(" ") : prop3;
  }

  // node_modules/framer-motion/dist/es/utils/use-constant.mjs
  var import_react17 = __toESM(require_react(), 1);
  function useConstant(init5) {
    var ref = (0, import_react17.useRef)(null);
    if (ref.current === null) {
      ref.current = init5();
    }
    return ref.current;
  }

  // node_modules/framer-motion/dist/es/projection/node/state.mjs
  var globalProjectionState = {
    hasAnimatedSinceResize: true,
    hasEverUpdated: false
  };

  // node_modules/framer-motion/dist/es/projection/node/id.mjs
  var id = 1;
  function useProjectionId() {
    return useConstant(function() {
      if (globalProjectionState.hasEverUpdated) {
        return id++;
      }
    });
  }

  // node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  var import_react18 = __toESM(require_react(), 1);
  var LayoutGroupContext = (0, import_react18.createContext)({});

  // node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
  var import_react20 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  var import_react19 = __toESM(require_react(), 1);
  var SwitchLayoutGroupContext = (0, import_react19.createContext)({});

  // node_modules/framer-motion/dist/es/motion/features/use-projection.mjs
  function useProjection(projectionId, _a2, visualElement2, ProjectionNodeConstructor) {
    var _b;
    var layoutId4 = _a2.layoutId, layout4 = _a2.layout, drag3 = _a2.drag, dragConstraints2 = _a2.dragConstraints, layoutScroll = _a2.layoutScroll;
    var initialPromotionConfig = (0, import_react20.useContext)(SwitchLayoutGroupContext);
    if (!ProjectionNodeConstructor || !visualElement2 || (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.projection)) {
      return;
    }
    visualElement2.projection = new ProjectionNodeConstructor(projectionId, visualElement2.getLatestValues(), (_b = visualElement2.parent) === null || _b === void 0 ? void 0 : _b.projection);
    visualElement2.projection.setOptions({
      layoutId: layoutId4,
      layout: layout4,
      alwaysMeasureLayout: Boolean(drag3) || dragConstraints2 && isRefObject(dragConstraints2),
      visualElement: visualElement2,
      scheduleRender: function() {
        return visualElement2.scheduleRender();
      },
      animationType: typeof layout4 === "string" ? layout4 : "both",
      initialPromotionConfig,
      layoutScroll
    });
  }

  // node_modules/framer-motion/dist/es/motion/utils/VisualElementHandler.mjs
  var import_react21 = __toESM(require_react(), 1);
  var VisualElementHandler = function(_super) {
    __extends(VisualElementHandler2, _super);
    function VisualElementHandler2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    VisualElementHandler2.prototype.getSnapshotBeforeUpdate = function() {
      this.updateProps();
      return null;
    };
    VisualElementHandler2.prototype.componentDidUpdate = function() {
    };
    VisualElementHandler2.prototype.updateProps = function() {
      var _a2 = this.props, visualElement2 = _a2.visualElement, props = _a2.props;
      if (visualElement2)
        visualElement2.setProps(props);
    };
    VisualElementHandler2.prototype.render = function() {
      return this.props.children;
    };
    return VisualElementHandler2;
  }(import_react21.default.Component);

  // node_modules/framer-motion/dist/es/motion/index.mjs
  function createMotionComponent(_a2) {
    var preloadedFeatures = _a2.preloadedFeatures, createVisualElement = _a2.createVisualElement, projectionNodeConstructor = _a2.projectionNodeConstructor, useRender = _a2.useRender, useVisualState = _a2.useVisualState, Component = _a2.Component;
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
      var layoutId4 = useLayoutId(props);
      props = __assign(__assign({}, props), { layoutId: layoutId4 });
      var config = (0, import_react22.useContext)(MotionConfigContext);
      var features = null;
      var context = useCreateMotionContext(props);
      var projectionId = config.isStatic ? void 0 : useProjectionId();
      var visualState = useVisualState(props, config.isStatic);
      if (!config.isStatic && isBrowser2) {
        context.visualElement = useVisualElement(Component, visualState, __assign(__assign({}, config), props), createVisualElement);
        useProjection(projectionId, props, context.visualElement, projectionNodeConstructor || featureDefinitions.projectionNodeConstructor);
        features = useFeatures(props, context.visualElement, preloadedFeatures);
      }
      return React6.createElement(VisualElementHandler, { visualElement: context.visualElement, props: __assign(__assign({}, config), props) }, features, React6.createElement(MotionContext.Provider, { value: context }, useRender(Component, props, projectionId, useMotionRef(visualState, context.visualElement, externalRef), visualState, config.isStatic, context.visualElement)));
    }
    return (0, import_react22.forwardRef)(MotionComponent);
  }
  function useLayoutId(_a2) {
    var _b;
    var layoutId4 = _a2.layoutId;
    var layoutGroupId = (_b = (0, import_react22.useContext)(LayoutGroupContext)) === null || _b === void 0 ? void 0 : _b.id;
    return layoutGroupId && layoutId4 !== void 0 ? layoutGroupId + "-" + layoutId4 : layoutId4;
  }

  // node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs
  function createMotionProxy(createConfig) {
    function custom2(Component, customMotionComponentConfig) {
      if (customMotionComponentConfig === void 0) {
        customMotionComponentConfig = {};
      }
      return createMotionComponent(createConfig(Component, customMotionComponentConfig));
    }
    if (typeof Proxy === "undefined") {
      return custom2;
    }
    var componentCache = /* @__PURE__ */ new Map();
    return new Proxy(custom2, {
      get: function(_target, key) {
        if (!componentCache.has(key)) {
          componentCache.set(key, custom2(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "svg",
    "switch",
    "symbol",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  function isSVGComponent(Component) {
    if (typeof Component !== "string" || Component.includes("-")) {
      return false;
    } else if (lowercaseSVGElements.indexOf(Component) > -1 || /[A-Z]/.test(Component)) {
      return true;
    }
    return false;
  }

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  var import_react25 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/html/use-props.mjs
  var import_react23 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  var scaleCorrectors = {};
  function addScaleCorrector(correctors) {
    Object.assign(scaleCorrectors, correctors);
  }

  // node_modules/framer-motion/dist/es/render/html/utils/transform.mjs
  var transformAxes = ["", "X", "Y", "Z"];
  var order = ["translate", "scale", "rotate", "skew"];
  var transformProps = ["transformPerspective", "x", "y", "z"];
  order.forEach(function(operationKey) {
    return transformAxes.forEach(function(axesKey) {
      return transformProps.push(operationKey + axesKey);
    });
  });
  function sortTransformProps(a4, b4) {
    return transformProps.indexOf(a4) - transformProps.indexOf(b4);
  }
  var transformPropSet = new Set(transformProps);
  function isTransformProp(key) {
    return transformPropSet.has(key);
  }
  var transformOriginProps = /* @__PURE__ */ new Set(["originX", "originY", "originZ"]);
  function isTransformOriginProp(key) {
    return transformOriginProps.has(key);
  }

  // node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  function isForcedMotionValue(key, _a2) {
    var layout4 = _a2.layout, layoutId4 = _a2.layoutId;
    return isTransformProp(key) || isTransformOriginProp(key) || (layout4 || layoutId4 !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
  }

  // node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  var isMotionValue = function(value12) {
    return Boolean(value12 !== null && typeof value12 === "object" && value12.getVelocity);
  };

  // node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  function buildTransform(_a2, _b, transformIsDefault, transformTemplate) {
    var transform2 = _a2.transform, transformKeys2 = _a2.transformKeys;
    var _c = _b.enableHardwareAcceleration, enableHardwareAcceleration = _c === void 0 ? true : _c, _d = _b.allowTransformNone, allowTransformNone = _d === void 0 ? true : _d;
    var transformString = "";
    transformKeys2.sort(sortTransformProps);
    var transformHasZ = false;
    var numTransformKeys = transformKeys2.length;
    for (var i7 = 0; i7 < numTransformKeys; i7++) {
      var key = transformKeys2[i7];
      transformString += "".concat(translateAlias[key] || key, "(").concat(transform2[key], ") ");
      if (key === "z")
        transformHasZ = true;
    }
    if (!transformHasZ && enableHardwareAcceleration) {
      transformString += "translateZ(0)";
    } else {
      transformString = transformString.trim();
    }
    if (transformTemplate) {
      transformString = transformTemplate(transform2, transformIsDefault ? "" : transformString);
    } else if (allowTransformNone && transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }
  function buildTransformOrigin(_a2) {
    var _b = _a2.originX, originX = _b === void 0 ? "50%" : _b, _c = _a2.originY, originY = _c === void 0 ? "50%" : _c, _d = _a2.originZ, originZ = _d === void 0 ? 0 : _d;
    return "".concat(originX, " ").concat(originY, " ").concat(originZ);
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  function isCSSVariable(key) {
    return key.startsWith("--");
  }

  // node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  var getValueAsType = function(value12, type) {
    return type && typeof value12 === "number" ? type.transform(value12) : value12;
  };

  // node_modules/style-value-types/dist/es/utils.mjs
  var clamp3 = (min8, max7) => (v2) => Math.max(Math.min(v2, max7), min8);
  var sanitize = (v2) => v2 % 1 ? Number(v2.toFixed(5)) : v2;
  var floatRegex = /(-)?([\d]*\.?[\d])+/g;
  var colorRegex = /(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi;
  var singleColorRegex = /^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;
  function isString(v2) {
    return typeof v2 === "string";
  }

  // node_modules/style-value-types/dist/es/numbers/index.mjs
  var number = {
    test: (v2) => typeof v2 === "number",
    parse: parseFloat,
    transform: (v2) => v2
  };
  var alpha = Object.assign(Object.assign({}, number), { transform: clamp3(0, 1) });
  var scale = Object.assign(Object.assign({}, number), { default: 1 });

  // node_modules/style-value-types/dist/es/numbers/units.mjs
  var createUnitType = (unit2) => ({
    test: (v2) => isString(v2) && v2.endsWith(unit2) && v2.split(" ").length === 1,
    parse: parseFloat,
    transform: (v2) => `${v2}${unit2}`
  });
  var degrees = createUnitType("deg");
  var percent2 = createUnitType("%");
  var px2 = createUnitType("px");
  var vh2 = createUnitType("vh");
  var vw2 = createUnitType("vw");
  var progressPercentage = Object.assign(Object.assign({}, percent2), { parse: (v2) => percent2.parse(v2) / 100, transform: (v2) => percent2.transform(v2 * 100) });

  // node_modules/style-value-types/dist/es/color/utils.mjs
  var isColorString = (type, testProp) => (v2) => {
    return Boolean(isString(v2) && singleColorRegex.test(v2) && v2.startsWith(type) || testProp && Object.prototype.hasOwnProperty.call(v2, testProp));
  };
  var splitColor = (aName, bName, cName) => (v2) => {
    if (!isString(v2))
      return v2;
    const [a4, b4, c3, alpha2] = v2.match(floatRegex);
    return {
      [aName]: parseFloat(a4),
      [bName]: parseFloat(b4),
      [cName]: parseFloat(c3),
      alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
    };
  };

  // node_modules/style-value-types/dist/es/color/hsla.mjs
  var hsla2 = {
    test: isColorString("hsl", "hue"),
    parse: splitColor("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness: lightness2, alpha: alpha$1 = 1 }) => {
      return "hsla(" + Math.round(hue) + ", " + percent2.transform(sanitize(saturation)) + ", " + percent2.transform(sanitize(lightness2)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // node_modules/style-value-types/dist/es/color/rgba.mjs
  var clampRgbUnit = clamp3(0, 255);
  var rgbUnit = Object.assign(Object.assign({}, number), { transform: (v2) => Math.round(clampRgbUnit(v2)) });
  var rgba2 = {
    test: isColorString("rgb", "red"),
    parse: splitColor("red", "green", "blue"),
    transform: ({ red, green: green2, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green2) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
  };

  // node_modules/style-value-types/dist/es/color/hex.mjs
  function parseHex(v2) {
    let r2 = "";
    let g3 = "";
    let b4 = "";
    let a4 = "";
    if (v2.length > 5) {
      r2 = v2.substr(1, 2);
      g3 = v2.substr(3, 2);
      b4 = v2.substr(5, 2);
      a4 = v2.substr(7, 2);
    } else {
      r2 = v2.substr(1, 1);
      g3 = v2.substr(2, 1);
      b4 = v2.substr(3, 1);
      a4 = v2.substr(4, 1);
      r2 += r2;
      g3 += g3;
      b4 += b4;
      a4 += a4;
    }
    return {
      red: parseInt(r2, 16),
      green: parseInt(g3, 16),
      blue: parseInt(b4, 16),
      alpha: a4 ? parseInt(a4, 16) / 255 : 1
    };
  }
  var hex = {
    test: isColorString("#"),
    parse: parseHex,
    transform: rgba2.transform
  };

  // node_modules/style-value-types/dist/es/color/index.mjs
  var color2 = {
    test: (v2) => rgba2.test(v2) || hex.test(v2) || hsla2.test(v2),
    parse: (v2) => {
      if (rgba2.test(v2)) {
        return rgba2.parse(v2);
      } else if (hsla2.test(v2)) {
        return hsla2.parse(v2);
      } else {
        return hex.parse(v2);
      }
    },
    transform: (v2) => {
      return isString(v2) ? v2 : v2.hasOwnProperty("red") ? rgba2.transform(v2) : hsla2.transform(v2);
    }
  };

  // node_modules/style-value-types/dist/es/complex/index.mjs
  var colorToken = "${c}";
  var numberToken = "${n}";
  function test2(v2) {
    var _a2, _b, _c, _d;
    return isNaN(v2) && isString(v2) && ((_b = (_a2 = v2.match(floatRegex)) === null || _a2 === void 0 ? void 0 : _a2.length) !== null && _b !== void 0 ? _b : 0) + ((_d = (_c = v2.match(colorRegex)) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) > 0;
  }
  function analyse(v2) {
    if (typeof v2 === "number")
      v2 = `${v2}`;
    const values3 = [];
    let numColors = 0;
    const colors = v2.match(colorRegex);
    if (colors) {
      numColors = colors.length;
      v2 = v2.replace(colorRegex, colorToken);
      values3.push(...colors.map(color2.parse));
    }
    const numbers = v2.match(floatRegex);
    if (numbers) {
      v2 = v2.replace(floatRegex, numberToken);
      values3.push(...numbers.map(number.parse));
    }
    return { values: values3, numColors, tokenised: v2 };
  }
  function parse7(v2) {
    return analyse(v2).values;
  }
  function createTransformer(v2) {
    const { values: values3, numColors, tokenised } = analyse(v2);
    const numValues = values3.length;
    return (v3) => {
      let output2 = tokenised;
      for (let i7 = 0; i7 < numValues; i7++) {
        output2 = output2.replace(i7 < numColors ? colorToken : numberToken, i7 < numColors ? color2.transform(v3[i7]) : sanitize(v3[i7]));
      }
      return output2;
    };
  }
  var convertNumbersToZero = (v2) => typeof v2 === "number" ? 0 : v2;
  function getAnimatableNone(v2) {
    const parsed = parse7(v2);
    const transformer = createTransformer(v2);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = { test: test2, parse: parse7, createTransformer, getAnimatableNone };

  // node_modules/style-value-types/dist/es/complex/filter.mjs
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v2) {
    let [name15, value12] = v2.slice(0, -1).split("(");
    if (name15 === "drop-shadow")
      return v2;
    const [number2] = value12.match(floatRegex) || [];
    if (!number2)
      return v2;
    const unit2 = value12.replace(number2, "");
    let defaultValue4 = maxDefaults.has(name15) ? 1 : 0;
    if (number2 !== value12)
      defaultValue4 *= 100;
    return name15 + "(" + defaultValue4 + unit2 + ")";
  }
  var functionRegex = /([a-z-]*)\(.*?\)/g;
  var filter4 = Object.assign(Object.assign({}, complex), { getAnimatableNone: (v2) => {
    const functions = v2.match(functionRegex);
    return functions ? functions.map(applyDefaultFilter).join(" ") : v2;
  } });

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  var int = __assign(__assign({}, number), { transform: Math.round });

  // node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  var numberValueTypes = {
    borderWidth: px2,
    borderTopWidth: px2,
    borderRightWidth: px2,
    borderBottomWidth: px2,
    borderLeftWidth: px2,
    borderRadius: px2,
    radius: px2,
    borderTopLeftRadius: px2,
    borderTopRightRadius: px2,
    borderBottomRightRadius: px2,
    borderBottomLeftRadius: px2,
    width: px2,
    maxWidth: px2,
    height: px2,
    maxHeight: px2,
    size: px2,
    top: px2,
    right: px2,
    bottom: px2,
    left: px2,
    padding: px2,
    paddingTop: px2,
    paddingRight: px2,
    paddingBottom: px2,
    paddingLeft: px2,
    margin: px2,
    marginTop: px2,
    marginRight: px2,
    marginBottom: px2,
    marginLeft: px2,
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px2,
    translateX: px2,
    translateY: px2,
    translateZ: px2,
    x: px2,
    y: px2,
    z: px2,
    perspective: px2,
    transformPerspective: px2,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px2,
    zIndex: int,
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  function buildHTMLStyles(state3, latestValues, options3, transformTemplate) {
    var _a2;
    var style3 = state3.style, vars = state3.vars, transform2 = state3.transform, transformKeys2 = state3.transformKeys, transformOrigin = state3.transformOrigin;
    transformKeys2.length = 0;
    var hasTransform2 = false;
    var hasTransformOrigin = false;
    var transformIsNone = true;
    for (var key in latestValues) {
      var value12 = latestValues[key];
      if (isCSSVariable(key)) {
        vars[key] = value12;
        continue;
      }
      var valueType = numberValueTypes[key];
      var valueAsType = getValueAsType(value12, valueType);
      if (isTransformProp(key)) {
        hasTransform2 = true;
        transform2[key] = valueAsType;
        transformKeys2.push(key);
        if (!transformIsNone)
          continue;
        if (value12 !== ((_a2 = valueType.default) !== null && _a2 !== void 0 ? _a2 : 0))
          transformIsNone = false;
      } else if (isTransformOriginProp(key)) {
        transformOrigin[key] = valueAsType;
        hasTransformOrigin = true;
      } else {
        style3[key] = valueAsType;
      }
    }
    if (hasTransform2) {
      style3.transform = buildTransform(state3, options3, transformIsNone, transformTemplate);
    } else if (transformTemplate) {
      style3.transform = transformTemplate({}, "");
    } else if (!latestValues.transform && style3.transform) {
      style3.transform = "none";
    }
    if (hasTransformOrigin) {
      style3.transformOrigin = buildTransformOrigin(transformOrigin);
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  var createHtmlRenderState = function() {
    return {
      style: {},
      transform: {},
      transformKeys: [],
      transformOrigin: {},
      vars: {}
    };
  };

  // node_modules/framer-motion/dist/es/render/html/use-props.mjs
  function copyRawValuesOnly(target6, source3, props) {
    for (var key in source3) {
      if (!isMotionValue(source3[key]) && !isForcedMotionValue(key, props)) {
        target6[key] = source3[key];
      }
    }
  }
  function useInitialMotionValues(_a2, visualState, isStatic) {
    var transformTemplate = _a2.transformTemplate;
    return (0, import_react23.useMemo)(function() {
      var state3 = createHtmlRenderState();
      buildHTMLStyles(state3, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);
      var vars = state3.vars, style3 = state3.style;
      return __assign(__assign({}, vars), style3);
    }, [visualState]);
  }
  function useStyle(props, visualState, isStatic) {
    var styleProp = props.style || {};
    var style3 = {};
    copyRawValuesOnly(style3, styleProp, props);
    Object.assign(style3, useInitialMotionValues(props, visualState, isStatic));
    if (props.transformValues) {
      style3 = props.transformValues(style3);
    }
    return style3;
  }
  function useHTMLProps(props, visualState, isStatic) {
    var htmlProps = {};
    var style3 = useStyle(props, visualState, isStatic);
    if (Boolean(props.drag) && props.dragListener !== false) {
      htmlProps.draggable = false;
      style3.userSelect = style3.WebkitUserSelect = style3.WebkitTouchCallout = "none";
      style3.touchAction = props.drag === true ? "none" : "pan-".concat(props.drag === "x" ? "y" : "x");
    }
    htmlProps.style = style3;
    return htmlProps;
  }

  // node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  var validMotionProps = /* @__PURE__ */ new Set([
    "initial",
    "animate",
    "exit",
    "style",
    "variants",
    "transition",
    "transformTemplate",
    "transformValues",
    "custom",
    "inherit",
    "layout",
    "layoutId",
    "layoutDependency",
    "onLayoutAnimationStart",
    "onLayoutAnimationComplete",
    "onLayoutMeasure",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "drag",
    "dragControls",
    "dragListener",
    "dragConstraints",
    "dragDirectionLock",
    "dragSnapToOrigin",
    "_dragX",
    "_dragY",
    "dragElastic",
    "dragMomentum",
    "dragPropagation",
    "dragTransition",
    "whileDrag",
    "onPan",
    "onPanStart",
    "onPanEnd",
    "onPanSessionStart",
    "onTap",
    "onTapStart",
    "onTapCancel",
    "onHoverStart",
    "onHoverEnd",
    "whileFocus",
    "whileTap",
    "whileHover",
    "whileInView",
    "onViewportEnter",
    "onViewportLeave",
    "viewport",
    "layoutScroll"
  ]);
  function isValidMotionProp(key) {
    return validMotionProps.has(key);
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  var shouldForward = function(key) {
    return !isValidMotionProp(key);
  };
  function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp)
      return;
    shouldForward = function(key) {
      return key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
    };
  }
  try {
    loadExternalIsValidProp(require_is_prop_valid_browser_cjs().default);
  } catch (_a2) {
  }
  function filterProps(props, isDom, forwardMotionProps) {
    var filteredProps = {};
    for (var key in props) {
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || props["draggable"] && key.startsWith("onDrag")) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  var import_react24 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  function calcOrigin(origin3, offset2, size5) {
    return typeof origin3 === "string" ? origin3 : px2.transform(offset2 + size5 * origin3);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    var pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    var pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return "".concat(pxOriginX, " ").concat(pxOriginY);
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs, length10, spacing, offset2, useDashCase) {
    if (spacing === void 0) {
      spacing = 1;
    }
    if (offset2 === void 0) {
      offset2 = 0;
    }
    if (useDashCase === void 0) {
      useDashCase = true;
    }
    attrs.pathLength = 1;
    var keys4 = useDashCase ? dashKeys : camelKeys;
    attrs[keys4.offset] = px2.transform(-offset2);
    var pathLength = px2.transform(length10);
    var pathSpacing = px2.transform(spacing);
    attrs[keys4.array] = "".concat(pathLength, " ").concat(pathSpacing);
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  function buildSVGAttrs(state3, _a2, options3, transformTemplate) {
    var attrX = _a2.attrX, attrY = _a2.attrY, originX = _a2.originX, originY = _a2.originY, pathLength = _a2.pathLength, _b = _a2.pathSpacing, pathSpacing = _b === void 0 ? 1 : _b, _c = _a2.pathOffset, pathOffset = _c === void 0 ? 0 : _c, latest = __rest(_a2, ["attrX", "attrY", "originX", "originY", "pathLength", "pathSpacing", "pathOffset"]);
    buildHTMLStyles(state3, latest, options3, transformTemplate);
    state3.attrs = state3.style;
    state3.style = {};
    var attrs = state3.attrs, style3 = state3.style, dimensions = state3.dimensions;
    if (attrs.transform) {
      if (dimensions)
        style3.transform = attrs.transform;
      delete attrs.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style3.transform)) {
      style3.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs.x = attrX;
    if (attrY !== void 0)
      attrs.y = attrY;
    if (pathLength !== void 0) {
      buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  var createSvgRenderState = function() {
    return __assign(__assign({}, createHtmlRenderState()), { attrs: {} });
  };

  // node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  function useSVGProps(props, visualState) {
    var visualProps = (0, import_react24.useMemo)(function() {
      var state3 = createSvgRenderState();
      buildSVGAttrs(state3, visualState, { enableHardwareAcceleration: false }, props.transformTemplate);
      return __assign(__assign({}, state3.attrs), { style: __assign({}, state3.style) });
    }, [visualState]);
    if (props.style) {
      var rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = __assign(__assign({}, rawStyles), visualProps.style);
    }
    return visualProps;
  }

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  function createUseRender(forwardMotionProps) {
    if (forwardMotionProps === void 0) {
      forwardMotionProps = false;
    }
    var useRender = function(Component, props, projectionId, ref, _a2, isStatic) {
      var latestValues = _a2.latestValues;
      var useVisualProps = isSVGComponent(Component) ? useSVGProps : useHTMLProps;
      var visualProps = useVisualProps(props, latestValues, isStatic);
      var filteredProps = filterProps(props, typeof Component === "string", forwardMotionProps);
      var elementProps = __assign(__assign(__assign({}, filteredProps), visualProps), { ref });
      if (projectionId) {
        elementProps["data-projection-id"] = projectionId;
      }
      return (0, import_react25.createElement)(Component, elementProps);
    };
    return useRender;
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  var CAMEL_CASE_PATTERN = /([a-z])([A-Z])/g;
  var REPLACE_TEMPLATE = "$1-$2";
  var camelToDash = function(str2) {
    return str2.replace(CAMEL_CASE_PATTERN, REPLACE_TEMPLATE).toLowerCase();
  };

  // node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  function renderHTML(element3, _a2, styleProp, projection) {
    var style3 = _a2.style, vars = _a2.vars;
    Object.assign(element3.style, style3, projection && projection.getProjectionStyles(styleProp));
    for (var key in vars) {
      element3.style.setProperty(key, vars[key]);
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength"
  ]);

  // node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  function renderSVG(element3, renderState, _styleProp, projection) {
    renderHTML(element3, renderState, void 0, projection);
    for (var key in renderState.attrs) {
      element3.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps(props) {
    var style3 = props.style;
    var newValues = {};
    for (var key in style3) {
      if (isMotionValue(style3[key]) || isForcedMotionValue(key, props)) {
        newValues[key] = style3[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps2(props) {
    var newValues = scrapeMotionValuesFromProps(props);
    for (var key in props) {
      if (isMotionValue(props[key])) {
        var targetKey = key === "x" || key === "y" ? "attr" + key.toUpperCase() : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  var import_react26 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  function isAnimationControls(v2) {
    return typeof v2 === "object" && typeof v2.start === "function";
  }

  // node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  var isKeyframesTarget = function(v2) {
    return Array.isArray(v2);
  };

  // node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  var isCustomValue = function(v2) {
    return Boolean(v2 && typeof v2 === "object" && v2.mix && v2.toValue);
  };
  var resolveFinalValueInKeyframes = function(v2) {
    return isKeyframesTarget(v2) ? v2[v2.length - 1] || 0 : v2;
  };

  // node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  function resolveMotionValue(value12) {
    var unwrappedValue = isMotionValue(value12) ? value12.get() : value12;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  function makeState(_a2, props, context, presenceContext) {
    var scrapeMotionValuesFromProps3 = _a2.scrapeMotionValuesFromProps, createRenderState = _a2.createRenderState, onMount = _a2.onMount;
    var state3 = {
      latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onMount) {
      state3.mount = function(instance) {
        return onMount(props, instance, state3);
      };
    }
    return state3;
  }
  var makeUseVisualState = function(config) {
    return function(props, isStatic) {
      var context = (0, import_react26.useContext)(MotionContext);
      var presenceContext = (0, import_react26.useContext)(PresenceContext);
      return isStatic ? makeState(config, props, context, presenceContext) : useConstant(function() {
        return makeState(config, props, context, presenceContext);
      });
    };
  };
  function makeLatestValues(props, context, presenceContext, scrapeMotionValues) {
    var values3 = {};
    var blockInitialAnimation = (presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.initial) === false;
    var motionValues = scrapeMotionValues(props);
    for (var key in motionValues) {
      values3[key] = resolveMotionValue(motionValues[key]);
    }
    var initial8 = props.initial, animate11 = props.animate;
    var isControllingVariants = checkIfControllingVariants(props);
    var isVariantNode = checkIfVariantNode(props);
    if (context && isVariantNode && !isControllingVariants && props.inherit !== false) {
      initial8 !== null && initial8 !== void 0 ? initial8 : initial8 = context.initial;
      animate11 !== null && animate11 !== void 0 ? animate11 : animate11 = context.animate;
    }
    var initialAnimationIsBlocked = blockInitialAnimation || initial8 === false;
    var variantToSet = initialAnimationIsBlocked ? animate11 : initial8;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      list.forEach(function(definition) {
        var resolved = resolveVariantFromProps(props, definition);
        if (!resolved)
          return;
        var transitionEnd = resolved.transitionEnd;
        resolved.transition;
        var target6 = __rest(resolved, ["transitionEnd", "transition"]);
        for (var key2 in target6) {
          var valueTarget = target6[key2];
          if (Array.isArray(valueTarget)) {
            var index6 = initialAnimationIsBlocked ? valueTarget.length - 1 : 0;
            valueTarget = valueTarget[index6];
          }
          if (valueTarget !== null) {
            values3[key2] = valueTarget;
          }
        }
        for (var key2 in transitionEnd)
          values3[key2] = transitionEnd[key2];
      });
    }
    return values3;
  }

  // node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onMount: function(props, instance, _a2) {
        var renderState = _a2.renderState, latestValues = _a2.latestValues;
        try {
          renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
        } catch (e) {
          renderState.dimensions = {
            x: 0,
            y: 0,
            width: 0,
            height: 0
          };
        }
        buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, props.transformTemplate);
        renderSVG(instance, renderState);
      }
    })
  };

  // node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs
  function createDomMotionConfig(Component, _a2, preloadedFeatures, createVisualElement, projectionNodeConstructor) {
    var _b = _a2.forwardMotionProps, forwardMotionProps = _b === void 0 ? false : _b;
    var baseConfig = isSVGComponent(Component) ? svgMotionConfig : htmlMotionConfig;
    return __assign(__assign({}, baseConfig), { preloadedFeatures, useRender: createUseRender(forwardMotionProps), createVisualElement, projectionNodeConstructor, Component });
  }

  // node_modules/framer-motion/dist/es/render/utils/types.mjs
  var AnimationType;
  (function(AnimationType2) {
    AnimationType2["Animate"] = "animate";
    AnimationType2["Hover"] = "whileHover";
    AnimationType2["Tap"] = "whileTap";
    AnimationType2["Drag"] = "whileDrag";
    AnimationType2["Focus"] = "whileFocus";
    AnimationType2["InView"] = "whileInView";
    AnimationType2["Exit"] = "exit";
  })(AnimationType || (AnimationType = {}));

  // node_modules/framer-motion/dist/es/events/use-dom-event.mjs
  var import_react27 = __toESM(require_react(), 1);
  function addDomEvent(target6, eventName, handler2, options3) {
    if (options3 === void 0) {
      options3 = { passive: true };
    }
    target6.addEventListener(eventName, handler2, options3);
    return function() {
      return target6.removeEventListener(eventName, handler2);
    };
  }
  function useDomEvent(ref, eventName, handler2, options3) {
    (0, import_react27.useEffect)(function() {
      var element3 = ref.current;
      if (handler2 && element3) {
        return addDomEvent(element3, eventName, handler2, options3);
      }
    }, [ref, eventName, handler2, options3]);
  }

  // node_modules/framer-motion/dist/es/gestures/use-focus-gesture.mjs
  function useFocusGesture(_a2) {
    var whileFocus = _a2.whileFocus, visualElement2 = _a2.visualElement;
    var onFocus = function() {
      var _a3;
      (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Focus, true);
    };
    var onBlur = function() {
      var _a3;
      (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Focus, false);
    };
    useDomEvent(visualElement2, "focus", whileFocus ? onFocus : void 0);
    useDomEvent(visualElement2, "blur", whileFocus ? onBlur : void 0);
  }

  // node_modules/framer-motion/dist/es/gestures/utils/event-type.mjs
  function isMouseEvent(event) {
    if (typeof PointerEvent !== "undefined" && event instanceof PointerEvent) {
      return !!(event.pointerType === "mouse");
    }
    return event instanceof MouseEvent;
  }
  function isTouchEvent(event) {
    var hasTouches = !!event.touches;
    return hasTouches;
  }

  // node_modules/framer-motion/dist/es/events/event-info.mjs
  function filterPrimaryPointer(eventHandler2) {
    return function(event) {
      var isMouseEvent2 = event instanceof MouseEvent;
      var isPrimaryPointer = !isMouseEvent2 || isMouseEvent2 && event.button === 0;
      if (isPrimaryPointer) {
        eventHandler2(event);
      }
    };
  }
  var defaultPagePoint = { pageX: 0, pageY: 0 };
  function pointFromTouch(e, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    var primaryTouch = e.touches[0] || e.changedTouches[0];
    var point = primaryTouch || defaultPagePoint;
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function pointFromMouse(point, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      x: point[pointType + "X"],
      y: point[pointType + "Y"]
    };
  }
  function extractEventInfo(event, pointType) {
    if (pointType === void 0) {
      pointType = "page";
    }
    return {
      point: isTouchEvent(event) ? pointFromTouch(event, pointType) : pointFromMouse(event, pointType)
    };
  }
  var wrapHandler = function(handler2, shouldFilterPrimaryPointer) {
    if (shouldFilterPrimaryPointer === void 0) {
      shouldFilterPrimaryPointer = false;
    }
    var listener = function(event) {
      return handler2(event, extractEventInfo(event));
    };
    return shouldFilterPrimaryPointer ? filterPrimaryPointer(listener) : listener;
  };

  // node_modules/framer-motion/dist/es/events/utils.mjs
  var supportsPointerEvents = function() {
    return isBrowser2 && window.onpointerdown === null;
  };
  var supportsTouchEvents = function() {
    return isBrowser2 && window.ontouchstart === null;
  };
  var supportsMouseEvents = function() {
    return isBrowser2 && window.onmousedown === null;
  };

  // node_modules/framer-motion/dist/es/events/use-pointer-event.mjs
  var mouseEventNames = {
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointercancel: "mousecancel",
    pointerover: "mouseover",
    pointerout: "mouseout",
    pointerenter: "mouseenter",
    pointerleave: "mouseleave"
  };
  var touchEventNames = {
    pointerdown: "touchstart",
    pointermove: "touchmove",
    pointerup: "touchend",
    pointercancel: "touchcancel"
  };
  function getPointerEventName(name15) {
    if (supportsPointerEvents()) {
      return name15;
    } else if (supportsTouchEvents()) {
      return touchEventNames[name15];
    } else if (supportsMouseEvents()) {
      return mouseEventNames[name15];
    }
    return name15;
  }
  function addPointerEvent(target6, eventName, handler2, options3) {
    return addDomEvent(target6, getPointerEventName(eventName), wrapHandler(handler2, eventName === "pointerdown"), options3);
  }
  function usePointerEvent(ref, eventName, handler2, options3) {
    return useDomEvent(ref, getPointerEventName(eventName), handler2 && wrapHandler(handler2, eventName === "pointerdown"), options3);
  }

  // node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs
  function createLock(name15) {
    var lock = null;
    return function() {
      var openLock = function() {
        lock = null;
      };
      if (lock === null) {
        lock = name15;
        return openLock;
      }
      return false;
    };
  }
  var globalHorizontalLock = createLock("dragHorizontal");
  var globalVerticalLock = createLock("dragVertical");
  function getGlobalLock(drag3) {
    var lock = false;
    if (drag3 === "y") {
      lock = globalVerticalLock();
    } else if (drag3 === "x") {
      lock = globalHorizontalLock();
    } else {
      var openHorizontal_1 = globalHorizontalLock();
      var openVertical_1 = globalVerticalLock();
      if (openHorizontal_1 && openVertical_1) {
        lock = function() {
          openHorizontal_1();
          openVertical_1();
        };
      } else {
        if (openHorizontal_1)
          openHorizontal_1();
        if (openVertical_1)
          openVertical_1();
      }
    }
    return lock;
  }
  function isDragActive() {
    var openGestureLock = getGlobalLock(true);
    if (!openGestureLock)
      return true;
    openGestureLock();
    return false;
  }

  // node_modules/framer-motion/dist/es/gestures/use-hover-gesture.mjs
  function createHoverEvent(visualElement2, isActive, callback2) {
    return function(event, info2) {
      var _a2;
      if (!isMouseEvent(event) || isDragActive())
        return;
      (_a2 = visualElement2.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(AnimationType.Hover, isActive);
      callback2 === null || callback2 === void 0 ? void 0 : callback2(event, info2);
    };
  }
  function useHoverGesture(_a2) {
    var onHoverStart2 = _a2.onHoverStart, onHoverEnd2 = _a2.onHoverEnd, whileHover2 = _a2.whileHover, visualElement2 = _a2.visualElement;
    usePointerEvent(visualElement2, "pointerenter", onHoverStart2 || whileHover2 ? createHoverEvent(visualElement2, true, onHoverStart2) : void 0, { passive: !onHoverStart2 });
    usePointerEvent(visualElement2, "pointerleave", onHoverEnd2 || whileHover2 ? createHoverEvent(visualElement2, false, onHoverEnd2) : void 0, { passive: !onHoverEnd2 });
  }

  // node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
  var import_react29 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs
  var isNodeOrChild = function(parent2, child) {
    if (!child) {
      return false;
    } else if (parent2 === child) {
      return true;
    } else {
      return isNodeOrChild(parent2, child.parentElement);
    }
  };

  // node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs
  var import_react28 = __toESM(require_react(), 1);
  function useUnmountEffect(callback2) {
    return (0, import_react28.useEffect)(function() {
      return function() {
        return callback2();
      };
    }, []);
  }

  // node_modules/popmotion/dist/es/utils/clamp.mjs
  var clamp4 = (min8, max7, v2) => Math.min(Math.max(v2, min8), max7);

  // node_modules/popmotion/dist/es/animations/utils/find-spring.mjs
  var safeMin = 1e-3;
  var minDuration = 0.01;
  var maxDuration = 10;
  var minDamping = 0.05;
  var maxDamping = 1;
  function findSpring({ duration: duration2 = 800, bounce = 0.25, velocity = 0, mass = 1 }) {
    let envelope;
    let derivative;
    warning(duration2 <= maxDuration * 1e3, "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    dampingRatio = clamp4(minDamping, maxDamping, dampingRatio);
    duration2 = clamp4(minDuration, maxDuration, duration2 / 1e3);
    if (dampingRatio < 1) {
      envelope = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration2;
        const a4 = exponentialDecay - velocity;
        const b4 = calcAngularFreq(undampedFreq2, dampingRatio);
        const c3 = Math.exp(-delta);
        return safeMin - a4 / b4 * c3;
      };
      derivative = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration2;
        const d2 = delta * velocity + velocity;
        const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration2;
        const f2 = Math.exp(-delta);
        const g3 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d2 - e) * f2) / g3;
      };
    } else {
      envelope = (undampedFreq2) => {
        const a4 = Math.exp(-undampedFreq2 * duration2);
        const b4 = (undampedFreq2 - velocity) * duration2 + 1;
        return -safeMin + a4 * b4;
      };
      derivative = (undampedFreq2) => {
        const a4 = Math.exp(-undampedFreq2 * duration2);
        const b4 = (velocity - undampedFreq2) * (duration2 * duration2);
        return a4 * b4;
      };
    }
    const initialGuess = 5 / duration2;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration2 = duration2 * 1e3;
    if (isNaN(undampedFreq)) {
      return {
        stiffness: 100,
        damping: 10,
        duration: duration2
      };
    } else {
      const stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration: duration2
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for (let i7 = 1; i7 < rootIterations; i7++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // node_modules/popmotion/dist/es/animations/generators/spring.mjs
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options3, keys4) {
    return keys4.some((key) => options3[key] !== void 0);
  }
  function getSpringOptions(options3) {
    let springOptions = Object.assign({ velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false }, options3);
    if (!isSpringType(options3, physicsKeys) && isSpringType(options3, durationKeys)) {
      const derived = findSpring(options3);
      springOptions = Object.assign(Object.assign(Object.assign({}, springOptions), derived), { velocity: 0, mass: 1 });
      springOptions.isResolvedFromDuration = true;
    }
    return springOptions;
  }
  function spring(_a2) {
    var { from: from4 = 0, to: to2 = 1, restSpeed = 2, restDelta } = _a2, options3 = __rest(_a2, ["from", "to", "restSpeed", "restDelta"]);
    const state3 = { done: false, value: from4 };
    let { stiffness, damping, mass, velocity, duration: duration2, isResolvedFromDuration } = getSpringOptions(options3);
    let resolveSpring = zero2;
    let resolveVelocity = zero2;
    function createSpring() {
      const initialVelocity = velocity ? -(velocity / 1e3) : 0;
      const initialDelta = to2 - from4;
      const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
      const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1e3;
      if (restDelta === void 0) {
        restDelta = Math.min(Math.abs(to2 - from4) / 100, 0.4);
      }
      if (dampingRatio < 1) {
        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
        resolveSpring = (t) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
          return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));
        };
        resolveVelocity = (t) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
          return dampingRatio * undampedAngularFreq * envelope * (Math.sin(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq + initialDelta * Math.cos(angularFreq * t)) - envelope * (Math.cos(angularFreq * t) * (initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) - angularFreq * initialDelta * Math.sin(angularFreq * t));
        };
      } else if (dampingRatio === 1) {
        resolveSpring = (t) => to2 - Math.exp(-undampedAngularFreq * t) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t);
      } else {
        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
        resolveSpring = (t) => {
          const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);
          const freqForT = Math.min(dampedAngularFreq * t, 300);
          return to2 - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
        };
      }
    }
    createSpring();
    return {
      next: (t) => {
        const current = resolveSpring(t);
        if (!isResolvedFromDuration) {
          const currentVelocity = resolveVelocity(t) * 1e3;
          const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          const isBelowDisplacementThreshold = Math.abs(to2 - current) <= restDelta;
          state3.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state3.done = t >= duration2;
        }
        state3.value = state3.done ? to2 : current;
        return state3;
      },
      flipTarget: () => {
        velocity = -velocity;
        [from4, to2] = [to2, from4];
        createSpring();
      }
    };
  }
  spring.needsInterpolation = (a4, b4) => typeof a4 === "string" || typeof b4 === "string";
  var zero2 = (_t2) => 0;

  // node_modules/popmotion/dist/es/utils/progress.mjs
  var progress2 = (from4, to2, value12) => {
    const toFromDifference = to2 - from4;
    return toFromDifference === 0 ? 1 : (value12 - from4) / toFromDifference;
  };

  // node_modules/popmotion/dist/es/utils/mix.mjs
  var mix = (from4, to2, progress3) => -progress3 * from4 + progress3 * to2 + from4;

  // node_modules/popmotion/dist/es/utils/hsla-to-rgba.mjs
  function hueToRgb(p3, q3, t) {
    if (t < 0)
      t += 1;
    if (t > 1)
      t -= 1;
    if (t < 1 / 6)
      return p3 + (q3 - p3) * 6 * t;
    if (t < 1 / 2)
      return q3;
    if (t < 2 / 3)
      return p3 + (q3 - p3) * (2 / 3 - t) * 6;
    return p3;
  }
  function hslaToRgba({ hue, saturation, lightness: lightness2, alpha: alpha2 }) {
    hue /= 360;
    saturation /= 100;
    lightness2 /= 100;
    let red = 0;
    let green2 = 0;
    let blue = 0;
    if (!saturation) {
      red = green2 = blue = lightness2;
    } else {
      const q3 = lightness2 < 0.5 ? lightness2 * (1 + saturation) : lightness2 + saturation - lightness2 * saturation;
      const p3 = 2 * lightness2 - q3;
      red = hueToRgb(p3, q3, hue + 1 / 3);
      green2 = hueToRgb(p3, q3, hue);
      blue = hueToRgb(p3, q3, hue - 1 / 3);
    }
    return {
      red: Math.round(red * 255),
      green: Math.round(green2 * 255),
      blue: Math.round(blue * 255),
      alpha: alpha2
    };
  }

  // node_modules/popmotion/dist/es/utils/mix-color.mjs
  var mixLinearColor = (from4, to2, v2) => {
    const fromExpo = from4 * from4;
    const toExpo = to2 * to2;
    return Math.sqrt(Math.max(0, v2 * (toExpo - fromExpo) + fromExpo));
  };
  var colorTypes = [hex, rgba2, hsla2];
  var getColorType = (v2) => colorTypes.find((type) => type.test(v2));
  var notAnimatable = (color3) => `'${color3}' is not an animatable color. Use the equivalent color code instead.`;
  var mixColor = (from4, to2) => {
    let fromColorType = getColorType(from4);
    let toColorType = getColorType(to2);
    invariant(!!fromColorType, notAnimatable(from4));
    invariant(!!toColorType, notAnimatable(to2));
    let fromColor = fromColorType.parse(from4);
    let toColor = toColorType.parse(to2);
    if (fromColorType === hsla2) {
      fromColor = hslaToRgba(fromColor);
      fromColorType = rgba2;
    }
    if (toColorType === hsla2) {
      toColor = hslaToRgba(toColor);
      toColorType = rgba2;
    }
    const blended = Object.assign({}, fromColor);
    return (v2) => {
      for (const key in blended) {
        if (key !== "alpha") {
          blended[key] = mixLinearColor(fromColor[key], toColor[key], v2);
        }
      }
      blended.alpha = mix(fromColor.alpha, toColor.alpha, v2);
      return fromColorType.transform(blended);
    };
  };

  // node_modules/popmotion/dist/es/utils/inc.mjs
  var isNum = (v2) => typeof v2 === "number";

  // node_modules/popmotion/dist/es/utils/pipe.mjs
  var combineFunctions = (a4, b4) => (v2) => b4(a4(v2));
  var pipe = (...transformers) => transformers.reduce(combineFunctions);

  // node_modules/popmotion/dist/es/utils/mix-complex.mjs
  function getMixer(origin3, target6) {
    if (isNum(origin3)) {
      return (v2) => mix(origin3, target6, v2);
    } else if (color2.test(origin3)) {
      return mixColor(origin3, target6);
    } else {
      return mixComplex(origin3, target6);
    }
  }
  var mixArray = (from4, to2) => {
    const output2 = [...from4];
    const numValues = output2.length;
    const blendValue = from4.map((fromThis, i7) => getMixer(fromThis, to2[i7]));
    return (v2) => {
      for (let i7 = 0; i7 < numValues; i7++) {
        output2[i7] = blendValue[i7](v2);
      }
      return output2;
    };
  };
  var mixObject = (origin3, target6) => {
    const output2 = Object.assign(Object.assign({}, origin3), target6);
    const blendValue = {};
    for (const key in output2) {
      if (origin3[key] !== void 0 && target6[key] !== void 0) {
        blendValue[key] = getMixer(origin3[key], target6[key]);
      }
    }
    return (v2) => {
      for (const key in blendValue) {
        output2[key] = blendValue[key](v2);
      }
      return output2;
    };
  };
  function analyse2(value12) {
    const parsed = complex.parse(value12);
    const numValues = parsed.length;
    let numNumbers = 0;
    let numRGB = 0;
    let numHSL = 0;
    for (let i7 = 0; i7 < numValues; i7++) {
      if (numNumbers || typeof parsed[i7] === "number") {
        numNumbers++;
      } else {
        if (parsed[i7].hue !== void 0) {
          numHSL++;
        } else {
          numRGB++;
        }
      }
    }
    return { parsed, numNumbers, numRGB, numHSL };
  }
  var mixComplex = (origin3, target6) => {
    const template2 = complex.createTransformer(target6);
    const originStats = analyse2(origin3);
    const targetStats = analyse2(target6);
    const canInterpolate = originStats.numHSL === targetStats.numHSL && originStats.numRGB === targetStats.numRGB && originStats.numNumbers >= targetStats.numNumbers;
    if (canInterpolate) {
      return pipe(mixArray(originStats.parsed, targetStats.parsed), template2);
    } else {
      warning(true, `Complex values '${origin3}' and '${target6}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
      return (p3) => `${p3 > 0 ? target6 : origin3}`;
    }
  };

  // node_modules/popmotion/dist/es/utils/interpolate.mjs
  var mixNumber = (from4, to2) => (p3) => mix(from4, to2, p3);
  function detectMixerFactory(v2) {
    if (typeof v2 === "number") {
      return mixNumber;
    } else if (typeof v2 === "string") {
      if (color2.test(v2)) {
        return mixColor;
      } else {
        return mixComplex;
      }
    } else if (Array.isArray(v2)) {
      return mixArray;
    } else if (typeof v2 === "object") {
      return mixObject;
    }
  }
  function createMixers(output2, ease, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || detectMixerFactory(output2[0]);
    const numMixers = output2.length - 1;
    for (let i7 = 0; i7 < numMixers; i7++) {
      let mixer = mixerFactory(output2[i7], output2[i7 + 1]);
      if (ease) {
        const easingFunction = Array.isArray(ease) ? ease[i7] : ease;
        mixer = pipe(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function fastInterpolate([from4, to2], [mixer]) {
    return (v2) => mixer(progress2(from4, to2, v2));
  }
  function slowInterpolate(input6, mixers) {
    const inputLength = input6.length;
    const lastInputIndex = inputLength - 1;
    return (v2) => {
      let mixerIndex = 0;
      let foundMixerIndex = false;
      if (v2 <= input6[0]) {
        foundMixerIndex = true;
      } else if (v2 >= input6[lastInputIndex]) {
        mixerIndex = lastInputIndex - 1;
        foundMixerIndex = true;
      }
      if (!foundMixerIndex) {
        let i7 = 1;
        for (; i7 < inputLength; i7++) {
          if (input6[i7] > v2 || i7 === lastInputIndex) {
            break;
          }
        }
        mixerIndex = i7 - 1;
      }
      const progressInRange = progress2(input6[mixerIndex], input6[mixerIndex + 1], v2);
      return mixers[mixerIndex](progressInRange);
    };
  }
  function interpolate(input6, output2, { clamp: isClamp = true, ease, mixer } = {}) {
    const inputLength = input6.length;
    invariant(inputLength === output2.length, "Both input and output ranges must be the same length");
    invariant(!ease || !Array.isArray(ease) || ease.length === inputLength - 1, "Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values.");
    if (input6[0] > input6[inputLength - 1]) {
      input6 = [].concat(input6);
      output2 = [].concat(output2);
      input6.reverse();
      output2.reverse();
    }
    const mixers = createMixers(output2, ease, mixer);
    const interpolator = inputLength === 2 ? fastInterpolate(input6, mixers) : slowInterpolate(input6, mixers);
    return isClamp ? (v2) => interpolator(clamp4(input6[0], input6[inputLength - 1], v2)) : interpolator;
  }

  // node_modules/popmotion/dist/es/easing/utils.mjs
  var reverseEasing = (easing) => (p3) => 1 - easing(1 - p3);
  var mirrorEasing = (easing) => (p3) => p3 <= 0.5 ? easing(2 * p3) / 2 : (2 - easing(2 * (1 - p3))) / 2;
  var createExpoIn = (power) => (p3) => Math.pow(p3, power);
  var createBackIn = (power) => (p3) => p3 * p3 * ((power + 1) * p3 - power);
  var createAnticipate = (power) => {
    const backEasing = createBackIn(power);
    return (p3) => (p3 *= 2) < 1 ? 0.5 * backEasing(p3) : 0.5 * (2 - Math.pow(2, -10 * (p3 - 1)));
  };

  // node_modules/popmotion/dist/es/easing/index.mjs
  var DEFAULT_OVERSHOOT_STRENGTH = 1.525;
  var BOUNCE_FIRST_THRESHOLD = 4 / 11;
  var BOUNCE_SECOND_THRESHOLD = 8 / 11;
  var BOUNCE_THIRD_THRESHOLD = 9 / 10;
  var linear = (p3) => p3;
  var easeIn = createExpoIn(2);
  var easeOut = reverseEasing(easeIn);
  var easeInOut = mirrorEasing(easeIn);
  var circIn = (p3) => 1 - Math.sin(Math.acos(p3));
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circOut);
  var backIn = createBackIn(DEFAULT_OVERSHOOT_STRENGTH);
  var backOut = reverseEasing(backIn);
  var backInOut = mirrorEasing(backIn);
  var anticipate = createAnticipate(DEFAULT_OVERSHOOT_STRENGTH);
  var ca = 4356 / 361;
  var cb = 35442 / 1805;
  var cc = 16061 / 1805;
  var bounceOut = (p3) => {
    if (p3 === 1 || p3 === 0)
      return p3;
    const p22 = p3 * p3;
    return p3 < BOUNCE_FIRST_THRESHOLD ? 7.5625 * p22 : p3 < BOUNCE_SECOND_THRESHOLD ? 9.075 * p22 - 9.9 * p3 + 3.4 : p3 < BOUNCE_THIRD_THRESHOLD ? ca * p22 - cb * p3 + cc : 10.8 * p3 * p3 - 20.52 * p3 + 10.72;
  };
  var bounceIn = reverseEasing(bounceOut);
  var bounceInOut = (p3) => p3 < 0.5 ? 0.5 * (1 - bounceOut(1 - p3 * 2)) : 0.5 * bounceOut(p3 * 2 - 1) + 0.5;

  // node_modules/popmotion/dist/es/animations/generators/keyframes.mjs
  function defaultEasing(values3, easing) {
    return values3.map(() => easing || easeInOut).splice(0, values3.length - 1);
  }
  function defaultOffset(values3) {
    const numValues = values3.length;
    return values3.map((_value, i7) => i7 !== 0 ? i7 / (numValues - 1) : 0);
  }
  function convertOffsetToTimes(offset2, duration2) {
    return offset2.map((o2) => o2 * duration2);
  }
  function keyframes4({ from: from4 = 0, to: to2 = 1, ease, offset: offset2, duration: duration2 = 300 }) {
    const state3 = { done: false, value: from4 };
    const values3 = Array.isArray(to2) ? to2 : [from4, to2];
    const times = convertOffsetToTimes(offset2 && offset2.length === values3.length ? offset2 : defaultOffset(values3), duration2);
    function createInterpolator() {
      return interpolate(times, values3, {
        ease: Array.isArray(ease) ? ease : defaultEasing(values3, ease)
      });
    }
    let interpolator = createInterpolator();
    return {
      next: (t) => {
        state3.value = interpolator(t);
        state3.done = t >= duration2;
        return state3;
      },
      flipTarget: () => {
        values3.reverse();
        interpolator = createInterpolator();
      }
    };
  }

  // node_modules/popmotion/dist/es/animations/generators/decay.mjs
  function decay({ velocity = 0, from: from4 = 0, power = 0.8, timeConstant = 350, restDelta = 0.5, modifyTarget }) {
    const state3 = { done: false, value: from4 };
    let amplitude = power * velocity;
    const ideal = from4 + amplitude;
    const target6 = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target6 !== ideal)
      amplitude = target6 - from4;
    return {
      next: (t) => {
        const delta = -amplitude * Math.exp(-t / timeConstant);
        state3.done = !(delta > restDelta || delta < -restDelta);
        state3.value = state3.done ? target6 : target6 + delta;
        return state3;
      },
      flipTarget: () => {
      }
    };
  }

  // node_modules/popmotion/dist/es/animations/utils/detect-animation-from-options.mjs
  var types = { keyframes: keyframes4, spring, decay };
  function detectAnimationFromOptions(config) {
    if (Array.isArray(config.to)) {
      return keyframes4;
    } else if (types[config.type]) {
      return types[config.type];
    }
    const keys4 = new Set(Object.keys(config));
    if (keys4.has("ease") || keys4.has("duration") && !keys4.has("dampingRatio")) {
      return keyframes4;
    } else if (keys4.has("dampingRatio") || keys4.has("stiffness") || keys4.has("mass") || keys4.has("damping") || keys4.has("restSpeed") || keys4.has("restDelta")) {
      return spring;
    }
    return keyframes4;
  }

  // node_modules/framesync/dist/es/on-next-frame.mjs
  var defaultTimestep = 1 / 60 * 1e3;
  var getCurrentTime = typeof performance !== "undefined" ? () => performance.now() : () => Date.now();
  var onNextFrame = typeof window !== "undefined" ? (callback2) => window.requestAnimationFrame(callback2) : (callback2) => setTimeout(() => callback2(getCurrentTime()), defaultTimestep);

  // node_modules/framesync/dist/es/create-render-step.mjs
  function createRenderStep(runNextFrame2) {
    let toRun = [];
    let toRunNextFrame = [];
    let numToRun = 0;
    let isProcessing2 = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    const step3 = {
      schedule: (callback2, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing2;
        const buffer = addToCurrentFrame ? toRun : toRunNextFrame;
        if (keepAlive)
          toKeepAlive.add(callback2);
        if (buffer.indexOf(callback2) === -1) {
          buffer.push(callback2);
          if (addToCurrentFrame && isProcessing2)
            numToRun = toRun.length;
        }
        return callback2;
      },
      cancel: (callback2) => {
        const index6 = toRunNextFrame.indexOf(callback2);
        if (index6 !== -1)
          toRunNextFrame.splice(index6, 1);
        toKeepAlive.delete(callback2);
      },
      process: (frameData) => {
        if (isProcessing2) {
          flushNextFrame = true;
          return;
        }
        isProcessing2 = true;
        [toRun, toRunNextFrame] = [toRunNextFrame, toRun];
        toRunNextFrame.length = 0;
        numToRun = toRun.length;
        if (numToRun) {
          for (let i7 = 0; i7 < numToRun; i7++) {
            const callback2 = toRun[i7];
            callback2(frameData);
            if (toKeepAlive.has(callback2)) {
              step3.schedule(callback2);
              runNextFrame2();
            }
          }
        }
        isProcessing2 = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step3.process(frameData);
        }
      }
    };
    return step3;
  }

  // node_modules/framesync/dist/es/index.mjs
  var maxElapsed = 40;
  var useDefaultElapsed = true;
  var runNextFrame = false;
  var isProcessing = false;
  var frame = {
    delta: 0,
    timestamp: 0
  };
  var stepsOrder = [
    "read",
    "update",
    "preRender",
    "render",
    "postRender"
  ];
  var steps = stepsOrder.reduce((acc, key) => {
    acc[key] = createRenderStep(() => runNextFrame = true);
    return acc;
  }, {});
  var sync = stepsOrder.reduce((acc, key) => {
    const step3 = steps[key];
    acc[key] = (process2, keepAlive = false, immediate = false) => {
      if (!runNextFrame)
        startLoop();
      return step3.schedule(process2, keepAlive, immediate);
    };
    return acc;
  }, {});
  var cancelSync = stepsOrder.reduce((acc, key) => {
    acc[key] = steps[key].cancel;
    return acc;
  }, {});
  var flushSync = stepsOrder.reduce((acc, key) => {
    acc[key] = () => steps[key].process(frame);
    return acc;
  }, {});
  var processStep = (stepId) => steps[stepId].process(frame);
  var processFrame = (timestamp) => {
    runNextFrame = false;
    frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);
    frame.timestamp = timestamp;
    isProcessing = true;
    stepsOrder.forEach(processStep);
    isProcessing = false;
    if (runNextFrame) {
      useDefaultElapsed = false;
      onNextFrame(processFrame);
    }
  };
  var startLoop = () => {
    runNextFrame = true;
    useDefaultElapsed = true;
    if (!isProcessing)
      onNextFrame(processFrame);
  };
  var getFrameData = () => frame;
  var es_default = sync;

  // node_modules/popmotion/dist/es/animations/utils/elapsed.mjs
  function loopElapsed(elapsed, duration2, delay2 = 0) {
    return elapsed - duration2 - delay2;
  }
  function reverseElapsed(elapsed, duration2, delay2 = 0, isForwardPlayback = true) {
    return isForwardPlayback ? loopElapsed(duration2 + -elapsed, duration2, delay2) : duration2 - (elapsed - duration2) + delay2;
  }
  function hasRepeatDelayElapsed(elapsed, duration2, delay2, isForwardPlayback) {
    return isForwardPlayback ? elapsed >= duration2 + delay2 : elapsed <= -delay2;
  }

  // node_modules/popmotion/dist/es/animations/index.mjs
  var framesync = (update) => {
    const passTimestamp = ({ delta }) => update(delta);
    return {
      start: () => es_default.update(passTimestamp, true),
      stop: () => cancelSync.update(passTimestamp)
    };
  };
  function animate(_a2) {
    var _b, _c;
    var { from: from4, autoplay: autoplay2 = true, driver = framesync, elapsed = 0, repeat: repeatMax = 0, repeatType = "loop", repeatDelay = 0, onPlay, onStop, onComplete, onRepeat, onUpdate } = _a2, options3 = __rest(_a2, ["from", "autoplay", "driver", "elapsed", "repeat", "repeatType", "repeatDelay", "onPlay", "onStop", "onComplete", "onRepeat", "onUpdate"]);
    let { to: to2 } = options3;
    let driverControls;
    let repeatCount = 0;
    let computedDuration = options3.duration;
    let latest;
    let isComplete = false;
    let isForwardPlayback = true;
    let interpolateFromNumber;
    const animator = detectAnimationFromOptions(options3);
    if ((_c = (_b = animator).needsInterpolation) === null || _c === void 0 ? void 0 : _c.call(_b, from4, to2)) {
      interpolateFromNumber = interpolate([0, 100], [from4, to2], {
        clamp: false
      });
      from4 = 0;
      to2 = 100;
    }
    const animation = animator(Object.assign(Object.assign({}, options3), { from: from4, to: to2 }));
    function repeat() {
      repeatCount++;
      if (repeatType === "reverse") {
        isForwardPlayback = repeatCount % 2 === 0;
        elapsed = reverseElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback);
      } else {
        elapsed = loopElapsed(elapsed, computedDuration, repeatDelay);
        if (repeatType === "mirror")
          animation.flipTarget();
      }
      isComplete = false;
      onRepeat && onRepeat();
    }
    function complete2() {
      driverControls.stop();
      onComplete && onComplete();
    }
    function update(delta) {
      if (!isForwardPlayback)
        delta = -delta;
      elapsed += delta;
      if (!isComplete) {
        const state3 = animation.next(Math.max(0, elapsed));
        latest = state3.value;
        if (interpolateFromNumber)
          latest = interpolateFromNumber(latest);
        isComplete = isForwardPlayback ? state3.done : elapsed <= 0;
      }
      onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(latest);
      if (isComplete) {
        if (repeatCount === 0)
          computedDuration !== null && computedDuration !== void 0 ? computedDuration : computedDuration = elapsed;
        if (repeatCount < repeatMax) {
          hasRepeatDelayElapsed(elapsed, computedDuration, repeatDelay, isForwardPlayback) && repeat();
        } else {
          complete2();
        }
      }
    }
    function play2() {
      onPlay === null || onPlay === void 0 ? void 0 : onPlay();
      driverControls = driver(update);
      driverControls.start();
    }
    autoplay2 && play2();
    return {
      stop: () => {
        onStop === null || onStop === void 0 ? void 0 : onStop();
        driverControls.stop();
      }
    };
  }

  // node_modules/popmotion/dist/es/utils/velocity-per-second.mjs
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // node_modules/popmotion/dist/es/animations/inertia.mjs
  function inertia({ from: from4 = 0, velocity = 0, min: min8, max: max7, power = 0.8, timeConstant = 750, bounceStiffness = 500, bounceDamping = 10, restDelta = 1, modifyTarget, driver, onUpdate, onComplete, onStop }) {
    let currentAnimation;
    function isOutOfBounds(v2) {
      return min8 !== void 0 && v2 < min8 || max7 !== void 0 && v2 > max7;
    }
    function boundaryNearest(v2) {
      if (min8 === void 0)
        return max7;
      if (max7 === void 0)
        return min8;
      return Math.abs(min8 - v2) < Math.abs(max7 - v2) ? min8 : max7;
    }
    function startAnimation2(options3) {
      currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop();
      currentAnimation = animate(Object.assign(Object.assign({}, options3), {
        driver,
        onUpdate: (v2) => {
          var _a2;
          onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(v2);
          (_a2 = options3.onUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(options3, v2);
        },
        onComplete,
        onStop
      }));
    }
    function startSpring(options3) {
      startAnimation2(Object.assign({ type: "spring", stiffness: bounceStiffness, damping: bounceDamping, restDelta }, options3));
    }
    if (isOutOfBounds(from4)) {
      startSpring({ from: from4, velocity, to: boundaryNearest(from4) });
    } else {
      let target6 = power * velocity + from4;
      if (typeof modifyTarget !== "undefined")
        target6 = modifyTarget(target6);
      const boundary = boundaryNearest(target6);
      const heading = boundary === min8 ? -1 : 1;
      let prev2;
      let current;
      const checkBoundary = (v2) => {
        prev2 = current;
        current = v2;
        velocity = velocityPerSecond(v2 - prev2, getFrameData().delta);
        if (heading === 1 && v2 > boundary || heading === -1 && v2 < boundary) {
          startSpring({ from: v2, to: boundary, velocity });
        }
      };
      startAnimation2({
        type: "decay",
        from: from4,
        velocity,
        timeConstant,
        power,
        restDelta,
        modifyTarget,
        onUpdate: isOutOfBounds(target6) ? checkBoundary : void 0
      });
    }
    return {
      stop: () => currentAnimation === null || currentAnimation === void 0 ? void 0 : currentAnimation.stop()
    };
  }

  // node_modules/popmotion/dist/es/utils/is-point.mjs
  var isPoint = (point) => point.hasOwnProperty("x") && point.hasOwnProperty("y");

  // node_modules/popmotion/dist/es/utils/is-point-3d.mjs
  var isPoint3D = (point) => isPoint(point) && point.hasOwnProperty("z");

  // node_modules/popmotion/dist/es/utils/distance.mjs
  var distance1D = (a4, b4) => Math.abs(a4 - b4);
  function distance(a4, b4) {
    if (isNum(a4) && isNum(b4)) {
      return distance1D(a4, b4);
    } else if (isPoint(a4) && isPoint(b4)) {
      const xDelta = distance1D(a4.x, b4.x);
      const yDelta = distance1D(a4.y, b4.y);
      const zDelta = isPoint3D(a4) && isPoint3D(b4) ? distance1D(a4.z, b4.z) : 0;
      return Math.sqrt(Math.pow(xDelta, 2) + Math.pow(yDelta, 2) + Math.pow(zDelta, 2));
    }
  }

  // node_modules/popmotion/dist/es/easing/cubic-bezier.mjs
  var a2 = (a1, a22) => 1 - 3 * a22 + 3 * a1;
  var b2 = (a1, a22) => 3 * a22 - 6 * a1;
  var c = (a1) => 3 * a1;
  var calcBezier = (t, a1, a22) => ((a2(a1, a22) * t + b2(a1, a22)) * t + c(a1)) * t;
  var getSlope = (t, a1, a22) => 3 * a2(a1, a22) * t * t + 2 * b2(a1, a22) * t + c(a1);
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 10;
  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    let currentX;
    let currentT;
    let i7 = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i7 < subdivisionMaxIterations);
    return currentT;
  }
  var newtonIterations = 8;
  var newtonMinSlope = 1e-3;
  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (let i7 = 0; i7 < newtonIterations; ++i7) {
      const currentSlope = getSlope(aGuessT, mX1, mX2);
      if (currentSlope === 0) {
        return aGuessT;
      }
      const currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  var kSplineTableSize = 11;
  var kSampleStepSize = 1 / (kSplineTableSize - 1);
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return linear;
    const sampleValues = new Float32Array(kSplineTableSize);
    for (let i7 = 0; i7 < kSplineTableSize; ++i7) {
      sampleValues[i7] = calcBezier(i7 * kSampleStepSize, mX1, mX2);
    }
    function getTForX(aX) {
      let intervalStart = 0;
      let currentSample = 1;
      const lastSample = kSplineTableSize - 1;
      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }
      --currentSample;
      const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      const guessForT = intervalStart + dist * kSampleStepSize;
      const initialSlope = getSlope(guessForT, mX1, mX2);
      if (initialSlope >= newtonMinSlope) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }
    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);
  }

  // node_modules/framer-motion/dist/es/gestures/use-tap-gesture.mjs
  function useTapGesture(_a2) {
    var onTap2 = _a2.onTap, onTapStart2 = _a2.onTapStart, onTapCancel2 = _a2.onTapCancel, whileTap2 = _a2.whileTap, visualElement2 = _a2.visualElement;
    var hasPressListeners = onTap2 || onTapStart2 || onTapCancel2 || whileTap2;
    var isPressing = (0, import_react29.useRef)(false);
    var cancelPointerEndListeners = (0, import_react29.useRef)(null);
    var eventOptions = {
      passive: !(onTapStart2 || onTap2 || onTapCancel2 || onPointerDown)
    };
    function removePointerEndListener() {
      var _a3;
      (_a3 = cancelPointerEndListeners.current) === null || _a3 === void 0 ? void 0 : _a3.call(cancelPointerEndListeners);
      cancelPointerEndListeners.current = null;
    }
    function checkPointerEnd() {
      var _a3;
      removePointerEndListener();
      isPressing.current = false;
      (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Tap, false);
      return !isDragActive();
    }
    function onPointerUp(event, info2) {
      if (!checkPointerEnd())
        return;
      !isNodeOrChild(visualElement2.getInstance(), event.target) ? onTapCancel2 === null || onTapCancel2 === void 0 ? void 0 : onTapCancel2(event, info2) : onTap2 === null || onTap2 === void 0 ? void 0 : onTap2(event, info2);
    }
    function onPointerCancel(event, info2) {
      if (!checkPointerEnd())
        return;
      onTapCancel2 === null || onTapCancel2 === void 0 ? void 0 : onTapCancel2(event, info2);
    }
    function onPointerDown(event, info2) {
      var _a3;
      removePointerEndListener();
      if (isPressing.current)
        return;
      isPressing.current = true;
      cancelPointerEndListeners.current = pipe(addPointerEvent(window, "pointerup", onPointerUp, eventOptions), addPointerEvent(window, "pointercancel", onPointerCancel, eventOptions));
      (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Tap, true);
      onTapStart2 === null || onTapStart2 === void 0 ? void 0 : onTapStart2(event, info2);
    }
    usePointerEvent(visualElement2, "pointerdown", hasPressListeners ? onPointerDown : void 0, eventOptions);
    useUnmountEffect(removePointerEndListener);
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
  var import_react30 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/warn-once.mjs
  var warned = /* @__PURE__ */ new Set();
  function warnOnce(condition, message2, element3) {
    if (condition || warned.has(message2))
      return;
    console.warn(message2);
    if (element3)
      console.warn(element3);
    warned.add(message2);
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  var observerCallbacks = /* @__PURE__ */ new WeakMap();
  var observers = /* @__PURE__ */ new WeakMap();
  var fireObserverCallback = function(entry) {
    var _a2;
    (_a2 = observerCallbacks.get(entry.target)) === null || _a2 === void 0 ? void 0 : _a2(entry);
  };
  var fireAllObserverCallbacks = function(entries) {
    entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver(_a2) {
    var root2 = _a2.root, options3 = __rest(_a2, ["root"]);
    var lookupRoot = root2 || document;
    if (!observers.has(lookupRoot)) {
      observers.set(lookupRoot, {});
    }
    var rootObservers = observers.get(lookupRoot);
    var key = JSON.stringify(options3);
    if (!rootObservers[key]) {
      rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, __assign({ root: root2 }, options3));
    }
    return rootObservers[key];
  }
  function observeIntersection(element3, options3, callback2) {
    var rootInteresectionObserver = initIntersectionObserver(options3);
    observerCallbacks.set(element3, callback2);
    rootInteresectionObserver.observe(element3);
    return function() {
      observerCallbacks.delete(element3);
      rootInteresectionObserver.unobserve(element3);
    };
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs
  function useViewport(_a2) {
    var visualElement2 = _a2.visualElement, whileInView = _a2.whileInView, onViewportEnter = _a2.onViewportEnter, onViewportLeave = _a2.onViewportLeave, _b = _a2.viewport, viewport = _b === void 0 ? {} : _b;
    var state3 = (0, import_react30.useRef)({
      hasEnteredView: false,
      isInView: false
    });
    var shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);
    if (viewport.once && state3.current.hasEnteredView)
      shouldObserve = false;
    var useObserver = typeof IntersectionObserver === "undefined" ? useMissingIntersectionObserver : useIntersectionObserver;
    useObserver(shouldObserve, state3.current, visualElement2, viewport);
  }
  var thresholdNames = {
    some: 0,
    all: 1
  };
  function useIntersectionObserver(shouldObserve, state3, visualElement2, _a2) {
    var root2 = _a2.root, rootMargin = _a2.margin, _b = _a2.amount, amount = _b === void 0 ? "some" : _b, once = _a2.once;
    (0, import_react30.useEffect)(function() {
      if (!shouldObserve)
        return;
      var options3 = {
        root: root2 === null || root2 === void 0 ? void 0 : root2.current,
        rootMargin,
        threshold: typeof amount === "number" ? amount : thresholdNames[amount]
      };
      var intersectionCallback = function(entry) {
        var _a3;
        var isIntersecting = entry.isIntersecting;
        if (state3.isInView === isIntersecting)
          return;
        state3.isInView = isIntersecting;
        if (once && !isIntersecting && state3.hasEnteredView) {
          return;
        } else if (isIntersecting) {
          state3.hasEnteredView = true;
        }
        (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.InView, isIntersecting);
        var props = visualElement2.getProps();
        var callback2 = isIntersecting ? props.onViewportEnter : props.onViewportLeave;
        callback2 === null || callback2 === void 0 ? void 0 : callback2(entry);
      };
      return observeIntersection(visualElement2.getInstance(), options3, intersectionCallback);
    }, [shouldObserve, root2, rootMargin, amount]);
  }
  function useMissingIntersectionObserver(shouldObserve, state3, visualElement2, _a2) {
    var _b = _a2.fallback, fallback = _b === void 0 ? true : _b;
    (0, import_react30.useEffect)(function() {
      if (!shouldObserve || !fallback)
        return;
      if (env !== "production") {
        warnOnce(false, "IntersectionObserver not available on this device. whileInView animations will trigger on mount.");
      }
      requestAnimationFrame(function() {
        var _a3;
        state3.hasEnteredView = true;
        var onViewportEnter = visualElement2.getProps().onViewportEnter;
        onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);
        (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.InView, true);
      });
    }, [shouldObserve]);
  }

  // node_modules/framer-motion/dist/es/motion/utils/make-renderless-component.mjs
  var makeRenderlessComponent = function(hook) {
    return function(props) {
      hook(props);
      return null;
    };
  };

  // node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  var gestureAnimations = {
    inView: makeRenderlessComponent(useViewport),
    tap: makeRenderlessComponent(useTapGesture),
    focus: makeRenderlessComponent(useFocusGesture),
    hover: makeRenderlessComponent(useHoverGesture)
  };

  // node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var import_react32 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  var import_react31 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-id.mjs
  var counter = 0;
  var incrementId = function() {
    return counter++;
  };
  var useId2 = function() {
    return useConstant(incrementId);
  };

  // node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  function usePresence() {
    var context = (0, import_react31.useContext)(PresenceContext);
    if (context === null)
      return [true, null];
    var isPresent = context.isPresent, onExitComplete = context.onExitComplete, register = context.register;
    var id5 = useId2();
    (0, import_react31.useEffect)(function() {
      return register(id5);
    }, []);
    var safeToRemove = function() {
      return onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id5);
    };
    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
  }

  // node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  function shallowCompare(next2, prev2) {
    if (!Array.isArray(prev2))
      return false;
    var prevLength = prev2.length;
    if (prevLength !== next2.length)
      return false;
    for (var i7 = 0; i7 < prevLength; i7++) {
      if (prev2[i7] !== next2[i7])
        return false;
    }
    return true;
  }

  // node_modules/framer-motion/dist/es/utils/time-conversion.mjs
  var secondsToMilliseconds = function(seconds) {
    return seconds * 1e3;
  };

  // node_modules/framer-motion/dist/es/animation/utils/easing.mjs
  var easingLookup = {
    linear,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate,
    bounceIn,
    bounceInOut,
    bounceOut
  };
  var easingDefinitionToFunction = function(definition) {
    if (Array.isArray(definition)) {
      invariant(definition.length === 4, "Cubic bezier arrays must contain four numerical values.");
      var _a2 = __read(definition, 4), x1 = _a2[0], y1 = _a2[1], x22 = _a2[2], y2 = _a2[3];
      return cubicBezier(x1, y1, x22, y2);
    } else if (typeof definition === "string") {
      invariant(easingLookup[definition] !== void 0, "Invalid easing type '".concat(definition, "'"));
      return easingLookup[definition];
    }
    return definition;
  };
  var isEasingArray = function(ease) {
    return Array.isArray(ease) && typeof ease[0] !== "number";
  };

  // node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  var isAnimatable = function(key, value12) {
    if (key === "zIndex")
      return false;
    if (typeof value12 === "number" || Array.isArray(value12))
      return true;
    if (typeof value12 === "string" && complex.test(value12) && !value12.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  var underDampedSpring = function() {
    return {
      type: "spring",
      stiffness: 500,
      damping: 25,
      restSpeed: 10
    };
  };
  var criticallyDampedSpring = function(to2) {
    return {
      type: "spring",
      stiffness: 550,
      damping: to2 === 0 ? 2 * Math.sqrt(550) : 30,
      restSpeed: 10
    };
  };
  var linearTween = function() {
    return {
      type: "keyframes",
      ease: "linear",
      duration: 0.3
    };
  };
  var keyframes5 = function(values3) {
    return {
      type: "keyframes",
      duration: 0.8,
      values: values3
    };
  };
  var defaultTransitions = {
    x: underDampedSpring,
    y: underDampedSpring,
    z: underDampedSpring,
    rotate: underDampedSpring,
    rotateX: underDampedSpring,
    rotateY: underDampedSpring,
    rotateZ: underDampedSpring,
    scaleX: criticallyDampedSpring,
    scaleY: criticallyDampedSpring,
    scale: criticallyDampedSpring,
    opacity: linearTween,
    backgroundColor: linearTween,
    color: linearTween,
    default: criticallyDampedSpring
  };
  var getDefaultTransition = function(valueKey, to2) {
    var transitionFactory;
    if (isKeyframesTarget(to2)) {
      transitionFactory = keyframes5;
    } else {
      transitionFactory = defaultTransitions[valueKey] || defaultTransitions.default;
    }
    return __assign({ to: to2 }, transitionFactory(to2));
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  var defaultValueTypes = __assign(__assign({}, numberValueTypes), {
    color: color2,
    backgroundColor: color2,
    outlineColor: color2,
    fill: color2,
    stroke: color2,
    borderColor: color2,
    borderTopColor: color2,
    borderRightColor: color2,
    borderBottomColor: color2,
    borderLeftColor: color2,
    filter: filter4,
    WebkitFilter: filter4
  });
  var getDefaultValueType = function(key) {
    return defaultValueTypes[key];
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  function getAnimatableNone2(key, value12) {
    var _a2;
    var defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter4)
      defaultValueType = complex;
    return (_a2 = defaultValueType.getAnimatableNone) === null || _a2 === void 0 ? void 0 : _a2.call(defaultValueType, value12);
  }

  // node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  var instantAnimationState = {
    current: false
  };

  // node_modules/framer-motion/dist/es/animation/utils/transitions.mjs
  function isTransitionDefined(_a2) {
    _a2.when;
    _a2.delay;
    _a2.delayChildren;
    _a2.staggerChildren;
    _a2.staggerDirection;
    _a2.repeat;
    _a2.repeatType;
    _a2.repeatDelay;
    _a2.from;
    var transition3 = __rest(_a2, ["when", "delay", "delayChildren", "staggerChildren", "staggerDirection", "repeat", "repeatType", "repeatDelay", "from"]);
    return !!Object.keys(transition3).length;
  }
  var legacyRepeatWarning = false;
  function convertTransitionToAnimationOptions(_a2) {
    var ease = _a2.ease, times = _a2.times, yoyo = _a2.yoyo, flip2 = _a2.flip, loop2 = _a2.loop, transition3 = __rest(_a2, ["ease", "times", "yoyo", "flip", "loop"]);
    var options3 = __assign({}, transition3);
    if (times)
      options3["offset"] = times;
    if (transition3.duration)
      options3["duration"] = secondsToMilliseconds(transition3.duration);
    if (transition3.repeatDelay)
      options3.repeatDelay = secondsToMilliseconds(transition3.repeatDelay);
    if (ease) {
      options3["ease"] = isEasingArray(ease) ? ease.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease);
    }
    if (transition3.type === "tween")
      options3.type = "keyframes";
    if (yoyo || loop2 || flip2) {
      warning(!legacyRepeatWarning, "yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options.");
      legacyRepeatWarning = true;
      if (yoyo) {
        options3.repeatType = "reverse";
      } else if (loop2) {
        options3.repeatType = "loop";
      } else if (flip2) {
        options3.repeatType = "mirror";
      }
      options3.repeat = loop2 || yoyo || flip2 || transition3.repeat;
    }
    if (transition3.type !== "spring")
      options3.type = "keyframes";
    return options3;
  }
  function getDelayFromTransition(transition3, key) {
    var _a2, _b;
    var valueTransition = getValueTransition(transition3, key) || {};
    return (_b = (_a2 = valueTransition.delay) !== null && _a2 !== void 0 ? _a2 : transition3.delay) !== null && _b !== void 0 ? _b : 0;
  }
  function hydrateKeyframes(options3) {
    if (Array.isArray(options3.to) && options3.to[0] === null) {
      options3.to = __spreadArray([], __read(options3.to), false);
      options3.to[0] = options3.from;
    }
    return options3;
  }
  function getPopmotionAnimationOptions(transition3, options3, key) {
    var _a2;
    if (Array.isArray(options3.to)) {
      (_a2 = transition3.duration) !== null && _a2 !== void 0 ? _a2 : transition3.duration = 0.8;
    }
    hydrateKeyframes(options3);
    if (!isTransitionDefined(transition3)) {
      transition3 = __assign(__assign({}, transition3), getDefaultTransition(key, options3.to));
    }
    return __assign(__assign({}, options3), convertTransitionToAnimationOptions(transition3));
  }
  function getAnimation(key, value12, target6, transition3, onComplete) {
    var _a2;
    var valueTransition = getValueTransition(transition3, key);
    var origin3 = (_a2 = valueTransition.from) !== null && _a2 !== void 0 ? _a2 : value12.get();
    var isTargetAnimatable = isAnimatable(key, target6);
    if (origin3 === "none" && isTargetAnimatable && typeof target6 === "string") {
      origin3 = getAnimatableNone2(key, target6);
    } else if (isZero(origin3) && typeof target6 === "string") {
      origin3 = getZeroUnit(target6);
    } else if (!Array.isArray(target6) && isZero(target6) && typeof origin3 === "string") {
      target6 = getZeroUnit(origin3);
    }
    var isOriginAnimatable = isAnimatable(key, origin3);
    warning(isOriginAnimatable === isTargetAnimatable, "You are trying to animate ".concat(key, ' from "').concat(origin3, '" to "').concat(target6, '". ').concat(origin3, " is not an animatable value - to enable this animation set ").concat(origin3, " to a value animatable to ").concat(target6, " via the `style` property."));
    function start2() {
      var options3 = {
        from: origin3,
        to: target6,
        velocity: value12.getVelocity(),
        onComplete,
        onUpdate: function(v2) {
          return value12.set(v2);
        }
      };
      return valueTransition.type === "inertia" || valueTransition.type === "decay" ? inertia(__assign(__assign({}, options3), valueTransition)) : animate(__assign(__assign({}, getPopmotionAnimationOptions(valueTransition, options3, key)), { onUpdate: function(v2) {
        var _a3;
        options3.onUpdate(v2);
        (_a3 = valueTransition.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition, v2);
      }, onComplete: function() {
        var _a3;
        options3.onComplete();
        (_a3 = valueTransition.onComplete) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition);
      } }));
    }
    function set3() {
      var _a3, _b;
      var finalTarget = resolveFinalValueInKeyframes(target6);
      value12.set(finalTarget);
      onComplete();
      (_a3 = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onUpdate) === null || _a3 === void 0 ? void 0 : _a3.call(valueTransition, finalTarget);
      (_b = valueTransition === null || valueTransition === void 0 ? void 0 : valueTransition.onComplete) === null || _b === void 0 ? void 0 : _b.call(valueTransition);
      return { stop: function() {
      } };
    }
    return !isOriginAnimatable || !isTargetAnimatable || valueTransition.type === false ? set3 : start2;
  }
  function isZero(value12) {
    return value12 === 0 || typeof value12 === "string" && parseFloat(value12) === 0 && value12.indexOf(" ") === -1;
  }
  function getZeroUnit(potentialUnitType) {
    return typeof potentialUnitType === "number" ? 0 : getAnimatableNone2("", potentialUnitType);
  }
  function getValueTransition(transition3, key) {
    return transition3[key] || transition3["default"] || transition3;
  }
  function startAnimation(key, value12, target6, transition3) {
    if (transition3 === void 0) {
      transition3 = {};
    }
    if (instantAnimationState.current) {
      transition3 = { type: false };
    }
    return value12.start(function(onComplete) {
      var delayTimer;
      var controls2;
      var animation = getAnimation(key, value12, target6, transition3, onComplete);
      var delay2 = getDelayFromTransition(transition3, key);
      var start2 = function() {
        return controls2 = animation();
      };
      if (delay2) {
        delayTimer = window.setTimeout(start2, secondsToMilliseconds(delay2));
      } else {
        start2();
      }
      return function() {
        clearTimeout(delayTimer);
        controls2 === null || controls2 === void 0 ? void 0 : controls2.stop();
      };
    });
  }

  // node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  var isNumericalString = function(v2) {
    return /^\-?\d*\.?\d+$/.test(v2);
  };

  // node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  var isZeroValueString = function(v2) {
    return /^0[^.\s]+$/.test(v2);
  };

  // node_modules/framer-motion/dist/es/utils/array.mjs
  function addUniqueItem(arr, item) {
    arr.indexOf(item) === -1 && arr.push(item);
  }
  function removeItem(arr, item) {
    var index6 = arr.indexOf(item);
    index6 > -1 && arr.splice(index6, 1);
  }

  // node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  var SubscriptionManager = function() {
    function SubscriptionManager2() {
      this.subscriptions = [];
    }
    SubscriptionManager2.prototype.add = function(handler2) {
      var _this = this;
      addUniqueItem(this.subscriptions, handler2);
      return function() {
        return removeItem(_this.subscriptions, handler2);
      };
    };
    SubscriptionManager2.prototype.notify = function(a4, b4, c3) {
      var numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a4, b4, c3);
      } else {
        for (var i7 = 0; i7 < numSubscriptions; i7++) {
          var handler2 = this.subscriptions[i7];
          handler2 && handler2(a4, b4, c3);
        }
      }
    };
    SubscriptionManager2.prototype.getSize = function() {
      return this.subscriptions.length;
    };
    SubscriptionManager2.prototype.clear = function() {
      this.subscriptions.length = 0;
    };
    return SubscriptionManager2;
  }();

  // node_modules/framer-motion/dist/es/value/index.mjs
  var isFloat = function(value12) {
    return !isNaN(parseFloat(value12));
  };
  var MotionValue = function() {
    function MotionValue2(init5) {
      var _this = this;
      this.version = "6.4.3";
      this.timeDelta = 0;
      this.lastUpdated = 0;
      this.updateSubscribers = new SubscriptionManager();
      this.velocityUpdateSubscribers = new SubscriptionManager();
      this.renderSubscribers = new SubscriptionManager();
      this.canTrackVelocity = false;
      this.updateAndNotify = function(v2, render) {
        if (render === void 0) {
          render = true;
        }
        _this.prev = _this.current;
        _this.current = v2;
        var _a2 = getFrameData(), delta = _a2.delta, timestamp = _a2.timestamp;
        if (_this.lastUpdated !== timestamp) {
          _this.timeDelta = delta;
          _this.lastUpdated = timestamp;
          es_default.postRender(_this.scheduleVelocityCheck);
        }
        if (_this.prev !== _this.current) {
          _this.updateSubscribers.notify(_this.current);
        }
        if (_this.velocityUpdateSubscribers.getSize()) {
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
        if (render) {
          _this.renderSubscribers.notify(_this.current);
        }
      };
      this.scheduleVelocityCheck = function() {
        return es_default.postRender(_this.velocityCheck);
      };
      this.velocityCheck = function(_a2) {
        var timestamp = _a2.timestamp;
        if (timestamp !== _this.lastUpdated) {
          _this.prev = _this.current;
          _this.velocityUpdateSubscribers.notify(_this.getVelocity());
        }
      };
      this.hasAnimated = false;
      this.prev = this.current = init5;
      this.canTrackVelocity = isFloat(this.current);
    }
    MotionValue2.prototype.onChange = function(subscription) {
      return this.updateSubscribers.add(subscription);
    };
    MotionValue2.prototype.clearListeners = function() {
      this.updateSubscribers.clear();
    };
    MotionValue2.prototype.onRenderRequest = function(subscription) {
      subscription(this.get());
      return this.renderSubscribers.add(subscription);
    };
    MotionValue2.prototype.attach = function(passiveEffect) {
      this.passiveEffect = passiveEffect;
    };
    MotionValue2.prototype.set = function(v2, render) {
      if (render === void 0) {
        render = true;
      }
      if (!render || !this.passiveEffect) {
        this.updateAndNotify(v2, render);
      } else {
        this.passiveEffect(v2, this.updateAndNotify);
      }
    };
    MotionValue2.prototype.get = function() {
      return this.current;
    };
    MotionValue2.prototype.getPrevious = function() {
      return this.prev;
    };
    MotionValue2.prototype.getVelocity = function() {
      return this.canTrackVelocity ? velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
    };
    MotionValue2.prototype.start = function(animation) {
      var _this = this;
      this.stop();
      return new Promise(function(resolve) {
        _this.hasAnimated = true;
        _this.stopAnimation = animation(resolve);
      }).then(function() {
        return _this.clearAnimation();
      });
    };
    MotionValue2.prototype.stop = function() {
      if (this.stopAnimation)
        this.stopAnimation();
      this.clearAnimation();
    };
    MotionValue2.prototype.isAnimating = function() {
      return !!this.stopAnimation;
    };
    MotionValue2.prototype.clearAnimation = function() {
      this.stopAnimation = null;
    };
    MotionValue2.prototype.destroy = function() {
      this.updateSubscribers.clear();
      this.renderSubscribers.clear();
      this.stop();
    };
    return MotionValue2;
  }();
  function motionValue(init5) {
    return new MotionValue(init5);
  }

  // node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  var testValueType = function(v2) {
    return function(type) {
      return type.test(v2);
    };
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  var auto2 = {
    test: function(v2) {
      return v2 === "auto";
    },
    parse: function(v2) {
      return v2;
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  var dimensionValueTypes = [number, px2, percent2, degrees, vw2, vh2, auto2];
  var findDimensionValueType = function(v2) {
    return dimensionValueTypes.find(testValueType(v2));
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  var valueTypes = __spreadArray(__spreadArray([], __read(dimensionValueTypes), false), [color2, complex], false);
  var findValueType = function(v2) {
    return valueTypes.find(testValueType(v2));
  };

  // node_modules/framer-motion/dist/es/render/utils/setters.mjs
  function setMotionValue(visualElement2, key, value12) {
    if (visualElement2.hasValue(key)) {
      visualElement2.getValue(key).set(value12);
    } else {
      visualElement2.addValue(key, motionValue(value12));
    }
  }
  function setTarget5(visualElement2, definition) {
    var resolved = resolveVariant(visualElement2, definition);
    var _a2 = resolved ? visualElement2.makeTargetAnimatable(resolved, false) : {}, _b = _a2.transitionEnd, transitionEnd = _b === void 0 ? {} : _b;
    _a2.transition;
    var target6 = __rest(_a2, ["transitionEnd", "transition"]);
    target6 = __assign(__assign({}, target6), transitionEnd);
    for (var key in target6) {
      var value12 = resolveFinalValueInKeyframes(target6[key]);
      setMotionValue(visualElement2, key, value12);
    }
  }
  function checkTargetForNewValues(visualElement2, target6, origin3) {
    var _a2, _b, _c;
    var _d;
    var newValueKeys = Object.keys(target6).filter(function(key2) {
      return !visualElement2.hasValue(key2);
    });
    var numNewValues = newValueKeys.length;
    if (!numNewValues)
      return;
    for (var i7 = 0; i7 < numNewValues; i7++) {
      var key = newValueKeys[i7];
      var targetValue2 = target6[key];
      var value12 = null;
      if (Array.isArray(targetValue2)) {
        value12 = targetValue2[0];
      }
      if (value12 === null) {
        value12 = (_b = (_a2 = origin3[key]) !== null && _a2 !== void 0 ? _a2 : visualElement2.readValue(key)) !== null && _b !== void 0 ? _b : target6[key];
      }
      if (value12 === void 0 || value12 === null)
        continue;
      if (typeof value12 === "string" && (isNumericalString(value12) || isZeroValueString(value12))) {
        value12 = parseFloat(value12);
      } else if (!findValueType(value12) && complex.test(targetValue2)) {
        value12 = getAnimatableNone2(key, targetValue2);
      }
      visualElement2.addValue(key, motionValue(value12));
      (_c = (_d = origin3)[key]) !== null && _c !== void 0 ? _c : _d[key] = value12;
      visualElement2.setBaseTarget(key, value12);
    }
  }
  function getOriginFromTransition(key, transition3) {
    if (!transition3)
      return;
    var valueTransition = transition3[key] || transition3["default"] || transition3;
    return valueTransition.from;
  }
  function getOrigin(target6, transition3, visualElement2) {
    var _a2, _b;
    var origin3 = {};
    for (var key in target6) {
      origin3[key] = (_a2 = getOriginFromTransition(key, transition3)) !== null && _a2 !== void 0 ? _a2 : (_b = visualElement2.getValue(key)) === null || _b === void 0 ? void 0 : _b.get();
    }
    return origin3;
  }

  // node_modules/framer-motion/dist/es/render/utils/animation.mjs
  function animateVisualElement(visualElement2, definition, options3) {
    if (options3 === void 0) {
      options3 = {};
    }
    visualElement2.notifyAnimationStart(definition);
    var animation;
    if (Array.isArray(definition)) {
      var animations2 = definition.map(function(variant) {
        return animateVariant(visualElement2, variant, options3);
      });
      animation = Promise.all(animations2);
    } else if (typeof definition === "string") {
      animation = animateVariant(visualElement2, definition, options3);
    } else {
      var resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement2, definition, options3.custom) : definition;
      animation = animateTarget(visualElement2, resolvedDefinition, options3);
    }
    return animation.then(function() {
      return visualElement2.notifyAnimationComplete(definition);
    });
  }
  function animateVariant(visualElement2, variant, options3) {
    var _a2;
    if (options3 === void 0) {
      options3 = {};
    }
    var resolved = resolveVariant(visualElement2, variant, options3.custom);
    var _b = (resolved || {}).transition, transition3 = _b === void 0 ? visualElement2.getDefaultTransition() || {} : _b;
    if (options3.transitionOverride) {
      transition3 = options3.transitionOverride;
    }
    var getAnimation2 = resolved ? function() {
      return animateTarget(visualElement2, resolved, options3);
    } : function() {
      return Promise.resolve();
    };
    var getChildAnimations = ((_a2 = visualElement2.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.size) ? function(forwardDelay) {
      if (forwardDelay === void 0) {
        forwardDelay = 0;
      }
      var _a3 = transition3.delayChildren, delayChildren = _a3 === void 0 ? 0 : _a3, staggerChildren = transition3.staggerChildren, staggerDirection = transition3.staggerDirection;
      return animateChildren(visualElement2, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options3);
    } : function() {
      return Promise.resolve();
    };
    var when11 = transition3.when;
    if (when11) {
      var _c = __read(when11 === "beforeChildren" ? [getAnimation2, getChildAnimations] : [getChildAnimations, getAnimation2], 2), first2 = _c[0], last7 = _c[1];
      return first2().then(last7);
    } else {
      return Promise.all([getAnimation2(), getChildAnimations(options3.delay)]);
    }
  }
  function animateTarget(visualElement2, definition, _a2) {
    var _b;
    var _c = _a2 === void 0 ? {} : _a2, _d = _c.delay, delay2 = _d === void 0 ? 0 : _d, transitionOverride = _c.transitionOverride, type = _c.type;
    var _e2 = visualElement2.makeTargetAnimatable(definition), _f = _e2.transition, transition3 = _f === void 0 ? visualElement2.getDefaultTransition() : _f, transitionEnd = _e2.transitionEnd, target6 = __rest(_e2, ["transition", "transitionEnd"]);
    if (transitionOverride)
      transition3 = transitionOverride;
    var animations2 = [];
    var animationTypeState = type && ((_b = visualElement2.animationState) === null || _b === void 0 ? void 0 : _b.getState()[type]);
    for (var key in target6) {
      var value12 = visualElement2.getValue(key);
      var valueTarget = target6[key];
      if (!value12 || valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      var valueTransition = __assign({ delay: delay2 }, transition3);
      if (visualElement2.shouldReduceMotion && isTransformProp(key)) {
        valueTransition = __assign(__assign({}, valueTransition), { type: false, delay: 0 });
      }
      var animation = startAnimation(key, value12, valueTarget, valueTransition);
      animations2.push(animation);
    }
    return Promise.all(animations2).then(function() {
      transitionEnd && setTarget5(visualElement2, transitionEnd);
    });
  }
  function animateChildren(visualElement2, variant, delayChildren, staggerChildren, staggerDirection, options3) {
    if (delayChildren === void 0) {
      delayChildren = 0;
    }
    if (staggerChildren === void 0) {
      staggerChildren = 0;
    }
    if (staggerDirection === void 0) {
      staggerDirection = 1;
    }
    var animations2 = [];
    var maxStaggerDuration = (visualElement2.variantChildren.size - 1) * staggerChildren;
    var generateStaggerDuration = staggerDirection === 1 ? function(i7) {
      if (i7 === void 0) {
        i7 = 0;
      }
      return i7 * staggerChildren;
    } : function(i7) {
      if (i7 === void 0) {
        i7 = 0;
      }
      return maxStaggerDuration - i7 * staggerChildren;
    };
    Array.from(visualElement2.variantChildren).sort(sortByTreeOrder).forEach(function(child, i7) {
      animations2.push(animateVariant(child, variant, __assign(__assign({}, options3), { delay: delayChildren + generateStaggerDuration(i7) })).then(function() {
        return child.notifyAnimationComplete(variant);
      }));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a4, b4) {
    return a4.sortNodePosition(b4);
  }
  function shouldBlockAnimation(_a2, key) {
    var protectedKeys = _a2.protectedKeys, needsAnimating = _a2.needsAnimating;
    var shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }

  // node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  var variantPriorityOrder = [
    AnimationType.Animate,
    AnimationType.InView,
    AnimationType.Focus,
    AnimationType.Hover,
    AnimationType.Tap,
    AnimationType.Drag,
    AnimationType.Exit
  ];
  var reversePriorityOrder = __spreadArray([], __read(variantPriorityOrder), false).reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement2) {
    return function(animations2) {
      return Promise.all(animations2.map(function(_a2) {
        var animation = _a2.animation, options3 = _a2.options;
        return animateVisualElement(visualElement2, animation, options3);
      }));
    };
  }
  function createAnimationState(visualElement2) {
    var animate11 = animateList(visualElement2);
    var state3 = createState();
    var allAnimatedKeys = {};
    var isInitialRender = true;
    var buildResolvedTypeValues = function(acc, definition) {
      var resolved = resolveVariant(visualElement2, definition);
      if (resolved) {
        resolved.transition;
        var transitionEnd = resolved.transitionEnd, target6 = __rest(resolved, ["transition", "transitionEnd"]);
        acc = __assign(__assign(__assign({}, acc), target6), transitionEnd);
      }
      return acc;
    };
    function isAnimated(key) {
      return allAnimatedKeys[key] !== void 0;
    }
    function setAnimateFunction(makeAnimator) {
      animate11 = makeAnimator(visualElement2);
    }
    function animateChanges(options3, changedActiveType) {
      var _a2;
      var props = visualElement2.getProps();
      var context = visualElement2.getVariantContext(true) || {};
      var animations2 = [];
      var removedKeys = /* @__PURE__ */ new Set();
      var encounteredKeys = {};
      var removedVariantIndex = Infinity;
      var _loop_1 = function(i8) {
        var type = reversePriorityOrder[i8];
        var typeState = state3[type];
        var prop3 = (_a2 = props[type]) !== null && _a2 !== void 0 ? _a2 : context[type];
        var propIsVariant = isVariantLabel(prop3);
        var activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i8;
        var isInherited = prop3 === context[type] && prop3 !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement2.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = __assign({}, encounteredKeys);
        if (!typeState.isActive && activeDelta === null || !prop3 && !typeState.prevProp || isAnimationControls(prop3) || typeof prop3 === "boolean") {
          return "continue";
        }
        var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop3);
        var shouldAnimateType = variantDidChange || type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || i8 > removedVariantIndex && propIsVariant;
        var definitionList = Array.isArray(prop3) ? prop3 : [prop3];
        var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});
        if (activeDelta === false)
          resolvedValues = {};
        var _b = typeState.prevResolvedValues, prevResolvedValues = _b === void 0 ? {} : _b;
        var allKeys = __assign(__assign({}, prevResolvedValues), resolvedValues);
        var markToAnimate = function(key2) {
          shouldAnimateType = true;
          removedKeys.delete(key2);
          typeState.needsAnimating[key2] = true;
        };
        for (var key in allKeys) {
          var next2 = resolvedValues[key];
          var prev2 = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          if (next2 !== prev2) {
            if (isKeyframesTarget(next2) && isKeyframesTarget(prev2)) {
              if (!shallowCompare(next2, prev2) || variantDidChange) {
                markToAnimate(key);
              } else {
                typeState.protectedKeys[key] = true;
              }
            } else if (next2 !== void 0) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next2 !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop3;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = __assign(__assign({}, encounteredKeys), resolvedValues);
        }
        if (isInitialRender && visualElement2.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        if (shouldAnimateType && !isInherited) {
          animations2.push.apply(animations2, __spreadArray([], __read(definitionList.map(function(animation) {
            return {
              animation,
              options: __assign({ type }, options3)
            };
          })), false));
        }
      };
      for (var i7 = 0; i7 < numAnimationTypes; i7++) {
        _loop_1(i7);
      }
      allAnimatedKeys = __assign({}, encounteredKeys);
      if (removedKeys.size) {
        var fallbackAnimation_1 = {};
        removedKeys.forEach(function(key) {
          var fallbackTarget = visualElement2.getBaseTarget(key);
          if (fallbackTarget !== void 0) {
            fallbackAnimation_1[key] = fallbackTarget;
          }
        });
        animations2.push({ animation: fallbackAnimation_1 });
      }
      var shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && props.initial === false && !visualElement2.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate11(animations2) : Promise.resolve();
    }
    function setActive(type, isActive, options3) {
      var _a2;
      if (state3[type].isActive === isActive)
        return Promise.resolve();
      (_a2 = visualElement2.variantChildren) === null || _a2 === void 0 ? void 0 : _a2.forEach(function(child) {
        var _a3;
        return (_a3 = child.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(type, isActive);
      });
      state3[type].isActive = isActive;
      var animations2 = animateChanges(options3, type);
      for (var key in state3) {
        state3[key].protectedKeys = {};
      }
      return animations2;
    }
    return {
      isAnimated,
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: function() {
        return state3;
      }
    };
  }
  function checkVariantsDidChange(prev2, next2) {
    if (typeof next2 === "string") {
      return next2 !== prev2;
    } else if (isVariantLabels(next2)) {
      return !shallowCompare(next2, prev2);
    }
    return false;
  }
  function createTypeState(isActive) {
    if (isActive === void 0) {
      isActive = false;
    }
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    var _a2;
    return _a2 = {}, _a2[AnimationType.Animate] = createTypeState(true), _a2[AnimationType.InView] = createTypeState(), _a2[AnimationType.Hover] = createTypeState(), _a2[AnimationType.Tap] = createTypeState(), _a2[AnimationType.Drag] = createTypeState(), _a2[AnimationType.Focus] = createTypeState(), _a2[AnimationType.Exit] = createTypeState(), _a2;
  }

  // node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var animations = {
    animation: makeRenderlessComponent(function(_a2) {
      var visualElement2 = _a2.visualElement, animate11 = _a2.animate;
      visualElement2.animationState || (visualElement2.animationState = createAnimationState(visualElement2));
      if (isAnimationControls(animate11)) {
        (0, import_react32.useEffect)(function() {
          return animate11.subscribe(visualElement2);
        }, [animate11]);
      }
    }),
    exit: makeRenderlessComponent(function(props) {
      var custom2 = props.custom, visualElement2 = props.visualElement;
      var _a2 = __read(usePresence(), 2), isPresent = _a2[0], safeToRemove = _a2[1];
      var presenceContext = (0, import_react32.useContext)(PresenceContext);
      (0, import_react32.useEffect)(function() {
        var _a3, _b;
        visualElement2.isPresent = isPresent;
        var animation = (_a3 = visualElement2.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Exit, !isPresent, { custom: (_b = presenceContext === null || presenceContext === void 0 ? void 0 : presenceContext.custom) !== null && _b !== void 0 ? _b : custom2 });
        !isPresent && (animation === null || animation === void 0 ? void 0 : animation.then(safeToRemove));
      }, [isPresent]);
    })
  };

  // node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
  var import_react33 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/gestures/PanSession.mjs
  var PanSession = function() {
    function PanSession2(event, handlers, _a2) {
      var _this = this;
      var _b = _a2 === void 0 ? {} : _a2, transformPagePoint = _b.transformPagePoint;
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.updatePoint = function() {
        if (!(_this.lastMoveEvent && _this.lastMoveEventInfo))
          return;
        var info3 = getPanInfo(_this.lastMoveEventInfo, _this.history);
        var isPanStarted = _this.startEvent !== null;
        var isDistancePastThreshold = distance(info3.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        var point2 = info3.point;
        var timestamp2 = getFrameData().timestamp;
        _this.history.push(__assign(__assign({}, point2), { timestamp: timestamp2 }));
        var _a3 = _this.handlers, onStart = _a3.onStart, onMove = _a3.onMove;
        if (!isPanStarted) {
          onStart && onStart(_this.lastMoveEvent, info3);
          _this.startEvent = _this.lastMoveEvent;
        }
        onMove && onMove(_this.lastMoveEvent, info3);
      };
      this.handlePointerMove = function(event2, info3) {
        _this.lastMoveEvent = event2;
        _this.lastMoveEventInfo = transformPoint(info3, _this.transformPagePoint);
        if (isMouseEvent(event2) && event2.buttons === 0) {
          _this.handlePointerUp(event2, info3);
          return;
        }
        es_default.update(_this.updatePoint, true);
      };
      this.handlePointerUp = function(event2, info3) {
        _this.end();
        var _a3 = _this.handlers, onEnd = _a3.onEnd, onSessionEnd = _a3.onSessionEnd;
        var panInfo = getPanInfo(transformPoint(info3, _this.transformPagePoint), _this.history);
        if (_this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (isTouchEvent(event) && event.touches.length > 1)
        return;
      this.handlers = handlers;
      this.transformPagePoint = transformPagePoint;
      var info2 = extractEventInfo(event);
      var initialInfo = transformPoint(info2, this.transformPagePoint);
      var point = initialInfo.point;
      var timestamp = getFrameData().timestamp;
      this.history = [__assign(__assign({}, point), { timestamp })];
      var onSessionStart = handlers.onSessionStart;
      onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
      this.removeListeners = pipe(addPointerEvent(window, "pointermove", this.handlePointerMove), addPointerEvent(window, "pointerup", this.handlePointerUp), addPointerEvent(window, "pointercancel", this.handlePointerUp));
    }
    PanSession2.prototype.updateHandlers = function(handlers) {
      this.handlers = handlers;
    };
    PanSession2.prototype.end = function() {
      this.removeListeners && this.removeListeners();
      cancelSync.update(this.updatePoint);
    };
    return PanSession2;
  }();
  function transformPoint(info2, transformPagePoint) {
    return transformPagePoint ? { point: transformPagePoint(info2.point) } : info2;
  }
  function subtractPoint(a4, b4) {
    return { x: a4.x - b4.x, y: a4.y - b4.y };
  }
  function getPanInfo(_a2, history2) {
    var point = _a2.point;
    return {
      point,
      delta: subtractPoint(point, lastDevicePoint(history2)),
      offset: subtractPoint(point, startDevicePoint(history2)),
      velocity: getVelocity2(history2, 0.1)
    };
  }
  function startDevicePoint(history2) {
    return history2[0];
  }
  function lastDevicePoint(history2) {
    return history2[history2.length - 1];
  }
  function getVelocity2(history2, timeDelta) {
    if (history2.length < 2) {
      return { x: 0, y: 0 };
    }
    var i7 = history2.length - 1;
    var timestampedPoint = null;
    var lastPoint = lastDevicePoint(history2);
    while (i7 >= 0) {
      timestampedPoint = history2[i7];
      if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
        break;
      }
      i7--;
    }
    if (!timestampedPoint) {
      return { x: 0, y: 0 };
    }
    var time4 = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;
    if (time4 === 0) {
      return { x: 0, y: 0 };
    }
    var currentVelocity = {
      x: (lastPoint.x - timestampedPoint.x) / time4,
      y: (lastPoint.y - timestampedPoint.y) / time4
    };
    if (currentVelocity.x === Infinity) {
      currentVelocity.x = 0;
    }
    if (currentVelocity.y === Infinity) {
      currentVelocity.y = 0;
    }
    return currentVelocity;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
  function calcLength(axis) {
    return axis.max - axis.min;
  }
  function isNear(value12, target6, maxDistance) {
    if (target6 === void 0) {
      target6 = 0;
    }
    if (maxDistance === void 0) {
      maxDistance = 0.01;
    }
    return distance(value12, target6) < maxDistance;
  }
  function calcAxisDelta(delta, source3, target6, origin3) {
    if (origin3 === void 0) {
      origin3 = 0.5;
    }
    delta.origin = origin3;
    delta.originPoint = mix(source3.min, source3.max, delta.origin);
    delta.scale = calcLength(target6) / calcLength(source3);
    if (isNear(delta.scale, 1, 1e-4) || isNaN(delta.scale))
      delta.scale = 1;
    delta.translate = mix(target6.min, target6.max, delta.origin) - delta.originPoint;
    if (isNear(delta.translate) || isNaN(delta.translate))
      delta.translate = 0;
  }
  function calcBoxDelta(delta, source3, target6, origin3) {
    calcAxisDelta(delta.x, source3.x, target6.x, origin3 === null || origin3 === void 0 ? void 0 : origin3.originX);
    calcAxisDelta(delta.y, source3.y, target6.y, origin3 === null || origin3 === void 0 ? void 0 : origin3.originY);
  }
  function calcRelativeAxis(target6, relative2, parent2) {
    target6.min = parent2.min + relative2.min;
    target6.max = target6.min + calcLength(relative2);
  }
  function calcRelativeBox(target6, relative2, parent2) {
    calcRelativeAxis(target6.x, relative2.x, parent2.x);
    calcRelativeAxis(target6.y, relative2.y, parent2.y);
  }
  function calcRelativeAxisPosition(target6, layout4, parent2) {
    target6.min = layout4.min - parent2.min;
    target6.max = target6.min + calcLength(layout4);
  }
  function calcRelativePosition(target6, layout4, parent2) {
    calcRelativeAxisPosition(target6.x, layout4.x, parent2.x);
    calcRelativeAxisPosition(target6.y, layout4.y, parent2.y);
  }

  // node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
  function applyConstraints(point, _a2, elastic) {
    var min8 = _a2.min, max7 = _a2.max;
    if (min8 !== void 0 && point < min8) {
      point = elastic ? mix(min8, point, elastic.min) : Math.max(point, min8);
    } else if (max7 !== void 0 && point > max7) {
      point = elastic ? mix(max7, point, elastic.max) : Math.min(point, max7);
    }
    return point;
  }
  function calcRelativeAxisConstraints(axis, min8, max7) {
    return {
      min: min8 !== void 0 ? axis.min + min8 : void 0,
      max: max7 !== void 0 ? axis.max + max7 - (axis.max - axis.min) : void 0
    };
  }
  function calcRelativeConstraints(layoutBox, _a2) {
    var top6 = _a2.top, left4 = _a2.left, bottom6 = _a2.bottom, right3 = _a2.right;
    return {
      x: calcRelativeAxisConstraints(layoutBox.x, left4, right3),
      y: calcRelativeAxisConstraints(layoutBox.y, top6, bottom6)
    };
  }
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    var _a2;
    var min8 = constraintsAxis.min - layoutAxis.min;
    var max7 = constraintsAxis.max - layoutAxis.max;
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
      _a2 = __read([max7, min8], 2), min8 = _a2[0], max7 = _a2[1];
    }
    return { min: min8, max: max7 };
  }
  function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
      x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
      y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
  }
  function calcOrigin2(source3, target6) {
    var origin3 = 0.5;
    var sourceLength = calcLength(source3);
    var targetLength = calcLength(target6);
    if (targetLength > sourceLength) {
      origin3 = progress2(target6.min, target6.max - sourceLength, source3.min);
    } else if (sourceLength > targetLength) {
      origin3 = progress2(source3.min, source3.max - targetLength, target6.min);
    }
    return clamp4(0, 1, origin3);
  }
  function rebaseAxisConstraints(layout4, constraints) {
    var relativeConstraints = {};
    if (constraints.min !== void 0) {
      relativeConstraints.min = constraints.min - layout4.min;
    }
    if (constraints.max !== void 0) {
      relativeConstraints.max = constraints.max - layout4.min;
    }
    return relativeConstraints;
  }
  var defaultElastic = 0.35;
  function resolveDragElastic(dragElastic2) {
    if (dragElastic2 === void 0) {
      dragElastic2 = defaultElastic;
    }
    if (dragElastic2 === false) {
      dragElastic2 = 0;
    } else if (dragElastic2 === true) {
      dragElastic2 = defaultElastic;
    }
    return {
      x: resolveAxisElastic(dragElastic2, "left", "right"),
      y: resolveAxisElastic(dragElastic2, "top", "bottom")
    };
  }
  function resolveAxisElastic(dragElastic2, minLabel, maxLabel) {
    return {
      min: resolvePointElastic(dragElastic2, minLabel),
      max: resolvePointElastic(dragElastic2, maxLabel)
    };
  }
  function resolvePointElastic(dragElastic2, label6) {
    var _a2;
    return typeof dragElastic2 === "number" ? dragElastic2 : (_a2 = dragElastic2[label6]) !== null && _a2 !== void 0 ? _a2 : 0;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  var createAxisDelta = function() {
    return {
      translate: 0,
      scale: 1,
      origin: 0,
      originPoint: 0
    };
  };
  var createDelta = function() {
    return {
      x: createAxisDelta(),
      y: createAxisDelta()
    };
  };
  var createAxis = function() {
    return { min: 0, max: 0 };
  };
  var createBox = function() {
    return {
      x: createAxis(),
      y: createAxis()
    };
  };

  // node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
  function eachAxis(callback2) {
    return [callback2("x"), callback2("y")];
  }

  // node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  function convertBoundingBoxToBox(_a2) {
    var top6 = _a2.top, left4 = _a2.left, right3 = _a2.right, bottom6 = _a2.bottom;
    return {
      x: { min: left4, max: right3 },
      y: { min: top6, max: bottom6 }
    };
  }
  function convertBoxToBoundingBox(_a2) {
    var x3 = _a2.x, y2 = _a2.y;
    return { top: y2.min, right: x3.max, bottom: y2.max, left: x3.min };
  }
  function transformBoxPoints(point, transformPoint2) {
    if (!transformPoint2)
      return point;
    var topLeft = transformPoint2({ x: point.left, y: point.top });
    var bottomRight = transformPoint2({ x: point.right, y: point.bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }

  // node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
  function isIdentityScale(scale2) {
    return scale2 === void 0 || scale2 === 1;
  }
  function hasScale(_a2) {
    var scale2 = _a2.scale, scaleX = _a2.scaleX, scaleY = _a2.scaleY;
    return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
  }
  function hasTransform(values3) {
    return hasScale(values3) || hasTranslate(values3.x) || hasTranslate(values3.y) || values3.z || values3.rotate || values3.rotateX || values3.rotateY;
  }
  function hasTranslate(value12) {
    return value12 && value12 !== "0%";
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
  function scalePoint(point, scale2, originPoint) {
    var distanceFromOrigin = point - originPoint;
    var scaled = scale2 * distanceFromOrigin;
    return originPoint + scaled;
  }
  function applyPointDelta(point, translate2, scale2, originPoint, boxScale) {
    if (boxScale !== void 0) {
      point = scalePoint(point, boxScale, originPoint);
    }
    return scalePoint(point, scale2, originPoint) + translate2;
  }
  function applyAxisDelta(axis, translate2, scale2, originPoint, boxScale) {
    if (translate2 === void 0) {
      translate2 = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    axis.min = applyPointDelta(axis.min, translate2, scale2, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate2, scale2, originPoint, boxScale);
  }
  function applyBoxDelta(box6, _a2) {
    var x3 = _a2.x, y2 = _a2.y;
    applyAxisDelta(box6.x, x3.translate, x3.scale, x3.originPoint);
    applyAxisDelta(box6.y, y2.translate, y2.scale, y2.originPoint);
  }
  function applyTreeDeltas(box6, treeScale, treePath, isSharedTransition) {
    var _a2, _b;
    if (isSharedTransition === void 0) {
      isSharedTransition = false;
    }
    var treeLength = treePath.length;
    if (!treeLength)
      return;
    treeScale.x = treeScale.y = 1;
    var node2;
    var delta;
    for (var i7 = 0; i7 < treeLength; i7++) {
      node2 = treePath[i7];
      delta = node2.projectionDelta;
      if (((_b = (_a2 = node2.instance) === null || _a2 === void 0 ? void 0 : _a2.style) === null || _b === void 0 ? void 0 : _b.display) === "contents")
        continue;
      if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
        transformBox(box6, { x: -node2.scroll.x, y: -node2.scroll.y });
      }
      if (delta) {
        treeScale.x *= delta.x.scale;
        treeScale.y *= delta.y.scale;
        applyBoxDelta(box6, delta);
      }
      if (isSharedTransition && hasTransform(node2.latestValues)) {
        transformBox(box6, node2.latestValues);
      }
    }
  }
  function translateAxis(axis, distance2) {
    axis.min = axis.min + distance2;
    axis.max = axis.max + distance2;
  }
  function transformAxis(axis, transforms, _a2) {
    var _b = __read(_a2, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    var axisOrigin = transforms[originKey] !== void 0 ? transforms[originKey] : 0.5;
    var originPoint = mix(axis.min, axis.max, axisOrigin);
    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);
  }
  var xKeys = ["x", "scaleX", "originX"];
  var yKeys = ["y", "scaleY", "originY"];
  function transformBox(box6, transform2) {
    transformAxis(box6.x, transform2, xKeys);
    transformAxis(box6.y, transform2, yKeys);
  }

  // node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  function measureViewportBox(instance, transformPoint2) {
    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
  }
  function measurePageBox(element3, rootProjectionNode2, transformPagePoint) {
    var viewportBox = measureViewportBox(element3, transformPagePoint);
    var scroll3 = rootProjectionNode2.scroll;
    if (scroll3) {
      translateAxis(viewportBox.x, scroll3.x);
      translateAxis(viewportBox.y, scroll3.y);
    }
    return viewportBox;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
  var elementDragControls = /* @__PURE__ */ new WeakMap();
  var VisualElementDragControls = function() {
    function VisualElementDragControls2(visualElement2) {
      this.openGlobalLock = null;
      this.isDragging = false;
      this.currentDirection = null;
      this.originPoint = { x: 0, y: 0 };
      this.constraints = false;
      this.hasMutatedConstraints = false;
      this.elastic = createBox();
      this.visualElement = visualElement2;
    }
    VisualElementDragControls2.prototype.start = function(originEvent, _a2) {
      var _this = this;
      var _b = _a2 === void 0 ? {} : _a2, _c = _b.snapToCursor, snapToCursor = _c === void 0 ? false : _c;
      if (this.visualElement.isPresent === false)
        return;
      var onSessionStart = function(event) {
        _this.stopAnimation();
        if (snapToCursor) {
          _this.snapToCursor(extractEventInfo(event, "page").point);
        }
      };
      var onStart = function(event, info2) {
        var _a3;
        var _b2 = _this.getProps(), drag3 = _b2.drag, dragPropagation2 = _b2.dragPropagation, onDragStart2 = _b2.onDragStart;
        if (drag3 && !dragPropagation2) {
          if (_this.openGlobalLock)
            _this.openGlobalLock();
          _this.openGlobalLock = getGlobalLock(drag3);
          if (!_this.openGlobalLock)
            return;
        }
        _this.isDragging = true;
        _this.currentDirection = null;
        _this.resolveConstraints();
        if (_this.visualElement.projection) {
          _this.visualElement.projection.isAnimationBlocked = true;
          _this.visualElement.projection.target = void 0;
        }
        eachAxis(function(axis) {
          var _a4, _b3;
          var current = _this.getAxisMotionValue(axis).get() || 0;
          if (percent2.test(current)) {
            var measuredAxis = (_b3 = (_a4 = _this.visualElement.projection) === null || _a4 === void 0 ? void 0 : _a4.layout) === null || _b3 === void 0 ? void 0 : _b3.actual[axis];
            if (measuredAxis) {
              var length_1 = calcLength(measuredAxis);
              current = length_1 * (parseFloat(current) / 100);
            }
          }
          _this.originPoint[axis] = current;
        });
        onDragStart2 === null || onDragStart2 === void 0 ? void 0 : onDragStart2(event, info2);
        (_a3 = _this.visualElement.animationState) === null || _a3 === void 0 ? void 0 : _a3.setActive(AnimationType.Drag, true);
      };
      var onMove = function(event, info2) {
        var _a3 = _this.getProps(), dragPropagation2 = _a3.dragPropagation, dragDirectionLock = _a3.dragDirectionLock, onDirectionLock = _a3.onDirectionLock, onDrag2 = _a3.onDrag;
        if (!dragPropagation2 && !_this.openGlobalLock)
          return;
        var offset2 = info2.offset;
        if (dragDirectionLock && _this.currentDirection === null) {
          _this.currentDirection = getCurrentDirection(offset2);
          if (_this.currentDirection !== null) {
            onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);
          }
          return;
        }
        _this.updateAxis("x", info2.point, offset2);
        _this.updateAxis("y", info2.point, offset2);
        _this.visualElement.syncRender();
        onDrag2 === null || onDrag2 === void 0 ? void 0 : onDrag2(event, info2);
      };
      var onSessionEnd = function(event, info2) {
        return _this.stop(event, info2);
      };
      this.panSession = new PanSession(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd
      }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
    };
    VisualElementDragControls2.prototype.stop = function(event, info2) {
      var isDragging = this.isDragging;
      this.cancel();
      if (!isDragging)
        return;
      var velocity = info2.velocity;
      this.startAnimation(velocity);
      var onDragEnd2 = this.getProps().onDragEnd;
      onDragEnd2 === null || onDragEnd2 === void 0 ? void 0 : onDragEnd2(event, info2);
    };
    VisualElementDragControls2.prototype.cancel = function() {
      var _a2, _b;
      this.isDragging = false;
      if (this.visualElement.projection) {
        this.visualElement.projection.isAnimationBlocked = false;
      }
      (_a2 = this.panSession) === null || _a2 === void 0 ? void 0 : _a2.end();
      this.panSession = void 0;
      var dragPropagation2 = this.getProps().dragPropagation;
      if (!dragPropagation2 && this.openGlobalLock) {
        this.openGlobalLock();
        this.openGlobalLock = null;
      }
      (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);
    };
    VisualElementDragControls2.prototype.updateAxis = function(axis, _point, offset2) {
      var drag3 = this.getProps().drag;
      if (!offset2 || !shouldDrag(axis, drag3, this.currentDirection))
        return;
      var axisValue = this.getAxisMotionValue(axis);
      var next2 = this.originPoint[axis] + offset2[axis];
      if (this.constraints && this.constraints[axis]) {
        next2 = applyConstraints(next2, this.constraints[axis], this.elastic[axis]);
      }
      axisValue.set(next2);
    };
    VisualElementDragControls2.prototype.resolveConstraints = function() {
      var _this = this;
      var _a2 = this.getProps(), dragConstraints2 = _a2.dragConstraints, dragElastic2 = _a2.dragElastic;
      var layout4 = (this.visualElement.projection || {}).layout;
      var prevConstraints = this.constraints;
      if (dragConstraints2 && isRefObject(dragConstraints2)) {
        if (!this.constraints) {
          this.constraints = this.resolveRefConstraints();
        }
      } else {
        if (dragConstraints2 && layout4) {
          this.constraints = calcRelativeConstraints(layout4.actual, dragConstraints2);
        } else {
          this.constraints = false;
        }
      }
      this.elastic = resolveDragElastic(dragElastic2);
      if (prevConstraints !== this.constraints && layout4 && this.constraints && !this.hasMutatedConstraints) {
        eachAxis(function(axis) {
          if (_this.getAxisMotionValue(axis)) {
            _this.constraints[axis] = rebaseAxisConstraints(layout4.actual[axis], _this.constraints[axis]);
          }
        });
      }
    };
    VisualElementDragControls2.prototype.resolveRefConstraints = function() {
      var _a2 = this.getProps(), constraints = _a2.dragConstraints, onMeasureDragConstraints = _a2.onMeasureDragConstraints;
      if (!constraints || !isRefObject(constraints))
        return false;
      var constraintsElement = constraints.current;
      invariant(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      var projection = this.visualElement.projection;
      if (!projection || !projection.layout)
        return false;
      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
      var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);
      if (onMeasureDragConstraints) {
        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToBox(userConstraints);
        }
      }
      return measuredConstraints;
    };
    VisualElementDragControls2.prototype.startAnimation = function(velocity) {
      var _this = this;
      var _a2 = this.getProps(), drag3 = _a2.drag, dragMomentum2 = _a2.dragMomentum, dragElastic2 = _a2.dragElastic, dragTransition = _a2.dragTransition, dragSnapToOrigin = _a2.dragSnapToOrigin, onDragTransitionEnd = _a2.onDragTransitionEnd;
      var constraints = this.constraints || {};
      var momentumAnimations = eachAxis(function(axis) {
        var _a3;
        if (!shouldDrag(axis, drag3, _this.currentDirection)) {
          return;
        }
        var transition3 = (_a3 = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a3 !== void 0 ? _a3 : {};
        if (dragSnapToOrigin)
          transition3 = { min: 0, max: 0 };
        var bounceStiffness = dragElastic2 ? 200 : 1e6;
        var bounceDamping = dragElastic2 ? 40 : 1e7;
        var inertia2 = __assign(__assign({ type: "inertia", velocity: dragMomentum2 ? velocity[axis] : 0, bounceStiffness, bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition3);
        return _this.startAxisValueAnimation(axis, inertia2);
      });
      return Promise.all(momentumAnimations).then(onDragTransitionEnd);
    };
    VisualElementDragControls2.prototype.startAxisValueAnimation = function(axis, transition3) {
      var axisValue = this.getAxisMotionValue(axis);
      return startAnimation(axis, axisValue, 0, transition3);
    };
    VisualElementDragControls2.prototype.stopAnimation = function() {
      var _this = this;
      eachAxis(function(axis) {
        return _this.getAxisMotionValue(axis).stop();
      });
    };
    VisualElementDragControls2.prototype.getAxisMotionValue = function(axis) {
      var _a2, _b;
      var dragKey = "_drag" + axis.toUpperCase();
      var externalMotionValue = this.visualElement.getProps()[dragKey];
      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a2 = this.visualElement.getProps().initial) === null || _a2 === void 0 ? void 0 : _a2[axis]) !== null && _b !== void 0 ? _b : 0);
    };
    VisualElementDragControls2.prototype.snapToCursor = function(point) {
      var _this = this;
      eachAxis(function(axis) {
        var drag3 = _this.getProps().drag;
        if (!shouldDrag(axis, drag3, _this.currentDirection))
          return;
        var projection = _this.visualElement.projection;
        var axisValue = _this.getAxisMotionValue(axis);
        if (projection && projection.layout) {
          var _a2 = projection.layout.actual[axis], min8 = _a2.min, max7 = _a2.max;
          axisValue.set(point[axis] - mix(min8, max7, 0.5));
        }
      });
    };
    VisualElementDragControls2.prototype.scalePositionWithinConstraints = function() {
      var _this = this;
      var _a2;
      var _b = this.getProps(), drag3 = _b.drag, dragConstraints2 = _b.dragConstraints;
      var projection = this.visualElement.projection;
      if (!isRefObject(dragConstraints2) || !projection || !this.constraints)
        return;
      this.stopAnimation();
      var boxProgress = { x: 0, y: 0 };
      eachAxis(function(axis) {
        var axisValue = _this.getAxisMotionValue(axis);
        if (axisValue) {
          var latest = axisValue.get();
          boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, _this.constraints[axis]);
        }
      });
      var transformTemplate = this.visualElement.getProps().transformTemplate;
      this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, "") : "none";
      (_a2 = projection.root) === null || _a2 === void 0 ? void 0 : _a2.updateScroll();
      projection.updateLayout();
      this.resolveConstraints();
      eachAxis(function(axis) {
        if (!shouldDrag(axis, drag3, null))
          return;
        var axisValue = _this.getAxisMotionValue(axis);
        var _a3 = _this.constraints[axis], min8 = _a3.min, max7 = _a3.max;
        axisValue.set(mix(min8, max7, boxProgress[axis]));
      });
    };
    VisualElementDragControls2.prototype.addListeners = function() {
      var _this = this;
      var _a2;
      elementDragControls.set(this.visualElement, this);
      var element3 = this.visualElement.getInstance();
      var stopPointerListener = addPointerEvent(element3, "pointerdown", function(event) {
        var _a3 = _this.getProps(), drag3 = _a3.drag, _b = _a3.dragListener, dragListener = _b === void 0 ? true : _b;
        drag3 && dragListener && _this.start(event);
      });
      var measureDragConstraints = function() {
        var dragConstraints2 = _this.getProps().dragConstraints;
        if (isRefObject(dragConstraints2)) {
          _this.constraints = _this.resolveRefConstraints();
        }
      };
      var projection = this.visualElement.projection;
      var stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
      if (projection && !projection.layout) {
        (_a2 = projection.root) === null || _a2 === void 0 ? void 0 : _a2.updateScroll();
        projection.updateLayout();
      }
      measureDragConstraints();
      var stopResizeListener = addDomEvent(window, "resize", function() {
        return _this.scalePositionWithinConstraints();
      });
      projection.addEventListener("didUpdate", function(_a3) {
        var delta = _a3.delta, hasLayoutChanged = _a3.hasLayoutChanged;
        if (_this.isDragging && hasLayoutChanged) {
          eachAxis(function(axis) {
            var motionValue2 = _this.getAxisMotionValue(axis);
            if (!motionValue2)
              return;
            _this.originPoint[axis] += delta[axis].translate;
            motionValue2.set(motionValue2.get() + delta[axis].translate);
          });
          _this.visualElement.syncRender();
        }
      });
      return function() {
        stopResizeListener();
        stopPointerListener();
        stopMeasureLayoutListener();
      };
    };
    VisualElementDragControls2.prototype.getProps = function() {
      var props = this.visualElement.getProps();
      var _a2 = props.drag, drag3 = _a2 === void 0 ? false : _a2, _b = props.dragDirectionLock, dragDirectionLock = _b === void 0 ? false : _b, _c = props.dragPropagation, dragPropagation2 = _c === void 0 ? false : _c, _d = props.dragConstraints, dragConstraints2 = _d === void 0 ? false : _d, _e2 = props.dragElastic, dragElastic2 = _e2 === void 0 ? defaultElastic : _e2, _f = props.dragMomentum, dragMomentum2 = _f === void 0 ? true : _f;
      return __assign(__assign({}, props), { drag: drag3, dragDirectionLock, dragPropagation: dragPropagation2, dragConstraints: dragConstraints2, dragElastic: dragElastic2, dragMomentum: dragMomentum2 });
    };
    return VisualElementDragControls2;
  }();
  function shouldDrag(direction, drag3, currentDirection) {
    return (drag3 === true || drag3 === direction) && (currentDirection === null || currentDirection === direction);
  }
  function getCurrentDirection(offset2, lockThreshold) {
    if (lockThreshold === void 0) {
      lockThreshold = 10;
    }
    var direction = null;
    if (Math.abs(offset2.y) > lockThreshold) {
      direction = "y";
    } else if (Math.abs(offset2.x) > lockThreshold) {
      direction = "x";
    }
    return direction;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs
  function useDrag(props) {
    var groupDragControls = props.dragControls, visualElement2 = props.visualElement;
    var dragControls = useConstant(function() {
      return new VisualElementDragControls(visualElement2);
    });
    (0, import_react33.useEffect)(function() {
      return groupDragControls && groupDragControls.subscribe(dragControls);
    }, [dragControls, groupDragControls]);
    (0, import_react33.useEffect)(function() {
      return dragControls.addListeners();
    }, [dragControls]);
  }

  // node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs
  var import_react34 = __toESM(require_react(), 1);
  function usePanGesture(_a2) {
    var onPan2 = _a2.onPan, onPanStart2 = _a2.onPanStart, onPanEnd2 = _a2.onPanEnd, onPanSessionStart = _a2.onPanSessionStart, visualElement2 = _a2.visualElement;
    var hasPanEvents = onPan2 || onPanStart2 || onPanEnd2 || onPanSessionStart;
    var panSession = (0, import_react34.useRef)(null);
    var transformPagePoint = (0, import_react34.useContext)(MotionConfigContext).transformPagePoint;
    var handlers = {
      onSessionStart: onPanSessionStart,
      onStart: onPanStart2,
      onMove: onPan2,
      onEnd: function(event, info2) {
        panSession.current = null;
        onPanEnd2 && onPanEnd2(event, info2);
      }
    };
    (0, import_react34.useEffect)(function() {
      if (panSession.current !== null) {
        panSession.current.updateHandlers(handlers);
      }
    });
    function onPointerDown(event) {
      panSession.current = new PanSession(event, handlers, {
        transformPagePoint
      });
    }
    usePointerEvent(visualElement2, "pointerdown", hasPanEvents && onPointerDown);
    useUnmountEffect(function() {
      return panSession.current && panSession.current.end();
    });
  }

  // node_modules/framer-motion/dist/es/motion/features/drag.mjs
  var drag = {
    pan: makeRenderlessComponent(usePanGesture),
    drag: makeRenderlessComponent(useDrag)
  };

  // node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs
  var names = [
    "LayoutMeasure",
    "BeforeLayoutMeasure",
    "LayoutUpdate",
    "ViewportBoxUpdate",
    "Update",
    "Render",
    "AnimationComplete",
    "LayoutAnimationComplete",
    "AnimationStart",
    "LayoutAnimationStart",
    "SetAxisTarget",
    "Unmount"
  ];
  function createLifecycles() {
    var managers = names.map(function() {
      return new SubscriptionManager();
    });
    var propSubscriptions = {};
    var lifecycles = {
      clearAllListeners: function() {
        return managers.forEach(function(manager) {
          return manager.clear();
        });
      },
      updatePropListeners: function(props) {
        names.forEach(function(name15) {
          var _a2;
          var on8 = "on" + name15;
          var propListener = props[on8];
          (_a2 = propSubscriptions[name15]) === null || _a2 === void 0 ? void 0 : _a2.call(propSubscriptions);
          if (propListener) {
            propSubscriptions[name15] = lifecycles[on8](propListener);
          }
        });
      }
    };
    managers.forEach(function(manager, i7) {
      lifecycles["on" + names[i7]] = function(handler2) {
        return manager.add(handler2);
      };
      lifecycles["notify" + names[i7]] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return manager.notify.apply(manager, __spreadArray([], __read(args), false));
      };
    });
    return lifecycles;
  }

  // node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  function updateMotionValuesFromProps(element3, next2, prev2) {
    var _a2;
    for (var key in next2) {
      var nextValue = next2[key];
      var prevValue = prev2[key];
      if (isMotionValue(nextValue)) {
        element3.addValue(key, nextValue);
        if (true) {
          warnOnce(nextValue.version === "6.4.3", "Attempting to mix Framer Motion versions ".concat(nextValue.version, " with 6.4.3 may not work as expected."));
        }
      } else if (isMotionValue(prevValue)) {
        element3.addValue(key, motionValue(nextValue));
      } else if (prevValue !== nextValue) {
        if (element3.hasValue(key)) {
          var existingValue = element3.getValue(key);
          !existingValue.hasAnimated && existingValue.set(nextValue);
        } else {
          element3.addValue(key, motionValue((_a2 = element3.getStaticValue(key)) !== null && _a2 !== void 0 ? _a2 : nextValue));
        }
      }
    }
    for (var key in prev2) {
      if (next2[key] === void 0)
        element3.removeValue(key);
    }
    return next2;
  }

  // node_modules/framer-motion/dist/es/render/index.mjs
  var visualElement = function(_a2) {
    var _b = _a2.treeType, treeType = _b === void 0 ? "" : _b, build2 = _a2.build, getBaseTarget = _a2.getBaseTarget, makeTargetAnimatable = _a2.makeTargetAnimatable, measureViewportBox2 = _a2.measureViewportBox, renderInstance = _a2.render, readValueFromInstance = _a2.readValueFromInstance, removeValueFromRenderState = _a2.removeValueFromRenderState, sortNodePosition = _a2.sortNodePosition, scrapeMotionValuesFromProps3 = _a2.scrapeMotionValuesFromProps;
    return function(_a3, options3) {
      var parent2 = _a3.parent, props = _a3.props, presenceId = _a3.presenceId, blockInitialAnimation = _a3.blockInitialAnimation, visualState = _a3.visualState, shouldReduceMotion = _a3.shouldReduceMotion;
      if (options3 === void 0) {
        options3 = {};
      }
      var isMounted = false;
      var latestValues = visualState.latestValues, renderState = visualState.renderState;
      var instance;
      var lifecycles = createLifecycles();
      var values3 = /* @__PURE__ */ new Map();
      var valueSubscriptions = /* @__PURE__ */ new Map();
      var prevMotionValues = {};
      var baseTarget = __assign({}, latestValues);
      var removeFromVariantTree;
      function render() {
        if (!instance || !isMounted)
          return;
        triggerBuild();
        renderInstance(instance, renderState, props.style, element3.projection);
      }
      function triggerBuild() {
        build2(element3, renderState, latestValues, options3, props);
      }
      function update() {
        lifecycles.notifyUpdate(latestValues);
      }
      function bindToMotionValue(key2, value13) {
        var removeOnChange = value13.onChange(function(latestValue) {
          latestValues[key2] = latestValue;
          props.onUpdate && es_default.update(update, false, true);
        });
        var removeOnRenderRequest = value13.onRenderRequest(element3.scheduleRender);
        valueSubscriptions.set(key2, function() {
          removeOnChange();
          removeOnRenderRequest();
        });
      }
      var initialMotionValues = scrapeMotionValuesFromProps3(props);
      for (var key in initialMotionValues) {
        var value12 = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value12)) {
          value12.set(latestValues[key], false);
        }
      }
      var isControllingVariants = checkIfControllingVariants(props);
      var isVariantNode = checkIfVariantNode(props);
      var element3 = __assign(__assign({
        treeType,
        current: null,
        depth: parent2 ? parent2.depth + 1 : 0,
        parent: parent2,
        children: /* @__PURE__ */ new Set(),
        presenceId,
        shouldReduceMotion,
        variantChildren: isVariantNode ? /* @__PURE__ */ new Set() : void 0,
        isVisible: void 0,
        manuallyAnimateOnMount: Boolean(parent2 === null || parent2 === void 0 ? void 0 : parent2.isMounted()),
        blockInitialAnimation,
        isMounted: function() {
          return Boolean(instance);
        },
        mount: function(newInstance) {
          isMounted = true;
          instance = element3.current = newInstance;
          if (element3.projection) {
            element3.projection.mount(newInstance);
          }
          if (isVariantNode && parent2 && !isControllingVariants) {
            removeFromVariantTree = parent2 === null || parent2 === void 0 ? void 0 : parent2.addVariantChild(element3);
          }
          values3.forEach(function(value13, key2) {
            return bindToMotionValue(key2, value13);
          });
          parent2 === null || parent2 === void 0 ? void 0 : parent2.children.add(element3);
          element3.setProps(props);
        },
        unmount: function() {
          var _a4;
          (_a4 = element3.projection) === null || _a4 === void 0 ? void 0 : _a4.unmount();
          cancelSync.update(update);
          cancelSync.render(render);
          valueSubscriptions.forEach(function(remove) {
            return remove();
          });
          removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();
          parent2 === null || parent2 === void 0 ? void 0 : parent2.children.delete(element3);
          lifecycles.clearAllListeners();
          instance = void 0;
          isMounted = false;
        },
        addVariantChild: function(child) {
          var _a4;
          var closestVariantNode = element3.getClosestVariantNode();
          if (closestVariantNode) {
            (_a4 = closestVariantNode.variantChildren) === null || _a4 === void 0 ? void 0 : _a4.add(child);
            return function() {
              return closestVariantNode.variantChildren.delete(child);
            };
          }
        },
        sortNodePosition: function(other) {
          if (!sortNodePosition || treeType !== other.treeType)
            return 0;
          return sortNodePosition(element3.getInstance(), other.getInstance());
        },
        getClosestVariantNode: function() {
          return isVariantNode ? element3 : parent2 === null || parent2 === void 0 ? void 0 : parent2.getClosestVariantNode();
        },
        getLayoutId: function() {
          return props.layoutId;
        },
        getInstance: function() {
          return instance;
        },
        getStaticValue: function(key2) {
          return latestValues[key2];
        },
        setStaticValue: function(key2, value13) {
          return latestValues[key2] = value13;
        },
        getLatestValues: function() {
          return latestValues;
        },
        setVisibility: function(visibility) {
          if (element3.isVisible === visibility)
            return;
          element3.isVisible = visibility;
          element3.scheduleRender();
        },
        makeTargetAnimatable: function(target6, canMutate) {
          if (canMutate === void 0) {
            canMutate = true;
          }
          return makeTargetAnimatable(element3, target6, props, canMutate);
        },
        measureViewportBox: function() {
          return measureViewportBox2(instance, props);
        },
        addValue: function(key2, value13) {
          if (element3.hasValue(key2))
            element3.removeValue(key2);
          values3.set(key2, value13);
          latestValues[key2] = value13.get();
          bindToMotionValue(key2, value13);
        },
        removeValue: function(key2) {
          var _a4;
          values3.delete(key2);
          (_a4 = valueSubscriptions.get(key2)) === null || _a4 === void 0 ? void 0 : _a4();
          valueSubscriptions.delete(key2);
          delete latestValues[key2];
          removeValueFromRenderState(key2, renderState);
        },
        hasValue: function(key2) {
          return values3.has(key2);
        },
        getValue: function(key2, defaultValue4) {
          var value13 = values3.get(key2);
          if (value13 === void 0 && defaultValue4 !== void 0) {
            value13 = motionValue(defaultValue4);
            element3.addValue(key2, value13);
          }
          return value13;
        },
        forEachValue: function(callback2) {
          return values3.forEach(callback2);
        },
        readValue: function(key2) {
          var _a4;
          return (_a4 = latestValues[key2]) !== null && _a4 !== void 0 ? _a4 : readValueFromInstance(instance, key2, options3);
        },
        setBaseTarget: function(key2, value13) {
          baseTarget[key2] = value13;
        },
        getBaseTarget: function(key2) {
          if (getBaseTarget) {
            var target6 = getBaseTarget(props, key2);
            if (target6 !== void 0 && !isMotionValue(target6))
              return target6;
          }
          return baseTarget[key2];
        }
      }, lifecycles), {
        build: function() {
          triggerBuild();
          return renderState;
        },
        scheduleRender: function() {
          es_default.render(render, false, true);
        },
        syncRender: render,
        setProps: function(newProps) {
          if (newProps.transformTemplate || props.transformTemplate) {
            element3.scheduleRender();
          }
          props = newProps;
          lifecycles.updatePropListeners(newProps);
          prevMotionValues = updateMotionValuesFromProps(element3, scrapeMotionValuesFromProps3(props), prevMotionValues);
        },
        getProps: function() {
          return props;
        },
        getVariant: function(name15) {
          var _a4;
          return (_a4 = props.variants) === null || _a4 === void 0 ? void 0 : _a4[name15];
        },
        getDefaultTransition: function() {
          return props.transition;
        },
        getTransformPagePoint: function() {
          return props.transformPagePoint;
        },
        getVariantContext: function(startAtParent) {
          if (startAtParent === void 0) {
            startAtParent = false;
          }
          if (startAtParent)
            return parent2 === null || parent2 === void 0 ? void 0 : parent2.getVariantContext();
          if (!isControllingVariants) {
            var context_1 = (parent2 === null || parent2 === void 0 ? void 0 : parent2.getVariantContext()) || {};
            if (props.initial !== void 0) {
              context_1.initial = props.initial;
            }
            return context_1;
          }
          var context = {};
          for (var i7 = 0; i7 < numVariantProps; i7++) {
            var name_1 = variantProps[i7];
            var prop3 = props[name_1];
            if (isVariantLabel(prop3) || prop3 === false) {
              context[name_1] = prop3;
            }
          }
          return context;
        }
      });
      return element3;
    };
  };
  var variantProps = __spreadArray(["initial"], __read(variantPriorityOrder), false);
  var numVariantProps = variantProps.length;

  // node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  function isCSSVariable2(value12) {
    return typeof value12 === "string" && value12.startsWith("var(--");
  }
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  function parseCSSVariable(current) {
    var match6 = cssVariableRegex.exec(current);
    if (!match6)
      return [,];
    var _a2 = __read(match6, 3), token2 = _a2[1], fallback = _a2[2];
    return [token2, fallback];
  }
  var maxDepth = 4;
  function getVariableValue(current, element3, depth) {
    if (depth === void 0) {
      depth = 1;
    }
    invariant(depth <= maxDepth, 'Max CSS variable fallback depth detected in property "'.concat(current, '". This may indicate a circular fallback dependency.'));
    var _a2 = __read(parseCSSVariable(current), 2), token2 = _a2[0], fallback = _a2[1];
    if (!token2)
      return;
    var resolved = window.getComputedStyle(element3).getPropertyValue(token2);
    if (resolved) {
      return resolved.trim();
    } else if (isCSSVariable2(fallback)) {
      return getVariableValue(fallback, element3, depth + 1);
    } else {
      return fallback;
    }
  }
  function resolveCSSVariables(visualElement2, _a2, transitionEnd) {
    var _b;
    var target6 = __rest(_a2, []);
    var element3 = visualElement2.getInstance();
    if (!(element3 instanceof Element))
      return { target: target6, transitionEnd };
    if (transitionEnd) {
      transitionEnd = __assign({}, transitionEnd);
    }
    visualElement2.forEachValue(function(value12) {
      var current2 = value12.get();
      if (!isCSSVariable2(current2))
        return;
      var resolved2 = getVariableValue(current2, element3);
      if (resolved2)
        value12.set(resolved2);
    });
    for (var key in target6) {
      var current = target6[key];
      if (!isCSSVariable2(current))
        continue;
      var resolved = getVariableValue(current, element3);
      if (!resolved)
        continue;
      target6[key] = resolved;
      if (transitionEnd)
        (_b = transitionEnd[key]) !== null && _b !== void 0 ? _b : transitionEnd[key] = current;
    }
    return { target: target6, transitionEnd };
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    "x",
    "y"
  ]);
  var isPositionalKey = function(key) {
    return positionalKeys.has(key);
  };
  var hasPositionalKey = function(target6) {
    return Object.keys(target6).some(isPositionalKey);
  };
  var setAndResetVelocity = function(value12, to2) {
    value12.set(to2, false);
    value12.set(to2);
  };
  var isNumOrPxType = function(v2) {
    return v2 === number || v2 === px2;
  };
  var BoundingBoxDimension;
  (function(BoundingBoxDimension2) {
    BoundingBoxDimension2["width"] = "width";
    BoundingBoxDimension2["height"] = "height";
    BoundingBoxDimension2["left"] = "left";
    BoundingBoxDimension2["right"] = "right";
    BoundingBoxDimension2["top"] = "top";
    BoundingBoxDimension2["bottom"] = "bottom";
  })(BoundingBoxDimension || (BoundingBoxDimension = {}));
  var getPosFromMatrix = function(matrix, pos) {
    return parseFloat(matrix.split(", ")[pos]);
  };
  var getTranslateFromMatrix = function(pos2, pos3) {
    return function(_bbox, _a2) {
      var transform2 = _a2.transform;
      if (transform2 === "none" || !transform2)
        return 0;
      var matrix3d = transform2.match(/^matrix3d\((.+)\)$/);
      if (matrix3d) {
        return getPosFromMatrix(matrix3d[1], pos3);
      } else {
        var matrix = transform2.match(/^matrix\((.+)\)$/);
        if (matrix) {
          return getPosFromMatrix(matrix[1], pos2);
        } else {
          return 0;
        }
      }
    };
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformProps.filter(function(key) {
    return !transformKeys.has(key);
  });
  function removeNonTranslationalTransform(visualElement2) {
    var removedTransforms = [];
    nonTranslationalTransformKeys.forEach(function(key) {
      var value12 = visualElement2.getValue(key);
      if (value12 !== void 0) {
        removedTransforms.push([key, value12.get()]);
        value12.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    if (removedTransforms.length)
      visualElement2.syncRender();
    return removedTransforms;
  }
  var positionalValues = {
    width: function(_a2, _b) {
      var x3 = _a2.x;
      var _c = _b.paddingLeft, paddingLeft = _c === void 0 ? "0" : _c, _d = _b.paddingRight, paddingRight = _d === void 0 ? "0" : _d;
      return x3.max - x3.min - parseFloat(paddingLeft) - parseFloat(paddingRight);
    },
    height: function(_a2, _b) {
      var y2 = _a2.y;
      var _c = _b.paddingTop, paddingTop = _c === void 0 ? "0" : _c, _d = _b.paddingBottom, paddingBottom = _d === void 0 ? "0" : _d;
      return y2.max - y2.min - parseFloat(paddingTop) - parseFloat(paddingBottom);
    },
    top: function(_bbox, _a2) {
      var top6 = _a2.top;
      return parseFloat(top6);
    },
    left: function(_bbox, _a2) {
      var left4 = _a2.left;
      return parseFloat(left4);
    },
    bottom: function(_a2, _b) {
      var y2 = _a2.y;
      var top6 = _b.top;
      return parseFloat(top6) + (y2.max - y2.min);
    },
    right: function(_a2, _b) {
      var x3 = _a2.x;
      var left4 = _b.left;
      return parseFloat(left4) + (x3.max - x3.min);
    },
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  var convertChangedValueTypes = function(target6, visualElement2, changedKeys) {
    var originBbox = visualElement2.measureViewportBox();
    var element3 = visualElement2.getInstance();
    var elementComputedStyle = getComputedStyle(element3);
    var display = elementComputedStyle.display;
    var origin3 = {};
    if (display === "none") {
      visualElement2.setStaticValue("display", target6.display || "block");
    }
    changedKeys.forEach(function(key) {
      origin3[key] = positionalValues[key](originBbox, elementComputedStyle);
    });
    visualElement2.syncRender();
    var targetBbox = visualElement2.measureViewportBox();
    changedKeys.forEach(function(key) {
      var value12 = visualElement2.getValue(key);
      setAndResetVelocity(value12, origin3[key]);
      target6[key] = positionalValues[key](targetBbox, elementComputedStyle);
    });
    return target6;
  };
  var checkAndConvertChangedValueTypes = function(visualElement2, target6, origin3, transitionEnd) {
    if (origin3 === void 0) {
      origin3 = {};
    }
    if (transitionEnd === void 0) {
      transitionEnd = {};
    }
    target6 = __assign({}, target6);
    transitionEnd = __assign({}, transitionEnd);
    var targetPositionalKeys = Object.keys(target6).filter(isPositionalKey);
    var removedTransformValues = [];
    var hasAttemptedToRemoveTransformValues = false;
    var changedValueTypeKeys = [];
    targetPositionalKeys.forEach(function(key) {
      var value12 = visualElement2.getValue(key);
      if (!visualElement2.hasValue(key))
        return;
      var from4 = origin3[key];
      var fromType = findDimensionValueType(from4);
      var to2 = target6[key];
      var toType;
      if (isKeyframesTarget(to2)) {
        var numKeyframes = to2.length;
        var fromIndex = to2[0] === null ? 1 : 0;
        from4 = to2[fromIndex];
        fromType = findDimensionValueType(from4);
        for (var i7 = fromIndex; i7 < numKeyframes; i7++) {
          if (!toType) {
            toType = findDimensionValueType(to2[i7]);
            invariant(toType === fromType || isNumOrPxType(fromType) && isNumOrPxType(toType), "Keyframes must be of the same dimension as the current value");
          } else {
            invariant(findDimensionValueType(to2[i7]) === toType, "All keyframes must be of the same type");
          }
        }
      } else {
        toType = findDimensionValueType(to2);
      }
      if (fromType !== toType) {
        if (isNumOrPxType(fromType) && isNumOrPxType(toType)) {
          var current = value12.get();
          if (typeof current === "string") {
            value12.set(parseFloat(current));
          }
          if (typeof to2 === "string") {
            target6[key] = parseFloat(to2);
          } else if (Array.isArray(to2) && toType === px2) {
            target6[key] = to2.map(parseFloat);
          }
        } else if ((fromType === null || fromType === void 0 ? void 0 : fromType.transform) && (toType === null || toType === void 0 ? void 0 : toType.transform) && (from4 === 0 || to2 === 0)) {
          if (from4 === 0) {
            value12.set(toType.transform(from4));
          } else {
            target6[key] = fromType.transform(to2);
          }
        } else {
          if (!hasAttemptedToRemoveTransformValues) {
            removedTransformValues = removeNonTranslationalTransform(visualElement2);
            hasAttemptedToRemoveTransformValues = true;
          }
          changedValueTypeKeys.push(key);
          transitionEnd[key] = transitionEnd[key] !== void 0 ? transitionEnd[key] : target6[key];
          setAndResetVelocity(value12, to2);
        }
      }
    });
    if (changedValueTypeKeys.length) {
      var scrollY_1 = changedValueTypeKeys.indexOf("height") >= 0 ? window.pageYOffset : null;
      var convertedTarget = convertChangedValueTypes(target6, visualElement2, changedValueTypeKeys);
      if (removedTransformValues.length) {
        removedTransformValues.forEach(function(_a2) {
          var _b = __read(_a2, 2), key = _b[0], value12 = _b[1];
          visualElement2.getValue(key).set(value12);
        });
      }
      visualElement2.syncRender();
      if (scrollY_1 !== null)
        window.scrollTo({ top: scrollY_1 });
      return { target: convertedTarget, transitionEnd };
    } else {
      return { target: target6, transitionEnd };
    }
  };
  function unitConversion(visualElement2, target6, origin3, transitionEnd) {
    return hasPositionalKey(target6) ? checkAndConvertChangedValueTypes(visualElement2, target6, origin3, transitionEnd) : { target: target6, transitionEnd };
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.mjs
  var parseDomVariant = function(visualElement2, target6, origin3, transitionEnd) {
    var resolved = resolveCSSVariables(visualElement2, target6, transitionEnd);
    target6 = resolved.target;
    transitionEnd = resolved.transitionEnd;
    return unitConversion(visualElement2, target6, origin3, transitionEnd);
  };

  // node_modules/framer-motion/dist/es/render/html/visual-element.mjs
  function getComputedStyle3(element3) {
    return window.getComputedStyle(element3);
  }
  var htmlConfig = {
    treeType: "dom",
    readValueFromInstance: function(domElement, key) {
      if (isTransformProp(key)) {
        var defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        var computedStyle = getComputedStyle3(domElement);
        return (isCSSVariable(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
      }
    },
    sortNodePosition: function(a4, b4) {
      return a4.compareDocumentPosition(b4) & 2 ? 1 : -1;
    },
    getBaseTarget: function(props, key) {
      var _a2;
      return (_a2 = props.style) === null || _a2 === void 0 ? void 0 : _a2[key];
    },
    measureViewportBox: function(element3, _a2) {
      var transformPagePoint = _a2.transformPagePoint;
      return measureViewportBox(element3, transformPagePoint);
    },
    resetTransform: function(element3, domElement, props) {
      var transformTemplate = props.transformTemplate;
      domElement.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
      element3.scheduleRender();
    },
    restoreTransform: function(instance, mutableState) {
      instance.style.transform = mutableState.style.transform;
    },
    removeValueFromRenderState: function(key, _a2) {
      var vars = _a2.vars, style3 = _a2.style;
      delete vars[key];
      delete style3[key];
    },
    makeTargetAnimatable: function(element3, _a2, _b, isMounted) {
      var transformValues = _b.transformValues;
      if (isMounted === void 0) {
        isMounted = true;
      }
      var transition3 = _a2.transition, transitionEnd = _a2.transitionEnd, target6 = __rest(_a2, ["transition", "transitionEnd"]);
      var origin3 = getOrigin(target6, transition3 || {}, element3);
      if (transformValues) {
        if (transitionEnd)
          transitionEnd = transformValues(transitionEnd);
        if (target6)
          target6 = transformValues(target6);
        if (origin3)
          origin3 = transformValues(origin3);
      }
      if (isMounted) {
        checkTargetForNewValues(element3, target6, origin3);
        var parsed = parseDomVariant(element3, target6, origin3, transitionEnd);
        transitionEnd = parsed.transitionEnd;
        target6 = parsed.target;
      }
      return __assign({ transition: transition3, transitionEnd }, target6);
    },
    scrapeMotionValuesFromProps,
    build: function(element3, renderState, latestValues, options3, props) {
      if (element3.isVisible !== void 0) {
        renderState.style.visibility = element3.isVisible ? "visible" : "hidden";
      }
      buildHTMLStyles(renderState, latestValues, options3, props.transformTemplate);
    },
    render: renderHTML
  };
  var htmlVisualElement = visualElement(htmlConfig);

  // node_modules/framer-motion/dist/es/render/svg/visual-element.mjs
  var svgVisualElement = visualElement(__assign(__assign({}, htmlConfig), { getBaseTarget: function(props, key) {
    return props[key];
  }, readValueFromInstance: function(domElement, key) {
    var _a2;
    if (isTransformProp(key)) {
      return ((_a2 = getDefaultValueType(key)) === null || _a2 === void 0 ? void 0 : _a2.default) || 0;
    }
    key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
    return domElement.getAttribute(key);
  }, scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2, build: function(_element, renderState, latestValues, options3, props) {
    buildSVGAttrs(renderState, latestValues, options3, props.transformTemplate);
  }, render: renderSVG }));

  // node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var createDomVisualElement = function(Component, options3) {
    return isSVGComponent(Component) ? svgVisualElement(options3, { enableHardwareAcceleration: false }) : htmlVisualElement(options3, { enableHardwareAcceleration: true });
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var import_react35 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
  function pixelsToPercent(pixels, axis) {
    if (axis.max === axis.min)
      return 0;
    return pixels / (axis.max - axis.min) * 100;
  }
  var correctBorderRadius = {
    correct: function(latest, node2) {
      if (!node2.target)
        return latest;
      if (typeof latest === "string") {
        if (px2.test(latest)) {
          latest = parseFloat(latest);
        } else {
          return latest;
        }
      }
      var x3 = pixelsToPercent(latest, node2.target.x);
      var y2 = pixelsToPercent(latest, node2.target.y);
      return "".concat(x3, "% ").concat(y2, "%");
    }
  };

  // node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
  var varToken = "_$css";
  var correctBoxShadow = {
    correct: function(latest, _a2) {
      var treeScale = _a2.treeScale, projectionDelta = _a2.projectionDelta;
      var original = latest;
      var containsCSSVariables = latest.includes("var(");
      var cssVariables = [];
      if (containsCSSVariables) {
        latest = latest.replace(cssVariableRegex, function(match6) {
          cssVariables.push(match6);
          return varToken;
        });
      }
      var shadow2 = complex.parse(latest);
      if (shadow2.length > 5)
        return original;
      var template2 = complex.createTransformer(latest);
      var offset2 = typeof shadow2[0] !== "number" ? 1 : 0;
      var xScale = projectionDelta.x.scale * treeScale.x;
      var yScale = projectionDelta.y.scale * treeScale.y;
      shadow2[0 + offset2] /= xScale;
      shadow2[1 + offset2] /= yScale;
      var averageScale = mix(xScale, yScale, 0.5);
      if (typeof shadow2[2 + offset2] === "number")
        shadow2[2 + offset2] /= averageScale;
      if (typeof shadow2[3 + offset2] === "number")
        shadow2[3 + offset2] /= averageScale;
      var output2 = template2(shadow2);
      if (containsCSSVariables) {
        var i_1 = 0;
        output2 = output2.replace(varToken, function() {
          var cssVariable = cssVariables[i_1];
          i_1++;
          return cssVariable;
        });
      }
      return output2;
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var MeasureLayoutWithContext = function(_super) {
    __extends(MeasureLayoutWithContext2, _super);
    function MeasureLayoutWithContext2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    MeasureLayoutWithContext2.prototype.componentDidMount = function() {
      var _this = this;
      var _a2 = this.props, visualElement2 = _a2.visualElement, layoutGroup = _a2.layoutGroup, switchLayoutGroup = _a2.switchLayoutGroup, layoutId4 = _a2.layoutId;
      var projection = visualElement2.projection;
      addScaleCorrector(defaultScaleCorrectors);
      if (projection) {
        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
          layoutGroup.group.add(projection);
        if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId4) {
          switchLayoutGroup.register(projection);
        }
        projection.root.didUpdate();
        projection.addEventListener("animationComplete", function() {
          _this.safeToRemove();
        });
        projection.setOptions(__assign(__assign({}, projection.options), { onExitComplete: function() {
          return _this.safeToRemove();
        } }));
      }
      globalProjectionState.hasEverUpdated = true;
    };
    MeasureLayoutWithContext2.prototype.getSnapshotBeforeUpdate = function(prevProps) {
      var _this = this;
      var _a2 = this.props, layoutDependency = _a2.layoutDependency, visualElement2 = _a2.visualElement, drag3 = _a2.drag, isPresent = _a2.isPresent;
      var projection = visualElement2.projection;
      if (!projection)
        return null;
      projection.isPresent = isPresent;
      if (drag3 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
        projection.willUpdate();
      } else {
        this.safeToRemove();
      }
      if (prevProps.isPresent !== isPresent) {
        if (isPresent) {
          projection.promote();
        } else if (!projection.relegate()) {
          es_default.postRender(function() {
            var _a3;
            if (!((_a3 = projection.getStack()) === null || _a3 === void 0 ? void 0 : _a3.members.length)) {
              _this.safeToRemove();
            }
          });
        }
      }
      return null;
    };
    MeasureLayoutWithContext2.prototype.componentDidUpdate = function() {
      var projection = this.props.visualElement.projection;
      if (projection) {
        projection.root.didUpdate();
        if (!projection.currentAnimation && projection.isLead()) {
          this.safeToRemove();
        }
      }
    };
    MeasureLayoutWithContext2.prototype.componentWillUnmount = function() {
      var _a2 = this.props, visualElement2 = _a2.visualElement, layoutGroup = _a2.layoutGroup, promoteContext = _a2.switchLayoutGroup;
      var projection = visualElement2.projection;
      if (projection) {
        projection.scheduleCheckAfterUnmount();
        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)
          layoutGroup.group.remove(projection);
        if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)
          promoteContext.deregister(projection);
      }
    };
    MeasureLayoutWithContext2.prototype.safeToRemove = function() {
      var safeToRemove = this.props.safeToRemove;
      safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();
    };
    MeasureLayoutWithContext2.prototype.render = function() {
      return null;
    };
    return MeasureLayoutWithContext2;
  }(import_react35.default.Component);
  function MeasureLayout(props) {
    var _a2 = __read(usePresence(), 2), isPresent = _a2[0], safeToRemove = _a2[1];
    var layoutGroup = (0, import_react35.useContext)(LayoutGroupContext);
    return import_react35.default.createElement(MeasureLayoutWithContext, __assign({}, props, { layoutGroup, switchLayoutGroup: (0, import_react35.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove }));
  }
  var defaultScaleCorrectors = {
    borderRadius: __assign(__assign({}, correctBorderRadius), { applyTo: [
      "borderTopLeftRadius",
      "borderTopRightRadius",
      "borderBottomLeftRadius",
      "borderBottomRightRadius"
    ] }),
    borderTopLeftRadius: correctBorderRadius,
    borderTopRightRadius: correctBorderRadius,
    borderBottomLeftRadius: correctBorderRadius,
    borderBottomRightRadius: correctBorderRadius,
    boxShadow: correctBoxShadow
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/index.mjs
  var layoutFeatures = {
    measureLayout: MeasureLayout
  };

  // node_modules/framer-motion/dist/es/animation/animate.mjs
  function animate2(from4, to2, transition3) {
    if (transition3 === void 0) {
      transition3 = {};
    }
    var value12 = isMotionValue(from4) ? from4 : motionValue(from4);
    startAnimation("", value12, to2, transition3);
    return {
      stop: function() {
        return value12.stop();
      },
      isAnimating: function() {
        return value12.isAnimating();
      }
    };
  }

  // node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
  var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
  var numBorders = borders.length;
  var asNumber = function(value12) {
    return typeof value12 === "string" ? parseFloat(value12) : value12;
  };
  var isPx = function(value12) {
    return typeof value12 === "number" || px2.test(value12);
  };
  function mixValues(target6, follow, lead, progress3, shouldCrossfadeOpacity, isOnlyMember) {
    var _a2, _b, _c, _d;
    if (shouldCrossfadeOpacity) {
      target6.opacity = mix(0, (_a2 = lead.opacity) !== null && _a2 !== void 0 ? _a2 : 1, easeCrossfadeIn(progress3));
      target6.opacityExit = mix((_b = follow.opacity) !== null && _b !== void 0 ? _b : 1, 0, easeCrossfadeOut(progress3));
    } else if (isOnlyMember) {
      target6.opacity = mix((_c = follow.opacity) !== null && _c !== void 0 ? _c : 1, (_d = lead.opacity) !== null && _d !== void 0 ? _d : 1, progress3);
    }
    for (var i7 = 0; i7 < numBorders; i7++) {
      var borderLabel = "border".concat(borders[i7], "Radius");
      var followRadius = getRadius(follow, borderLabel);
      var leadRadius = getRadius(lead, borderLabel);
      if (followRadius === void 0 && leadRadius === void 0)
        continue;
      followRadius || (followRadius = 0);
      leadRadius || (leadRadius = 0);
      var canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
      if (canMix) {
        target6[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress3), 0);
        if (percent2.test(leadRadius) || percent2.test(followRadius)) {
          target6[borderLabel] += "%";
        }
      } else {
        target6[borderLabel] = leadRadius;
      }
    }
    if (follow.rotate || lead.rotate) {
      target6.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress3);
    }
  }
  function getRadius(values3, radiusName) {
    var _a2;
    return (_a2 = values3[radiusName]) !== null && _a2 !== void 0 ? _a2 : values3.borderRadius;
  }
  var easeCrossfadeIn = compress(0, 0.5, circOut);
  var easeCrossfadeOut = compress(0.5, 0.95, linear);
  function compress(min8, max7, easing) {
    return function(p3) {
      if (p3 < min8)
        return 0;
      if (p3 > max7)
        return 1;
      return easing(progress2(min8, max7, p3));
    };
  }

  // node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
  function copyAxisInto(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
  }
  function copyBoxInto(box6, originBox) {
    copyAxisInto(box6.x, originBox.x);
    copyAxisInto(box6.y, originBox.y);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
  function removePointDelta(point, translate2, scale2, originPoint, boxScale) {
    point -= translate2;
    point = scalePoint(point, 1 / scale2, originPoint);
    if (boxScale !== void 0) {
      point = scalePoint(point, 1 / boxScale, originPoint);
    }
    return point;
  }
  function removeAxisDelta(axis, translate2, scale2, origin3, boxScale, originAxis, sourceAxis) {
    if (translate2 === void 0) {
      translate2 = 0;
    }
    if (scale2 === void 0) {
      scale2 = 1;
    }
    if (origin3 === void 0) {
      origin3 = 0.5;
    }
    if (originAxis === void 0) {
      originAxis = axis;
    }
    if (sourceAxis === void 0) {
      sourceAxis = axis;
    }
    if (percent2.test(translate2)) {
      translate2 = parseFloat(translate2);
      var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate2 / 100);
      translate2 = relativeProgress - sourceAxis.min;
    }
    if (typeof translate2 !== "number")
      return;
    var originPoint = mix(originAxis.min, originAxis.max, origin3);
    if (axis === originAxis)
      originPoint -= translate2;
    axis.min = removePointDelta(axis.min, translate2, scale2, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate2, scale2, originPoint, boxScale);
  }
  function removeAxisTransforms(axis, transforms, _a2, origin3, sourceAxis) {
    var _b = __read(_a2, 3), key = _b[0], scaleKey = _b[1], originKey = _b[2];
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin3, sourceAxis);
  }
  var xKeys2 = ["x", "scaleX", "originX"];
  var yKeys2 = ["y", "scaleY", "originY"];
  function removeBoxTransforms(box6, transforms, originBox, sourceBox) {
    removeAxisTransforms(box6.x, transforms, xKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);
    removeAxisTransforms(box6.y, transforms, yKeys2, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
  function isAxisDeltaZero(delta) {
    return delta.translate === 0 && delta.scale === 1;
  }
  function isDeltaZero(delta) {
    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
  }
  function boxEquals(a4, b4) {
    return a4.x.min === b4.x.min && a4.x.max === b4.x.max && a4.y.min === b4.y.min && a4.y.max === b4.y.max;
  }

  // node_modules/framer-motion/dist/es/projection/shared/stack.mjs
  var NodeStack = function() {
    function NodeStack2() {
      this.members = [];
    }
    NodeStack2.prototype.add = function(node2) {
      addUniqueItem(this.members, node2);
      node2.scheduleRender();
    };
    NodeStack2.prototype.remove = function(node2) {
      removeItem(this.members, node2);
      if (node2 === this.prevLead) {
        this.prevLead = void 0;
      }
      if (node2 === this.lead) {
        var prevLead = this.members[this.members.length - 1];
        if (prevLead) {
          this.promote(prevLead);
        }
      }
    };
    NodeStack2.prototype.relegate = function(node2) {
      var indexOfNode = this.members.findIndex(function(member2) {
        return node2 === member2;
      });
      if (indexOfNode === 0)
        return false;
      var prevLead;
      for (var i7 = indexOfNode; i7 >= 0; i7--) {
        var member = this.members[i7];
        if (member.isPresent !== false) {
          prevLead = member;
          break;
        }
      }
      if (prevLead) {
        this.promote(prevLead);
        return true;
      } else {
        return false;
      }
    };
    NodeStack2.prototype.promote = function(node2, preserveFollowOpacity) {
      var _a2;
      var prevLead = this.lead;
      if (node2 === prevLead)
        return;
      this.prevLead = prevLead;
      this.lead = node2;
      node2.show();
      if (prevLead) {
        prevLead.instance && prevLead.scheduleRender();
        node2.scheduleRender();
        node2.resumeFrom = prevLead;
        if (preserveFollowOpacity) {
          node2.resumeFrom.preserveOpacity = true;
        }
        if (prevLead.snapshot) {
          node2.snapshot = prevLead.snapshot;
          node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
          node2.snapshot.isShared = true;
        }
        if ((_a2 = node2.root) === null || _a2 === void 0 ? void 0 : _a2.isUpdating) {
          node2.isLayoutDirty = true;
        }
        var crossfade2 = node2.options.crossfade;
        if (crossfade2 === false) {
          prevLead.hide();
        }
      }
    };
    NodeStack2.prototype.exitAnimationComplete = function() {
      this.members.forEach(function(node2) {
        var _a2, _b, _c, _d, _e2;
        (_b = (_a2 = node2.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a2);
        (_e2 = (_c = node2.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e2 === void 0 ? void 0 : _e2.call(_d);
      });
    };
    NodeStack2.prototype.scheduleRender = function() {
      this.members.forEach(function(node2) {
        node2.instance && node2.scheduleRender(false);
      });
    };
    NodeStack2.prototype.removeLeadSnapshot = function() {
      if (this.lead && this.lead.snapshot) {
        this.lead.snapshot = void 0;
      }
    };
    return NodeStack2;
  }();

  // node_modules/framer-motion/dist/es/projection/styles/transform.mjs
  var identityProjection = "translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)";
  function buildProjectionTransform(delta, treeScale, latestTransform) {
    var xTranslate = delta.x.translate / treeScale.x;
    var yTranslate = delta.y.translate / treeScale.y;
    var transform2 = "translate3d(".concat(xTranslate, "px, ").concat(yTranslate, "px, 0) ");
    transform2 += "scale(".concat(1 / treeScale.x, ", ").concat(1 / treeScale.y, ") ");
    if (latestTransform) {
      var rotate = latestTransform.rotate, rotateX = latestTransform.rotateX, rotateY = latestTransform.rotateY;
      if (rotate)
        transform2 += "rotate(".concat(rotate, "deg) ");
      if (rotateX)
        transform2 += "rotateX(".concat(rotateX, "deg) ");
      if (rotateY)
        transform2 += "rotateY(".concat(rotateY, "deg) ");
    }
    var elementScaleX = delta.x.scale * treeScale.x;
    var elementScaleY = delta.y.scale * treeScale.y;
    transform2 += "scale(".concat(elementScaleX, ", ").concat(elementScaleY, ")");
    return transform2 === identityProjection ? "none" : transform2;
  }

  // node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
  var compareByDepth = function(a4, b4) {
    return a4.depth - b4.depth;
  };

  // node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
  var FlatTree = function() {
    function FlatTree2() {
      this.children = [];
      this.isDirty = false;
    }
    FlatTree2.prototype.add = function(child) {
      addUniqueItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.remove = function(child) {
      removeItem(this.children, child);
      this.isDirty = true;
    };
    FlatTree2.prototype.forEach = function(callback2) {
      this.isDirty && this.children.sort(compareByDepth);
      this.isDirty = false;
      this.children.forEach(callback2);
    };
    return FlatTree2;
  }();

  // node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
  var animationTarget = 1e3;
  function createProjectionNode(_a2) {
    var attachResizeListener = _a2.attachResizeListener, defaultParent = _a2.defaultParent, measureScroll = _a2.measureScroll, checkIsScrollRoot = _a2.checkIsScrollRoot, resetTransform = _a2.resetTransform;
    return function() {
      function ProjectionNode(id5, latestValues, parent2) {
        var _this = this;
        if (latestValues === void 0) {
          latestValues = {};
        }
        if (parent2 === void 0) {
          parent2 = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();
        }
        this.children = /* @__PURE__ */ new Set();
        this.options = {};
        this.isTreeAnimating = false;
        this.isAnimationBlocked = false;
        this.isLayoutDirty = false;
        this.updateManuallyBlocked = false;
        this.updateBlockedByResize = false;
        this.isUpdating = false;
        this.isSVG = false;
        this.needsReset = false;
        this.shouldResetTransform = false;
        this.treeScale = { x: 1, y: 1 };
        this.eventHandlers = /* @__PURE__ */ new Map();
        this.potentialNodes = /* @__PURE__ */ new Map();
        this.checkUpdateFailed = function() {
          if (_this.isUpdating) {
            _this.isUpdating = false;
            _this.clearAllSnapshots();
          }
        };
        this.updateProjection = function() {
          _this.nodes.forEach(resolveTargetDelta);
          _this.nodes.forEach(calcProjection);
        };
        this.hasProjected = false;
        this.isVisible = true;
        this.animationProgress = 0;
        this.sharedNodes = /* @__PURE__ */ new Map();
        this.id = id5;
        this.latestValues = latestValues;
        this.root = parent2 ? parent2.root || parent2 : this;
        this.path = parent2 ? __spreadArray(__spreadArray([], __read(parent2.path), false), [parent2], false) : [];
        this.parent = parent2;
        this.depth = parent2 ? parent2.depth + 1 : 0;
        id5 && this.root.registerPotentialNode(id5, this);
        for (var i7 = 0; i7 < this.path.length; i7++) {
          this.path[i7].shouldResetTransform = true;
        }
        if (this.root === this)
          this.nodes = new FlatTree();
      }
      ProjectionNode.prototype.addEventListener = function(name15, handler2) {
        if (!this.eventHandlers.has(name15)) {
          this.eventHandlers.set(name15, new SubscriptionManager());
        }
        return this.eventHandlers.get(name15).add(handler2);
      };
      ProjectionNode.prototype.notifyListeners = function(name15) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var subscriptionManager = this.eventHandlers.get(name15);
        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));
      };
      ProjectionNode.prototype.hasListeners = function(name15) {
        return this.eventHandlers.has(name15);
      };
      ProjectionNode.prototype.registerPotentialNode = function(id5, node2) {
        this.potentialNodes.set(id5, node2);
      };
      ProjectionNode.prototype.mount = function(instance, isLayoutDirty) {
        var _this = this;
        var _a3;
        if (isLayoutDirty === void 0) {
          isLayoutDirty = false;
        }
        if (this.instance)
          return;
        this.isSVG = instance instanceof SVGElement && instance.tagName !== "svg";
        this.instance = instance;
        var _b = this.options, layoutId4 = _b.layoutId, layout4 = _b.layout, visualElement2 = _b.visualElement;
        if (visualElement2 && !visualElement2.getInstance()) {
          visualElement2.mount(instance);
        }
        this.root.nodes.add(this);
        (_a3 = this.parent) === null || _a3 === void 0 ? void 0 : _a3.children.add(this);
        this.id && this.root.potentialNodes.delete(this.id);
        if (isLayoutDirty && (layout4 || layoutId4)) {
          this.isLayoutDirty = true;
        }
        if (attachResizeListener) {
          var unblockTimeout_1;
          var resizeUnblockUpdate_1 = function() {
            return _this.root.updateBlockedByResize = false;
          };
          attachResizeListener(instance, function() {
            _this.root.updateBlockedByResize = true;
            clearTimeout(unblockTimeout_1);
            unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);
            if (globalProjectionState.hasAnimatedSinceResize) {
              globalProjectionState.hasAnimatedSinceResize = false;
              _this.nodes.forEach(finishAnimation);
            }
          });
        }
        if (layoutId4) {
          this.root.registerSharedNode(layoutId4, this);
        }
        if (this.options.animate !== false && visualElement2 && (layoutId4 || layout4)) {
          this.addEventListener("didUpdate", function(_a4) {
            var _b2, _c, _d, _e2, _f;
            var delta = _a4.delta, hasLayoutChanged = _a4.hasLayoutChanged, hasRelativeTargetChanged = _a4.hasRelativeTargetChanged, newLayout = _a4.layout;
            if (_this.isTreeAnimationBlocked()) {
              _this.target = void 0;
              _this.relativeTarget = void 0;
              return;
            }
            var layoutTransition = (_c = (_b2 = _this.options.transition) !== null && _b2 !== void 0 ? _b2 : visualElement2.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;
            var _g = visualElement2.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete2 = _g.onLayoutAnimationComplete;
            var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;
            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
            if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {
              if (_this.resumeFrom) {
                _this.resumingFrom = _this.resumeFrom;
                _this.resumingFrom.resumingFrom = void 0;
              }
              _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
              var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, "layout")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete2 });
              if (visualElement2.shouldReduceMotion) {
                animationOptions.delay = 0;
                animationOptions.type = false;
              }
              _this.startAnimation(animationOptions);
            } else {
              if (!hasLayoutChanged && _this.animationProgress === 0) {
                _this.finishAnimation();
              }
              _this.isLead() && ((_f = (_e2 = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e2));
            }
            _this.targetLayout = newLayout;
          });
        }
      };
      ProjectionNode.prototype.unmount = function() {
        var _a3, _b;
        this.options.layoutId && this.willUpdate();
        this.root.nodes.remove(this);
        (_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.remove(this);
        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);
        this.instance = void 0;
        cancelSync.preRender(this.updateProjection);
      };
      ProjectionNode.prototype.blockUpdate = function() {
        this.updateManuallyBlocked = true;
      };
      ProjectionNode.prototype.unblockUpdate = function() {
        this.updateManuallyBlocked = false;
      };
      ProjectionNode.prototype.isUpdateBlocked = function() {
        return this.updateManuallyBlocked || this.updateBlockedByResize;
      };
      ProjectionNode.prototype.isTreeAnimationBlocked = function() {
        var _a3;
        return this.isAnimationBlocked || ((_a3 = this.parent) === null || _a3 === void 0 ? void 0 : _a3.isTreeAnimationBlocked()) || false;
      };
      ProjectionNode.prototype.startUpdate = function() {
        var _a3;
        if (this.isUpdateBlocked())
          return;
        this.isUpdating = true;
        (_a3 = this.nodes) === null || _a3 === void 0 ? void 0 : _a3.forEach(resetRotation);
      };
      ProjectionNode.prototype.willUpdate = function(shouldNotifyListeners) {
        var _a3, _b, _c;
        if (shouldNotifyListeners === void 0) {
          shouldNotifyListeners = true;
        }
        if (this.root.isUpdateBlocked()) {
          (_b = (_a3 = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a3);
          return;
        }
        !this.root.isUpdating && this.root.startUpdate();
        if (this.isLayoutDirty)
          return;
        this.isLayoutDirty = true;
        for (var i7 = 0; i7 < this.path.length; i7++) {
          var node2 = this.path[i7];
          node2.shouldResetTransform = true;
          node2.updateScroll();
        }
        var _d = this.options, layoutId4 = _d.layoutId, layout4 = _d.layout;
        if (layoutId4 === void 0 && !layout4)
          return;
        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;
        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
        this.updateSnapshot();
        shouldNotifyListeners && this.notifyListeners("willUpdate");
      };
      ProjectionNode.prototype.didUpdate = function() {
        var updateWasBlocked = this.isUpdateBlocked();
        if (updateWasBlocked) {
          this.unblockUpdate();
          this.clearAllSnapshots();
          this.nodes.forEach(clearMeasurements);
          return;
        }
        if (!this.isUpdating)
          return;
        this.isUpdating = false;
        if (this.potentialNodes.size) {
          this.potentialNodes.forEach(mountNodeEarly);
          this.potentialNodes.clear();
        }
        this.nodes.forEach(resetTransformStyle);
        this.nodes.forEach(updateLayout);
        this.nodes.forEach(notifyLayoutUpdate);
        this.clearAllSnapshots();
        flushSync.update();
        flushSync.preRender();
        flushSync.render();
      };
      ProjectionNode.prototype.clearAllSnapshots = function() {
        this.nodes.forEach(clearSnapshot);
        this.sharedNodes.forEach(removeLeadSnapshots);
      };
      ProjectionNode.prototype.scheduleUpdateProjection = function() {
        es_default.preRender(this.updateProjection, false, true);
      };
      ProjectionNode.prototype.scheduleCheckAfterUnmount = function() {
        var _this = this;
        es_default.postRender(function() {
          if (_this.isLayoutDirty) {
            _this.root.didUpdate();
          } else {
            _this.root.checkUpdateFailed();
          }
        });
      };
      ProjectionNode.prototype.updateSnapshot = function() {
        if (this.snapshot || !this.instance)
          return;
        var measured = this.measure();
        var layout4 = this.removeTransform(this.removeElementScroll(measured));
        roundBox(layout4);
        this.snapshot = {
          measured,
          layout: layout4,
          latestValues: {}
        };
      };
      ProjectionNode.prototype.updateLayout = function() {
        var _a3;
        if (!this.instance)
          return;
        this.updateScroll();
        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
          return;
        }
        if (this.resumeFrom && !this.resumeFrom.instance) {
          for (var i7 = 0; i7 < this.path.length; i7++) {
            var node2 = this.path[i7];
            node2.updateScroll();
          }
        }
        var measured = this.measure();
        roundBox(measured);
        var prevLayout = this.layout;
        this.layout = {
          measured,
          actual: this.removeElementScroll(measured)
        };
        this.layoutCorrected = createBox();
        this.isLayoutDirty = false;
        this.projectionDelta = void 0;
        this.notifyListeners("measure", this.layout.actual);
        (_a3 = this.options.visualElement) === null || _a3 === void 0 ? void 0 : _a3.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);
      };
      ProjectionNode.prototype.updateScroll = function() {
        if (this.options.layoutScroll && this.instance) {
          this.isScrollRoot = checkIsScrollRoot(this.instance);
          this.scroll = measureScroll(this.instance);
        }
      };
      ProjectionNode.prototype.resetTransform = function() {
        var _a3;
        if (!resetTransform)
          return;
        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;
        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
        var transformTemplate = (_a3 = this.options.visualElement) === null || _a3 === void 0 ? void 0 : _a3.getProps().transformTemplate;
        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, "");
        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
          resetTransform(this.instance, transformTemplateValue);
          this.shouldResetTransform = false;
          this.scheduleRender();
        }
      };
      ProjectionNode.prototype.measure = function() {
        var visualElement2 = this.options.visualElement;
        if (!visualElement2)
          return createBox();
        var box6 = visualElement2.measureViewportBox();
        var scroll3 = this.root.scroll;
        if (scroll3) {
          translateAxis(box6.x, scroll3.x);
          translateAxis(box6.y, scroll3.y);
        }
        return box6;
      };
      ProjectionNode.prototype.removeElementScroll = function(box6) {
        var boxWithoutScroll = createBox();
        copyBoxInto(boxWithoutScroll, box6);
        for (var i7 = 0; i7 < this.path.length; i7++) {
          var node2 = this.path[i7];
          var scroll_1 = node2.scroll, options3 = node2.options, isScrollRoot = node2.isScrollRoot;
          if (node2 !== this.root && scroll_1 && options3.layoutScroll) {
            if (isScrollRoot) {
              copyBoxInto(boxWithoutScroll, box6);
              var rootScroll = this.root.scroll;
              if (rootScroll) {
                translateAxis(boxWithoutScroll.x, -rootScroll.x);
                translateAxis(boxWithoutScroll.y, -rootScroll.y);
              }
            }
            translateAxis(boxWithoutScroll.x, scroll_1.x);
            translateAxis(boxWithoutScroll.y, scroll_1.y);
          }
        }
        return boxWithoutScroll;
      };
      ProjectionNode.prototype.applyTransform = function(box6, transformOnly) {
        if (transformOnly === void 0) {
          transformOnly = false;
        }
        var withTransforms = createBox();
        copyBoxInto(withTransforms, box6);
        for (var i7 = 0; i7 < this.path.length; i7++) {
          var node2 = this.path[i7];
          if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
            transformBox(withTransforms, {
              x: -node2.scroll.x,
              y: -node2.scroll.y
            });
          }
          if (!hasTransform(node2.latestValues))
            continue;
          transformBox(withTransforms, node2.latestValues);
        }
        if (hasTransform(this.latestValues)) {
          transformBox(withTransforms, this.latestValues);
        }
        return withTransforms;
      };
      ProjectionNode.prototype.removeTransform = function(box6) {
        var _a3;
        var boxWithoutTransform = createBox();
        copyBoxInto(boxWithoutTransform, box6);
        for (var i7 = 0; i7 < this.path.length; i7++) {
          var node2 = this.path[i7];
          if (!node2.instance)
            continue;
          if (!hasTransform(node2.latestValues))
            continue;
          hasScale(node2.latestValues) && node2.updateSnapshot();
          var sourceBox = createBox();
          var nodeBox = node2.measure();
          copyBoxInto(sourceBox, nodeBox);
          removeBoxTransforms(boxWithoutTransform, node2.latestValues, (_a3 = node2.snapshot) === null || _a3 === void 0 ? void 0 : _a3.layout, sourceBox);
        }
        if (hasTransform(this.latestValues)) {
          removeBoxTransforms(boxWithoutTransform, this.latestValues);
        }
        return boxWithoutTransform;
      };
      ProjectionNode.prototype.setTargetDelta = function(delta) {
        this.targetDelta = delta;
        this.root.scheduleUpdateProjection();
      };
      ProjectionNode.prototype.setOptions = function(options3) {
        var _a3;
        this.options = __assign(__assign(__assign({}, this.options), options3), { crossfade: (_a3 = options3.crossfade) !== null && _a3 !== void 0 ? _a3 : true });
      };
      ProjectionNode.prototype.clearMeasurements = function() {
        this.scroll = void 0;
        this.layout = void 0;
        this.snapshot = void 0;
        this.prevTransformTemplateValue = void 0;
        this.targetDelta = void 0;
        this.target = void 0;
        this.isLayoutDirty = false;
      };
      ProjectionNode.prototype.resolveTargetDelta = function() {
        var _a3;
        var _b = this.options, layout4 = _b.layout, layoutId4 = _b.layoutId;
        if (!this.layout || !(layout4 || layoutId4))
          return;
        if (!this.targetDelta && !this.relativeTarget) {
          this.relativeParent = this.getClosestProjectingParent();
          if (this.relativeParent && this.relativeParent.layout) {
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          }
        }
        if (!this.relativeTarget && !this.targetDelta)
          return;
        if (!this.target) {
          this.target = createBox();
          this.targetWithTransforms = createBox();
        }
        if (this.relativeTarget && this.relativeTargetOrigin && ((_a3 = this.relativeParent) === null || _a3 === void 0 ? void 0 : _a3.target)) {
          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
        } else if (this.targetDelta) {
          if (Boolean(this.resumingFrom)) {
            this.target = this.applyTransform(this.layout.actual);
          } else {
            copyBoxInto(this.target, this.layout.actual);
          }
          applyBoxDelta(this.target, this.targetDelta);
        } else {
          copyBoxInto(this.target, this.layout.actual);
        }
        if (this.attemptToResolveRelativeTarget) {
          this.attemptToResolveRelativeTarget = false;
          this.relativeParent = this.getClosestProjectingParent();
          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          }
        }
      };
      ProjectionNode.prototype.getClosestProjectingParent = function() {
        if (!this.parent || hasTransform(this.parent.latestValues))
          return void 0;
        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {
          return this.parent;
        } else {
          return this.parent.getClosestProjectingParent();
        }
      };
      ProjectionNode.prototype.calcProjection = function() {
        var _a3;
        var _b = this.options, layout4 = _b.layout, layoutId4 = _b.layoutId;
        this.isTreeAnimating = Boolean(((_a3 = this.parent) === null || _a3 === void 0 ? void 0 : _a3.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);
        if (!this.isTreeAnimating) {
          this.targetDelta = this.relativeTarget = void 0;
        }
        if (!this.layout || !(layout4 || layoutId4))
          return;
        var lead = this.getLead();
        copyBoxInto(this.layoutCorrected, this.layout.actual);
        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);
        var target6 = lead.target;
        if (!target6)
          return;
        if (!this.projectionDelta) {
          this.projectionDelta = createDelta();
          this.projectionDeltaWithTransform = createDelta();
        }
        var prevTreeScaleX = this.treeScale.x;
        var prevTreeScaleY = this.treeScale.y;
        var prevProjectionTransform = this.projectionTransform;
        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target6, this.latestValues);
        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);
        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {
          this.hasProjected = true;
          this.scheduleRender();
          this.notifyListeners("projectionUpdate", target6);
        }
      };
      ProjectionNode.prototype.hide = function() {
        this.isVisible = false;
      };
      ProjectionNode.prototype.show = function() {
        this.isVisible = true;
      };
      ProjectionNode.prototype.scheduleRender = function(notifyAll) {
        var _a3, _b, _c;
        if (notifyAll === void 0) {
          notifyAll = true;
        }
        (_b = (_a3 = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a3);
        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());
        if (this.resumingFrom && !this.resumingFrom.instance) {
          this.resumingFrom = void 0;
        }
      };
      ProjectionNode.prototype.setAnimationOrigin = function(delta, hasOnlyRelativeTargetChanged) {
        var _this = this;
        var _a3;
        if (hasOnlyRelativeTargetChanged === void 0) {
          hasOnlyRelativeTargetChanged = false;
        }
        var snapshot = this.snapshot;
        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};
        var mixedValues = __assign({}, this.latestValues);
        var targetDelta = createDelta();
        this.relativeTarget = this.relativeTargetOrigin = void 0;
        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
        var relativeLayout = createBox();
        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;
        var isOnlyMember = (((_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.members.length) || 0) <= 1;
        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
        this.animationProgress = 0;
        this.mixTargetDelta = function(latest) {
          var _a4;
          var progress3 = latest / 1e3;
          mixAxisDelta(targetDelta.x, delta.x, progress3);
          mixAxisDelta(targetDelta.y, delta.y, progress3);
          _this.setTargetDelta(targetDelta);
          if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a4 = _this.relativeParent) === null || _a4 === void 0 ? void 0 : _a4.layout)) {
            calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);
            mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress3);
          }
          if (isSharedLayoutAnimation) {
            _this.animationValues = mixedValues;
            mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress3, shouldCrossfadeOpacity, isOnlyMember);
          }
          _this.root.scheduleUpdateProjection();
          _this.scheduleRender();
          _this.animationProgress = progress3;
        };
        this.mixTargetDelta(0);
      };
      ProjectionNode.prototype.startAnimation = function(options3) {
        var _this = this;
        var _a3, _b;
        this.notifyListeners("animationStart");
        (_a3 = this.currentAnimation) === null || _a3 === void 0 ? void 0 : _a3.stop();
        if (this.resumingFrom) {
          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();
        }
        if (this.pendingAnimation) {
          cancelSync.update(this.pendingAnimation);
          this.pendingAnimation = void 0;
        }
        this.pendingAnimation = es_default.update(function() {
          globalProjectionState.hasAnimatedSinceResize = true;
          _this.currentAnimation = animate2(0, animationTarget, __assign(__assign({}, options3), { onUpdate: function(latest) {
            var _a4;
            _this.mixTargetDelta(latest);
            (_a4 = options3.onUpdate) === null || _a4 === void 0 ? void 0 : _a4.call(options3, latest);
          }, onComplete: function() {
            var _a4;
            (_a4 = options3.onComplete) === null || _a4 === void 0 ? void 0 : _a4.call(options3);
            _this.completeAnimation();
          } }));
          if (_this.resumingFrom) {
            _this.resumingFrom.currentAnimation = _this.currentAnimation;
          }
          _this.pendingAnimation = void 0;
        });
      };
      ProjectionNode.prototype.completeAnimation = function() {
        var _a3;
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = void 0;
          this.resumingFrom.preserveOpacity = void 0;
        }
        (_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.exitAnimationComplete();
        this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
        this.notifyListeners("animationComplete");
      };
      ProjectionNode.prototype.finishAnimation = function() {
        var _a3;
        if (this.currentAnimation) {
          (_a3 = this.mixTargetDelta) === null || _a3 === void 0 ? void 0 : _a3.call(this, animationTarget);
          this.currentAnimation.stop();
        }
        this.completeAnimation();
      };
      ProjectionNode.prototype.applyTransformsToTarget = function() {
        var _a3 = this.getLead(), targetWithTransforms = _a3.targetWithTransforms, target6 = _a3.target, layout4 = _a3.layout, latestValues = _a3.latestValues;
        if (!targetWithTransforms || !target6 || !layout4)
          return;
        copyBoxInto(targetWithTransforms, target6);
        transformBox(targetWithTransforms, latestValues);
        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
      };
      ProjectionNode.prototype.registerSharedNode = function(layoutId4, node2) {
        var _a3, _b, _c;
        if (!this.sharedNodes.has(layoutId4)) {
          this.sharedNodes.set(layoutId4, new NodeStack());
        }
        var stack10 = this.sharedNodes.get(layoutId4);
        stack10.add(node2);
        node2.promote({
          transition: (_a3 = node2.options.initialPromotionConfig) === null || _a3 === void 0 ? void 0 : _a3.transition,
          preserveFollowOpacity: (_c = (_b = node2.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node2)
        });
      };
      ProjectionNode.prototype.isLead = function() {
        var stack10 = this.getStack();
        return stack10 ? stack10.lead === this : true;
      };
      ProjectionNode.prototype.getLead = function() {
        var _a3;
        var layoutId4 = this.options.layoutId;
        return layoutId4 ? ((_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.lead) || this : this;
      };
      ProjectionNode.prototype.getPrevLead = function() {
        var _a3;
        var layoutId4 = this.options.layoutId;
        return layoutId4 ? (_a3 = this.getStack()) === null || _a3 === void 0 ? void 0 : _a3.prevLead : void 0;
      };
      ProjectionNode.prototype.getStack = function() {
        var layoutId4 = this.options.layoutId;
        if (layoutId4)
          return this.root.sharedNodes.get(layoutId4);
      };
      ProjectionNode.prototype.promote = function(_a3) {
        var _b = _a3 === void 0 ? {} : _a3, needsReset = _b.needsReset, transition3 = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;
        var stack10 = this.getStack();
        if (stack10)
          stack10.promote(this, preserveFollowOpacity);
        if (needsReset) {
          this.projectionDelta = void 0;
          this.needsReset = true;
        }
        if (transition3)
          this.setOptions({ transition: transition3 });
      };
      ProjectionNode.prototype.relegate = function() {
        var stack10 = this.getStack();
        if (stack10) {
          return stack10.relegate(this);
        } else {
          return false;
        }
      };
      ProjectionNode.prototype.resetRotation = function() {
        var visualElement2 = this.options.visualElement;
        if (!visualElement2)
          return;
        var hasRotate = false;
        var resetValues = {};
        for (var i7 = 0; i7 < transformAxes.length; i7++) {
          var axis = transformAxes[i7];
          var key = "rotate" + axis;
          if (!visualElement2.getStaticValue(key)) {
            continue;
          }
          hasRotate = true;
          resetValues[key] = visualElement2.getStaticValue(key);
          visualElement2.setStaticValue(key, 0);
        }
        if (!hasRotate)
          return;
        visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.syncRender();
        for (var key in resetValues) {
          visualElement2.setStaticValue(key, resetValues[key]);
        }
        visualElement2.scheduleRender();
      };
      ProjectionNode.prototype.getProjectionStyles = function(styleProp) {
        var _a3, _b, _c, _d, _e2, _f;
        if (styleProp === void 0) {
          styleProp = {};
        }
        var styles = {};
        if (!this.instance || this.isSVG)
          return styles;
        if (!this.isVisible) {
          return { visibility: "hidden" };
        } else {
          styles.visibility = "";
        }
        var transformTemplate = (_a3 = this.options.visualElement) === null || _a3 === void 0 ? void 0 : _a3.getProps().transformTemplate;
        if (this.needsReset) {
          this.needsReset = false;
          styles.opacity = "";
          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
          return styles;
        }
        var lead = this.getLead();
        if (!this.projectionDelta || !this.layout || !lead.target) {
          var emptyStyles = {};
          if (this.options.layoutId) {
            emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;
            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || "";
          }
          if (this.hasProjected && !hasTransform(this.latestValues)) {
            emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
            this.hasProjected = false;
          }
          return emptyStyles;
        }
        var valuesToRender = lead.animationValues || lead.latestValues;
        this.applyTransformsToTarget();
        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
        if (transformTemplate) {
          styles.transform = transformTemplate(valuesToRender, styles.transform);
        }
        var _g = this.projectionDelta, x3 = _g.x, y2 = _g.y;
        styles.transformOrigin = "".concat(x3.origin * 100, "% ").concat(y2.origin * 100, "% 0");
        if (lead.animationValues) {
          styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
        } else {
          styles.opacity = lead === this ? (_e2 = valuesToRender.opacity) !== null && _e2 !== void 0 ? _e2 : "" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;
        }
        for (var key in scaleCorrectors) {
          if (valuesToRender[key] === void 0)
            continue;
          var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;
          var corrected = correct(valuesToRender[key], lead);
          if (applyTo) {
            var num2 = applyTo.length;
            for (var i7 = 0; i7 < num2; i7++) {
              styles[applyTo[i7]] = corrected;
            }
          } else {
            styles[key] = corrected;
          }
        }
        if (this.options.layoutId) {
          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || "" : "none";
        }
        return styles;
      };
      ProjectionNode.prototype.clearSnapshot = function() {
        this.resumeFrom = this.snapshot = void 0;
      };
      ProjectionNode.prototype.resetTree = function() {
        this.root.nodes.forEach(function(node2) {
          var _a3;
          return (_a3 = node2.currentAnimation) === null || _a3 === void 0 ? void 0 : _a3.stop();
        });
        this.root.nodes.forEach(clearMeasurements);
        this.root.sharedNodes.clear();
      };
      return ProjectionNode;
    }();
  }
  function updateLayout(node2) {
    node2.updateLayout();
  }
  function notifyLayoutUpdate(node2) {
    var _a2, _b, _c, _d;
    var snapshot = (_b = (_a2 = node2.resumeFrom) === null || _a2 === void 0 ? void 0 : _a2.snapshot) !== null && _b !== void 0 ? _b : node2.snapshot;
    if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
      var _e2 = node2.layout, layout_1 = _e2.actual, measuredLayout = _e2.measured;
      if (node2.options.animationType === "size") {
        eachAxis(function(axis) {
          var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
          var length10 = calcLength(axisSnapshot);
          axisSnapshot.min = layout_1[axis].min;
          axisSnapshot.max = axisSnapshot.min + length10;
        });
      } else if (node2.options.animationType === "position") {
        eachAxis(function(axis) {
          var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];
          var length10 = calcLength(layout_1[axis]);
          axisSnapshot.max = axisSnapshot.min + length10;
        });
      }
      var layoutDelta = createDelta();
      calcBoxDelta(layoutDelta, layout_1, snapshot.layout);
      var visualDelta = createDelta();
      if (snapshot.isShared) {
        calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measured);
      } else {
        calcBoxDelta(visualDelta, layout_1, snapshot.layout);
      }
      var hasLayoutChanged = !isDeltaZero(layoutDelta);
      var hasRelativeTargetChanged = false;
      if (!node2.resumeFrom) {
        node2.relativeParent = node2.getClosestProjectingParent();
        if (node2.relativeParent && !node2.relativeParent.resumeFrom) {
          var _f = node2.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;
          if (parentSnapshot && parentLayout) {
            var relativeSnapshot = createBox();
            calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);
            var relativeLayout = createBox();
            calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);
            if (!boxEquals(relativeSnapshot, relativeLayout)) {
              hasRelativeTargetChanged = true;
            }
          }
        }
      }
      node2.notifyListeners("didUpdate", {
        layout: layout_1,
        snapshot,
        delta: visualDelta,
        layoutDelta,
        hasLayoutChanged,
        hasRelativeTargetChanged
      });
    } else if (node2.isLead()) {
      (_d = (_c = node2.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);
    }
    node2.options.transition = void 0;
  }
  function clearSnapshot(node2) {
    node2.clearSnapshot();
  }
  function clearMeasurements(node2) {
    node2.clearMeasurements();
  }
  function resetTransformStyle(node2) {
    var visualElement2 = node2.options.visualElement;
    if (visualElement2 === null || visualElement2 === void 0 ? void 0 : visualElement2.getProps().onBeforeLayoutMeasure) {
      visualElement2.notifyBeforeLayoutMeasure();
    }
    node2.resetTransform();
  }
  function finishAnimation(node2) {
    node2.finishAnimation();
    node2.targetDelta = node2.relativeTarget = node2.target = void 0;
  }
  function resolveTargetDelta(node2) {
    node2.resolveTargetDelta();
  }
  function calcProjection(node2) {
    node2.calcProjection();
  }
  function resetRotation(node2) {
    node2.resetRotation();
  }
  function removeLeadSnapshots(stack10) {
    stack10.removeLeadSnapshot();
  }
  function mixAxisDelta(output2, delta, p3) {
    output2.translate = mix(delta.translate, 0, p3);
    output2.scale = mix(delta.scale, 1, p3);
    output2.origin = delta.origin;
    output2.originPoint = delta.originPoint;
  }
  function mixAxis(output2, from4, to2, p3) {
    output2.min = mix(from4.min, to2.min, p3);
    output2.max = mix(from4.max, to2.max, p3);
  }
  function mixBox(output2, from4, to2, p3) {
    mixAxis(output2.x, from4.x, to2.x, p3);
    mixAxis(output2.y, from4.y, to2.y, p3);
  }
  function hasOpacityCrossfade(node2) {
    return node2.animationValues && node2.animationValues.opacityExit !== void 0;
  }
  var defaultLayoutTransition = {
    duration: 0.45,
    ease: [0.4, 0, 0.1, 1]
  };
  function mountNodeEarly(node2, id5) {
    var searchNode = node2.root;
    for (var i7 = node2.path.length - 1; i7 >= 0; i7--) {
      if (Boolean(node2.path[i7].instance)) {
        searchNode = node2.path[i7];
        break;
      }
    }
    var searchElement = searchNode && searchNode !== node2.root ? searchNode.instance : document;
    var element3 = searchElement.querySelector('[data-projection-id="'.concat(id5, '"]'));
    if (element3)
      node2.mount(element3, true);
  }
  function roundAxis(axis) {
    axis.min = Math.round(axis.min);
    axis.max = Math.round(axis.max);
  }
  function roundBox(box6) {
    roundAxis(box6.x);
    roundAxis(box6.y);
  }

  // node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
  var DocumentProjectionNode = createProjectionNode({
    attachResizeListener: function(ref, notify) {
      return addDomEvent(ref, "resize", notify);
    },
    measureScroll: function() {
      return {
        x: document.documentElement.scrollLeft || document.body.scrollLeft,
        y: document.documentElement.scrollTop || document.body.scrollTop
      };
    },
    checkIsScrollRoot: function() {
      return true;
    }
  });

  // node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
  var rootProjectionNode = {
    current: void 0
  };
  var HTMLProjectionNode = createProjectionNode({
    measureScroll: function(instance) {
      return {
        x: instance.scrollLeft,
        y: instance.scrollTop
      };
    },
    defaultParent: function() {
      if (!rootProjectionNode.current) {
        var documentNode = new DocumentProjectionNode(0, {});
        documentNode.mount(window);
        documentNode.setOptions({ layoutScroll: true });
        rootProjectionNode.current = documentNode;
      }
      return rootProjectionNode.current;
    },
    resetTransform: function(instance, value12) {
      instance.style.transform = value12 !== null && value12 !== void 0 ? value12 : "none";
    },
    checkIsScrollRoot: function(instance) {
      return Boolean(window.getComputedStyle(instance).position === "fixed");
    }
  });

  // node_modules/framer-motion/dist/es/render/dom/motion.mjs
  var featureBundle = __assign(__assign(__assign(__assign({}, animations), gestureAnimations), drag), layoutFeatures);
  var motion = /* @__PURE__ */ createMotionProxy(function(Component, config) {
    return createDomMotionConfig(Component, config, featureBundle, createDomVisualElement, HTMLProjectionNode);
  });

  // node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var React8 = __toESM(require_react(), 1);
  var import_react39 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  var import_react37 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs
  var import_react36 = __toESM(require_react(), 1);
  function useIsMounted() {
    var isMounted = (0, import_react36.useRef)(false);
    useIsomorphicLayoutEffect(function() {
      isMounted.current = true;
      return function() {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  }

  // node_modules/framer-motion/dist/es/utils/use-force-update.mjs
  function useForceUpdate() {
    var isMounted = useIsMounted();
    var _a2 = __read((0, import_react37.useState)(0), 2), forcedRenderCount = _a2[0], setForcedRenderCount = _a2[1];
    var forceRender = (0, import_react37.useCallback)(function() {
      isMounted.current && setForcedRenderCount(forcedRenderCount + 1);
    }, [forcedRenderCount]);
    var deferredForceRender = (0, import_react37.useCallback)(function() {
      return es_default.postRender(forceRender);
    }, [forceRender]);
    return [deferredForceRender, forcedRenderCount];
  }

  // node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs
  var React7 = __toESM(require_react(), 1);
  var import_react38 = __toESM(require_react(), 1);
  var PresenceChild = function(_a2) {
    var children2 = _a2.children, initial8 = _a2.initial, isPresent = _a2.isPresent, onExitComplete = _a2.onExitComplete, custom2 = _a2.custom, presenceAffectsLayout = _a2.presenceAffectsLayout;
    var presenceChildren = useConstant(newChildrenMap);
    var id5 = useId2();
    var context = (0, import_react38.useMemo)(function() {
      return {
        id: id5,
        initial: initial8,
        isPresent,
        custom: custom2,
        onExitComplete: function(childId) {
          var e_1, _a3;
          presenceChildren.set(childId, true);
          try {
            for (var _b = __values(presenceChildren.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
              var isComplete = _c.value;
              if (!isComplete)
                return;
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_c && !_c.done && (_a3 = _b.return))
                _a3.call(_b);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete();
        },
        register: function(childId) {
          presenceChildren.set(childId, false);
          return function() {
            return presenceChildren.delete(childId);
          };
        }
      };
    }, presenceAffectsLayout ? void 0 : [isPresent]);
    (0, import_react38.useMemo)(function() {
      presenceChildren.forEach(function(_2, key) {
        return presenceChildren.set(key, false);
      });
    }, [isPresent]);
    React7.useEffect(function() {
      !isPresent && !presenceChildren.size && (onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete());
    }, [isPresent]);
    return React7.createElement(PresenceContext.Provider, { value: context }, children2);
  };
  function newChildrenMap() {
    return /* @__PURE__ */ new Map();
  }

  // node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs
  var getChildKey = function(child) {
    return child.key || "";
  };
  function updateChildLookup(children2, allChildren) {
    children2.forEach(function(child) {
      var key = getChildKey(child);
      allChildren.set(key, child);
    });
  }
  function onlyElements(children2) {
    var filtered = [];
    import_react39.Children.forEach(children2, function(child) {
      if ((0, import_react39.isValidElement)(child))
        filtered.push(child);
    });
    return filtered;
  }
  var AnimatePresence = function(_a2) {
    var children2 = _a2.children, custom2 = _a2.custom, _b = _a2.initial, initial8 = _b === void 0 ? true : _b, onExitComplete = _a2.onExitComplete, exitBeforeEnter = _a2.exitBeforeEnter, _c = _a2.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;
    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];
    var forceRenderLayoutGroup = (0, import_react39.useContext)(LayoutGroupContext).forceRender;
    if (forceRenderLayoutGroup)
      forceRender = forceRenderLayoutGroup;
    var isMounted = useIsMounted();
    var filteredChildren = onlyElements(children2);
    var childrenToRender = filteredChildren;
    var exiting = /* @__PURE__ */ new Set();
    var presentChildren = (0, import_react39.useRef)(childrenToRender);
    var allChildren = (0, import_react39.useRef)(/* @__PURE__ */ new Map()).current;
    var isInitialRender = (0, import_react39.useRef)(true);
    useIsomorphicLayoutEffect(function() {
      isInitialRender.current = false;
      updateChildLookup(filteredChildren, allChildren);
      presentChildren.current = childrenToRender;
    });
    useUnmountEffect(function() {
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    });
    if (isInitialRender.current) {
      return React8.createElement(React8.Fragment, null, childrenToRender.map(function(child) {
        return React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial8 ? void 0 : false, presenceAffectsLayout }, child);
      }));
    }
    childrenToRender = __spreadArray([], __read(childrenToRender), false);
    var presentKeys = presentChildren.current.map(getChildKey);
    var targetKeys = filteredChildren.map(getChildKey);
    var numPresent = presentKeys.length;
    for (var i7 = 0; i7 < numPresent; i7++) {
      var key = presentKeys[i7];
      if (targetKeys.indexOf(key) === -1) {
        exiting.add(key);
      }
    }
    if (exitBeforeEnter && exiting.size) {
      childrenToRender = [];
    }
    exiting.forEach(function(key2) {
      if (targetKeys.indexOf(key2) !== -1)
        return;
      var child = allChildren.get(key2);
      if (!child)
        return;
      var insertionIndex = presentKeys.indexOf(key2);
      var onExit = function() {
        allChildren.delete(key2);
        exiting.delete(key2);
        var removeIndex = presentChildren.current.findIndex(function(presentChild) {
          return presentChild.key === key2;
        });
        presentChildren.current.splice(removeIndex, 1);
        if (!exiting.size) {
          presentChildren.current = filteredChildren;
          if (isMounted.current === false)
            return;
          forceRender();
          onExitComplete && onExitComplete();
        }
      };
      childrenToRender.splice(insertionIndex, 0, React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom2, presenceAffectsLayout }, child));
    });
    childrenToRender = childrenToRender.map(function(child) {
      var key2 = child.key;
      return exiting.has(key2) ? child : React8.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout }, child);
    });
    if (env !== "production" && exitBeforeEnter && childrenToRender.length > 1) {
      console.warn("You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.");
    }
    return React8.createElement(React8.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function(child) {
      return (0, import_react39.cloneElement)(child);
    }));
  };

  // node_modules/framer-motion/dist/es/value/use-motion-value.mjs
  var import_react40 = __toESM(require_react(), 1);
  function useMotionValue(initial8) {
    var value12 = useConstant(function() {
      return motionValue(initial8);
    });
    var isStatic = (0, import_react40.useContext)(MotionConfigContext).isStatic;
    if (isStatic) {
      var _a2 = __read((0, import_react40.useState)(initial8), 2), setLatest_1 = _a2[1];
      (0, import_react40.useEffect)(function() {
        return value12.onChange(setLatest_1);
      }, []);
    }
    return value12;
  }

  // output/Framer.Motion/foreign.js
  var animatePresenceImpl = AnimatePresence;

  // output/Framer.Motion.MotionComponent/foreign.js
  var import_react41 = __toESM(require_react(), 1);
  var divImpl = motion.div;
  var spanImpl = motion.span;
  var buttonImpl = motion.button;
  var liImpl = motion.li;
  var trImpl = motion.tr;
  var inputImpl = motion.input;
  var svgImpl = motion.svg;
  var pathImpl = motion.path;
  var gImpl = motion.g;

  // output/Framer.Motion.MotionComponent/index.js
  var span6 = function() {
    return spanImpl;
  };
  var div6 = function() {
    return divImpl;
  };

  // output/Untagged.Castable/index.js
  var cast = function() {
    return unsafeCoerce2;
  };

  // output/Framer.Motion.Types/index.js
  var cast2 = /* @__PURE__ */ cast();
  var MakeVariantLabel = /* @__PURE__ */ function() {
    function MakeVariantLabel2() {
    }
    ;
    MakeVariantLabel2.value = new MakeVariantLabel2();
    return MakeVariantLabel2;
  }();
  var variants = function($17) {
    return cast2(css8($17));
  };
  var transition = function($18) {
    return cast2(css8($18));
  };
  var toEffectFn = function(dict) {
    return dict.toEffectFn;
  };
  var prop = function() {
    return cast2;
  };
  var onPan = function(fn2) {
    return cast2(mkEffectFn2(fn2));
  };
  var onAnimationStart = cast2;
  var makeVariantLabels$prime = function(dictIsSymbol) {
    var reflectSymbol2 = reflectSymbol(dictIsSymbol);
    return {
      mappingWithIndex: function(v2) {
        return function(prop$prime) {
          return function(v1) {
            return reflectSymbol2(prop$prime);
          };
        };
      }
    };
  };
  var makeVariantLabels = function(dictHMapWithIndex) {
    return hmapWithIndex(dictHMapWithIndex)(MakeVariantLabel.value);
  };
  var layoutId = function() {
    return cast2;
  };
  var layout = function() {
    return cast2;
  };
  var initial = function() {
    return cast2;
  };
  var exit = function() {
    return cast2;
  };
  var callbackableEffectFn2 = {
    toEffectFn: mkEffectFn2
  };
  var toEffectFn1 = /* @__PURE__ */ toEffectFn(callbackableEffectFn2);
  var onPanEnd = function($23) {
    return cast2(toEffectFn1($23));
  };
  var onPanStart = function($24) {
    return cast2(toEffectFn1($24));
  };
  var callbackableEffectFn1 = {
    toEffectFn: mkEffectFn1
  };
  var onAnimationComplete = /* @__PURE__ */ function() {
    var $28 = toEffectFn(callbackableEffectFn1);
    return function($29) {
      return cast2($28($29));
    };
  }();
  var animate3 = function() {
    return cast2;
  };

  // output/Framer.Motion/index.js
  var animatePresence = function() {
    return animatePresenceImpl;
  };

  // output/React.Basic.Events/index.js
  var EventFn = function(x3) {
    return x3;
  };
  var unsafeEventFn = EventFn;
  var mergeNil = {
    mergeImpl: function(v2) {
      return function(v1) {
        return function(v22) {
          return {};
        };
      };
    }
  };
  var mergeImpl = function(dict) {
    return dict.mergeImpl;
  };
  var mergeCons = function(dictIsSymbol) {
    var $$delete7 = $$delete3(dictIsSymbol)()();
    var get4 = get(dictIsSymbol)();
    var insert11 = insert4(dictIsSymbol)()();
    return function() {
      return function() {
        return function() {
          return function() {
            return function(dictMerge) {
              var mergeImpl1 = mergeImpl(dictMerge);
              return {
                mergeImpl: function(v2) {
                  return function(fns) {
                    return function(a4) {
                      var v1 = mergeImpl1($$Proxy.value)($$delete7($$Proxy.value)(fns));
                      var v22 = get4($$Proxy.value)(fns);
                      return insert11($$Proxy.value)(v22(a4))(v1(a4));
                    };
                  };
                }
              };
            };
          };
        };
      };
    };
  };
  var merge3 = function() {
    return function(dictMerge) {
      return mergeImpl(dictMerge)($$Proxy.value);
    };
  };
  var handler_ = function($30) {
    return mkEffectFn1($$const($30));
  };
  var handler = function(v2) {
    return function(cb2) {
      return function($31) {
        return cb2(v2($31))();
      };
    };
  };
  var categoryBuilder2 = categoryFn;
  var syntheticEvent = /* @__PURE__ */ identity(categoryBuilder2);

  // output/Yoga.Block.Internal/foreign.js
  var import_react42 = __toESM(require_react(), 1);
  function mkForwardRefComponent(displayName2) {
    return (renderFn) => {
      const component26 = (props, ref) => renderFn(props)(ref)();
      component26.displayName = displayName2;
      return (0, import_react42.forwardRef)(component26);
    };
  }
  function pickDefinedFn(ref, ks, obj) {
    const copy2 = {};
    for (let i7 = 0; i7 < ks.length; i7++) {
      if (obj[ks[i7]] !== void 0) {
        copy2[ks[i7]] = obj[ks[i7]];
      }
    }
    if (ref !== void 0) {
      copy2.ref = ref;
    }
    return copy2;
  }
  function unsafeUnionDroppingUndefined(r1) {
    return (r2) => {
      var copy2 = {};
      for (var k1 in r2) {
        if ({}.hasOwnProperty.call(r2, k1) && r2[k1] !== void 0) {
          copy2[k1] = r2[k1];
        }
      }
      for (var k2 in r1) {
        if ({}.hasOwnProperty.call(r1, k2) && r1[k2] !== void 0) {
          copy2[k2] = r1[k2];
        }
      }
      return copy2;
    };
  }
  function deleteUndefineds(obj) {
    Object.keys(obj).forEach((key) => obj[key] === void 0 ? delete obj[key] : {});
    return obj;
  }

  // output/Literals.Undefined/foreign.js
  var undefinedImpl = void 0;

  // output/Literals.Undefined/index.js
  var $$undefined2 = undefinedImpl;

  // output/Untagged.TypeCheck/index.js
  var hasRuntimeType = function(dict) {
    return dict.hasRuntimeType;
  };
  var hasJsType = function(name15) {
    return function(x3) {
      return typeOf(x3) === name15;
    };
  };
  var hasRuntimeTypeUndefined = {
    hasRuntimeType: function(v2) {
      return hasJsType("undefined");
    }
  };

  // output/Untagged.Union/index.js
  var cast3 = /* @__PURE__ */ cast();
  var getRight$prime = function(dictHasRuntimeType) {
    var hasRuntimeType2 = hasRuntimeType(dictHasRuntimeType);
    return function(o2) {
      var isTypeA = hasRuntimeType2($$Proxy.value);
      var $57 = isTypeA(unsafeToForeign(o2));
      if ($57) {
        return Nothing.value;
      }
      ;
      return new Just(o2);
    };
  };
  var uorToMaybe = /* @__PURE__ */ getRight$prime(hasRuntimeTypeUndefined);
  var fromUndefinedOr = function(a4) {
    var $64 = fromMaybe(a4);
    return function($65) {
      return $64(uorToMaybe($65));
    };
  };
  var maybeToUor = function(v2) {
    if (v2 instanceof Just) {
      return v2.value0;
    }
    ;
    if (v2 instanceof Nothing) {
      return cast3($$undefined2);
    }
    ;
    throw new Error("Failed pattern match at Untagged.Union (line 121, column 1 - line 121, column 49): " + [v2.constructor.name]);
  };

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name15) {
    return function(doctype) {
      return doctype[name15];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function getBoundingClientRect(el15) {
    return function() {
      var rect3 = el15.getBoundingClientRect();
      return {
        top: rect3.top,
        right: rect3.right,
        bottom: rect3.bottom,
        left: rect3.left,
        width: rect3.width,
        height: rect3.height,
        x: rect3.x,
        y: rect3.y
      };
    };
  }

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp2 = function(name15) {
    return function(node2) {
      return function() {
        return node2[name15];
      };
    };
  };
  var children = getEffProp2("children");
  var _firstElementChild = getEffProp2("firstElementChild");
  var _lastElementChild = getEffProp2("lastElementChild");
  var childElementCount = getEffProp2("childElementCount");

  // output/Web.DOM.Element/index.js
  var fromNode3 = /* @__PURE__ */ unsafeReadProtoTagged("Element");

  // output/Web.DOM.NonElementParentNode/foreign.js
  function _getElementById(id5) {
    return function(node2) {
      return function() {
        return node2.getElementById(id5);
      };
    };
  }

  // output/Web.DOM.NonElementParentNode/index.js
  var map24 = /* @__PURE__ */ map(functorEffect);
  var getElementById = function(eid) {
    var $2 = map24(toMaybe);
    var $3 = _getElementById(eid);
    return function($4) {
      return $2($3($4));
    };
  };

  // output/Yoga.Block.Internal.OptionalProp/index.js
  var map25 = /* @__PURE__ */ map(functorMaybe);
  var foldMap5 = /* @__PURE__ */ foldMap(foldableMaybe);
  var foldr4 = /* @__PURE__ */ foldr(foldableMaybe);
  var foldl2 = /* @__PURE__ */ foldl(foldableMaybe);
  var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var alt9 = /* @__PURE__ */ alt(altMaybe);
  var opToMaybe = function(v2) {
    return uorToMaybe(v2);
  };
  var maybeToOp = function(mb) {
    return maybeToUor(mb);
  };
  var getOr = function($$default3) {
    return function(v2) {
      return fromUndefinedOr($$default3)(v2);
    };
  };
  var getOrFlipped = /* @__PURE__ */ flip(getOr);
  var isTruthy = /* @__PURE__ */ getOr(false);
  var functorOptionalProp = {
    map: function(fn) {
      return function(opt) {
        return maybeToOp(map25(fn)(opToMaybe(opt)));
      };
    }
  };
  var foldableOptionalProp = {
    foldMap: function(dictMonoid) {
      var foldMap111 = foldMap5(dictMonoid);
      return function(fn) {
        var $43 = foldMap111(fn);
        return function($44) {
          return $43(opToMaybe($44));
        };
      };
    },
    foldr: function(fn) {
      return function(acc) {
        var $45 = foldr4(fn)(acc);
        return function($46) {
          return $45(opToMaybe($46));
        };
      };
    },
    foldl: function(fn) {
      return function(acc) {
        var $47 = foldl2(fn)(acc);
        return function($48) {
          return $47(opToMaybe($48));
        };
      };
    }
  };
  var asOptional = /* @__PURE__ */ cast();
  var asMaybe = function($49) {
    return opToMaybe(asOptional($49));
  };
  var composeHandler = function(handler2) {
    return function(propsHandler) {
      return function(a4) {
        for_3(asMaybe(handler2))(flip(runEffectFn1)(a4))();
        return for_3(opToMaybe(propsHandler))(flip(runEffectFn1)(a4))();
      };
    };
  };
  var appendIfDefined = function(dictSemigroup) {
    var append39 = append(dictSemigroup);
    return function(a4) {
      return function(undefOrA) {
        return maybe(a4)(function(v2) {
          return append39(a4)(v2);
        })(opToMaybe(undefOrA));
      };
    };
  };
  var altOptionalProp = {
    alt: function(op1) {
      return function(op2) {
        return maybeToOp(alt9(opToMaybe(op1))(opToMaybe(op2)));
      };
    },
    Functor0: function() {
      return functorOptionalProp;
    }
  };

  // output/Yoga.Block.Internal/index.js
  var fromFoldable7 = /* @__PURE__ */ fromFoldable(foldableList);
  var keys3 = /* @__PURE__ */ keys2();
  var bind12 = /* @__PURE__ */ bind(/* @__PURE__ */ bindMaybeT(monadEffect));
  var pure11 = /* @__PURE__ */ pure(applicativeEffect);
  var lift4 = /* @__PURE__ */ lift(monadTransMaybeT)(monadEffect);
  var pure13 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeMaybeT(monadEffect));
  var bind13 = /* @__PURE__ */ bind(bindEffect);
  var $$for2 = /* @__PURE__ */ $$for(applicativeEffect)(traversableMaybe);
  var bind22 = /* @__PURE__ */ bind(bindMaybe);
  var consKeys2 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "_aria";
    }
  });
  var consKeys1 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "_data";
    }
  });
  var consKeys22 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "about";
    }
  });
  var consKeys3 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "acceptCharset";
    }
  });
  var consKeys4 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "accessKey";
    }
  });
  var consKeys5 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "allowFullScreen";
    }
  });
  var consKeys6 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoFocus";
    }
  });
  var consKeys7 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoPlay";
    }
  });
  var consKeys8 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "capture";
    }
  });
  var consKeys9 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "cellPadding";
    }
  });
  var consKeys10 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "cellSpacing";
    }
  });
  var consKeys11 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "charSet";
    }
  });
  var consKeys12 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "children";
    }
  });
  var consKeys13 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "classID";
    }
  });
  var consKeys14 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "colSpan";
    }
  });
  var consKeys15 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "contentEditable";
    }
  });
  var consKeys16 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "contextMenu";
    }
  });
  var consKeys17 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "crossOrigin";
    }
  });
  var consKeys18 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "dangerouslySetInnerHTML";
    }
  });
  var consKeys19 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "datatype";
    }
  });
  var consKeys20 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "dateTime";
    }
  });
  var consKeys21 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "dir";
    }
  });
  var consKeys222 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "disabled";
    }
  });
  var consKeys23 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "draggable";
    }
  });
  var consKeys24 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "encType";
    }
  });
  var consKeys25 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "form";
    }
  });
  var consKeys26 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "formAction";
    }
  });
  var consKeys27 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "formEncType";
    }
  });
  var consKeys28 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "formMethod";
    }
  });
  var consKeys29 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "formNoValidate";
    }
  });
  var consKeys30 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "formTarget";
    }
  });
  var consKeys31 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "frameBorder";
    }
  });
  var consKeys32 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "hidden";
    }
  });
  var consKeys33 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "hrefLang";
    }
  });
  var consKeys34 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "htmlFor";
    }
  });
  var consKeys35 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "httpEquiv";
    }
  });
  var consKeys36 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "icon";
    }
  });
  var consKeys37 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "id";
    }
  });
  var consKeys38 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "inlist";
    }
  });
  var consKeys39 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "inputMode";
    }
  });
  var consKeys40 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "is";
    }
  });
  var consKeys41 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "itemID";
    }
  });
  var consKeys42 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "itemProp";
    }
  });
  var consKeys43 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "itemRef";
    }
  });
  var consKeys44 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "itemScope";
    }
  });
  var consKeys45 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "itemType";
    }
  });
  var consKeys46 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "keyParams";
    }
  });
  var consKeys47 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "keyType";
    }
  });
  var consKeys48 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "lang";
    }
  });
  var consKeys49 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "marginHeight";
    }
  });
  var consKeys50 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "marginWidth";
    }
  });
  var consKeys51 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "maxLength";
    }
  });
  var consKeys52 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "mediaGroup";
    }
  });
  var consKeys53 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "minLength";
    }
  });
  var consKeys54 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "name";
    }
  });
  var consKeys55 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "noValidate";
    }
  });
  var consKeys56 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onAnimationEnd";
    }
  });
  var consKeys57 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onAnimationIteration";
    }
  });
  var consKeys58 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onAnimationStart";
    }
  });
  var consKeys59 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onBlur";
    }
  });
  var consKeys60 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onClick";
    }
  });
  var consKeys61 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onCompositionEnd";
    }
  });
  var consKeys62 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onCompositionStart";
    }
  });
  var consKeys63 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onCompositionUpdate";
    }
  });
  var consKeys64 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onContextMenu";
    }
  });
  var consKeys65 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onCopy";
    }
  });
  var consKeys66 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onCut";
    }
  });
  var consKeys67 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDoubleClick";
    }
  });
  var consKeys68 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDrag";
    }
  });
  var consKeys69 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragEnd";
    }
  });
  var consKeys70 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragEnter";
    }
  });
  var consKeys71 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragExit";
    }
  });
  var consKeys72 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragLeave";
    }
  });
  var consKeys73 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragOver";
    }
  });
  var consKeys74 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDragStart";
    }
  });
  var consKeys75 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onDrop";
    }
  });
  var consKeys76 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onFocus";
    }
  });
  var consKeys77 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onGotPointerCapture";
    }
  });
  var consKeys78 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onInvalid";
    }
  });
  var consKeys79 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onKeyDown";
    }
  });
  var consKeys80 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onKeyPress";
    }
  });
  var consKeys81 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onKeyUp";
    }
  });
  var consKeys82 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onLostPointerCapture";
    }
  });
  var consKeys83 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseDown";
    }
  });
  var consKeys84 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseEnter";
    }
  });
  var consKeys85 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseLeave";
    }
  });
  var consKeys86 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseMove";
    }
  });
  var consKeys87 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseOut";
    }
  });
  var consKeys88 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseOver";
    }
  });
  var consKeys89 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onMouseUp";
    }
  });
  var consKeys90 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPaste";
    }
  });
  var consKeys91 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerCancel";
    }
  });
  var consKeys92 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerDown";
    }
  });
  var consKeys93 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerEnter";
    }
  });
  var consKeys94 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerLeave";
    }
  });
  var consKeys95 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerMove";
    }
  });
  var consKeys96 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerOut";
    }
  });
  var consKeys97 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerOver";
    }
  });
  var consKeys98 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onPointerUp";
    }
  });
  var consKeys99 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onSelect";
    }
  });
  var consKeys100 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onSubmit";
    }
  });
  var consKeys101 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onTouchCancel";
    }
  });
  var consKeys102 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onTouchEnd";
    }
  });
  var consKeys103 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onTouchMove";
    }
  });
  var consKeys104 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onTouchStart";
    }
  });
  var consKeys105 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onTransitionEnd";
    }
  });
  var consKeys106 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onWheel";
    }
  });
  var consKeys107 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "prefix";
    }
  });
  var consKeys108 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "property";
    }
  });
  var consKeys109 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "radioGroup";
    }
  });
  var consKeys110 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "readOnly";
    }
  });
  var consKeys111 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "resource";
    }
  });
  var consKeys112 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "role";
    }
  });
  var consKeys113 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "rowSpan";
    }
  });
  var consKeys114 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "scoped";
    }
  });
  var consKeys115 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "seamless";
    }
  });
  var consKeys116 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "security";
    }
  });
  var consKeys117 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "spellCheck";
    }
  });
  var consKeys118 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "srcDoc";
    }
  });
  var consKeys119 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "srcLang";
    }
  });
  var consKeys120 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "srcSet";
    }
  });
  var consKeys121 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "style";
    }
  });
  var consKeys122 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "suppressContentEditableWarning";
    }
  });
  var consKeys123 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "tabIndex";
    }
  });
  var consKeys124 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "title";
    }
  });
  var consKeys125 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "type";
    }
  });
  var consKeys126 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "typeof";
    }
  });
  var consKeys127 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "unselectable";
    }
  });
  var consKeys128 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "useMap";
    }
  });
  var consKeys129 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "value";
    }
  });
  var consKeys130 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "vocab";
    }
  });
  var consKeys131 = /* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "wmode";
    }
  })(nilKeys);
  var consKeys132 = /* @__PURE__ */ consKeys130(consKeys131);
  var consKeys133 = /* @__PURE__ */ consKeys2(/* @__PURE__ */ consKeys1(/* @__PURE__ */ consKeys22(/* @__PURE__ */ consKeys3(/* @__PURE__ */ consKeys4(/* @__PURE__ */ consKeys5(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "allowTransparency";
    }
  })(/* @__PURE__ */ consKeys6(/* @__PURE__ */ consKeys7(/* @__PURE__ */ consKeys8(/* @__PURE__ */ consKeys9(/* @__PURE__ */ consKeys10(/* @__PURE__ */ consKeys11(/* @__PURE__ */ consKeys12(/* @__PURE__ */ consKeys13(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "className";
    }
  })(/* @__PURE__ */ consKeys14(/* @__PURE__ */ consKeys15(/* @__PURE__ */ consKeys16(/* @__PURE__ */ consKeys17(/* @__PURE__ */ consKeys18(/* @__PURE__ */ consKeys19(/* @__PURE__ */ consKeys20(/* @__PURE__ */ consKeys21(/* @__PURE__ */ consKeys222(/* @__PURE__ */ consKeys23(/* @__PURE__ */ consKeys24(/* @__PURE__ */ consKeys25(/* @__PURE__ */ consKeys26(/* @__PURE__ */ consKeys27(/* @__PURE__ */ consKeys28(/* @__PURE__ */ consKeys29(/* @__PURE__ */ consKeys30(/* @__PURE__ */ consKeys31(/* @__PURE__ */ consKeys32(/* @__PURE__ */ consKeys33(/* @__PURE__ */ consKeys34(/* @__PURE__ */ consKeys35(/* @__PURE__ */ consKeys36(/* @__PURE__ */ consKeys37(/* @__PURE__ */ consKeys38(/* @__PURE__ */ consKeys39(/* @__PURE__ */ consKeys40(/* @__PURE__ */ consKeys41(/* @__PURE__ */ consKeys42(/* @__PURE__ */ consKeys43(/* @__PURE__ */ consKeys44(/* @__PURE__ */ consKeys45(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "key";
    }
  })(/* @__PURE__ */ consKeys46(/* @__PURE__ */ consKeys47(/* @__PURE__ */ consKeys48(/* @__PURE__ */ consKeys49(/* @__PURE__ */ consKeys50(/* @__PURE__ */ consKeys51(/* @__PURE__ */ consKeys52(/* @__PURE__ */ consKeys53(/* @__PURE__ */ consKeys54(/* @__PURE__ */ consKeys55(/* @__PURE__ */ consKeys56(/* @__PURE__ */ consKeys57(/* @__PURE__ */ consKeys58(/* @__PURE__ */ consKeys59(/* @__PURE__ */ consKeys60(/* @__PURE__ */ consKeys61(/* @__PURE__ */ consKeys62(/* @__PURE__ */ consKeys63(/* @__PURE__ */ consKeys64(/* @__PURE__ */ consKeys65(/* @__PURE__ */ consKeys66(/* @__PURE__ */ consKeys67(/* @__PURE__ */ consKeys68(/* @__PURE__ */ consKeys69(/* @__PURE__ */ consKeys70(/* @__PURE__ */ consKeys71(/* @__PURE__ */ consKeys72(/* @__PURE__ */ consKeys73(/* @__PURE__ */ consKeys74(/* @__PURE__ */ consKeys75(/* @__PURE__ */ consKeys76(/* @__PURE__ */ consKeys77(/* @__PURE__ */ consKeys78(/* @__PURE__ */ consKeys79(/* @__PURE__ */ consKeys80(/* @__PURE__ */ consKeys81(/* @__PURE__ */ consKeys82(/* @__PURE__ */ consKeys83(/* @__PURE__ */ consKeys84(/* @__PURE__ */ consKeys85(/* @__PURE__ */ consKeys86(/* @__PURE__ */ consKeys87(/* @__PURE__ */ consKeys88(/* @__PURE__ */ consKeys89(/* @__PURE__ */ consKeys90(/* @__PURE__ */ consKeys91(/* @__PURE__ */ consKeys92(/* @__PURE__ */ consKeys93(/* @__PURE__ */ consKeys94(/* @__PURE__ */ consKeys95(/* @__PURE__ */ consKeys96(/* @__PURE__ */ consKeys97(/* @__PURE__ */ consKeys98(/* @__PURE__ */ consKeys99(/* @__PURE__ */ consKeys100(/* @__PURE__ */ consKeys101(/* @__PURE__ */ consKeys102(/* @__PURE__ */ consKeys103(/* @__PURE__ */ consKeys104(/* @__PURE__ */ consKeys105(/* @__PURE__ */ consKeys106(/* @__PURE__ */ consKeys107(/* @__PURE__ */ consKeys108(/* @__PURE__ */ consKeys109(/* @__PURE__ */ consKeys110(/* @__PURE__ */ consKeys111(/* @__PURE__ */ consKeys112(/* @__PURE__ */ consKeys113(/* @__PURE__ */ consKeys114(/* @__PURE__ */ consKeys115(/* @__PURE__ */ consKeys116(/* @__PURE__ */ consKeys117(/* @__PURE__ */ consKeys118(/* @__PURE__ */ consKeys119(/* @__PURE__ */ consKeys120(/* @__PURE__ */ consKeys121(/* @__PURE__ */ consKeys122(/* @__PURE__ */ consKeys123(/* @__PURE__ */ consKeys124(/* @__PURE__ */ consKeys125(/* @__PURE__ */ consKeys126(/* @__PURE__ */ consKeys127(/* @__PURE__ */ consKeys128(/* @__PURE__ */ consKeys129(consKeys132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var consKeys134 = /* @__PURE__ */ consKeys2(/* @__PURE__ */ consKeys1(/* @__PURE__ */ consKeys22(/* @__PURE__ */ consKeys3(/* @__PURE__ */ consKeys4(/* @__PURE__ */ consKeys5(/* @__PURE__ */ consKeys6(/* @__PURE__ */ consKeys7(/* @__PURE__ */ consKeys8(/* @__PURE__ */ consKeys9(/* @__PURE__ */ consKeys10(/* @__PURE__ */ consKeys11(/* @__PURE__ */ consKeys12(/* @__PURE__ */ consKeys13(/* @__PURE__ */ consKeys14(/* @__PURE__ */ consKeys15(/* @__PURE__ */ consKeys16(/* @__PURE__ */ consKeys17(/* @__PURE__ */ consKeys18(/* @__PURE__ */ consKeys19(/* @__PURE__ */ consKeys20(/* @__PURE__ */ consKeys21(/* @__PURE__ */ consKeys23(/* @__PURE__ */ consKeys24(/* @__PURE__ */ consKeys26(/* @__PURE__ */ consKeys27(/* @__PURE__ */ consKeys28(/* @__PURE__ */ consKeys29(/* @__PURE__ */ consKeys30(/* @__PURE__ */ consKeys31(/* @__PURE__ */ consKeys32(/* @__PURE__ */ consKeys33(/* @__PURE__ */ consKeys34(/* @__PURE__ */ consKeys35(/* @__PURE__ */ consKeys36(/* @__PURE__ */ consKeys37(/* @__PURE__ */ consKeys38(/* @__PURE__ */ consKeys39(/* @__PURE__ */ consKeys40(/* @__PURE__ */ consKeys41(/* @__PURE__ */ consKeys42(/* @__PURE__ */ consKeys43(/* @__PURE__ */ consKeys44(/* @__PURE__ */ consKeys45(/* @__PURE__ */ consKeys46(/* @__PURE__ */ consKeys47(/* @__PURE__ */ consKeys48(/* @__PURE__ */ consKeys49(/* @__PURE__ */ consKeys50(/* @__PURE__ */ consKeys51(/* @__PURE__ */ consKeys52(/* @__PURE__ */ consKeys53(/* @__PURE__ */ consKeys55(/* @__PURE__ */ consKeys56(/* @__PURE__ */ consKeys57(/* @__PURE__ */ consKeys58(/* @__PURE__ */ consKeys59(/* @__PURE__ */ consKeys60(/* @__PURE__ */ consKeys61(/* @__PURE__ */ consKeys62(/* @__PURE__ */ consKeys63(/* @__PURE__ */ consKeys64(/* @__PURE__ */ consKeys65(/* @__PURE__ */ consKeys66(/* @__PURE__ */ consKeys67(/* @__PURE__ */ consKeys68(/* @__PURE__ */ consKeys69(/* @__PURE__ */ consKeys70(/* @__PURE__ */ consKeys71(/* @__PURE__ */ consKeys72(/* @__PURE__ */ consKeys73(/* @__PURE__ */ consKeys74(/* @__PURE__ */ consKeys75(/* @__PURE__ */ consKeys76(/* @__PURE__ */ consKeys77(/* @__PURE__ */ consKeys78(/* @__PURE__ */ consKeys79(/* @__PURE__ */ consKeys80(/* @__PURE__ */ consKeys81(/* @__PURE__ */ consKeys82(/* @__PURE__ */ consKeys83(/* @__PURE__ */ consKeys84(/* @__PURE__ */ consKeys85(/* @__PURE__ */ consKeys86(/* @__PURE__ */ consKeys87(/* @__PURE__ */ consKeys88(/* @__PURE__ */ consKeys89(/* @__PURE__ */ consKeys90(/* @__PURE__ */ consKeys91(/* @__PURE__ */ consKeys92(/* @__PURE__ */ consKeys93(/* @__PURE__ */ consKeys94(/* @__PURE__ */ consKeys95(/* @__PURE__ */ consKeys96(/* @__PURE__ */ consKeys97(/* @__PURE__ */ consKeys98(/* @__PURE__ */ consKeys99(/* @__PURE__ */ consKeys100(/* @__PURE__ */ consKeys101(/* @__PURE__ */ consKeys102(/* @__PURE__ */ consKeys103(/* @__PURE__ */ consKeys104(/* @__PURE__ */ consKeys105(/* @__PURE__ */ consKeys106(/* @__PURE__ */ consKeys107(/* @__PURE__ */ consKeys108(/* @__PURE__ */ consKeys109(/* @__PURE__ */ consKeys110(/* @__PURE__ */ consKeys111(/* @__PURE__ */ consKeys112(/* @__PURE__ */ consKeys113(/* @__PURE__ */ consKeys114(/* @__PURE__ */ consKeys115(/* @__PURE__ */ consKeys116(/* @__PURE__ */ consKeys117(/* @__PURE__ */ consKeys118(/* @__PURE__ */ consKeys119(/* @__PURE__ */ consKeys120(/* @__PURE__ */ consKeys121(/* @__PURE__ */ consKeys122(/* @__PURE__ */ consKeys123(/* @__PURE__ */ consKeys124(/* @__PURE__ */ consKeys126(/* @__PURE__ */ consKeys127(/* @__PURE__ */ consKeys128(consKeys132)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var consKeys135 = /* @__PURE__ */ consKeys2(/* @__PURE__ */ consKeys1(/* @__PURE__ */ consKeys22(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "accept";
    }
  })(/* @__PURE__ */ consKeys3(/* @__PURE__ */ consKeys4(/* @__PURE__ */ consKeys5(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "alt";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoCapitalize";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoComplete";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoCorrect";
    }
  })(/* @__PURE__ */ consKeys6(/* @__PURE__ */ consKeys7(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "autoSave";
    }
  })(/* @__PURE__ */ consKeys8(/* @__PURE__ */ consKeys9(/* @__PURE__ */ consKeys10(/* @__PURE__ */ consKeys11(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "checked";
    }
  })(/* @__PURE__ */ consKeys13(/* @__PURE__ */ consKeys14(/* @__PURE__ */ consKeys15(/* @__PURE__ */ consKeys16(/* @__PURE__ */ consKeys17(/* @__PURE__ */ consKeys18(/* @__PURE__ */ consKeys19(/* @__PURE__ */ consKeys20(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "defaultChecked";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "defaultValue";
    }
  })(/* @__PURE__ */ consKeys21(/* @__PURE__ */ consKeys222(/* @__PURE__ */ consKeys23(/* @__PURE__ */ consKeys24(/* @__PURE__ */ consKeys25(/* @__PURE__ */ consKeys26(/* @__PURE__ */ consKeys27(/* @__PURE__ */ consKeys28(/* @__PURE__ */ consKeys29(/* @__PURE__ */ consKeys30(/* @__PURE__ */ consKeys31(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "height";
    }
  })(/* @__PURE__ */ consKeys32(/* @__PURE__ */ consKeys33(/* @__PURE__ */ consKeys34(/* @__PURE__ */ consKeys35(/* @__PURE__ */ consKeys36(/* @__PURE__ */ consKeys37(/* @__PURE__ */ consKeys38(/* @__PURE__ */ consKeys39(/* @__PURE__ */ consKeys40(/* @__PURE__ */ consKeys41(/* @__PURE__ */ consKeys42(/* @__PURE__ */ consKeys43(/* @__PURE__ */ consKeys44(/* @__PURE__ */ consKeys45(/* @__PURE__ */ consKeys46(/* @__PURE__ */ consKeys47(/* @__PURE__ */ consKeys48(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "list";
    }
  })(/* @__PURE__ */ consKeys49(/* @__PURE__ */ consKeys50(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "max";
    }
  })(/* @__PURE__ */ consKeys51(/* @__PURE__ */ consKeys52(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "min";
    }
  })(/* @__PURE__ */ consKeys53(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "multiple";
    }
  })(/* @__PURE__ */ consKeys54(/* @__PURE__ */ consKeys55(/* @__PURE__ */ consKeys56(/* @__PURE__ */ consKeys57(/* @__PURE__ */ consKeys58(/* @__PURE__ */ consKeys59(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onChange";
    }
  })(/* @__PURE__ */ consKeys60(/* @__PURE__ */ consKeys61(/* @__PURE__ */ consKeys62(/* @__PURE__ */ consKeys63(/* @__PURE__ */ consKeys64(/* @__PURE__ */ consKeys65(/* @__PURE__ */ consKeys66(/* @__PURE__ */ consKeys67(/* @__PURE__ */ consKeys68(/* @__PURE__ */ consKeys69(/* @__PURE__ */ consKeys70(/* @__PURE__ */ consKeys71(/* @__PURE__ */ consKeys72(/* @__PURE__ */ consKeys73(/* @__PURE__ */ consKeys74(/* @__PURE__ */ consKeys75(/* @__PURE__ */ consKeys76(/* @__PURE__ */ consKeys77(/* @__PURE__ */ consKeys78(/* @__PURE__ */ consKeys79(/* @__PURE__ */ consKeys80(/* @__PURE__ */ consKeys81(/* @__PURE__ */ consKeys82(/* @__PURE__ */ consKeys83(/* @__PURE__ */ consKeys84(/* @__PURE__ */ consKeys85(/* @__PURE__ */ consKeys86(/* @__PURE__ */ consKeys87(/* @__PURE__ */ consKeys88(/* @__PURE__ */ consKeys89(/* @__PURE__ */ consKeys90(/* @__PURE__ */ consKeys91(/* @__PURE__ */ consKeys92(/* @__PURE__ */ consKeys93(/* @__PURE__ */ consKeys94(/* @__PURE__ */ consKeys95(/* @__PURE__ */ consKeys96(/* @__PURE__ */ consKeys97(/* @__PURE__ */ consKeys98(/* @__PURE__ */ consKeys99(/* @__PURE__ */ consKeys100(/* @__PURE__ */ consKeys101(/* @__PURE__ */ consKeys102(/* @__PURE__ */ consKeys103(/* @__PURE__ */ consKeys104(/* @__PURE__ */ consKeys105(/* @__PURE__ */ consKeys106(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "pattern";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "placeholder";
    }
  })(/* @__PURE__ */ consKeys107(/* @__PURE__ */ consKeys108(/* @__PURE__ */ consKeys109(/* @__PURE__ */ consKeys110(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "required";
    }
  })(/* @__PURE__ */ consKeys111(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "results";
    }
  })(/* @__PURE__ */ consKeys112(/* @__PURE__ */ consKeys113(/* @__PURE__ */ consKeys114(/* @__PURE__ */ consKeys115(/* @__PURE__ */ consKeys116(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "size";
    }
  })(/* @__PURE__ */ consKeys117(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "src";
    }
  })(/* @__PURE__ */ consKeys118(/* @__PURE__ */ consKeys119(/* @__PURE__ */ consKeys120(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "step";
    }
  })(/* @__PURE__ */ consKeys121(/* @__PURE__ */ consKeys122(/* @__PURE__ */ consKeys123(/* @__PURE__ */ consKeys124(/* @__PURE__ */ consKeys125(/* @__PURE__ */ consKeys126(/* @__PURE__ */ consKeys127(/* @__PURE__ */ consKeys128(/* @__PURE__ */ consKeys129(/* @__PURE__ */ consKeys130(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "width";
    }
  })(consKeys131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
  var unsafeEmotion = function(component26) {
    return function(propsA) {
      return function(propsB) {
        return element2(component26)(unsafeUnionDroppingUndefined(propsB)(propsA));
      };
    };
  };
  var unsafeAddProps = unsafeUnion;
  var pickDefined = function() {
    return function() {
      return function(ref) {
        return function(dictKeys) {
          var ks = fromFoldable7(keys3(dictKeys)($$Proxy.value));
          return runFn3(pickDefinedFn)(ref)(ks);
        };
      };
    };
  };
  var pickDefined1 = /* @__PURE__ */ pickDefined()();
  var getOffsetDimensionsFromRef = function(itemRef) {
    return runMaybeT(bind12(readRefMaybe(itemRef))(function(node2) {
      return bind12(pure11(fromNode(node2)))(function(elem3) {
        return bind12(lift4(offsetWidth(elem3)))(function(width9) {
          return bind12(lift4(offsetHeight(elem3)))(function(height9) {
            return pure13({
              width: width9,
              height: height9
            });
          });
        });
      });
    }));
  };
  var getHTMLElementFromRef = function(itemRef) {
    return runMaybeT(bind12(readRefMaybe(itemRef))(function(node2) {
      return pure11(fromNode(node2));
    }));
  };
  var getOffsetHeightFromRef = function(itemRef) {
    return function __do10() {
      var htmlElem = getHTMLElementFromRef(itemRef)();
      return $$for2(htmlElem)(offsetHeight)();
    };
  };
  var getOffsetWidthFromRef = function(itemRef) {
    return function __do10() {
      var htmlElem = getHTMLElementFromRef(itemRef)();
      return $$for2(htmlElem)(offsetWidth)();
    };
  };
  var getElementFromRef = function(itemRef) {
    return runMaybeT(bind12(readRefMaybe(itemRef))(function(node2) {
      return pure11(fromNode3(node2));
    }));
  };
  var getBoundingBoxFromRef = function(itemRef) {
    return function __do10() {
      var elem3 = getElementFromRef(itemRef)();
      return $$for2(elem3)(getBoundingClientRect)();
    };
  };
  var forwardedRefAsMaybe = function(r2) {
    return bind22(uorToMaybe(r2))(toMaybe);
  };
  var findElementByIdInDocument = function(id5) {
    return function __do10() {
      var doc = bind13(windowImpl)(document2)();
      var node2 = toNonElementParentNode(doc);
      return getElementById(id5)(node2)();
    };
  };
  var dangerous = function($753) {
    return unsafePerformEffect(unsafeCreateDOMComponent($753));
  };
  var unsafeButton = /* @__PURE__ */ dangerous("button");
  var emotionButton_ = function() {
    return unsafeEmotion(unsafeButton);
  };
  var emotionButton_1 = /* @__PURE__ */ emotionButton_();
  var emotionButton = function() {
    return function() {
      return function(ref) {
        var $754 = pickDefined1(ref)(consKeys133);
        return function($755) {
          return emotionButton_1($754($755));
        };
      };
    };
  };
  var unsafeDiv = /* @__PURE__ */ dangerous("div");
  var emotionDiv_ = function() {
    return function() {
      return unsafeEmotion(unsafeDiv);
    };
  };
  var emotionDiv_1 = /* @__PURE__ */ emotionDiv_()();
  var emotionDiv = function() {
    return function() {
      return function(ref) {
        var $756 = pickDefined1(ref)(consKeys134);
        return function($757) {
          return emotionDiv_1($756($757));
        };
      };
    };
  };
  var unsafeInput = /* @__PURE__ */ dangerous("input");
  var emotionInput_ = function() {
    return unsafeEmotion(unsafeInput);
  };
  var emotionInput_1 = /* @__PURE__ */ emotionInput_();
  var emotionInput = function() {
    return function(ref) {
      var $758 = pickDefined1(ref)(consKeys135);
      return function($759) {
        return emotionInput_1($758($759));
      };
    };
  };

  // output/Yoga.Block.Hook.UseRenderInPortal/index.js
  var coerceHook2 = /* @__PURE__ */ coerceHook();
  var bind14 = /* @__PURE__ */ bind2(ixBindRender);
  var foldMap6 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var discard3 = /* @__PURE__ */ discard2(ixBindRender);
  var when2 = /* @__PURE__ */ when(applicativeEffect);
  var bind15 = /* @__PURE__ */ bind(bindEffect);
  var mempty4 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var pure14 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useRenderInPortal = function(portalId) {
    return coerceHook2(bind14(useState$prime(Nothing.value))(function(v2) {
      var renderInPortal = function(jsx4) {
        return foldMap6(createPortal(jsx4))(v2.value0);
      };
      return discard3(useEffectOnce(function __do10() {
        when2(isNothing(v2.value0))(bind15(findElementByIdInDocument(portalId))(v2.value1))();
        return mempty4();
      }))(function() {
        return pure14(renderInPortal);
      });
    }));
  };

  // output/Fahrtwind.Style.Border/index.js
  var css15 = /* @__PURE__ */ css2();
  var rounded = function($10) {
    return css15(function(v2) {
      return {
        borderRadius: v2
      };
    }($10));
  };
  var rounded2xl = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(1));
  var rounded3xl = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(1.5));
  var roundedDefault = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.25));
  var roundedFull = /* @__PURE__ */ rounded(/* @__PURE__ */ px(9999));
  var roundedLg = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.5));
  var roundedMd = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.375));
  var roundedNone = /* @__PURE__ */ rounded(/* @__PURE__ */ px(0));
  var roundedXl = /* @__PURE__ */ rounded(/* @__PURE__ */ rem2(0.75));
  var borderRight = function($12) {
    return css15(function(v2) {
      return {
        borderRightWidth: v2
      };
    }(px($12)));
  };
  var borderLeft = function($13) {
    return css15(function(v2) {
      return {
        borderLeftWidth: v2
      };
    }(px($13)));
  };
  var borderCol$prime = function($14) {
    return css15(function(v2) {
      return {
        borderColor: v2
      };
    }($14));
  };
  var borderCol = function($15) {
    return css15(function(v2) {
      return {
        borderColor: v2
      };
    }(color($15)));
  };
  var borderBottom = function($16) {
    return css15(function(v2) {
      return {
        borderBottomWidth: v2
      };
    }(px($16)));
  };
  var border2 = function($17) {
    return css15(function(v2) {
      return {
        borderWidth: v2
      };
    }(px($17)));
  };

  // output/Fahrtwind.Style.BoxShadow/index.js
  var css16 = /* @__PURE__ */ css2();
  var shadowDefaultCol = function(col3) {
    return css16({
      boxShadow: str("0 1px 3px 0 " + (cssStringRGBA(withAlpha(lightness(col3) + 0.1)(col3)) + (", 0 1px 2px 0 " + cssStringRGBA(withAlpha(lightness(col3) + 0.06)(col3)))))
    });
  };
  var shadowDefault = /* @__PURE__ */ shadowDefaultCol(black);
  var shadow$prime = function(boxShadow) {
    return css16({
      boxShadow
    });
  };
  var shadowSmCol = function(col3) {
    return shadow$prime(str("0 1px 2px 0 " + cssStringRGBA(withAlpha(lightness(col3) + 0.05)(col3))));
  };
  var shadowMd = /* @__PURE__ */ shadowSmCol(black);
  var shadowSm = /* @__PURE__ */ shadowSmCol(black);
  var shadowXlCol = function(col3) {
    return shadow$prime(str("0 20px 25px -5px " + (cssStringRGBA(withAlpha(lightness(col3) + 0.1)(col3)) + ",") + ("0 10px 10px -5px " + cssStringRGBA(withAlpha(lightness(col3) + 0.04)(col3)))));
  };
  var shadowXl = /* @__PURE__ */ shadowXlCol(black);
  var shadowXxlCol = function(col3) {
    return shadow$prime(str("0 25px 50px -12px " + cssStringRGBA(withAlpha(lightness(col3) + 0.25)(col3))));
  };
  var shadowXxl = /* @__PURE__ */ shadowXxlCol(black);
  var shadow = function(s3) {
    return css16({
      boxShadow: str(s3)
    });
  };

  // output/Fahrtwind.Style.Color.Text/index.js
  var css17 = /* @__PURE__ */ css2();
  var textCol$prime = function($4) {
    return css17(function(v2) {
      return {
        color: v2
      };
    }($4));
  };
  var textCol = function($5) {
    return css17(function(v2) {
      return {
        color: v2
      };
    }(color($5)));
  };
  var textCenter = /* @__PURE__ */ css17({
    textAlign: /* @__PURE__ */ str("center")
  });

  // output/Fahrtwind.Style.Display.Flex/index.js
  var css18 = /* @__PURE__ */ css2();
  var show7 = /* @__PURE__ */ show(showInt);
  var justifyBetween = /* @__PURE__ */ css18({
    justifyContent: spaceBetween
  });
  var justifyAround = /* @__PURE__ */ css18({
    justifyContent: spaceAround
  });
  var itemsCenter = /* @__PURE__ */ css18({
    alignItems: center
  });
  var gap = function(x3) {
    return css18({
      gap: px(x3)
    });
  };
  var flexRow = /* @__PURE__ */ css18({
    display: flex,
    flexDirection: row
  });
  var flexGrow = function(g3) {
    return css18({
      flexGrow: str(show7(g3))
    });
  };
  var flexCol = /* @__PURE__ */ css18({
    display: flex,
    flexDirection: column2
  });

  // output/Fahrtwind.Style.Text/index.js
  var css19 = /* @__PURE__ */ css2();
  var append5 = /* @__PURE__ */ append(semigroupStyle);
  var underline = /* @__PURE__ */ css19({
    textDecoration: /* @__PURE__ */ str("underline")
  });
  var tracking = function(t) {
    return css19({
      letterSpacing: em(t)
    });
  };
  var trackingWide = /* @__PURE__ */ tracking(0.025);
  var textSized = function(fs) {
    return function(lh) {
      return css19({
        fontSize: rem2(fs),
        lineHeight: rem2(lh)
      });
    };
  };
  var textSm = /* @__PURE__ */ function() {
    return append5(textSized(0.875)(1.25))(tracking(-6e-3));
  }();
  var textXl = /* @__PURE__ */ function() {
    return append5(textSized(1.25)(1.75))(tracking(-0.017));
  }();
  var textXs = /* @__PURE__ */ textSized(0.75)(1);
  var textLg = /* @__PURE__ */ function() {
    return append5(textSized(1.125)(1.75))(tracking(-0.014));
  }();
  var textBase = /* @__PURE__ */ function() {
    return append5(textSized(1)(1.5))(tracking(-0.011));
  }();
  var textDefault = textBase;
  var text4xl = /* @__PURE__ */ function() {
    return append5(textSized(2.25)(2.5))(tracking(-0.022));
  }();
  var text3xl = /* @__PURE__ */ function() {
    return append5(textSized(1.875)(2.25))(tracking(-0.021));
  }();
  var text2xl = /* @__PURE__ */ function() {
    return append5(textSized(1.5)(2))(tracking(-0.019));
  }();
  var lineHeight$prime = function($8) {
    return css19(function(v2) {
      return {
        lineHeight: v2
      };
    }($8));
  };
  var lineHeight = function($9) {
    return lineHeight$prime(str($9));
  };
  var fontSemibold = /* @__PURE__ */ css19({
    fontWeight: /* @__PURE__ */ $$int(600)
  });
  var fontSemiMedium = /* @__PURE__ */ css19({
    fontWeight: /* @__PURE__ */ $$int(450)
  });
  var fontNormal = /* @__PURE__ */ css19({
    fontWeight: /* @__PURE__ */ $$int(400)
  });
  var fontMedium = /* @__PURE__ */ css19({
    fontWeight: /* @__PURE__ */ $$int(500)
  });
  var fontFamilyOrSerif = function(ff2) {
    return css19({
      fontFamily: str(ff2 + ", serif")
    });
  };
  var fontFamilyOrMono = function(ff2) {
    return css19({
      fontFamily: str(ff2 + ", monospace")
    });
  };
  var fontBold = /* @__PURE__ */ css19({
    fontWeight: /* @__PURE__ */ $$int(700)
  });

  // output/Yoga.Block.Organism.NotificationCentre.Notification.Style/index.js
  var append6 = /* @__PURE__ */ append(semigroupStyle);
  var defaultNotificationTitleStyle = /* @__PURE__ */ function() {
    return append6(textCol$prime(col2.textPaler2))(append6(textSm)(append6(fontMedium)(pB(6))));
  }();
  var defaultNotificationStyle = /* @__PURE__ */ function() {
    return append6(rounded2xl)(append6(shadow("0 0 16px rgba(0,0,0,0.1), 0 0 32px rgba(0,0,0,0.1)"))(append6(width(340))(append6(height(120))(append6(overflowHidden)(append6(border2(1))(borderCol$prime(col2.backgroundLayer2)))))));
  }();
  var defaultNotificationContentStyle = /* @__PURE__ */ append6(/* @__PURE__ */ pX(12))(/* @__PURE__ */ append6(/* @__PURE__ */ pY(12))(positionRelative));
  var defaultNotificationContentContainerStyle = /* @__PURE__ */ function() {
    return append6(widthFull)(append6(heightFull)(append6(background$prime(col2.background))(append6(flexCol)(positionRelative))));
  }();
  var defaultNotificationContainerStyle = /* @__PURE__ */ append6(positionFixed)(/* @__PURE__ */ append6(/* @__PURE__ */ top4(16))(/* @__PURE__ */ append6(/* @__PURE__ */ right(16))(/* @__PURE__ */ append6(flexCol)(/* @__PURE__ */ append6(/* @__PURE__ */ gap(8))(acceptClicks)))));
  var defaultNotificationBodyStyle = /* @__PURE__ */ function() {
    return append6(textCol$prime(col2.text))(textXs);
  }();
  var defaultDismissButtonStyle = /* @__PURE__ */ function() {
    return append6(positionAbsolute)(append6(right(8))(append6(top4(8))(append6(textCol$prime(col2.textPaler2))(append6(border2(0))(append6(shadowDefault)(append6(borderCol$prime(col2.backgroundLayer3))(append6(roundedLg)(append6(background$prime(col2.backgroundLayer5))(append6(widthAndHeight(26))(pXY(3)))))))))));
  }();

  // output/Yoga.Block.Organism.NotificationCentre.Notification.View/index.js
  var styled2 = /* @__PURE__ */ styled();
  var div7 = /* @__PURE__ */ div6();
  var el2 = /* @__PURE__ */ el();
  var animatePresence2 = /* @__PURE__ */ animatePresence();
  var mapFlipped5 = /* @__PURE__ */ mapFlipped(functorArray);
  var initial2 = /* @__PURE__ */ initial();
  var animate4 = /* @__PURE__ */ animate3();
  var exit2 = /* @__PURE__ */ exit();
  var show8 = /* @__PURE__ */ show(showInt);
  var layoutId2 = /* @__PURE__ */ layoutId();
  var button$prime2 = /* @__PURE__ */ button$prime();
  var bind16 = /* @__PURE__ */ bind2(ixBindRender);
  var discard4 = /* @__PURE__ */ discard2(ixBindRender);
  var notEq3 = /* @__PURE__ */ notEq(eqNotificationId);
  var pure15 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var renderAnimatedNotifications = function(items) {
    return styled2(div7)({
      css: defaultNotificationContainerStyle
    })([el2(animatePresence2)({
      initial: false
    })(mapFlipped5(items)(function(v2) {
      return styled2(div7)({
        css: defaultNotificationStyle,
        initial: initial2(css8({
          y: -40 | 0,
          x: 0,
          scale: 0.3,
          opacity: 0
        })),
        animate: animate4(css8({
          y: 0,
          x: 0,
          scale: 1,
          opacity: 1,
          transition: {
            bounce: 0.05
          }
        })),
        exit: exit2(css8({
          scale: 1,
          y: 0,
          x: 500,
          opacity: 1,
          transition: {
            duration: 0.5
          }
        })),
        key: show8(v2.value0),
        layoutId: layoutId2(show8(v2.value0)),
        style: css8({
          transformOrigin: "center center"
        })
      })([v2.value1]);
    }))]);
  };
  var notificationDismissButton = function(dismiss) {
    return styled2(button$prime2)({
      onClick: handler_(dismiss),
      css: defaultDismissButtonStyle
    })([cross]);
  };
  var mkNotificationCentreView = function(v2) {
    return function(v1) {
      return function __do10() {
        var render = component("NotificationCentre")(function(v22) {
          return bind16(useState([]))(function(v3) {
            return bind16(useRenderInPortal(v1.containerId))(function(renderInPortal) {
              return discard4(useEffectOnce(v2.subscribe(function(v42) {
                if (v42 instanceof NotificationAdded) {
                  return v3.value1(cons2(new Tuple(v42.value0, v42.value1)));
                }
                ;
                if (v42 instanceof NotificationDismissed) {
                  return v3.value1(filter(function($54) {
                    return function(v5) {
                      return notEq3(v5)(v42.value0);
                    }(fst($54));
                  }));
                }
                ;
                throw new Error("Failed pattern match at Yoga.Block.Organism.NotificationCentre.Notification.View (line 32, column 19 - line 36, column 47): " + [v42.constructor.name]);
              })))(function() {
                var view = v1.renderNotifications(v3.value0);
                return pure15(renderInPortal(view));
              });
            });
          });
        })();
        return render(unit);
      };
    };
  };

  // output/UI.Container/index.js
  var css20 = /* @__PURE__ */ css2();
  var append7 = /* @__PURE__ */ append(semigroupStyle);
  var styled3 = /* @__PURE__ */ styled();
  var div$prime4 = /* @__PURE__ */ div$prime();
  var append14 = /* @__PURE__ */ append(semigroupArray);
  var tooltipId = "tooltip";
  var popOverId = "popOver";
  var ourGlobalStyle = /* @__PURE__ */ function() {
    return css20({
      html: nested(css20({
        width: vw(100),
        overflowX: hidden,
        height: vh(100),
        overflowY: hidden
      })),
      body: nested(append7(background$prime(col2.backgroundLayer1))(css20({
        "--mono-font": str("'Jetbrains Mono', monospace"),
        scrollbarGutter: str("stable")
      }))),
      "*": nested(css20({
        "&::-webkit-scrollbar": nested(append7(width(12))(height(6))),
        "&::-webkit-scrollbar-track": nested(background$prime(col2.backgroundBright3)),
        "&::-webkit-scrollbar-thumb": nested(append7(css20({
          background: col2.backgroundBright5
        }))(hover(background$prime(col2.textPaler4)))),
        "&::-webkit-scrollbar-corner": nested(background$prime(col2.backgroundLayer2)),
        a: nested(css20({
          textDecoration: none,
          fontWeight: str("normal")
        }))
      }))
    });
  }();
  var notificationsId = "notifications";
  var modalContainerId = "modal";
  var modalClickawayId = "modal-clickaway";
  var mkContainer = function(notificationCentre) {
    var fullScreenLayerStyle = function(zIndex2) {
      return append7(positionFixed)(append7(left(0))(append7(top4(0))(append7(widthScreen)(append7(heightScreen)(append7(overflowHidden)(append7(ignoreClicks)(zIndex(zIndex2))))))));
    };
    var scrollableFullScreenLayerDiv = function(id5) {
      return function(zIndex2) {
        return styled3(div$prime4)({
          id: id5,
          css: append7(fullScreenLayerStyle(zIndex2))(append7(positionAbsolute)(append7(overflowVisible)(append7(heightFull)(append7(widthFull)(overflowHidden)))))
        })([]);
      };
    };
    var fixedFullScreenLayerDiv = function(id5) {
      return function(zIndex2) {
        return styled3(div$prime4)({
          id: id5,
          css: fullScreenLayerStyle(zIndex2)
        })([]);
      };
    };
    return function __do10() {
      var notificationCentreView = mkNotificationCentreView(notificationCentre)({
        containerId: notificationsId,
        renderNotifications: renderAnimatedNotifications
      })();
      return function(children2) {
        return fragment(append14(children2)([notificationCentreView, scrollableFullScreenLayerDiv(popOverId)(10), scrollableFullScreenLayerDiv(tooltipId)(20), fixedFullScreenLayerDiv(modalClickawayId)(30), fixedFullScreenLayerDiv(modalContainerId)(40), fixedFullScreenLayerDiv(notificationsId)(300)]));
      };
    };
  };

  // output/UI.HeaderBar.Style/index.js
  var headerBarHeight = 84;

  // output/JSURI/foreign.js
  function toRFC3896(input6) {
    return input6.replace(/[!'()*]/g, function(c3) {
      return "%" + c3.charCodeAt(0).toString(16);
    });
  }
  var _encodeURIComponent = function encode(fail5, succeed, input6) {
    try {
      return succeed(toRFC3896(encodeURIComponent(input6)));
    } catch (err) {
      return fail5(err);
    }
  };
  function _decodeURIComponent(fail5, succeed, input6) {
    try {
      return succeed(decodeURIComponent(input6));
    } catch (err) {
      return fail5(err);
    }
  }

  // output/JSURI/index.js
  var $$encodeURIComponent = /* @__PURE__ */ function() {
    return runFn3(_encodeURIComponent)($$const(Nothing.value))(Just.create);
  }();
  var $$decodeURIComponent = /* @__PURE__ */ function() {
    return runFn3(_decodeURIComponent)($$const(Nothing.value))(Just.create);
  }();

  // output/Routing.Duplex.Types/index.js
  var emptyRouteState = {
    segments: [],
    params: [],
    hash: ""
  };

  // output/Routing.Duplex.Parser/index.js
  var $runtime_lazy4 = function(name15, moduleName, init5) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init5();
      state3 = 2;
      return val;
    };
  };
  var fromJust5 = /* @__PURE__ */ fromJust();
  var map26 = /* @__PURE__ */ map(functorArray);
  var bimap3 = /* @__PURE__ */ bimap(bifunctorTuple);
  var map111 = /* @__PURE__ */ map(functorNonEmptyArray);
  var map27 = /* @__PURE__ */ map(functorFn);
  var foldl3 = /* @__PURE__ */ foldl(foldableNonEmptyArray);
  var append8 = /* @__PURE__ */ append(semigroupNonEmptyArray);
  var Expected = /* @__PURE__ */ function() {
    function Expected2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Expected2.create = function(value0) {
      return function(value1) {
        return new Expected2(value0, value1);
      };
    };
    return Expected2;
  }();
  var ExpectedEndOfPath = /* @__PURE__ */ function() {
    function ExpectedEndOfPath2(value0) {
      this.value0 = value0;
    }
    ;
    ExpectedEndOfPath2.create = function(value0) {
      return new ExpectedEndOfPath2(value0);
    };
    return ExpectedEndOfPath2;
  }();
  var EndOfPath = /* @__PURE__ */ function() {
    function EndOfPath2() {
    }
    ;
    EndOfPath2.value = new EndOfPath2();
    return EndOfPath2;
  }();
  var Fail = /* @__PURE__ */ function() {
    function Fail3(value0) {
      this.value0 = value0;
    }
    ;
    Fail3.create = function(value0) {
      return new Fail3(value0);
    };
    return Fail3;
  }();
  var Success = /* @__PURE__ */ function() {
    function Success3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Success3.create = function(value0) {
      return function(value1) {
        return new Success3(value0, value1);
      };
    };
    return Success3;
  }();
  var Alt = /* @__PURE__ */ function() {
    function Alt2(value0) {
      this.value0 = value0;
    }
    ;
    Alt2.create = function(value0) {
      return new Alt2(value0);
    };
    return Alt2;
  }();
  var Chomp = /* @__PURE__ */ function() {
    function Chomp2(value0) {
      this.value0 = value0;
    }
    ;
    Chomp2.create = function(value0) {
      return new Chomp2(value0);
    };
    return Chomp2;
  }();
  var Prefix = /* @__PURE__ */ function() {
    function Prefix2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Prefix2.create = function(value0) {
      return function(value1) {
        return new Prefix2(value0, value1);
      };
    };
    return Prefix2;
  }();
  var prefix2 = /* @__PURE__ */ function() {
    return Prefix.create;
  }();
  var parsePath = /* @__PURE__ */ function() {
    var unsafeDecodeURIComponent = function($327) {
      return fromJust5($$decodeURIComponent($327));
    };
    var toRouteState = function(v2) {
      return {
        segments: v2.value0.value0,
        params: v2.value0.value1,
        hash: v2.value1
      };
    };
    var splitNonEmpty = function(v2) {
      return function(v1) {
        if (v1 === "") {
          return [];
        }
        ;
        return split(v2)(v1);
      };
    };
    var splitSegments = function() {
      var $328 = splitNonEmpty("/");
      return function($329) {
        return function(v2) {
          if (v2.length === 2 && (v2[0] === "" && v2[1] === "")) {
            return [""];
          }
          ;
          return map26(unsafeDecodeURIComponent)(v2);
        }($328($329));
      };
    }();
    var splitAt4 = function(k2) {
      return function(p3) {
        return function(str2) {
          var v2 = indexOf(p3)(str2);
          if (v2 instanceof Just) {
            return new Tuple(take3(v2.value0)(str2), drop3(v2.value0 + length4(p3) | 0)(str2));
          }
          ;
          if (v2 instanceof Nothing) {
            return k2(str2);
          }
          ;
          throw new Error("Failed pattern match at Routing.Duplex.Parser (line 185, column 5 - line 187, column 23): " + [v2.constructor.name]);
        };
      };
    };
    var splitKeyValue = function() {
      var $330 = bimap3(unsafeDecodeURIComponent)(unsafeDecodeURIComponent);
      var $331 = splitAt4(flip(Tuple.create)(""))("=");
      return function($332) {
        return $330($331($332));
      };
    }();
    var splitParams = function() {
      var $333 = map26(splitKeyValue);
      var $334 = splitNonEmpty("&");
      return function($335) {
        return $333($334($335));
      };
    }();
    var splitPath = function() {
      var $336 = bimap3(splitSegments)(splitParams);
      var $337 = splitAt4(flip(Tuple.create)(""))("?");
      return function($338) {
        return $336($337($338));
      };
    }();
    var $339 = lmap(bifunctorTuple)(splitPath);
    var $340 = splitAt4(flip(Tuple.create)(""))("#");
    return function($341) {
      return toRouteState($339($340($341)));
    };
  }();
  var functorRouteResult = {
    map: function(f2) {
      return function(m2) {
        if (m2 instanceof Fail) {
          return new Fail(m2.value0);
        }
        ;
        if (m2 instanceof Success) {
          return new Success(m2.value0, f2(m2.value1));
        }
        ;
        throw new Error("Failed pattern match at Routing.Duplex.Parser (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };
  var map32 = /* @__PURE__ */ map(functorRouteResult);
  var functorRouteParser = {
    map: function(f2) {
      return function(m2) {
        if (m2 instanceof Alt) {
          return new Alt(map111(map(functorRouteParser)(f2))(m2.value0));
        }
        ;
        if (m2 instanceof Chomp) {
          return new Chomp(map27(map32(f2))(m2.value0));
        }
        ;
        if (m2 instanceof Prefix) {
          return new Prefix(m2.value0, map(functorRouteParser)(f2)(m2.value1));
        }
        ;
        throw new Error("Failed pattern match at Routing.Duplex.Parser (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };
  var end = /* @__PURE__ */ function() {
    return new Chomp(function(state3) {
      var v2 = head(state3.segments);
      if (v2 instanceof Nothing) {
        return new Success(state3, unit);
      }
      ;
      if (v2 instanceof Just) {
        return new Fail(new ExpectedEndOfPath(v2.value0));
      }
      ;
      throw new Error("Failed pattern match at Routing.Duplex.Parser (line 256, column 3 - line 258, column 45): " + [v2.constructor.name]);
    });
  }();
  var chompPrefix = function(pre2) {
    return function(state3) {
      var v2 = head(state3.segments);
      if (v2 instanceof Just && pre2 === v2.value0) {
        return new Success({
          segments: drop(1)(state3.segments),
          params: state3.params,
          hash: state3.hash
        }, unit);
      }
      ;
      if (v2 instanceof Just) {
        return new Fail(new Expected(pre2, v2.value0));
      }
      ;
      return new Fail(EndOfPath.value);
    };
  };
  var $lazy_runRouteParser = /* @__PURE__ */ $runtime_lazy4("runRouteParser", "Routing.Duplex.Parser", function() {
    var goAlt = function(v2) {
      return function(v1) {
        return function(v22) {
          if (v1 instanceof Fail) {
            return $lazy_runRouteParser(153)(v2)(v22);
          }
          ;
          return v1;
        };
      };
    };
    var go2 = function($copy_state) {
      return function($copy_v) {
        var $tco_var_state = $copy_state;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(state3, v2) {
          if (v2 instanceof Alt) {
            $tco_done = true;
            return foldl3(goAlt(state3))(new Fail(EndOfPath.value))(v2.value0);
          }
          ;
          if (v2 instanceof Chomp) {
            $tco_done = true;
            return v2.value0(state3);
          }
          ;
          if (v2 instanceof Prefix) {
            var v1 = chompPrefix(v2.value0)(state3);
            if (v1 instanceof Fail) {
              $tco_done = true;
              return new Fail(v1.value0);
            }
            ;
            if (v1 instanceof Success) {
              $tco_var_state = v1.value0;
              $copy_v = v2.value1;
              return;
            }
            ;
            throw new Error("Failed pattern match at Routing.Duplex.Parser (line 149, column 7 - line 151, column 40): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Routing.Duplex.Parser (line 145, column 14 - line 151, column 40): " + [v2.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_state, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go2;
  });
  var runRouteParser = /* @__PURE__ */ $lazy_runRouteParser(142);
  var run3 = function(p3) {
    var $344 = flip(runRouteParser)(p3);
    return function($345) {
      return function(v2) {
        if (v2 instanceof Fail) {
          return new Left(v2.value0);
        }
        ;
        if (v2 instanceof Success) {
          return new Right(v2.value1);
        }
        ;
        throw new Error("Failed pattern match at Routing.Duplex.Parser (line 190, column 49 - line 192, column 29): " + [v2.constructor.name]);
      }($344(parsePath($345)));
    };
  };
  var applyRouteParser = {
    apply: function(fx) {
      return function(x3) {
        return new Chomp(function(state3) {
          var v2 = runRouteParser(state3)(fx);
          if (v2 instanceof Fail) {
            return new Fail(v2.value0);
          }
          ;
          if (v2 instanceof Success) {
            return map32(v2.value1)(runRouteParser(v2.value0)(x3));
          }
          ;
          throw new Error("Failed pattern match at Routing.Duplex.Parser (line 76, column 5 - line 78, column 56): " + [v2.constructor.name]);
        });
      };
    },
    Functor0: function() {
      return functorRouteParser;
    }
  };
  var applicativeRouteParser = {
    pure: /* @__PURE__ */ function() {
      var $346 = flip(Success.create);
      return function($347) {
        return Chomp.create($346($347));
      };
    }(),
    Apply0: function() {
      return applyRouteParser;
    }
  };
  var altSnoc = function(ls) {
    return function(v2) {
      var v1 = function(v22) {
        return snoc2(ls)(v2);
      };
      if (v2 instanceof Prefix) {
        var $287 = last2(ls);
        if ($287 instanceof Prefix) {
          var $288 = v2.value0 === $287.value0;
          if ($288) {
            return snoc$prime(init2(ls))(new Prefix(v2.value0, alt(altRouteParser)($287.value1)(v2.value1)));
          }
          ;
          return v1(true);
        }
        ;
        return v1(true);
      }
      ;
      return v1(true);
    };
  };
  var altRouteParser = {
    alt: function(v2) {
      return function(v1) {
        if (v2 instanceof Alt && v1 instanceof Alt) {
          return new Alt(altAppend(v2.value0)(v1.value0));
        }
        ;
        if (v2 instanceof Alt) {
          return new Alt(altSnoc(v2.value0)(v1));
        }
        ;
        if (v1 instanceof Alt) {
          return new Alt(altCons(v2)(v1.value0));
        }
        ;
        if (v2 instanceof Prefix && (v1 instanceof Prefix && v2.value0 === v1.value0)) {
          return new Prefix(v2.value0, alt(altRouteParser)(v2.value1)(v1.value1));
        }
        ;
        return new Alt(cons3(v2)(singleton4(v1)));
      };
    },
    Functor0: function() {
      return functorRouteParser;
    }
  };
  var altCons = function(v2) {
    return function(rs) {
      var v1 = function(v22) {
        return cons3(v2)(rs);
      };
      if (v2 instanceof Prefix) {
        var $307 = head2(rs);
        if ($307 instanceof Prefix) {
          var $308 = v2.value0 === $307.value0;
          if ($308) {
            return cons$prime(new Prefix(v2.value0, alt(altRouteParser)(v2.value1)($307.value1)))(tail2(rs));
          }
          ;
          return v1(true);
        }
        ;
        return v1(true);
      }
      ;
      return v1(true);
    };
  };
  var altAppend = function($copy_ls) {
    return function($copy_rs) {
      var $tco_var_ls = $copy_ls;
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(ls, rs) {
        var v2 = function(v12) {
          if (otherwise) {
            return append8(ls)(rs);
          }
          ;
          throw new Error("Failed pattern match at Routing.Duplex.Parser (line 98, column 1 - line 101, column 32): " + [ls.constructor.name, rs.constructor.name]);
        };
        var $317 = last2(ls);
        if ($317 instanceof Prefix) {
          var $318 = head2(rs);
          if ($318 instanceof Prefix) {
            var $319 = $317.value0 === $318.value0;
            if ($319) {
              var rs$prime = cons$prime(new Prefix($317.value0, alt(altRouteParser)($317.value1)($318.value1)))(tail2(rs));
              var v1 = fromArray(init2(ls));
              if (v1 instanceof Just) {
                $tco_var_ls = v1.value0;
                $copy_rs = rs$prime;
                return;
              }
              ;
              if (v1 instanceof Nothing) {
                $tco_done = true;
                return rs$prime;
              }
              ;
              throw new Error("Failed pattern match at Routing.Duplex.Parser (line 110, column 9 - line 112, column 26): " + [v1.constructor.name]);
            }
            ;
            $tco_done = true;
            return v2(true);
          }
          ;
          $tco_done = true;
          return v2(true);
        }
        ;
        $tco_done = true;
        return v2(true);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($tco_var_ls, $copy_rs);
      }
      ;
      return $tco_result;
    };
  };

  // output/Routing.Duplex.Printer/index.js
  var fromJust6 = /* @__PURE__ */ fromJust();
  var map28 = /* @__PURE__ */ map(functorArray);
  var semigroupRoutePrinter = {
    append: function(v2) {
      return function(v1) {
        return function($32) {
          return v1(v2($32));
        };
      };
    }
  };
  var put = function(str2) {
    return function(state3) {
      return {
        segments: snoc(state3.segments)(str2),
        params: state3.params,
        hash: state3.hash
      };
    };
  };
  var printPath = function(v2) {
    var unsafeEncodeURIComponent = function($34) {
      return fromJust6($$encodeURIComponent($34));
    };
    var printSegments = function(v1) {
      if (v1.length === 1 && v1[0] === "") {
        return "/";
      }
      ;
      return joinWith("/")(map28(unsafeEncodeURIComponent)(v1));
    };
    var printParam = function(key) {
      return function(v1) {
        if (v1 === "") {
          return unsafeEncodeURIComponent(key);
        }
        ;
        return unsafeEncodeURIComponent(key) + ("=" + unsafeEncodeURIComponent(v1));
      };
    };
    var printParams = function(v1) {
      if (v1.length === 0) {
        return "";
      }
      ;
      return "?" + joinWith("&")(map28(uncurry(printParam))(v1));
    };
    var printHash = function(v1) {
      if (v1 === "") {
        return "";
      }
      ;
      return "#" + v1;
    };
    return printSegments(v2.segments) + (printParams(v2.params) + printHash(v2.hash));
  };
  var run4 = /* @__PURE__ */ function() {
    var $35 = applyFlipped(emptyRouteState);
    var $36 = unwrap();
    return function($37) {
      return printPath($35($36($37)));
    };
  }();
  var monoidRoutePRinter = {
    mempty: /* @__PURE__ */ identity(categoryFn),
    Semigroup0: function() {
      return semigroupRoutePrinter;
    }
  };

  // output/Routing.Duplex/index.js
  var append9 = /* @__PURE__ */ append(semigroupRoutePrinter);
  var applyFirst2 = /* @__PURE__ */ applyFirst(applyRouteParser);
  var pure16 = /* @__PURE__ */ pure(applicativeRouteParser);
  var apply7 = /* @__PURE__ */ apply(applyRouteParser);
  var map29 = /* @__PURE__ */ map(functorRouteParser);
  var mempty5 = /* @__PURE__ */ mempty(monoidRoutePRinter);
  var apply1 = /* @__PURE__ */ apply(applyFn);
  var map112 = /* @__PURE__ */ map(functorFn);
  var RouteDuplex = /* @__PURE__ */ function() {
    function RouteDuplex2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    RouteDuplex2.create = function(value0) {
      return function(value1) {
        return new RouteDuplex2(value0, value1);
      };
    };
    return RouteDuplex2;
  }();
  var profunctorRouteDuplex = {
    dimap: function(f2) {
      return function(g3) {
        return function(v2) {
          return new RouteDuplex(function($137) {
            return v2.value0(f2($137));
          }, map29(g3)(v2.value1));
        };
      };
    }
  };
  var print6 = function(v2) {
    return function($138) {
      return run4(v2.value0($138));
    };
  };
  var prefix3 = function(s3) {
    return function(v2) {
      return new RouteDuplex(function(a4) {
        return append9(put(s3))(v2.value0(a4));
      }, prefix2(s3)(v2.value1));
    };
  };
  var path4 = /* @__PURE__ */ function() {
    var $139 = flip(foldr(foldableArray)(prefix3));
    var $140 = split("/");
    return function($141) {
      return $139($140($141));
    };
  }();
  var root = /* @__PURE__ */ path4("");
  var parse8 = function(v2) {
    return run3(v2.value1);
  };
  var functorRouteDuplex = {
    map: function(f2) {
      return function(m2) {
        return new RouteDuplex(m2.value0, map29(f2)(m2.value1));
      };
    }
  };
  var end2 = function(v2) {
    return new RouteDuplex(v2.value0, applyFirst2(v2.value1)(end));
  };
  var applyRouteDuplex = {
    apply: function(v2) {
      return function(v1) {
        return new RouteDuplex(apply1(map112(append9)(v2.value0))(v1.value0), apply7(v2.value1)(v1.value1));
      };
    },
    Functor0: function() {
      return functorRouteDuplex;
    }
  };
  var applicativeRouteDuplex = {
    pure: /* @__PURE__ */ function() {
      var $143 = RouteDuplex.create($$const(mempty5));
      return function($144) {
        return $143(pure16($144));
      };
    }(),
    Apply0: function() {
      return applyRouteDuplex;
    }
  };

  // output/Routing.Duplex.Generic/index.js
  var identity15 = /* @__PURE__ */ identity(categoryFn);
  var map30 = /* @__PURE__ */ map(functorRouteParser);
  var alt10 = /* @__PURE__ */ alt(altRouteParser);
  var dimap2 = /* @__PURE__ */ dimap(profunctorRouteDuplex);
  var noArgs = /* @__PURE__ */ function() {
    return pure(applicativeRouteDuplex)(NoArguments.value);
  }();
  var gRouteNoArguments = {
    gRouteDuplexCtr: identity15
  };
  var gRouteDuplexCtr = function(dict) {
    return dict.gRouteDuplexCtr;
  };
  var gRouteDuplex = function(dict) {
    return dict.gRouteDuplex;
  };
  var gRouteSum = function(dictGRouteDuplex) {
    var gRouteDuplex1 = gRouteDuplex(dictGRouteDuplex);
    return function(dictGRouteDuplex1) {
      var gRouteDuplex2 = gRouteDuplex(dictGRouteDuplex1);
      return {
        gRouteDuplex: function(r2) {
          var v2 = gRouteDuplex1(r2);
          var v1 = gRouteDuplex2(r2);
          var enc = function(v22) {
            if (v22 instanceof Inl) {
              return v2.value0(v22.value0);
            }
            ;
            if (v22 instanceof Inr) {
              return v1.value0(v22.value0);
            }
            ;
            throw new Error("Failed pattern match at Routing.Duplex.Generic (line 33, column 11 - line 35, column 22): " + [v22.constructor.name]);
          };
          var dec = alt10(map30(Inl.create)(v2.value1))(map30(Inr.create)(v1.value1));
          return new RouteDuplex(enc, dec);
        }
      };
    };
  };
  var sum2 = function(dictGeneric) {
    var from4 = from(dictGeneric);
    var to2 = to(dictGeneric);
    return function(dictGRouteDuplex) {
      var $66 = dimap2(from4)(to2);
      var $67 = gRouteDuplex(dictGRouteDuplex);
      return function($68) {
        return $66($67($68));
      };
    };
  };
  var gRouteConstructor = function(dictIsSymbol) {
    var get4 = get(dictIsSymbol)();
    return function() {
      return function(dictGRouteDuplexCtr) {
        var gRouteDuplexCtr1 = gRouteDuplexCtr(dictGRouteDuplexCtr);
        return {
          gRouteDuplex: function(r2) {
            var v2 = end2(gRouteDuplexCtr1(get4($$Proxy.value)(r2)));
            var enc = function(v1) {
              return v2.value0(v1);
            };
            var dec = map30(Constructor)(v2.value1);
            return new RouteDuplex(enc, dec);
          }
        };
      };
    };
  };
  var gRouteArgument = {
    gRouteDuplexCtr: identity15
  };
  var gRouteAll = {
    gRouteDuplexCtr: function(v2) {
      return new RouteDuplex(function(v1) {
        return v2.value0(v1);
      }, map30(Argument)(v2.value1));
    }
  };

  // output/Routing.Duplex.Generic.Syntax/index.js
  var gsepStringRoute = function(dictGRouteDuplexCtr) {
    var gRouteDuplexCtr2 = gRouteDuplexCtr(dictGRouteDuplexCtr);
    return {
      gsep: function(a4) {
        var $15 = prefix3(a4);
        return function($16) {
          return $15(gRouteDuplexCtr2($16));
        };
      }
    };
  };
  var gsep = function(dict) {
    return dict.gsep;
  };

  // output/Data.String.NonEmpty.Internal/index.js
  var toString3 = function(v2) {
    return v2;
  };

  // output/Web.Event.EventTarget/foreign.js
  function eventListener(fn) {
    return function() {
      return function(event) {
        return fn(event)();
      };
    };
  }
  function addEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target6) {
          return function() {
            return target6.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }
  function removeEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target6) {
          return function() {
            return target6.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }

  // output/Web.HTML.Event.HashChangeEvent.EventTypes/index.js
  var hashchange = "hashchange";

  // output/Routing.Hash/index.js
  var bind17 = /* @__PURE__ */ bind(bindEffect);
  var map31 = /* @__PURE__ */ map(functorEffect);
  var bindFlipped6 = /* @__PURE__ */ bindFlipped(bindEffect);
  var join3 = /* @__PURE__ */ join(bindEffect);
  var apply8 = /* @__PURE__ */ apply(applyEffect);
  var pure17 = /* @__PURE__ */ pure(applicativeEffect);
  var voidRight3 = /* @__PURE__ */ voidRight(functorEffect);
  var setHash2 = function(h7) {
    return bind17(bind17(windowImpl)(location2))(setHash(h7));
  };
  var getHash = /* @__PURE__ */ bind17(/* @__PURE__ */ bind17(windowImpl)(location2))(/* @__PURE__ */ function() {
    var $16 = map31(function() {
      var $18 = fromMaybe("");
      var $19 = stripPrefix("#");
      return function($20) {
        return $18($19($20));
      };
    }());
    return function($17) {
      return $16(hash2($17));
    };
  }());
  var foldHashes = function(cb2) {
    return function(init5) {
      return function __do10() {
        var ref = bindFlipped6($$new)(bindFlipped6(init5)(getHash))();
        var win = map31(toEventTarget2)(windowImpl)();
        var listener = eventListener(function(v2) {
          return bindFlipped6(flip(write)(ref))(join3(apply8(map31(cb2)(read(ref)))(getHash)));
        })();
        addEventListener(hashchange)(listener)(false)(win)();
        return removeEventListener(hashchange)(listener)(false)(win);
      };
    };
  };
  var matchesWith = function(dictFoldable) {
    var indexl2 = indexl(dictFoldable);
    return function(parser2) {
      return function(cb2) {
        var go2 = function(a4) {
          var $21 = maybe(pure17(a4))(function(b4) {
            return voidRight3(new Just(b4))(cb2(a4)(b4));
          });
          var $22 = indexl2(0);
          return function($23) {
            return $21($22(parser2($23)));
          };
        };
        return foldHashes(go2)(go2(Nothing.value));
      };
    };
  };

  // output/UI.Navigation.Router.Page.Preferences/index.js
  var RootIsSymbol = {
    reflectSymbol: function() {
      return "Root";
    }
  };
  var SpagoIsSymbol = {
    reflectSymbol: function() {
      return "Spago";
    }
  };
  var Root = /* @__PURE__ */ function() {
    function Root2() {
    }
    ;
    Root2.value = new Root2();
    return Root2;
  }();
  var Spago2 = /* @__PURE__ */ function() {
    function Spago3() {
    }
    ;
    Spago3.value = new Spago3();
    return Spago3;
  }();
  var genericRoute_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return Root.value;
      }
      ;
      if (x3 instanceof Inr) {
        return Spago2.value;
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Page.Preferences (line 26, column 1 - line 26, column 32): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof Root) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof Spago2) {
        return new Inr(NoArguments.value);
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Page.Preferences (line 26, column 1 - line 26, column 32): " + [x3.constructor.name]);
    }
  };
  var subRoute = /* @__PURE__ */ root(/* @__PURE__ */ sum2(genericRoute_)(/* @__PURE__ */ gRouteSum(/* @__PURE__ */ gRouteConstructor(RootIsSymbol)()(gRouteNoArguments))(/* @__PURE__ */ gRouteConstructor(SpagoIsSymbol)()(gRouteNoArguments)))({
    Root: noArgs,
    Spago: /* @__PURE__ */ gsep(/* @__PURE__ */ gsepStringRoute(gRouteNoArguments))("spago")(noArgs)
  }));

  // output/UI.Navigation.Router.Types/index.js
  var genericEnumConstructor2 = /* @__PURE__ */ genericEnumConstructor(genericEnumNoArguments);
  var genericTopConstructor2 = /* @__PURE__ */ genericTopConstructor(genericTopNoArguments);
  var genericEnumSum2 = /* @__PURE__ */ genericEnumSum(genericEnumConstructor2)(genericTopConstructor2);
  var genericBottomConstructor2 = /* @__PURE__ */ genericBottomConstructor(genericBottomNoArguments);
  var genericBottomSum2 = /* @__PURE__ */ genericBottomSum(genericBottomConstructor2);
  var genericEnumSum1 = /* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(/* @__PURE__ */ genericEnumSum2(genericEnumConstructor2)(genericBottomConstructor2))(genericBottomSum2))(genericBottomSum2);
  var TopLevelHome = /* @__PURE__ */ function() {
    function TopLevelHome2() {
    }
    ;
    TopLevelHome2.value = new TopLevelHome2();
    return TopLevelHome2;
  }();
  var TopLevelSolutions = /* @__PURE__ */ function() {
    function TopLevelSolutions2() {
    }
    ;
    TopLevelSolutions2.value = new TopLevelSolutions2();
    return TopLevelSolutions2;
  }();
  var TopLevelRegistry = /* @__PURE__ */ function() {
    function TopLevelRegistry2() {
    }
    ;
    TopLevelRegistry2.value = new TopLevelRegistry2();
    return TopLevelRegistry2;
  }();
  var TopLevelPreferences = /* @__PURE__ */ function() {
    function TopLevelPreferences2() {
    }
    ;
    TopLevelPreferences2.value = new TopLevelPreferences2();
    return TopLevelPreferences2;
  }();
  var Home = /* @__PURE__ */ function() {
    function Home3() {
    }
    ;
    Home3.value = new Home3();
    return Home3;
  }();
  var Solutions = /* @__PURE__ */ function() {
    function Solutions2() {
    }
    ;
    Solutions2.value = new Solutions2();
    return Solutions2;
  }();
  var Registry = /* @__PURE__ */ function() {
    function Registry2() {
    }
    ;
    Registry2.value = new Registry2();
    return Registry2;
  }();
  var Preferences = /* @__PURE__ */ function() {
    function Preferences2(value0) {
      this.value0 = value0;
    }
    ;
    Preferences2.create = function(value0) {
      return new Preferences2(value0);
    };
    return Preferences2;
  }();
  var genericTopLevelRoute_ = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return TopLevelHome.value;
      }
      ;
      if (x3 instanceof Inr && x3.value0 instanceof Inl) {
        return TopLevelSolutions.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inl)) {
        return TopLevelRegistry.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inr)) {
        return TopLevelPreferences.value;
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 36, column 1 - line 36, column 40): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof TopLevelHome) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof TopLevelSolutions) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x3 instanceof TopLevelRegistry) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x3 instanceof TopLevelPreferences) {
        return new Inr(new Inr(new Inr(NoArguments.value)));
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 36, column 1 - line 36, column 40): " + [x3.constructor.name]);
    }
  };
  var genericRoute_2 = {
    to: function(x3) {
      if (x3 instanceof Inl) {
        return Home.value;
      }
      ;
      if (x3 instanceof Inr && x3.value0 instanceof Inl) {
        return Solutions.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inl)) {
        return Registry.value;
      }
      ;
      if (x3 instanceof Inr && (x3.value0 instanceof Inr && x3.value0.value0 instanceof Inr)) {
        return new Preferences(x3.value0.value0.value0);
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 26, column 1 - line 26, column 32): " + [x3.constructor.name]);
    },
    from: function(x3) {
      if (x3 instanceof Home) {
        return new Inl(NoArguments.value);
      }
      ;
      if (x3 instanceof Solutions) {
        return new Inr(new Inl(NoArguments.value));
      }
      ;
      if (x3 instanceof Registry) {
        return new Inr(new Inr(new Inl(NoArguments.value)));
      }
      ;
      if (x3 instanceof Preferences) {
        return new Inr(new Inr(new Inr(x3.value0)));
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 26, column 1 - line 26, column 32): " + [x3.constructor.name]);
    }
  };
  var eqTopLevelRoute = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof TopLevelHome && y2 instanceof TopLevelHome) {
          return true;
        }
        ;
        if (x3 instanceof TopLevelSolutions && y2 instanceof TopLevelSolutions) {
          return true;
        }
        ;
        if (x3 instanceof TopLevelRegistry && y2 instanceof TopLevelRegistry) {
          return true;
        }
        ;
        if (x3 instanceof TopLevelPreferences && y2 instanceof TopLevelPreferences) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordTopLevelRoute = {
    compare: function(x3) {
      return function(y2) {
        if (x3 instanceof TopLevelHome && y2 instanceof TopLevelHome) {
          return EQ.value;
        }
        ;
        if (x3 instanceof TopLevelHome) {
          return LT.value;
        }
        ;
        if (y2 instanceof TopLevelHome) {
          return GT.value;
        }
        ;
        if (x3 instanceof TopLevelSolutions && y2 instanceof TopLevelSolutions) {
          return EQ.value;
        }
        ;
        if (x3 instanceof TopLevelSolutions) {
          return LT.value;
        }
        ;
        if (y2 instanceof TopLevelSolutions) {
          return GT.value;
        }
        ;
        if (x3 instanceof TopLevelRegistry && y2 instanceof TopLevelRegistry) {
          return EQ.value;
        }
        ;
        if (x3 instanceof TopLevelRegistry) {
          return LT.value;
        }
        ;
        if (y2 instanceof TopLevelRegistry) {
          return GT.value;
        }
        ;
        if (x3 instanceof TopLevelPreferences && y2 instanceof TopLevelPreferences) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 0, column 0 - line 0, column 0): " + [x3.constructor.name, y2.constructor.name]);
      };
    },
    Eq0: function() {
      return eqTopLevelRoute;
    }
  };
  var enumTopLevelRoute = {
    succ: /* @__PURE__ */ genericSucc(genericTopLevelRoute_)(genericEnumSum1),
    pred: /* @__PURE__ */ genericPred(genericTopLevelRoute_)(genericEnumSum1),
    Ord0: function() {
      return ordTopLevelRoute;
    }
  };
  var boundedTopLevelRoute = {
    bottom: /* @__PURE__ */ genericBottom(genericTopLevelRoute_)(genericBottomSum2),
    top: /* @__PURE__ */ genericTop(genericTopLevelRoute_)(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(/* @__PURE__ */ genericTopSum(genericTopConstructor2)))),
    Ord0: function() {
      return ordTopLevelRoute;
    }
  };
  var toTopLevelRoute = function(v2) {
    if (v2 instanceof Home) {
      return TopLevelHome.value;
    }
    ;
    if (v2 instanceof Solutions) {
      return TopLevelSolutions.value;
    }
    ;
    if (v2 instanceof Registry) {
      return TopLevelRegistry.value;
    }
    ;
    if (v2 instanceof Preferences) {
      return TopLevelPreferences.value;
    }
    ;
    throw new Error("Failed pattern match at UI.Navigation.Router.Types (line 19, column 19 - line 23, column 38): " + [v2.constructor.name]);
  };

  // output/Data.Exists/index.js
  var runExists = unsafeCoerce2;
  var mkExists = unsafeCoerce2;

  // output/Control.Monad.Free.Trans/index.js
  var bimap4 = /* @__PURE__ */ bimap(bifunctorEither);
  var Bound = /* @__PURE__ */ function() {
    function Bound2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bound2.create = function(value0) {
      return function(value1) {
        return new Bound2(value0, value1);
      };
    };
    return Bound2;
  }();
  var FreeT = /* @__PURE__ */ function() {
    function FreeT2(value0) {
      this.value0 = value0;
    }
    ;
    FreeT2.create = function(value0) {
      return new FreeT2(value0);
    };
    return FreeT2;
  }();
  var Bind = /* @__PURE__ */ function() {
    function Bind2(value0) {
      this.value0 = value0;
    }
    ;
    Bind2.create = function(value0) {
      return new Bind2(value0);
    };
    return Bind2;
  }();
  var bound = function(m2) {
    return function(f2) {
      return new Bind(mkExists(new Bound(m2, f2)));
    };
  };
  var functorFreeT = function(dictFunctor) {
    var map113 = map(dictFunctor);
    return function(dictFunctor1) {
      var map210 = map(dictFunctor1);
      return {
        map: function(f2) {
          return function(v2) {
            if (v2 instanceof FreeT) {
              return new FreeT(function(v1) {
                return map210(bimap4(f2)(map113(map(functorFreeT(dictFunctor)(dictFunctor1))(f2))))(v2.value0(unit));
              });
            }
            ;
            if (v2 instanceof Bind) {
              return runExists(function(v1) {
                return bound(v1.value0)(function() {
                  var $250 = map(functorFreeT(dictFunctor)(dictFunctor1))(f2);
                  return function($251) {
                    return $250(v1.value1($251));
                  };
                }());
              })(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 64, column 1 - line 66, column 71): " + [f2.constructor.name, v2.constructor.name]);
          };
        }
      };
    };
  };
  var monadFreeT = function(dictFunctor) {
    return function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeFreeT(dictFunctor)(dictMonad);
        },
        Bind1: function() {
          return bindFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var bindFreeT = function(dictFunctor) {
    return function(dictMonad) {
      return {
        bind: function(v2) {
          return function(f2) {
            if (v2 instanceof Bind) {
              return runExists(function(v1) {
                return bound(v1.value0)(function(x3) {
                  return bound(function(v22) {
                    return v1.value1(x3);
                  })(f2);
                });
              })(v2.value0);
            }
            ;
            return bound(function(v1) {
              return v2;
            })(f2);
          };
        },
        Apply0: function() {
          return applyFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var applyFreeT = function(dictFunctor) {
    var functorFreeT1 = functorFreeT(dictFunctor);
    return function(dictMonad) {
      var functorFreeT2 = functorFreeT1(dictMonad.Bind1().Apply0().Functor0());
      return {
        apply: ap(monadFreeT(dictFunctor)(dictMonad)),
        Functor0: function() {
          return functorFreeT2;
        }
      };
    };
  };
  var applicativeFreeT = function(dictFunctor) {
    return function(dictMonad) {
      var pure64 = pure(dictMonad.Applicative0());
      return {
        pure: function(a4) {
          return new FreeT(function(v2) {
            return pure64(new Left(a4));
          });
        },
        Apply0: function() {
          return applyFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var liftFreeT = function(dictFunctor) {
    var map113 = map(dictFunctor);
    var applicativeFreeT1 = applicativeFreeT(dictFunctor);
    return function(dictMonad) {
      var pure64 = pure(dictMonad.Applicative0());
      var pure122 = pure(applicativeFreeT1(dictMonad));
      return function(fa) {
        return new FreeT(function(v2) {
          return pure64(new Right(map113(pure122)(fa)));
        });
      };
    };
  };
  var resume = function(dictFunctor) {
    var map113 = map(dictFunctor);
    var bindFreeT1 = bindFreeT(dictFunctor);
    return function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var Bind1 = Monad0.Bind1();
      var map210 = map(Bind1.Apply0().Functor0());
      var bind61 = bind(Bind1);
      var pure64 = pure(Monad0.Applicative0());
      var bind124 = bind(bindFreeT1(Monad0));
      var go2 = function(v2) {
        if (v2 instanceof FreeT) {
          return map210(Done.create)(v2.value0(unit));
        }
        ;
        if (v2 instanceof Bind) {
          return runExists(function(v1) {
            var v22 = v1.value0(unit);
            if (v22 instanceof FreeT) {
              return bind61(v22.value0(unit))(function(v3) {
                if (v3 instanceof Left) {
                  return pure64(new Loop(v1.value1(v3.value0)));
                }
                ;
                if (v3 instanceof Right) {
                  return pure64(new Done(new Right(map113(function(h7) {
                    return bind124(h7)(v1.value1);
                  })(v3.value0))));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 57, column 22 - line 59, column 69): " + [v3.constructor.name]);
              });
            }
            ;
            if (v22 instanceof Bind) {
              return runExists(function(v3) {
                return pure64(new Loop(bind124(v3.value0(unit))(function(z2) {
                  return bind124(v3.value1(z2))(v1.value1);
                })));
              })(v22.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 55, column 7 - line 62, column 60): " + [v22.constructor.name]);
          })(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 51, column 3 - line 51, column 75): " + [v2.constructor.name]);
      };
      return tailRecM(dictMonadRec)(go2);
    };
  };
  var runFreeT = function(dictFunctor) {
    var resume1 = resume(dictFunctor);
    return function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var pure64 = pure(Monad0.Applicative0());
      var Bind1 = Monad0.Bind1();
      var map113 = map(Bind1.Apply0().Functor0());
      var tailRecM3 = tailRecM(dictMonadRec);
      var composeKleisliFlipped3 = composeKleisliFlipped(Bind1);
      var resume2 = resume1(dictMonadRec);
      return function(interp2) {
        var go2 = function(v2) {
          if (v2 instanceof Left) {
            return pure64(new Done(v2.value0));
          }
          ;
          if (v2 instanceof Right) {
            return map113(Loop.create)(interp2(v2.value0));
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 144, column 3 - line 144, column 63): " + [v2.constructor.name]);
        };
        return tailRecM3(composeKleisliFlipped3(go2)(resume2));
      };
    };
  };
  var semigroupFreeT = function(dictFunctor) {
    var applyFreeT1 = applyFreeT(dictFunctor);
    return function(dictMonad) {
      var lift24 = lift2(applyFreeT1(dictMonad));
      return function(dictSemigroup) {
        return {
          append: lift24(append(dictSemigroup))
        };
      };
    };
  };
  var monoidFreeT = function(dictFunctor) {
    var applicativeFreeT1 = applicativeFreeT(dictFunctor);
    var semigroupFreeT1 = semigroupFreeT(dictFunctor);
    return function(dictMonad) {
      var pure64 = pure(applicativeFreeT1(dictMonad));
      var semigroupFreeT2 = semigroupFreeT1(dictMonad);
      return function(dictMonoid) {
        var semigroupFreeT3 = semigroupFreeT2(dictMonoid.Semigroup0());
        return {
          mempty: pure64(mempty(dictMonoid)),
          Semigroup0: function() {
            return semigroupFreeT3;
          }
        };
      };
    };
  };

  // output/Web.Router.Types/index.js
  var Transitioning = /* @__PURE__ */ function() {
    function Transitioning2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Transitioning2.create = function(value0) {
      return function(value1) {
        return new Transitioning2(value0, value1);
      };
    };
    return Transitioning2;
  }();
  var Resolved = /* @__PURE__ */ function() {
    function Resolved2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Resolved2.create = function(value0) {
      return function(value1) {
        return new Resolved2(value0, value1);
      };
    };
    return Resolved2;
  }();
  var Override = /* @__PURE__ */ function() {
    function Override2(value0) {
      this.value0 = value0;
    }
    ;
    Override2.create = function(value0) {
      return new Override2(value0);
    };
    return Override2;
  }();
  var Redirect = /* @__PURE__ */ function() {
    function Redirect2(value0) {
      this.value0 = value0;
    }
    ;
    Redirect2.create = function(value0) {
      return new Redirect2(value0);
    };
    return Redirect2;
  }();
  var Continue = /* @__PURE__ */ function() {
    function Continue2() {
    }
    ;
    Continue2.value = new Continue2();
    return Continue2;
  }();
  var functorCommand = {
    map: function(f2) {
      return function(m2) {
        if (m2 instanceof Override) {
          return new Override(m2.value0);
        }
        ;
        if (m2 instanceof Redirect) {
          return new Redirect(m2.value0);
        }
        ;
        if (m2 instanceof Continue) {
          return Continue.value;
        }
        ;
        throw new Error("Failed pattern match at Web.Router.Types (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };

  // output/Web.Router/index.js
  var liftFreeT2 = /* @__PURE__ */ liftFreeT(functorCommand)(monadAff);
  var pure18 = /* @__PURE__ */ pure(applicativeFiber);
  var discard5 = /* @__PURE__ */ discard(discardUnit);
  var liftEffect6 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var runFreeT2 = /* @__PURE__ */ runFreeT(functorCommand)(monadRecAff);
  var discard22 = /* @__PURE__ */ discard5(bindAff);
  var mempty6 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidAff(/* @__PURE__ */ monoidFreeT(functorCommand)(monadAff)(monoidUnit)));
  var makeRouter = function(handleTransition) {
    return function(handleState) {
      return function(v2) {
        return function __do10() {
          var fiberRef = $$new(pure18(unit))();
          var previousRouteRef = $$new(Nothing.value)();
          var runRouter = function(route) {
            return function __do11() {
              var oldFiber = read(fiberRef)();
              launchAff_(killFiber(error("Transition cancelled"))(oldFiber))();
              var previousRoute = read(previousRouteRef)();
              handleState(new Transitioning(previousRoute, route))();
              var finalise = function(r2) {
                return liftEffect6(function __do12() {
                  write(new Just(r2))(previousRouteRef)();
                  return handleState(new Resolved(previousRoute, r2))();
                });
              };
              var fiber = launchAff(function() {
                var v1 = handleTransition(previousRoute)(route);
                return runFreeT2(function(cmd) {
                  return discard22(function() {
                    if (cmd instanceof Redirect) {
                      return liftEffect6(v2.redirect(cmd.value0));
                    }
                    ;
                    if (cmd instanceof Override) {
                      return finalise(cmd.value0);
                    }
                    ;
                    if (cmd instanceof Continue) {
                      return finalise(route);
                    }
                    ;
                    throw new Error("Failed pattern match at Web.Router (line 50, column 19 - line 53, column 47): " + [cmd.constructor.name]);
                  }())(function() {
                    return mempty6;
                  });
                })(v1);
              }())();
              return write(fiber)(fiberRef)();
            };
          };
          return {
            initialize: v2.initialize(runRouter),
            navigate: v2.navigate,
            redirect: v2.redirect
          };
        };
      };
    };
  };
  var $$continue = /* @__PURE__ */ function() {
    return liftFreeT2(Continue.value);
  }();

  // output/Web.Router.Driver.Hash/index.js
  var makeDriver = function(dictFoldable) {
    var matchesWith2 = matchesWith(dictFoldable);
    return function(parser2) {
      return function(printer) {
        return {
          initialize: function() {
            var $3 = matchesWith2(parser2);
            return function($4) {
              return $3($$const($4));
            };
          }(),
          navigate: function($5) {
            return setHash2(printer($5));
          },
          redirect: function($6) {
            return setHash2(printer($6));
          }
        };
      };
    };
  };

  // output/UI.Navigation.Router/index.js
  var gsep2 = /* @__PURE__ */ gsep(/* @__PURE__ */ gsepStringRoute(gRouteNoArguments));
  var monoidEffect2 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty7 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(monoidEffect2));
  var makeDriver2 = /* @__PURE__ */ makeDriver(foldableEither);
  var pure19 = /* @__PURE__ */ pure(applicativeEffect);
  var bind18 = /* @__PURE__ */ bind2(ixBindRender);
  var discard6 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect13 = /* @__PURE__ */ useEffect(eqUnit);
  var mempty1 = /* @__PURE__ */ mempty(monoidEffect2);
  var pure110 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var appRoute = /* @__PURE__ */ root(/* @__PURE__ */ sum2(genericRoute_2)(/* @__PURE__ */ gRouteSum(/* @__PURE__ */ gRouteConstructor({
    reflectSymbol: function() {
      return "Home";
    }
  })()(gRouteNoArguments))(/* @__PURE__ */ gRouteSum(/* @__PURE__ */ gRouteConstructor({
    reflectSymbol: function() {
      return "Solutions";
    }
  })()(gRouteNoArguments))(/* @__PURE__ */ gRouteSum(/* @__PURE__ */ gRouteConstructor({
    reflectSymbol: function() {
      return "Registry";
    }
  })()(gRouteNoArguments))(/* @__PURE__ */ gRouteConstructor({
    reflectSymbol: function() {
      return "Preferences";
    }
  })()(gRouteArgument)))))({
    Home: noArgs,
    Solutions: /* @__PURE__ */ gsep2("projects")(noArgs),
    Registry: /* @__PURE__ */ gsep2("registry")(noArgs),
    Preferences: /* @__PURE__ */ gsep(/* @__PURE__ */ gsepStringRoute(gRouteAll))("preferences")(subRoute)
  }));
  var parseRoute = /* @__PURE__ */ parse8(appRoute);
  var routerContext = /* @__PURE__ */ unsafePerformEffect(function __do2() {
    var route = mapFlipped(functorEffect)(getHash)(function() {
      var $59 = fromRight(Registry.value);
      return function($60) {
        return $59(parseRoute($60));
      };
    }())();
    return createContext({
      route,
      navigate: mempty7,
      redirect: mempty7
    })();
  });
  var useRouter = /* @__PURE__ */ coerceHook()(/* @__PURE__ */ useContext(routerContext));
  var printRoute = function(route) {
    return "#" + print6(appRoute)(route);
  };
  var mkRouter = function __do3() {
    var subscriberRef = $$new(mempty7)();
    var driver = makeDriver2(parseRoute)(printRoute);
    var router = makeRouter(function(v2) {
      return function(v1) {
        return $$continue;
      };
    })(function(v2) {
      if (v2 instanceof Transitioning) {
        return pure19(unit);
      }
      ;
      if (v2 instanceof Resolved) {
        return function __do10() {
          var v1 = read(subscriberRef)();
          return v1(v2.value1)();
        };
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.Router (line 59, column 9 - line 61, column 68): " + [v2.constructor.name]);
    })(driver)();
    return component("Router")(function(child) {
      return bind18(useState$prime(Home.value))(function(v2) {
        return discard6(useEffect13(unit)(function __do10() {
          write(v2.value1)(subscriberRef)();
          var cleanup = router.initialize();
          return function __do11() {
            cleanup();
            return mempty1();
          };
        }))(function() {
          return pure110(provider(routerContext)({
            route: v2.value0,
            navigate: router.navigate,
            redirect: router.redirect
          })([child]));
        });
      });
    })();
  };

  // output/Network.RemoteData/index.js
  var NotAsked = /* @__PURE__ */ function() {
    function NotAsked2() {
    }
    ;
    NotAsked2.value = new NotAsked2();
    return NotAsked2;
  }();
  var Loading2 = /* @__PURE__ */ function() {
    function Loading3() {
    }
    ;
    Loading3.value = new Loading3();
    return Loading3;
  }();
  var Failure = /* @__PURE__ */ function() {
    function Failure2(value0) {
      this.value0 = value0;
    }
    ;
    Failure2.create = function(value0) {
      return new Failure2(value0);
    };
    return Failure2;
  }();
  var Success2 = /* @__PURE__ */ function() {
    function Success3(value0) {
      this.value0 = value0;
    }
    ;
    Success3.create = function(value0) {
      return new Success3(value0);
    };
    return Success3;
  }();
  var toMaybe2 = function(v2) {
    if (v2 instanceof Success2) {
      return new Just(v2.value0);
    }
    ;
    return Nothing.value;
  };
  var functorRemoteData = {
    map: function(f2) {
      return function(m2) {
        if (m2 instanceof NotAsked) {
          return NotAsked.value;
        }
        ;
        if (m2 instanceof Loading2) {
          return Loading2.value;
        }
        ;
        if (m2 instanceof Failure) {
          return new Failure(m2.value0);
        }
        ;
        if (m2 instanceof Success2) {
          return new Success2(f2(m2.value0));
        }
        ;
        throw new Error("Failed pattern match at Network.RemoteData (line 0, column 0 - line 0, column 0): " + [m2.constructor.name]);
      };
    }
  };
  var fromEither = function(v2) {
    if (v2 instanceof Left) {
      return new Failure(v2.value0);
    }
    ;
    if (v2 instanceof Right) {
      return new Success2(v2.value0);
    }
    ;
    throw new Error("Failed pattern match at Network.RemoteData (line 134, column 1 - line 134, column 55): " + [v2.constructor.name]);
  };
  var foldableRemoteData = {
    foldMap: function(dictMonoid) {
      var mempty33 = mempty(dictMonoid);
      return function(v2) {
        return function(v1) {
          if (v1 instanceof Success2) {
            return v2(v1.value0);
          }
          ;
          if (v1 instanceof Failure) {
            return mempty33;
          }
          ;
          if (v1 instanceof NotAsked) {
            return mempty33;
          }
          ;
          if (v1 instanceof Loading2) {
            return mempty33;
          }
          ;
          throw new Error("Failed pattern match at Network.RemoteData (line 91, column 1 - line 97, column 27): " + [v2.constructor.name, v1.constructor.name]);
        };
      };
    },
    foldr: function(f2) {
      return foldrDefault(foldableRemoteData)(f2);
    },
    foldl: function(f2) {
      return foldlDefault(foldableRemoteData)(f2);
    }
  };
  var eqRemoteData = function(dictEq) {
    var eq21 = eq(dictEq);
    return function(dictEq1) {
      var eq111 = eq(dictEq1);
      return {
        eq: function(x3) {
          return function(y2) {
            if (x3 instanceof NotAsked && y2 instanceof NotAsked) {
              return true;
            }
            ;
            if (x3 instanceof Loading2 && y2 instanceof Loading2) {
              return true;
            }
            ;
            if (x3 instanceof Failure && y2 instanceof Failure) {
              return eq21(x3.value0)(y2.value0);
            }
            ;
            if (x3 instanceof Success2 && y2 instanceof Success2) {
              return eq111(x3.value0)(y2.value0);
            }
            ;
            return false;
          };
        }
      };
    };
  };
  var bifunctorRemoteData = {
    bimap: function(v2) {
      return function(v1) {
        return function(v22) {
          if (v22 instanceof NotAsked) {
            return NotAsked.value;
          }
          ;
          if (v22 instanceof Loading2) {
            return Loading2.value;
          }
          ;
          if (v22 instanceof Failure) {
            return new Failure(v2(v22.value0));
          }
          ;
          if (v22 instanceof Success2) {
            return new Success2(v1(v22.value0));
          }
          ;
          throw new Error("Failed pattern match at Network.RemoteData (line 54, column 1 - line 58, column 48): " + [v2.constructor.name, v1.constructor.name, v22.constructor.name]);
        };
      };
    }
  };
  var applyRemoteData = {
    apply: function(v2) {
      return function(v1) {
        if (v2 instanceof Success2 && v1 instanceof Success2) {
          return new Success2(v2.value0(v1.value0));
        }
        ;
        if (v2 instanceof Failure) {
          return new Failure(v2.value0);
        }
        ;
        if (v1 instanceof Failure) {
          return new Failure(v1.value0);
        }
        ;
        if (v2 instanceof NotAsked) {
          return NotAsked.value;
        }
        ;
        if (v1 instanceof NotAsked) {
          return NotAsked.value;
        }
        ;
        if (v2 instanceof Loading2) {
          return Loading2.value;
        }
        ;
        if (v1 instanceof Loading2) {
          return Loading2.value;
        }
        ;
        throw new Error("Failed pattern match at Network.RemoteData (line 62, column 1 - line 69, column 28): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorRemoteData;
    }
  };
  var bindRemoteData = {
    bind: function(v2) {
      return function(v1) {
        if (v2 instanceof NotAsked) {
          return NotAsked.value;
        }
        ;
        if (v2 instanceof Loading2) {
          return Loading2.value;
        }
        ;
        if (v2 instanceof Failure) {
          return new Failure(v2.value0);
        }
        ;
        if (v2 instanceof Success2) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Network.RemoteData (line 71, column 1 - line 75, column 35): " + [v2.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyRemoteData;
    }
  };

  // output/React.Basic.DOM.Events/index.js
  var targetValue = /* @__PURE__ */ unsafeEventFn(function(e) {
    return toMaybe(e.target.value);
  });
  var target5 = /* @__PURE__ */ unsafeEventFn(function(e) {
    return e.target;
  });
  var stopPropagation = /* @__PURE__ */ unsafeEventFn(function(e) {
    return unsafePerformEffect(function __do10() {
      e.stopPropagation();
      return e;
    });
  });
  var preventDefault = /* @__PURE__ */ unsafeEventFn(function(e) {
    return unsafePerformEffect(function __do10() {
      e.preventDefault();
      return e;
    });
  });
  var clientY = /* @__PURE__ */ unsafeEventFn(function(e) {
    return toMaybe(e.clientY);
  });
  var clientX = /* @__PURE__ */ unsafeEventFn(function(e) {
    return toMaybe(e.clientX);
  });

  // output/Effect.Console/foreign.js
  var log2 = function(s3) {
    return function() {
      console.log(s3);
    };
  };
  var warn = function(s3) {
    return function() {
      console.warn(s3);
    };
  };
  var error2 = function(s3) {
    return function() {
      console.error(s3);
    };
  };

  // output/Effect.Class.Console/index.js
  var warn2 = function(dictMonadEffect) {
    var $41 = liftEffect(dictMonadEffect);
    return function($42) {
      return $41(warn($42));
    };
  };
  var log3 = function(dictMonadEffect) {
    var $51 = liftEffect(dictMonadEffect);
    return function($52) {
      return $51(log2($52));
    };
  };
  var error3 = function(dictMonadEffect) {
    var $59 = liftEffect(dictMonadEffect);
    return function($60) {
      return $59(error2($60));
    };
  };

  // output/UI.Hook.UseIPCMessage/index.js
  var coerceHook3 = /* @__PURE__ */ coerceHook();
  var bind19 = /* @__PURE__ */ bind2(ixBindRender);
  var discard1 = /* @__PURE__ */ discard2(ixBindRender);
  var for_4 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var read4 = /* @__PURE__ */ read3(/* @__PURE__ */ readForeignRecord()(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "response";
    }
  })(readForeignMessageToRende)(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "response_for_message_id";
    }
  })(readForeignString)(readForeignFieldsNilRowRo)()())()()));
  var error4 = /* @__PURE__ */ error3(monadEffectEffect);
  var mempty8 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidUnit));
  var pure20 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useIPCMessage = function(v2) {
    return coerceHook3(bind19(useState$prime(NotAsked.value))(function(v1) {
      return bind19(useState$prime(unsafePerformEffect($$new(Nothing.value))))(function(v22) {
        var reset3 = function __do10() {
          write(Nothing.value)(v22.value0)();
          return v1.value1(NotAsked.value)();
        };
        return discard1(useEffectOnce(function __do10() {
          var listener = mkListener(function(foreignMessage) {
            return function __do11() {
              var currentMessageID\u0294 = read(v22.value0)();
              return for_4(currentMessageID\u0294)(function(id5) {
                var messageOrError = read4(foreignMessage);
                var expectedID = toString(id5);
                if (messageOrError instanceof Left) {
                  return error4("Failed decoding IPC message: " + unsafeStringify(foreignMessage));
                }
                ;
                if (messageOrError instanceof Right && messageOrError.value0.response_for_message_id === expectedID) {
                  return v1.value1(new Success2(messageOrError.value0.response));
                }
                ;
                return mempty8;
              })();
            };
          })();
          return v2.registerListener(listener)();
        }))(function() {
          var send = function(msg) {
            return function __do10() {
              v1.value1(Loading2.value)();
              var uuid = genUUID();
              write(new Just(uuid))(v22.value0)();
              return v2.postMessage(uuid)(msg)();
            };
          };
          return pure20(new Tuple(v1.value0, new Tuple(send, reset3)));
        });
      });
    }));
  };

  // output/Fahrtwind.Style.Divide/index.js
  var css21 = /* @__PURE__ */ css2();
  var nestChildren = function(inner) {
    return css21({
      "& > * + *": nested(inner)
    });
  };
  var divideY = function(pixels) {
    return nestChildren(function() {
      var $5 = pixels >= 0;
      if ($5) {
        return css21({
          borderTopWidth: px(pixels),
          borderTopStyle: solid
        });
      }
      ;
      return css21({
        borderBottomWidth: px(pixels),
        borderBottomStyle: solid
      });
    }());
  };
  var divideCol$prime = function(borderColor) {
    return nestChildren(css21({
      borderColor
    }));
  };

  // output/Fahrtwind.Style.Transition/index.js
  var transition$prime = /* @__PURE__ */ function() {
    var $10 = css2();
    return function($11) {
      return $10(function(v2) {
        return {
          transition: v2
        };
      }($11));
    };
  }();
  var transition2 = function($12) {
    return transition$prime(str($12));
  };

  // output/Plumage.Atom.PopOver.Types/index.js
  var Centre = /* @__PURE__ */ function() {
    function Centre2() {
    }
    ;
    Centre2.value = new Centre2();
    return Centre2;
  }();
  var Start = /* @__PURE__ */ function() {
    function Start2() {
    }
    ;
    Start2.value = new Start2();
    return Start2;
  }();
  var End = /* @__PURE__ */ function() {
    function End3() {
    }
    ;
    End3.value = new End3();
    return End3;
  }();
  var Above = /* @__PURE__ */ function() {
    function Above2() {
    }
    ;
    Above2.value = new Above2();
    return Above2;
  }();
  var LeftOf = /* @__PURE__ */ function() {
    function LeftOf2() {
    }
    ;
    LeftOf2.value = new LeftOf2();
    return LeftOf2;
  }();
  var RightOf = /* @__PURE__ */ function() {
    function RightOf2() {
    }
    ;
    RightOf2.value = new RightOf2();
    return RightOf2;
  }();
  var Below = /* @__PURE__ */ function() {
    function Below2() {
    }
    ;
    Below2.value = new Below2();
    return Below2;
  }();
  var Placement = /* @__PURE__ */ function() {
    function Placement2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Placement2.create = function(value0) {
      return function(value1) {
        return new Placement2(value0, value1);
      };
    };
    return Placement2;
  }();
  var DismissPopOverOnClickAway = /* @__PURE__ */ function() {
    function DismissPopOverOnClickAway2(value0) {
      this.value0 = value0;
    }
    ;
    DismissPopOverOnClickAway2.create = function(value0) {
      return new DismissPopOverOnClickAway2(value0);
    };
    return DismissPopOverOnClickAway2;
  }();
  var DismissPopOverOnClickOutsideTargetAnd = /* @__PURE__ */ function() {
    function DismissPopOverOnClickOutsideTargetAnd2(value0) {
      this.value0 = value0;
    }
    ;
    DismissPopOverOnClickOutsideTargetAnd2.create = function(value0) {
      return new DismissPopOverOnClickOutsideTargetAnd2(value0);
    };
    return DismissPopOverOnClickOutsideTargetAnd2;
  }();
  var DismissPopOverOnClickOutsideElements = /* @__PURE__ */ function() {
    function DismissPopOverOnClickOutsideElements2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    DismissPopOverOnClickOutsideElements2.create = function(value0) {
      return function(value1) {
        return new DismissPopOverOnClickOutsideElements2(value0, value1);
      };
    };
    return DismissPopOverOnClickOutsideElements2;
  }();
  var DismissOnClickAway = /* @__PURE__ */ function() {
    function DismissOnClickAway2(value0) {
      this.value0 = value0;
    }
    ;
    DismissOnClickAway2.create = function(value0) {
      return new DismissOnClickAway2(value0);
    };
    return DismissOnClickAway2;
  }();
  var DismissOnClickOutsideElements = /* @__PURE__ */ function() {
    function DismissOnClickOutsideElements2(value0) {
      this.value0 = value0;
    }
    ;
    DismissOnClickOutsideElements2.create = function(value0) {
      return new DismissOnClickOutsideElements2(value0);
    };
    return DismissOnClickOutsideElements2;
  }();
  var eqSecondaryPlacement = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof Centre && y2 instanceof Centre) {
          return true;
        }
        ;
        if (x3 instanceof Start && y2 instanceof Start) {
          return true;
        }
        ;
        if (x3 instanceof End && y2 instanceof End) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var eq4 = /* @__PURE__ */ eq(eqSecondaryPlacement);
  var eqPrimaryPlacement = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof Above && y2 instanceof Above) {
          return true;
        }
        ;
        if (x3 instanceof LeftOf && y2 instanceof LeftOf) {
          return true;
        }
        ;
        if (x3 instanceof RightOf && y2 instanceof RightOf) {
          return true;
        }
        ;
        if (x3 instanceof Below && y2 instanceof Below) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var eq13 = /* @__PURE__ */ eq(eqPrimaryPlacement);
  var eqPlacement = {
    eq: function(x3) {
      return function(y2) {
        return eq13(x3.value0)(y2.value0) && eq4(x3.value1)(y2.value1);
      };
    }
  };
  var toDismissBehaviour = function(targetRef) {
    return function(v2) {
      if (v2 instanceof DismissPopOverOnClickAway) {
        return new DismissOnClickAway(v2.value0);
      }
      ;
      if (v2 instanceof DismissPopOverOnClickOutsideTargetAnd) {
        return new DismissOnClickOutsideElements(cons$prime(targetRef)(v2.value0));
      }
      ;
      if (v2 instanceof DismissPopOverOnClickOutsideElements) {
        return new DismissOnClickOutsideElements(cons$prime(v2.value0)(v2.value1));
      }
      ;
      throw new Error("Failed pattern match at Plumage.Atom.PopOver.Types (line 15, column 32 - line 20, column 55): " + [v2.constructor.name]);
    };
  };

  // output/Fahrtwind.Style.Color.Tailwind/index.js
  var yellow = {
    "_50": /* @__PURE__ */ fromInt(16710888),
    "_100": /* @__PURE__ */ fromInt(16710083),
    "_200": /* @__PURE__ */ fromInt(16707722),
    "_300": /* @__PURE__ */ fromInt(16638023),
    "_400": /* @__PURE__ */ fromInt(16436245),
    "_500": /* @__PURE__ */ fromInt(15381256),
    "_600": /* @__PURE__ */ fromInt(13273604),
    "_700": /* @__PURE__ */ fromInt(10576391),
    "_800": /* @__PURE__ */ fromInt(8736014),
    "_900": /* @__PURE__ */ fromInt(7421714)
  };
  var white2 = white;
  var violet = {
    "_50": /* @__PURE__ */ fromInt(16118783),
    "_100": /* @__PURE__ */ fromInt(15591934),
    "_200": /* @__PURE__ */ fromInt(14538494),
    "_300": /* @__PURE__ */ fromInt(12891645),
    "_400": /* @__PURE__ */ fromInt(10980346),
    "_500": /* @__PURE__ */ fromInt(9133302),
    "_600": /* @__PURE__ */ fromInt(8141549),
    "_700": /* @__PURE__ */ fromInt(7153881),
    "_800": /* @__PURE__ */ fromInt(5972406),
    "_900": /* @__PURE__ */ fromInt(4988309)
  };
  var green = {
    "_50": /* @__PURE__ */ fromInt(15793652),
    "_100": /* @__PURE__ */ fromInt(14482663),
    "_200": /* @__PURE__ */ fromInt(12318672),
    "_300": /* @__PURE__ */ fromInt(8843180),
    "_400": /* @__PURE__ */ fromInt(4906624),
    "_500": /* @__PURE__ */ fromInt(2278750),
    "_600": /* @__PURE__ */ fromInt(1483594),
    "_700": /* @__PURE__ */ fromInt(1409085),
    "_800": /* @__PURE__ */ fromInt(1467700),
    "_900": /* @__PURE__ */ fromInt(1332013)
  };
  var gray = {
    "_50": /* @__PURE__ */ fromInt(16448250),
    "_100": /* @__PURE__ */ fromInt(16053493),
    "_200": /* @__PURE__ */ fromInt(15000807),
    "_300": /* @__PURE__ */ fromInt(13948120),
    "_400": /* @__PURE__ */ fromInt(10592682),
    "_500": /* @__PURE__ */ fromInt(7434618),
    "_600": /* @__PURE__ */ fromInt(5395035),
    "_700": /* @__PURE__ */ fromInt(4144966),
    "_800": /* @__PURE__ */ fromInt(2565930),
    "_900": /* @__PURE__ */ fromInt(1579035)
  };

  // output/Fahrtwind.Style.Transform/index.js
  var css22 = /* @__PURE__ */ css2();
  var transform$prime = function(t) {
    return css22({
      transform: t
    });
  };
  var transform = function($6) {
    return transform$prime(str($6));
  };
  var mkTranslate = function(x3) {
    return function(y2) {
      return "translate(" + (x3 + (", " + (y2 + ")")));
    };
  };
  var translate = function(x3) {
    return function(y2) {
      return transform(mkTranslate(x3)(y2));
    };
  };

  // output/Plumage.Hooks.UseRenderInPortal/index.js
  var coerceHook4 = /* @__PURE__ */ coerceHook();
  var bind20 = /* @__PURE__ */ bind2(ixBindRender);
  var foldMap7 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var discard7 = /* @__PURE__ */ discard2(ixBindRender);
  var when3 = /* @__PURE__ */ when(applicativeEffect);
  var bind110 = /* @__PURE__ */ bind(bindEffect);
  var mempty9 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var pure21 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useRenderInPortal2 = function(portalId) {
    return coerceHook4(bind20(useState$prime(Nothing.value))(function(v2) {
      var renderInPortal = function(jsx4) {
        return foldMap7(createPortal(jsx4))(v2.value0);
      };
      return discard7(useEffectOnce(function __do10() {
        when3(isNothing(v2.value0))(bind110(findElementByIdInDocument(portalId))(v2.value1))();
        return mempty9();
      }))(function() {
        return pure21(renderInPortal);
      });
    }));
  };

  // output/Plumage.Atom.Modal.View/index.js
  var append10 = /* @__PURE__ */ append(semigroupStyle);
  var bind21 = /* @__PURE__ */ bind2(ixBindRender);
  var pure23 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var guard4 = /* @__PURE__ */ guard(monoidJSX);
  var div$prime5 = /* @__PURE__ */ div$prime();
  var mempty10 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidUnit));
  var modalStyle = /* @__PURE__ */ append10(positionFixed)(/* @__PURE__ */ append10(/* @__PURE__ */ left$prime(/* @__PURE__ */ percent(50)))(/* @__PURE__ */ append10(/* @__PURE__ */ top4(0))(/* @__PURE__ */ append10(/* @__PURE__ */ translate("-50%")("0"))(acceptClicks))));
  var clickAwayStyle = /* @__PURE__ */ append10(widthScreen)(/* @__PURE__ */ append10(heightScreen)(/* @__PURE__ */ append10(positionFixed)(/* @__PURE__ */ append10(/* @__PURE__ */ left(0))(/* @__PURE__ */ append10(/* @__PURE__ */ top4(0))(acceptClicks)))));
  var mkClickAway = /* @__PURE__ */ component("Clickaway")(function(v2) {
    return bind21(useRenderInPortal2(v2.clickAwayId))(function(renderInPortal) {
      return pure23(guard4(v2.isVisible)(renderInPortal(styledLeaf(div$prime5)({
        className: "click-away",
        css: append10(clickAwayStyle)(v2.css),
        onMouseUp: handler_(v2.hide),
        onTouchEnd: handler_(v2.hide)
      }))));
    });
  });
  var mkModal = function __do4() {
    var clickAway = mkClickAway();
    return component("Modal")(function(props) {
      return bind21(useRenderInPortal2(props.modalContainerId))(function(renderInPortal) {
        return pure23(fragment([clickAway({
          css: background(withAlpha(0.5)(gray["_900"])),
          hide: function() {
            if (props.allowClickAway) {
              return props.hide;
            }
            ;
            return mempty10;
          }(),
          isVisible: props.isVisible,
          clickAwayId: props.clickAwayId
        }), renderInPortal(div4("modal")(modalStyle)([props.content]))]));
      });
    })();
  };

  // output/Plumage.Hooks.UseResize2/index.js
  var mapFlipped6 = /* @__PURE__ */ mapFlipped(functorEffect);
  var discard8 = /* @__PURE__ */ discard(discardUnit);
  var coerceHook5 = /* @__PURE__ */ coerceHook();
  var bind111 = /* @__PURE__ */ bind2(ixBindRender);
  var zero3 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "innerHeight";
    }
  })()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "innerWidth";
    }
  })()(semiringRecordNil)(semiringNumber))(semiringNumber)));
  var bind23 = /* @__PURE__ */ bind(bindAff);
  var liftEffect7 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var discard32 = /* @__PURE__ */ discard8(bindAff);
  var for_5 = /* @__PURE__ */ for_(applicativeAff)(foldableMaybe);
  var abs4 = /* @__PURE__ */ abs(ordNumber)(ringNumber);
  var pure24 = /* @__PURE__ */ pure(applicativeAff);
  var setSizeFromWindow = function(setSize3) {
    return function __do10() {
      var window3 = windowImpl();
      var innerWidth2 = mapFlipped6(innerWidth(window3))(toNumber)();
      var innerHeight2 = mapFlipped6(innerHeight(window3))(toNumber)();
      return setSize3({
        innerWidth: innerWidth2,
        innerHeight: innerHeight2
      })();
    };
  };
  var makeListener = function(setSize3) {
    return eventListener($$const(setSizeFromWindow(setSize3)));
  };
  var eventType = "resize";
  var useOnResize = function(dictDuration) {
    var fromDuration3 = fromDuration(dictDuration);
    return function(debounceBy) {
      return function(callback2) {
        return coerceHook5(bind111(useRef(Nothing.value))(function(fiberRef) {
          return bind111(useRef(zero3))(function(sizeRef) {
            var layoutEffect = function __do10() {
              setSizeFromWindow(writeRef(sizeRef))();
              var v2 = makeListener(function(v3) {
                var aff = bind23(liftEffect7(readRef(fiberRef)))(function(fiber\u0294) {
                  return discard32(for_5(fiber\u0294)(killFiber(error("Fiber cancelled"))))(function() {
                    return discard32(delay(fromDuration3(debounceBy)))(function() {
                      return bind23(liftEffect7(readRef(sizeRef)))(function(size5) {
                        var deltaWidth = abs4(size5.innerWidth - v3.innerWidth);
                        var deltaHeight = abs4(size5.innerHeight - v3.innerWidth);
                        return discard32(liftEffect7(writeRef(sizeRef)(v3)))(function() {
                          return discard32(liftEffect7(callback2({
                            innerWidth: v3.innerWidth,
                            innerHeight: v3.innerHeight,
                            deltaWidth,
                            deltaHeight
                          })))(function() {
                            return pure24(unit);
                          });
                        });
                      });
                    });
                  });
                });
                return function __do11() {
                  var v12 = launchAff(aff)();
                  return writeRef(fiberRef)(new Just(v12))();
                };
              })();
              var v1 = mapFlipped6(windowImpl)(toEventTarget2)();
              addEventListener(eventType)(v2)(false)(v1)();
              return launchAff_(bind23(liftEffect7(readRef(fiberRef)))(function(fiber\u0294) {
                return for_5(fiber\u0294)(killFiber(error("Fiber cancelled")));
              }));
            };
            return useEffectOnce(layoutEffect);
          });
        }));
      };
    };
  };

  // output/Web.UIEvent.MouseEvent/foreign.js
  function clientX2(e) {
    return e.clientX;
  }
  function clientY2(e) {
    return e.clientY;
  }

  // output/Web.UIEvent.MouseEvent/index.js
  var fromEvent = /* @__PURE__ */ unsafeReadProtoTagged("MouseEvent");

  // output/Plumage.Atom.PopOver.View/index.js
  var eq14 = /* @__PURE__ */ eq(eqPrimaryPlacement);
  var bind24 = /* @__PURE__ */ bind(bindEffect);
  var bind112 = /* @__PURE__ */ bind2(ixBindRender);
  var bottomIsSymbol = {
    reflectSymbol: function() {
      return "bottom";
    }
  };
  var heightIsSymbol = {
    reflectSymbol: function() {
      return "height";
    }
  };
  var leftIsSymbol = {
    reflectSymbol: function() {
      return "left";
    }
  };
  var rightIsSymbol = {
    reflectSymbol: function() {
      return "right";
    }
  };
  var topIsSymbol = {
    reflectSymbol: function() {
      return "top";
    }
  };
  var widthIsSymbol = {
    reflectSymbol: function() {
      return "width";
    }
  };
  var xIsSymbol = {
    reflectSymbol: function() {
      return "x";
    }
  };
  var yIsSymbol = {
    reflectSymbol: function() {
      return "y";
    }
  };
  var zero4 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons(bottomIsSymbol)()(/* @__PURE__ */ semiringRecordCons(heightIsSymbol)()(/* @__PURE__ */ semiringRecordCons(leftIsSymbol)()(/* @__PURE__ */ semiringRecordCons(rightIsSymbol)()(/* @__PURE__ */ semiringRecordCons(topIsSymbol)()(/* @__PURE__ */ semiringRecordCons(widthIsSymbol)()(/* @__PURE__ */ semiringRecordCons(xIsSymbol)()(/* @__PURE__ */ semiringRecordCons(yIsSymbol)()(semiringRecordNil)(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber))(semiringNumber)));
  var when4 = /* @__PURE__ */ when(applicativeEffect);
  var mapFlipped7 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var for_6 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var unless2 = /* @__PURE__ */ unless(applicativeEffect);
  var eq15 = /* @__PURE__ */ eq(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()(yIsSymbol)(eqNumber))()(xIsSymbol)(eqNumber))()(widthIsSymbol)(eqNumber))()(topIsSymbol)(eqNumber))()(rightIsSymbol)(eqNumber))()(leftIsSymbol)(eqNumber))()(heightIsSymbol)(eqNumber))()(bottomIsSymbol)(eqNumber)));
  var discard9 = /* @__PURE__ */ discard2(ixBindRender);
  var monoidEffect3 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty11 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect3));
  var pure25 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mempty12 = /* @__PURE__ */ mempty(monoidJSX);
  var styled4 = /* @__PURE__ */ styled();
  var div$prime6 = /* @__PURE__ */ div$prime();
  var $$for3 = /* @__PURE__ */ $$for(applicativeEffect)(traversableNonEmptyArray);
  var mapFlipped1 = /* @__PURE__ */ mapFlipped(functorEffect);
  var foldMap8 = /* @__PURE__ */ foldMap(foldableMaybe);
  var foldMap12 = /* @__PURE__ */ foldMap8(monoidCSS);
  var initial3 = /* @__PURE__ */ initial();
  var apply9 = /* @__PURE__ */ apply(applyEffect);
  var map33 = /* @__PURE__ */ map(functorEffect);
  var exit3 = /* @__PURE__ */ exit();
  var for_1 = /* @__PURE__ */ for_(applicativeST)(foldableMaybe);
  var mapFlipped22 = /* @__PURE__ */ mapFlipped(functorST);
  var notEq4 = /* @__PURE__ */ notEq(eqPlacement);
  var animate5 = /* @__PURE__ */ animate3();
  var mempty22 = /* @__PURE__ */ mempty(monoidEffect3);
  var $$void6 = /* @__PURE__ */ $$void(functorEffect);
  var useOnResize2 = /* @__PURE__ */ useOnResize(durationMilliseconds);
  var guard5 = /* @__PURE__ */ guard(monoidJSX);
  var foldMap23 = /* @__PURE__ */ foldMap8(monoidJSX);
  var el3 = /* @__PURE__ */ el();
  var animatePresence3 = /* @__PURE__ */ animatePresence();
  var div12 = /* @__PURE__ */ div6();
  var toTransformOrigin = function(v2) {
    var secondaryOrigin = function() {
      if (v2.value1 instanceof Centre) {
        return "center";
      }
      ;
      if (v2.value1 instanceof Start && (eq14(v2.value0)(Above.value) || eq14(v2.value0)(Below.value))) {
        return "left";
      }
      ;
      if (v2.value1 instanceof Start) {
        return "top";
      }
      ;
      if (v2.value1 instanceof End && (eq14(v2.value0)(Above.value) || eq14(v2.value0)(Below.value))) {
        return "right";
      }
      ;
      if (v2.value1 instanceof End) {
        return "bottom";
      }
      ;
      throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 252, column 21 - line 257, column 19): " + [v2.value1.constructor.name]);
    }();
    var primaryOrigin = function() {
      if (v2.value0 instanceof Above) {
        return "bottom";
      }
      ;
      if (v2.value0 instanceof LeftOf) {
        return "right";
      }
      ;
      if (v2.value0 instanceof RightOf) {
        return "left";
      }
      ;
      if (v2.value0 instanceof Below) {
        return "top";
      }
      ;
      throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 247, column 19 - line 251, column 18): " + [v2.value0.constructor.name]);
    }();
    return primaryOrigin + (" " + secondaryOrigin);
  };
  var toAbsoluteCSS = function(bb) {
    return function(v2) {
      if (v2.value0 instanceof Above && v2.value1 instanceof Centre) {
        return css8({
          top: bb.top,
          left: bb.left + bb.width / 2,
          transform: "translate(-50%, -100%)"
        });
      }
      ;
      if (v2.value0 instanceof Above && v2.value1 instanceof Start) {
        return css8({
          top: bb.top,
          left: bb.left,
          transform: "translate(0, -100%)"
        });
      }
      ;
      if (v2.value0 instanceof Above && v2.value1 instanceof End) {
        return css8({
          top: bb.top,
          left: bb.right,
          transform: "translate(-100%, -100%)"
        });
      }
      ;
      if (v2.value0 instanceof RightOf && v2.value1 instanceof Centre) {
        return css8({
          top: bb.top + bb.height / 2,
          left: bb.right,
          transform: "translate(0, -50%)"
        });
      }
      ;
      if (v2.value0 instanceof RightOf && v2.value1 instanceof Start) {
        return css8({
          top: bb.top,
          left: bb.right
        });
      }
      ;
      if (v2.value0 instanceof RightOf && v2.value1 instanceof End) {
        return css8({
          top: bb.bottom,
          left: bb.right,
          transform: "translate(0, -100%)"
        });
      }
      ;
      if (v2.value0 instanceof LeftOf && v2.value1 instanceof Centre) {
        return css8({
          top: bb.top + bb.height / 2,
          left: bb.left,
          transform: "translate(-100%, -50%)"
        });
      }
      ;
      if (v2.value0 instanceof LeftOf && v2.value1 instanceof Start) {
        return css8({
          top: bb.top,
          left: bb.left,
          transform: "translate(-100%, 0)"
        });
      }
      ;
      if (v2.value0 instanceof LeftOf && v2.value1 instanceof End) {
        return css8({
          top: bb.bottom,
          left: bb.left,
          transform: "translate(-100%, -100%)"
        });
      }
      ;
      if (v2.value0 instanceof Below && v2.value1 instanceof Centre) {
        return css8({
          top: bb.bottom,
          left: bb.left + bb.width / 2,
          transform: "translate(-50%, 0)"
        });
      }
      ;
      if (v2.value0 instanceof Below && v2.value1 instanceof Start) {
        return css8({
          top: bb.bottom,
          left: bb.left
        });
      }
      ;
      if (v2.value0 instanceof Below && v2.value1 instanceof End) {
        return css8({
          top: bb.bottom,
          left: bb.right,
          transform: "translate(-100%, 0)"
        });
      }
      ;
      throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 305, column 3 - line 363, column 8): " + [v2.value0.constructor.name, v2.value1.constructor.name]);
    };
  };
  var popOverStyle = /* @__PURE__ */ append(semigroupStyle)(positionAbsolute)(acceptClicks);
  var mkPopOver = function __do5() {
    var clickAway = mkClickAway();
    return component("popOver")(function(props) {
      return bind112(useState$prime(zero4))(function(v2) {
        var recalc = when4(props.isVisible)(function __do10() {
          var bb\u0294 = getBoundingBoxFromRef(props.placementRef)();
          var fromTop = bind24(windowImpl)(scrollY)();
          var fromLeft = bind24(windowImpl)(scrollX)();
          var adjustedBb\u0294 = mapFlipped7(bb\u0294)(function(bb) {
            return {
              top: bb.top + fromTop,
              left: bb.left + fromLeft,
              right: bb.right + fromLeft,
              bottom: bb.bottom + fromTop,
              height: bb.height,
              width: bb.width,
              x: bb.x,
              y: bb.y
            };
          });
          return for_6(adjustedBb\u0294)(function(newBb) {
            return unless2(eq15(v2.value0)(newBb))(v2.value1(newBb));
          })();
        });
        return discard9(useEffectAlways(function __do10() {
          recalc();
          return mempty11();
        }))(function() {
          return bind112(useRenderInPortal2(props.containerId))(function(renderInPortal) {
            return pure25(fragment([function() {
              if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickAway) {
                return clickAway({
                  css: props.dismissBehaviour\u0294.value0.value0.css,
                  hide: props.hide,
                  isVisible: props.isVisible,
                  clickAwayId: props.dismissBehaviour\u0294.value0.value0.id
                });
              }
              ;
              return mempty12;
            }(), renderInPortal(styled4(div$prime6)({
              className: "popOver",
              css: popOverStyle,
              style: toAbsoluteCSS(v2.value0)(props.placement)
            })([props.content]))]));
          });
        });
      });
    })();
  };
  var mkPopOverView = function __do6() {
    var popOver = mkPopOver();
    return component("PopOverView")(function(props) {
      return bind112(useState$prime(Nothing.value))(function(v2) {
        return bind112(useState$prime(false))(function(v1) {
          return bind112(useState$prime(Nothing.value))(function(v22) {
            return bind112(useRef(nullImpl))(function(contentRef) {
              return bind112(useRef(nullImpl))(function(motionRef) {
                return discard9(useEffectAlways(function __do10() {
                  when4(isNothing(props.child\u0294))(v22.value1(Nothing.value))();
                  return mempty11();
                }))(function() {
                  return discard9(useEffectAlways(function() {
                    if (props.dismissBehaviour\u0294 instanceof Nothing) {
                      return mempty11;
                    }
                    ;
                    if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickAway) {
                      return mempty11;
                    }
                    ;
                    if (props.dismissBehaviour\u0294 instanceof Just && props.dismissBehaviour\u0294.value0 instanceof DismissOnClickOutsideElements) {
                      return function __do10() {
                        var maybeBbs\u0294 = $$for3(props.dismissBehaviour\u0294.value0.value0)(getBoundingBoxFromRef)();
                        var bbs\u0294 = fromArray(catMaybes2(maybeBbs\u0294));
                        if (bbs\u0294 instanceof Nothing) {
                          return mempty11();
                        }
                        ;
                        if (bbs\u0294 instanceof Just) {
                          var eventTarget = mapFlipped1(bind24(windowImpl)(document2))(toEventTarget)();
                          var listener = eventListener(function(e) {
                            return for_6(fromEvent(e))(function(mouseEvent) {
                              var x3 = toNumber(clientX2(mouseEvent));
                              var y2 = toNumber(clientY2(mouseEvent));
                              var clickedOutside = all3(function(v3) {
                                return x3 < v3.left || (x3 > v3.right || (y2 < v3.top || y2 > v3.bottom));
                              })(bbs\u0294.value0);
                              return when4(clickedOutside)(props.hide);
                            });
                          })();
                          addEventListener("mousedown")(listener)(true)(eventTarget)();
                          return removeEventListener("mousedown")(listener)(true)(eventTarget);
                        }
                        ;
                        throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 68, column 11 - line 85, column 28): " + [bbs\u0294.constructor.name]);
                      };
                    }
                    ;
                    throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 60, column 7 - line 85, column 28): " + [props.dismissBehaviour\u0294.constructor.name]);
                  }()))(function() {
                    var style3 = foldMap12(function(placement) {
                      return css8({
                        transformOrigin: toTransformOrigin(placement)
                      });
                    })(v2.value0);
                    var onAnimationStart2 = onAnimationStart(function __do10() {
                      props.onAnimationStateChange(true)();
                      return v1.value1(false)();
                    });
                    var measureStyle = css8({
                      visibility: "hidden",
                      outline: "pink",
                      border: "solid 10px red"
                    });
                    var initial1 = initial3(css8({
                      scale: 0.67,
                      opacity: 0
                    }));
                    var getBBWidthAndHeight = apply9(apply9(map33(function(v3) {
                      return function(v42) {
                        return function(v5) {
                          return {
                            bb\u0294: v3,
                            w: v42,
                            h: v5
                          };
                        };
                      };
                    })(getBoundingBoxFromRef(contentRef)))(mapFlipped1(bind24(windowImpl)(innerWidth))(toNumber)))(mapFlipped1(bind24(windowImpl)(innerHeight))(toNumber));
                    var exit1 = exit3(css8({
                      scale: 0.67,
                      opacity: 0,
                      transition: {
                        type: "spring",
                        bounce: 0.2,
                        duration: 0.15
                      }
                    }));
                    var calculatePlacement = function(v3) {
                      return function(oldPlacement) {
                        return mapFlipped7(v3.bb\u0294)(function(bb) {
                          var $193 = bb.height > v3.h || bb.width > v3.w;
                          if ($193) {
                            return oldPlacement;
                          }
                          ;
                          var $194 = bb.right > v3.w;
                          if ($194) {
                            return new Placement(LeftOf.value, oldPlacement.value1);
                          }
                          ;
                          var $195 = bb.left < 0;
                          if ($195) {
                            return new Placement(RightOf.value, oldPlacement.value1);
                          }
                          ;
                          var $196 = bb.top < 0;
                          if ($196) {
                            return new Placement(Below.value, oldPlacement.value1);
                          }
                          ;
                          var $197 = bb.bottom > v3.h;
                          if ($197) {
                            return new Placement(Above.value, oldPlacement.value1);
                          }
                          ;
                          return oldPlacement;
                        });
                      };
                    };
                    var getBestPlacement = function(bbWidthAndHeight) {
                      return function(oldPlacement) {
                        return function __do10() {
                          var pRef = {
                            value: oldPlacement
                          };
                          var getNewPlacement = function __do11() {
                            var newPlacement = calculatePlacement(bbWidthAndHeight)(pRef.value);
                            return for_1(newPlacement)(function(v3) {
                              return write2(v3)(pRef);
                            })();
                          };
                          getNewPlacement();
                          (function() {
                            while (mapFlipped22(read2(pRef))(function(v3) {
                              return notEq4(v3)(pRef.value);
                            })()) {
                              getNewPlacement();
                            }
                            ;
                            return {};
                          })();
                          return pRef.value;
                        }();
                      };
                    };
                    var animate1 = animate5(css8({
                      scale: 1,
                      opacity: 1,
                      y: 0,
                      transition: {
                        type: "spring",
                        bounce: 0.16,
                        duration: 0.3
                      }
                    }));
                    var onAnimationComplete2 = onAnimationComplete(function(fgn) {
                      return function __do10() {
                        props.onAnimationStateChange(false)();
                        var $203 = reallyUnsafeRefEq(fgn)(exit1);
                        if ($203) {
                          return v2.value1(Nothing.value)();
                        }
                        ;
                        var $204 = reallyUnsafeRefEq(fgn)(animate1);
                        if ($204) {
                          return v1.value1(true)();
                        }
                        ;
                        return mempty22();
                      };
                    });
                    var recalculatePlacement = function() {
                      if (props.child\u0294 instanceof Just) {
                        return $$void6(bind24(windowImpl)(requestAnimationFrame2($$void6(bind24(windowImpl)(requestAnimationFrame2($$void6(bind24(windowImpl)(requestAnimationFrame2(function __do10() {
                          var bbWidthAndHeight = getBBWidthAndHeight();
                          for_6(bbWidthAndHeight.bb\u0294)(function(v3) {
                            var newPlacement = getBestPlacement(bbWidthAndHeight)(props.placement);
                            return v2.value1(new Just(newPlacement));
                          })();
                          return v22.value1(new Just(props.child\u0294.value0))();
                        })))))))));
                      }
                      ;
                      if (props.child\u0294 instanceof Nothing) {
                        return v22.value1(Nothing.value);
                      }
                      ;
                      throw new Error("Failed pattern match at Plumage.Atom.PopOver.View (line 171, column 9 - line 186, column 36): " + [props.child\u0294.constructor.name]);
                    }();
                    return discard9(useLayoutEffectAlways(function __do10() {
                      recalculatePlacement();
                      return mempty11();
                    }))(function() {
                      return discard9(useOnResize2(200)(function(v3) {
                        return v22.value1(Nothing.value);
                      }))(function() {
                        return pure25(popOver({
                          isVisible: isJust(props.child\u0294),
                          dismissBehaviour\u0294: props.dismissBehaviour\u0294,
                          containerId: props.containerId,
                          hide: props.hide,
                          placement: fromMaybe(props.placement)(v2.value0),
                          placementRef: props.placementRef,
                          content: fragment([guard5(isNothing(v22.value0))(foldMap23(function(child) {
                            return el3(div$prime6)({
                              ref: contentRef,
                              style: measureStyle
                            })([child]);
                          })(props.child\u0294)), el3(animatePresence3)({})([foldMap23(function(child) {
                            return el3(div12)({
                              key: "popOver",
                              style: style3,
                              initial: initial1,
                              animate: animate1,
                              exit: exit1,
                              onAnimationComplete: onAnimationComplete2,
                              onAnimationStart: onAnimationStart2,
                              ref: motionRef
                            })([child]);
                          })(v22.value0)])])
                        }));
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    })();
  };

  // output/Plumage.Hooks.UsePopOver/index.js
  var coerceHook6 = /* @__PURE__ */ coerceHook();
  var bind25 = /* @__PURE__ */ bind2(ixBindRender);
  var when5 = /* @__PURE__ */ when(applicativeEffect);
  var mapFlipped8 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var mempty13 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var pure26 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var unless3 = /* @__PURE__ */ unless(applicativeEffect);
  var popOverComponent = /* @__PURE__ */ unsafePerformEffect(mkPopOverView);
  var usePopOver = function(options3) {
    return coerceHook6(bind25(useState$prime(false))(function(v2) {
      return bind25(useRef(nullImpl))(function(targetRef) {
        var renderInPopOver = function(content3) {
          return popOverComponent({
            hide: when5(v2.value0)(v2.value1(false)),
            child\u0294: function() {
              if (v2.value0) {
                return new Just(content3);
              }
              ;
              return Nothing.value;
            }(),
            placementRef: targetRef,
            placement: options3.placement,
            dismissBehaviour\u0294: mapFlipped8(options3.dismissBehaviour\u0294)(toDismissBehaviour(targetRef)),
            containerId: options3.containerId,
            onAnimationStateChange: mempty13
          });
        };
        return pure26({
          targetRef,
          renderInPopOver,
          hidePopOver: when5(v2.value0)(v2.value1(false)),
          showPopOver: unless3(v2.value0)(v2.value1(true)),
          isVisible: v2.value0
        });
      });
    }));
  };

  // output/Fahrtwind.Style.UserSelect/index.js
  var css23 = /* @__PURE__ */ css2();
  var userSelectText = /* @__PURE__ */ css23({
    userSelect: /* @__PURE__ */ str("text")
  });
  var userSelectNone = /* @__PURE__ */ css23({
    userSelect: none
  });

  // output/UI.Style/index.js
  var append11 = /* @__PURE__ */ append(semigroupStyle);
  var css24 = /* @__PURE__ */ css2();
  var toolbarTextCol = /* @__PURE__ */ function() {
    return textCol$prime(col2.textPaler4);
  }();
  var toolbarRippleCol = /* @__PURE__ */ function() {
    return colour.backgroundLayer3;
  }();
  var toolbarButtonStyle = /* @__PURE__ */ function() {
    return append11(background(transparent))(append11(transition2("background,color 0.35s ease-out"))(append11(toolbarTextCol)(css24({
      boxShadow: none,
      '&[aria-pressed="true"], &[aria-pressed="true"]:hover': nested(textCol$prime(col2.text)),
      "&:active": nested(css24({
        boxShadow: none,
        transform: str("scale(0.99)")
      })),
      "&:hover": nested(textCol$prime(col2.textPaler1)),
      "& > svg > path": nested(css24({
        strokeWidth: str("1.2px")
      }))
    }))));
  }();
  var toolbarBorderCol = /* @__PURE__ */ function() {
    return borderCol$prime(col2.backgroundBright4);
  }();
  var toolbarBackground = /* @__PURE__ */ function() {
    return background$prime(col2.backgroundBright3);
  }();
  var popOverMenuEntryStyle = /* @__PURE__ */ append11(flexRow)(/* @__PURE__ */ append11(itemsCenter)(/* @__PURE__ */ append11(/* @__PURE__ */ gap(16))(/* @__PURE__ */ append11(/* @__PURE__ */ pX(8))(/* @__PURE__ */ append11(/* @__PURE__ */ pY(6))(/* @__PURE__ */ append11(/* @__PURE__ */ mXY(4))(/* @__PURE__ */ append11(textSm)(/* @__PURE__ */ append11(/* @__PURE__ */ transition2("background 240ms ease-out"))(/* @__PURE__ */ append11(userSelectNone)(roundedDefault)))))))));
  var popOverMenuEntryHoverStyle = /* @__PURE__ */ function() {
    return hover(background$prime(col2.backgroundBright6));
  }();

  // output/Data.Interpolate/index.js
  var show23 = /* @__PURE__ */ show(showInt);
  var show32 = /* @__PURE__ */ show(showNumber);
  var interpString = {
    interp: function(a4) {
      return a4;
    }
  };
  var interp = function(dict) {
    return dict.interp;
  };
  var interpIntFunction = function(dictInterp) {
    var interp1 = interp(dictInterp);
    return {
      interp: function(a4) {
        return function(b4) {
          return interp1(a4 + show23(b4));
        };
      }
    };
  };
  var interpNumberFunction = function(dictInterp) {
    var interp1 = interp(dictInterp);
    return {
      interp: function(a4) {
        return function(b4) {
          return interp1(a4 + show32(b4));
        };
      }
    };
  };
  var interpStringFunction = function(dictInterp) {
    var interp1 = interp(dictInterp);
    return {
      interp: function(a4) {
        return function(b4) {
          return interp1(a4 + b4);
        };
      }
    };
  };
  var i2 = function(dictInterp) {
    return interp(dictInterp)("");
  };

  // output/Yoga.Block.Atom.Button.Style/index.js
  var css25 = /* @__PURE__ */ css2();
  var append15 = /* @__PURE__ */ append(semigroupStyleProperty);
  var nest3 = /* @__PURE__ */ nest()();
  var gradientBackground = /* @__PURE__ */ function() {
    return str(i2(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpString))))))))))))("linear-gradient(0deg,")(colour.highlightDarker)(",")(colour.highlightLighter)(")")(",")("linear-gradient(225deg,")(colour.highlightRotatedBackwards)(",")(colour.highlightRotatedForwards)(")"));
  }();
  var backgroundAnimation = /* @__PURE__ */ keyframes3()({
    from: /* @__PURE__ */ css25({
      backgroundPosition: /* @__PURE__ */ str("0% 50%")
    }),
    to: /* @__PURE__ */ css25({
      backgroundPosition: /* @__PURE__ */ str("100% 50%")
    })
  });
  var button4 = /* @__PURE__ */ function() {
    return css25({
      background: str(colour.backgroundLayer5),
      borderWidth: $$int(0),
      position: relative,
      overflow: hidden,
      boxShadow: str("0 1px 4px rgba(100,100,120,0.3), 0 1px 2px rgba(100,100,100,0.2)"),
      display: inlineFlex,
      padding: str("calc(var(--s-1) * 0.8) var(--s0)"),
      paddingBottom: str("calc(var(--s-1) * 0.8 + 1px)"),
      justifyContent: center,
      alignItems: center,
      borderRadius: $$var("--s-1"),
      color: str(colour.text),
      touchAction: manipulation,
      boxSizing: borderBox,
      fontSize: str(size4.text.interactive),
      fontFamily: $$var("--mainFont"),
      fontWeight: str("500"),
      letterSpacing: str("calc(var(--s-5)* (-0.1))"),
      userSelect: none,
      transition: append15(str("all 0.2s ease-out"))(str("transform 50ms ease-in")),
      "& > .ry-drip": nested(zIndex(0)),
      "& > :not(.ry-drip)": nested(zIndex(1)),
      '&[data-button-shape="flat"]': nested(append(semigroupStyle)(hover(background$prime(col2.highlightAlpha10)))(css25({
        background: str("transparent"),
        boxShadow: none,
        color: str(colour.highlightTextOnBackground),
        "&:active": nest3({
          boxShadow: none
        }),
        '&[data-button-type="primary"]': nest3({
          background: str(colour.highlight),
          boxShadow: none
        })
      }))),
      '&[data-button-shape="pill"]': nest3({
        borderRadius: str("calc(var(--s1) * 0.85)"),
        padding: str("calc(var(--s-1) * 0.85) var(--s0)"),
        paddingBottom: str("calc(var(--s-1))")
      }),
      '&[data-button-type="primary"]': nest3({
        background: gradientBackground,
        backgroundSize: str("200% 200%"),
        fontWeight: str("500"),
        letterSpacing: str("calc(var(--s-5)* (0.1))"),
        animation: append15(backgroundAnimation)(str(" alternate ease-out 10s infinite")),
        boxShadow: str("0 1px 4px 0px rgba(0,0,0,0.40)"),
        borderColor: str("transparent"),
        color: str(colour.highlightText),
        "&:focus-visible": nest3({
          borderColor: col2.background
        }),
        "&:active": nest3({
          boxShadow: str("inset 0 1px 6px rgba(0,0,0,0.40)")
        })
      }),
      '&[data-button-type="dangerous"]': nest3({
        color: str(colour.interfaceDangerousText),
        background: str(colour.interfaceBackgroundDangerous),
        fontWeight: str("500"),
        letterSpacing: str("calc(var(--s-5) * -0.10)")
      }),
      "&:focus": nest3({
        outline: none
      }),
      "&:focus-visible": nest3({
        boxShadow: str("0 0 0 var(--s-4) " + colour.highlight)
      }),
      "&:active": nest3({
        boxShadow: str("inset 0 1px calc(var(--s0) * var(--dark-mode) + var(--s-2) * var(--light-mode)) rgba(0,0,0, calc(0.18 * var(--dark-mode) + 0.09 * var(--light-mode)))"),
        transform: str("scale3d(0.96,0.96,0.36)"),
        transition: str("transform 100ms ease")
      }),
      "&:disabled, &:disabled:active": nest3({
        color: str(colour.interfaceTextDisabled),
        boxShadow: none,
        background: str(colour.interfaceBackgroundDisabled),
        transform: str("none")
      })
    });
  }();

  // output/Yoga.Block.Atom.Button.Types/index.js
  var Primary = /* @__PURE__ */ function() {
    function Primary2() {
    }
    ;
    Primary2.value = new Primary2();
    return Primary2;
  }();
  var Dangerous = /* @__PURE__ */ function() {
    function Dangerous2() {
    }
    ;
    Dangerous2.value = new Dangerous2();
    return Dangerous2;
  }();
  var Generic = /* @__PURE__ */ function() {
    function Generic2() {
    }
    ;
    Generic2.value = new Generic2();
    return Generic2;
  }();
  var Rounded = /* @__PURE__ */ function() {
    function Rounded2() {
    }
    ;
    Rounded2.value = new Rounded2();
    return Rounded2;
  }();
  var Pill = /* @__PURE__ */ function() {
    function Pill2() {
    }
    ;
    Pill2.value = new Pill2();
    return Pill2;
  }();
  var Flat = /* @__PURE__ */ function() {
    function Flat2() {
    }
    ;
    Flat2.value = new Flat2();
    return Flat2;
  }();
  var renderButtonType = function(v2) {
    if (v2 instanceof Primary) {
      return "primary";
    }
    ;
    if (v2 instanceof Generic) {
      return "generic";
    }
    ;
    if (v2 instanceof Dangerous) {
      return "dangerous";
    }
    ;
    throw new Error("Failed pattern match at Yoga.Block.Atom.Button.Types (line 13, column 20 - line 16, column 27): " + [v2.constructor.name]);
  };
  var renderButtonShape = function(v2) {
    if (v2 instanceof Rounded) {
      return "rounded";
    }
    ;
    if (v2 instanceof Pill) {
      return "pill";
    }
    ;
    if (v2 instanceof Flat) {
      return "flat";
    }
    ;
    throw new Error("Failed pattern match at Yoga.Block.Atom.Button.Types (line 26, column 21 - line 29, column 17): " + [v2.constructor.name]);
  };

  // output/Yoga.Block.Hook.UseDrip/index.js
  var coerceHook7 = /* @__PURE__ */ coerceHook();
  var bind26 = /* @__PURE__ */ bind2(ixBindRender);
  var merge4 = /* @__PURE__ */ merge3()(/* @__PURE__ */ mergeCons({
    reflectSymbol: function() {
      return "clientX";
    }
  })()()()()(/* @__PURE__ */ mergeCons({
    reflectSymbol: function() {
      return "clientY";
    }
  })()()()()(mergeNil)));
  var apply10 = /* @__PURE__ */ apply(applyMaybe);
  var map34 = /* @__PURE__ */ map(functorMaybe);
  var for_7 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var pure27 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useDrip = function(ref) {
    return coerceHook7(bind26(useState$prime(false))(function(v2) {
      return bind26(useState$prime(0))(function(v1) {
        return bind26(useState$prime(0))(function(v22) {
          var dripCompletedHandle = function __do10() {
            v2.value1(false)();
            v1.value1(0)();
            return v22.value1(0)();
          };
          var clickHandler = handler(merge4({
            clientX,
            clientY
          }))(function(v3) {
            return function __do10() {
              var bb\u0294 = getBoundingBoxFromRef(ref)();
              var values\u0294 = apply10(apply10(map34(function(v42) {
                return function(v5) {
                  return function(v6) {
                    return {
                      left: v42.left,
                      top: v42.top,
                      cx: v5,
                      cy: v6
                    };
                  };
                };
              })(bb\u0294))(v3.clientX))(v3.clientY);
              return for_7(values\u0294)(function(v42) {
                return function __do11() {
                  v2.value1(true)();
                  v1.value1(v42.cx - v42.left)();
                  return v22.value1(v42.cy - v42.top)();
                };
              })();
            };
          });
          return pure27({
            visible: v2.value0,
            x: v1.value0,
            y: v22.value0,
            onClick: clickHandler,
            onComplete: dripCompletedHandle
          });
        });
      });
    }));
  };

  // output/Web.DOM.Node/foreign.js
  var getEffProp3 = function(name15) {
    return function(node2) {
      return function() {
        return node2[name15];
      };
    };
  };
  var baseURI = getEffProp3("baseURI");
  var _ownerDocument = getEffProp3("ownerDocument");
  var _parentNode = getEffProp3("parentNode");
  var _parentElement = getEffProp3("parentElement");
  var childNodes = getEffProp3("childNodes");
  var _firstChild = getEffProp3("firstChild");
  var _lastChild = getEffProp3("lastChild");
  var _previousSibling = getEffProp3("previousSibling");
  var _nextSibling = getEffProp3("nextSibling");
  var _nodeValue = getEffProp3("nodeValue");
  var textContent = getEffProp3("textContent");

  // output/Web.DOM.Node/index.js
  var toEventTarget3 = unsafeCoerce2;

  // output/Fahrtwind.Style.Opacity/index.js
  var css26 = /* @__PURE__ */ css2();
  var opacity = function(amount) {
    return css26({
      opacity: num(toNumber(amount) / 100)
    });
  };

  // output/Yoga.Block.Quark.Drip.Style/index.js
  var append16 = /* @__PURE__ */ append(semigroupStyle);
  var css27 = /* @__PURE__ */ css2();
  var expandAnimation = /* @__PURE__ */ keyframes3()({
    "0%": /* @__PURE__ */ append16(/* @__PURE__ */ opacity(0))(/* @__PURE__ */ transform("scale(0.25)")),
    "30%": /* @__PURE__ */ opacity(100),
    "80%": /* @__PURE__ */ opacity(50),
    "100%": /* @__PURE__ */ append16(/* @__PURE__ */ transform("scale(28)"))(/* @__PURE__ */ opacity(0))
  });
  var drip = /* @__PURE__ */ append16(positionAbsolute)(/* @__PURE__ */ append16(/* @__PURE__ */ left(0))(/* @__PURE__ */ append16(/* @__PURE__ */ right(0))(/* @__PURE__ */ append16(/* @__PURE__ */ top4(0))(/* @__PURE__ */ append16(/* @__PURE__ */ bottom4(0))(/* @__PURE__ */ css27({
    "& svg": /* @__PURE__ */ nested(/* @__PURE__ */ append16(positionAbsolute)(/* @__PURE__ */ css27({
      animation: /* @__PURE__ */ str("350ms linear x"),
      animationName: expandAnimation,
      animationFillMode: /* @__PURE__ */ str("forwards"),
      width: /* @__PURE__ */ $$var("--s-1"),
      height: /* @__PURE__ */ $$var("--s-1")
    })))
  }))))));

  // output/Yoga.Block.Quark.Drip.View/index.js
  var bind27 = /* @__PURE__ */ bind2(ixBindRender);
  var discard10 = /* @__PURE__ */ discard2(ixBindRender);
  var pure28 = /* @__PURE__ */ pure(applicativeEffect);
  var pure111 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var guard6 = /* @__PURE__ */ guard(monoidJSX);
  var styled5 = /* @__PURE__ */ styled();
  var div$prime7 = /* @__PURE__ */ div$prime();
  var el4 = /* @__PURE__ */ el();
  var svg$prime2 = /* @__PURE__ */ svg$prime();
  var g$prime2 = /* @__PURE__ */ g$prime();
  var rect2 = /* @__PURE__ */ rect();
  var component3 = /* @__PURE__ */ mkForwardRefComponent("Drip")(function(v2) {
    return function(propsRef) {
      return bind27(useRef(nullImpl))(function(backupRef) {
        var ref = fromMaybe(backupRef)(forwardedRefAsMaybe(propsRef));
        var left4 = function() {
          var $25 = v2.x === nan;
          if ($25) {
            return 0;
          }
          ;
          return v2.x - 10;
        }();
        var top6 = function() {
          var $26 = v2.y === nan;
          if ($26) {
            return 0;
          }
          ;
          return v2.y - 10;
        }();
        return discard10(useEffectAlways(function __do10() {
          var n\u0294 = readRefMaybe(ref)();
          if (n\u0294 instanceof Just) {
            var target6 = toEventTarget3(n\u0294.value0);
            var listener = eventListener($$const(v2.onComplete))();
            addEventListener("animationend")(listener)(false)(target6)();
            return removeEventListener("animationend")(listener)(false)(target6);
          }
          ;
          if (n\u0294 instanceof Nothing) {
            return pure28(unit);
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Quark.Drip.View (line 42, column 10 - line 50, column 25): " + [n\u0294.constructor.name]);
        }))(function() {
          return pure111(guard6(v2.visible)(styled5(div$prime7)({
            css: drip,
            className: "ry-drip",
            ref
          })([el4(svg$prime2)({
            width: "20",
            height: "20",
            viewBox: "0 0 20 20",
            style: css8({
              top: top6,
              left: left4
            })
          })([el4(g$prime2)({
            stroke: "none",
            strokeWidth: "1",
            fill: "none",
            fillRule: "evenodd"
          })([el4(g$prime2)({
            className: "ry-drip-filler",
            fill: v2.colour
          })([rect2({
            width: "100%",
            height: "100%",
            rx: "10"
          })])])])])));
        });
      });
    };
  });

  // output/Yoga.Block.Atom.Button.View/index.js
  var bind28 = /* @__PURE__ */ bind2(ixBindRender);
  var identity16 = /* @__PURE__ */ identity(categoryFn);
  var leaf2 = /* @__PURE__ */ leaf();
  var $$void7 = /* @__PURE__ */ $$void(functorEffect);
  var fromHomogeneous5 = /* @__PURE__ */ fromHomogeneous();
  var pure29 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var emotionButton2 = /* @__PURE__ */ emotionButton()();
  var appendIfDefined2 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var rawComponent = /* @__PURE__ */ mkForwardRefComponent("Button")(function(v2) {
    return function(propsRef) {
      return bind28(useRef(nullImpl))(function(backupRef) {
        var ref = fromMaybe(backupRef)(forwardedRefAsMaybe(propsRef));
        var buttonType = getOrFlipped(v2.buttonType)(Generic.value);
        var buttonShape = getOrFlipped(v2.buttonShape)(Rounded.value);
        var ripple\u0294 = function() {
          if (buttonShape instanceof Flat) {
            if (buttonType instanceof Primary) {
              var $22 = fromMaybe(colour.highlightLighter);
              return function($23) {
                return Just.create($22($23));
              };
            }
            ;
            var $24 = fromMaybe(colour.highlightAlpha50);
            return function($25) {
              return Just.create($24($25));
            };
          }
          ;
          return identity16;
        }()(opToMaybe(v2.ripple));
        return bind28(useDrip(ref))(function(dripValues) {
          var propsChildren = reactChildrenToArray(unsafeGet("children")(v2));
          var children2 = reactChildrenFromArray(function() {
            if (ripple\u0294 instanceof Nothing) {
              return propsChildren;
            }
            ;
            if (ripple\u0294 instanceof Just) {
              return cons2(leaf2(component3)({
                className: "ry-button-drip",
                visible: dripValues.visible,
                x: dripValues.x,
                y: dripValues.y,
                onComplete: dripValues.onComplete,
                colour: ripple\u0294.value0
              }))(propsChildren);
            }
            ;
            throw new Error("Failed pattern match at Yoga.Block.Atom.Button.View (line 57, column 43 - line 72, column 28): " + [ripple\u0294.constructor.name]);
          }());
          var onClick = function() {
            var v1 = uorToMaybe(unsafeGet("onClick")(v2));
            if (v1 instanceof Just) {
              return handler(syntheticEvent)(function(e) {
                return function __do10() {
                  $$void7(function() {
                    return v1.value0(e);
                  })();
                  return $$void7(function() {
                    return dripValues.onClick(e);
                  })();
                };
              });
            }
            ;
            if (v1 instanceof Nothing) {
              return dripValues.onClick;
            }
            ;
            throw new Error("Failed pattern match at Yoga.Block.Atom.Button.View (line 75, column 19 - line 80, column 40): " + [v1.constructor.name]);
          }();
          var props$prime = unsafeSet("children")(children2)(unsafeSet("onClick")(onClick)(v2));
          var _data = fromHomogeneous5({
            "button-type": renderButtonType(buttonType),
            "button-shape": renderButtonShape(buttonShape)
          });
          return pure29(emotionButton2(ref)(props$prime)({
            className: "ry-button",
            css: appendIfDefined2(button4)(v2.css),
            "_data": _data
          }));
        });
      });
    };
  });
  var component4 = function() {
    return rawComponent;
  };

  // output/Yoga.Block.Atom.Icon.Style/index.js
  var alt11 = /* @__PURE__ */ alt(altOptionalProp);
  var css28 = /* @__PURE__ */ css2();
  var nest4 = /* @__PURE__ */ nest()();
  var span7 = function(props) {
    var width9 = getOrFlipped(alt11(props.width)(props.size))(str("1em"));
    var strokeColour = getOrFlipped(alt11(props.stroke)(props.colour))(str(colour.text));
    var height9 = getOrFlipped(alt11(props.height)(props.size))(str("1em"));
    var fillColour = getOrFlipped(alt11(props.fill)(props.colour))(str("transparent"));
    return css28({
      "--stroke-colour": strokeColour,
      "--fill-colour": fillColour,
      margin: _0,
      padding: _0,
      display: inlineFlex,
      justifyContent: center,
      alignItems: center,
      width: auto,
      height: auto,
      "& > svg": nest4({
        width: width9,
        height: height9,
        margin: _0,
        padding: _0
      })
    });
  };

  // output/Yoga.Block.Atom.Icon.View/index.js
  var pure30 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var styled6 = /* @__PURE__ */ styled();
  var span8 = /* @__PURE__ */ span4();
  var appendIfDefined3 = /* @__PURE__ */ appendIfDefined(semigroupString);
  var rawComponent2 = /* @__PURE__ */ mkForwardRefComponent("Yoga Icon")(function(v2) {
    return function(ref) {
      return pure30(styled6(span8)({
        className: appendIfDefined3("ry-icon")(v2.className),
        css: span7(v2),
        ref
      })([v2.icon]));
    };
  });
  var component5 = function() {
    return rawComponent2;
  };

  // output/Yoga.Block.Atom.Input.Style/index.js
  var css29 = /* @__PURE__ */ css2();
  var nest5 = /* @__PURE__ */ nest()();
  var interpStringFunction2 = /* @__PURE__ */ interpStringFunction(interpString);
  var interpStringFunction1 = /* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(interpStringFunction2));
  var i3 = /* @__PURE__ */ i2(interpStringFunction1);
  var interpNumberFunction2 = /* @__PURE__ */ interpNumberFunction(interpStringFunction2);
  var i1 = /* @__PURE__ */ i2(/* @__PURE__ */ interpStringFunction(interpNumberFunction2));
  var i22 = /* @__PURE__ */ i2(interpNumberFunction2);
  var appendIfDefined4 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var append17 = /* @__PURE__ */ append(semigroupStyle);
  var SizeMedium = /* @__PURE__ */ function() {
    function SizeMedium2() {
    }
    ;
    SizeMedium2.value = new SizeMedium2();
    return SizeMedium2;
  }();
  var SizeSmall = /* @__PURE__ */ function() {
    function SizeSmall2() {
    }
    ;
    SizeSmall2.value = new SizeSmall2();
    return SizeSmall2;
  }();
  var SizeTiny = /* @__PURE__ */ function() {
    function SizeTiny2() {
    }
    ;
    SizeTiny2.value = new SizeTiny2();
    return SizeTiny2;
  }();
  var sizeVariantToFactor = function(v2) {
    if (v2 instanceof SizeMedium) {
      return "1";
    }
    ;
    if (v2 instanceof SizeSmall) {
      return "0.9";
    }
    ;
    if (v2 instanceof SizeTiny) {
      return "0.8";
    }
    ;
    throw new Error("Failed pattern match at Yoga.Block.Atom.Input.Style (line 11, column 23 - line 14, column 20): " + [v2.constructor.name]);
  };
  var ploppedFocusWithin = /* @__PURE__ */ css29({
    "&:focus-within": /* @__PURE__ */ nest5({
      transition: /* @__PURE__ */ str("border-color 0.18s ease-out")
    })
  });
  var leftIconSize = /* @__PURE__ */ $$var("--left-icon-size");
  var labelSmallFocusBackground = /* @__PURE__ */ function() {
    return str(i2(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction(interpStringFunction1)))))))("linear-gradient(225deg,")(colour.highlightLighter)(",")(colour.highlightDarker)("), linear-gradient(225deg,")(colour.highlightRotatedBackwards)(",")(colour.highlightRotatedForwards)(")"));
  }();
  var labelSmall = function(background2) {
    return function(textColour) {
      return css29({
        fontSize: $$var("--s-1"),
        marginTop: str("calc(var(--s-2) * var(--input-size-factor) * -1)"),
        marginLeft: $$var("--s-2"),
        userSelect: none,
        '&[data-required="true"] > span:after': nest5({
          content: str("'\uFF0A'")
        }),
        "& > span": nest5({
          fontWeight: str("500"),
          whiteSpace: str("nowrap"),
          background: str(i3("linear-gradient(")(background2)(" 61%, transparent 61%, transparent)")),
          color: str(textColour),
          borderRadius: $$var("--s-4"),
          paddingLeft: $$var("--s-4"),
          paddingRight: $$var("--s-4"),
          paddingBottom: $$var("--s-5")
        }),
        '&[data-invalid="true"] > span': nest5({
          background: str(colour.invalid),
          color: str(colour.invalidText)
        }),
        '&[data-has-focus="true"] > span': nest5({
          background: labelSmallFocusBackground,
          color: str(colour.highlightText)
        })
      });
    };
  };
  var labelLarge = function(v2) {
    return css29({
      fontSize: str("calc(var(--input-size-factor) * 15px)"),
      padding: _0,
      whiteSpace: nowrap,
      letterSpacing: em(-0.011),
      maxWidth: str(i1("calc(")(v2.width)("px - 2ch)")),
      marginTop: str("calc(7px * var(--input-size-factor))"),
      marginLeft: str(i22(v2.left)("px")),
      marginRight: $$var("--input-side-padding"),
      color: str(colour.textPaler3),
      fontWeight: str("400"),
      overflowX: str("hidden"),
      textOverflow: str("ellipsis"),
      overflowY: visible,
      scrollbarWidth: none,
      "&::-webkit-scrollbar": nested(css29({
        display: none
      })),
      '&[data-required="true"]:after': nest5({
        content: str("'*'"),
        color: str(colour.required),
        fontFamily: str("Helvetica, Arial, Inter, sans-serif"),
        lineHeight: str("calc(var(--s0) * 0.85 * var(--input-size-factor))")
      })
    });
  };
  var labelContainer = /* @__PURE__ */ css29({
    position: absolute,
    overflow: visible,
    left: _0,
    top: _0,
    display: inlineBlock,
    zIndex: /* @__PURE__ */ str("2"),
    pointerEvents: none
  });
  var labelAndInputWrapper = /* @__PURE__ */ css29({
    position: relative,
    "--left-icon-size": /* @__PURE__ */ str("calc(var(--s0) * var(--input-size-factor))"),
    "--right-icon-size": /* @__PURE__ */ str("calc(var(--s0) * var(--input-size-factor)) * 1.2)"),
    "--input-border-radius": /* @__PURE__ */ str("calc(var(--s-1) * var(--input-size-factor) * var(--input-size-factor))"),
    "--input-side-padding": /* @__PURE__ */ $$var("--s-1"),
    width: inherit,
    margin: _0
  });
  var inputWrapper = /* @__PURE__ */ css29({
    margin: _0,
    minWidth: _0,
    padding: _0,
    flex: /* @__PURE__ */ str("1"),
    width: inherit
  });
  var inputContainer = function(props) {
    var theCss = css29({
      "--left-icon-size": $$var("--s0"),
      "--right-icon-size": str("calc(var(--s0) * 1.2)"),
      "--input-size-factor": str(sizeVariantToFactor(getOrFlipped(props.sizeVariant)(SizeMedium.value))),
      "--input-side-padding": str("calc(var(--s-1) * var(--input-size-factor) * 1.2)"),
      "--input-top-padding": str("calc(6px)"),
      "--input-bottom-padding": str("calc(6px)"),
      letterSpacing: em(-0.011),
      position: relative,
      cursor: str("text"),
      boxSizing: borderBox,
      "--base-height": str("calc(38px * var(--input-size-factor))"),
      height: str("var(--base-height)"),
      display: flex,
      '&[data-invalid="false"]': nest5({
        borderColor: str(colour.success),
        marginTop: str("-1px"),
        marginBottom: str("-1px"),
        "--border-width": str("2px")
      }),
      '&[data-invalid="true"]': nest5({
        borderColor: str(colour.invalid),
        "--border-width": str("2px")
      }),
      "&:focus-within": nest5({
        "--border-width": str("2px"),
        borderColor: str(colour.highlight)
      }),
      alignItems: center,
      justifyContent: center,
      border: str("var(--border-width) solid " + colour.inputBorder),
      paddingLeft: str("calc((var(--input-side-padding) - var(--border-width)) )"),
      paddingRight: str("calc((var(--input-side-padding) - var(--border-width)) )"),
      paddingTop: str("calc((var(--input-top-padding) - var(--border-width)) )"),
      paddingBottom: str("calc((var(--input-bottom-padding)) - var(--border-width))"),
      gap: str("calc(var(--input-side-padding) / 2)"),
      borderRadius: $$var("--input-border-radius"),
      overflow: visible
    });
    return appendIfDefined4(theCss)(props.css);
  };
  var input3 = function(props) {
    return css29({
      "--input-size-factor": str(sizeVariantToFactor(getOrFlipped(props.sizeVariant)(SizeMedium.value))),
      "&[type=text],&[type=search],&[type=password],&[type=number],&:not([type])": nest5({
        background: str("transparent"),
        touchAction: manipulation,
        color: str(getOrFlipped(props.textColour)(colour.text)),
        width: _100percent,
        minWidth: _0,
        margin: _0,
        overflowY: visible,
        "--padding-top": str("calc(6px * var(--input-size-factor))"),
        "--padding-bottom": str("calc(6px * var(--input-size-factor))"),
        paddingTop: $$var("--padding-top"),
        paddingBottom: $$var("--padding-bottom"),
        paddingLeft: _0,
        paddingRight: _0,
        fontSize: str("calc(var(--input-size-factor) * 15px)"),
        letterSpacing: $$var("--letter-spacing"),
        "&::placeholder": nest5({
          color: str(getOrFlipped(props.placeholderColour)(colour.placeholderText))
        }),
        "&[aria-labelledby]": nest5({
          paddingTop: str("calc(var(--padding-top) + (var(--s-5)/2))"),
          paddingBottom: str("calc(var(--padding-bottom) - (var(--s-5)/2))")
        }),
        border: none
      }),
      "&[type=search]": nest5({
        "&::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration": nest5({
          WebkitAppearance: none
        })
      }),
      "&:focus": nest5({
        outline: none
      })
    });
  };
  var iconContainer = /* @__PURE__ */ css29({
    display: inlineFlex,
    alignItems: center
  });
  var leftIconContainer = /* @__PURE__ */ function() {
    return append17(iconContainer)(css29({
      borderRadius: str("var(--input-border-radius) 0 0 var(--input-border-radius)"),
      ".ry-icon": nest5({
        "--stroke-colour": str(colour.text)
      })
    }));
  }();
  var containerContainer = function(props) {
    return css29({
      "& > *": nested(css29({
        gridColumn: $$int(1),
        gridRow: $$int(1)
      })),
      "--border-width": str("1px"),
      "--input-size-factor": str(sizeVariantToFactor(getOrFlipped(props.sizeVariant)(SizeMedium.value))),
      "--input-border-radius": function() {
        var v2 = getOrFlipped(props.sizeVariant)(SizeMedium.value);
        if (v2 instanceof SizeMedium) {
          return str("var(--s-1)");
        }
        ;
        if (v2 instanceof SizeSmall) {
          return str("var(--s-2)");
        }
        ;
        if (v2 instanceof SizeTiny) {
          return str("var(--s-3)");
        }
        ;
        throw new Error("Failed pattern match at Yoga.Block.Atom.Input.Style (line 260, column 30 - line 263, column 35): " + [v2.constructor.name]);
      }(),
      borderRadius: $$var("--input-border-radius"),
      boxSizing: contentBox,
      display: grid,
      overflow: visible
    });
  };
  var containerBackground = function(props) {
    return css29({
      background: str(getOrFlipped(props.background)(colour.inputBackground)),
      border: str("var(--border-width) solid " + colour.inputBorder),
      borderRadius: $$var("--input-border-radius")
    });
  };

  // output/Yoga.Block.Atom.Input.Types/index.js
  var Checkbox = /* @__PURE__ */ function() {
    function Checkbox2() {
    }
    ;
    Checkbox2.value = new Checkbox2();
    return Checkbox2;
  }();
  var Color = /* @__PURE__ */ function() {
    function Color2() {
    }
    ;
    Color2.value = new Color2();
    return Color2;
  }();
  var $$Date = /* @__PURE__ */ function() {
    function $$Date2() {
    }
    ;
    $$Date2.value = new $$Date2();
    return $$Date2;
  }();
  var DatetimeLocal = /* @__PURE__ */ function() {
    function DatetimeLocal2() {
    }
    ;
    DatetimeLocal2.value = new DatetimeLocal2();
    return DatetimeLocal2;
  }();
  var Email = /* @__PURE__ */ function() {
    function Email2() {
    }
    ;
    Email2.value = new Email2();
    return Email2;
  }();
  var File = /* @__PURE__ */ function() {
    function File2() {
    }
    ;
    File2.value = new File2();
    return File2;
  }();
  var Hidden = /* @__PURE__ */ function() {
    function Hidden2() {
    }
    ;
    Hidden2.value = new Hidden2();
    return Hidden2;
  }();
  var Image2 = /* @__PURE__ */ function() {
    function Image3() {
    }
    ;
    Image3.value = new Image3();
    return Image3;
  }();
  var Month = /* @__PURE__ */ function() {
    function Month2() {
    }
    ;
    Month2.value = new Month2();
    return Month2;
  }();
  var $$Number = /* @__PURE__ */ function() {
    function $$Number2() {
    }
    ;
    $$Number2.value = new $$Number2();
    return $$Number2;
  }();
  var Password = /* @__PURE__ */ function() {
    function Password2() {
    }
    ;
    Password2.value = new Password2();
    return Password2;
  }();
  var Radio = /* @__PURE__ */ function() {
    function Radio2() {
    }
    ;
    Radio2.value = new Radio2();
    return Radio2;
  }();
  var Range = /* @__PURE__ */ function() {
    function Range2() {
    }
    ;
    Range2.value = new Range2();
    return Range2;
  }();
  var Reset = /* @__PURE__ */ function() {
    function Reset2() {
    }
    ;
    Reset2.value = new Reset2();
    return Reset2;
  }();
  var Search = /* @__PURE__ */ function() {
    function Search2() {
    }
    ;
    Search2.value = new Search2();
    return Search2;
  }();
  var Submit = /* @__PURE__ */ function() {
    function Submit2() {
    }
    ;
    Submit2.value = new Submit2();
    return Submit2;
  }();
  var Tel = /* @__PURE__ */ function() {
    function Tel2() {
    }
    ;
    Tel2.value = new Tel2();
    return Tel2;
  }();
  var Text = /* @__PURE__ */ function() {
    function Text2() {
    }
    ;
    Text2.value = new Text2();
    return Text2;
  }();
  var Time = /* @__PURE__ */ function() {
    function Time3() {
    }
    ;
    Time3.value = new Time3();
    return Time3;
  }();
  var Url = /* @__PURE__ */ function() {
    function Url2() {
    }
    ;
    Url2.value = new Url2();
    return Url2;
  }();
  var Week = /* @__PURE__ */ function() {
    function Week2() {
    }
    ;
    Week2.value = new Week2();
    return Week2;
  }();
  var toString4 = function(v2) {
    if (v2 instanceof Checkbox) {
      return "checkbox";
    }
    ;
    if (v2 instanceof Color) {
      return "color";
    }
    ;
    if (v2 instanceof $$Date) {
      return "date";
    }
    ;
    if (v2 instanceof DatetimeLocal) {
      return "datetime-local";
    }
    ;
    if (v2 instanceof Email) {
      return "email";
    }
    ;
    if (v2 instanceof File) {
      return "file";
    }
    ;
    if (v2 instanceof Hidden) {
      return "hidden";
    }
    ;
    if (v2 instanceof Image2) {
      return "image";
    }
    ;
    if (v2 instanceof Month) {
      return "month";
    }
    ;
    if (v2 instanceof $$Number) {
      return "number";
    }
    ;
    if (v2 instanceof Password) {
      return "password";
    }
    ;
    if (v2 instanceof Radio) {
      return "radio";
    }
    ;
    if (v2 instanceof Range) {
      return "range";
    }
    ;
    if (v2 instanceof Reset) {
      return "reset";
    }
    ;
    if (v2 instanceof Search) {
      return "search";
    }
    ;
    if (v2 instanceof Submit) {
      return "submit";
    }
    ;
    if (v2 instanceof Tel) {
      return "tel";
    }
    ;
    if (v2 instanceof Text) {
      return "text";
    }
    ;
    if (v2 instanceof Time) {
      return "time";
    }
    ;
    if (v2 instanceof Url) {
      return "url";
    }
    ;
    if (v2 instanceof Week) {
      return "week";
    }
    ;
    throw new Error("Failed pattern match at Yoga.Block.Atom.Input.Types (line 33, column 12 - line 54, column 17): " + [v2.constructor.name]);
  };
  var eqHTMLInput = {
    eq: function(x3) {
      return function(y2) {
        if (x3 instanceof Checkbox && y2 instanceof Checkbox) {
          return true;
        }
        ;
        if (x3 instanceof Color && y2 instanceof Color) {
          return true;
        }
        ;
        if (x3 instanceof $$Date && y2 instanceof $$Date) {
          return true;
        }
        ;
        if (x3 instanceof DatetimeLocal && y2 instanceof DatetimeLocal) {
          return true;
        }
        ;
        if (x3 instanceof Email && y2 instanceof Email) {
          return true;
        }
        ;
        if (x3 instanceof File && y2 instanceof File) {
          return true;
        }
        ;
        if (x3 instanceof Hidden && y2 instanceof Hidden) {
          return true;
        }
        ;
        if (x3 instanceof Image2 && y2 instanceof Image2) {
          return true;
        }
        ;
        if (x3 instanceof Month && y2 instanceof Month) {
          return true;
        }
        ;
        if (x3 instanceof $$Number && y2 instanceof $$Number) {
          return true;
        }
        ;
        if (x3 instanceof Password && y2 instanceof Password) {
          return true;
        }
        ;
        if (x3 instanceof Radio && y2 instanceof Radio) {
          return true;
        }
        ;
        if (x3 instanceof Range && y2 instanceof Range) {
          return true;
        }
        ;
        if (x3 instanceof Reset && y2 instanceof Reset) {
          return true;
        }
        ;
        if (x3 instanceof Search && y2 instanceof Search) {
          return true;
        }
        ;
        if (x3 instanceof Submit && y2 instanceof Submit) {
          return true;
        }
        ;
        if (x3 instanceof Tel && y2 instanceof Tel) {
          return true;
        }
        ;
        if (x3 instanceof Text && y2 instanceof Text) {
          return true;
        }
        ;
        if (x3 instanceof Time && y2 instanceof Time) {
          return true;
        }
        ;
        if (x3 instanceof Url && y2 instanceof Url) {
          return true;
        }
        ;
        if (x3 instanceof Week && y2 instanceof Week) {
          return true;
        }
        ;
        return false;
      };
    }
  };

  // output/Foreign.NullOrUndefined/foreign.js
  var undefinedImpl2 = void 0;

  // output/Foreign.NullOrUndefined/index.js
  var $$undefined3 = undefinedImpl2;

  // output/Yoga.Block.Hook.UseResize/index.js
  var mapFlipped9 = /* @__PURE__ */ mapFlipped(functorEffect);
  var coerceHook8 = /* @__PURE__ */ coerceHook();
  var bind113 = /* @__PURE__ */ bind2(ixBindRender);
  var zero5 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "innerHeight";
    }
  })()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "innerWidth";
    }
  })()(semiringRecordNil)(semiringNumber))(semiringNumber)));
  var discard23 = /* @__PURE__ */ discard2(ixBindRender);
  var useLayoutEffect4 = /* @__PURE__ */ useLayoutEffect(eqUnit);
  var pure112 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var setSizeFromWindow2 = function(setSize3) {
    return function __do10() {
      var window3 = windowImpl();
      var innerWidth2 = mapFlipped9(innerWidth(window3))(toNumber)();
      var innerHeight2 = mapFlipped9(innerHeight(window3))(toNumber)();
      return setSize3({
        innerWidth: innerWidth2,
        innerHeight: innerHeight2
      })();
    };
  };
  var makeListener2 = function(setSize3) {
    return eventListener($$const(setSizeFromWindow2(setSize3)));
  };
  var eventType2 = "resize";
  var registerListener = function(listener) {
    return function __do10() {
      var target6 = mapFlipped9(windowImpl)(toEventTarget2)();
      addEventListener(eventType2)(listener)(false)(target6)();
      return removeEventListener(eventType2)(listener)(false)(target6);
    };
  };
  var useResize = /* @__PURE__ */ coerceHook8(/* @__PURE__ */ bind113(/* @__PURE__ */ useState$prime(zero5))(function(v2) {
    return discard23(useLayoutEffect4(unit)(function __do10() {
      setSizeFromWindow2(v2.value1)();
      var listener = makeListener2(v2.value1)();
      return registerListener(listener)();
    }))(function() {
      return pure112(v2.value0);
    });
  }));

  // output/Yoga.Block.Atom.Input.View.Container/index.js
  var append18 = /* @__PURE__ */ append(semigroupArray);
  var blurredIsSymbol = {
    reflectSymbol: function() {
      return "blurred";
    }
  };
  var focussedIsSymbol = {
    reflectSymbol: function() {
      return "focussed";
    }
  };
  var interpStringFunction3 = /* @__PURE__ */ interpStringFunction(interpString);
  var i4 = /* @__PURE__ */ i2(/* @__PURE__ */ interpNumberFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpNumberFunction(interpStringFunction3)))));
  var intercalate8 = /* @__PURE__ */ intercalate2(foldableArray)(monoidString);
  var map35 = /* @__PURE__ */ map(functorArray);
  var i12 = /* @__PURE__ */ i2(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(interpStringFunction3)));
  var mapFlipped10 = /* @__PURE__ */ mapFlipped(functorArray);
  var bind29 = /* @__PURE__ */ bind2(ixBindRender);
  var zero6 = /* @__PURE__ */ zero(/* @__PURE__ */ semiringRecord()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "height";
    }
  })()(/* @__PURE__ */ semiringRecordCons({
    reflectSymbol: function() {
      return "width";
    }
  })()(semiringRecordNil)(semiringNumber))(semiringNumber)));
  var discard11 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect14 = /* @__PURE__ */ useEffect(eqNumber);
  var for_8 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var mempty14 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var styled7 = /* @__PURE__ */ styled();
  var div$prime8 = /* @__PURE__ */ div$prime();
  var show9 = /* @__PURE__ */ show(showNumber);
  var append19 = /* @__PURE__ */ append(semigroupStyle);
  var show14 = /* @__PURE__ */ show(showBoolean);
  var div8 = /* @__PURE__ */ div6();
  var initial4 = /* @__PURE__ */ initial();
  var animate6 = /* @__PURE__ */ animate3();
  var pure31 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mkPath = function(v2) {
    var p3 = function(x3) {
      return function(y2) {
        return {
          x: x3,
          y: y2
        };
      };
    };
    var heightWith2xBorder = v2.height + 2.2 + 2.2;
    var topBorder = -2.2 - 2.2;
    var widthWith2xBorder = v2.width + 2.2 + 2.2;
    var outside = [p3(topBorder)(topBorder), p3(topBorder)(topBorder), p3(topBorder)(topBorder), p3(topBorder)(heightWith2xBorder), p3(widthWith2xBorder * 0.25)(heightWith2xBorder), p3(widthWith2xBorder * 0.5)(heightWith2xBorder), p3(widthWith2xBorder * 0.75)(heightWith2xBorder), p3(widthWith2xBorder)(heightWith2xBorder), p3(widthWith2xBorder)(topBorder), p3(widthWith2xBorder * 0.25)(topBorder), p3(widthWith2xBorder * 0.5)(topBorder), p3(widthWith2xBorder * 0.75)(topBorder), p3(topBorder)(topBorder)];
    var inside = [p3(8.3)(2.2), p3(4.5)(4.5), p3(2.2)(8.3), p3(2.2)(v2.height - 8.3), p3(4.5)(v2.height - 4.5), p3(8.3)(v2.height - 2.2), p3(v2.width - 8.3)(v2.height - 2.2), p3(v2.width - 4.5)(v2.height - 4.5), p3(v2.width - 2.2)(v2.height - 8.3), p3(v2.width - 2.2)(8.3), p3(v2.width - 4.5)(4.5), p3(v2.width - 8.3)(2.2), p3(8.3)(2.2)];
    return append18(inside)(append18(outside)(reverse(inside)));
  };
  var mkContainerVariantLabels = /* @__PURE__ */ makeVariantLabels(/* @__PURE__ */ hmapWithIndexRecord()(/* @__PURE__ */ mapRecordWithIndexCons(blurredIsSymbol)(/* @__PURE__ */ makeVariantLabels$prime(blurredIsSymbol))(/* @__PURE__ */ mapRecordWithIndexCons(focussedIsSymbol)(/* @__PURE__ */ makeVariantLabels$prime(focussedIsSymbol))(mapRecordWithIndexNil)()())()()));
  var drawPathUntil = function(idx) {
    return function(thePath) {
      var fn = function(v2) {
        return i4(v2.x)("px")(" ")(v2.y)("px");
      };
      var firstFew = take(idx)(thePath);
      var lastOne = fromMaybe$prime(function(v2) {
        return unsafeCrashWith("ogod");
      })(last(firstFew));
      var lastFew = replicate(length(thePath) - length(firstFew) | 0)(lastOne);
      var rendered = intercalate8(",")(map35(fn)(append18(firstFew)(lastFew)));
      return i12("polygon(")(rendered)(")");
    };
  };
  var mkContainerVariants = function(dimensions) {
    var path6 = mkPath(dimensions);
    var clipPathFocussed = mapFlipped10(range(13)(length(path6)))(function(ln) {
      return drawPathUntil(ln)(path6);
    });
    return {
      focussed: css8({
        clipPath: clipPathFocussed,
        transition: {
          duration: 0.6
        }
      }),
      blurred: css8({
        clipPath: drawPathUntil(length(path6) + 1 | 0)(path6)
      })
    };
  };
  var rawContainer = /* @__PURE__ */ mkForwardRefComponent("InputContainer")(function(v2) {
    return function(ref) {
      return bind29(useResize)(function(sizes2) {
        return bind29(useState$prime(zero6))(function(v1) {
          return discard11(useEffect14(sizes2.innerWidth)(function __do10() {
            var maybeDimensions = getOffsetDimensionsFromRef(ref)();
            for_8(maybeDimensions)(v1.value1)();
            return mempty14();
          }))(function() {
            var $$static = styled7(div$prime8)(unsafeAddProps({
              className: "ry-input-container",
              key: show9(sizes2.innerWidth),
              css: append19(inputContainer(v2))(ploppedFocusWithin),
              ref
            })({
              "data-invalid": maybe($$undefined3)(show14)(opToMaybe(v2.isInvalid))
            }));
            var containerVariants = mkContainerVariants(v1.value0);
            var containerVariantLabels = mkContainerVariantLabels(containerVariants);
            var animated = styled7(div8)(unsafeAddProps({
              variants: variants(containerVariants),
              initial: initial4(false),
              animate: animate6(function() {
                if (v2.hasFocus) {
                  return containerVariantLabels.focussed;
                }
                ;
                return containerVariantLabels.blurred;
              }()),
              className: "ry-input-container",
              key: show9(sizes2.innerWidth),
              css: inputContainer(v2),
              ref
            })({
              "data-invalid": maybe($$undefined3)(show14)(opToMaybe(v2.isInvalid))
            }));
            var result = styled7(div$prime8)({
              css: containerContainer(v2)
            })([styledLeaf(div$prime8)({
              className: "container-background",
              css: containerBackground(v2)
            }), function() {
              if (v2.hasLabel) {
                return animated;
              }
              ;
              return $$static;
            }()(v2.children)]);
            return pure31(result);
          });
        });
      });
    };
  });

  // output/Yoga.Block.Atom.Input.View.HTMLInput/index.js
  var styled8 = /* @__PURE__ */ styled();
  var div9 = /* @__PURE__ */ div5();
  var map36 = /* @__PURE__ */ map(functorOptionalProp);
  var emotionInput2 = /* @__PURE__ */ emotionInput();
  var pure32 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var rawComponent3 = /* @__PURE__ */ mkForwardRefComponent("Input")(function(v2) {
    return function(ref) {
      var inputWrapper2 = styled8(div9)({
        className: "ry-input-wrapper",
        css: inputWrapper
      });
      var inputProps = {
        type: map36(toString4)(v2.type),
        "_aria": v2["_aria"],
        "_data": v2["_data"],
        about: v2.about,
        accept: v2.accept,
        acceptCharset: v2.acceptCharset,
        accessKey: v2.accessKey,
        allowFullScreen: v2.allowFullScreen,
        alt: v2.alt,
        autoCapitalize: v2.autoCapitalize,
        autoComplete: v2.autoComplete,
        autoCorrect: v2.autoCorrect,
        autoFocus: v2.autoFocus,
        autoPlay: v2.autoPlay,
        autoSave: v2.autoSave,
        background: v2.background,
        borderColour: v2.borderColour,
        capture: v2.capture,
        cellPadding: v2.cellPadding,
        cellSpacing: v2.cellSpacing,
        charSet: v2.charSet,
        checked: v2.checked,
        classID: v2.classID,
        colSpan: v2.colSpan,
        contentEditable: v2.contentEditable,
        contextMenu: v2.contextMenu,
        crossOrigin: v2.crossOrigin,
        css: v2.css,
        dangerouslySetInnerHTML: v2.dangerouslySetInnerHTML,
        datatype: v2.datatype,
        dateTime: v2.dateTime,
        defaultChecked: v2.defaultChecked,
        defaultValue: v2.defaultValue,
        dir: v2.dir,
        disabled: v2.disabled,
        draggable: v2.draggable,
        encType: v2.encType,
        form: v2.form,
        formAction: v2.formAction,
        formEncType: v2.formEncType,
        formMethod: v2.formMethod,
        formNoValidate: v2.formNoValidate,
        formTarget: v2.formTarget,
        frameBorder: v2.frameBorder,
        height: v2.height,
        hidden: v2.hidden,
        hrefLang: v2.hrefLang,
        htmlFor: v2.htmlFor,
        httpEquiv: v2.httpEquiv,
        icon: v2.icon,
        id: v2.id,
        inlist: v2.inlist,
        inputMode: v2.inputMode,
        is: v2.is,
        itemID: v2.itemID,
        itemProp: v2.itemProp,
        itemRef: v2.itemRef,
        itemScope: v2.itemScope,
        itemType: v2.itemType,
        keyParams: v2.keyParams,
        keyType: v2.keyType,
        lang: v2.lang,
        list: v2.list,
        marginHeight: v2.marginHeight,
        marginWidth: v2.marginWidth,
        max: v2.max,
        maxLength: v2.maxLength,
        mediaGroup: v2.mediaGroup,
        min: v2.min,
        minLength: v2.minLength,
        multiple: v2.multiple,
        name: v2.name,
        noValidate: v2.noValidate,
        onAnimationEnd: v2.onAnimationEnd,
        onAnimationIteration: v2.onAnimationIteration,
        onAnimationStart: v2.onAnimationStart,
        onBlur: v2.onBlur,
        onChange: v2.onChange,
        onClick: v2.onClick,
        onCompositionEnd: v2.onCompositionEnd,
        onCompositionStart: v2.onCompositionStart,
        onCompositionUpdate: v2.onCompositionUpdate,
        onContextMenu: v2.onContextMenu,
        onCopy: v2.onCopy,
        onCut: v2.onCut,
        onDoubleClick: v2.onDoubleClick,
        onDrag: v2.onDrag,
        onDragEnd: v2.onDragEnd,
        onDragEnter: v2.onDragEnter,
        onDragExit: v2.onDragExit,
        onDragLeave: v2.onDragLeave,
        onDragOver: v2.onDragOver,
        onDragStart: v2.onDragStart,
        onDrop: v2.onDrop,
        onFocus: v2.onFocus,
        onGotPointerCapture: v2.onGotPointerCapture,
        onInvalid: v2.onInvalid,
        onKeyDown: v2.onKeyDown,
        onKeyPress: v2.onKeyPress,
        onKeyUp: v2.onKeyUp,
        onLostPointerCapture: v2.onLostPointerCapture,
        onMouseDown: v2.onMouseDown,
        onMouseEnter: v2.onMouseEnter,
        onMouseLeave: v2.onMouseLeave,
        onMouseMove: v2.onMouseMove,
        onMouseOut: v2.onMouseOut,
        onMouseOver: v2.onMouseOver,
        onMouseUp: v2.onMouseUp,
        onPaste: v2.onPaste,
        onPointerCancel: v2.onPointerCancel,
        onPointerDown: v2.onPointerDown,
        onPointerEnter: v2.onPointerEnter,
        onPointerLeave: v2.onPointerLeave,
        onPointerMove: v2.onPointerMove,
        onPointerOut: v2.onPointerOut,
        onPointerOver: v2.onPointerOver,
        onPointerUp: v2.onPointerUp,
        onSelect: v2.onSelect,
        onSubmit: v2.onSubmit,
        onTouchCancel: v2.onTouchCancel,
        onTouchEnd: v2.onTouchEnd,
        onTouchMove: v2.onTouchMove,
        onTouchStart: v2.onTouchStart,
        onTransitionEnd: v2.onTransitionEnd,
        onWheel: v2.onWheel,
        pattern: v2.pattern,
        placeholder: v2.placeholder,
        placeholderColour: v2.placeholderColour,
        prefix: v2.prefix,
        property: v2.property,
        radioGroup: v2.radioGroup,
        readOnly: v2.readOnly,
        required: v2.required,
        resource: v2.resource,
        results: v2.results,
        role: v2.role,
        rowSpan: v2.rowSpan,
        scoped: v2.scoped,
        seamless: v2.seamless,
        security: v2.security,
        size: v2.size,
        sizeVariant: v2.sizeVariant,
        spellCheck: v2.spellCheck,
        src: v2.src,
        srcDoc: v2.srcDoc,
        srcLang: v2.srcLang,
        srcSet: v2.srcSet,
        step: v2.step,
        style: v2.style,
        suppressContentEditableWarning: v2.suppressContentEditableWarning,
        tabIndex: v2.tabIndex,
        textColour: v2.textColour,
        title: v2.title,
        type: map36(toString4)(v2.type),
        "typeof": v2["typeof"],
        unselectable: v2.unselectable,
        useMap: v2.useMap,
        value: v2.value,
        vocab: v2.vocab,
        width: v2.width,
        wmode: v2.wmode
      };
      var input6 = emotionInput2(ref)(inputProps)({
        className: "ry-input",
        css: input3(v2)
      });
      return pure32(inputWrapper2([input6]));
    };
  });
  var componentOptional = function() {
    return rawComponent3;
  };

  // output/Yoga.Block.Atom.Input.View.Label/index.js
  var bind30 = /* @__PURE__ */ bind2(ixBindRender);
  var discard12 = /* @__PURE__ */ discard2(ixBindRender);
  var sequenceRecord2 = /* @__PURE__ */ sequenceRecord()(/* @__PURE__ */ sequenceRecordCons({
    reflectSymbol: function() {
      return "inputRect";
    }
  })()(applyMaybe)(/* @__PURE__ */ sequenceRecordCons({
    reflectSymbol: function() {
      return "inputWidth";
    }
  })()(applyMaybe)(/* @__PURE__ */ sequenceRecordCons({
    reflectSymbol: function() {
      return "parentRect";
    }
  })()(applyMaybe)(/* @__PURE__ */ sequenceRecordSingle({
    reflectSymbol: function() {
      return "parentWidth";
    }
  })()(functorMaybe)()())()())()())()());
  var unless4 = /* @__PURE__ */ unless(applicativeEffect);
  var eq16 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()({
    reflectSymbol: function() {
      return "largeWidth";
    }
  })(eqNumber))()({
    reflectSymbol: function() {
      return "largeLeft";
    }
  })(eqNumber)))));
  var warn3 = /* @__PURE__ */ warn2(monadEffectEffect);
  var mempty15 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var el5 = /* @__PURE__ */ el();
  var span9 = /* @__PURE__ */ span6();
  var layout2 = /* @__PURE__ */ layout();
  var layoutId3 = /* @__PURE__ */ layoutId();
  var foldMap9 = /* @__PURE__ */ foldMap(foldableMaybe)(/* @__PURE__ */ monoidFn(monoidJSX));
  var styled9 = /* @__PURE__ */ styled();
  var div13 = /* @__PURE__ */ div6();
  var initial5 = /* @__PURE__ */ initial();
  var show10 = /* @__PURE__ */ show(showBoolean);
  var div22 = /* @__PURE__ */ div5();
  var pure33 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var component6 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent()()()("InputLabel")(function(v2) {
    return bind30(useState$prime(Nothing.value))(function(v1) {
      return discard12(useLayoutEffectAlways(function __do10() {
        var inputWidth = getOffsetWidthFromRef(v2.inputRef)();
        var inputRect = getBoundingBoxFromRef(v2.inputRef)();
        var parentWidth = getOffsetWidthFromRef(v2.parentRef)();
        var parentRect = getBoundingBoxFromRef(v2.parentRef)();
        (function() {
          var v22 = sequenceRecord2({
            inputWidth,
            parentWidth,
            inputRect,
            parentRect
          });
          if (v22 instanceof Just) {
            var newOffsets = new Just(function() {
              var $83 = v22.value0.inputRect.width <= 5;
              if ($83) {
                return Nothing.value;
              }
              ;
              var parentScale = v22.value0.parentWidth / v22.value0.parentRect.width;
              var parentLeft = v22.value0.parentRect.left * parentScale;
              var inputScale = v22.value0.inputWidth / v22.value0.inputRect.width;
              var inputLeft = v22.value0.inputRect.left * inputScale;
              return new Just({
                largeLeft: inputLeft - parentLeft,
                largeWidth: v22.value0.parentWidth
              });
            }());
            return unless4(eq16(newOffsets)(v1.value0))(v1.value1(newOffsets))();
          }
          ;
          if (v22 instanceof Nothing) {
            return warn3("couldn't get stuff")();
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Atom.Input.View.Label (line 44, column 11 - line 65, column 49): " + [v22.constructor.name]);
        })();
        return mempty15();
      }))(function() {
        var text7 = text2(toString3(v2.labelText));
        var labelSpan = el5(span9)({
          layout: layout2(true),
          layoutId: layoutId3("ry-input-label-text-" + v2.labelId),
          htmlFor: v2.inputId,
          style: css8({
            pointerEvents: "none"
          }),
          id: v2.labelId
        });
        var labelContainer2 = foldMap9(function(v22) {
          if (v22 instanceof Nothing) {
            return styled9(div13)(unsafeAddProps({
              className: "ry-input-label-small",
              layout: layout2(true),
              layoutId: layoutId3("ry-input-label-" + v2.labelId),
              css: labelSmall(v2.background)(v2.textColour),
              transition: transition({
                duration: 0.18,
                ease: "easeOut"
              }),
              initial: initial5(false)
            })({
              "data-has-focus": v2.isFocussed,
              "data-invalid": show10(v2.isInvalid),
              "data-required": show10(v2.isRequired)
            }));
          }
          ;
          if (v22 instanceof Just) {
            return styled9(div13)(unsafeAddProps({
              className: function() {
                if (v2.renderLargeLabel) {
                  return "ry-input-label-large";
                }
                ;
                return "ry-input-label-small";
              }(),
              layout: layout2(true),
              layoutId: layoutId3("ry-input-label-" + v2.labelId),
              css: function() {
                if (v2.renderLargeLabel) {
                  return labelLarge({
                    left: v22.value0.largeLeft,
                    width: v22.value0.largeWidth
                  });
                }
                ;
                return labelSmall(v2.background)(v2.textColour);
              }(),
              transition: transition({
                duration: 0.18,
                ease: "easeOut"
              }),
              initial: initial5(false)
            })({
              "data-has-focus": v2.isFocussed,
              "data-invalid": show10(v2.isInvalid),
              "data-required": show10(v2.isRequired)
            }));
          }
          ;
          throw new Error("Failed pattern match at Yoga.Block.Atom.Input.View.Label (line 79, column 25 - line 117, column 26): " + [v22.constructor.name]);
        })(v1.value0);
        var container5 = styled9(div22)({
          className: "ry-input-label-container",
          style: css8({
            "--input-size-factor": sizeVariantToFactor(v2.sizeVariant)
          }),
          css: labelContainer
        });
        var result = container5([labelContainer2([labelSpan([text7])])]);
        return pure33(result);
      });
    });
  }));

  // output/Yoga.Block.Icon.SVG.MagnifyingGlass/index.js
  var path5 = /* @__PURE__ */ path();
  var magnifyingGlass = /* @__PURE__ */ svg2()({
    viewBox: "0 0 100 100",
    xmlns: "http://www.w3.org/2000/svg",
    fillRule: "evenodd",
    clipRule: "evenodd",
    strokeLinejoin: "round",
    strokeMiterlimit: "1.5",
    children: [/* @__PURE__ */ path5({
      fill: "none",
      d: "M0 0h100v100H0z"
    }), /* @__PURE__ */ circle()({
      cx: "42.994",
      cy: "42.837",
      r: "30.313",
      fill: "none",
      stroke: "var(--stroke-colour)",
      strokeWidth: "10"
    }), /* @__PURE__ */ path5({
      d: "M66.723 66.665l24.062 24.062",
      fill: "none",
      stroke: "var(--stroke-colour)",
      strokeWidth: "8"
    })]
  });

  // output/Yoga.Block.Atom.Input.View/index.js
  var pure34 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var styled10 = /* @__PURE__ */ styled();
  var div10 = /* @__PURE__ */ div5();
  var el6 = /* @__PURE__ */ el();
  var leaf3 = /* @__PURE__ */ leaf();
  var component1 = /* @__PURE__ */ component5();
  var bind31 = /* @__PURE__ */ bind2(ixBindRender);
  var unless5 = /* @__PURE__ */ unless(applicativeEffect);
  var when6 = /* @__PURE__ */ when(applicativeEffect);
  var bindFlipped7 = /* @__PURE__ */ bindFlipped(bindMaybe);
  var for_9 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var bind210 = /* @__PURE__ */ bind(bindMaybe);
  var alt12 = /* @__PURE__ */ alt(altMaybe);
  var mapFlipped11 = /* @__PURE__ */ mapFlipped(functorOptionalProp);
  var eq17 = /* @__PURE__ */ eq(eqHTMLInput);
  var fold4 = /* @__PURE__ */ fold(foldableMaybe)(/* @__PURE__ */ monoidObject(semigroupString));
  var eq18 = /* @__PURE__ */ eq(/* @__PURE__ */ eqMaybe(eqString));
  var cast4 = /* @__PURE__ */ cast();
  var componentOptional2 = /* @__PURE__ */ componentOptional();
  var composeFlipped2 = /* @__PURE__ */ composeFlipped(semigroupoidBuilder);
  var $$delete6 = /* @__PURE__ */ $$delete4({
    reflectSymbol: function() {
      return "leading";
    }
  })()();
  var delete12 = /* @__PURE__ */ $$delete4({
    reflectSymbol: function() {
      return "label";
    }
  })()();
  var delete2 = /* @__PURE__ */ $$delete4({
    reflectSymbol: function() {
      return "trailing";
    }
  })()();
  var delete3 = /* @__PURE__ */ $$delete4({
    reflectSymbol: function() {
      return "inputRef";
    }
  })()();
  var delete4 = /* @__PURE__ */ $$delete4({
    reflectSymbol: function() {
      return "forceSmallLabel";
    }
  })()();
  var insert10 = /* @__PURE__ */ insert5()()({
    reflectSymbol: function() {
      return "ref";
    }
  });
  var mapFlipped12 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var foldMap10 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var appendIfDefined5 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var mkLeftIcon = function(icon) {
    return styled10(div10)({
      className: "ry-input-left-icon-container",
      css: leftIconContainer
    })([leaf3(component1)({
      size: leftIconSize,
      icon
    })]);
  };
  var rawComponent4 = /* @__PURE__ */ mkForwardRefComponent("YogaInput")(function(v2) {
    return function(propsRef) {
      return bind31(useId)(function(backupId) {
        return bind31(useState$prime(false))(function(v1) {
          return bind31(useRef(nullImpl))(function(v22) {
            var inputRef = getOrFlipped(v2.inputRef)(v22);
            return bind31(useRef(nullImpl))(function(v3) {
              var ref = fromMaybe(v3)(forwardedRefAsMaybe(propsRef));
              var maybeValue = opToMaybe(v2.value);
              return bind31(useState$prime(""))(function(v42) {
                var trailing = opToMaybe(v2.trailing);
                var onFocus = handler_(unless5(v1.value0)(v1.value1(true)));
                var onChange = handler(targetValue)(function() {
                  var $100 = fromMaybe("");
                  return function($101) {
                    return v42.value1($100($101));
                  };
                }());
                var onBlur = handler_(function __do10() {
                  when6(v1.value0)(v1.value1(false))();
                  var el1 = getHTMLElementFromRef(ref)();
                  var inputEl = bindFlipped7(fromHTMLElement)(el1);
                  return for_9(inputEl)(function(ie2) {
                    return function __do11() {
                      var v5 = value3(ie2)();
                      return v42.value1(v5)();
                    };
                  })();
                });
                var maybeLabelText = opToMaybe(v2.label);
                var maybePlaceholder = bind210(opToMaybe(v2.placeholder))(function(given) {
                  var $89 = isJust(maybeLabelText) && v1.value0;
                  if ($89) {
                    return new Just(given);
                  }
                  ;
                  return Nothing.value;
                });
                var leading = alt12(opToMaybe(v2.leading))(function() {
                  var $90 = getOrFlipped(mapFlipped11(v2.type)(function(v5) {
                    return eq17(v5)(Search.value);
                  }))(false);
                  if ($90) {
                    return new Just(mkLeftIcon(magnifyingGlass));
                  }
                  ;
                  return Nothing.value;
                }());
                var labelId = function(v5) {
                  return v5 + "-label";
                }(getOrFlipped(v2.id)(backupId));
                var hasValue = function() {
                  if (maybeValue instanceof Just) {
                    return maybeValue.value0 !== "";
                  }
                  ;
                  if (maybeValue instanceof Nothing) {
                    return v42.value0 !== "";
                  }
                  ;
                  throw new Error("Failed pattern match at Yoga.Block.Atom.Input.View (line 71, column 20 - line 73, column 41): " + [maybeValue.constructor.name]);
                }();
                var renderSmallLabel = isTruthy(v2.forceSmallLabel) || (v1.value0 || hasValue);
                var renderLargeLabel = !renderSmallLabel;
                var aria = fold4(opToMaybe(v2["_aria"]));
                var mkLabel = function(labelText) {
                  return leaf3(component6)({
                    isFocussed: v1.value0,
                    isRequired: function(v5) {
                      return eq18(v5)(new Just("true"));
                    }(lookup3("required")(aria)),
                    isInvalid: function(v5) {
                      return eq18(v5)(new Just("true"));
                    }(lookup3("invalid")(aria)),
                    renderLargeLabel,
                    labelId,
                    inputId: getOrFlipped(v2.id)(backupId),
                    inputRef,
                    parentRef: ref,
                    labelText,
                    background: getOrFlipped(v2.background)(colour.interfaceBackground),
                    textColour: getOrFlipped(v2.textColour)(colour.text),
                    sizeVariant: getOrFlipped(v2.sizeVariant)(SizeMedium.value)
                  });
                };
                var inputProps = {
                  leading: v2.leading,
                  trailing: v2.trailing,
                  label: v2.label,
                  type: v2.type,
                  inputRef: v2.inputRef,
                  forceSmallLabel: v2.forceSmallLabel,
                  css: v2.css,
                  sizeVariant: v2.sizeVariant,
                  background: v2.background,
                  textColour: v2.textColour,
                  placeholderColour: v2.placeholderColour,
                  borderColour: v2.borderColour,
                  "_aria": function() {
                    var $93 = isJust(opToMaybe(v2.label));
                    if ($93) {
                      return cast4(insert3("labelledby")(labelId)(aria));
                    }
                    ;
                    return cast4(aria);
                  }(),
                  "_data": v2["_data"],
                  about: v2.about,
                  accept: v2.accept,
                  acceptCharset: v2.acceptCharset,
                  accessKey: v2.accessKey,
                  allowFullScreen: v2.allowFullScreen,
                  alt: v2.alt,
                  autoCapitalize: v2.autoCapitalize,
                  autoComplete: v2.autoComplete,
                  autoCorrect: v2.autoCorrect,
                  autoFocus: v2.autoFocus,
                  autoPlay: v2.autoPlay,
                  autoSave: v2.autoSave,
                  capture: v2.capture,
                  cellPadding: v2.cellPadding,
                  cellSpacing: v2.cellSpacing,
                  charSet: v2.charSet,
                  checked: v2.checked,
                  classID: v2.classID,
                  colSpan: v2.colSpan,
                  contentEditable: v2.contentEditable,
                  contextMenu: v2.contextMenu,
                  crossOrigin: v2.crossOrigin,
                  dangerouslySetInnerHTML: v2.dangerouslySetInnerHTML,
                  datatype: v2.datatype,
                  dateTime: v2.dateTime,
                  defaultChecked: v2.defaultChecked,
                  defaultValue: v2.defaultValue,
                  dir: v2.dir,
                  disabled: v2.disabled,
                  draggable: v2.draggable,
                  encType: v2.encType,
                  form: v2.form,
                  formAction: v2.formAction,
                  formEncType: v2.formEncType,
                  formMethod: v2.formMethod,
                  formNoValidate: v2.formNoValidate,
                  formTarget: v2.formTarget,
                  frameBorder: v2.frameBorder,
                  height: v2.height,
                  hidden: v2.hidden,
                  hrefLang: v2.hrefLang,
                  htmlFor: v2.htmlFor,
                  httpEquiv: v2.httpEquiv,
                  icon: v2.icon,
                  id: v2.id,
                  inlist: v2.inlist,
                  inputMode: v2.inputMode,
                  is: v2.is,
                  itemID: v2.itemID,
                  itemProp: v2.itemProp,
                  itemRef: v2.itemRef,
                  itemScope: v2.itemScope,
                  itemType: v2.itemType,
                  keyParams: v2.keyParams,
                  keyType: v2.keyType,
                  lang: v2.lang,
                  list: v2.list,
                  marginHeight: v2.marginHeight,
                  marginWidth: v2.marginWidth,
                  maxLength: v2.maxLength,
                  mediaGroup: v2.mediaGroup,
                  minLength: v2.minLength,
                  multiple: v2.multiple,
                  name: v2.name,
                  noValidate: v2.noValidate,
                  onAnimationEnd: v2.onAnimationEnd,
                  onAnimationIteration: v2.onAnimationIteration,
                  onAnimationStart: v2.onAnimationStart,
                  onBlur: cast4(composeHandler(onBlur)(v2.onBlur)),
                  onChange: cast4(composeHandler(onChange)(v2.onChange)),
                  onClick: v2.onClick,
                  onCompositionEnd: v2.onCompositionEnd,
                  onCompositionStart: v2.onCompositionStart,
                  onCompositionUpdate: v2.onCompositionUpdate,
                  onContextMenu: v2.onContextMenu,
                  onCopy: v2.onCopy,
                  onCut: v2.onCut,
                  onDoubleClick: v2.onDoubleClick,
                  onDrag: v2.onDrag,
                  onDragEnd: v2.onDragEnd,
                  onDragEnter: v2.onDragEnter,
                  onDragExit: v2.onDragExit,
                  onDragLeave: v2.onDragLeave,
                  onDragOver: v2.onDragOver,
                  onDragStart: v2.onDragStart,
                  onDrop: v2.onDrop,
                  onFocus: cast4(composeHandler(onFocus)(v2.onFocus)),
                  onGotPointerCapture: v2.onGotPointerCapture,
                  onInvalid: v2.onInvalid,
                  onKeyDown: v2.onKeyDown,
                  onKeyPress: v2.onKeyPress,
                  onKeyUp: v2.onKeyUp,
                  onLostPointerCapture: v2.onLostPointerCapture,
                  onMouseDown: v2.onMouseDown,
                  onMouseEnter: v2.onMouseEnter,
                  onMouseLeave: v2.onMouseLeave,
                  onMouseMove: v2.onMouseMove,
                  onMouseOut: v2.onMouseOut,
                  onMouseOver: v2.onMouseOver,
                  onMouseUp: v2.onMouseUp,
                  onPaste: v2.onPaste,
                  onPointerCancel: v2.onPointerCancel,
                  onPointerDown: v2.onPointerDown,
                  onPointerEnter: v2.onPointerEnter,
                  onPointerLeave: v2.onPointerLeave,
                  onPointerMove: v2.onPointerMove,
                  onPointerOut: v2.onPointerOut,
                  onPointerOver: v2.onPointerOver,
                  onPointerUp: v2.onPointerUp,
                  onSelect: v2.onSelect,
                  onSubmit: v2.onSubmit,
                  onTouchCancel: v2.onTouchCancel,
                  onTouchEnd: v2.onTouchEnd,
                  onTouchMove: v2.onTouchMove,
                  onTouchStart: v2.onTouchStart,
                  onTransitionEnd: v2.onTransitionEnd,
                  onWheel: v2.onWheel,
                  pattern: v2.pattern,
                  placeholder: maybeToOp(maybePlaceholder),
                  prefix: v2.prefix,
                  property: v2.property,
                  radioGroup: v2.radioGroup,
                  readOnly: v2.readOnly,
                  required: v2.required,
                  resource: v2.resource,
                  results: v2.results,
                  role: v2.role,
                  rowSpan: v2.rowSpan,
                  scoped: v2.scoped,
                  seamless: v2.seamless,
                  security: v2.security,
                  size: v2.size,
                  spellCheck: v2.spellCheck,
                  src: v2.src,
                  srcDoc: v2.srcDoc,
                  srcLang: v2.srcLang,
                  srcSet: v2.srcSet,
                  step: v2.step,
                  style: v2.style,
                  suppressContentEditableWarning: v2.suppressContentEditableWarning,
                  tabIndex: v2.tabIndex,
                  title: v2.title,
                  type: v2.type,
                  "typeof": v2["typeof"],
                  unselectable: v2.unselectable,
                  useMap: v2.useMap,
                  value: v2.value,
                  vocab: v2.vocab,
                  width: v2.width,
                  wmode: v2.wmode,
                  min: v2.min,
                  max: v2.max
                };
                var theInput = leaf3(componentOptional2)(deleteUndefineds(cast4(build(composeFlipped2($$delete6($$Proxy.value))(composeFlipped2(delete12($$Proxy.value))(composeFlipped2(delete2($$Proxy.value))(composeFlipped2(delete3($$Proxy.value))(composeFlipped2(delete4($$Proxy.value))(insert10($$Proxy.value)(inputRef)))))))(inputProps))));
                var inputContainer2 = el6(rawContainer)({
                  hasFocus: v1.value0,
                  isInvalid: maybeToOp(mapFlipped12(lookup3("invalid")(aria))(function(v5) {
                    return v5 === "true";
                  })),
                  css: v2.css,
                  background: v2.background,
                  borderColour: v2.borderColour,
                  textColor: v2.textColour,
                  ref,
                  hasLabel: isJust(opToMaybe(v2.label)),
                  sizeVariant: v2.sizeVariant
                })([foldMap10(function(l2) {
                  return el6(div10)({})([l2]);
                })(leading), theInput, foldMap10(function(t) {
                  return el6(div10)({})([t]);
                })(trailing)]);
                return pure34(function() {
                  if (maybeLabelText instanceof Nothing) {
                    return inputContainer2;
                  }
                  ;
                  if (maybeLabelText instanceof Just) {
                    return styled10(div10)({
                      className: "ry-label-and-input-wrapper",
                      css: appendIfDefined5(labelAndInputWrapper)(v2.css)
                    })([inputContainer2, mkLabel(maybeLabelText.value0)]);
                  }
                  ;
                  throw new Error("Failed pattern match at Yoga.Block.Atom.Input.View (line 184, column 11 - line 192, column 57): " + [maybeLabelText.constructor.name]);
                }());
              });
            });
          });
        });
      });
    };
  });
  var component7 = function() {
    return rawComponent4;
  };

  // output/React.Basic.Hooks.Aff/index.js
  var coerceHook9 = /* @__PURE__ */ coerceHook();
  var bind32 = /* @__PURE__ */ bind2(ixBindRender);
  var discard13 = /* @__PURE__ */ discard2(ixBindRender);
  var bind114 = /* @__PURE__ */ bind(bindAff);
  var liftEffect8 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var $$try4 = /* @__PURE__ */ $$try2(monadErrorAff);
  var pure113 = /* @__PURE__ */ pure(applicativeEffect);
  var throwError3 = /* @__PURE__ */ throwError(monadThrowEffect);
  var useAff = function(dictEq) {
    var useEffect110 = useEffect(dictEq);
    return function(deps) {
      return function(aff) {
        return coerceHook9(bind32(useState(Nothing.value))(function(v2) {
          return discard13(useEffect110(deps)(function __do10() {
            v2.value1($$const(Nothing.value))();
            var fiber = launchAff(bind114($$try4(aff))(function(r2) {
              return liftEffect8(v2.value1(function(v1) {
                return new Just(r2);
              }));
            }))();
            return launchAff_(killFiber(error("Stale request cancelled"))(fiber));
          }))(function() {
            return unsafeRenderEffect(function() {
              if (v2.value0 instanceof Just && v2.value0.value0 instanceof Left) {
                return throwError3(v2.value0.value0.value0);
              }
              ;
              if (v2.value0 instanceof Just && v2.value0.value0 instanceof Right) {
                return pure113(new Just(v2.value0.value0.value0));
              }
              ;
              if (v2.value0 instanceof Nothing) {
                return pure113(Nothing.value);
              }
              ;
              throw new Error("Failed pattern match at React.Basic.Hooks.Aff (line 53, column 24 - line 56, column 30): " + [v2.value0.constructor.name]);
            }());
          });
        }));
      };
    };
  };

  // output/MotionValue/foreign.js
  var useMotionValueImpl = useMotionValue;
  function get3(mv) {
    return () => {
      return mv.get();
    };
  }
  function setImpl(v2) {
    return (render) => (mv) => () => {
      mv.set(v2, render);
    };
  }
  var animateImpl = animate2;
  function stopAnimation(playbackControls) {
    return playbackControls.stop;
  }

  // output/MotionValue/index.js
  var useMotionValue2 = /* @__PURE__ */ function() {
    var $2 = runEffectFn1(useMotionValueImpl);
    return function($3) {
      return unsafeHook($2($3));
    };
  }();
  var set2 = function(v2) {
    return setImpl(v2)(true);
  };
  var animate7 = function(target6) {
    return function(opts) {
      return function(value12) {
        return function() {
          return animateImpl(value12, target6, opts);
        };
      };
    };
  };

  // output/Yoga.Block.Hook.Key/foreign.js
  function getKeyImpl(just) {
    return function(nothing) {
      return function(event) {
        return event.keyCode ? just(event.keyCode) : nothing;
      };
    };
  }

  // output/Yoga.Block.Hook.Key/index.js
  var Return = /* @__PURE__ */ function() {
    function Return2() {
    }
    ;
    Return2.value = new Return2();
    return Return2;
  }();
  var Escape = /* @__PURE__ */ function() {
    function Escape2() {
    }
    ;
    Escape2.value = new Escape2();
    return Escape2;
  }();
  var End2 = /* @__PURE__ */ function() {
    function End3() {
    }
    ;
    End3.value = new End3();
    return End3;
  }();
  var Home2 = /* @__PURE__ */ function() {
    function Home3() {
    }
    ;
    Home3.value = new Home3();
    return Home3;
  }();
  var Left2 = /* @__PURE__ */ function() {
    function Left3() {
    }
    ;
    Left3.value = new Left3();
    return Left3;
  }();
  var Up = /* @__PURE__ */ function() {
    function Up2() {
    }
    ;
    Up2.value = new Up2();
    return Up2;
  }();
  var Right2 = /* @__PURE__ */ function() {
    function Right3() {
    }
    ;
    Right3.value = new Right3();
    return Right3;
  }();
  var Down = /* @__PURE__ */ function() {
    function Down2() {
    }
    ;
    Down2.value = new Down2();
    return Down2;
  }();
  var Delete = /* @__PURE__ */ function() {
    function Delete2() {
    }
    ;
    Delete2.value = new Delete2();
    return Delete2;
  }();
  var Backspace = /* @__PURE__ */ function() {
    function Backspace2() {
    }
    ;
    Backspace2.value = new Backspace2();
    return Backspace2;
  }();
  var intToKeyCode = function(v2) {
    if (v2 === 8) {
      return new Just(Backspace.value);
    }
    ;
    if (v2 === 13) {
      return new Just(Return.value);
    }
    ;
    if (v2 === 27) {
      return new Just(Escape.value);
    }
    ;
    if (v2 === 35) {
      return new Just(End2.value);
    }
    ;
    if (v2 === 36) {
      return new Just(Home2.value);
    }
    ;
    if (v2 === 37) {
      return new Just(Left2.value);
    }
    ;
    if (v2 === 38) {
      return new Just(Up.value);
    }
    ;
    if (v2 === 39) {
      return new Just(Right2.value);
    }
    ;
    if (v2 === 40) {
      return new Just(Down.value);
    }
    ;
    if (v2 === 46) {
      return new Just(Delete.value);
    }
    ;
    return Nothing.value;
  };
  var getKeyCode = /* @__PURE__ */ function() {
    return getKeyImpl(Just.create)(Nothing.value);
  }();

  // output/Yoga.Block.Hook.UseKeyDown/index.js
  var coerceHook10 = /* @__PURE__ */ coerceHook();
  var bind115 = /* @__PURE__ */ bind(bindMaybe);
  var pure35 = /* @__PURE__ */ pure(applicativeEffect);
  var eventTypeKeyDown = "keydown";
  var useKeyDown = function(doWhat) {
    return coerceHook10(useEffectAlways(function __do10() {
      var listener = eventListener(function(event) {
        var v2 = bind115(getKeyCode(event))(intToKeyCode);
        if (v2 instanceof Just) {
          return doWhat(v2.value0);
        }
        ;
        if (v2 instanceof Nothing) {
          return pure35(unit);
        }
        ;
        throw new Error("Failed pattern match at Yoga.Block.Hook.UseKeyDown (line 25, column 11 - line 27, column 33): " + [v2.constructor.name]);
      })();
      var win = windowImpl();
      addEventListener(eventTypeKeyDown)(listener)(false)(toEventTarget2(win))();
      return removeEventListener(eventTypeKeyDown)(listener)(false)(toEventTarget2(win));
    }));
  };

  // output/Fahrtwind.Style.Global/index.js
  var css30 = /* @__PURE__ */ css2();
  var intercalate9 = /* @__PURE__ */ intercalate3(monoidString);
  var show11 = /* @__PURE__ */ show(showString);
  var variables2 = /* @__PURE__ */ function() {
    return css30({
      "--plm-highlight-colour": color(violet["_500"]),
      "--plm-highlightText-colour": color(violet["_50"]),
      "--plm-inputBorder-colour": str("transparent"),
      "--plm-inputBackground-colour": color(gray["_100"]),
      "--plm-inputIcon-colour": color(gray["_400"]),
      "--plm-inputText-colour": color(darken(0.05)(gray["_700"])),
      "--plm-popupBackground-colour": color(white2),
      "--plm-inputBorderActive-colour": $$var("--plm-highlight-colour"),
      "--plm-inputSelectOption-colour": color(gray["_200"]),
      "--plm-inputSelectOptionText-colour": color(gray["_800"])
    });
  }();
  var nest6 = function() {
    return function() {
      return function($10) {
        return nested(css30($10));
      };
    };
  };
  var nest1 = /* @__PURE__ */ nest6()();
  var globalStyles = /* @__PURE__ */ function() {
    return css30({
      ":root": nested(append(semigroupStyle)(variables2)(css30({
        "*, ::before, ::after": nest1({
          boxSizing: borderBox,
          borderWidth: str("0"),
          borderStyle: solid,
          borderColor: str("currentColor")
        })
      }))),
      html: nest1({
        tabSize: str("4"),
        MozTabSize: str("4"),
        lineHeight: str("1.5"),
        WebkitTextSizeAdjust: str("100%"),
        fontFamily: str(intercalate9(",")([show11("Inter var experimental"), show11("Inter var"), "Inter", "system-ui", "-apple-system", "'Segoe UI'", "Roboto", "Helvetica", "Arial", "sans-serif", "'Apple Color Emoji'", "'Segoe UI Emoji'"]))
      }),
      body: nest1({
        margin: str("0"),
        lineHeight: inherit,
        fontFamily: inherit
      }),
      hr: nest1({
        height: str("0"),
        color: inherit,
        borderTopWidth: px(1)
      }),
      "abbr[title]": nest1({
        textDecoration: str("underline dotted"),
        WebkitTextDecoration: str("underline dotted")
      }),
      "b,strong": nest1({
        fontWeight: str("bolder")
      }),
      "code, kbd, samp, pre": nest1({
        fontSize: em(1),
        fontFamily: str(intercalate9(",")(["ui-monospace", "SFMono-Regular", "Consolas", "'Liberation Mono'", "Menlo", "monospace"]))
      }),
      small: nest1({
        fontSize: percent(80)
      }),
      "sub,sup": nest1({
        fontSize: percent(75),
        lineHeight: str("0"),
        position: relative,
        verticalAlign: baseline
      }),
      sub: nest1({
        bottom: em(-0.25)
      }),
      sup: nest1({
        bottom: em(-0.5)
      }),
      table: nest1({
        textIndent: str("0"),
        borderColor: inherit,
        borderCollapse: str("collapse")
      }),
      "button,input,optgroup,select,textarea": nest1({
        fontFamily: inherit,
        fontSize: percent(100),
        lineHeight: str("1.15"),
        margin: str("0")
      }),
      "button, select": nest1({
        textTransform: none
      }),
      "button, [type='button'], [type='reset'], [type='submit']": nest1({
        WebkitAppearance: str("button")
      }),
      "::MozFocusInner": nest1({
        borderStyle: none,
        padding: str("0")
      }),
      "::MozFocusring": nest1({
        outline: str("1px dotted ButtonText")
      }),
      ":MozUIInvalid": nest1({
        boxShadow: none
      }),
      legend: nest1({
        padding: str("0")
      }),
      progress: nest1({
        verticalAlign: baseline
      }),
      "::WebkitInnerSpinButton, ::WebkitOuterSpinButton": nest1({
        height: auto
      }),
      "[type='search']": nest1({
        WebkitAppearance: str("textfield"),
        outlineOffset: px(-2 | 0)
      }),
      "::WebkitSearchDecoration": nest1({
        WebkitAppearance: none
      }),
      "::WebkitFileUploadButton": nest1({
        WebkitAppearance: str("button"),
        font: inherit
      }),
      summary: nest1({
        display: str("list-item")
      }),
      "blockquote, dl, dd, h1, h2, h3, h4, h5, h6, hr, figure, p, pre": nest1({
        margin: str("0")
      }),
      button: nest1({
        backgroundColor: str("transparent"),
        backgroundImage: none
      }),
      fieldset: nest1({
        margin: str("0"),
        padding: str("0")
      }),
      "ol, ul": nest1({
        listStyle: none,
        margin: str("0"),
        padding: str("0")
      }),
      img: nest1({
        borderStyle: solid
      }),
      textarea: nest1({
        resize: str("vertical")
      }),
      "input::placeholder, textarea::placeholder": nest1({
        opacity: str("1"),
        color: str("#9ca3af")
      }),
      'button, [role="button"]': nest1({
        cursor: str("pointer")
      }),
      "h1,h2,h3,h4,h5,h6": nest1({
        fontSize: inherit,
        fontWeight: inherit
      }),
      a: nest1({
        color: inherit,
        textDecoration: inherit
      }),
      "button, input, optgroup, selecct, textarea": nest1({
        padding: str("0"),
        lineHeight: inherit,
        color: inherit
      }),
      "img, svg, video, canvas, audio, iframe, embed, object": nest1({
        display: str("block"),
        verticalAlign: str("middle")
      }),
      "img, video": nest1({
        maxWidth: str("100%"),
        height: auto
      })
    });
  }();

  // output/MediaQuery/foreign.js
  var stubMatchMedia = () => {
    if (window.matchMedia)
      return;
    window.matchMedia = (name15) => ({
      matches: false,
      addEventListener: () => {
      },
      removeEventListener: () => {
      }
    });
  };
  function matchMedia(string) {
    return (window3) => () => {
      stubMatchMedia();
      return window3.matchMedia(string);
    };
  }
  function matches2(matchMedia2) {
    return () => {
      stubMatchMedia();
      return matchMedia2.matches;
    };
  }

  // output/MediaQuery.Types/index.js
  var toEventTarget4 = unsafeCoerce2;

  // output/Web.HTML.Event.EventTypes/index.js
  var change = "change";

  // output/Yoga.Block.Container.View/index.js
  var bindFlipped8 = /* @__PURE__ */ bindFlipped(bindEffect);
  var join4 = /* @__PURE__ */ join(bindMaybe);
  var monoidEffect4 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty16 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(monoidEffect4));
  var bind33 = /* @__PURE__ */ bind2(ixBindRender);
  var discard14 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect15 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqMaybe(eqDarkOrLightMode));
  var for_10 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var mempty17 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect4));
  var whenM2 = /* @__PURE__ */ whenM(monadEffect);
  var pure114 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var append20 = /* @__PURE__ */ append(semigroupStyle);
  var appendIfDefined6 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var mkPrefersLight = /* @__PURE__ */ bindFlipped8(/* @__PURE__ */ matchMedia("(prefers-color-scheme: light)"))(windowImpl);
  var mkPrefersDark = /* @__PURE__ */ bindFlipped8(/* @__PURE__ */ matchMedia("(prefers-color-scheme: dark)"))(windowImpl);
  var rawComponent5 = /* @__PURE__ */ mkForwardRefComponent("Container")(function(v2) {
    return function(_ref) {
      var propsThemeVariant = join4(opToMaybe(v2.themeVariant));
      var notifySystemThemeChanged = getOrFlipped(v2.onPreferredSystemThemeChange)(mempty16);
      return bind33(useState$prime(Nothing.value))(function(v1) {
        return discard14(useEffect15(propsThemeVariant)(function __do10() {
          for_10(propsThemeVariant)(setDarkOrLightMode)();
          return mempty17();
        }))(function() {
          return discard14(useEffectOnce(function __do10() {
            var prefersDarkMediaQuery = mkPrefersDark();
            var prefersLightMediaQuery = mkPrefersLight();
            whenM2(matches2(prefersDarkMediaQuery))(function __do11() {
              v1.value1(new Just(DarkMode.value))();
              return notifySystemThemeChanged(DarkMode.value)();
            })();
            whenM2(matches2(prefersLightMediaQuery))(function __do11() {
              v1.value1(new Just(LightMode.value))();
              return notifySystemThemeChanged(LightMode.value)();
            })();
            var darkModeListener = eventListener(function(v22) {
              return whenM2(matches2(prefersDarkMediaQuery))(function __do11() {
                v1.value1(new Just(DarkMode.value))();
                return notifySystemThemeChanged(DarkMode.value)();
              });
            })();
            addEventListener(change)(darkModeListener)(true)(toEventTarget4(prefersDarkMediaQuery))();
            var lightModeListener = eventListener(function(v22) {
              return whenM2(matches2(prefersLightMediaQuery))(function __do11() {
                v1.value1(new Just(LightMode.value))();
                return notifySystemThemeChanged(LightMode.value)();
              });
            })();
            addEventListener(change)(darkModeListener)(true)(toEventTarget4(prefersDarkMediaQuery))();
            addEventListener(change)(lightModeListener)(true)(toEventTarget4(prefersLightMediaQuery))();
            return function __do11() {
              removeEventListener(change)(darkModeListener)(true)(toEventTarget4(prefersDarkMediaQuery))();
              return removeEventListener(change)(lightModeListener)(true)(toEventTarget4(prefersLightMediaQuery))();
            };
          }))(function() {
            return pure114(fragment(cons2(element(global3)({
              styles: append20(globalStyles)(function(v22) {
                return appendIfDefined6(v22)(v2.globalStyles);
              }(function() {
                if (propsThemeVariant instanceof Nothing && v1.value0 instanceof Nothing) {
                  return global4;
                }
                ;
                if (propsThemeVariant instanceof Just && propsThemeVariant.value0 instanceof DarkMode) {
                  return darkMode;
                }
                ;
                if (propsThemeVariant instanceof Just && propsThemeVariant.value0 instanceof LightMode) {
                  return lightMode;
                }
                ;
                if (propsThemeVariant instanceof Nothing && (v1.value0 instanceof Just && v1.value0.value0 instanceof DarkMode)) {
                  return darkMode;
                }
                ;
                if (propsThemeVariant instanceof Nothing && (v1.value0 instanceof Just && v1.value0.value0 instanceof LightMode)) {
                  return lightMode;
                }
                ;
                throw new Error("Failed pattern match at Yoga.Block.Container.View (line 85, column 21 - line 90, column 66): " + [propsThemeVariant.constructor.name, v1.value0.constructor.name]);
              }()))
            }))(v2.children)));
          });
        });
      });
    };
  });
  var component9 = function() {
    return rawComponent5;
  };

  // output/Yoga.Block.Layout.Box.Style/index.js
  var css31 = /* @__PURE__ */ css2();
  var mempty18 = /* @__PURE__ */ mempty(monoidStyleProperty);
  var map37 = /* @__PURE__ */ map(functorOptionalProp);
  var appendIfDefined7 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var box = function(props) {
    var styles = css31({
      padding: getOrFlipped(props.padding)(em(1)),
      border: getOrFlipped(props.border)(str("0 solid")),
      borderTop: getOrFlipped(props.borderTop)(mempty18),
      borderRight: getOrFlipped(props.borderRight)(mempty18),
      borderBottom: getOrFlipped(props.borderBottom)(mempty18),
      borderLeft: getOrFlipped(props.borderLeft)(mempty18),
      borderRadius: getOrFlipped(props.borderRadius)(mempty18),
      background: getOrFlipped(map37(str)(props.background))(color(transparent)),
      color: getOrFlipped(props.foreground)(str("inherit")),
      boxShadow: getOrFlipped(props.boxShadow)(none),
      margin: _0
    });
    return appendIfDefined7(styles)(props.css);
  };

  // output/Yoga.Block.Layout.Box.View/index.js
  var pure36 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var emotionDiv2 = /* @__PURE__ */ emotionDiv()();
  var appendIfDefined8 = /* @__PURE__ */ appendIfDefined(semigroupString);
  var rawComponent6 = /* @__PURE__ */ mkForwardRefComponent("Box")(function(v2) {
    return function(ref) {
      return pure36(emotionDiv2(ref)(v2)({
        className: appendIfDefined8("ry-box ")(v2.className),
        css: box(v2)
      }));
    };
  });
  var component10 = function() {
    return rawComponent6;
  };

  // output/Yoga.Block.Layout.Centre.Style/index.js
  var css32 = /* @__PURE__ */ css2();
  var appendIfDefined9 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var centre = function(props) {
    var styles = css32({
      padding: getOrFlipped(props.padding)(px(0)),
      boxSizing: contentBox,
      marginLeft: auto,
      marginRight: auto,
      maxWidth: getOrFlipped(props.maxWidth)(ch(60)),
      textAlign: function() {
        var $2 = isTruthy(props.andText);
        if ($2) {
          return center;
        }
        ;
        return left2;
      }(),
      paddingLeft: getOrFlipped(props.gutters)(_0),
      paddingRight: getOrFlipped(props.gutters)(_0)
    });
    return appendIfDefined9(styles)(props.css);
  };

  // output/Yoga.Block.Layout.Centre.View/index.js
  var pure37 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var emotionDiv3 = /* @__PURE__ */ emotionDiv()();
  var appendIfDefined10 = /* @__PURE__ */ appendIfDefined(semigroupString);
  var rawComponent7 = /* @__PURE__ */ mkForwardRefComponent("Centre")(function(v2) {
    return function(ref) {
      return pure37(emotionDiv3(ref)(v2)({
        className: appendIfDefined10("ry-centre ")(v2.className),
        css: centre(v2)
      }));
    };
  });
  var component11 = function() {
    return rawComponent7;
  };

  // output/Yoga.Block.Layout.Cluster.Style/index.js
  var mapFlipped13 = /* @__PURE__ */ mapFlipped(functorOptionalProp);
  var css33 = /* @__PURE__ */ css2();
  var nest7 = /* @__PURE__ */ nest()();
  var map38 = /* @__PURE__ */ map(functorOptionalProp);
  var appendIfDefined11 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var cluster2 = function(props) {
    var space = getOrFlipped(mapFlipped13(props.space)(function(x3) {
      var $8 = x3 === "0";
      if ($8) {
        return "0px";
      }
      ;
      return x3;
    }))("var(--s1)");
    var styles = css33({
      "& > *": nest7({
        display: flex,
        flexWrap: wrap4,
        alignItems: getOrFlipped(map38(str)(props.align))(center),
        justifyContent: getOrFlipped(map38(str)(props.justify))(flexStart),
        margin: str("calc(" + (space + " / 2 * -1)"))
      }),
      "& > * > *": nest7({
        margin: str("calc(" + (space + " / 2)"))
      })
    });
    return appendIfDefined11(styles)(props.css);
  };

  // output/Yoga.Block.Layout.Cluster.View/index.js
  var mapFlipped14 = /* @__PURE__ */ mapFlipped(functorArray);
  var pure38 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var emotionDiv4 = /* @__PURE__ */ emotionDiv()();
  var appendIfDefined12 = /* @__PURE__ */ appendIfDefined(semigroupString);
  var rawComponent8 = /* @__PURE__ */ mkForwardRefComponent("Cluster")(function(v2) {
    return function(ref) {
      var wrap6 = getOrFlipped(v2.wrapper)(div_);
      var wrapChild = getOrFlipped(v2.childWrapper)(div_);
      var safeChildren = reactChildrenToArray(v2.children);
      var wrappedChildren = mapFlipped14(safeChildren)(wrapChild);
      return pure38(emotionDiv4(ref)(v2)({
        className: appendIfDefined12("ry-cluster ")(v2.className),
        css: cluster2(v2),
        children: [wrap6(wrappedChildren)]
      }));
    };
  });
  var component12 = function() {
    return rawComponent8;
  };

  // output/Yoga.Block.Layout.Stack.Style/index.js
  var css34 = /* @__PURE__ */ css2();
  var nest8 = /* @__PURE__ */ nest()();
  var show15 = /* @__PURE__ */ show(showInt);
  var nestDynamic2 = /* @__PURE__ */ nestDynamic();
  var foldMap11 = /* @__PURE__ */ foldMap(foldableOptionalProp)(monoidStyle);
  var append110 = /* @__PURE__ */ append(semigroupStyle);
  var appendIfDefined13 = /* @__PURE__ */ appendIfDefined(semigroupStyle);
  var stack = function(props) {
    var styles = css34({
      display: flex,
      margin: _0,
      flexDirection: column2,
      justifyContent: flexStart,
      "& > *": nest8({
        marginTop: _0,
        marginBottom: _0
      }),
      "& > * + *": nest8({
        margin: _0,
        marginTop: getOrFlipped(props.space)(rem2(1.5))
      })
    });
    var splitStyles = function() {
      var onlyChildStyle = css34({
        "&:only-child": nest8({
          height: percent(100)
        })
      });
      var nthChild = function(n2) {
        return "& > div:nth-of-type(" + (show15(n2) + ")");
      };
      var nthChildStyle = function(n2) {
        return nestDynamic2(nthChild(n2))({
          marginBottom: auto
        });
      };
      return foldMap11(function(n2) {
        return append110(onlyChildStyle)(nthChildStyle(n2));
      })(props.splitAfter);
    }();
    return append110(splitStyles)(appendIfDefined13(styles)(props.css));
  };

  // output/Yoga.Block.Layout.Stack.View/index.js
  var mapFlipped15 = /* @__PURE__ */ mapFlipped(functorArray);
  var el7 = /* @__PURE__ */ el();
  var div11 = /* @__PURE__ */ div5();
  var pure39 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var emotionDiv5 = /* @__PURE__ */ emotionDiv()();
  var appendIfDefined14 = /* @__PURE__ */ appendIfDefined(semigroupString);
  var rawComponent9 = /* @__PURE__ */ mkForwardRefComponent("Stack")(function(v2) {
    return function(ref) {
      var safeChildren = reactChildrenToArray(v2.children);
      var wrappedChildren = mapFlipped15(safeChildren)(function(c3) {
        return el7(div11)({})([c3]);
      });
      return pure39(emotionDiv5(ref)(v2)({
        className: appendIfDefined14("ry-stack ")(v2.className),
        css: stack(v2),
        children: wrappedChildren
      }));
    };
  });
  var component13 = function() {
    return rawComponent9;
  };

  // output/Yoga.Block/index.js
  var component24 = /* @__PURE__ */ component13();
  var el8 = /* @__PURE__ */ el();
  var component62 = /* @__PURE__ */ component7();
  var component112 = /* @__PURE__ */ component9();
  var component122 = /* @__PURE__ */ component12();
  var component132 = /* @__PURE__ */ component11();
  var component142 = /* @__PURE__ */ component4();
  var component152 = /* @__PURE__ */ component10();
  var stack$prime = function() {
    return component24;
  };
  var stack$prime1 = /* @__PURE__ */ stack$prime();
  var stack2 = function() {
    return function() {
      return el8(stack$prime1);
    };
  };
  var stack_ = /* @__PURE__ */ stack2()()({});
  var input4 = function() {
    return component62;
  };
  var container3 = function() {
    return component112;
  };
  var cluster$prime = function() {
    return component122;
  };
  var cluster$prime1 = /* @__PURE__ */ cluster$prime();
  var cluster3 = function() {
    return function() {
      return el8(cluster$prime1);
    };
  };
  var cluster_ = /* @__PURE__ */ cluster3()()({});
  var centre$prime = function() {
    return component132;
  };
  var centre$prime1 = /* @__PURE__ */ centre$prime();
  var centre2 = function() {
    return function() {
      return el8(centre$prime1);
    };
  };
  var centre_ = /* @__PURE__ */ centre2()()({});
  var button$prime3 = function() {
    return component142;
  };
  var button$prime1 = /* @__PURE__ */ button$prime3();
  var button8 = function() {
    return function() {
      return el8(button$prime1);
    };
  };
  var box$prime = function() {
    return component152;
  };
  var box$prime1 = /* @__PURE__ */ box$prime();
  var box2 = function() {
    return function() {
      return el8(box$prime1);
    };
  };
  var box_ = /* @__PURE__ */ box2()()({});

  // output/UI.Project/index.js
  var pure40 = /* @__PURE__ */ pure(applicativeArray);
  var cluster4 = /* @__PURE__ */ cluster3()();
  var styled11 = /* @__PURE__ */ styled();
  var div$prime9 = /* @__PURE__ */ div$prime();
  var append21 = /* @__PURE__ */ append(semigroupStyle);
  var a$prime2 = /* @__PURE__ */ a$prime();
  var code$prime2 = /* @__PURE__ */ code$prime();
  var css35 = /* @__PURE__ */ css2();
  var bind34 = /* @__PURE__ */ bind2(ixBindRender);
  var pure115 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var h2$prime2 = /* @__PURE__ */ h2$prime();
  var guard7 = /* @__PURE__ */ guard(monoidStyle);
  var stack3 = /* @__PURE__ */ stack2()();
  var foldMap13 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var label$prime2 = /* @__PURE__ */ label$prime();
  var el9 = /* @__PURE__ */ el();
  var span$prime4 = /* @__PURE__ */ span$prime();
  var mapFlipped16 = /* @__PURE__ */ mapFlipped(functorArray);
  var renderDependency = function(packages) {
    return function(v2) {
      return li_(pure40(function() {
        var v1 = lookup3(v2)(packages);
        if (v1 instanceof Nothing) {
          return text2(v2);
        }
        ;
        if (v1 instanceof Just) {
          return cluster4({
            wrapper: styled11(div$prime9)({
              css: append21(mXY(0))(pXY(0))
            })
          })([styled11(a$prime2)({
            css: hover(underline),
            href: v1.value0.repo
          })([text2(v2)]), styled11(code$prime2)({
            css: append21(textSm)(textCol$prime(col2.textPaler3))
          })([text2(v1.value0.version)])]);
        }
        ;
        throw new Error("Failed pattern match at UI.Project (line 64, column 3 - line 74, column 10): " + [v1.constructor.name]);
      }()));
    };
  };
  var nestChildren2 = function(inner) {
    return css35({
      "& > * + *": nested(inner)
    });
  };
  var divideCol$prime2 = function(sp) {
    return nestChildren2(css35({
      borderColor: sp
    }));
  };
  var mkProjectName = /* @__PURE__ */ component2("ProjectName")(function(_ctx) {
    return function(v2) {
      return bind34(useRef(nullImpl))(function(popOverContainerRef) {
        return bind34(usePopOver({
          dismissBehaviour\u0294: new Just(new DismissPopOverOnClickOutsideTargetAnd([popOverContainerRef])),
          containerId: popOverId,
          placement: new Placement(Below.value, End.value)
        }))(function(v1) {
          var dotsMenuHoverStyle = append21(background$prime(col2.backgroundBright4))(textCol$prime(col2.textPaler1));
          var menuEntry = function(text7) {
            return function(icon) {
              return div_2(popOverMenuEntryStyle)([div_2(widthAndHeight(16))([icon]), text2(text7)]);
            };
          };
          return pure115(cluster4({
            css: append21(pY$prime($$var("--s1")))(append21(borderBottom(1))(borderCol$prime(col2.backgroundBright3))),
            align: "flex-end",
            space: "var(--s-1)"
          })([styled11(h2$prime2)({
            css: append21(text4xl)(append21(fontBold)(textCol$prime(col2.textPaler1)))
          })([text2(v2)]), styled11(div$prime9)({
            css: append21(widthAndHeight(38))(append21(pXY(6))(append21(roundedLg)(append21(mL(4))(append21(textCol$prime(col2.textPaler2))(append21(borderCol$prime(col2.background))(append21(transition2("background 350ms ease"))(append21(hover(dotsMenuHoverStyle))(guard7(v1.isVisible)(dotsMenuHoverStyle))))))))),
            ref: v1.targetRef,
            onClick: handler_(function() {
              if (v1.isVisible) {
                return v1.hidePopOver;
              }
              ;
              return v1.showPopOver;
            }())
          })([dotsVertical]), v1.renderInPopOver(styled11(div$prime9)({
            ref: popOverContainerRef,
            css: append21(mT(1))(append21(roundedDefault)(append21(border2(1))(append21(borderCol$prime(col2.backgroundLayer2))(background$prime(col2.backgroundBright1)))))
          })([stack3({
            space: str("0"),
            css: append21(divideY(1))(divideCol$prime2(col2.backgroundBright3))
          })([menuEntry("Rename")(pencil), menuEntry("Browse repository")(code2)])]))]));
        });
      });
    };
  });
  var mkView = /* @__PURE__ */ bind(bindReaderT)(mkProjectName)(function(projectName) {
    return component2("Project")(function(v2) {
      return function(props) {
        return pure115(box_([stack3({
          space: $$var("--s2")
        })([stack_([projectName(props.name), foldMap13(function(v1) {
          return h3_([text2(v1)]);
        })(props.repository)]), stack3({
          space: $$var("--s0")
        })([styled11(label$prime2)({
          css: textXl,
          htmlFor: "dependencies"
        })([text2("Dependencies")]), el9(span$prime4)({
          id: "dependencies"
        })([ul_(mapFlipped16(props.dependencies)(renderDependency(props.packages)))])])])]));
      };
    });
  });

  // output/UI.OpenProject/index.js
  var bind35 = /* @__PURE__ */ bind2(ixBindRender);
  var button9 = /* @__PURE__ */ button8()();
  var pure41 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var match5 = /* @__PURE__ */ match()()();
  var mkView2 = /* @__PURE__ */ bind(bindReaderT)(mkView)(function(projectView) {
    return component2("OpenProject")(function(v2) {
      return function(v1) {
        return bind35(useIPCMessage(v2))(function(v22) {
          var selectButton = function(disabled11) {
            return centre_([button9({
              onClick: handler(preventDefault)(function(v3) {
                return v22.value1.value0(ShowFolderSelector.value);
              }),
              buttonType: Primary.value,
              disabled: disabled11
            })([text2("Select a folder")])]);
          };
          return pure41(box_([h1_([text2("Project")]), function() {
            if (v22.value0 instanceof NotAsked) {
              return selectButton(false);
            }
            ;
            if (v22.value0 instanceof Loading2) {
              return selectButton(true);
            }
            ;
            if (v22.value0 instanceof Failure) {
              return fragment([selectButton(false)]);
            }
            ;
            if (v22.value0 instanceof Success2 && v22.value0.value0 instanceof ShowFolderSelectorResponse) {
              return match5({
                noSpagoDhall: function(v3) {
                  return stack_([selectButton(false), text2("No spago.dhall in the selected folder")]);
                },
                invalidSpagoDhall: function(v3) {
                  return stack_([selectButton(false), text2("Invalid spago.dhall config!")]);
                },
                nothingSelected: function(v3) {
                  return selectButton(false);
                },
                validSpagoDhall: projectView
              })(v22.value0.value0.value0);
            }
            ;
            if (v22.value0 instanceof Success2) {
              return fragment([selectButton(false), text2("Unexpected message")]);
            }
            ;
            throw new Error("Failed pattern match at UI.OpenProject (line 36, column 9 - line 57, column 66): " + [v22.value0.constructor.name]);
          }()]));
        });
      };
    });
  });

  // output/Fahrtwind.Style.Cursor/index.js
  var css36 = /* @__PURE__ */ css2();
  var cursorPointer = /* @__PURE__ */ css36({
    cursor: pointer
  });

  // output/UI.Block.Card.Style/index.js
  var append22 = /* @__PURE__ */ append(semigroupStyle);
  var cardContainerStyle = /* @__PURE__ */ function() {
    return append22(rounded2xl)(append22(background$prime(col2.backgroundBright3))(append22(textCol$prime(col2.textPaler1))(append22(pX(24))(append22(pT(16))(append22(pB(24))(append22(shadowMd)(append22(overflowHidden)(append22(positionRelative)(userSelectNone)))))))));
  }();
  var clickableCardContainerStyle = /* @__PURE__ */ append22(cardContainerStyle)(/* @__PURE__ */ append22(/* @__PURE__ */ transition2("all 0.2s ease-out"))(/* @__PURE__ */ append22(/* @__PURE__ */ active(/* @__PURE__ */ transform("scale(0.997)")))(cursorPointer)));

  // output/UI.Block.Card/index.js
  var bind36 = /* @__PURE__ */ bind2(ixBindRender);
  var mempty19 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffectFn1(monoidUnit));
  var $$void8 = /* @__PURE__ */ $$void(functorEffect);
  var leaf4 = /* @__PURE__ */ leaf();
  var pick2 = /* @__PURE__ */ pick()()(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "className";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "colour";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "onComplete";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "visible";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "x";
    }
  })(/* @__PURE__ */ consKeys({
    reflectSymbol: function() {
      return "y";
    }
  })(nilKeys)))))));
  var disjointUnion2 = /* @__PURE__ */ disjointUnion()();
  var pure42 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var styled12 = /* @__PURE__ */ styled();
  var div$prime10 = /* @__PURE__ */ div$prime();
  var append23 = /* @__PURE__ */ append(semigroupStyle);
  var el10 = /* @__PURE__ */ el();
  var mempty110 = /* @__PURE__ */ mempty(monoidStyle);
  var rawCard = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ component("Card")(function(v2) {
    return bind36(useRef(nullImpl))(function(ref) {
      return bind36(useDrip(ref))(function(dripProps) {
        var onClick = function() {
          if (v2.onClick\u0294 instanceof Nothing) {
            return mempty19;
          }
          ;
          if (v2.onClick\u0294 instanceof Just) {
            return handler(syntheticEvent)(function(e) {
              return function __do10() {
                $$void8(function() {
                  return v2.onClick\u0294.value0(e);
                })();
                return $$void8(function() {
                  return dripProps.onClick(e);
                })();
              };
            });
          }
          ;
          throw new Error("Failed pattern match at UI.Block.Card (line 36, column 11 - line 40, column 54): " + [v2.onClick\u0294.constructor.name]);
        }();
        var drip2 = leaf4(component3)(pick2(disjointUnion2({
          className: "card-drip",
          colour: colour.backgroundBright4
        })(dripProps)));
        return pure42(styled12(div$prime10)({
          css: append23(function() {
            var $41 = isJust(v2.onClick\u0294);
            if ($41) {
              return clickableCardContainerStyle;
            }
            ;
            return cardContainerStyle;
          }())(v2.style),
          ref,
          onClick
        })([drip2, el10(div$prime10)({
          style: css8({
            transform: "translateZ(1px)",
            backfaceVisibility: "hidden"
          })
        })(v2.children)]));
      });
    });
  }));
  var styledCard = function(style3) {
    return function(children2) {
      return rawCard({
        style: style3,
        children: children2,
        onClick\u0294: Nothing.value
      });
    };
  };
  var styledClickableCard = function(style3) {
    return function(onClick) {
      return function(children2) {
        return rawCard({
          style: style3,
          children: children2,
          onClick\u0294: new Just(onClick)
        });
      };
    };
  };
  var clickableCard = function(onClick) {
    return function(children2) {
      return rawCard({
        style: mempty110,
        children: children2,
        onClick\u0294: new Just(onClick)
      });
    };
  };
  var card = function(children2) {
    return rawCard({
      style: mempty110,
      children: children2,
      onClick\u0294: Nothing.value
    });
  };

  // output/UI.FilePath/foreign.js
  var cyrb53 = (seed) => (str2) => {
    let h12 = 3735928559 ^ seed, h22 = 1103547991 ^ seed;
    for (let i7 = 0, ch2; i7 < str2.length; i7++) {
      ch2 = str2.charCodeAt(i7);
      h12 = Math.imul(h12 ^ ch2, 2654435761);
      h22 = Math.imul(h22 ^ ch2, 1597334677);
    }
    h12 = Math.imul(h12 ^ h12 >>> 16, 2246822507) ^ Math.imul(h22 ^ h22 >>> 13, 3266489909);
    h22 = Math.imul(h22 ^ h22 >>> 16, 2246822507) ^ Math.imul(h12 ^ h12 >>> 13, 3266489909);
    return 4294967296 * (2097151 & h22) + (h12 >>> 0);
  };

  // output/UI.Navigation.ThemeSwitcher/index.js
  var mempty20 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var bind37 = /* @__PURE__ */ bind2(ixBindRender);
  var pure43 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var el11 = /* @__PURE__ */ el();
  var container4 = /* @__PURE__ */ container3();
  var themeContext = /* @__PURE__ */ unsafePerformEffect(function __do7() {
    var theme\u0294 = getDarkOrLightMode();
    return createContext({
      theme: fromMaybe(LightMode.value)(theme\u0294),
      setTheme: mempty20
    })();
  });
  var useTheme = /* @__PURE__ */ coerceHook()(/* @__PURE__ */ useContext(themeContext));
  var mkThemeProvider = function(globalStyles2) {
    return component("ThemeProvider")(function(child) {
      return bind37(useState$prime(LightMode.value))(function(v2) {
        return pure43(provider(themeContext)({
          theme: v2.value0,
          setTheme: v2.value1
        })([el11(container4)({
          onPreferredSystemThemeChange: v2.value1,
          themeVariant: new Just(v2.value0),
          globalStyles: globalStyles2
        })([child])]));
      });
    });
  };

  // output/UI.FilePath/index.js
  var mod3 = /* @__PURE__ */ mod(euclideanRingInt);
  var between2 = /* @__PURE__ */ between(ordNumber);
  var bind38 = /* @__PURE__ */ bind2(ixBindRender);
  var pure44 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var styled13 = /* @__PURE__ */ styled();
  var span$prime5 = /* @__PURE__ */ span$prime();
  var fromHomogeneous6 = /* @__PURE__ */ fromHomogeneous();
  var eq19 = /* @__PURE__ */ eq(eqDarkOrLightMode);
  var append24 = /* @__PURE__ */ append(semigroupStyle);
  var css37 = /* @__PURE__ */ css2();
  var cluster5 = /* @__PURE__ */ cluster3()();
  var code$prime3 = /* @__PURE__ */ code$prime();
  var toTailwindCol = function(s3) {
    var baseHue = toNumber(function(v2) {
      return mod3(v2)(360);
    }(cyrb53(10)(s3)));
    var colFromDarkHue = {
      "_50": hsv(baseHue)(0.7)(0.98),
      "_100": hsv(baseHue)(0.7)(0.95),
      "_200": hsv(baseHue)(0.7)(0.92),
      "_300": hsv(baseHue)(0.15)(0.93),
      "_400": hsv(baseHue)(0.8)(0.7),
      "_500": hsv(baseHue)(0.8)(0.6),
      "_600": hsv(baseHue)(0.9)(0.5),
      "_700": hsv(baseHue)(0.9)(0.3),
      "_800": hsv(baseHue)(0.8)(0.42),
      "_900": hsv(baseHue)(1)(0.1)
    };
    var colFromLightHue = {
      "_50": hsv(baseHue)(0.8)(0.9),
      "_100": hsv(baseHue)(0.8)(0.82),
      "_200": hsv(baseHue)(0.6)(0.71),
      "_300": hsv(baseHue)(0.35)(0.87),
      "_400": hsv(baseHue)(0.9)(0.5),
      "_500": hsv(baseHue)(0.9)(0.4),
      "_600": hsv(baseHue)(1)(0.3),
      "_700": hsv(baseHue)(0.8)(0.22),
      "_800": hsv(baseHue)(0.8)(0.22),
      "_900": hsv(baseHue)(1)(0.05)
    };
    var colFromMediumHue = {
      "_50": hsv(baseHue)(0.8)(0.98),
      "_100": hsv(baseHue)(0.8)(0.95),
      "_200": hsv(baseHue)(0.8)(0.9),
      "_300": hsv(baseHue)(0.32)(0.88),
      "_400": hsv(baseHue)(0.9)(0.84),
      "_500": hsv(baseHue)(0.9)(0.5),
      "_600": hsv(baseHue)(1)(0.4),
      "_700": hsv(baseHue)(1)(0.3),
      "_800": hsv(baseHue)(1)(0.3),
      "_900": hsv(baseHue)(1)(0.1)
    };
    var colFromVeryDarkHue = {
      "_50": hsv(baseHue)(0.7)(0.98),
      "_100": hsv(baseHue)(0.7)(0.95),
      "_200": hsv(baseHue)(0.7)(0.92),
      "_300": hsv(baseHue)(0.3)(0.97),
      "_400": hsv(baseHue)(0.8)(0.7),
      "_500": hsv(baseHue)(0.8)(0.6),
      "_600": hsv(baseHue)(0.9)(0.5),
      "_700": hsv(baseHue)(0.9)(0.3),
      "_800": hsv(baseHue)(0.9)(0.3),
      "_900": hsv(baseHue)(1)(0.1)
    };
    var $19 = between2(230)(280)(baseHue);
    if ($19) {
      return colFromVeryDarkHue;
    }
    ;
    var $20 = between2(352)(360)(baseHue) || between2(0)(15)(baseHue);
    if ($20) {
      return colFromMediumHue;
    }
    ;
    var $21 = between2(180)(350)(baseHue);
    if ($21) {
      return colFromDarkHue;
    }
    ;
    var $22 = between2(20)(100)(baseHue) || between2(150)(200)(baseHue);
    if ($22) {
      return colFromLightHue;
    }
    ;
    return colFromMediumHue;
  };
  var tag = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ component("Tag")(function(v2) {
    return bind38(useTheme)(function(v1) {
      return pure44(styled13(span$prime5)({
        "_data": fromHomogeneous6({
          "dark-theme": function() {
            var $25 = eq19(v1.theme)(DarkMode.value);
            if ($25) {
              return "true";
            }
            ;
            return "false";
          }()
        }),
        css: append24(roundedDefault)(append24(textSm)(append24(fontMedium)(append24(trackingWide)(append24(pX(8))(append24(pY(4))(append24(textCol(v2["col"]["_800"]))(append24(background(withAlpha(0.667)(v2["col"]["_300"])))(css37({
          "&[data-dark-theme='true']": nested(append24(background(withAlpha(0.8)(v2["col"]["_800"])))(textCol(v2["col"]["_300"])))
        })))))))))
      })([text2(v2.p)]));
    });
  }));
  var renderGithubRepo = function(v2) {
    return cluster5({
      space: "8px"
    })([tag({
      col: toTailwindCol(v2.owner),
      p: v2.owner
    })]);
  };
  var renderFilePath = function(p3) {
    return styled13(code$prime3)({
      css: append24(border2(1))(append24(roundedDefault)(append24(borderCol$prime(col2.backgroundBright5))(append24(textSm)(append24(pX(4))(append24(pY(2))(background$prime(col2.backgroundLayer3)))))))
    })([text2(p3)]);
  };

  // output/UI.Notification.ErrorNotification/index.js
  var styled14 = /* @__PURE__ */ styled();
  var div$prime11 = /* @__PURE__ */ div$prime();
  var cluster6 = /* @__PURE__ */ cluster3()();
  var append25 = /* @__PURE__ */ append(semigroupStyle);
  var css38 = /* @__PURE__ */ css2();
  var errorNotification = function(v2) {
    return {
      render: function(v1) {
        return styled14(div$prime11)({
          css: defaultNotificationContentContainerStyle
        })([styled14(div$prime11)({
          css: defaultNotificationContentStyle
        })([cluster6({
          space: "var(--s-2)",
          align: "center"
        })([styled14(div$prime11)({
          css: append25(widthAndHeight(16))(append25(mB(4))(textCol$prime(col2.invalid)))
        })([exclamationCircle]), styled14(div$prime11)({
          css: defaultNotificationTitleStyle
        })([text2(v2.title)])]), styled14(div$prime11)({
          css: append25(defaultNotificationBodyStyle)(css38({
            whiteSpace: preWrap
          }))
        })([v2.body])]), notificationDismissButton(v1.dismiss)]);
      },
      autoHideAfter: Nothing.value
    };
  };

  // output/UI.Notification.SendNotification/index.js
  var sendNotification = function(ctx) {
    return function(n2) {
      return ctx.notificationCentre.enqueueNotification(n2);
    };
  };

  // output/Plumage.Atom.Tooltip.View/index.js
  var bind39 = /* @__PURE__ */ bind2(ixBindRender);
  var pure45 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var div14 = /* @__PURE__ */ div3();
  var guard8 = /* @__PURE__ */ guard(/* @__PURE__ */ monoidEffect(monoidUnit));
  var leaf5 = /* @__PURE__ */ leaf();
  var rawComponent10 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent()()()("Tooltip")(function(v2) {
    return bind39(usePopOver({
      dismissBehaviour\u0294: Nothing.value,
      containerId: v2.containerId,
      placement: v2.placement
    }))(function(v1) {
      return pure45(fragment([div14({
        children: [v2.child],
        ref: v1.targetRef,
        onMouseLeave: handler_(guard8(v1.isVisible)(v1.hidePopOver)),
        onMouseEnter: handler_(guard8(!v1.isVisible)(v1.showPopOver))
      }), v1.renderInPopOver(v2.tooltipContent)]));
    });
  }));
  var tooltip = function(v2) {
    return function(child) {
      return leaf5(rawComponent10)({
        placement: v2.placement,
        containerId: v2.containerId,
        child,
        tooltipContent: v2.tooltip
      });
    };
  };

  // output/UI.Tooltip/index.js
  var append26 = /* @__PURE__ */ append(semigroupStyle);
  var css39 = /* @__PURE__ */ css2();
  var withTooltip = function(content3) {
    return tooltip({
      containerId: tooltipId,
      placement: new Placement(Below.value, Centre.value),
      tooltip: div_2(append26(background$prime(col2.backgroundInverted))(append26(textCol$prime(col2.textInverted))(append26(pX(6))(append26(pB(2))(append26(borderCol$prime(col2.popperOuterBorder))(roundedDefault))))))(content3)
    });
  };
  var withTextTooltip = function(text7) {
    return withTooltip([span_2(append26(textXs)(css39({
      whiteSpace: nowrap
    })))([text2(text7)])]);
  };

  // output/Yoga.Block.Hook.UseStateEq/index.js
  var coerceHook11 = /* @__PURE__ */ coerceHook();
  var bind40 = /* @__PURE__ */ bind2(ixBindRender);
  var when7 = /* @__PURE__ */ when(applicativeEffect);
  var pure46 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useStateEq$prime = function(dictEq) {
    var notEq6 = notEq(dictEq);
    return function(initialValue) {
      return coerceHook11(bind40(useState$prime(initialValue))(function(v2) {
        var updateEq = function(newValue) {
          return when7(notEq6(newValue)(v2.value0))(v2.value1(newValue));
        };
        return pure46(new Tuple(v2.value0, updateEq));
      }));
    };
  };

  // output/UI.Preferences.Root/index.js
  var bind41 = /* @__PURE__ */ bind2(ixBindRender);
  var pure47 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var cluster7 = /* @__PURE__ */ cluster3()();
  var styled15 = /* @__PURE__ */ styled();
  var code$prime4 = /* @__PURE__ */ code$prime();
  var append27 = /* @__PURE__ */ append(semigroupStyle);
  var button10 = /* @__PURE__ */ button8()();
  var monoidEffect5 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty21 = /* @__PURE__ */ mempty(monoidEffect5);
  var box3 = /* @__PURE__ */ box2()();
  var useStateEq$prime2 = /* @__PURE__ */ useStateEq$prime(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqTuple(eqTool)(/* @__PURE__ */ eqMaybe(eqToolPath)))));
  var discard15 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect16 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqRemoteData(eqVoid)(eqMessageToRenderer));
  var writeJSON3 = /* @__PURE__ */ writeJSON(writeForeignMessageToRend);
  var mempty111 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect5));
  var foldMap14 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var stack4 = /* @__PURE__ */ stack2()();
  var mapFlipped17 = /* @__PURE__ */ mapFlipped(functorArray);
  var mkToolView = /* @__PURE__ */ component2("Tool")(function(v2) {
    return function(v1) {
      return bind41(useRouter)(function(v22) {
        var theCard = function() {
          if (v1.value0 instanceof Spago) {
            return clickableCard(handler_(v22.navigate(new Preferences(Spago2.value))));
          }
          ;
          return card;
        }();
        return pure47(theCard([cluster7({
          justify: "space-between"
        })([div_2(flexCol)([styled15(code$prime4)({
          css: textLg
        })([text2(toCommand(v1.value0))]), cluster7({
          space: "4px",
          css: textCol$prime(col2.textPaler3),
          align: "flex-end"
        })([span_2(textSm)([text2(toName(v1.value0))]), withTextTooltip("Hi")(div_2(append27(widthAndHeight(18))(mB(2)))([questionMarkCircle]))])]), cluster_([function() {
          if (v1.value1 instanceof Just) {
            return renderFilePath(v1.value1.value0);
          }
          ;
          if (v1.value1 instanceof Nothing) {
            return button10({
              buttonShape: Flat.value,
              onClick: handler_(mempty21)
            })([text2("Install")]);
          }
          ;
          throw new Error("Failed pattern match at UI.Preferences.Root (line 100, column 17 - line 109, column 24): " + [v1.value1.constructor.name]);
        }(), box3({
          padding: px(5),
          css: append27(roundedFull)(append27(border2(1))(function() {
            var $46 = isJust(v1.value1);
            if ($46) {
              return append27(background(green["_400"]))(borderCol(green["_600"]));
            }
            ;
            return append27(background(yellow["_400"]))(borderCol(yellow["_600"]));
          }()))
        })([])])])]));
      });
    };
  });
  var mkView3 = /* @__PURE__ */ function() {
    var useGetTools = function(ctx) {
      return bind41(useIPCMessage(ctx))(function(v2) {
        return bind41(useStateEq$prime2(Nothing.value))(function(v1) {
          return discard15(useEffect16(v2.value0)(function __do10() {
            (function() {
              if (v2.value0 instanceof NotAsked) {
                return v2.value1.value0(GetInstalledTools.value)();
              }
              ;
              if (v2.value0 instanceof Failure) {
                return absurd(v2.value0.value0)();
              }
              ;
              if (v2.value0 instanceof Loading2) {
                return mempty21();
              }
              ;
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GetInstalledToolsResponse && v2.value0.value0.value0 instanceof UnsupportedOperatingSystem)) {
                return sendNotification(ctx)(errorNotification({
                  title: "Error",
                  body: text2("Your operating system is not supported.")
                }))();
              }
              ;
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GetInstalledToolsResponse && v2.value0.value0.value0 instanceof ToolsResult)) {
                return v1.value1(new Just(v2.value0.value0.value0.value0))();
              }
              ;
              if (v2.value0 instanceof Success2) {
                return sendNotification(ctx)(errorNotification({
                  title: "BUG: Unexpected message",
                  body: text2(writeJSON3(v2.value0.value0))
                }))();
              }
              ;
              throw new Error("Failed pattern match at UI.Preferences.Root (line 53, column 7 - line 68, column 14): " + [v2.value0.constructor.name]);
            })();
            return mempty111();
          }))(function() {
            return pure47(v1.value0);
          });
        });
      });
    };
    return bind(bindReaderT)(mkToolView)(function(toolView) {
      return component2("PreferencesRoot")(function(v2) {
        return function(route) {
          return bind41(useGetTools(v2))(function(tools\u0294) {
            return pure47(foldMap14(function(tools) {
              return stack4({
                space: px(8)
              })(mapFlipped17(tools)(toolView));
            })(tools\u0294));
          });
        };
      });
    });
  }();

  // output/UI.Tool.Spago/index.js
  var bind42 = /* @__PURE__ */ bind2(ixBindRender);
  var useStateEq$prime3 = /* @__PURE__ */ useStateEq$prime(/* @__PURE__ */ eqMaybe(eqSpagoGlobalCacheDir));
  var discard16 = /* @__PURE__ */ discard2(ixBindRender);
  var monoidEffect6 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty23 = /* @__PURE__ */ mempty(monoidEffect6);
  var writeJSON4 = /* @__PURE__ */ writeJSON(writeForeignMessageToRend);
  var mempty112 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect6));
  var pure48 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var foldMap15 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var mkView4 = /* @__PURE__ */ function() {
    var useGetSpagoGlobalCache = function(ctx) {
      return bind42(useIPCMessage(ctx))(function(v2) {
        return bind42(useStateEq$prime3(Nothing.value))(function(v1) {
          return discard16(useEffectAlways(function __do10() {
            (function() {
              if (v2.value0 instanceof NotAsked) {
                return v2.value1.value0(GetSpagoGlobalCache.value)();
              }
              ;
              if (v2.value0 instanceof Loading2) {
                return mempty23();
              }
              ;
              if (v2.value0 instanceof Failure) {
                return absurd(v2.value0.value0)();
              }
              ;
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GetSpagoGlobalCacheResult && v2.value0.value0.value0 instanceof Failed)) {
                return sendNotification(ctx)(errorNotification({
                  title: "Error",
                  body: text2(v2.value0.value0.value0.value0)
                }))();
              }
              ;
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GetSpagoGlobalCacheResult && v2.value0.value0.value0 instanceof Succeeded)) {
                return v1.value1(new Just(v2.value0.value0.value0.value0))();
              }
              ;
              if (v2.value0 instanceof Success2) {
                return sendNotification(ctx)(errorNotification({
                  title: "Bug: Wrong Message",
                  body: text2(writeJSON4(v2.value0.value0))
                }))();
              }
              ;
              throw new Error("Failed pattern match at UI.Tool.Spago (line 28, column 7 - line 41, column 14): " + [v2.value0.constructor.name]);
            })();
            return mempty112();
          }))(function() {
            return pure48(v1.value0);
          });
        });
      });
    };
    return component2("SpagoInfo")(function(v2) {
      return function(v1) {
        return bind42(useGetSpagoGlobalCache(v2))(function(cacheDir\u0294) {
          return pure48(foldMap15(function(v22) {
            return text2(v22);
          })(cacheDir\u0294));
        });
      };
    });
  }();

  // output/UI.Preferences/index.js
  var bind43 = /* @__PURE__ */ bind(bindReaderT);
  var pure49 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mkView5 = /* @__PURE__ */ bind43(mkView3)(function(rootView) {
    return bind43(mkView4)(function(spagoView) {
      return component2("Preferences")(function(v2) {
        return function(route) {
          return pure49(function() {
            if (route instanceof Root) {
              return rootView(unit);
            }
            ;
            if (route instanceof Spago2) {
              return spagoView(unit);
            }
            ;
            throw new Error("Failed pattern match at UI.Preferences (line 15, column 10 - line 17, column 41): " + [route.constructor.name]);
          }());
        };
      });
    });
  });

  // output/Data.DateTime.Instant/index.js
  var append111 = /* @__PURE__ */ append(semigroupMilliseconds);
  var negateDuration2 = /* @__PURE__ */ negateDuration(durationMilliseconds);
  var unInstant = function(v2) {
    return v2;
  };
  var instant = function(v2) {
    if (v2 >= -86399778816e5 && v2 <= 8639977881599999) {
      return new Just(v2);
    }
    ;
    if (otherwise) {
      return Nothing.value;
    }
    ;
    throw new Error("Failed pattern match at Data.DateTime.Instant (line 45, column 1 - line 45, column 41): " + [v2.constructor.name]);
  };
  var durationMillis = function(v2) {
    return append111(unInstant(v2.end))(negateDuration2(unInstant(v2.start)));
  };

  // output/Data.JSDate/foreign.js
  function toInstantImpl(just) {
    return function(nothing) {
      return function(date2) {
        var t = date2.getTime();
        return isNaN(t) ? nothing : just(t);
      };
    };
  }
  function parse10(dateString) {
    return function() {
      return new Date(dateString);
    };
  }

  // output/Data.JSDate/index.js
  var toInstant = /* @__PURE__ */ function() {
    return composeKleisliFlipped(bindMaybe)(function($21) {
      return instant(Milliseconds($21));
    })(toInstantImpl(Just.create)(Nothing.value));
  }();

  // output/Effect.Now/foreign.js
  function now2() {
    return Date.now();
  }

  // output/Fahrtwind.Style.Breakpoint/index.js
  var css40 = /* @__PURE__ */ css2();
  var screenXl = function(s3) {
    return css40({
      "@media (min-width: 1280px)": nested(s3)
    });
  };
  var screenSm = function(s3) {
    return css40({
      "@media (min-width: 640px)": nested(s3)
    });
  };
  var screenMd = function(s3) {
    return css40({
      "@media (min-width: 768px)": nested(s3)
    });
  };
  var screenLg = function(s3) {
    return css40({
      "@media (min-width: 1024px)": nested(s3)
    });
  };

  // output/Fahrtwind.Style.Display/index.js
  var css41 = /* @__PURE__ */ css2();
  var displayNone = /* @__PURE__ */ css41({
    display: none
  });

  // output/Image/foreign.js
  var setFallbackImgSrc = (src9) => (e) => () => {
    e.onerror = null;
    e.src = src9;
  };

  // node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
  var import_react43 = __toESM(require_react());

  // node_modules/@virtuoso.dev/urx/dist/urx.esm.js
  var PUBLISH = 0;
  var SUBSCRIBE = 1;
  var RESET = 2;
  var VALUE = 4;
  function compose3(a4, b4) {
    return function(arg) {
      return a4(b4(arg));
    };
  }
  function thrush(arg, proc) {
    return proc(arg);
  }
  function curry2to1(proc, arg1) {
    return function(arg2) {
      return proc(arg1, arg2);
    };
  }
  function curry1to0(proc, arg) {
    return function() {
      return proc(arg);
    };
  }
  function tap(arg, proc) {
    proc(arg);
    return arg;
  }
  function tup() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return args;
  }
  function call(proc) {
    proc();
  }
  function always(value12) {
    return function() {
      return value12;
    };
  }
  function joinProc() {
    for (var _len2 = arguments.length, procs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      procs[_key2] = arguments[_key2];
    }
    return function() {
      procs.map(call);
    };
  }
  function noop() {
  }
  function subscribe(emitter, subscription) {
    return emitter(SUBSCRIBE, subscription);
  }
  function publish(publisher, value12) {
    publisher(PUBLISH, value12);
  }
  function reset2(emitter) {
    emitter(RESET);
  }
  function getValue(depot) {
    return depot(VALUE);
  }
  function connect(emitter, publisher) {
    return subscribe(emitter, curry2to1(publisher, PUBLISH));
  }
  function handleNext(emitter, subscription) {
    var unsub = emitter(SUBSCRIBE, function(value12) {
      unsub();
      subscription(value12);
    });
    return unsub;
  }
  function stream() {
    var subscriptions = [];
    return function(action2, arg) {
      switch (action2) {
        case RESET:
          subscriptions.splice(0, subscriptions.length);
          return;
        case SUBSCRIBE:
          subscriptions.push(arg);
          return function() {
            var indexOf3 = subscriptions.indexOf(arg);
            if (indexOf3 > -1) {
              subscriptions.splice(indexOf3, 1);
            }
          };
        case PUBLISH:
          subscriptions.slice().forEach(function(subscription) {
            subscription(arg);
          });
          return;
        default:
          throw new Error("unrecognized action " + action2);
      }
    };
  }
  function statefulStream(initial8) {
    var value12 = initial8;
    var innerSubject = stream();
    return function(action2, arg) {
      switch (action2) {
        case SUBSCRIBE:
          var subscription = arg;
          subscription(value12);
          break;
        case PUBLISH:
          value12 = arg;
          break;
        case VALUE:
          return value12;
      }
      return innerSubject(action2, arg);
    };
  }
  function eventHandler(emitter) {
    var unsub;
    var currentSubscription;
    var cleanup = function cleanup2() {
      return unsub && unsub();
    };
    return function(action2, subscription) {
      switch (action2) {
        case SUBSCRIBE:
          if (subscription) {
            if (currentSubscription === subscription) {
              return;
            }
            cleanup();
            currentSubscription = subscription;
            unsub = subscribe(emitter, subscription);
            return unsub;
          } else {
            cleanup();
            return noop;
          }
        case RESET:
          cleanup();
          currentSubscription = null;
          return;
        default:
          throw new Error("unrecognized action " + action2);
      }
    };
  }
  function streamFromEmitter(emitter) {
    return tap(stream(), function(stream2) {
      return connect(emitter, stream2);
    });
  }
  function statefulStreamFromEmitter(emitter, initial8) {
    return tap(statefulStream(initial8), function(stream2) {
      return connect(emitter, stream2);
    });
  }
  function combineOperators() {
    for (var _len = arguments.length, operators = new Array(_len), _key = 0; _key < _len; _key++) {
      operators[_key] = arguments[_key];
    }
    return function(subscriber) {
      return operators.reduceRight(thrush, subscriber);
    };
  }
  function pipe2(source3) {
    for (var _len2 = arguments.length, operators = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      operators[_key2 - 1] = arguments[_key2];
    }
    var project = combineOperators.apply(void 0, operators);
    return function(action2, subscription) {
      switch (action2) {
        case SUBSCRIBE:
          return subscribe(source3, project(subscription));
        case RESET:
          reset2(source3);
          return;
        default:
          throw new Error("unrecognized action " + action2);
      }
    };
  }
  function defaultComparator(previous, next2) {
    return previous === next2;
  }
  function distinctUntilChanged(comparator) {
    if (comparator === void 0) {
      comparator = defaultComparator;
    }
    var current;
    return function(done) {
      return function(next2) {
        if (!comparator(current, next2)) {
          current = next2;
          done(next2);
        }
      };
    };
  }
  function filter5(predicate) {
    return function(done) {
      return function(value12) {
        predicate(value12) && done(value12);
      };
    };
  }
  function map39(project) {
    return function(done) {
      return compose3(done, project);
    };
  }
  function mapTo(value12) {
    return function(done) {
      return function() {
        return done(value12);
      };
    };
  }
  function scan(scanner, initial8) {
    return function(done) {
      return function(value12) {
        return done(initial8 = scanner(initial8, value12));
      };
    };
  }
  function skip(times) {
    return function(done) {
      return function(value12) {
        times > 0 ? times-- : done(value12);
      };
    };
  }
  function throttleTime(interval) {
    var currentValue;
    var timeout;
    return function(done) {
      return function(value12) {
        currentValue = value12;
        if (timeout) {
          return;
        }
        timeout = setTimeout(function() {
          timeout = void 0;
          done(currentValue);
        }, interval);
      };
    };
  }
  function debounceTime(interval) {
    var currentValue;
    var timeout;
    return function(done) {
      return function(value12) {
        currentValue = value12;
        if (timeout) {
          clearTimeout(timeout);
        }
        timeout = setTimeout(function() {
          done(currentValue);
        }, interval);
      };
    };
  }
  function withLatestFrom() {
    for (var _len3 = arguments.length, sources = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      sources[_key3] = arguments[_key3];
    }
    var values3 = new Array(sources.length);
    var called = 0;
    var pendingCall = null;
    var allCalled = Math.pow(2, sources.length) - 1;
    sources.forEach(function(source3, index6) {
      var bit = Math.pow(2, index6);
      subscribe(source3, function(value12) {
        var prevCalled = called;
        called = called | bit;
        values3[index6] = value12;
        if (prevCalled !== allCalled && called === allCalled && pendingCall) {
          pendingCall();
          pendingCall = null;
        }
      });
    });
    return function(done) {
      return function(value12) {
        var call2 = function call3() {
          return done([value12].concat(values3));
        };
        if (called === allCalled) {
          call2();
        } else {
          pendingCall = call2;
        }
      };
    };
  }
  function merge5() {
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    return function(action2, subscription) {
      switch (action2) {
        case SUBSCRIBE:
          return joinProc.apply(void 0, sources.map(function(source3) {
            return subscribe(source3, subscription);
          }));
        case RESET:
          return;
        default:
          throw new Error("unrecognized action " + action2);
      }
    };
  }
  function duc(source3, comparator) {
    if (comparator === void 0) {
      comparator = defaultComparator;
    }
    return pipe2(source3, distinctUntilChanged(comparator));
  }
  function combineLatest() {
    var innerSubject = stream();
    for (var _len2 = arguments.length, emitters = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      emitters[_key2] = arguments[_key2];
    }
    var values3 = new Array(emitters.length);
    var called = 0;
    var allCalled = Math.pow(2, emitters.length) - 1;
    emitters.forEach(function(source3, index6) {
      var bit = Math.pow(2, index6);
      subscribe(source3, function(value12) {
        values3[index6] = value12;
        called = called | bit;
        if (called === allCalled) {
          publish(innerSubject, values3);
        }
      });
    });
    return function(action2, subscription) {
      switch (action2) {
        case SUBSCRIBE:
          if (called === allCalled) {
            subscription(values3);
          }
          return subscribe(innerSubject, subscription);
        case RESET:
          return reset2(innerSubject);
        default:
          throw new Error("unrecognized action " + action2);
      }
    };
  }
  function system(constructor, dependencies, _temp) {
    if (dependencies === void 0) {
      dependencies = [];
    }
    var _ref = _temp === void 0 ? {
      singleton: true
    } : _temp, singleton11 = _ref.singleton;
    return {
      id: id3(),
      constructor,
      dependencies,
      singleton: singleton11
    };
  }
  var id3 = function id4() {
    return Symbol();
  };
  function init4(systemSpec) {
    var singletons = /* @__PURE__ */ new Map();
    var _init = function _init2(_ref2) {
      var id5 = _ref2.id, constructor = _ref2.constructor, dependencies = _ref2.dependencies, singleton11 = _ref2.singleton;
      if (singleton11 && singletons.has(id5)) {
        return singletons.get(id5);
      }
      var system2 = constructor(dependencies.map(function(e) {
        return _init2(e);
      }));
      if (singleton11) {
        singletons.set(id5, system2);
      }
      return system2;
    };
    return _init(systemSpec);
  }

  // node_modules/@virtuoso.dev/react-urx/dist/react-urx.esm.js
  function _objectWithoutPropertiesLoose(source3, excluded) {
    if (source3 == null)
      return {};
    var target6 = {};
    var sourceKeys = Object.keys(source3);
    var key, i7;
    for (i7 = 0; i7 < sourceKeys.length; i7++) {
      key = sourceKeys[i7];
      if (excluded.indexOf(key) >= 0)
        continue;
      target6[key] = source3[key];
    }
    return target6;
  }
  function _unsupportedIterableToArray(o2, minLen) {
    if (!o2)
      return;
    if (typeof o2 === "string")
      return _arrayLikeToArray(o2, minLen);
    var n2 = Object.prototype.toString.call(o2).slice(8, -1);
    if (n2 === "Object" && o2.constructor)
      n2 = o2.constructor.name;
    if (n2 === "Map" || n2 === "Set")
      return Array.from(o2);
    if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
      return _arrayLikeToArray(o2, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i7 = 0, arr2 = new Array(len); i7 < len; i7++)
      arr2[i7] = arr[i7];
    return arr2;
  }
  function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
    var it2 = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
    if (it2)
      return (it2 = it2.call(o2)).next.bind(it2);
    if (Array.isArray(o2) || (it2 = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
      if (it2)
        o2 = it2;
      var i7 = 0;
      return function() {
        if (i7 >= o2.length)
          return {
            done: true
          };
        return {
          done: false,
          value: o2[i7++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var _excluded = ["children"];
  function omit(keys4, obj) {
    var result = {};
    var index6 = {};
    var idx = 0;
    var len = keys4.length;
    while (idx < len) {
      index6[keys4[idx]] = 1;
      idx += 1;
    }
    for (var prop3 in obj) {
      if (!index6.hasOwnProperty(prop3)) {
        result[prop3] = obj[prop3];
      }
    }
    return result;
  }
  var useIsomorphicLayoutEffect2 = typeof document !== "undefined" ? import_react43.useLayoutEffect : import_react43.useEffect;
  function systemToComponent(systemSpec, map43, Root2) {
    var requiredPropNames = Object.keys(map43.required || {});
    var optionalPropNames = Object.keys(map43.optional || {});
    var methodNames = Object.keys(map43.methods || {});
    var eventNames = Object.keys(map43.events || {});
    var Context = (0, import_react43.createContext)({});
    function applyPropsToSystem(system2, props) {
      if (system2["propsReady"]) {
        publish(system2["propsReady"], false);
      }
      for (var _iterator = _createForOfIteratorHelperLoose(requiredPropNames), _step; !(_step = _iterator()).done; ) {
        var requiredPropName = _step.value;
        var stream2 = system2[map43.required[requiredPropName]];
        publish(stream2, props[requiredPropName]);
      }
      for (var _iterator2 = _createForOfIteratorHelperLoose(optionalPropNames), _step2; !(_step2 = _iterator2()).done; ) {
        var optionalPropName = _step2.value;
        if (optionalPropName in props) {
          var _stream = system2[map43.optional[optionalPropName]];
          publish(_stream, props[optionalPropName]);
        }
      }
      if (system2["propsReady"]) {
        publish(system2["propsReady"], true);
      }
    }
    function buildMethods(system2) {
      return methodNames.reduce(function(acc, methodName) {
        acc[methodName] = function(value12) {
          var stream2 = system2[map43.methods[methodName]];
          publish(stream2, value12);
        };
        return acc;
      }, {});
    }
    function buildEventHandlers(system2) {
      return eventNames.reduce(function(handlers, eventName) {
        handlers[eventName] = eventHandler(system2[map43.events[eventName]]);
        return handlers;
      }, {});
    }
    var Component = (0, import_react43.forwardRef)(function(propsWithChildren, ref) {
      var children2 = propsWithChildren.children, props = _objectWithoutPropertiesLoose(propsWithChildren, _excluded);
      var _useState = (0, import_react43.useState)(function() {
        return tap(init4(systemSpec), function(system3) {
          return applyPropsToSystem(system3, props);
        });
      }), system2 = _useState[0];
      var _useState2 = (0, import_react43.useState)(curry1to0(buildEventHandlers, system2)), handlers = _useState2[0];
      useIsomorphicLayoutEffect2(function() {
        for (var _iterator3 = _createForOfIteratorHelperLoose(eventNames), _step3; !(_step3 = _iterator3()).done; ) {
          var eventName = _step3.value;
          if (eventName in props) {
            subscribe(handlers[eventName], props[eventName]);
          }
        }
        return function() {
          Object.values(handlers).map(reset2);
        };
      }, [props, handlers, system2]);
      useIsomorphicLayoutEffect2(function() {
        applyPropsToSystem(system2, props);
      });
      (0, import_react43.useImperativeHandle)(ref, always(buildMethods(system2)));
      return (0, import_react43.createElement)(Context.Provider, {
        value: system2
      }, Root2 ? (0, import_react43.createElement)(Root2, omit([].concat(requiredPropNames, optionalPropNames, eventNames), props), children2) : children2);
    });
    var usePublisher = function usePublisher2(key) {
      return (0, import_react43.useCallback)(curry2to1(publish, (0, import_react43.useContext)(Context)[key]), [key]);
    };
    var useEmitterValue = function useEmitterValue2(key) {
      var context = (0, import_react43.useContext)(Context);
      var source3 = context[key];
      var _useState3 = (0, import_react43.useState)(curry1to0(getValue, source3)), value12 = _useState3[0], setValue12 = _useState3[1];
      useIsomorphicLayoutEffect2(function() {
        return subscribe(source3, function(next2) {
          if (next2 !== value12) {
            setValue12(always(next2));
          }
        });
      }, [source3, value12]);
      return value12;
    };
    var useEmitter = function useEmitter2(key, callback2) {
      var context = (0, import_react43.useContext)(Context);
      var source3 = context[key];
      useIsomorphicLayoutEffect2(function() {
        return subscribe(source3, callback2);
      }, [callback2, source3]);
    };
    return {
      Component,
      usePublisher,
      useEmitterValue,
      useEmitter
    };
  }

  // node_modules/react-virtuoso/dist/index.m.js
  var n = __toESM(require_react());
  var import_react44 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  function u2() {
    return u2 = Object.assign || function(t) {
      for (var e = 1; e < arguments.length; e++) {
        var n2 = arguments[e];
        for (var r2 in n2)
          Object.prototype.hasOwnProperty.call(n2, r2) && (t[r2] = n2[r2]);
      }
      return t;
    }, u2.apply(this, arguments);
  }
  function c2(t, e) {
    if (t == null)
      return {};
    var n2, r2, o2 = {}, i7 = Object.keys(t);
    for (r2 = 0; r2 < i7.length; r2++)
      e.indexOf(n2 = i7[r2]) >= 0 || (o2[n2] = t[n2]);
    return o2;
  }
  function m(t, e) {
    (e == null || e > t.length) && (e = t.length);
    for (var n2 = 0, r2 = new Array(e); n2 < e; n2++)
      r2[n2] = t[n2];
    return r2;
  }
  function d(t, e) {
    var n2 = typeof Symbol != "undefined" && t[Symbol.iterator] || t["@@iterator"];
    if (n2)
      return (n2 = n2.call(t)).next.bind(n2);
    if (Array.isArray(t) || (n2 = function(t2, e2) {
      if (t2) {
        if (typeof t2 == "string")
          return m(t2, e2);
        var n3 = Object.prototype.toString.call(t2).slice(8, -1);
        return n3 === "Object" && t2.constructor && (n3 = t2.constructor.name), n3 === "Map" || n3 === "Set" ? Array.from(t2) : n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3) ? m(t2, e2) : void 0;
      }
    }(t)) || e && t && typeof t.length == "number") {
      n2 && (t = n2);
      var r2 = 0;
      return function() {
        return r2 >= t.length ? { done: true } : { done: false, value: t[r2++] };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var f;
  var p2;
  var h = typeof document != "undefined" ? import_react44.useLayoutEffect : import_react44.useEffect;
  !function(t) {
    t[t.DEBUG = 0] = "DEBUG", t[t.INFO = 1] = "INFO", t[t.WARN = 2] = "WARN", t[t.ERROR = 3] = "ERROR";
  }(p2 || (p2 = {}));
  var g2 = ((f = {})[p2.DEBUG] = "debug", f[p2.INFO] = "log", f[p2.WARN] = "warn", f[p2.ERROR] = "error", f);
  var v = system(function() {
    var t = statefulStream(p2.ERROR);
    return { log: statefulStream(function(n2, r2, o2) {
      var i7;
      o2 === void 0 && (o2 = p2.INFO), o2 >= ((i7 = (typeof globalThis == "undefined" ? window : globalThis).VIRTUOSO_LOG_LEVEL) != null ? i7 : getValue(t)) && console[g2[o2]]("%creact-virtuoso: %c%s %o", "color: #0253b3; font-weight: bold", "color: initial", n2, r2);
    }), logLevel: t };
  }, [], { singleton: true });
  function S(t, e) {
    e === void 0 && (e = true);
    var n2 = (0, import_react44.useRef)(null), r2 = function(t2) {
    };
    if (typeof ResizeObserver != "undefined") {
      var o2 = new ResizeObserver(function(e2) {
        var n3 = e2[0].target;
        n3.offsetParent !== null && t(n3);
      });
      r2 = function(t2) {
        t2 && e ? (o2.observe(t2), n2.current = t2) : (n2.current && o2.unobserve(n2.current), n2.current = null);
      };
    }
    return { ref: n2, callbackRef: r2 };
  }
  function I(t, e) {
    return e === void 0 && (e = true), S(t, e).callbackRef;
  }
  function C(t, e, n2, r2, o2, i7, a4) {
    return S(function(n3) {
      for (var l2 = function(t2, e2, n4, r3) {
        var o3 = t2.length;
        if (o3 === 0)
          return null;
        for (var i8 = [], a5 = 0; a5 < o3; a5++) {
          var l3 = t2.item(a5);
          if (l3 && l3.dataset.index !== void 0) {
            var s4 = parseInt(l3.dataset.index), u4 = parseFloat(l3.dataset.knownSize), c3 = e2(l3, "offsetHeight");
            if (c3 === 0 && r3("Zero-sized element, this should not happen", { child: l3 }, p2.ERROR), c3 !== u4) {
              var m2 = i8[i8.length - 1];
              i8.length === 0 || m2.size !== c3 || m2.endIndex !== s4 - 1 ? i8.push({ startIndex: s4, endIndex: s4, size: c3 }) : i8[i8.length - 1].endIndex++;
            }
          }
        }
        return i8;
      }(n3.children, e, 0, o2), s3 = n3.parentElement; !s3.dataset.virtuosoScroller; )
        s3 = s3.parentElement;
      var u3 = a4 ? a4.scrollTop : s3.firstElementChild.dataset.viewportType === "window" ? window.pageYOffset || document.documentElement.scrollTop : s3.scrollTop;
      r2({ scrollTop: Math.max(u3, 0), scrollHeight: (a4 != null ? a4 : s3).scrollHeight, viewportHeight: (a4 != null ? a4 : s3).offsetHeight }), i7 == null || i7(function(t2, e2, n4) {
        return e2 === "normal" || e2.endsWith("px") || n4("row-gap was not resolved to pixel value correctly", e2, p2.WARN), e2 === "normal" ? 0 : parseInt(e2, 10);
      }(0, getComputedStyle(n3).rowGap, o2)), l2 !== null && t(l2);
    }, n2);
  }
  function T(t, e) {
    return Math.round(t.getBoundingClientRect()[e]);
  }
  function w(t, e) {
    return Math.abs(t - e) < 1.01;
  }
  function x2(t, n2, r2, l2, u3) {
    l2 === void 0 && (l2 = noop);
    var c3 = (0, import_react44.useRef)(null), m2 = (0, import_react44.useRef)(null), d2 = (0, import_react44.useRef)(null), f2 = (0, import_react44.useRef)(false), p3 = (0, import_react44.useCallback)(function(e) {
      var r3 = e.target, o2 = r3 === window || r3 === document ? window.pageYOffset || document.documentElement.scrollTop : r3.scrollTop, i7 = r3 === window ? document.documentElement.scrollHeight : r3.scrollHeight, a4 = r3 === window ? window.innerHeight : r3.offsetHeight, l3 = function() {
        t({ scrollTop: Math.max(o2, 0), scrollHeight: i7, viewportHeight: a4 });
      };
      f2.current ? (0, import_react_dom2.flushSync)(l3) : l3(), f2.current = false, m2.current !== null && (o2 === m2.current || o2 <= 0 || o2 === r3.scrollHeight - T(r3, "height")) && (m2.current = null, n2(true), d2.current && (clearTimeout(d2.current), d2.current = null));
    }, [t, n2]);
    return (0, import_react44.useEffect)(function() {
      var t2 = u3 || c3.current;
      return l2(u3 || c3.current), p3({ target: t2 }), t2.addEventListener("scroll", p3, { passive: true }), function() {
        l2(null), t2.removeEventListener("scroll", p3);
      };
    }, [c3, p3, r2, l2, u3]), { scrollerRef: c3, scrollByCallback: function(t2) {
      f2.current = true, c3.current.scrollBy(t2);
    }, scrollToCallback: function(e) {
      var r3 = c3.current;
      if (r3 && (!("offsetHeight" in r3) || r3.offsetHeight !== 0)) {
        var o2, i7, a4, l3 = e.behavior === "smooth";
        if (r3 === window ? (i7 = Math.max(T(document.documentElement, "height"), document.documentElement.scrollHeight), o2 = window.innerHeight, a4 = document.documentElement.scrollTop) : (i7 = r3.scrollHeight, o2 = T(r3, "height"), a4 = r3.scrollTop), e.top = Math.ceil(Math.max(Math.min(i7 - o2, e.top), 0)), w(o2, i7) || e.top === a4)
          return t({ scrollTop: a4, scrollHeight: i7, viewportHeight: o2 }), void (l3 && n2(true));
        l3 ? (m2.current = e.top, d2.current && clearTimeout(d2.current), d2.current = setTimeout(function() {
          d2.current = null, m2.current = null, n2(true);
        }, 1e3)) : m2.current = null, r3.scrollTo(e);
      }
    } };
  }
  var b3 = system(function() {
    var t = stream(), n2 = stream(), r2 = statefulStream(0), o2 = stream(), i7 = statefulStream(0), a4 = stream(), l2 = stream(), s3 = statefulStream(0), u3 = statefulStream(0), c3 = statefulStream(0), m2 = stream(), d2 = stream(), f2 = statefulStream(false), p3 = statefulStream(false);
    return connect(pipe2(t, map39(function(t2) {
      return t2.scrollTop;
    })), n2), connect(pipe2(t, map39(function(t2) {
      return t2.scrollHeight;
    })), l2), connect(n2, i7), { scrollContainerState: t, scrollTop: n2, viewportHeight: a4, headerHeight: s3, fixedHeaderHeight: u3, footerHeight: c3, scrollHeight: l2, smoothScrollTargetReached: o2, react18ConcurrentRendering: p3, scrollTo: m2, scrollBy: d2, statefulScrollTop: i7, deviation: r2, scrollingInProgress: f2 };
  }, [], { singleton: true });
  var y = { lvl: 0 };
  function E(t, e, n2, r2, o2) {
    return r2 === void 0 && (r2 = y), o2 === void 0 && (o2 = y), { k: t, v: e, lvl: n2, l: r2, r: o2 };
  }
  function H(t) {
    return t === y;
  }
  function R() {
    return y;
  }
  function L(t, e) {
    if (H(t))
      return y;
    var n2 = t.k, r2 = t.l, o2 = t.r;
    if (e === n2) {
      if (H(r2))
        return o2;
      if (H(o2))
        return r2;
      var i7 = P(r2);
      return U(M(t, { k: i7[0], v: i7[1], l: O(r2) }));
    }
    return U(M(t, e < n2 ? { l: L(r2, e) } : { r: L(o2, e) }));
  }
  function k(t, e, n2) {
    if (n2 === void 0 && (n2 = "k"), H(t))
      return [-Infinity, void 0];
    if (t[n2] === e)
      return [t.k, t.v];
    if (t[n2] < e) {
      var r2 = k(t.r, e, n2);
      return r2[0] === -Infinity ? [t.k, t.v] : r2;
    }
    return k(t.l, e, n2);
  }
  function z(t, e, n2) {
    return H(t) ? E(e, n2, 1) : e === t.k ? M(t, { k: e, v: n2 }) : function(t2) {
      return N(D(t2));
    }(M(t, e < t.k ? { l: z(t.l, e, n2) } : { r: z(t.r, e, n2) }));
  }
  function B(t, e, n2) {
    if (H(t))
      return [];
    var r2 = t.k, o2 = t.v, i7 = t.r, a4 = [];
    return r2 > e && (a4 = a4.concat(B(t.l, e, n2))), r2 >= e && r2 <= n2 && a4.push({ k: r2, v: o2 }), r2 <= n2 && (a4 = a4.concat(B(i7, e, n2))), a4;
  }
  function F(t) {
    return H(t) ? [] : [].concat(F(t.l), [{ k: t.k, v: t.v }], F(t.r));
  }
  function P(t) {
    return H(t.r) ? [t.k, t.v] : P(t.r);
  }
  function O(t) {
    return H(t.r) ? t.l : U(M(t, { r: O(t.r) }));
  }
  function M(t, e) {
    return E(e.k !== void 0 ? e.k : t.k, e.v !== void 0 ? e.v : t.v, e.lvl !== void 0 ? e.lvl : t.lvl, e.l !== void 0 ? e.l : t.l, e.r !== void 0 ? e.r : t.r);
  }
  function V(t) {
    return H(t) || t.lvl > t.r.lvl;
  }
  function U(t) {
    var e = t.l, n2 = t.r, r2 = t.lvl;
    if (n2.lvl >= r2 - 1 && e.lvl >= r2 - 1)
      return t;
    if (r2 > n2.lvl + 1) {
      if (V(e))
        return D(M(t, { lvl: r2 - 1 }));
      if (H(e) || H(e.r))
        throw new Error("Unexpected empty nodes");
      return M(e.r, { l: M(e, { r: e.r.l }), r: M(t, { l: e.r.r, lvl: r2 - 1 }), lvl: r2 });
    }
    if (V(t))
      return N(M(t, { lvl: r2 - 1 }));
    if (H(n2) || H(n2.l))
      throw new Error("Unexpected empty nodes");
    var o2 = n2.l, i7 = V(o2) ? n2.lvl - 1 : n2.lvl;
    return M(o2, { l: M(t, { r: o2.l, lvl: r2 - 1 }), r: N(M(n2, { l: o2.r, lvl: i7 })), lvl: o2.lvl + 1 });
  }
  function A(t, e, n2) {
    return H(t) ? [] : W(B(t, k(t, e)[0], n2), function(t2) {
      return { index: t2.k, value: t2.v };
    });
  }
  function W(t, e) {
    var n2 = t.length;
    if (n2 === 0)
      return [];
    for (var r2 = e(t[0]), o2 = r2.index, i7 = r2.value, a4 = [], l2 = 1; l2 < n2; l2++) {
      var s3 = e(t[l2]), u3 = s3.index, c3 = s3.value;
      a4.push({ start: o2, end: u3 - 1, value: i7 }), o2 = u3, i7 = c3;
    }
    return a4.push({ start: o2, end: Infinity, value: i7 }), a4;
  }
  function N(t) {
    var e = t.r, n2 = t.lvl;
    return H(e) || H(e.r) || e.lvl !== n2 || e.r.lvl !== n2 ? t : M(e, { l: M(t, { r: e.l }), lvl: n2 + 1 });
  }
  function D(t) {
    var e = t.l;
    return H(e) || e.lvl !== t.lvl ? t : M(e, { r: M(t, { l: e.r }) });
  }
  function G(t, e, n2, r2) {
    r2 === void 0 && (r2 = 0);
    for (var o2 = t.length - 1; r2 <= o2; ) {
      var i7 = Math.floor((r2 + o2) / 2), a4 = n2(t[i7], e);
      if (a4 === 0)
        return i7;
      if (a4 === -1) {
        if (o2 - r2 < 2)
          return i7 - 1;
        o2 = i7 - 1;
      } else {
        if (o2 === r2)
          return i7;
        r2 = i7 + 1;
      }
    }
    throw new Error("Failed binary finding record in array - " + t.join(",") + ", searched for " + e);
  }
  function _(t, e, n2) {
    return t[G(t, e, n2)];
  }
  var j = system(function() {
    return { recalcInProgress: statefulStream(false) };
  }, [], { singleton: true });
  function K(t) {
    var e = t.size, n2 = t.startIndex, r2 = t.endIndex;
    return function(t2) {
      return t2.start === n2 && (t2.end === r2 || t2.end === Infinity) && t2.value === e;
    };
  }
  function Y(t, e) {
    var n2 = t.index;
    return e === n2 ? 0 : e < n2 ? -1 : 1;
  }
  function q2(t, e) {
    var n2 = t.offset;
    return e === n2 ? 0 : e < n2 ? -1 : 1;
  }
  function Z(t) {
    return { index: t.index, value: t };
  }
  function J(t, e, n2, r2) {
    var o2 = t, i7 = 0, a4 = 0, l2 = 0, s3 = 0;
    if (e !== 0) {
      l2 = o2[s3 = G(o2, e - 1, Y)].offset;
      var u3 = k(n2, e - 1);
      i7 = u3[0], a4 = u3[1], o2.length && o2[s3].size === k(n2, e)[1] && (s3 -= 1), o2 = o2.slice(0, s3 + 1);
    } else
      o2 = [];
    for (var c3, m2 = d(A(n2, e, Infinity)); !(c3 = m2()).done; ) {
      var f2 = c3.value, p3 = f2.start, h7 = f2.value, g3 = p3 - i7, v2 = g3 * a4 + l2 + g3 * r2;
      o2.push({ offset: v2, size: h7, index: p3 }), i7 = p3, l2 = v2, a4 = h7;
    }
    return { offsetTree: o2, lastIndex: i7, lastOffset: l2, lastSize: a4 };
  }
  function $(t, e) {
    var n2 = e[0], r2 = e[1], o2 = e[3];
    n2.length > 0 && (0, e[2])("received item sizes", n2, p2.DEBUG);
    var i7 = t.sizeTree, a4 = i7, l2 = 0;
    if (r2.length > 0 && H(i7) && n2.length === 2) {
      var s3 = n2[0].size, u3 = n2[1].size;
      a4 = r2.reduce(function(t2, e2) {
        return z(z(t2, e2, s3), e2 + 1, u3);
      }, a4);
    } else {
      var c3 = function(t2, e2) {
        for (var n3, r3 = H(t2) ? 0 : Infinity, o3 = d(e2); !(n3 = o3()).done; ) {
          var i8 = n3.value, a5 = i8.size, l3 = i8.startIndex, s4 = i8.endIndex;
          if (r3 = Math.min(r3, l3), H(t2))
            t2 = z(t2, 0, a5);
          else {
            var u4 = A(t2, l3 - 1, s4 + 1);
            if (!u4.some(K(i8))) {
              for (var c4, m3 = false, f3 = false, p3 = d(u4); !(c4 = p3()).done; ) {
                var h7 = c4.value, g3 = h7.start, v2 = h7.end, S2 = h7.value;
                m3 ? (s4 >= g3 || a5 === S2) && (t2 = L(t2, g3)) : (f3 = S2 !== a5, m3 = true), v2 > s4 && s4 >= g3 && S2 !== a5 && (t2 = z(t2, s4 + 1, S2));
              }
              f3 && (t2 = z(t2, l3, a5));
            }
          }
        }
        return [t2, r3];
      }(a4, n2);
      a4 = c3[0], l2 = c3[1];
    }
    if (a4 === i7)
      return t;
    var m2 = J(t.offsetTree, l2, a4, o2), f2 = m2.offsetTree;
    return { sizeTree: a4, offsetTree: f2, lastIndex: m2.lastIndex, lastOffset: m2.lastOffset, lastSize: m2.lastSize, groupOffsetTree: r2.reduce(function(t2, e2) {
      return z(t2, e2, Q(e2, f2, o2));
    }, R()), groupIndices: r2 };
  }
  function Q(t, e, n2) {
    if (e.length === 0)
      return 0;
    var r2 = _(e, t, Y), o2 = t - r2.index, i7 = r2.size * o2 + (o2 - 1) * n2 + r2.offset;
    return i7 > 0 ? i7 + n2 : i7;
  }
  function X(t, e, n2) {
    if (function(t2) {
      return t2.groupIndex !== void 0;
    }(t))
      return e.groupIndices[t.groupIndex] + 1;
    var r2 = tt2(t.index === "LAST" ? n2 : t.index, e);
    return Math.max(0, r2, Math.min(n2, r2));
  }
  function tt2(t, e) {
    if (!et(e))
      return t;
    for (var n2 = 0; e.groupIndices[n2] <= t + n2; )
      n2++;
    return t + n2;
  }
  function et(t) {
    return !H(t.groupOffsetTree);
  }
  var nt = { offsetHeight: "height", offsetWidth: "width" };
  var rt2 = system(function(t) {
    var n2 = t[0].log, r2 = t[1].recalcInProgress, o2 = stream(), i7 = stream(), a4 = statefulStreamFromEmitter(i7, 0), l2 = stream(), s3 = stream(), c3 = statefulStream(0), m2 = statefulStream([]), d2 = statefulStream(void 0), f2 = statefulStream(void 0), h7 = statefulStream(function(t2, e) {
      return T(t2, nt[e]);
    }), g3 = statefulStream(void 0), v2 = statefulStream(0), S2 = { offsetTree: [], sizeTree: R(), groupOffsetTree: R(), lastIndex: 0, lastOffset: 0, lastSize: 0, groupIndices: [] }, I2 = statefulStreamFromEmitter(pipe2(o2, withLatestFrom(m2, n2, v2), scan($, S2), distinctUntilChanged()), S2);
    connect(pipe2(m2, filter5(function(t2) {
      return t2.length > 0;
    }), withLatestFrom(I2, v2), map39(function(t2) {
      var e = t2[0], n3 = t2[1], r3 = t2[2], o3 = e.reduce(function(t3, e2, o4) {
        return z(t3, e2, Q(e2, n3.offsetTree, r3) || o4);
      }, R());
      return u2({}, n3, { groupIndices: e, groupOffsetTree: o3 });
    })), I2), connect(pipe2(i7, withLatestFrom(I2), filter5(function(t2) {
      return t2[0] < t2[1].lastIndex;
    }), map39(function(t2) {
      var e = t2[1];
      return [{ startIndex: t2[0], endIndex: e.lastIndex, size: e.lastSize }];
    })), o2), connect(d2, f2);
    var C2 = statefulStreamFromEmitter(pipe2(d2, map39(function(t2) {
      return t2 === void 0;
    })), true);
    connect(pipe2(f2, filter5(function(t2) {
      return t2 !== void 0 && H(getValue(I2).sizeTree);
    }), map39(function(t2) {
      return [{ startIndex: 0, endIndex: 0, size: t2 }];
    })), o2);
    var w2 = streamFromEmitter(pipe2(o2, withLatestFrom(I2), scan(function(t2, e) {
      var n3 = e[1];
      return { changed: n3 !== t2.sizes, sizes: n3 };
    }, { changed: false, sizes: S2 }), map39(function(t2) {
      return t2.changed;
    })));
    subscribe(pipe2(c3, scan(function(t2, e) {
      return { diff: t2.prev - e, prev: e };
    }, { diff: 0, prev: 0 }), map39(function(t2) {
      return t2.diff;
    })), function(t2) {
      t2 > 0 ? (publish(r2, true), publish(l2, t2)) : t2 < 0 && publish(s3, t2);
    }), subscribe(pipe2(c3, withLatestFrom(n2)), function(t2) {
      t2[0] < 0 && (0, t2[1])("`firstItemIndex` prop should not be set to less than zero. If you don't know the total count, just use a very high value", { firstItemIndex: c3 }, p2.ERROR);
    });
    var x3 = streamFromEmitter(l2);
    connect(pipe2(l2, withLatestFrom(I2), map39(function(t2) {
      var e = t2[0], n3 = t2[1];
      if (n3.groupIndices.length > 0)
        throw new Error("Virtuoso: prepending items does not work with groups");
      return F(n3.sizeTree).reduce(function(t3, n4) {
        var r3 = n4.k, o3 = n4.v;
        return { ranges: [].concat(t3.ranges, [{ startIndex: t3.prevIndex, endIndex: r3 + e - 1, size: t3.prevSize }]), prevIndex: r3 + e, prevSize: o3 };
      }, { ranges: [], prevIndex: 0, prevSize: n3.lastSize }).ranges;
    })), o2);
    var b4 = streamFromEmitter(pipe2(s3, withLatestFrom(I2, v2), map39(function(t2) {
      return Q(-t2[0], t2[1].offsetTree, t2[2]);
    })));
    return connect(pipe2(s3, withLatestFrom(I2, v2), map39(function(t2) {
      var e = t2[0], n3 = t2[1], r3 = t2[2];
      if (n3.groupIndices.length > 0)
        throw new Error("Virtuoso: shifting items does not work with groups");
      var o3 = F(n3.sizeTree).reduce(function(t3, n4) {
        var r4 = n4.v;
        return z(t3, Math.max(0, n4.k + e), r4);
      }, R());
      return u2({}, n3, { sizeTree: o3 }, J(n3.offsetTree, 0, o3, r3));
    })), I2), { data: g3, totalCount: i7, sizeRanges: o2, groupIndices: m2, defaultItemSize: f2, fixedItemSize: d2, unshiftWith: l2, shiftWith: s3, shiftWithOffset: b4, beforeUnshiftWith: x3, firstItemIndex: c3, gap: v2, sizes: I2, listRefresh: w2, statefulTotalCount: a4, trackItemSizes: C2, itemSize: h7 };
  }, tup(v, j), { singleton: true });
  var ot = typeof document != "undefined" && "scrollBehavior" in document.documentElement.style;
  function it(t) {
    var e = typeof t == "number" ? { index: t } : t;
    return e.align || (e.align = "start"), e.behavior && ot || (e.behavior = "auto"), e.offset || (e.offset = 0), e;
  }
  var at = system(function(t) {
    var n2 = t[0], r2 = n2.sizes, o2 = n2.totalCount, i7 = n2.listRefresh, a4 = n2.gap, l2 = t[1], s3 = l2.scrollingInProgress, u3 = l2.viewportHeight, c3 = l2.scrollTo, m2 = l2.smoothScrollTargetReached, d2 = l2.headerHeight, f2 = l2.footerHeight, h7 = t[2].log, g3 = stream(), v2 = statefulStream(0), S2 = null, I2 = null, C2 = null;
    function T2() {
      S2 && (S2(), S2 = null), C2 && (C2(), C2 = null), I2 && (clearTimeout(I2), I2 = null), publish(s3, false);
    }
    return connect(pipe2(g3, withLatestFrom(r2, u3, o2, v2, d2, f2, h7), withLatestFrom(a4), map39(function(t2) {
      var n3 = t2[0], r3 = n3[0], o3 = n3[1], a5 = n3[2], l3 = n3[3], u4 = n3[4], c4 = n3[5], d3 = n3[6], f3 = n3[7], h8 = t2[1], v3 = it(r3), w2 = v3.align, x3 = v3.behavior, b4 = v3.offset, y2 = l3 - 1, E2 = X(v3, o3, y2), H2 = Q(E2, o3.offsetTree, h8) + c4;
      w2 === "end" ? (H2 = H2 - a5 + k(o3.sizeTree, E2)[1], E2 === y2 && (H2 += d3)) : w2 === "center" ? H2 = H2 - a5 / 2 + k(o3.sizeTree, E2)[1] / 2 : H2 -= u4, b4 && (H2 += b4);
      var R2 = function(t3) {
        T2(), t3 ? (f3("retrying to scroll to", { location: r3 }, p2.DEBUG), publish(g3, r3)) : f3("list did not change, scroll successful", {}, p2.DEBUG);
      };
      if (T2(), x3 === "smooth") {
        var L2 = false;
        C2 = subscribe(i7, function(t3) {
          L2 = L2 || t3;
        }), S2 = handleNext(m2, function() {
          R2(L2);
        });
      } else
        S2 = handleNext(pipe2(i7, function(t3) {
          var e = setTimeout(function() {
            t3(false);
          }, 150);
          return function(n4) {
            n4 && (t3(true), clearTimeout(e));
          };
        }), R2);
      return I2 = setTimeout(function() {
        T2();
      }, 1200), publish(s3, true), f3("scrolling from index to", { index: E2, top: H2, behavior: x3 }, p2.DEBUG), { top: H2, behavior: x3 };
    })), c3), { scrollToIndex: g3, topListHeight: v2 };
  }, tup(rt2, b3, v), { singleton: true });
  var lt = "up";
  var st = { atBottom: false, notAtBottomBecause: "NOT_SHOWING_LAST_ITEM", state: { offsetBottom: 0, scrollTop: 0, viewportHeight: 0, scrollHeight: 0 } };
  var ut = system(function(t) {
    var n2 = t[0], r2 = n2.scrollContainerState, o2 = n2.scrollTop, i7 = n2.viewportHeight, a4 = n2.headerHeight, l2 = n2.footerHeight, s3 = n2.scrollBy, u3 = statefulStream(false), c3 = statefulStream(true), m2 = stream(), d2 = stream(), f2 = statefulStream(4), p3 = statefulStream(0), h7 = statefulStreamFromEmitter(pipe2(merge5(pipe2(duc(o2), skip(1), mapTo(true)), pipe2(duc(o2), skip(1), mapTo(false), debounceTime(100))), distinctUntilChanged()), false), g3 = statefulStreamFromEmitter(pipe2(merge5(pipe2(s3, mapTo(true)), pipe2(s3, mapTo(false), debounceTime(200))), distinctUntilChanged()), false);
    connect(pipe2(combineLatest(duc(o2), duc(p3)), map39(function(t2) {
      return t2[0] <= t2[1];
    }), distinctUntilChanged()), c3), connect(pipe2(c3, throttleTime(50)), d2);
    var v2 = streamFromEmitter(pipe2(combineLatest(r2, duc(i7), duc(a4), duc(l2), duc(f2)), scan(function(t2, e) {
      var n3, r3, o3 = e[0], i8 = o3.scrollTop, a5 = o3.scrollHeight, l3 = e[1], s4 = { viewportHeight: l3, scrollTop: i8, scrollHeight: a5 };
      return i8 + l3 - a5 > -e[4] ? (i8 > t2.state.scrollTop ? (n3 = "SCROLLED_DOWN", r3 = t2.state.scrollTop - i8) : (n3 = "SIZE_DECREASED", r3 = t2.state.scrollTop - i8 || t2.scrollTopDelta), { atBottom: true, state: s4, atBottomBecause: n3, scrollTopDelta: r3 }) : { atBottom: false, notAtBottomBecause: s4.scrollHeight > t2.state.scrollHeight ? "SIZE_INCREASED" : l3 < t2.state.viewportHeight ? "VIEWPORT_HEIGHT_DECREASING" : i8 < t2.state.scrollTop ? "SCROLLING_UPWARDS" : "NOT_FULLY_SCROLLED_TO_LAST_ITEM_BOTTOM", state: s4 };
    }, st), distinctUntilChanged(function(t2, e) {
      return t2 && t2.atBottom === e.atBottom;
    }))), S2 = statefulStreamFromEmitter(pipe2(r2, scan(function(t2, e) {
      var n3 = e.scrollTop, r3 = e.scrollHeight, o3 = e.viewportHeight;
      return w(t2.scrollHeight, r3) ? { scrollTop: n3, scrollHeight: r3, jump: 0, changed: false } : t2.scrollTop !== n3 && r3 - (n3 + o3) < 1 ? { scrollHeight: r3, scrollTop: n3, jump: t2.scrollTop - n3, changed: true } : { scrollHeight: r3, scrollTop: n3, jump: 0, changed: true };
    }, { scrollHeight: 0, jump: 0, scrollTop: 0, changed: false }), filter5(function(t2) {
      return t2.changed;
    }), map39(function(t2) {
      return t2.jump;
    })), 0);
    connect(pipe2(v2, map39(function(t2) {
      return t2.atBottom;
    })), u3), connect(pipe2(u3, throttleTime(50)), m2);
    var I2 = statefulStream("down");
    connect(pipe2(r2, map39(function(t2) {
      return t2.scrollTop;
    }), distinctUntilChanged(), scan(function(t2, n3) {
      return getValue(g3) ? { direction: t2.direction, prevScrollTop: n3 } : { direction: n3 < t2.prevScrollTop ? lt : "down", prevScrollTop: n3 };
    }, { direction: "down", prevScrollTop: 0 }), map39(function(t2) {
      return t2.direction;
    })), I2), connect(pipe2(r2, throttleTime(50), mapTo("none")), I2);
    var C2 = statefulStream(0);
    return connect(pipe2(h7, filter5(function(t2) {
      return !t2;
    }), mapTo(0)), C2), connect(pipe2(o2, throttleTime(100), withLatestFrom(h7), filter5(function(t2) {
      return !!t2[1];
    }), scan(function(t2, e) {
      return [t2[1], e[0]];
    }, [0, 0]), map39(function(t2) {
      return t2[1] - t2[0];
    })), C2), { isScrolling: h7, isAtTop: c3, isAtBottom: u3, atBottomState: v2, atTopStateChange: d2, atBottomStateChange: m2, scrollDirection: I2, atBottomThreshold: f2, atTopThreshold: p3, scrollVelocity: C2, lastJumpDueToItemResize: S2 };
  }, tup(b3));
  var ct = system(function(t) {
    var n2 = t[0].log, r2 = statefulStream(false), o2 = streamFromEmitter(pipe2(r2, filter5(function(t2) {
      return t2;
    }), distinctUntilChanged()));
    return subscribe(r2, function(t2) {
      t2 && getValue(n2)("props updated", {}, p2.DEBUG);
    }), { propsReady: r2, didMount: o2 };
  }, tup(v), { singleton: true });
  var mt = system(function(t) {
    var n2 = t[0], r2 = n2.sizes, o2 = n2.listRefresh, i7 = n2.defaultItemSize, a4 = t[1].scrollTop, l2 = t[2].scrollToIndex, s3 = t[3].didMount, u3 = statefulStream(true), c3 = statefulStream(0);
    return connect(pipe2(s3, withLatestFrom(c3), filter5(function(t2) {
      return !!t2[1];
    }), mapTo(false)), u3), subscribe(pipe2(combineLatest(o2, s3), withLatestFrom(u3, r2, i7), filter5(function(t2) {
      var e = t2[1], n3 = t2[3];
      return t2[0][1] && (!H(t2[2].sizeTree) || n3 !== void 0) && !e;
    }), withLatestFrom(c3)), function(t2) {
      var n3 = t2[1];
      setTimeout(function() {
        handleNext(a4, function() {
          publish(u3, true);
        }), publish(l2, n3);
      });
    }), { scrolledToInitialItem: u3, initialTopMostItemIndex: c3 };
  }, tup(rt2, b3, at, ct), { singleton: true });
  function dt2(t) {
    return !!t && (t === "smooth" ? "smooth" : "auto");
  }
  var ft = system(function(t) {
    var n2 = t[0], r2 = n2.totalCount, o2 = n2.listRefresh, i7 = t[1], a4 = i7.isAtBottom, l2 = i7.atBottomState, s3 = t[2].scrollToIndex, u3 = t[3].scrolledToInitialItem, c3 = t[4], m2 = c3.propsReady, d2 = c3.didMount, f2 = t[5].log, h7 = t[6].scrollingInProgress, g3 = statefulStream(false), v2 = stream(), S2 = null;
    function I2(t2) {
      publish(s3, { index: "LAST", align: "end", behavior: t2 });
    }
    function C2(t2) {
      var n3 = handleNext(l2, function(n4) {
        !t2 || n4.atBottom || n4.notAtBottomBecause !== "SIZE_INCREASED" || S2 || (getValue(f2)("scrolling to bottom due to increased size", {}, p2.DEBUG), I2("auto"));
      });
      setTimeout(n3, 100);
    }
    return subscribe(pipe2(combineLatest(pipe2(duc(r2), skip(1)), d2), withLatestFrom(duc(g3), a4, u3, h7), map39(function(t2) {
      var e = t2[0], n3 = e[0], r3 = e[1] && t2[3], o3 = "auto";
      return r3 && (o3 = function(t3, e2) {
        return typeof t3 == "function" ? dt2(t3(e2)) : e2 && dt2(t3);
      }(t2[1], t2[2] || t2[4]), r3 = r3 && !!o3), { totalCount: n3, shouldFollow: r3, followOutputBehavior: o3 };
    }), filter5(function(t2) {
      return t2.shouldFollow;
    })), function(t2) {
      var n3 = t2.totalCount, r3 = t2.followOutputBehavior;
      S2 && (S2(), S2 = null), S2 = handleNext(o2, function() {
        getValue(f2)("following output to ", { totalCount: n3 }, p2.DEBUG), I2(r3), S2 = null;
      });
    }), subscribe(pipe2(combineLatest(duc(g3), r2, m2), filter5(function(t2) {
      return t2[0] && t2[2];
    }), scan(function(t2, e) {
      var n3 = e[1];
      return { refreshed: t2.value === n3, value: n3 };
    }, { refreshed: false, value: 0 }), filter5(function(t2) {
      return t2.refreshed;
    }), withLatestFrom(g3, r2)), function(t2) {
      C2(t2[1] !== false);
    }), subscribe(v2, function() {
      C2(getValue(g3) !== false);
    }), subscribe(combineLatest(duc(g3), l2), function(t2) {
      var e = t2[1];
      t2[0] && !e.atBottom && e.notAtBottomBecause === "VIEWPORT_HEIGHT_DECREASING" && I2("auto");
    }), { followOutput: g3, autoscrollToBottom: v2 };
  }, tup(rt2, ut, at, mt, ct, v, b3));
  function pt(t) {
    return t.reduce(function(t2, e) {
      return t2.groupIndices.push(t2.totalCount), t2.totalCount += e + 1, t2;
    }, { totalCount: 0, groupIndices: [] });
  }
  var ht = system(function(t) {
    var n2 = t[0], r2 = n2.totalCount, o2 = n2.groupIndices, i7 = n2.sizes, a4 = t[1], l2 = a4.scrollTop, s3 = a4.headerHeight, u3 = stream(), c3 = stream(), m2 = streamFromEmitter(pipe2(u3, map39(pt)));
    return connect(pipe2(m2, map39(function(t2) {
      return t2.totalCount;
    })), r2), connect(pipe2(m2, map39(function(t2) {
      return t2.groupIndices;
    })), o2), connect(pipe2(combineLatest(l2, i7, s3), filter5(function(t2) {
      return et(t2[1]);
    }), map39(function(t2) {
      return k(t2[1].groupOffsetTree, Math.max(t2[0] - t2[2], 0), "v")[0];
    }), distinctUntilChanged(), map39(function(t2) {
      return [t2];
    })), c3), { groupCounts: u3, topItemsIndexes: c3 };
  }, tup(rt2, b3));
  function gt(t, e) {
    return !(!t || t[0] !== e[0] || t[1] !== e[1]);
  }
  function vt(t, e) {
    return !(!t || t.startIndex !== e.startIndex || t.endIndex !== e.endIndex);
  }
  function St(t, e, n2) {
    return typeof t == "number" ? n2 === lt && e === "top" || n2 === "down" && e === "bottom" ? t : 0 : n2 === lt ? e === "top" ? t.main : t.reverse : e === "bottom" ? t.main : t.reverse;
  }
  function It(t, e) {
    return typeof t == "number" ? t : t[e] || 0;
  }
  var Ct = system(function(t) {
    var n2 = t[0], r2 = n2.scrollTop, o2 = n2.viewportHeight, i7 = n2.deviation, a4 = n2.headerHeight, l2 = n2.fixedHeaderHeight, s3 = stream(), u3 = statefulStream(0), c3 = statefulStream(0), m2 = statefulStream(0), d2 = statefulStreamFromEmitter(pipe2(combineLatest(duc(r2), duc(o2), duc(a4), duc(s3, gt), duc(m2), duc(u3), duc(l2), duc(i7), duc(c3)), map39(function(t2) {
      var e = t2[0], n3 = t2[1], r3 = t2[2], o3 = t2[3], i8 = o3[0], a5 = o3[1], l3 = t2[4], s4 = t2[6], u4 = t2[7], c4 = t2[8], m3 = e - u4, d3 = t2[5] + s4, f2 = Math.max(r3 - m3, 0), p3 = "none", h7 = It(c4, "top"), g3 = It(c4, "bottom");
      return i8 -= u4, a5 += r3 + s4, (i8 += r3 + s4) > e + d3 - h7 && (p3 = lt), (a5 -= u4) < e - f2 + n3 + g3 && (p3 = "down"), p3 !== "none" ? [Math.max(m3 - r3 - St(l3, "top", p3) - h7, 0), m3 - f2 - s4 + n3 + St(l3, "bottom", p3) + g3] : null;
    }), filter5(function(t2) {
      return t2 != null;
    }), distinctUntilChanged(gt)), [0, 0]);
    return { listBoundary: s3, overscan: m2, topListHeight: u3, increaseViewportBy: c3, visibleRange: d2 };
  }, tup(b3), { singleton: true });
  var Tt = { items: [], topItems: [], offsetTop: 0, offsetBottom: 0, top: 0, bottom: 0, topListHeight: 0, totalCount: 0, firstItemIndex: 0 };
  function wt(t, e, n2) {
    if (t.length === 0)
      return [];
    if (!et(e))
      return t.map(function(t2) {
        return u2({}, t2, { index: t2.index + n2, originalIndex: t2.index });
      });
    for (var r2, o2 = [], i7 = A(e.groupOffsetTree, t[0].index, t[t.length - 1].index), a4 = void 0, l2 = 0, s3 = d(t); !(r2 = s3()).done; ) {
      var c3 = r2.value;
      (!a4 || a4.end < c3.index) && (a4 = i7.shift(), l2 = e.groupIndices.indexOf(a4.start)), o2.push(u2({}, c3.index === a4.start ? { type: "group", index: l2 } : { index: c3.index - (l2 + 1) + n2, groupIndex: l2 }, { size: c3.size, offset: c3.offset, originalIndex: c3.index, data: c3.data }));
    }
    return o2;
  }
  function xt(t, e, n2, r2, o2, i7) {
    var a4 = 0, l2 = 0;
    if (t.length > 0) {
      a4 = t[0].offset;
      var s3 = t[t.length - 1];
      l2 = s3.offset + s3.size;
    }
    var u3 = n2 - o2.lastIndex, c3 = a4, m2 = o2.lastOffset + u3 * o2.lastSize + (u3 - 1) * r2 - l2;
    return { items: wt(t, o2, i7), topItems: wt(e, o2, i7), topListHeight: e.reduce(function(t2, e2) {
      return e2.size + t2;
    }, 0), offsetTop: a4, offsetBottom: m2, top: c3, bottom: l2, totalCount: n2, firstItemIndex: i7 };
  }
  var bt = system(function(t) {
    var n2 = t[0], r2 = n2.sizes, o2 = n2.totalCount, i7 = n2.data, a4 = n2.firstItemIndex, l2 = n2.gap, s3 = t[1], c3 = t[2], m2 = c3.visibleRange, f2 = c3.listBoundary, p3 = c3.topListHeight, h7 = t[3], g3 = h7.scrolledToInitialItem, v2 = h7.initialTopMostItemIndex, S2 = t[4].topListHeight, I2 = t[5], C2 = t[6].didMount, T2 = t[7].recalcInProgress, w2 = statefulStream([]), x3 = stream();
    connect(s3.topItemsIndexes, w2);
    var b4 = statefulStreamFromEmitter(pipe2(combineLatest(C2, T2, duc(m2, gt), duc(o2), duc(r2), duc(v2), g3, duc(w2), duc(a4), duc(l2), i7), filter5(function(t2) {
      return t2[0] && !t2[1];
    }), map39(function(t2) {
      var n3 = t2[2], r3 = n3[0], o3 = n3[1], i8 = t2[3], a5 = t2[5], l3 = t2[6], s4 = t2[7], u3 = t2[8], c4 = t2[9], m3 = t2[10], f3 = t2[4], p4 = f3.sizeTree, h8 = f3.offsetTree;
      if (i8 === 0 || r3 === 0 && o3 === 0)
        return Tt;
      if (H(p4))
        return xt(function(t3, e, n4) {
          if (et(e)) {
            var r4 = tt2(t3, e);
            return [{ index: k(e.groupOffsetTree, r4)[0], size: 0, offset: 0 }, { index: r4, size: 0, offset: 0, data: n4 && n4[0] }];
          }
          return [{ index: t3, size: 0, offset: 0, data: n4 && n4[0] }];
        }(function(t3, e) {
          return typeof t3 == "number" ? t3 : t3.index === "LAST" ? e - 1 : t3.index;
        }(a5, i8), f3, m3), [], i8, c4, f3, u3);
      var g4 = [];
      if (s4.length > 0)
        for (var v3, S3 = s4[0], I3 = s4[s4.length - 1], C3 = 0, T3 = d(A(p4, S3, I3)); !(v3 = T3()).done; )
          for (var w3 = v3.value, x4 = w3.value, b5 = Math.max(w3.start, S3), y2 = Math.min(w3.end, I3), E2 = b5; E2 <= y2; E2++)
            g4.push({ index: E2, size: x4, offset: C3, data: m3 && m3[E2] }), C3 += x4;
      if (!l3)
        return xt([], g4, i8, c4, f3, u3);
      var R2 = s4.length > 0 ? s4[s4.length - 1] + 1 : 0, L2 = function(t3, e, n4, r4) {
        return r4 === void 0 && (r4 = 0), r4 > 0 && (e = Math.max(e, _(t3, r4, Y).offset)), W((i9 = n4, l4 = G(o4 = t3, e, a6 = q2), s5 = G(o4, i9, a6, l4), o4.slice(l4, s5 + 1)), Z);
        var o4, i9, a6, l4, s5;
      }(h8, r3, o3, R2);
      if (L2.length === 0)
        return null;
      var z2 = i8 - 1;
      return xt(tap([], function(t3) {
        for (var e, n4 = d(L2); !(e = n4()).done; ) {
          var i9 = e.value, a6 = i9.value, l4 = a6.offset, s5 = i9.start, u4 = a6.size;
          if (a6.offset < r3) {
            var f4 = (s5 += Math.floor((r3 - a6.offset + c4) / (u4 + c4))) - i9.start;
            l4 += f4 * u4 + f4 * c4;
          }
          s5 < R2 && (l4 += (R2 - s5) * u4, s5 = R2);
          for (var p5 = Math.min(i9.end, z2), h9 = s5; h9 <= p5 && !(l4 >= o3); h9++)
            t3.push({ index: h9, size: u4, offset: l4, data: m3 && m3[h9] }), l4 += u4 + c4;
        }
      }), g4, i8, c4, f3, u3);
    }), filter5(function(t2) {
      return t2 !== null;
    }), distinctUntilChanged()), Tt);
    return connect(pipe2(i7, filter5(function(t2) {
      return t2 !== void 0;
    }), map39(function(t2) {
      return t2.length;
    })), o2), connect(pipe2(b4, map39(function(t2) {
      return t2.topListHeight;
    })), S2), connect(S2, p3), connect(pipe2(b4, map39(function(t2) {
      return [t2.top, t2.bottom];
    })), f2), connect(pipe2(b4, map39(function(t2) {
      return t2.items;
    })), x3), u2({ listState: b4, topItemsIndexes: w2, endReached: streamFromEmitter(pipe2(b4, filter5(function(t2) {
      return t2.items.length > 0;
    }), withLatestFrom(o2, i7), filter5(function(t2) {
      var e = t2[0].items;
      return e[e.length - 1].originalIndex === t2[1] - 1;
    }), map39(function(t2) {
      return [t2[1] - 1, t2[2]];
    }), distinctUntilChanged(gt), map39(function(t2) {
      return t2[0];
    }))), startReached: streamFromEmitter(pipe2(b4, throttleTime(200), filter5(function(t2) {
      var e = t2.items;
      return e.length > 0 && e[0].originalIndex === t2.topItems.length;
    }), map39(function(t2) {
      return t2.items[0].index;
    }), distinctUntilChanged())), rangeChanged: streamFromEmitter(pipe2(b4, filter5(function(t2) {
      return t2.items.length > 0;
    }), map39(function(t2) {
      var e = t2.items;
      return { startIndex: e[0].index, endIndex: e[e.length - 1].index };
    }), distinctUntilChanged(vt))), itemsRendered: x3 }, I2);
  }, tup(rt2, ht, Ct, mt, at, ut, ct, j), { singleton: true });
  var yt = system(function(t) {
    var n2 = t[0], r2 = n2.sizes, o2 = n2.firstItemIndex, i7 = n2.data, a4 = n2.gap, l2 = t[1].listState, s3 = t[2].didMount, u3 = statefulStream(0);
    return connect(pipe2(s3, withLatestFrom(u3), filter5(function(t2) {
      return t2[1] !== 0;
    }), withLatestFrom(r2, o2, a4, i7), map39(function(t2) {
      var e = t2[0][1], n3 = t2[1], r3 = t2[2], o3 = t2[3], i8 = t2[4], a5 = i8 === void 0 ? [] : i8, l3 = 0;
      if (n3.groupIndices.length > 0)
        for (var s4, u4 = d(n3.groupIndices); !((s4 = u4()).done || s4.value - l3 >= e); )
          l3++;
      var c3 = e + l3;
      return xt(Array.from({ length: c3 }).map(function(t3, e2) {
        return { index: e2, size: 0, offset: 0, data: a5[e2] };
      }), [], c3, o3, n3, r3);
    })), l2), { initialItemCount: u3 };
  }, tup(rt2, bt, ct), { singleton: true });
  var Et = system(function(t) {
    var n2 = t[0].scrollVelocity, r2 = statefulStream(false), o2 = stream(), i7 = statefulStream(false);
    return connect(pipe2(n2, withLatestFrom(i7, r2, o2), filter5(function(t2) {
      return !!t2[1];
    }), map39(function(t2) {
      var e = t2[0], n3 = t2[1], r3 = t2[2], o3 = t2[3], i8 = n3.enter;
      if (r3) {
        if ((0, n3.exit)(e, o3))
          return false;
      } else if (i8(e, o3))
        return true;
      return r3;
    }), distinctUntilChanged()), r2), subscribe(pipe2(combineLatest(r2, n2, o2), withLatestFrom(i7)), function(t2) {
      var e = t2[0], n3 = t2[1];
      return e[0] && n3 && n3.change && n3.change(e[1], e[2]);
    }), { isSeeking: r2, scrollSeekConfiguration: i7, scrollVelocity: n2, scrollSeekRangeChanged: o2 };
  }, tup(ut), { singleton: true });
  var Ht = system(function(t) {
    var n2 = t[0].topItemsIndexes, r2 = statefulStream(0);
    return connect(pipe2(r2, filter5(function(t2) {
      return t2 > 0;
    }), map39(function(t2) {
      return Array.from({ length: t2 }).map(function(t3, e) {
        return e;
      });
    })), n2), { topItemCount: r2 };
  }, tup(bt));
  var Rt = system(function(t) {
    var n2 = t[0], r2 = n2.footerHeight, o2 = n2.headerHeight, i7 = n2.fixedHeaderHeight, a4 = t[1].listState, l2 = stream(), s3 = statefulStreamFromEmitter(pipe2(combineLatest(r2, o2, i7, a4), map39(function(t2) {
      var e = t2[3];
      return t2[0] + t2[1] + t2[2] + e.offsetBottom + e.bottom;
    })), 0);
    return connect(duc(s3), l2), { totalListHeight: s3, totalListHeightChanged: l2 };
  }, tup(b3, bt), { singleton: true });
  function Lt(t) {
    var e, n2 = false;
    return function() {
      return n2 || (n2 = true, e = t()), e;
    };
  }
  var kt = Lt(function() {
    return /iP(ad|hone|od).+Version\/[\d.]+.*Safari/i.test(navigator.userAgent);
  });
  var zt = system(function(t) {
    var n2 = t[0], r2 = n2.scrollBy, o2 = n2.scrollTop, i7 = n2.deviation, a4 = n2.scrollingInProgress, l2 = t[1], s3 = l2.isScrolling, u3 = l2.isAtBottom, c3 = l2.scrollDirection, m2 = t[3], d2 = m2.beforeUnshiftWith, f2 = m2.shiftWithOffset, h7 = m2.sizes, g3 = m2.gap, v2 = t[4].log, S2 = t[5].recalcInProgress, I2 = streamFromEmitter(pipe2(t[2].listState, withLatestFrom(l2.lastJumpDueToItemResize), scan(function(t2, e) {
      var n3 = t2[1], r3 = e[0], o3 = r3.items, i8 = r3.totalCount, a5 = r3.bottom + r3.offsetBottom, l3 = 0;
      return t2[2] === i8 && n3.length > 0 && o3.length > 0 && (o3[0].originalIndex === 0 && n3[0].originalIndex === 0 || (l3 = a5 - t2[3]) != 0 && (l3 += e[1])), [l3, o3, i8, a5];
    }, [0, [], 0, 0]), filter5(function(t2) {
      return t2[0] !== 0;
    }), withLatestFrom(o2, c3, a4, u3, v2), filter5(function(t2) {
      return !t2[3] && t2[1] !== 0 && t2[2] === lt;
    }), map39(function(t2) {
      var e = t2[0][0];
      return (0, t2[5])("Upward scrolling compensation", { amount: e }, p2.DEBUG), e;
    })));
    function C2(t2) {
      t2 > 0 ? (publish(r2, { top: -t2, behavior: "auto" }), publish(i7, 0)) : (publish(i7, 0), publish(r2, { top: -t2, behavior: "auto" }));
    }
    return subscribe(pipe2(I2, withLatestFrom(i7, s3)), function(t2) {
      var n3 = t2[0], r3 = t2[1];
      t2[2] && kt() ? publish(i7, r3 - n3) : C2(-n3);
    }), subscribe(pipe2(combineLatest(statefulStreamFromEmitter(s3, false), i7, S2), filter5(function(t2) {
      return !t2[0] && !t2[2] && t2[1] !== 0;
    }), map39(function(t2) {
      return t2[1];
    }), throttleTime(1)), C2), connect(pipe2(f2, map39(function(t2) {
      return { top: -t2 };
    })), r2), subscribe(pipe2(d2, withLatestFrom(h7, g3), map39(function(t2) {
      var e = t2[0];
      return e * t2[1].lastSize + e * t2[2];
    })), function(t2) {
      publish(i7, t2), requestAnimationFrame(function() {
        publish(r2, { top: t2 }), requestAnimationFrame(function() {
          publish(i7, 0), publish(S2, false);
        });
      });
    }), { deviation: i7 };
  }, tup(b3, ut, bt, rt2, v, j));
  var Bt = system(function(t) {
    var n2 = t[0].totalListHeight, r2 = t[1].didMount, o2 = t[2].scrollTo, i7 = statefulStream(0);
    return subscribe(pipe2(r2, withLatestFrom(i7), filter5(function(t2) {
      return t2[1] !== 0;
    }), map39(function(t2) {
      return { top: t2[1] };
    })), function(t2) {
      handleNext(pipe2(n2, filter5(function(t3) {
        return t3 !== 0;
      })), function() {
        setTimeout(function() {
          publish(o2, t2);
        });
      });
    }), { initialScrollTop: i7 };
  }, tup(Rt, ct, b3), { singleton: true });
  var Ft = system(function(t) {
    var n2 = t[0].viewportHeight, r2 = t[1].totalListHeight, o2 = statefulStream(false);
    return { alignToBottom: o2, paddingTopAddition: statefulStreamFromEmitter(pipe2(combineLatest(o2, n2, r2), filter5(function(t2) {
      return t2[0];
    }), map39(function(t2) {
      return Math.max(0, t2[1] - t2[2]);
    }), distinctUntilChanged()), 0) };
  }, tup(b3, Rt), { singleton: true });
  var Pt = system(function(t) {
    var n2 = t[0], r2 = n2.scrollTo, o2 = n2.scrollContainerState, i7 = stream(), a4 = stream(), l2 = stream(), s3 = statefulStream(false), c3 = statefulStream(void 0);
    return connect(pipe2(combineLatest(i7, a4), map39(function(t2) {
      var e = t2[0], n3 = e.viewportHeight, r3 = e.scrollHeight;
      return { scrollTop: Math.max(0, e.scrollTop - t2[1].offsetTop), scrollHeight: r3, viewportHeight: n3 };
    })), o2), connect(pipe2(r2, withLatestFrom(a4), map39(function(t2) {
      var e = t2[0];
      return u2({}, e, { top: e.top + t2[1].offsetTop });
    })), l2), { useWindowScroll: s3, customScrollParent: c3, windowScrollContainerState: i7, windowViewportRect: a4, windowScrollTo: l2 };
  }, tup(b3));
  var Ot = ["done", "behavior"];
  var Mt = system(function(t) {
    var n2 = t[0], r2 = n2.sizes, o2 = n2.totalCount, i7 = n2.gap, a4 = t[1], l2 = a4.scrollTop, s3 = a4.viewportHeight, m2 = a4.headerHeight, d2 = a4.scrollingInProgress, f2 = t[2].scrollToIndex, p3 = stream();
    return connect(pipe2(p3, withLatestFrom(r2, s3, o2, m2, l2, i7), map39(function(t2) {
      var n3 = t2[0], r3 = t2[1], o3 = t2[2], i8 = t2[3], a5 = t2[4], l3 = t2[5], s4 = t2[6], m3 = n3.done, f3 = n3.behavior, p4 = c2(n3, Ot), h7 = null, g3 = X(n3, r3, i8 - 1), v2 = Q(g3, r3.offsetTree, s4) + a5;
      return v2 < l3 ? h7 = u2({}, p4, { behavior: f3, align: "start" }) : v2 + k(r3.sizeTree, g3)[1] > l3 + o3 && (h7 = u2({}, p4, { behavior: f3, align: "end" })), h7 ? m3 && handleNext(pipe2(d2, skip(1), filter5(function(t3) {
        return t3 === false;
      })), m3) : m3 && m3(), h7;
    }), filter5(function(t2) {
      return t2 !== null;
    })), f2), { scrollIntoView: p3 };
  }, tup(rt2, b3, at, bt, v), { singleton: true });
  var Vt = ["listState", "topItemsIndexes"];
  var Ut = system(function(t) {
    return u2({}, t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8]);
  }, tup(Ct, yt, ct, Et, Rt, Bt, Ft, Pt, Mt));
  var At = system(function(t) {
    var n2 = t[0], r2 = n2.totalCount, o2 = n2.sizeRanges, i7 = n2.fixedItemSize, a4 = n2.defaultItemSize, l2 = n2.trackItemSizes, s3 = n2.itemSize, m2 = n2.data, d2 = n2.firstItemIndex, f2 = n2.groupIndices, p3 = n2.statefulTotalCount, h7 = n2.gap, g3 = t[1], v2 = g3.initialTopMostItemIndex, S2 = g3.scrolledToInitialItem, I2 = t[2], C2 = t[3], T2 = t[4], w2 = T2.listState, x3 = T2.topItemsIndexes, b4 = c2(T2, Vt), y2 = t[5].scrollToIndex, E2 = t[7].topItemCount, H2 = t[8].groupCounts, R2 = t[9], L2 = t[10];
    return connect(b4.rangeChanged, R2.scrollSeekRangeChanged), connect(pipe2(R2.windowViewportRect, map39(function(t2) {
      return t2.visibleHeight;
    })), I2.viewportHeight), u2({ totalCount: r2, data: m2, firstItemIndex: d2, sizeRanges: o2, initialTopMostItemIndex: v2, scrolledToInitialItem: S2, topItemsIndexes: x3, topItemCount: E2, groupCounts: H2, fixedItemHeight: i7, defaultItemHeight: a4, gap: h7 }, C2, { statefulTotalCount: p3, listState: w2, scrollToIndex: y2, trackItemSizes: l2, itemSize: s3, groupIndices: f2 }, b4, R2, I2, L2);
  }, tup(rt2, mt, b3, ft, bt, at, zt, Ht, ht, Ut, v));
  var Wt = Lt(function() {
    if (typeof document == "undefined")
      return "sticky";
    var t = document.createElement("div");
    return t.style.position = "-webkit-sticky", t.style.position === "-webkit-sticky" ? "-webkit-sticky" : "sticky";
  });
  function Nt(t, e) {
    var n2 = (0, import_react44.useRef)(null), r2 = (0, import_react44.useCallback)(function(r3) {
      if (r3 !== null && r3.offsetParent) {
        var o2, i7, a4 = r3.getBoundingClientRect(), l3 = a4.width;
        if (e) {
          var s4 = e.getBoundingClientRect(), u4 = a4.top - s4.top;
          o2 = s4.height - Math.max(0, u4), i7 = u4 + e.scrollTop;
        } else
          o2 = window.innerHeight - Math.max(0, a4.top), i7 = a4.top + window.pageYOffset;
        n2.current = { offsetTop: i7, visibleHeight: o2, visibleWidth: l3 }, t(n2.current);
      }
    }, [t, e]), l2 = S(r2), s3 = l2.callbackRef, u3 = l2.ref, c3 = (0, import_react44.useCallback)(function() {
      r2(u3.current);
    }, [r2, u3]);
    return (0, import_react44.useEffect)(function() {
      if (e) {
        e.addEventListener("scroll", c3);
        var t2 = new ResizeObserver(c3);
        return t2.observe(e), function() {
          e.removeEventListener("scroll", c3), t2.unobserve(e);
        };
      }
      return window.addEventListener("scroll", c3), window.addEventListener("resize", c3), function() {
        window.removeEventListener("scroll", c3), window.removeEventListener("resize", c3);
      };
    }, [c3, e]), s3;
  }
  var Dt = ["placeholder"];
  var Gt = ["style", "children"];
  var _t = ["style", "children"];
  function jt(t) {
    return t;
  }
  var Kt = system(function() {
    var t = statefulStream(function(t2) {
      return "Item " + t2;
    }), n2 = statefulStream(null), r2 = statefulStream(function(t2) {
      return "Group " + t2;
    }), o2 = statefulStream({}), i7 = statefulStream(jt), a4 = statefulStream("div"), l2 = statefulStream(noop), s3 = function(t2, n3) {
      return n3 === void 0 && (n3 = null), statefulStreamFromEmitter(pipe2(o2, map39(function(e) {
        return e[t2];
      }), distinctUntilChanged()), n3);
    };
    return { context: n2, itemContent: t, groupContent: r2, components: o2, computeItemKey: i7, headerFooterTag: a4, scrollerRef: l2, FooterComponent: s3("Footer"), HeaderComponent: s3("Header"), TopItemListComponent: s3("TopItemList"), ListComponent: s3("List", "div"), ItemComponent: s3("Item", "div"), GroupComponent: s3("Group", "div"), ScrollerComponent: s3("Scroller", "div"), EmptyPlaceholder: s3("EmptyPlaceholder"), ScrollSeekPlaceholder: s3("ScrollSeekPlaceholder") };
  });
  function Yt(t, n2) {
    var r2 = stream();
    return subscribe(r2, function() {
      return console.warn("react-virtuoso: You are using a deprecated property. " + n2, "color: red;", "color: inherit;", "color: blue;");
    }), connect(r2, t), r2;
  }
  var qt = system(function(t) {
    var n2 = t[0], r2 = t[1], o2 = { item: Yt(r2.itemContent, "Rename the %citem%c prop to %citemContent."), group: Yt(r2.groupContent, "Rename the %cgroup%c prop to %cgroupContent."), topItems: Yt(n2.topItemCount, "Rename the %ctopItems%c prop to %ctopItemCount."), itemHeight: Yt(n2.fixedItemHeight, "Rename the %citemHeight%c prop to %cfixedItemHeight."), scrollingStateChange: Yt(n2.isScrolling, "Rename the %cscrollingStateChange%c prop to %cisScrolling."), adjustForPrependedItems: stream(), maxHeightCacheSize: stream(), footer: stream(), header: stream(), HeaderContainer: stream(), FooterContainer: stream(), ItemContainer: stream(), ScrollContainer: stream(), GroupContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
    function i7(t2, n3, o3) {
      connect(pipe2(t2, withLatestFrom(r2.components), map39(function(t3) {
        var e, r3 = t3[0], i8 = t3[1];
        return console.warn("react-virtuoso: " + o3 + " property is deprecated. Pass components." + n3 + " instead."), u2({}, i8, ((e = {})[n3] = r3, e));
      })), r2.components);
    }
    return subscribe(o2.adjustForPrependedItems, function() {
      console.warn("react-virtuoso: adjustForPrependedItems is no longer supported. Use the firstItemIndex property instead - https://virtuoso.dev/prepend-items.", "color: red;", "color: inherit;", "color: blue;");
    }), subscribe(o2.maxHeightCacheSize, function() {
      console.warn("react-virtuoso: maxHeightCacheSize is no longer necessary. Setting it has no effect - remove it from your code.");
    }), subscribe(o2.HeaderContainer, function() {
      console.warn("react-virtuoso: HeaderContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the header component and pass components.Header to change its contents.");
    }), subscribe(o2.FooterContainer, function() {
      console.warn("react-virtuoso: FooterContainer is deprecated. Use headerFooterTag if you want to change the wrapper of the footer component and pass components.Footer to change its contents.");
    }), subscribe(o2.scrollSeek, function(t2) {
      var o3 = t2.placeholder, i8 = c2(t2, Dt);
      console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(r2.components, u2({}, getValue(r2.components), { ScrollSeekPlaceholder: o3 })), publish(n2.scrollSeekConfiguration, i8);
    }), i7(o2.footer, "Footer", "footer"), i7(o2.header, "Header", "header"), i7(o2.ItemContainer, "Item", "ItemContainer"), i7(o2.ListContainer, "List", "ListContainer"), i7(o2.ScrollContainer, "Scroller", "ScrollContainer"), i7(o2.emptyComponent, "EmptyPlaceholder", "emptyComponent"), i7(o2.GroupContainer, "Group", "GroupContainer"), u2({}, n2, r2, o2);
  }, tup(At, Kt));
  var Zt = function(t) {
    return n.createElement("div", { style: { height: t.height } });
  };
  var Jt = { position: Wt(), zIndex: 1, overflowAnchor: "none" };
  var $t = { overflowAnchor: "none" };
  var Qt = n.memo(function(t) {
    var r2 = t.showTopList, o2 = r2 !== void 0 && r2, i7 = fe("listState"), a4 = de("sizeRanges"), s3 = fe("useWindowScroll"), c3 = fe("customScrollParent"), m2 = de("windowScrollContainerState"), d2 = de("scrollContainerState"), f2 = c3 || s3 ? m2 : d2, p3 = fe("itemContent"), h7 = fe("context"), g3 = fe("groupContent"), v2 = fe("trackItemSizes"), S2 = fe("itemSize"), I2 = fe("log"), T2 = de("gap"), w2 = C(a4, S2, v2, o2 ? noop : f2, I2, T2, c3).callbackRef, x3 = n.useState(0), b4 = x3[0], y2 = x3[1];
    pe("deviation", function(t2) {
      b4 !== t2 && y2(t2);
    });
    var E2 = fe("EmptyPlaceholder"), H2 = fe("ScrollSeekPlaceholder") || Zt, R2 = fe("ListComponent"), L2 = fe("ItemComponent"), k2 = fe("GroupComponent"), z2 = fe("computeItemKey"), B2 = fe("isSeeking"), F2 = fe("groupIndices").length > 0, P2 = fe("paddingTopAddition"), O2 = o2 ? {} : { boxSizing: "border-box", paddingTop: i7.offsetTop + P2, paddingBottom: i7.offsetBottom, marginTop: b4 };
    return !o2 && i7.totalCount === 0 && E2 ? (0, import_react44.createElement)(E2, ne(E2, h7)) : (0, import_react44.createElement)(R2, u2({}, ne(R2, h7), { ref: w2, style: O2, "data-test-id": o2 ? "virtuoso-top-item-list" : "virtuoso-item-list" }), (o2 ? i7.topItems : i7.items).map(function(t2) {
      var e = t2.originalIndex, n2 = z2(e + i7.firstItemIndex, t2.data, h7);
      return B2 ? (0, import_react44.createElement)(H2, u2({}, ne(H2, h7), { key: n2, index: t2.index, height: t2.size, type: t2.type || "item" }, t2.type === "group" ? {} : { groupIndex: t2.groupIndex })) : t2.type === "group" ? (0, import_react44.createElement)(k2, u2({}, ne(k2, h7), { key: n2, "data-index": e, "data-known-size": t2.size, "data-item-index": t2.index, style: Jt }), g3(t2.index)) : (0, import_react44.createElement)(L2, u2({}, ne(L2, h7), { key: n2, "data-index": e, "data-known-size": t2.size, "data-item-index": t2.index, "data-item-group-index": t2.groupIndex, style: $t }), F2 ? p3(t2.index, t2.groupIndex, t2.data, h7) : p3(t2.index, t2.data, h7));
    }));
  });
  var Xt = { height: "100%", outline: "none", overflowY: "auto", position: "relative", WebkitOverflowScrolling: "touch", willChange: "transform" };
  var te = { width: "100%", height: "100%", position: "absolute", top: 0 };
  var ee = { width: "100%", position: Wt(), top: 0 };
  function ne(t, e) {
    if (typeof t != "string")
      return { context: e };
  }
  var re = n.memo(function() {
    var t = fe("HeaderComponent"), e = de("headerHeight"), n2 = fe("headerFooterTag"), r2 = I(function(t2) {
      return e(T(t2, "height"));
    }), o2 = fe("context");
    return t ? (0, import_react44.createElement)(n2, { ref: r2 }, (0, import_react44.createElement)(t, ne(t, o2))) : null;
  });
  var oe = n.memo(function() {
    var t = fe("FooterComponent"), e = de("footerHeight"), n2 = fe("headerFooterTag"), r2 = I(function(t2) {
      return e(T(t2, "height"));
    }), o2 = fe("context");
    return t ? (0, import_react44.createElement)(n2, { ref: r2 }, (0, import_react44.createElement)(t, ne(t, o2))) : null;
  });
  function ie(t) {
    var e = t.usePublisher, r2 = t.useEmitter, o2 = t.useEmitterValue;
    return n.memo(function(t2) {
      var n2 = t2.style, i7 = t2.children, a4 = c2(t2, Gt), s3 = e("scrollContainerState"), m2 = o2("ScrollerComponent"), d2 = e("smoothScrollTargetReached"), f2 = o2("scrollerRef"), p3 = o2("context"), h7 = x2(s3, d2, m2, f2), g3 = h7.scrollerRef, v2 = h7.scrollByCallback;
      return r2("scrollTo", h7.scrollToCallback), r2("scrollBy", v2), (0, import_react44.createElement)(m2, u2({ ref: g3, style: u2({}, Xt, n2), "data-test-id": "virtuoso-scroller", "data-virtuoso-scroller": true, tabIndex: 0 }, a4, ne(m2, p3)), i7);
    });
  }
  function ae(t) {
    var r2 = t.usePublisher, o2 = t.useEmitter, i7 = t.useEmitterValue;
    return n.memo(function(t2) {
      var n2 = t2.style, a4 = t2.children, s3 = c2(t2, _t), m2 = r2("windowScrollContainerState"), d2 = i7("ScrollerComponent"), f2 = r2("smoothScrollTargetReached"), p3 = i7("totalListHeight"), g3 = i7("deviation"), v2 = i7("customScrollParent"), S2 = i7("context"), I2 = x2(m2, f2, d2, noop, v2), C2 = I2.scrollerRef, T2 = I2.scrollByCallback, w2 = I2.scrollToCallback;
      return h(function() {
        return C2.current = v2 || window, function() {
          C2.current = null;
        };
      }, [C2, v2]), o2("windowScrollTo", w2), o2("scrollBy", T2), (0, import_react44.createElement)(d2, u2({ style: u2({ position: "relative" }, n2, p3 !== 0 ? { height: p3 + g3 } : {}), "data-virtuoso-scroller": true }, s3, ne(d2, S2)), a4);
    });
  }
  var le = function(t) {
    var r2 = t.children, o2 = de("viewportHeight"), i7 = I(compose3(o2, function(t2) {
      return T(t2, "height");
    }));
    return n.createElement("div", { style: te, ref: i7, "data-viewport-type": "element" }, r2);
  };
  var se = function(t) {
    var e = t.children, r2 = Nt(de("windowViewportRect"), fe("customScrollParent"));
    return n.createElement("div", { ref: r2, style: te, "data-viewport-type": "window" }, e);
  };
  var ue = function(t) {
    var e = t.children, n2 = fe("TopItemListComponent"), r2 = fe("headerHeight"), o2 = u2({}, ee, { marginTop: r2 + "px" }), i7 = fe("context");
    return (0, import_react44.createElement)(n2 || "div", { style: o2, context: i7 }, e);
  };
  var ce = systemToComponent(qt, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", groupContent: "groupContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", headerFooterTag: "headerFooterTag", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering", item: "item", group: "group", topItems: "topItems", itemHeight: "itemHeight", scrollingStateChange: "scrollingStateChange", maxHeightCacheSize: "maxHeightCacheSize", footer: "footer", header: "header", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", GroupContainer: "GroupContainer", emptyComponent: "emptyComponent", HeaderContainer: "HeaderContainer", FooterContainer: "FooterContainer", scrollSeek: "scrollSeek" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy", adjustForPrependedItems: "adjustForPrependedItems", autoscrollToBottom: "autoscrollToBottom" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t) {
    var e = fe("useWindowScroll"), r2 = fe("topItemsIndexes").length > 0, o2 = fe("customScrollParent"), i7 = o2 || e ? se : le;
    return n.createElement(o2 || e ? ge : he, u2({}, t), n.createElement(i7, null, n.createElement(re, null), n.createElement(Qt, null), n.createElement(oe, null)), r2 && n.createElement(ue, null, n.createElement(Qt, { showTopList: true })));
  }));
  var me = ce.Component;
  var de = ce.usePublisher;
  var fe = ce.useEmitterValue;
  var pe = ce.useEmitter;
  var he = ie({ usePublisher: de, useEmitterValue: fe, useEmitter: pe });
  var ge = ae({ usePublisher: de, useEmitterValue: fe, useEmitter: pe });
  var ve = { items: [], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
  var Se = { items: [{ index: 0 }], offsetBottom: 0, offsetTop: 0, top: 0, bottom: 0, itemHeight: 0, itemWidth: 0 };
  var Ie = Math.round;
  var Ce = Math.ceil;
  var Te = Math.floor;
  var we = Math.min;
  var xe = Math.max;
  function be(t, e) {
    return Array.from({ length: e - t + 1 }).map(function(e2, n2) {
      return { index: n2 + t };
    });
  }
  function ye(t, e) {
    return t && t.column === e.column && t.row === e.row;
  }
  var Ee = system(function(t) {
    var n2 = t[0], r2 = n2.overscan, o2 = n2.visibleRange, i7 = n2.listBoundary, a4 = t[1], l2 = a4.scrollTop, s3 = a4.viewportHeight, c3 = a4.scrollBy, m2 = a4.scrollTo, d2 = a4.smoothScrollTargetReached, f2 = a4.scrollContainerState, p3 = t[2], h7 = t[3], g3 = t[4], v2 = g3.propsReady, S2 = g3.didMount, I2 = t[5], C2 = I2.windowViewportRect, T2 = I2.windowScrollTo, w2 = I2.useWindowScroll, x3 = I2.customScrollParent, b4 = I2.windowScrollContainerState, y2 = t[6], E2 = statefulStream(0), H2 = statefulStream(0), R2 = statefulStream(ve), L2 = statefulStream({ height: 0, width: 0 }), k2 = statefulStream({ height: 0, width: 0 }), z2 = stream(), B2 = stream(), F2 = statefulStream(0), P2 = statefulStream({ row: 0, column: 0 });
    connect(pipe2(S2, withLatestFrom(H2), filter5(function(t2) {
      return t2[1] !== 0;
    }), map39(function(t2) {
      return { items: be(0, t2[1] - 1), top: 0, bottom: 0, offsetBottom: 0, offsetTop: 0, itemHeight: 0, itemWidth: 0 };
    })), R2), connect(pipe2(combineLatest(duc(E2), o2, duc(P2, ye), duc(k2, function(t2, e) {
      return t2 && t2.width === e.width && t2.height === e.height;
    })), withLatestFrom(L2), map39(function(t2) {
      var e = t2[0], n3 = e[0], r3 = e[1], o3 = r3[0], i8 = r3[1], a5 = e[2], l3 = e[3], s4 = t2[1], u3 = a5.row, c4 = l3.height, m3 = l3.width, d3 = s4.width;
      if (n3 === 0 || d3 === 0)
        return ve;
      if (m3 === 0)
        return Se;
      var f3 = Le(d3, m3, a5.column), p4 = f3 * Te((o3 + u3) / (c4 + u3)), h8 = f3 * Ce((i8 + u3) / (c4 + u3)) - 1;
      h8 = xe(0, we(n3 - 1, h8));
      var g4 = be(p4 = we(h8, xe(0, p4)), h8), v3 = He(s4, a5, l3, g4), S3 = v3.top, I3 = v3.bottom, C3 = Ce(n3 / f3);
      return { items: g4, offsetTop: S3, offsetBottom: C3 * c4 + (C3 - 1) * u3 - I3, top: S3, bottom: I3, itemHeight: c4, itemWidth: m3 };
    })), R2), connect(pipe2(L2, map39(function(t2) {
      return t2.height;
    })), s3), connect(pipe2(combineLatest(L2, k2, R2, P2), map39(function(t2) {
      var e = He(t2[0], t2[3], t2[1], t2[2].items);
      return [e.top, e.bottom];
    }), distinctUntilChanged(gt)), i7);
    var O2 = streamFromEmitter(pipe2(duc(R2), filter5(function(t2) {
      return t2.items.length > 0;
    }), withLatestFrom(E2), filter5(function(t2) {
      var e = t2[0].items;
      return e[e.length - 1].index === t2[1] - 1;
    }), map39(function(t2) {
      return t2[1] - 1;
    }), distinctUntilChanged())), M2 = streamFromEmitter(pipe2(duc(R2), filter5(function(t2) {
      var e = t2.items;
      return e.length > 0 && e[0].index === 0;
    }), mapTo(0), distinctUntilChanged())), V2 = streamFromEmitter(pipe2(duc(R2), filter5(function(t2) {
      return t2.items.length > 0;
    }), map39(function(t2) {
      var e = t2.items;
      return { startIndex: e[0].index, endIndex: e[e.length - 1].index };
    }), distinctUntilChanged(vt)));
    connect(V2, h7.scrollSeekRangeChanged), connect(pipe2(z2, withLatestFrom(L2, k2, E2, P2), map39(function(t2) {
      var e = t2[1], n3 = t2[2], r3 = t2[3], o3 = t2[4], i8 = it(t2[0]), a5 = i8.align, l3 = i8.behavior, s4 = i8.offset, u3 = i8.index;
      u3 === "LAST" && (u3 = r3 - 1);
      var c4 = Re2(e, o3, n3, u3 = xe(0, u3, we(r3 - 1, u3)));
      return a5 === "end" ? c4 = Ie(c4 - e.height + n3.height) : a5 === "center" && (c4 = Ie(c4 - e.height / 2 + n3.height / 2)), s4 && (c4 += s4), { top: c4, behavior: l3 };
    })), m2);
    var U2 = statefulStreamFromEmitter(pipe2(R2, map39(function(t2) {
      return t2.offsetBottom + t2.bottom;
    })), 0);
    return connect(pipe2(C2, map39(function(t2) {
      return { width: t2.visibleWidth, height: t2.visibleHeight };
    })), L2), u2({ totalCount: E2, viewportDimensions: L2, itemDimensions: k2, scrollTop: l2, scrollHeight: B2, overscan: r2, scrollBy: c3, scrollTo: m2, scrollToIndex: z2, smoothScrollTargetReached: d2, windowViewportRect: C2, windowScrollTo: T2, useWindowScroll: w2, customScrollParent: x3, windowScrollContainerState: b4, deviation: F2, scrollContainerState: f2, initialItemCount: H2, gap: P2 }, h7, { gridState: R2, totalListHeight: U2 }, p3, { startReached: M2, endReached: O2, rangeChanged: V2, propsReady: v2 }, y2);
  }, tup(Ct, b3, ut, Et, ct, Pt, v));
  function He(t, e, n2, r2) {
    var o2 = n2.height;
    return o2 === void 0 || r2.length === 0 ? { top: 0, bottom: 0 } : { top: Re2(t, e, n2, r2[0].index), bottom: Re2(t, e, n2, r2[r2.length - 1].index) + o2 };
  }
  function Re2(t, e, n2, r2) {
    var o2 = Le(t.width, n2.width, e.column), i7 = Te(r2 / o2), a4 = i7 * n2.height + xe(0, i7 - 1) * e.row;
    return a4 > 0 ? a4 + e.row : a4;
  }
  function Le(t, e, n2) {
    return xe(1, Te((t + n2) / (e + n2)));
  }
  var ke = ["placeholder"];
  var ze = system(function() {
    var t = statefulStream(function(t2) {
      return "Item " + t2;
    }), n2 = statefulStream({}), r2 = statefulStream(null), o2 = statefulStream("virtuoso-grid-item"), i7 = statefulStream("virtuoso-grid-list"), a4 = statefulStream(jt), l2 = statefulStream(noop), s3 = function(t2, r3) {
      return r3 === void 0 && (r3 = null), statefulStreamFromEmitter(pipe2(n2, map39(function(e) {
        return e[t2];
      }), distinctUntilChanged()), r3);
    };
    return { context: r2, itemContent: t, components: n2, computeItemKey: a4, itemClassName: o2, listClassName: i7, scrollerRef: l2, ListComponent: s3("List", "div"), ItemComponent: s3("Item", "div"), ScrollerComponent: s3("Scroller", "div"), ScrollSeekPlaceholder: s3("ScrollSeekPlaceholder", "div") };
  });
  var Be = system(function(t) {
    var n2 = t[0], r2 = t[1], o2 = { item: Yt(r2.itemContent, "Rename the %citem%c prop to %citemContent."), ItemContainer: stream(), ScrollContainer: stream(), ListContainer: stream(), emptyComponent: stream(), scrollSeek: stream() };
    function i7(t2, n3, o3) {
      connect(pipe2(t2, withLatestFrom(r2.components), map39(function(t3) {
        var e, r3 = t3[0], i8 = t3[1];
        return console.warn("react-virtuoso: " + o3 + " property is deprecated. Pass components." + n3 + " instead."), u2({}, i8, ((e = {})[n3] = r3, e));
      })), r2.components);
    }
    return subscribe(o2.scrollSeek, function(t2) {
      var o3 = t2.placeholder, i8 = c2(t2, ke);
      console.warn("react-virtuoso: scrollSeek property is deprecated. Pass scrollSeekConfiguration and specify the placeholder in components.ScrollSeekPlaceholder instead."), publish(r2.components, u2({}, getValue(r2.components), { ScrollSeekPlaceholder: o3 })), publish(n2.scrollSeekConfiguration, i8);
    }), i7(o2.ItemContainer, "Item", "ItemContainer"), i7(o2.ListContainer, "List", "ListContainer"), i7(o2.ScrollContainer, "Scroller", "ScrollContainer"), u2({}, n2, r2, o2);
  }, tup(Ee, ze));
  var Fe = n.memo(function() {
    var t = Ae("gridState"), e = Ae("listClassName"), n2 = Ae("itemClassName"), r2 = Ae("itemContent"), o2 = Ae("computeItemKey"), i7 = Ae("isSeeking"), a4 = Ue("scrollHeight"), s3 = Ae("ItemComponent"), c3 = Ae("ListComponent"), m2 = Ae("ScrollSeekPlaceholder"), d2 = Ae("context"), f2 = Ue("itemDimensions"), p3 = Ue("gap"), h7 = Ae("log"), g3 = I(function(t2) {
      a4(t2.parentElement.parentElement.scrollHeight);
      var e2 = t2.firstChild;
      e2 && f2(e2.getBoundingClientRect()), p3({ row: Ge("row-gap", getComputedStyle(t2).rowGap, h7), column: Ge("column-gap", getComputedStyle(t2).columnGap, h7) });
    });
    return (0, import_react44.createElement)(c3, u2({ ref: g3, className: e }, ne(c3, d2), { style: { paddingTop: t.offsetTop, paddingBottom: t.offsetBottom } }), t.items.map(function(e2) {
      var a5 = o2(e2.index);
      return i7 ? (0, import_react44.createElement)(m2, u2({ key: a5 }, ne(m2, d2), { index: e2.index, height: t.itemHeight, width: t.itemWidth })) : (0, import_react44.createElement)(s3, u2({}, ne(s3, d2), { className: n2, "data-index": e2.index, key: a5 }), r2(e2.index, d2));
    }));
  });
  var Pe = function(t) {
    var e = t.children, r2 = Ue("viewportDimensions"), o2 = I(function(t2) {
      r2(t2.getBoundingClientRect());
    });
    return n.createElement("div", { style: te, ref: o2 }, e);
  };
  var Oe = function(t) {
    var e = t.children, r2 = Nt(Ue("windowViewportRect"), Ae("customScrollParent"));
    return n.createElement("div", { ref: r2, style: te }, e);
  };
  var Me = systemToComponent(Be, { optional: { totalCount: "totalCount", overscan: "overscan", itemContent: "itemContent", components: "components", computeItemKey: "computeItemKey", initialItemCount: "initialItemCount", scrollSeekConfiguration: "scrollSeekConfiguration", listClassName: "listClassName", itemClassName: "itemClassName", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", item: "item", ItemContainer: "ItemContainer", ScrollContainer: "ScrollContainer", ListContainer: "ListContainer", scrollSeek: "scrollSeek" }, methods: { scrollTo: "scrollTo", scrollBy: "scrollBy", scrollToIndex: "scrollToIndex" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange" } }, n.memo(function(t) {
    var e = u2({}, t), r2 = Ae("useWindowScroll"), o2 = Ae("customScrollParent"), i7 = o2 || r2 ? Oe : Pe;
    return n.createElement(o2 || r2 ? De : Ne, u2({}, e), n.createElement(i7, null, n.createElement(Fe, null)));
  }));
  var Ve = Me.Component;
  var Ue = Me.usePublisher;
  var Ae = Me.useEmitterValue;
  var We = Me.useEmitter;
  var Ne = ie({ usePublisher: Ue, useEmitterValue: Ae, useEmitter: We });
  var De = ae({ usePublisher: Ue, useEmitterValue: Ae, useEmitter: We });
  function Ge(t, e, n2) {
    return e === "normal" || e.endsWith("px") || n2(t + " was not resolved to pixel value correctly", e, p2.WARN), e === "normal" ? 0 : parseInt(e, 10);
  }
  var _e = system(function() {
    var t = statefulStream(function(t2) {
      return n.createElement("td", null, "Item $", t2);
    }), r2 = statefulStream(null), o2 = statefulStream(null), i7 = statefulStream({}), a4 = statefulStream(jt), l2 = statefulStream(noop), s3 = function(t2, n2) {
      return n2 === void 0 && (n2 = null), statefulStreamFromEmitter(pipe2(i7, map39(function(e) {
        return e[t2];
      }), distinctUntilChanged()), n2);
    };
    return { context: r2, itemContent: t, fixedHeaderContent: o2, components: i7, computeItemKey: a4, scrollerRef: l2, TableComponent: s3("Table", "table"), TableHeadComponent: s3("TableHead", "thead"), TableBodyComponent: s3("TableBody", "tbody"), TableRowComponent: s3("TableRow", "tr"), ScrollerComponent: s3("Scroller", "div"), EmptyPlaceholder: s3("EmptyPlaceholder"), ScrollSeekPlaceholder: s3("ScrollSeekPlaceholder"), FillerRow: s3("FillerRow") };
  });
  var je = system(function(t) {
    return u2({}, t[0], t[1]);
  }, tup(At, _e));
  var Ke = function(t) {
    return n.createElement("tr", null, n.createElement("td", { style: { height: t.height } }));
  };
  var Ye = function(t) {
    return n.createElement("tr", null, n.createElement("td", { style: { height: t.height, padding: 0, border: 0 } }));
  };
  var qe = n.memo(function() {
    var t = tn("listState"), e = Xe("sizeRanges"), r2 = tn("useWindowScroll"), o2 = tn("customScrollParent"), i7 = Xe("windowScrollContainerState"), a4 = Xe("scrollContainerState"), s3 = o2 || r2 ? i7 : a4, c3 = tn("itemContent"), m2 = tn("trackItemSizes"), d2 = C(e, tn("itemSize"), m2, s3, tn("log"), void 0, o2), f2 = d2.callbackRef, p3 = d2.ref, h7 = n.useState(0), g3 = h7[0], v2 = h7[1];
    en("deviation", function(t2) {
      g3 !== t2 && (p3.current.style.marginTop = t2 + "px", v2(t2));
    });
    var S2 = tn("EmptyPlaceholder"), I2 = tn("ScrollSeekPlaceholder") || Ke, T2 = tn("FillerRow") || Ye, w2 = tn("TableBodyComponent"), x3 = tn("TableRowComponent"), b4 = tn("computeItemKey"), y2 = tn("isSeeking"), E2 = tn("paddingTopAddition"), H2 = tn("firstItemIndex"), R2 = tn("statefulTotalCount"), L2 = tn("context");
    if (R2 === 0 && S2)
      return (0, import_react44.createElement)(S2, ne(S2, L2));
    var k2 = t.offsetTop + E2 + g3, z2 = t.offsetBottom, B2 = k2 > 0 ? n.createElement(T2, { height: k2, key: "padding-top" }) : null, F2 = z2 > 0 ? n.createElement(T2, { height: z2, key: "padding-bottom" }) : null, P2 = t.items.map(function(t2) {
      var e2 = t2.originalIndex, n2 = b4(e2 + H2, t2.data, L2);
      return y2 ? (0, import_react44.createElement)(I2, u2({}, ne(I2, L2), { key: n2, index: t2.index, height: t2.size, type: t2.type || "item" })) : (0, import_react44.createElement)(x3, u2({}, ne(x3, L2), { key: n2, "data-index": e2, "data-known-size": t2.size, "data-item-index": t2.index, style: { overflowAnchor: "none" } }), c3(t2.index, t2.data, L2));
    });
    return (0, import_react44.createElement)(w2, u2({ ref: f2, "data-test-id": "virtuoso-item-list" }, ne(w2, L2)), [B2].concat(P2, [F2]));
  });
  var Ze = function(t) {
    var r2 = t.children, o2 = Xe("viewportHeight"), i7 = I(compose3(o2, function(t2) {
      return T(t2, "height");
    }));
    return n.createElement("div", { style: te, ref: i7, "data-viewport-type": "element" }, r2);
  };
  var Je = function(t) {
    var e = t.children, r2 = Nt(Xe("windowViewportRect"), tn("customScrollParent"));
    return n.createElement("div", { ref: r2, style: te, "data-viewport-type": "window" }, e);
  };
  var $e = systemToComponent(je, { required: {}, optional: { context: "context", followOutput: "followOutput", firstItemIndex: "firstItemIndex", itemContent: "itemContent", fixedHeaderContent: "fixedHeaderContent", overscan: "overscan", increaseViewportBy: "increaseViewportBy", totalCount: "totalCount", topItemCount: "topItemCount", initialTopMostItemIndex: "initialTopMostItemIndex", components: "components", groupCounts: "groupCounts", atBottomThreshold: "atBottomThreshold", atTopThreshold: "atTopThreshold", computeItemKey: "computeItemKey", defaultItemHeight: "defaultItemHeight", fixedItemHeight: "fixedItemHeight", itemSize: "itemSize", scrollSeekConfiguration: "scrollSeekConfiguration", data: "data", initialItemCount: "initialItemCount", initialScrollTop: "initialScrollTop", alignToBottom: "alignToBottom", useWindowScroll: "useWindowScroll", customScrollParent: "customScrollParent", scrollerRef: "scrollerRef", logLevel: "logLevel", react18ConcurrentRendering: "react18ConcurrentRendering" }, methods: { scrollToIndex: "scrollToIndex", scrollIntoView: "scrollIntoView", scrollTo: "scrollTo", scrollBy: "scrollBy" }, events: { isScrolling: "isScrolling", endReached: "endReached", startReached: "startReached", rangeChanged: "rangeChanged", atBottomStateChange: "atBottomStateChange", atTopStateChange: "atTopStateChange", totalListHeightChanged: "totalListHeightChanged", itemsRendered: "itemsRendered", groupIndices: "groupIndices" } }, n.memo(function(t) {
    var r2 = tn("useWindowScroll"), o2 = tn("customScrollParent"), i7 = Xe("fixedHeaderHeight"), a4 = tn("fixedHeaderContent"), l2 = tn("context"), s3 = I(compose3(i7, function(t2) {
      return T(t2, "height");
    })), c3 = o2 || r2 ? rn : nn, m2 = o2 || r2 ? Je : Ze, d2 = tn("TableComponent"), f2 = tn("TableHeadComponent"), p3 = a4 ? n.createElement(f2, u2({ key: "TableHead", style: { zIndex: 1, position: "sticky", top: 0 }, ref: s3 }, ne(f2, l2)), a4()) : null;
    return n.createElement(c3, u2({}, t), n.createElement(m2, null, n.createElement(d2, u2({ style: { borderSpacing: 0 } }, ne(d2, l2)), [p3, n.createElement(qe, { key: "TableBody" })])));
  }));
  var Qe = $e.Component;
  var Xe = $e.usePublisher;
  var tn = $e.useEmitterValue;
  var en = $e.useEmitter;
  var nn = ie({ usePublisher: Xe, useEmitterValue: tn, useEmitter: en });
  var rn = ae({ usePublisher: Xe, useEmitterValue: tn, useEmitter: en });
  var on7 = me;

  // output/React.Virtuoso/foreign.js
  var virtuosoImpl = on7;

  // output/UI.GithubLogin.UseGithubGraphQL/index.js
  var coerceHook12 = /* @__PURE__ */ coerceHook();
  var bind44 = /* @__PURE__ */ bind2(ixBindRender);
  var pure50 = /* @__PURE__ */ pure(applicativeNonEmptyList);
  var pure116 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useGithubGraphQL = function(dictWriteForeign) {
    var githubGraphQLQuery2 = githubGraphQLQuery(dictWriteForeign);
    return function(dictReadForeign) {
      var readJSON4 = readJSON(dictReadForeign);
      return function(ctx) {
        return function(query) {
          return coerceHook12(bind44(useIPCMessage(ctx))(function(v2) {
            var send = function(v1) {
              var gqlQ = graphQLQuery(query)(v1);
              return v2.value1.value0(new QueryGithubGraphQL(githubGraphQLQuery2(gqlQ)));
            };
            var result = function() {
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GithubGraphQLResult && v2.value0.value0.value0 instanceof Succeeded)) {
                return fromEither(readJSON4(v2.value0.value0.value0.value0));
              }
              ;
              if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GithubGraphQLResult && v2.value0.value0.value0 instanceof Failed)) {
                return new Failure(pure50(new ForeignError("no github token")));
              }
              ;
              if (v2.value0 instanceof Success2) {
                return new Failure(pure50(new ForeignError("Invalid response")));
              }
              ;
              if (v2.value0 instanceof Failure) {
                return new Failure(pure50(new ForeignError("IPC Problem")));
              }
              ;
              if (v2.value0 instanceof Loading2) {
                return Loading2.value;
              }
              ;
              if (v2.value0 instanceof NotAsked) {
                return NotAsked.value;
              }
              ;
              throw new Error("Failed pattern match at UI.GithubLogin.UseGithubGraphQL (line 41, column 7 - line 49, column 34): " + [v2.value0.constructor.name]);
            }();
            return pure116(new Tuple(result, send));
          }));
        };
      };
    };
  };
  var useDynamicGithubGraphQL = function(dictWriteForeign) {
    var githubGraphQLQuery2 = githubGraphQLQuery(dictWriteForeign);
    return function(dictReadForeign) {
      var readJSON4 = readJSON(dictReadForeign);
      return function(ctx) {
        return coerceHook12(bind44(useIPCMessage(ctx))(function(v2) {
          var send = function(query) {
            return function(v1) {
              var gqlQ = graphQLQuery(query)(v1);
              return v2.value1.value0(new QueryGithubGraphQL(githubGraphQLQuery2(gqlQ)));
            };
          };
          var result = function() {
            if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GithubGraphQLResult && v2.value0.value0.value0 instanceof Succeeded)) {
              return fromEither(readJSON4(v2.value0.value0.value0.value0));
            }
            ;
            if (v2.value0 instanceof Success2 && (v2.value0.value0 instanceof GithubGraphQLResult && v2.value0.value0.value0 instanceof Failed)) {
              return new Failure(pure50(new ForeignError("no github token")));
            }
            ;
            if (v2.value0 instanceof Success2) {
              return new Failure(pure50(new ForeignError("Invalid response")));
            }
            ;
            if (v2.value0 instanceof Failure) {
              return new Failure(pure50(new ForeignError("IPC Problem")));
            }
            ;
            if (v2.value0 instanceof Loading2) {
              return Loading2.value;
            }
            ;
            if (v2.value0 instanceof NotAsked) {
              return NotAsked.value;
            }
            ;
            throw new Error("Failed pattern match at UI.GithubLogin.UseGithubGraphQL (line 71, column 7 - line 79, column 34): " + [v2.value0.constructor.name]);
          }();
          return pure116(new Tuple(result, send));
        }));
      };
    };
  };

  // output/UI.Hook.UseGetFileInRepo/index.js
  var bind45 = /* @__PURE__ */ bind2(ixBindRender);
  var readForeignRecord5 = /* @__PURE__ */ readForeignRecord();
  var useGithubGraphQL2 = /* @__PURE__ */ useGithubGraphQL(/* @__PURE__ */ writeForeignRecord()(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "name";
    }
  })(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "owner";
    }
  })(writeForeignString)(/* @__PURE__ */ writeForeignFieldsCons({
    reflectSymbol: function() {
      return "revision_and_file";
    }
  })(writeForeignString)(writeForeignFieldsNilRowR)()()())()()())()()()))(/* @__PURE__ */ readForeignRecord5(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "data";
    }
  })(/* @__PURE__ */ readForeignRecord5(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "repository";
    }
  })(/* @__PURE__ */ readForeignRecord5(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "object";
    }
  })(/* @__PURE__ */ readForeignRecord5(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "text";
    }
  })(readForeignString)(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()));
  var pure51 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mapFlipped18 = /* @__PURE__ */ mapFlipped(functorRemoteData);
  var getFileInRepoQuery = "\nquery RepoFiles($owner: String!, $name: String!, $revision_and_file:String!) {\n  repository(owner: $owner, name: $name) {\n    object(expression: $revision_and_file) {\n      ... on Blob {\n        text\n      }\n    }\n  }\n}";
  var useGetTextFileInRepo = function(ctx) {
    return bind45(useGithubGraphQL2(ctx)(getFileInRepoQuery))(function(v2) {
      return pure51(new Tuple(mapFlipped18(v2.value0)(function(v1) {
        return v1.data.repository.object.text;
      }), v2.value1));
    });
  };

  // output/UI.MainPane.Style/index.js
  var mainViewHeight = /* @__PURE__ */ function() {
    return str("calc(100vh - " + (show(showInt)(headerBarHeight) + "px)"));
  }();

  // assets/duck.png
  var duck_default = "./duck-KMBLI7HM.png";

  // assets/not-found.png
  var not_found_default = "./not-found-GAQ6XQLM.png";

  // output/UI.Navigation.HeaderBar.GithubAvatar/foreign.js
  var duckImage = duck_default;
  var notFoundImage = not_found_default;

  // output/UI.GithubLogin.GithubLogo/index.js
  var githubLogo = /* @__PURE__ */ svg2()({
    viewBox: "0 0 1024 1024",
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    children: [/* @__PURE__ */ path()({
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M512 0C229.12 0 0 229.12 0 512c0 226.56 146.56 417.92 350.08 485.76 25.6 4.48 35.2-10.88 35.2-24.32 0-12.16-.64-52.48-.64-95.36-128.64 23.68-161.92-31.36-172.16-60.16-5.76-14.72-30.72-60.16-52.48-72.32-17.92-9.6-43.52-33.28-.64-33.92 40.32-.64 69.12 37.12 78.72 52.48 46.08 77.44 119.68 55.68 149.12 42.24 4.48-33.28 17.92-55.68 32.64-68.48-113.92-12.8-232.96-56.96-232.96-252.8 0-55.68 19.84-101.76 52.48-137.6-5.12-12.8-23.04-65.28 5.12-135.68 0 0 42.88-13.44 140.8 52.48 40.96-11.52 84.48-17.28 128-17.28 43.52 0 87.04 5.76 128 17.28 97.92-66.56 140.8-52.48 140.8-52.48 28.16 70.4 10.24 122.88 5.12 135.68 32.64 35.84 52.48 81.28 52.48 137.6 0 196.48-119.68 240-233.6 252.8 18.56 16 34.56 46.72 34.56 94.72 0 68.48-.64 123.52-.64 140.8 0 13.44 9.6 29.44 35.2 24.32C877.44 929.92 1024 737.92 1024 512 1024 229.12 794.88 0 512 0z",
      fill: "currentColor"
    })]
  });

  // node_modules/@react-aria/overlays/dist/module.js
  var import_react51 = __toESM(require_react());

  // node_modules/@react-aria/utils/dist/module.js
  var import_react47 = __toESM(require_react());

  // node_modules/@react-aria/ssr/dist/module.js
  var import_react45 = __toESM(require_react());
  function $parcel$export(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $704cf1d3b684cc5c$exports = {};
  $parcel$export($704cf1d3b684cc5c$exports, "SSRProvider", () => $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae);
  $parcel$export($704cf1d3b684cc5c$exports, "useSSRSafeId", () => $704cf1d3b684cc5c$export$619500959fc48b26);
  $parcel$export($704cf1d3b684cc5c$exports, "useIsSSR", () => $704cf1d3b684cc5c$export$535bd6ca7f90a273);
  var $704cf1d3b684cc5c$var$defaultContext = {
    prefix: String(Math.round(Math.random() * 1e10)),
    current: 0
  };
  var $704cf1d3b684cc5c$var$SSRContext = /* @__PURE__ */ import_react45.default.createContext($704cf1d3b684cc5c$var$defaultContext);
  function $704cf1d3b684cc5c$export$9f8ac96af4b1b2ae(props) {
    let cur = (0, import_react45.useContext)($704cf1d3b684cc5c$var$SSRContext);
    let value12 = (0, import_react45.useMemo)(() => ({
      prefix: cur === $704cf1d3b684cc5c$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
      current: 0
    }), [
      cur
    ]);
    return /* @__PURE__ */ import_react45.default.createElement($704cf1d3b684cc5c$var$SSRContext.Provider, {
      value: value12
    }, props.children);
  }
  var $704cf1d3b684cc5c$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
  function $704cf1d3b684cc5c$export$619500959fc48b26(defaultId) {
    let ctx = (0, import_react45.useContext)($704cf1d3b684cc5c$var$SSRContext);
    if (ctx === $704cf1d3b684cc5c$var$defaultContext && !$704cf1d3b684cc5c$var$canUseDOM)
      console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
    return (0, import_react45.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [
      defaultId
    ]);
  }
  function $704cf1d3b684cc5c$export$535bd6ca7f90a273() {
    let cur = (0, import_react45.useContext)($704cf1d3b684cc5c$var$SSRContext);
    let isInSSRContext = cur !== $704cf1d3b684cc5c$var$defaultContext;
    let [isSSR, setIsSSR] = (0, import_react45.useState)(isInSSRContext);
    if (typeof window !== "undefined" && isInSSRContext)
      (0, import_react45.useLayoutEffect)(() => {
        setIsSSR(false);
      }, []);
    return isSSR;
  }

  // node_modules/clsx/dist/clsx.m.js
  function toVal(mix2) {
    var k2, y2, str2 = "";
    if (typeof mix2 === "string" || typeof mix2 === "number") {
      str2 += mix2;
    } else if (typeof mix2 === "object") {
      if (Array.isArray(mix2)) {
        for (k2 = 0; k2 < mix2.length; k2++) {
          if (mix2[k2]) {
            if (y2 = toVal(mix2[k2])) {
              str2 && (str2 += " ");
              str2 += y2;
            }
          }
        }
      } else {
        for (k2 in mix2) {
          if (mix2[k2]) {
            str2 && (str2 += " ");
            str2 += k2;
          }
        }
      }
    }
    return str2;
  }
  function clsx() {
    var i7 = 0, tmp, x3, str2 = "";
    while (i7 < arguments.length) {
      if (tmp = arguments[i7++]) {
        if (x3 = toVal(tmp)) {
          str2 && (str2 += " ");
          str2 += x3;
        }
      }
    }
    return str2;
  }
  var clsx_m_default = clsx;

  // node_modules/@react-stately/utils/dist/module.js
  var import_react46 = __toESM(require_react());
  function $parcel$export2(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $458b0a5536c1a7cf$exports = {};
  $parcel$export2($458b0a5536c1a7cf$exports, "useControlledState", () => $458b0a5536c1a7cf$export$40bfa8c7b0832715);
  function $458b0a5536c1a7cf$export$40bfa8c7b0832715(value1, defaultValue4, onChange) {
    let [stateValue, setStateValue] = (0, import_react46.useState)(value1 || defaultValue4);
    let ref = (0, import_react46.useRef)(value1 !== void 0);
    let wasControlled = ref.current;
    let isControlled = value1 !== void 0;
    let stateRef = (0, import_react46.useRef)(stateValue);
    if (wasControlled !== isControlled)
      console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
    ref.current = isControlled;
    let setValue12 = (0, import_react46.useCallback)((value22, ...args) => {
      let onChangeCaller = (value12, ...onChangeArgs) => {
        if (onChange) {
          if (!Object.is(stateRef.current, value12))
            onChange(value12, ...onChangeArgs);
        }
        if (!isControlled)
          stateRef.current = value12;
      };
      if (typeof value22 === "function") {
        console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
        let updateFunction = (oldValue, ...functionArgs) => {
          let interceptedValue = value22(isControlled ? stateRef.current : oldValue, ...functionArgs);
          onChangeCaller(interceptedValue, ...args);
          if (!isControlled)
            return interceptedValue;
          return oldValue;
        };
        setStateValue(updateFunction);
      } else {
        if (!isControlled)
          setStateValue(value22);
        onChangeCaller(value22, ...args);
      }
    }, [
      isControlled,
      onChange
    ]);
    if (isControlled)
      stateRef.current = value1;
    else
      value1 = stateValue;
    return [
      value1,
      setValue12
    ];
  }
  var $9446cca9a3875146$exports = {};
  $parcel$export2($9446cca9a3875146$exports, "clamp", () => $9446cca9a3875146$export$7d15b64cf5a3a4c4);
  $parcel$export2($9446cca9a3875146$exports, "snapValueToStep", () => $9446cca9a3875146$export$cb6e0bb50bc19463);
  $parcel$export2($9446cca9a3875146$exports, "toFixedNumber", () => $9446cca9a3875146$export$b6268554fba451f);
  function $9446cca9a3875146$export$7d15b64cf5a3a4c4(value12, min8 = -Infinity, max7 = Infinity) {
    let newValue = Math.min(Math.max(value12, min8), max7);
    return newValue;
  }
  function $9446cca9a3875146$export$cb6e0bb50bc19463(value12, min8, max7, step3) {
    let remainder2 = (value12 - (isNaN(min8) ? 0 : min8)) % step3;
    let snappedValue = Math.abs(remainder2) * 2 >= step3 ? value12 + Math.sign(remainder2) * (step3 - Math.abs(remainder2)) : value12 - remainder2;
    if (!isNaN(min8)) {
      if (snappedValue < min8)
        snappedValue = min8;
      else if (!isNaN(max7) && snappedValue > max7)
        snappedValue = min8 + Math.floor((max7 - min8) / step3) * step3;
    } else if (!isNaN(max7) && snappedValue > max7)
      snappedValue = Math.floor(max7 / step3) * step3;
    let string = step3.toString();
    let index6 = string.indexOf(".");
    let precision = index6 >= 0 ? string.length - index6 : 0;
    if (precision > 0) {
      let pow3 = Math.pow(10, precision);
      snappedValue = Math.round(snappedValue * pow3) / pow3;
    }
    return snappedValue;
  }
  function $9446cca9a3875146$export$b6268554fba451f(value12, digits, base2 = 10) {
    const pow3 = Math.pow(base2, digits);
    return Math.round(value12 * pow3) / pow3;
  }

  // node_modules/@react-aria/utils/dist/module.js
  function $parcel$export3(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $bdb11010cef70236$exports = {};
  $parcel$export3($bdb11010cef70236$exports, "useId", () => $bdb11010cef70236$export$f680877a34711e37);
  $parcel$export3($bdb11010cef70236$exports, "mergeIds", () => $bdb11010cef70236$export$cd8c9cb68f842629);
  $parcel$export3($bdb11010cef70236$exports, "useSlotId", () => $bdb11010cef70236$export$b4cc09c592e8fdb8);
  var $f0a04ccd8dbdd83b$exports = {};
  $parcel$export3($f0a04ccd8dbdd83b$exports, "useLayoutEffect", () => $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c);
  var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? import_react47.default.useLayoutEffect : () => {
  };
  var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
  function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
    let [value12, setValue12] = (0, import_react47.useState)(defaultId);
    let nextId = (0, import_react47.useRef)(null);
    let res = $704cf1d3b684cc5c$export$619500959fc48b26(value12);
    let updateValue = (0, import_react47.useCallback)((val) => {
      nextId.current = val;
    }, []);
    $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      let r2 = res;
      return () => {
        $bdb11010cef70236$var$idsUpdaterMap.delete(r2);
      };
    }, [
      res
    ]);
    (0, import_react47.useEffect)(() => {
      let newId = nextId.current;
      if (newId) {
        nextId.current = null;
        setValue12(newId);
      }
    });
    return res;
  }
  function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
    if (idA === idB)
      return idA;
    let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
    if (setIdA) {
      setIdA(idB);
      return idB;
    }
    let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
    if (setIdB) {
      setIdB(idA);
      return idA;
    }
    return idB;
  }
  function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
    let id5 = $bdb11010cef70236$export$f680877a34711e37();
    let [resolvedId, setResolvedId] = $1dbecbe27a04f9af$export$14d238f342723f25(id5);
    let updateId = (0, import_react47.useCallback)(() => {
      setResolvedId(function* () {
        yield id5;
        yield document.getElementById(id5) ? id5 : null;
      });
    }, [
      id5,
      setResolvedId
    ]);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [
      id5,
      updateId,
      ...depArray
    ]);
    return resolvedId;
  }
  var $ff5963eb1fccf552$exports = {};
  $parcel$export3($ff5963eb1fccf552$exports, "chain", () => $ff5963eb1fccf552$export$e08e3b67e392101e);
  function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
    return (...args) => {
      for (let callback2 of callbacks)
        if (typeof callback2 === "function")
          callback2(...args);
    };
  }
  var $3ef42575df84b30b$exports = {};
  $parcel$export3($3ef42575df84b30b$exports, "mergeProps", () => $3ef42575df84b30b$export$9d1611c77c2fe928);
  function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
    let result = {
      ...args[0]
    };
    for (let i7 = 1; i7 < args.length; i7++) {
      let props = args[i7];
      for (let key in props) {
        let a4 = result[key];
        let b4 = props[key];
        if (typeof a4 === "function" && typeof b4 === "function" && key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= 65 && key.charCodeAt(2) <= 90)
          result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a4, b4);
        else if ((key === "className" || key === "UNSAFE_className") && typeof a4 === "string" && typeof b4 === "string")
          result[key] = clsx_m_default(a4, b4);
        else if (key === "id" && a4 && b4)
          result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a4, b4);
        else
          result[key] = b4 !== void 0 ? b4 : a4;
      }
    }
    return result;
  }
  var $5dc95899b306f630$exports = {};
  $parcel$export3($5dc95899b306f630$exports, "mergeRefs", () => $5dc95899b306f630$export$c9058316764c140e);
  function $5dc95899b306f630$export$c9058316764c140e(...refs) {
    return (value12) => {
      for (let ref of refs) {
        if (typeof ref === "function")
          ref(value12);
        else if (ref != null)
          ref.current = value12;
      }
    };
  }
  var $65484d02dcb7eb3e$exports = {};
  $parcel$export3($65484d02dcb7eb3e$exports, "filterDOMProps", () => $65484d02dcb7eb3e$export$457c3d6518dd4c6f);
  var $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
    "id"
  ]);
  var $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
    "aria-label",
    "aria-labelledby",
    "aria-describedby",
    "aria-details"
  ]);
  var $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
  function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
    let { labelable, propNames } = opts;
    let filteredProps = {};
    for (const prop3 in props)
      if (Object.prototype.hasOwnProperty.call(props, prop3) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop3) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop3) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop3)) || $65484d02dcb7eb3e$var$propRe.test(prop3)))
        filteredProps[prop3] = props[prop3];
    return filteredProps;
  }
  var $7215afc6de606d6b$exports = {};
  $parcel$export3($7215afc6de606d6b$exports, "focusWithoutScrolling", () => $7215afc6de606d6b$export$de79e2c695e052f3);
  function $7215afc6de606d6b$export$de79e2c695e052f3(element3) {
    if ($7215afc6de606d6b$var$supportsPreventScroll())
      element3.focus({
        preventScroll: true
      });
    else {
      let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element3);
      element3.focus();
      $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
    }
  }
  var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
  function $7215afc6de606d6b$var$supportsPreventScroll() {
    if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
      $7215afc6de606d6b$var$supportsPreventScrollCached = false;
      try {
        var focusElem = document.createElement("div");
        focusElem.focus({
          get preventScroll() {
            $7215afc6de606d6b$var$supportsPreventScrollCached = true;
            return true;
          }
        });
      } catch (e) {
      }
    }
    return $7215afc6de606d6b$var$supportsPreventScrollCached;
  }
  function $7215afc6de606d6b$var$getScrollableElements(element3) {
    var parent2 = element3.parentNode;
    var scrollableElements = [];
    var rootScrollingElement = document.scrollingElement || document.documentElement;
    while (parent2 instanceof HTMLElement && parent2 !== rootScrollingElement) {
      if (parent2.offsetHeight < parent2.scrollHeight || parent2.offsetWidth < parent2.scrollWidth)
        scrollableElements.push({
          element: parent2,
          scrollTop: parent2.scrollTop,
          scrollLeft: parent2.scrollLeft
        });
      parent2 = parent2.parentNode;
    }
    if (rootScrollingElement instanceof HTMLElement)
      scrollableElements.push({
        element: rootScrollingElement,
        scrollTop: rootScrollingElement.scrollTop,
        scrollLeft: rootScrollingElement.scrollLeft
      });
    return scrollableElements;
  }
  function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
    for (let { element: element3, scrollTop: scrollTop2, scrollLeft: scrollLeft2 } of scrollableElements) {
      element3.scrollTop = scrollTop2;
      element3.scrollLeft = scrollLeft2;
    }
  }
  var $ab71dadb03a6fb2e$exports = {};
  $parcel$export3($ab71dadb03a6fb2e$exports, "getOffset", () => $ab71dadb03a6fb2e$export$622cea445a1c5b7d);
  function $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element3, reverse3, orientation = "horizontal") {
    let rect3 = element3.getBoundingClientRect();
    if (reverse3)
      return orientation === "horizontal" ? rect3.right : rect3.bottom;
    return orientation === "horizontal" ? rect3.left : rect3.top;
  }
  var $103b0e103f1b5952$exports = {};
  $parcel$export3($103b0e103f1b5952$exports, "clamp", () => $9446cca9a3875146$export$7d15b64cf5a3a4c4);
  $parcel$export3($103b0e103f1b5952$exports, "snapValueToStep", () => $9446cca9a3875146$export$cb6e0bb50bc19463);
  var $bbed8b41f857bcc0$exports = {};
  $parcel$export3($bbed8b41f857bcc0$exports, "runAfterTransition", () => $bbed8b41f857bcc0$export$24490316f764c430);
  var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
  var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
  function $bbed8b41f857bcc0$var$setupGlobalEvents() {
    if (typeof window === "undefined")
      return;
    let onTransitionStart = (e) => {
      let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
      if (!transitions) {
        transitions = /* @__PURE__ */ new Set();
        $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions);
        e.target.addEventListener("transitioncancel", onTransitionEnd);
      }
      transitions.add(e.propertyName);
    };
    let onTransitionEnd = (e) => {
      let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
      if (!properties)
        return;
      properties.delete(e.propertyName);
      if (properties.size === 0) {
        e.target.removeEventListener("transitioncancel", onTransitionEnd);
        $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
      }
      if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
        for (let cb2 of $bbed8b41f857bcc0$var$transitionCallbacks)
          cb2();
        $bbed8b41f857bcc0$var$transitionCallbacks.clear();
      }
    };
    document.body.addEventListener("transitionrun", onTransitionStart);
    document.body.addEventListener("transitionend", onTransitionEnd);
  }
  if (typeof document !== "undefined") {
    if (document.readyState !== "loading")
      $bbed8b41f857bcc0$var$setupGlobalEvents();
    else
      document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
  }
  function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
    requestAnimationFrame(() => {
      if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0)
        fn();
      else
        $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
    });
  }
  var $9cc09df9fd7676be$exports = {};
  $parcel$export3($9cc09df9fd7676be$exports, "useDrag1D", () => $9cc09df9fd7676be$export$7bbed75feba39706);
  var $9cc09df9fd7676be$var$draggingElements = [];
  function $9cc09df9fd7676be$export$7bbed75feba39706(props) {
    console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
    let { containerRef, reverse: reverse3, orientation, onHover, onDrag: onDrag2, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle } = props;
    let getPosition = (e) => orientation === "horizontal" ? e.clientX : e.clientY;
    let getNextOffset = (e) => {
      let containerOffset = $ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse3, orientation);
      let mouseOffset = getPosition(e);
      let nextOffset = reverse3 ? containerOffset - mouseOffset : mouseOffset - containerOffset;
      return nextOffset;
    };
    let dragging = (0, import_react47.useRef)(false);
    let prevPosition = (0, import_react47.useRef)(0);
    let handlers = (0, import_react47.useRef)({
      onPositionChange,
      onDrag: onDrag2
    });
    handlers.current.onDrag = onDrag2;
    handlers.current.onPositionChange = onPositionChange;
    let onMouseDragged = (e) => {
      e.preventDefault();
      let nextOffset = getNextOffset(e);
      if (!dragging.current) {
        dragging.current = true;
        if (handlers.current.onDrag)
          handlers.current.onDrag(true);
        if (handlers.current.onPositionChange)
          handlers.current.onPositionChange(nextOffset);
      }
      if (prevPosition.current === nextOffset)
        return;
      prevPosition.current = nextOffset;
      if (onPositionChange)
        onPositionChange(nextOffset);
    };
    let onMouseUp = (e) => {
      const target6 = e.target;
      dragging.current = false;
      let nextOffset = getNextOffset(e);
      if (handlers.current.onDrag)
        handlers.current.onDrag(false);
      if (handlers.current.onPositionChange)
        handlers.current.onPositionChange(nextOffset);
      $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target6), 1);
      window.removeEventListener("mouseup", onMouseUp, false);
      window.removeEventListener("mousemove", onMouseDragged, false);
    };
    let onMouseDown = (e) => {
      const target6 = e.currentTarget;
      if ($9cc09df9fd7676be$var$draggingElements.some((elt) => target6.contains(elt)))
        return;
      $9cc09df9fd7676be$var$draggingElements.push(target6);
      window.addEventListener("mousemove", onMouseDragged, false);
      window.addEventListener("mouseup", onMouseUp, false);
    };
    let onMouseEnter = () => {
      if (onHover)
        onHover(true);
    };
    let onMouseOut = () => {
      if (onHover)
        onHover(false);
    };
    let onKeyDown = (e) => {
      switch (e.key) {
        case "Left":
        case "ArrowLeft":
          if (orientation === "horizontal") {
            e.preventDefault();
            if (onDecrement && !reverse3)
              onDecrement();
            else if (onIncrement && reverse3)
              onIncrement();
          }
          break;
        case "Up":
        case "ArrowUp":
          if (orientation === "vertical") {
            e.preventDefault();
            if (onDecrement && !reverse3)
              onDecrement();
            else if (onIncrement && reverse3)
              onIncrement();
          }
          break;
        case "Right":
        case "ArrowRight":
          if (orientation === "horizontal") {
            e.preventDefault();
            if (onIncrement && !reverse3)
              onIncrement();
            else if (onDecrement && reverse3)
              onDecrement();
          }
          break;
        case "Down":
        case "ArrowDown":
          if (orientation === "vertical") {
            e.preventDefault();
            if (onIncrement && !reverse3)
              onIncrement();
            else if (onDecrement && reverse3)
              onDecrement();
          }
          break;
        case "Home":
          e.preventDefault();
          if (onDecrementToMin)
            onDecrementToMin();
          break;
        case "End":
          e.preventDefault();
          if (onIncrementToMax)
            onIncrementToMax();
          break;
        case "Enter":
          e.preventDefault();
          if (onCollapseToggle)
            onCollapseToggle();
          break;
      }
    };
    return {
      onMouseDown,
      onMouseEnter,
      onMouseOut,
      onKeyDown
    };
  }
  var $03deb23ff14920c4$exports = {};
  $parcel$export3($03deb23ff14920c4$exports, "useGlobalListeners", () => $03deb23ff14920c4$export$4eaf04e54aa8eed6);
  function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
    let globalListeners = (0, import_react47.useRef)(/* @__PURE__ */ new Map());
    let addGlobalListener = (0, import_react47.useCallback)((eventTarget, type, listener, options3) => {
      let fn = (options3 === null || options3 === void 0 ? void 0 : options3.once) ? (...args) => {
        globalListeners.current.delete(listener);
        listener(...args);
      } : listener;
      globalListeners.current.set(listener, {
        type,
        eventTarget,
        fn,
        options: options3
      });
      eventTarget.addEventListener(type, listener, options3);
    }, []);
    let removeGlobalListener = (0, import_react47.useCallback)((eventTarget, type, listener, options3) => {
      var ref;
      let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
      eventTarget.removeEventListener(type, fn, options3);
      globalListeners.current.delete(listener);
    }, []);
    let removeAllGlobalListeners = (0, import_react47.useCallback)(() => {
      globalListeners.current.forEach((value12, key) => {
        removeGlobalListener(value12.eventTarget, value12.type, key, value12.options);
      });
    }, [
      removeGlobalListener
    ]);
    (0, import_react47.useEffect)(() => {
      return removeAllGlobalListeners;
    }, [
      removeAllGlobalListeners
    ]);
    return {
      addGlobalListener,
      removeGlobalListener,
      removeAllGlobalListeners
    };
  }
  var $313b98861ee5dd6c$exports = {};
  $parcel$export3($313b98861ee5dd6c$exports, "useLabels", () => $313b98861ee5dd6c$export$d6875122194c7b44);
  function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
    let { id: id5, "aria-label": label6, "aria-labelledby": labelledBy } = props;
    id5 = $bdb11010cef70236$export$f680877a34711e37(id5);
    if (labelledBy && label6) {
      let ids = /* @__PURE__ */ new Set([
        ...labelledBy.trim().split(/\s+/),
        id5
      ]);
      labelledBy = [
        ...ids
      ].join(" ");
    } else if (labelledBy)
      labelledBy = labelledBy.trim().split(/\s+/).join(" ");
    if (!label6 && !labelledBy && defaultLabel)
      label6 = defaultLabel;
    return {
      id: id5,
      "aria-label": label6,
      "aria-labelledby": labelledBy
    };
  }
  var $df56164dff5785e2$exports = {};
  $parcel$export3($df56164dff5785e2$exports, "useObjectRef", () => $df56164dff5785e2$export$4338b53315abf666);
  function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
    const objRef = (0, import_react47.useRef)();
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (!forwardedRef)
        return;
      if (typeof forwardedRef === "function")
        forwardedRef(objRef.current);
      else
        forwardedRef.current = objRef.current;
    }, [
      forwardedRef
    ]);
    return objRef;
  }
  var $4f58c5f72bcf79f7$exports = {};
  $parcel$export3($4f58c5f72bcf79f7$exports, "useUpdateEffect", () => $4f58c5f72bcf79f7$export$496315a1608d9602);
  function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
    const isInitialMount = (0, import_react47.useRef)(true);
    (0, import_react47.useEffect)(() => {
      if (isInitialMount.current)
        isInitialMount.current = false;
      else
        effect();
    }, dependencies);
  }
  var $9daab02d461809db$exports = {};
  $parcel$export3($9daab02d461809db$exports, "useResizeObserver", () => $9daab02d461809db$export$683480f191c0e3ea);
  function $9daab02d461809db$var$hasResizeObserver() {
    return typeof window.ResizeObserver !== "undefined";
  }
  function $9daab02d461809db$export$683480f191c0e3ea(options3) {
    const { ref, onResize } = options3;
    (0, import_react47.useEffect)(() => {
      let element3 = ref === null || ref === void 0 ? void 0 : ref.current;
      if (!element3)
        return;
      if (!$9daab02d461809db$var$hasResizeObserver()) {
        window.addEventListener("resize", onResize, false);
        return () => {
          window.removeEventListener("resize", onResize, false);
        };
      } else {
        const resizeObserverInstance = new window.ResizeObserver((entries) => {
          if (!entries.length)
            return;
          onResize();
        });
        resizeObserverInstance.observe(element3);
        return () => {
          if (element3)
            resizeObserverInstance.unobserve(element3);
        };
      }
    }, [
      onResize,
      ref
    ]);
  }
  var $e7801be82b4b2a53$exports = {};
  $parcel$export3($e7801be82b4b2a53$exports, "useSyncRef", () => $e7801be82b4b2a53$export$4debdb1a3f0fa79e);
  function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (context && context.ref && ref) {
        context.ref.current = ref.current;
        return () => {
          context.ref.current = null;
        };
      }
    }, [
      context,
      ref
    ]);
  }
  var $62d8ded9296f3872$exports = {};
  $parcel$export3($62d8ded9296f3872$exports, "getScrollParent", () => $62d8ded9296f3872$export$cfa2225e87938781);
  function $62d8ded9296f3872$export$cfa2225e87938781(node2) {
    while (node2 && !$62d8ded9296f3872$var$isScrollable(node2))
      node2 = node2.parentElement;
    return node2 || document.scrollingElement || document.documentElement;
  }
  function $62d8ded9296f3872$var$isScrollable(node2) {
    let style3 = window.getComputedStyle(node2);
    return /(auto|scroll)/.test(style3.overflow + style3.overflowX + style3.overflowY);
  }
  var $5df64b3807dc15ee$exports = {};
  $parcel$export3($5df64b3807dc15ee$exports, "useViewportSize", () => $5df64b3807dc15ee$export$d699905dd57c73ca);
  var $5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
  function $5df64b3807dc15ee$export$d699905dd57c73ca() {
    let [size1, setSize3] = (0, import_react47.useState)(() => $5df64b3807dc15ee$var$getViewportSize());
    (0, import_react47.useEffect)(() => {
      let onResize = () => {
        setSize3((size5) => {
          let newSize = $5df64b3807dc15ee$var$getViewportSize();
          if (newSize.width === size5.width && newSize.height === size5.height)
            return size5;
          return newSize;
        });
      };
      if (!$5df64b3807dc15ee$var$visualViewport)
        window.addEventListener("resize", onResize);
      else
        $5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
      return () => {
        if (!$5df64b3807dc15ee$var$visualViewport)
          window.removeEventListener("resize", onResize);
        else
          $5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
      };
    }, []);
    return size1;
  }
  function $5df64b3807dc15ee$var$getViewportSize() {
    return {
      width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
      height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
    };
  }
  var $ef06256079686ba0$exports = {};
  $parcel$export3($ef06256079686ba0$exports, "useDescription", () => $ef06256079686ba0$export$f8aeda7b10753fa1);
  var $ef06256079686ba0$var$descriptionId = 0;
  var $ef06256079686ba0$var$descriptionNodes = /* @__PURE__ */ new Map();
  function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
    let [id1, setId2] = (0, import_react47.useState)(null);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (!description)
        return;
      let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
      if (!desc) {
        let id5 = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
        setId2(id5);
        let node2 = document.createElement("div");
        node2.id = id5;
        node2.style.display = "none";
        node2.textContent = description;
        document.body.appendChild(node2);
        desc = {
          refCount: 0,
          element: node2
        };
        $ef06256079686ba0$var$descriptionNodes.set(description, desc);
      } else
        setId2(desc.element.id);
      desc.refCount++;
      return () => {
        if (--desc.refCount === 0) {
          desc.element.remove();
          $ef06256079686ba0$var$descriptionNodes.delete(description);
        }
      };
    }, [
      description
    ]);
    return {
      "aria-describedby": description ? id1 : void 0
    };
  }
  var $c87311424ea30a05$exports = {};
  $parcel$export3($c87311424ea30a05$exports, "isMac", () => $c87311424ea30a05$export$9ac100e40613ea10);
  $parcel$export3($c87311424ea30a05$exports, "isIPhone", () => $c87311424ea30a05$export$186c6964ca17d99);
  $parcel$export3($c87311424ea30a05$exports, "isIPad", () => $c87311424ea30a05$export$7bef049ce92e4224);
  $parcel$export3($c87311424ea30a05$exports, "isIOS", () => $c87311424ea30a05$export$fedb369cb70207f1);
  $parcel$export3($c87311424ea30a05$exports, "isAppleDevice", () => $c87311424ea30a05$export$e1865c3bedcd822b);
  $parcel$export3($c87311424ea30a05$exports, "isWebKit", () => $c87311424ea30a05$export$78551043582a6a98);
  $parcel$export3($c87311424ea30a05$exports, "isChrome", () => $c87311424ea30a05$export$6446a186d09e379e);
  $parcel$export3($c87311424ea30a05$exports, "isAndroid", () => $c87311424ea30a05$export$a11b0059900ceec8);
  function $c87311424ea30a05$var$testUserAgent(re2) {
    var ref;
    if (typeof window === "undefined" || window.navigator == null)
      return false;
    return ((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.brands.some((brand) => re2.test(brand.brand))) || re2.test(window.navigator.userAgent);
  }
  function $c87311424ea30a05$var$testPlatform(re2) {
    return typeof window !== "undefined" && window.navigator != null ? re2.test((window.navigator["userAgentData"] || window.navigator).platform) : false;
  }
  function $c87311424ea30a05$export$9ac100e40613ea10() {
    return $c87311424ea30a05$var$testPlatform(/^Mac/i);
  }
  function $c87311424ea30a05$export$186c6964ca17d99() {
    return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
  }
  function $c87311424ea30a05$export$7bef049ce92e4224() {
    return $c87311424ea30a05$var$testPlatform(/^iPad/i) || $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
  }
  function $c87311424ea30a05$export$fedb369cb70207f1() {
    return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
  }
  function $c87311424ea30a05$export$e1865c3bedcd822b() {
    return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
  }
  function $c87311424ea30a05$export$78551043582a6a98() {
    return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
  }
  function $c87311424ea30a05$export$6446a186d09e379e() {
    return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
  }
  function $c87311424ea30a05$export$a11b0059900ceec8() {
    return $c87311424ea30a05$var$testUserAgent(/Android/i);
  }
  var $e9faafb641e167db$exports = {};
  $parcel$export3($e9faafb641e167db$exports, "useEvent", () => $e9faafb641e167db$export$90fc3a17d93f704c);
  function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options3) {
    let handlerRef = (0, import_react47.useRef)(handler1);
    handlerRef.current = handler1;
    let isDisabled = handler1 == null;
    (0, import_react47.useEffect)(() => {
      if (isDisabled)
        return;
      let element3 = ref.current;
      let handler2 = (e) => handlerRef.current.call(this, e);
      element3.addEventListener(event, handler2, options3);
      return () => {
        element3.removeEventListener(event, handler2, options3);
      };
    }, [
      ref,
      event,
      options3,
      isDisabled
    ]);
  }
  var $1dbecbe27a04f9af$exports = {};
  $parcel$export3($1dbecbe27a04f9af$exports, "useValueEffect", () => $1dbecbe27a04f9af$export$14d238f342723f25);
  function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue4) {
    let [value12, setValue12] = (0, import_react47.useState)(defaultValue4);
    let valueRef = (0, import_react47.useRef)(value12);
    let effect = (0, import_react47.useRef)(null);
    valueRef.current = value12;
    let nextRef = (0, import_react47.useRef)(null);
    nextRef.current = () => {
      let newValue = effect.current.next();
      if (newValue.done) {
        effect.current = null;
        return;
      }
      if (value12 === newValue.value)
        nextRef.current();
      else
        setValue12(newValue.value);
    };
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (effect.current)
        nextRef.current();
    });
    let queue = (0, import_react47.useCallback)((fn) => {
      effect.current = fn(valueRef.current);
      nextRef.current();
    }, [
      effect,
      nextRef
    ]);
    return [
      value12,
      queue
    ];
  }
  var $2f04cbc44ee30ce0$exports = {};
  $parcel$export3($2f04cbc44ee30ce0$exports, "scrollIntoView", () => $2f04cbc44ee30ce0$export$53a0910f038337bd);
  function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element3) {
    let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element3, "left");
    let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element3, "top");
    let width9 = element3.offsetWidth;
    let height9 = element3.offsetHeight;
    let x3 = scrollView.scrollLeft;
    let y2 = scrollView.scrollTop;
    let maxX = x3 + scrollView.offsetWidth;
    let maxY = y2 + scrollView.offsetHeight;
    if (offsetX <= x3)
      x3 = offsetX;
    else if (offsetX + width9 > maxX)
      x3 += offsetX + width9 - maxX;
    if (offsetY <= y2)
      y2 = offsetY;
    else if (offsetY + height9 > maxY)
      y2 += offsetY + height9 - maxY;
    scrollView.scrollLeft = x3;
    scrollView.scrollTop = y2;
  }
  function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
    const prop3 = axis === "left" ? "offsetLeft" : "offsetTop";
    let sum3 = 0;
    while (child.offsetParent) {
      sum3 += child[prop3];
      if (child.offsetParent === ancestor)
        break;
      else if (child.offsetParent.contains(ancestor)) {
        sum3 -= ancestor[prop3];
        break;
      }
      child = child.offsetParent;
    }
    return sum3;
  }

  // node_modules/@react-aria/i18n/dist/module.js
  var import_react48 = __toESM(require_react());

  // node_modules/@formatjs/icu-messageformat-parser/lib/error.js
  var ErrorKind;
  (function(ErrorKind2) {
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
    ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
    ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
    ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
    ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
    ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
    ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
    ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
    ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
    ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
    ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
    ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
    ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
    ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
    ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
    ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
    ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
    ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
  })(ErrorKind || (ErrorKind = {}));

  // node_modules/@formatjs/icu-messageformat-parser/lib/types.js
  var TYPE;
  (function(TYPE2) {
    TYPE2[TYPE2["literal"] = 0] = "literal";
    TYPE2[TYPE2["argument"] = 1] = "argument";
    TYPE2[TYPE2["number"] = 2] = "number";
    TYPE2[TYPE2["date"] = 3] = "date";
    TYPE2[TYPE2["time"] = 4] = "time";
    TYPE2[TYPE2["select"] = 5] = "select";
    TYPE2[TYPE2["plural"] = 6] = "plural";
    TYPE2[TYPE2["pound"] = 7] = "pound";
    TYPE2[TYPE2["tag"] = 8] = "tag";
  })(TYPE || (TYPE = {}));
  var SKELETON_TYPE;
  (function(SKELETON_TYPE2) {
    SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
    SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
  })(SKELETON_TYPE || (SKELETON_TYPE = {}));
  function isLiteralElement(el15) {
    return el15.type === TYPE.literal;
  }
  function isArgumentElement(el15) {
    return el15.type === TYPE.argument;
  }
  function isNumberElement(el15) {
    return el15.type === TYPE.number;
  }
  function isDateElement(el15) {
    return el15.type === TYPE.date;
  }
  function isTimeElement(el15) {
    return el15.type === TYPE.time;
  }
  function isSelectElement(el15) {
    return el15.type === TYPE.select;
  }
  function isPluralElement(el15) {
    return el15.type === TYPE.plural;
  }
  function isPoundElement(el15) {
    return el15.type === TYPE.pound;
  }
  function isTagElement(el15) {
    return el15.type === TYPE.tag;
  }
  function isNumberSkeleton(el15) {
    return !!(el15 && typeof el15 === "object" && el15.type === SKELETON_TYPE.number);
  }
  function isDateTimeSkeleton(el15) {
    return !!(el15 && typeof el15 === "object" && el15.type === SKELETON_TYPE.dateTime);
  }

  // node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
  var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

  // node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
  var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
  function parseDateTimeSkeleton(skeleton) {
    var result = {};
    skeleton.replace(DATE_TIME_REGEX, function(match6) {
      var len = match6.length;
      switch (match6[0]) {
        case "G":
          result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
          break;
        case "y":
          result.year = len === 2 ? "2-digit" : "numeric";
          break;
        case "Y":
        case "u":
        case "U":
        case "r":
          throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
        case "q":
        case "Q":
          throw new RangeError("`q/Q` (quarter) patterns are not supported");
        case "M":
        case "L":
          result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
          break;
        case "w":
        case "W":
          throw new RangeError("`w/W` (week) patterns are not supported");
        case "d":
          result.day = ["numeric", "2-digit"][len - 1];
          break;
        case "D":
        case "F":
        case "g":
          throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
        case "E":
          result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
          break;
        case "e":
          if (len < 4) {
            throw new RangeError("`e..eee` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "c":
          if (len < 4) {
            throw new RangeError("`c..ccc` (weekday) patterns are not supported");
          }
          result.weekday = ["short", "long", "narrow", "short"][len - 4];
          break;
        case "a":
          result.hour12 = true;
          break;
        case "b":
        case "B":
          throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
        case "h":
          result.hourCycle = "h12";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "H":
          result.hourCycle = "h23";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "K":
          result.hourCycle = "h11";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "k":
          result.hourCycle = "h24";
          result.hour = ["numeric", "2-digit"][len - 1];
          break;
        case "j":
        case "J":
        case "C":
          throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
        case "m":
          result.minute = ["numeric", "2-digit"][len - 1];
          break;
        case "s":
          result.second = ["numeric", "2-digit"][len - 1];
          break;
        case "S":
        case "A":
          throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
        case "z":
          result.timeZoneName = len < 4 ? "short" : "long";
          break;
        case "Z":
        case "O":
        case "v":
        case "V":
        case "X":
        case "x":
          throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
      }
      return "";
    });
    return result;
  }

  // node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
  var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

  // node_modules/@formatjs/icu-skeleton-parser/lib/number.js
  function parseNumberSkeletonFromString(skeleton) {
    if (skeleton.length === 0) {
      throw new Error("Number skeleton cannot be empty");
    }
    var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x3) {
      return x3.length > 0;
    });
    var tokens = [];
    for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
      var stringToken = stringTokens_1[_i];
      var stemAndOptions = stringToken.split("/");
      if (stemAndOptions.length === 0) {
        throw new Error("Invalid number skeleton");
      }
      var stem = stemAndOptions[0], options3 = stemAndOptions.slice(1);
      for (var _a2 = 0, options_1 = options3; _a2 < options_1.length; _a2++) {
        var option2 = options_1[_a2];
        if (option2.length === 0) {
          throw new Error("Invalid number skeleton");
        }
      }
      tokens.push({ stem, options: options3 });
    }
    return tokens;
  }
  function icuUnitToEcma(unit2) {
    return unit2.replace(/^(.*?)-/, "");
  }
  var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
  var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
  var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
  var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
  function parseSignificantPrecision(str2) {
    var result = {};
    if (str2[str2.length - 1] === "r") {
      result.roundingPriority = "morePrecision";
    } else if (str2[str2.length - 1] === "s") {
      result.roundingPriority = "lessPrecision";
    }
    str2.replace(SIGNIFICANT_PRECISION_REGEX, function(_2, g1, g22) {
      if (typeof g22 !== "string") {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length;
      } else if (g22 === "+") {
        result.minimumSignificantDigits = g1.length;
      } else if (g1[0] === "#") {
        result.maximumSignificantDigits = g1.length;
      } else {
        result.minimumSignificantDigits = g1.length;
        result.maximumSignificantDigits = g1.length + (typeof g22 === "string" ? g22.length : 0);
      }
      return "";
    });
    return result;
  }
  function parseSign(str2) {
    switch (str2) {
      case "sign-auto":
        return {
          signDisplay: "auto"
        };
      case "sign-accounting":
      case "()":
        return {
          currencySign: "accounting"
        };
      case "sign-always":
      case "+!":
        return {
          signDisplay: "always"
        };
      case "sign-accounting-always":
      case "()!":
        return {
          signDisplay: "always",
          currencySign: "accounting"
        };
      case "sign-except-zero":
      case "+?":
        return {
          signDisplay: "exceptZero"
        };
      case "sign-accounting-except-zero":
      case "()?":
        return {
          signDisplay: "exceptZero",
          currencySign: "accounting"
        };
      case "sign-never":
      case "+_":
        return {
          signDisplay: "never"
        };
    }
  }
  function parseConciseScientificAndEngineeringStem(stem) {
    var result;
    if (stem[0] === "E" && stem[1] === "E") {
      result = {
        notation: "engineering"
      };
      stem = stem.slice(2);
    } else if (stem[0] === "E") {
      result = {
        notation: "scientific"
      };
      stem = stem.slice(1);
    }
    if (result) {
      var signDisplay = stem.slice(0, 2);
      if (signDisplay === "+!") {
        result.signDisplay = "always";
        stem = stem.slice(2);
      } else if (signDisplay === "+?") {
        result.signDisplay = "exceptZero";
        stem = stem.slice(2);
      }
      if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
        throw new Error("Malformed concise eng/scientific notation");
      }
      result.minimumIntegerDigits = stem.length;
    }
    return result;
  }
  function parseNotationOptions(opt) {
    var result = {};
    var signOpts = parseSign(opt);
    if (signOpts) {
      return signOpts;
    }
    return result;
  }
  function parseNumberSkeleton(tokens) {
    var result = {};
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
      var token2 = tokens_1[_i];
      switch (token2.stem) {
        case "percent":
        case "%":
          result.style = "percent";
          continue;
        case "%x100":
          result.style = "percent";
          result.scale = 100;
          continue;
        case "currency":
          result.style = "currency";
          result.currency = token2.options[0];
          continue;
        case "group-off":
        case ",_":
          result.useGrouping = false;
          continue;
        case "precision-integer":
        case ".":
          result.maximumFractionDigits = 0;
          continue;
        case "measure-unit":
        case "unit":
          result.style = "unit";
          result.unit = icuUnitToEcma(token2.options[0]);
          continue;
        case "compact-short":
        case "K":
          result.notation = "compact";
          result.compactDisplay = "short";
          continue;
        case "compact-long":
        case "KK":
          result.notation = "compact";
          result.compactDisplay = "long";
          continue;
        case "scientific":
          result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token2.options.reduce(function(all5, opt2) {
            return __assign(__assign({}, all5), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "engineering":
          result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token2.options.reduce(function(all5, opt2) {
            return __assign(__assign({}, all5), parseNotationOptions(opt2));
          }, {}));
          continue;
        case "notation-simple":
          result.notation = "standard";
          continue;
        case "unit-width-narrow":
          result.currencyDisplay = "narrowSymbol";
          result.unitDisplay = "narrow";
          continue;
        case "unit-width-short":
          result.currencyDisplay = "code";
          result.unitDisplay = "short";
          continue;
        case "unit-width-full-name":
          result.currencyDisplay = "name";
          result.unitDisplay = "long";
          continue;
        case "unit-width-iso-code":
          result.currencyDisplay = "symbol";
          continue;
        case "scale":
          result.scale = parseFloat(token2.options[0]);
          continue;
        case "integer-width":
          if (token2.options.length > 1) {
            throw new RangeError("integer-width stems only accept a single optional option");
          }
          token2.options[0].replace(INTEGER_WIDTH_REGEX, function(_2, g1, g22, g3, g4, g5) {
            if (g1) {
              result.minimumIntegerDigits = g22.length;
            } else if (g3 && g4) {
              throw new Error("We currently do not support maximum integer digits");
            } else if (g5) {
              throw new Error("We currently do not support exact integer digits");
            }
            return "";
          });
          continue;
      }
      if (CONCISE_INTEGER_WIDTH_REGEX.test(token2.stem)) {
        result.minimumIntegerDigits = token2.stem.length;
        continue;
      }
      if (FRACTION_PRECISION_REGEX.test(token2.stem)) {
        if (token2.options.length > 1) {
          throw new RangeError("Fraction-precision stems only accept a single optional option");
        }
        token2.stem.replace(FRACTION_PRECISION_REGEX, function(_2, g1, g22, g3, g4, g5) {
          if (g22 === "*") {
            result.minimumFractionDigits = g1.length;
          } else if (g3 && g3[0] === "#") {
            result.maximumFractionDigits = g3.length;
          } else if (g4 && g5) {
            result.minimumFractionDigits = g4.length;
            result.maximumFractionDigits = g4.length + g5.length;
          } else {
            result.minimumFractionDigits = g1.length;
            result.maximumFractionDigits = g1.length;
          }
          return "";
        });
        var opt = token2.options[0];
        if (opt === "w") {
          result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
        } else if (opt) {
          result = __assign(__assign({}, result), parseSignificantPrecision(opt));
        }
        continue;
      }
      if (SIGNIFICANT_PRECISION_REGEX.test(token2.stem)) {
        result = __assign(__assign({}, result), parseSignificantPrecision(token2.stem));
        continue;
      }
      var signOpts = parseSign(token2.stem);
      if (signOpts) {
        result = __assign(__assign({}, result), signOpts);
      }
      var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token2.stem);
      if (conciseScientificAndEngineeringOpts) {
        result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
      }
    }
    return result;
  }

  // node_modules/@formatjs/icu-messageformat-parser/lib/time-data.generated.js
  var timeData = {
    "AX": [
      "H"
    ],
    "BQ": [
      "H"
    ],
    "CP": [
      "H"
    ],
    "CZ": [
      "H"
    ],
    "DK": [
      "H"
    ],
    "FI": [
      "H"
    ],
    "ID": [
      "H"
    ],
    "IS": [
      "H"
    ],
    "ML": [
      "H"
    ],
    "NE": [
      "H"
    ],
    "RU": [
      "H"
    ],
    "SE": [
      "H"
    ],
    "SJ": [
      "H"
    ],
    "SK": [
      "H"
    ],
    "AS": [
      "h",
      "H"
    ],
    "BT": [
      "h",
      "H"
    ],
    "DJ": [
      "h",
      "H"
    ],
    "ER": [
      "h",
      "H"
    ],
    "GH": [
      "h",
      "H"
    ],
    "IN": [
      "h",
      "H"
    ],
    "LS": [
      "h",
      "H"
    ],
    "PG": [
      "h",
      "H"
    ],
    "PW": [
      "h",
      "H"
    ],
    "SO": [
      "h",
      "H"
    ],
    "TO": [
      "h",
      "H"
    ],
    "VU": [
      "h",
      "H"
    ],
    "WS": [
      "h",
      "H"
    ],
    "001": [
      "H",
      "h"
    ],
    "AL": [
      "h",
      "H",
      "hB"
    ],
    "TD": [
      "h",
      "H",
      "hB"
    ],
    "ca-ES": [
      "H",
      "h",
      "hB"
    ],
    "CF": [
      "H",
      "h",
      "hB"
    ],
    "CM": [
      "H",
      "h",
      "hB"
    ],
    "fr-CA": [
      "H",
      "h",
      "hB"
    ],
    "gl-ES": [
      "H",
      "h",
      "hB"
    ],
    "it-CH": [
      "H",
      "h",
      "hB"
    ],
    "it-IT": [
      "H",
      "h",
      "hB"
    ],
    "LU": [
      "H",
      "h",
      "hB"
    ],
    "NP": [
      "H",
      "h",
      "hB"
    ],
    "PF": [
      "H",
      "h",
      "hB"
    ],
    "SC": [
      "H",
      "h",
      "hB"
    ],
    "SM": [
      "H",
      "h",
      "hB"
    ],
    "SN": [
      "H",
      "h",
      "hB"
    ],
    "TF": [
      "H",
      "h",
      "hB"
    ],
    "VA": [
      "H",
      "h",
      "hB"
    ],
    "CY": [
      "h",
      "H",
      "hb",
      "hB"
    ],
    "GR": [
      "h",
      "H",
      "hb",
      "hB"
    ],
    "CO": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "DO": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "KP": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "KR": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "NA": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "PA": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "PR": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "VE": [
      "h",
      "H",
      "hB",
      "hb"
    ],
    "AC": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "AI": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "BW": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "BZ": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CC": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "CX": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "DG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "FK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GB": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "GI": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IE": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IM": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "IO": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "JE": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "LT": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MK": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MN": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "MS": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NF": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NG": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NR": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "NU": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "PN": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "SH": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "SX": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "TA": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "ZA": [
      "H",
      "h",
      "hb",
      "hB"
    ],
    "af-ZA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "AR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CL": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "CU": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "EA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-BO": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-BR": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-EC": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-ES": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-GQ": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "es-PE": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "GT": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "HN": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "IC": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "KG": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "KM": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "LK": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "MA": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "MX": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "NI": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "PY": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "SV": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "UY": [
      "H",
      "h",
      "hB",
      "hb"
    ],
    "JP": [
      "H",
      "h",
      "K"
    ],
    "AD": [
      "H",
      "hB"
    ],
    "AM": [
      "H",
      "hB"
    ],
    "AO": [
      "H",
      "hB"
    ],
    "AT": [
      "H",
      "hB"
    ],
    "AW": [
      "H",
      "hB"
    ],
    "BE": [
      "H",
      "hB"
    ],
    "BF": [
      "H",
      "hB"
    ],
    "BJ": [
      "H",
      "hB"
    ],
    "BL": [
      "H",
      "hB"
    ],
    "BR": [
      "H",
      "hB"
    ],
    "CG": [
      "H",
      "hB"
    ],
    "CI": [
      "H",
      "hB"
    ],
    "CV": [
      "H",
      "hB"
    ],
    "DE": [
      "H",
      "hB"
    ],
    "EE": [
      "H",
      "hB"
    ],
    "FR": [
      "H",
      "hB"
    ],
    "GA": [
      "H",
      "hB"
    ],
    "GF": [
      "H",
      "hB"
    ],
    "GN": [
      "H",
      "hB"
    ],
    "GP": [
      "H",
      "hB"
    ],
    "GW": [
      "H",
      "hB"
    ],
    "HR": [
      "H",
      "hB"
    ],
    "IL": [
      "H",
      "hB"
    ],
    "IT": [
      "H",
      "hB"
    ],
    "KZ": [
      "H",
      "hB"
    ],
    "MC": [
      "H",
      "hB"
    ],
    "MD": [
      "H",
      "hB"
    ],
    "MF": [
      "H",
      "hB"
    ],
    "MQ": [
      "H",
      "hB"
    ],
    "MZ": [
      "H",
      "hB"
    ],
    "NC": [
      "H",
      "hB"
    ],
    "NL": [
      "H",
      "hB"
    ],
    "PM": [
      "H",
      "hB"
    ],
    "PT": [
      "H",
      "hB"
    ],
    "RE": [
      "H",
      "hB"
    ],
    "RO": [
      "H",
      "hB"
    ],
    "SI": [
      "H",
      "hB"
    ],
    "SR": [
      "H",
      "hB"
    ],
    "ST": [
      "H",
      "hB"
    ],
    "TG": [
      "H",
      "hB"
    ],
    "TR": [
      "H",
      "hB"
    ],
    "WF": [
      "H",
      "hB"
    ],
    "YT": [
      "H",
      "hB"
    ],
    "BD": [
      "h",
      "hB",
      "H"
    ],
    "PK": [
      "h",
      "hB",
      "H"
    ],
    "AZ": [
      "H",
      "hB",
      "h"
    ],
    "BA": [
      "H",
      "hB",
      "h"
    ],
    "BG": [
      "H",
      "hB",
      "h"
    ],
    "CH": [
      "H",
      "hB",
      "h"
    ],
    "GE": [
      "H",
      "hB",
      "h"
    ],
    "LI": [
      "H",
      "hB",
      "h"
    ],
    "ME": [
      "H",
      "hB",
      "h"
    ],
    "RS": [
      "H",
      "hB",
      "h"
    ],
    "UA": [
      "H",
      "hB",
      "h"
    ],
    "UZ": [
      "H",
      "hB",
      "h"
    ],
    "XK": [
      "H",
      "hB",
      "h"
    ],
    "AG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "AU": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BB": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BS": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "CA": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "DM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "en-001": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "FJ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "FM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GD": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GU": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "GY": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "JM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KI": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KN": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "KY": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "LC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "LR": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MH": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MP": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "MW": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "NZ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SB": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SL": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SS": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "SZ": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "TC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "TT": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "UM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "US": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VC": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VG": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "VI": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "ZM": [
      "h",
      "hb",
      "H",
      "hB"
    ],
    "BO": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "EC": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "ES": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "GQ": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "PE": [
      "H",
      "hB",
      "h",
      "hb"
    ],
    "AE": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "ar-001": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "BH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "DZ": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "EG": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "EH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "HK": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "IQ": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "JO": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "KW": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "LB": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "LY": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "MO": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "MR": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "OM": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "PH": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "PS": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "QA": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SA": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SD": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "SY": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "TN": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "YE": [
      "h",
      "hB",
      "hb",
      "H"
    ],
    "AF": [
      "H",
      "hb",
      "hB",
      "h"
    ],
    "LA": [
      "H",
      "hb",
      "hB",
      "h"
    ],
    "CN": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "LV": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "TL": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "zu-ZA": [
      "H",
      "hB",
      "hb",
      "h"
    ],
    "CD": [
      "hB",
      "H"
    ],
    "IR": [
      "hB",
      "H"
    ],
    "hi-IN": [
      "hB",
      "h",
      "H"
    ],
    "kn-IN": [
      "hB",
      "h",
      "H"
    ],
    "ml-IN": [
      "hB",
      "h",
      "H"
    ],
    "te-IN": [
      "hB",
      "h",
      "H"
    ],
    "KH": [
      "hB",
      "h",
      "H",
      "hb"
    ],
    "ta-IN": [
      "hB",
      "h",
      "hb",
      "H"
    ],
    "BN": [
      "hb",
      "hB",
      "h",
      "H"
    ],
    "MY": [
      "hb",
      "hB",
      "h",
      "H"
    ],
    "ET": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "gu-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "mr-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "pa-IN": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "TW": [
      "hB",
      "hb",
      "h",
      "H"
    ],
    "KE": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "MM": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "TZ": [
      "hB",
      "hb",
      "H",
      "h"
    ],
    "UG": [
      "hB",
      "hb",
      "H",
      "h"
    ]
  };

  // node_modules/@formatjs/icu-messageformat-parser/lib/date-time-pattern-generator.js
  function getBestPattern(skeleton, locale) {
    var skeletonCopy = "";
    for (var patternPos = 0; patternPos < skeleton.length; patternPos++) {
      var patternChar = skeleton.charAt(patternPos);
      if (patternChar === "j") {
        var extraLength = 0;
        while (patternPos + 1 < skeleton.length && skeleton.charAt(patternPos + 1) === patternChar) {
          extraLength++;
          patternPos++;
        }
        var hourLen = 1 + (extraLength & 1);
        var dayPeriodLen = extraLength < 2 ? 1 : 3 + (extraLength >> 1);
        var dayPeriodChar = "a";
        var hourChar = getDefaultHourSymbolFromLocale(locale);
        if (hourChar == "H" || hourChar == "k") {
          dayPeriodLen = 0;
        }
        while (dayPeriodLen-- > 0) {
          skeletonCopy += dayPeriodChar;
        }
        while (hourLen-- > 0) {
          skeletonCopy = hourChar + skeletonCopy;
        }
      } else if (patternChar === "J") {
        skeletonCopy += "H";
      } else {
        skeletonCopy += patternChar;
      }
    }
    return skeletonCopy;
  }
  function getDefaultHourSymbolFromLocale(locale) {
    var hourCycle = locale.hourCycle;
    if (hourCycle === void 0 && locale.hourCycles && locale.hourCycles.length) {
      hourCycle = locale.hourCycles[0];
    }
    if (hourCycle) {
      switch (hourCycle) {
        case "h24":
          return "k";
        case "h23":
          return "H";
        case "h12":
          return "h";
        case "h11":
          return "K";
        default:
          throw new Error("Invalid hourCycle");
      }
    }
    var languageTag = locale.language;
    var regionTag;
    if (languageTag !== "root") {
      regionTag = locale.maximize().region;
    }
    var hourCycles = timeData[regionTag || ""] || timeData[languageTag || ""] || timeData["".concat(languageTag, "-001")] || timeData["001"];
    return hourCycles[0];
  }

  // node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
  var _a;
  var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
  var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
  function createLocation(start2, end3) {
    return { start: start2, end: end3 };
  }
  var hasNativeStartsWith = !!String.prototype.startsWith;
  var hasNativeFromCodePoint = !!String.fromCodePoint;
  var hasNativeFromEntries = !!Object.fromEntries;
  var hasNativeCodePointAt = !!String.prototype.codePointAt;
  var hasTrimStart = !!String.prototype.trimStart;
  var hasTrimEnd = !!String.prototype.trimEnd;
  var hasNativeIsSafeInteger = !!Number.isSafeInteger;
  var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n2) {
    return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2 && Math.abs(n2) <= 9007199254740991;
  };
  var REGEX_SUPPORTS_U_AND_Y = true;
  try {
    re2 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
    REGEX_SUPPORTS_U_AND_Y = ((_a = re2.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
  } catch (_2) {
    REGEX_SUPPORTS_U_AND_Y = false;
  }
  var re2;
  var startsWith = hasNativeStartsWith ? function startsWith2(s3, search3, position4) {
    return s3.startsWith(search3, position4);
  } : function startsWith3(s3, search3, position4) {
    return s3.slice(position4, position4 + search3.length) === search3;
  };
  var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
    var codePoints = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      codePoints[_i] = arguments[_i];
    }
    var elements = "";
    var length10 = codePoints.length;
    var i7 = 0;
    var code3;
    while (length10 > i7) {
      code3 = codePoints[i7++];
      if (code3 > 1114111)
        throw RangeError(code3 + " is not a valid code point");
      elements += code3 < 65536 ? String.fromCharCode(code3) : String.fromCharCode(((code3 -= 65536) >> 10) + 55296, code3 % 1024 + 56320);
    }
    return elements;
  };
  var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
    var obj = {};
    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var _a2 = entries_1[_i], k2 = _a2[0], v2 = _a2[1];
      obj[k2] = v2;
    }
    return obj;
  };
  var codePointAt = hasNativeCodePointAt ? function codePointAt2(s3, index6) {
    return s3.codePointAt(index6);
  } : function codePointAt3(s3, index6) {
    var size5 = s3.length;
    if (index6 < 0 || index6 >= size5) {
      return void 0;
    }
    var first2 = s3.charCodeAt(index6);
    var second3;
    return first2 < 55296 || first2 > 56319 || index6 + 1 === size5 || (second3 = s3.charCodeAt(index6 + 1)) < 56320 || second3 > 57343 ? first2 : (first2 - 55296 << 10) + (second3 - 56320) + 65536;
  };
  var trimStart = hasTrimStart ? function trimStart2(s3) {
    return s3.trimStart();
  } : function trimStart3(s3) {
    return s3.replace(SPACE_SEPARATOR_START_REGEX, "");
  };
  var trimEnd = hasTrimEnd ? function trimEnd2(s3) {
    return s3.trimEnd();
  } : function trimEnd3(s3) {
    return s3.replace(SPACE_SEPARATOR_END_REGEX, "");
  };
  function RE(s3, flag) {
    return new RegExp(s3, flag);
  }
  var matchIdentifierAtIndex;
  if (REGEX_SUPPORTS_U_AND_Y) {
    IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
    matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index6) {
      var _a2;
      IDENTIFIER_PREFIX_RE_1.lastIndex = index6;
      var match6 = IDENTIFIER_PREFIX_RE_1.exec(s3);
      return (_a2 = match6[1]) !== null && _a2 !== void 0 ? _a2 : "";
    };
  } else {
    matchIdentifierAtIndex = function matchIdentifierAtIndex2(s3, index6) {
      var match6 = [];
      while (true) {
        var c3 = codePointAt(s3, index6);
        if (c3 === void 0 || _isWhiteSpace(c3) || _isPatternSyntax(c3)) {
          break;
        }
        match6.push(c3);
        index6 += c3 >= 65536 ? 2 : 1;
      }
      return fromCodePoint.apply(void 0, match6);
    };
  }
  var IDENTIFIER_PREFIX_RE_1;
  var Parser = function() {
    function Parser3(message2, options3) {
      if (options3 === void 0) {
        options3 = {};
      }
      this.message = message2;
      this.position = { offset: 0, line: 1, column: 1 };
      this.ignoreTag = !!options3.ignoreTag;
      this.locale = options3.locale;
      this.requiresOtherClause = !!options3.requiresOtherClause;
      this.shouldParseSkeletons = !!options3.shouldParseSkeletons;
    }
    Parser3.prototype.parse = function() {
      if (this.offset() !== 0) {
        throw Error("parser can only be used once");
      }
      return this.parseMessage(0, "", false);
    };
    Parser3.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
      var elements = [];
      while (!this.isEOF()) {
        var char3 = this.char();
        if (char3 === 123) {
          var result = this.parseArgument(nestingLevel, expectingCloseTag);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else if (char3 === 125 && nestingLevel > 0) {
          break;
        } else if (char3 === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
          var position4 = this.clonePosition();
          this.bump();
          elements.push({
            type: TYPE.pound,
            location: createLocation(position4, this.clonePosition())
          });
        } else if (char3 === 60 && !this.ignoreTag && this.peek() === 47) {
          if (expectingCloseTag) {
            break;
          } else {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
          }
        } else if (char3 === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
          var result = this.parseTag(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        } else {
          var result = this.parseLiteral(nestingLevel, parentArgType);
          if (result.err) {
            return result;
          }
          elements.push(result.val);
        }
      }
      return { val: elements, err: null };
    };
    Parser3.prototype.parseTag = function(nestingLevel, parentArgType) {
      var startPosition = this.clonePosition();
      this.bump();
      var tagName2 = this.parseTagName();
      this.bumpSpace();
      if (this.bumpIf("/>")) {
        return {
          val: {
            type: TYPE.literal,
            value: "<".concat(tagName2, "/>"),
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else if (this.bumpIf(">")) {
        var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
        if (childrenResult.err) {
          return childrenResult;
        }
        var children2 = childrenResult.val;
        var endTagStartPosition = this.clonePosition();
        if (this.bumpIf("</")) {
          if (this.isEOF() || !_isAlpha(this.char())) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          var closingTagNameStartPosition = this.clonePosition();
          var closingTagName = this.parseTagName();
          if (tagName2 !== closingTagName) {
            return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
          }
          this.bumpSpace();
          if (!this.bumpIf(">")) {
            return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
          }
          return {
            val: {
              type: TYPE.tag,
              value: tagName2,
              children: children2,
              location: createLocation(startPosition, this.clonePosition())
            },
            err: null
          };
        } else {
          return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
        }
      } else {
        return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
      }
    };
    Parser3.prototype.parseTagName = function() {
      var startOffset = this.offset();
      this.bump();
      while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
        this.bump();
      }
      return this.message.slice(startOffset, this.offset());
    };
    Parser3.prototype.parseLiteral = function(nestingLevel, parentArgType) {
      var start2 = this.clonePosition();
      var value12 = "";
      while (true) {
        var parseQuoteResult = this.tryParseQuote(parentArgType);
        if (parseQuoteResult) {
          value12 += parseQuoteResult;
          continue;
        }
        var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
        if (parseUnquotedResult) {
          value12 += parseUnquotedResult;
          continue;
        }
        var parseLeftAngleResult = this.tryParseLeftAngleBracket();
        if (parseLeftAngleResult) {
          value12 += parseLeftAngleResult;
          continue;
        }
        break;
      }
      var location3 = createLocation(start2, this.clonePosition());
      return {
        val: { type: TYPE.literal, value: value12, location: location3 },
        err: null
      };
    };
    Parser3.prototype.tryParseLeftAngleBracket = function() {
      if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
        this.bump();
        return "<";
      }
      return null;
    };
    Parser3.prototype.tryParseQuote = function(parentArgType) {
      if (this.isEOF() || this.char() !== 39) {
        return null;
      }
      switch (this.peek()) {
        case 39:
          this.bump();
          this.bump();
          return "'";
        case 123:
        case 60:
        case 62:
        case 125:
          break;
        case 35:
          if (parentArgType === "plural" || parentArgType === "selectordinal") {
            break;
          }
          return null;
        default:
          return null;
      }
      this.bump();
      var codePoints = [this.char()];
      this.bump();
      while (!this.isEOF()) {
        var ch2 = this.char();
        if (ch2 === 39) {
          if (this.peek() === 39) {
            codePoints.push(39);
            this.bump();
          } else {
            this.bump();
            break;
          }
        } else {
          codePoints.push(ch2);
        }
        this.bump();
      }
      return fromCodePoint.apply(void 0, codePoints);
    };
    Parser3.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
      if (this.isEOF()) {
        return null;
      }
      var ch2 = this.char();
      if (ch2 === 60 || ch2 === 123 || ch2 === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch2 === 125 && nestingLevel > 0) {
        return null;
      } else {
        this.bump();
        return fromCodePoint(ch2);
      }
    };
    Parser3.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
      var openingBracePosition = this.clonePosition();
      this.bump();
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      if (this.char() === 125) {
        this.bump();
        return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      var value12 = this.parseIdentifierIfPossible().value;
      if (!value12) {
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bumpSpace();
      if (this.isEOF()) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      switch (this.char()) {
        case 125: {
          this.bump();
          return {
            val: {
              type: TYPE.argument,
              value: value12,
              location: createLocation(openingBracePosition, this.clonePosition())
            },
            err: null
          };
        }
        case 44: {
          this.bump();
          this.bumpSpace();
          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }
          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value12, openingBracePosition);
        }
        default:
          return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
      }
    };
    Parser3.prototype.parseIdentifierIfPossible = function() {
      var startingPosition = this.clonePosition();
      var startOffset = this.offset();
      var value12 = matchIdentifierAtIndex(this.message, startOffset);
      var endOffset = startOffset + value12.length;
      this.bumpTo(endOffset);
      var endPosition = this.clonePosition();
      var location3 = createLocation(startingPosition, endPosition);
      return { value: value12, location: location3 };
    };
    Parser3.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value12, openingBracePosition) {
      var _a2;
      var typeStartPosition = this.clonePosition();
      var argType = this.parseIdentifierIfPossible().value;
      var typeEndPosition = this.clonePosition();
      switch (argType) {
        case "":
          return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
        case "number":
        case "date":
        case "time": {
          this.bumpSpace();
          var styleAndLocation = null;
          if (this.bumpIf(",")) {
            this.bumpSpace();
            var styleStartPosition = this.clonePosition();
            var result = this.parseSimpleArgStyleIfPossible();
            if (result.err) {
              return result;
            }
            var style3 = trimEnd(result.val);
            if (style3.length === 0) {
              return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            var styleLocation = createLocation(styleStartPosition, this.clonePosition());
            styleAndLocation = { style: style3, styleLocation };
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_1 = createLocation(openingBracePosition, this.clonePosition());
          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
            var skeleton = trimStart(styleAndLocation.style.slice(2));
            if (argType === "number") {
              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
              if (result.err) {
                return result;
              }
              return {
                val: { type: TYPE.number, value: value12, location: location_1, style: result.val },
                err: null
              };
            } else {
              if (skeleton.length === 0) {
                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
              }
              var dateTimePattern = skeleton;
              if (this.locale) {
                dateTimePattern = getBestPattern(skeleton, this.locale);
              }
              var style3 = {
                type: SKELETON_TYPE.dateTime,
                pattern: dateTimePattern,
                location: styleAndLocation.styleLocation,
                parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(dateTimePattern) : {}
              };
              var type = argType === "date" ? TYPE.date : TYPE.time;
              return {
                val: { type, value: value12, location: location_1, style: style3 },
                err: null
              };
            }
          }
          return {
            val: {
              type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
              value: value12,
              location: location_1,
              style: (_a2 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a2 !== void 0 ? _a2 : null
            },
            err: null
          };
        }
        case "plural":
        case "selectordinal":
        case "select": {
          var typeEndPosition_1 = this.clonePosition();
          this.bumpSpace();
          if (!this.bumpIf(",")) {
            return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
          }
          this.bumpSpace();
          var identifierAndLocation = this.parseIdentifierIfPossible();
          var pluralOffset = 0;
          if (argType !== "select" && identifierAndLocation.value === "offset") {
            if (!this.bumpIf(":")) {
              return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
            }
            this.bumpSpace();
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
            if (result.err) {
              return result;
            }
            this.bumpSpace();
            identifierAndLocation = this.parseIdentifierIfPossible();
            pluralOffset = result.val;
          }
          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
          if (optionsResult.err) {
            return optionsResult;
          }
          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
          if (argCloseResult.err) {
            return argCloseResult;
          }
          var location_2 = createLocation(openingBracePosition, this.clonePosition());
          if (argType === "select") {
            return {
              val: {
                type: TYPE.select,
                value: value12,
                options: fromEntries(optionsResult.val),
                location: location_2
              },
              err: null
            };
          } else {
            return {
              val: {
                type: TYPE.plural,
                value: value12,
                options: fromEntries(optionsResult.val),
                offset: pluralOffset,
                pluralType: argType === "plural" ? "cardinal" : "ordinal",
                location: location_2
              },
              err: null
            };
          }
        }
        default:
          return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      }
    };
    Parser3.prototype.tryParseArgumentClose = function(openingBracePosition) {
      if (this.isEOF() || this.char() !== 125) {
        return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
      }
      this.bump();
      return { val: true, err: null };
    };
    Parser3.prototype.parseSimpleArgStyleIfPossible = function() {
      var nestedBraces = 0;
      var startPosition = this.clonePosition();
      while (!this.isEOF()) {
        var ch2 = this.char();
        switch (ch2) {
          case 39: {
            this.bump();
            var apostrophePosition = this.clonePosition();
            if (!this.bumpUntil("'")) {
              return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
            }
            this.bump();
            break;
          }
          case 123: {
            nestedBraces += 1;
            this.bump();
            break;
          }
          case 125: {
            if (nestedBraces > 0) {
              nestedBraces -= 1;
            } else {
              return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null
              };
            }
            break;
          }
          default:
            this.bump();
            break;
        }
      }
      return {
        val: this.message.slice(startPosition.offset, this.offset()),
        err: null
      };
    };
    Parser3.prototype.parseNumberSkeletonFromString = function(skeleton, location3) {
      var tokens = [];
      try {
        tokens = parseNumberSkeletonFromString(skeleton);
      } catch (e) {
        return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location3);
      }
      return {
        val: {
          type: SKELETON_TYPE.number,
          tokens,
          location: location3,
          parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
        },
        err: null
      };
    };
    Parser3.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
      var _a2;
      var hasOtherClause = false;
      var options3 = [];
      var parsedSelectors = /* @__PURE__ */ new Set();
      var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
      while (true) {
        if (selector.length === 0) {
          var startPosition = this.clonePosition();
          if (parentArgType !== "select" && this.bumpIf("=")) {
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
            if (result.err) {
              return result;
            }
            selectorLocation = createLocation(startPosition, this.clonePosition());
            selector = this.message.slice(startPosition.offset, this.offset());
          } else {
            break;
          }
        }
        if (parsedSelectors.has(selector)) {
          return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
        }
        if (selector === "other") {
          hasOtherClause = true;
        }
        this.bumpSpace();
        var openingBracePosition = this.clonePosition();
        if (!this.bumpIf("{")) {
          return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
        }
        var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
        if (fragmentResult.err) {
          return fragmentResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        options3.push([
          selector,
          {
            value: fragmentResult.val,
            location: createLocation(openingBracePosition, this.clonePosition())
          }
        ]);
        parsedSelectors.add(selector);
        this.bumpSpace();
        _a2 = this.parseIdentifierIfPossible(), selector = _a2.value, selectorLocation = _a2.location;
      }
      if (options3.length === 0) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
      }
      if (this.requiresOtherClause && !hasOtherClause) {
        return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
      }
      return { val: options3, err: null };
    };
    Parser3.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
      var sign2 = 1;
      var startingPosition = this.clonePosition();
      if (this.bumpIf("+")) {
      } else if (this.bumpIf("-")) {
        sign2 = -1;
      }
      var hasDigits = false;
      var decimal2 = 0;
      while (!this.isEOF()) {
        var ch2 = this.char();
        if (ch2 >= 48 && ch2 <= 57) {
          hasDigits = true;
          decimal2 = decimal2 * 10 + (ch2 - 48);
          this.bump();
        } else {
          break;
        }
      }
      var location3 = createLocation(startingPosition, this.clonePosition());
      if (!hasDigits) {
        return this.error(expectNumberError, location3);
      }
      decimal2 *= sign2;
      if (!isSafeInteger(decimal2)) {
        return this.error(invalidNumberError, location3);
      }
      return { val: decimal2, err: null };
    };
    Parser3.prototype.offset = function() {
      return this.position.offset;
    };
    Parser3.prototype.isEOF = function() {
      return this.offset() === this.message.length;
    };
    Parser3.prototype.clonePosition = function() {
      return {
        offset: this.position.offset,
        line: this.position.line,
        column: this.position.column
      };
    };
    Parser3.prototype.char = function() {
      var offset2 = this.position.offset;
      if (offset2 >= this.message.length) {
        throw Error("out of bound");
      }
      var code3 = codePointAt(this.message, offset2);
      if (code3 === void 0) {
        throw Error("Offset ".concat(offset2, " is at invalid UTF-16 code unit boundary"));
      }
      return code3;
    };
    Parser3.prototype.error = function(kind2, location3) {
      return {
        val: null,
        err: {
          kind: kind2,
          message: this.message,
          location: location3
        }
      };
    };
    Parser3.prototype.bump = function() {
      if (this.isEOF()) {
        return;
      }
      var code3 = this.char();
      if (code3 === 10) {
        this.position.line += 1;
        this.position.column = 1;
        this.position.offset += 1;
      } else {
        this.position.column += 1;
        this.position.offset += code3 < 65536 ? 1 : 2;
      }
    };
    Parser3.prototype.bumpIf = function(prefix4) {
      if (startsWith(this.message, prefix4, this.offset())) {
        for (var i7 = 0; i7 < prefix4.length; i7++) {
          this.bump();
        }
        return true;
      }
      return false;
    };
    Parser3.prototype.bumpUntil = function(pattern2) {
      var currentOffset = this.offset();
      var index6 = this.message.indexOf(pattern2, currentOffset);
      if (index6 >= 0) {
        this.bumpTo(index6);
        return true;
      } else {
        this.bumpTo(this.message.length);
        return false;
      }
    };
    Parser3.prototype.bumpTo = function(targetOffset) {
      if (this.offset() > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
      }
      targetOffset = Math.min(targetOffset, this.message.length);
      while (true) {
        var offset2 = this.offset();
        if (offset2 === targetOffset) {
          break;
        }
        if (offset2 > targetOffset) {
          throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
        }
        this.bump();
        if (this.isEOF()) {
          break;
        }
      }
    };
    Parser3.prototype.bumpSpace = function() {
      while (!this.isEOF() && _isWhiteSpace(this.char())) {
        this.bump();
      }
    };
    Parser3.prototype.peek = function() {
      if (this.isEOF()) {
        return null;
      }
      var code3 = this.char();
      var offset2 = this.offset();
      var nextCode = this.message.charCodeAt(offset2 + (code3 >= 65536 ? 2 : 1));
      return nextCode !== null && nextCode !== void 0 ? nextCode : null;
    };
    return Parser3;
  }();
  function _isAlpha(codepoint) {
    return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
  }
  function _isAlphaOrSlash(codepoint) {
    return _isAlpha(codepoint) || codepoint === 47;
  }
  function _isPotentialElementNameChar(c3) {
    return c3 === 45 || c3 === 46 || c3 >= 48 && c3 <= 57 || c3 === 95 || c3 >= 97 && c3 <= 122 || c3 >= 65 && c3 <= 90 || c3 == 183 || c3 >= 192 && c3 <= 214 || c3 >= 216 && c3 <= 246 || c3 >= 248 && c3 <= 893 || c3 >= 895 && c3 <= 8191 || c3 >= 8204 && c3 <= 8205 || c3 >= 8255 && c3 <= 8256 || c3 >= 8304 && c3 <= 8591 || c3 >= 11264 && c3 <= 12271 || c3 >= 12289 && c3 <= 55295 || c3 >= 63744 && c3 <= 64975 || c3 >= 65008 && c3 <= 65533 || c3 >= 65536 && c3 <= 983039;
  }
  function _isWhiteSpace(c3) {
    return c3 >= 9 && c3 <= 13 || c3 === 32 || c3 === 133 || c3 >= 8206 && c3 <= 8207 || c3 === 8232 || c3 === 8233;
  }
  function _isPatternSyntax(c3) {
    return c3 >= 33 && c3 <= 35 || c3 === 36 || c3 >= 37 && c3 <= 39 || c3 === 40 || c3 === 41 || c3 === 42 || c3 === 43 || c3 === 44 || c3 === 45 || c3 >= 46 && c3 <= 47 || c3 >= 58 && c3 <= 59 || c3 >= 60 && c3 <= 62 || c3 >= 63 && c3 <= 64 || c3 === 91 || c3 === 92 || c3 === 93 || c3 === 94 || c3 === 96 || c3 === 123 || c3 === 124 || c3 === 125 || c3 === 126 || c3 === 161 || c3 >= 162 && c3 <= 165 || c3 === 166 || c3 === 167 || c3 === 169 || c3 === 171 || c3 === 172 || c3 === 174 || c3 === 176 || c3 === 177 || c3 === 182 || c3 === 187 || c3 === 191 || c3 === 215 || c3 === 247 || c3 >= 8208 && c3 <= 8213 || c3 >= 8214 && c3 <= 8215 || c3 === 8216 || c3 === 8217 || c3 === 8218 || c3 >= 8219 && c3 <= 8220 || c3 === 8221 || c3 === 8222 || c3 === 8223 || c3 >= 8224 && c3 <= 8231 || c3 >= 8240 && c3 <= 8248 || c3 === 8249 || c3 === 8250 || c3 >= 8251 && c3 <= 8254 || c3 >= 8257 && c3 <= 8259 || c3 === 8260 || c3 === 8261 || c3 === 8262 || c3 >= 8263 && c3 <= 8273 || c3 === 8274 || c3 === 8275 || c3 >= 8277 && c3 <= 8286 || c3 >= 8592 && c3 <= 8596 || c3 >= 8597 && c3 <= 8601 || c3 >= 8602 && c3 <= 8603 || c3 >= 8604 && c3 <= 8607 || c3 === 8608 || c3 >= 8609 && c3 <= 8610 || c3 === 8611 || c3 >= 8612 && c3 <= 8613 || c3 === 8614 || c3 >= 8615 && c3 <= 8621 || c3 === 8622 || c3 >= 8623 && c3 <= 8653 || c3 >= 8654 && c3 <= 8655 || c3 >= 8656 && c3 <= 8657 || c3 === 8658 || c3 === 8659 || c3 === 8660 || c3 >= 8661 && c3 <= 8691 || c3 >= 8692 && c3 <= 8959 || c3 >= 8960 && c3 <= 8967 || c3 === 8968 || c3 === 8969 || c3 === 8970 || c3 === 8971 || c3 >= 8972 && c3 <= 8991 || c3 >= 8992 && c3 <= 8993 || c3 >= 8994 && c3 <= 9e3 || c3 === 9001 || c3 === 9002 || c3 >= 9003 && c3 <= 9083 || c3 === 9084 || c3 >= 9085 && c3 <= 9114 || c3 >= 9115 && c3 <= 9139 || c3 >= 9140 && c3 <= 9179 || c3 >= 9180 && c3 <= 9185 || c3 >= 9186 && c3 <= 9254 || c3 >= 9255 && c3 <= 9279 || c3 >= 9280 && c3 <= 9290 || c3 >= 9291 && c3 <= 9311 || c3 >= 9472 && c3 <= 9654 || c3 === 9655 || c3 >= 9656 && c3 <= 9664 || c3 === 9665 || c3 >= 9666 && c3 <= 9719 || c3 >= 9720 && c3 <= 9727 || c3 >= 9728 && c3 <= 9838 || c3 === 9839 || c3 >= 9840 && c3 <= 10087 || c3 === 10088 || c3 === 10089 || c3 === 10090 || c3 === 10091 || c3 === 10092 || c3 === 10093 || c3 === 10094 || c3 === 10095 || c3 === 10096 || c3 === 10097 || c3 === 10098 || c3 === 10099 || c3 === 10100 || c3 === 10101 || c3 >= 10132 && c3 <= 10175 || c3 >= 10176 && c3 <= 10180 || c3 === 10181 || c3 === 10182 || c3 >= 10183 && c3 <= 10213 || c3 === 10214 || c3 === 10215 || c3 === 10216 || c3 === 10217 || c3 === 10218 || c3 === 10219 || c3 === 10220 || c3 === 10221 || c3 === 10222 || c3 === 10223 || c3 >= 10224 && c3 <= 10239 || c3 >= 10240 && c3 <= 10495 || c3 >= 10496 && c3 <= 10626 || c3 === 10627 || c3 === 10628 || c3 === 10629 || c3 === 10630 || c3 === 10631 || c3 === 10632 || c3 === 10633 || c3 === 10634 || c3 === 10635 || c3 === 10636 || c3 === 10637 || c3 === 10638 || c3 === 10639 || c3 === 10640 || c3 === 10641 || c3 === 10642 || c3 === 10643 || c3 === 10644 || c3 === 10645 || c3 === 10646 || c3 === 10647 || c3 === 10648 || c3 >= 10649 && c3 <= 10711 || c3 === 10712 || c3 === 10713 || c3 === 10714 || c3 === 10715 || c3 >= 10716 && c3 <= 10747 || c3 === 10748 || c3 === 10749 || c3 >= 10750 && c3 <= 11007 || c3 >= 11008 && c3 <= 11055 || c3 >= 11056 && c3 <= 11076 || c3 >= 11077 && c3 <= 11078 || c3 >= 11079 && c3 <= 11084 || c3 >= 11085 && c3 <= 11123 || c3 >= 11124 && c3 <= 11125 || c3 >= 11126 && c3 <= 11157 || c3 === 11158 || c3 >= 11159 && c3 <= 11263 || c3 >= 11776 && c3 <= 11777 || c3 === 11778 || c3 === 11779 || c3 === 11780 || c3 === 11781 || c3 >= 11782 && c3 <= 11784 || c3 === 11785 || c3 === 11786 || c3 === 11787 || c3 === 11788 || c3 === 11789 || c3 >= 11790 && c3 <= 11798 || c3 === 11799 || c3 >= 11800 && c3 <= 11801 || c3 === 11802 || c3 === 11803 || c3 === 11804 || c3 === 11805 || c3 >= 11806 && c3 <= 11807 || c3 === 11808 || c3 === 11809 || c3 === 11810 || c3 === 11811 || c3 === 11812 || c3 === 11813 || c3 === 11814 || c3 === 11815 || c3 === 11816 || c3 === 11817 || c3 >= 11818 && c3 <= 11822 || c3 === 11823 || c3 >= 11824 && c3 <= 11833 || c3 >= 11834 && c3 <= 11835 || c3 >= 11836 && c3 <= 11839 || c3 === 11840 || c3 === 11841 || c3 === 11842 || c3 >= 11843 && c3 <= 11855 || c3 >= 11856 && c3 <= 11857 || c3 === 11858 || c3 >= 11859 && c3 <= 11903 || c3 >= 12289 && c3 <= 12291 || c3 === 12296 || c3 === 12297 || c3 === 12298 || c3 === 12299 || c3 === 12300 || c3 === 12301 || c3 === 12302 || c3 === 12303 || c3 === 12304 || c3 === 12305 || c3 >= 12306 && c3 <= 12307 || c3 === 12308 || c3 === 12309 || c3 === 12310 || c3 === 12311 || c3 === 12312 || c3 === 12313 || c3 === 12314 || c3 === 12315 || c3 === 12316 || c3 === 12317 || c3 >= 12318 && c3 <= 12319 || c3 === 12320 || c3 === 12336 || c3 === 64830 || c3 === 64831 || c3 >= 65093 && c3 <= 65094;
  }

  // node_modules/@formatjs/icu-messageformat-parser/lib/index.js
  function pruneLocation(els) {
    els.forEach(function(el15) {
      delete el15.location;
      if (isSelectElement(el15) || isPluralElement(el15)) {
        for (var k2 in el15.options) {
          delete el15.options[k2].location;
          pruneLocation(el15.options[k2].value);
        }
      } else if (isNumberElement(el15) && isNumberSkeleton(el15.style)) {
        delete el15.style.location;
      } else if ((isDateElement(el15) || isTimeElement(el15)) && isDateTimeSkeleton(el15.style)) {
        delete el15.style.location;
      } else if (isTagElement(el15)) {
        pruneLocation(el15.children);
      }
    });
  }
  function parse11(message2, opts) {
    if (opts === void 0) {
      opts = {};
    }
    opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
    var result = new Parser(message2, opts).parse();
    if (result.err) {
      var error5 = SyntaxError(ErrorKind[result.err.kind]);
      error5.location = result.err.location;
      error5.originalMessage = result.err.message;
      throw error5;
    }
    if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
      pruneLocation(result.val);
    }
    return result.val;
  }

  // node_modules/@formatjs/fast-memoize/lib/index.js
  function memoize2(fn, options3) {
    var cache = options3 && options3.cache ? options3.cache : cacheDefault;
    var serializer = options3 && options3.serializer ? options3.serializer : serializerDefault;
    var strategy = options3 && options3.strategy ? options3.strategy : strategyDefault;
    return strategy(fn, {
      cache,
      serializer
    });
  }
  function isPrimitive(value12) {
    return value12 == null || typeof value12 === "number" || typeof value12 === "boolean";
  }
  function monadic(fn, cache, serializer, arg) {
    var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn.call(this, arg);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function variadic(fn, cache, serializer) {
    var args = Array.prototype.slice.call(arguments, 3);
    var cacheKey = serializer(args);
    var computedValue = cache.get(cacheKey);
    if (typeof computedValue === "undefined") {
      computedValue = fn.apply(this, args);
      cache.set(cacheKey, computedValue);
    }
    return computedValue;
  }
  function assemble(fn, context, strategy, cache, serialize2) {
    return strategy.bind(context, fn, cache, serialize2);
  }
  function strategyDefault(fn, options3) {
    var strategy = fn.length === 1 ? monadic : variadic;
    return assemble(fn, this, strategy, options3.cache.create(), options3.serializer);
  }
  function strategyVariadic(fn, options3) {
    return assemble(fn, this, variadic, options3.cache.create(), options3.serializer);
  }
  function strategyMonadic(fn, options3) {
    return assemble(fn, this, monadic, options3.cache.create(), options3.serializer);
  }
  var serializerDefault = function() {
    return JSON.stringify(arguments);
  };
  function ObjectWithoutPrototypeCache() {
    this.cache = /* @__PURE__ */ Object.create(null);
  }
  ObjectWithoutPrototypeCache.prototype.get = function(key) {
    return this.cache[key];
  };
  ObjectWithoutPrototypeCache.prototype.set = function(key, value12) {
    this.cache[key] = value12;
  };
  var cacheDefault = {
    create: function create3() {
      return new ObjectWithoutPrototypeCache();
    }
  };
  var strategies = {
    variadic: strategyVariadic,
    monadic: strategyMonadic
  };

  // node_modules/intl-messageformat/lib/src/error.js
  var ErrorCode;
  (function(ErrorCode2) {
    ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
    ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
    ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
  })(ErrorCode || (ErrorCode = {}));
  var FormatError = function(_super) {
    __extends(FormatError2, _super);
    function FormatError2(msg, code3, originalMessage) {
      var _this = _super.call(this, msg) || this;
      _this.code = code3;
      _this.originalMessage = originalMessage;
      return _this;
    }
    FormatError2.prototype.toString = function() {
      return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
    };
    return FormatError2;
  }(Error);
  var InvalidValueError = function(_super) {
    __extends(InvalidValueError2, _super);
    function InvalidValueError2(variableId, value12, options3, originalMessage) {
      return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value12, '". Options are "').concat(Object.keys(options3).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueError2;
  }(FormatError);
  var InvalidValueTypeError = function(_super) {
    __extends(InvalidValueTypeError2, _super);
    function InvalidValueTypeError2(value12, type, originalMessage) {
      return _super.call(this, 'Value for "'.concat(value12, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
    }
    return InvalidValueTypeError2;
  }(FormatError);
  var MissingValueError = function(_super) {
    __extends(MissingValueError2, _super);
    function MissingValueError2(variableId, originalMessage) {
      return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
    }
    return MissingValueError2;
  }(FormatError);

  // node_modules/intl-messageformat/lib/src/formatters.js
  var PART_TYPE;
  (function(PART_TYPE2) {
    PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
    PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
  })(PART_TYPE || (PART_TYPE = {}));
  function mergeLiteral(parts) {
    if (parts.length < 2) {
      return parts;
    }
    return parts.reduce(function(all5, part) {
      var lastPart = all5[all5.length - 1];
      if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
        all5.push(part);
      } else {
        lastPart.value += part.value;
      }
      return all5;
    }, []);
  }
  function isFormatXMLElementFn(el15) {
    return typeof el15 === "function";
  }
  function formatToParts(els, locales, formatters, formats, values3, currentPluralValue, originalMessage) {
    if (els.length === 1 && isLiteralElement(els[0])) {
      return [
        {
          type: PART_TYPE.literal,
          value: els[0].value
        }
      ];
    }
    var result = [];
    for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
      var el15 = els_1[_i];
      if (isLiteralElement(el15)) {
        result.push({
          type: PART_TYPE.literal,
          value: el15.value
        });
        continue;
      }
      if (isPoundElement(el15)) {
        if (typeof currentPluralValue === "number") {
          result.push({
            type: PART_TYPE.literal,
            value: formatters.getNumberFormat(locales).format(currentPluralValue)
          });
        }
        continue;
      }
      var varName = el15.value;
      if (!(values3 && varName in values3)) {
        throw new MissingValueError(varName, originalMessage);
      }
      var value12 = values3[varName];
      if (isArgumentElement(el15)) {
        if (!value12 || typeof value12 === "string" || typeof value12 === "number") {
          value12 = typeof value12 === "string" || typeof value12 === "number" ? String(value12) : "";
        }
        result.push({
          type: typeof value12 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: value12
        });
        continue;
      }
      if (isDateElement(el15)) {
        var style3 = typeof el15.style === "string" ? formats.date[el15.style] : isDateTimeSkeleton(el15.style) ? el15.style.parsedOptions : void 0;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style3).format(value12)
        });
        continue;
      }
      if (isTimeElement(el15)) {
        var style3 = typeof el15.style === "string" ? formats.time[el15.style] : isDateTimeSkeleton(el15.style) ? el15.style.parsedOptions : formats.time.medium;
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getDateTimeFormat(locales, style3).format(value12)
        });
        continue;
      }
      if (isNumberElement(el15)) {
        var style3 = typeof el15.style === "string" ? formats.number[el15.style] : isNumberSkeleton(el15.style) ? el15.style.parsedOptions : void 0;
        if (style3 && style3.scale) {
          value12 = value12 * (style3.scale || 1);
        }
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales, style3).format(value12)
        });
        continue;
      }
      if (isTagElement(el15)) {
        var children2 = el15.children, value_1 = el15.value;
        var formatFn = values3[value_1];
        if (!isFormatXMLElementFn(formatFn)) {
          throw new InvalidValueTypeError(value_1, "function", originalMessage);
        }
        var parts = formatToParts(children2, locales, formatters, formats, values3, currentPluralValue);
        var chunks = formatFn(parts.map(function(p3) {
          return p3.value;
        }));
        if (!Array.isArray(chunks)) {
          chunks = [chunks];
        }
        result.push.apply(result, chunks.map(function(c3) {
          return {
            type: typeof c3 === "string" ? PART_TYPE.literal : PART_TYPE.object,
            value: c3
          };
        }));
      }
      if (isSelectElement(el15)) {
        var opt = el15.options[value12] || el15.options.other;
        if (!opt) {
          throw new InvalidValueError(el15.value, value12, Object.keys(el15.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values3));
        continue;
      }
      if (isPluralElement(el15)) {
        var opt = el15.options["=".concat(value12)];
        if (!opt) {
          if (!Intl.PluralRules) {
            throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
          }
          var rule = formatters.getPluralRules(locales, { type: el15.pluralType }).select(value12 - (el15.offset || 0));
          opt = el15.options[rule] || el15.options.other;
        }
        if (!opt) {
          throw new InvalidValueError(el15.value, value12, Object.keys(el15.options), originalMessage);
        }
        result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values3, value12 - (el15.offset || 0)));
        continue;
      }
    }
    return mergeLiteral(result);
  }

  // node_modules/intl-messageformat/lib/src/core.js
  function mergeConfig(c1, c22) {
    if (!c22) {
      return c1;
    }
    return __assign(__assign(__assign({}, c1 || {}), c22 || {}), Object.keys(c1).reduce(function(all5, k2) {
      all5[k2] = __assign(__assign({}, c1[k2]), c22[k2] || {});
      return all5;
    }, {}));
  }
  function mergeConfigs(defaultConfig, configs) {
    if (!configs) {
      return defaultConfig;
    }
    return Object.keys(defaultConfig).reduce(function(all5, k2) {
      all5[k2] = mergeConfig(defaultConfig[k2], configs[k2]);
      return all5;
    }, __assign({}, defaultConfig));
  }
  function createFastMemoizeCache(store) {
    return {
      create: function() {
        return {
          get: function(key) {
            return store[key];
          },
          set: function(key, value12) {
            store[key] = value12;
          }
        };
      }
    };
  }
  function createDefaultFormatters(cache) {
    if (cache === void 0) {
      cache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
    }
    return {
      getNumberFormat: memoize2(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.NumberFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.number),
        strategy: strategies.variadic
      }),
      getDateTimeFormat: memoize2(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.DateTimeFormat).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.dateTime),
        strategy: strategies.variadic
      }),
      getPluralRules: memoize2(function() {
        var _a2;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return new ((_a2 = Intl.PluralRules).bind.apply(_a2, __spreadArray([void 0], args, false)))();
      }, {
        cache: createFastMemoizeCache(cache.pluralRules),
        strategy: strategies.variadic
      })
    };
  }
  var IntlMessageFormat = function() {
    function IntlMessageFormat2(message2, locales, overrideFormats, opts) {
      var _this = this;
      if (locales === void 0) {
        locales = IntlMessageFormat2.defaultLocale;
      }
      this.formatterCache = {
        number: {},
        dateTime: {},
        pluralRules: {}
      };
      this.format = function(values3) {
        var parts = _this.formatToParts(values3);
        if (parts.length === 1) {
          return parts[0].value;
        }
        var result = parts.reduce(function(all5, part) {
          if (!all5.length || part.type !== PART_TYPE.literal || typeof all5[all5.length - 1] !== "string") {
            all5.push(part.value);
          } else {
            all5[all5.length - 1] += part.value;
          }
          return all5;
        }, []);
        if (result.length <= 1) {
          return result[0] || "";
        }
        return result;
      };
      this.formatToParts = function(values3) {
        return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values3, void 0, _this.message);
      };
      this.resolvedOptions = function() {
        return {
          locale: _this.resolvedLocale.toString()
        };
      };
      this.getAst = function() {
        return _this.ast;
      };
      this.locales = locales;
      this.resolvedLocale = IntlMessageFormat2.resolveLocale(locales);
      if (typeof message2 === "string") {
        this.message = message2;
        if (!IntlMessageFormat2.__parse) {
          throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
        }
        this.ast = IntlMessageFormat2.__parse(message2, {
          ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag,
          locale: this.resolvedLocale
        });
      } else {
        this.ast = message2;
      }
      if (!Array.isArray(this.ast)) {
        throw new TypeError("A message must be provided as a String or AST.");
      }
      this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
      this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
    }
    Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
      get: function() {
        if (!IntlMessageFormat2.memoizedDefaultLocale) {
          IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
        }
        return IntlMessageFormat2.memoizedDefaultLocale;
      },
      enumerable: false,
      configurable: true
    });
    IntlMessageFormat2.memoizedDefaultLocale = null;
    IntlMessageFormat2.resolveLocale = function(locales) {
      var supportedLocales = Intl.NumberFormat.supportedLocalesOf(locales);
      if (supportedLocales.length > 0) {
        return new Intl.Locale(supportedLocales[0]);
      }
      return new Intl.Locale(typeof locales === "string" ? locales : locales[0]);
    };
    IntlMessageFormat2.__parse = parse11;
    IntlMessageFormat2.formats = {
      number: {
        integer: {
          maximumFractionDigits: 0
        },
        currency: {
          style: "currency"
        },
        percent: {
          style: "percent"
        }
      },
      date: {
        short: {
          month: "numeric",
          day: "numeric",
          year: "2-digit"
        },
        medium: {
          month: "short",
          day: "numeric",
          year: "numeric"
        },
        long: {
          month: "long",
          day: "numeric",
          year: "numeric"
        },
        full: {
          weekday: "long",
          month: "long",
          day: "numeric",
          year: "numeric"
        }
      },
      time: {
        short: {
          hour: "numeric",
          minute: "numeric"
        },
        medium: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric"
        },
        long: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        },
        full: {
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          timeZoneName: "short"
        }
      }
    };
    return IntlMessageFormat2;
  }();

  // node_modules/intl-messageformat/lib/index.js
  var lib_default = IntlMessageFormat;

  // node_modules/@internationalized/message/dist/module.js
  function $parcel$export4(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $d6fd23bc337660df$exports = {};
  $parcel$export4($d6fd23bc337660df$exports, "MessageDictionary", () => $d6fd23bc337660df$export$64839e615120df17);
  var $d6fd23bc337660df$export$64839e615120df17 = class {
    getStringForLocale(key, locale) {
      let strings = this.messages[locale];
      if (!strings) {
        strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
        this.messages[locale] = strings;
      }
      let string = strings[key];
      if (!string)
        throw new Error(`Could not find intl message ${key} in ${locale} locale`);
      return string;
    }
    constructor(messages, defaultLocale = "en-US") {
      this.messages = {
        ...messages
      };
      this.defaultLocale = defaultLocale;
    }
  };
  function $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
    if (strings[locale])
      return strings[locale];
    let language2 = $d6fd23bc337660df$var$getLanguage(locale);
    if (strings[language2])
      return strings[language2];
    for (let key in strings) {
      if (key.startsWith(language2 + "-"))
        return strings[key];
    }
    return strings[defaultLocale];
  }
  function $d6fd23bc337660df$var$getLanguage(locale) {
    if (Intl.Locale)
      return new Intl.Locale(locale).language;
    return locale.split("-")[0];
  }
  var $972eb555d604f491$exports = {};
  $parcel$export4($972eb555d604f491$exports, "MessageFormatter", () => $972eb555d604f491$export$526ebc05ff964723);
  var $972eb555d604f491$export$526ebc05ff964723 = class {
    format(key, variables3) {
      let message2 = this.cache[key];
      if (!message2) {
        let msg = this.messages.getStringForLocale(key, this.locale);
        if (!msg)
          throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);
        message2 = new lib_default(msg, this.locale);
        this.cache[key] = message2;
      }
      let varCopy;
      if (variables3)
        varCopy = Object.keys(variables3).reduce((acc, key2) => {
          acc[key2] = variables3[key2] == null ? false : variables3[key2];
          return acc;
        }, {});
      return message2.format(varCopy);
    }
    constructor(locale, messages) {
      this.locale = locale;
      this.messages = messages;
      this.cache = {};
    }
  };

  // node_modules/@internationalized/date/dist/module.js
  var $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
  var $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
  var $7c5f6fbf42389787$var$MONTH_DAYS = 29;
  var $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
  var $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
  var $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
  var $fb18d541ea1ad717$export$ad991b66133851cf = class {
    format(value12) {
      return this.formatter.format(value12);
    }
    formatToParts(value12) {
      return this.formatter.formatToParts(value12);
    }
    formatRange(start2, end3) {
      if (typeof this.formatter.formatRange === "function")
        return this.formatter.formatRange(start2, end3);
      if (end3 < start2)
        throw new RangeError("End date must be >= start date");
      return `${this.formatter.format(start2)} \u2013 ${this.formatter.format(end3)}`;
    }
    formatRangeToParts(start2, end3) {
      if (typeof this.formatter.formatRangeToParts === "function")
        return this.formatter.formatRangeToParts(start2, end3);
      if (end3 < start2)
        throw new RangeError("End date must be >= start date");
      let startParts = this.formatter.formatToParts(start2);
      let endParts = this.formatter.formatToParts(end3);
      return [
        ...startParts.map((p3) => ({
          ...p3,
          source: "startRange"
        })),
        {
          type: "literal",
          value: " \u2013 ",
          source: "shared"
        },
        ...endParts.map((p3) => ({
          ...p3,
          source: "endRange"
        }))
      ];
    }
    resolvedOptions() {
      let resolvedOptions = this.formatter.resolvedOptions();
      if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
        if (!this.resolvedHourCycle)
          this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
        resolvedOptions.hourCycle = this.resolvedHourCycle;
        resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
      }
      if (resolvedOptions.calendar === "ethiopic-amete-alem")
        resolvedOptions.calendar = "ethioaa";
      return resolvedOptions;
    }
    constructor(locale, options3 = {}) {
      this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options3);
      this.options = options3;
    }
  };
  var $fb18d541ea1ad717$var$hour12Preferences = {
    true: {
      ja: "h11"
    },
    false: {}
  };
  function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options3 = {}) {
    if (typeof options3.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
      options3 = {
        ...options3
      };
      let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options3.hour12)][locale.split("-")[0]];
      let defaultHourCycle = options3.hour12 ? "h12" : "h23";
      options3.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
      delete options3.hour12;
    }
    let cacheKey = locale + (options3 ? Object.entries(options3).sort((a4, b4) => a4[0] < b4[0] ? -1 : 1).join() : "");
    if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey))
      return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.DateTimeFormat(locale, options3);
    $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
  }
  var $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
  function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
    if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null)
      $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
        hour: "numeric",
        hour12: false
      }).format(new Date(2020, 2, 3, 0)) === "24";
    return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
  }
  var $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
  function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
    if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null)
      $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
        hour: "numeric",
        hour12: false
      }).resolvedOptions().hourCycle === "h12";
    return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
  }
  function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options3) {
    if (!options3.timeStyle && !options3.hour)
      return void 0;
    locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
    locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
    let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
      ...options3,
      timeZone: void 0
    });
    let min8 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p3) => p3.type === "hour").value, 10);
    let max7 = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p3) => p3.type === "hour").value, 10);
    if (min8 === 0 && max7 === 23)
      return "h23";
    if (min8 === 24 && max7 === 23)
      return "h24";
    if (min8 === 0 && max7 === 11)
      return "h11";
    if (min8 === 12 && max7 === 11)
      return "h12";
    throw new Error("Unexpected hour cycle result");
  }

  // node_modules/@internationalized/number/dist/module.js
  var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
  var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
  try {
    $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
      signDisplay: "exceptZero"
    }).resolvedOptions().signDisplay === "exceptZero";
  } catch (e) {
  }
  var $488c6ddbf4ef74c2$var$supportsUnit = false;
  try {
    $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
      style: "unit",
      unit: "degree"
    }).resolvedOptions().style === "unit";
  } catch (e1) {
  }
  var $488c6ddbf4ef74c2$var$UNITS = {
    degree: {
      narrow: {
        default: "\xB0",
        "ja-JP": " \u5EA6",
        "zh-TW": "\u5EA6",
        "sl-SI": " \xB0"
      }
    }
  };
  var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
    format(value12) {
      let res = "";
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
        res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value12);
      else
        res = this.numberFormatter.format(value12);
      if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
        var ref;
        let { unit: unit2, unitDisplay = "short", locale } = this.resolvedOptions();
        let values3 = (ref = $488c6ddbf4ef74c2$var$UNITS[unit2]) === null || ref === void 0 ? void 0 : ref[unitDisplay];
        res += values3[locale] || values3.default;
      }
      return res;
    }
    formatToParts(value12) {
      return this.numberFormatter.formatToParts(value12);
    }
    formatRange(start2, end3) {
      if (typeof this.numberFormatter.formatRange === "function")
        return this.numberFormatter.formatRange(start2, end3);
      if (end3 < start2)
        throw new RangeError("End date must be >= start date");
      return `${this.format(start2)} \u2013 ${this.format(end3)}`;
    }
    formatRangeToParts(start2, end3) {
      if (typeof this.numberFormatter.formatRangeToParts === "function")
        return this.numberFormatter.formatRangeToParts(start2, end3);
      if (end3 < start2)
        throw new RangeError("End date must be >= start date");
      let startParts = this.numberFormatter.formatToParts(start2);
      let endParts = this.numberFormatter.formatToParts(end3);
      return [
        ...startParts.map((p3) => ({
          ...p3,
          source: "startRange"
        })),
        {
          type: "literal",
          value: " \u2013 ",
          source: "shared"
        },
        ...endParts.map((p3) => ({
          ...p3,
          source: "endRange"
        }))
      ];
    }
    resolvedOptions() {
      let options3 = this.numberFormatter.resolvedOptions();
      if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
        options3 = {
          ...options3,
          signDisplay: this.options.signDisplay
        };
      if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit")
        options3 = {
          ...options3,
          style: "unit",
          unit: this.options.unit,
          unitDisplay: this.options.unitDisplay
        };
      return options3;
    }
    constructor(locale, options3 = {}) {
      this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options3);
      this.options = options3;
    }
  };
  function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options3 = {}) {
    let { numberingSystem } = options3;
    if (numberingSystem && locale.indexOf("-u-nu-") === -1)
      locale = `${locale}-u-nu-${numberingSystem}`;
    if (options3.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var ref;
      let { unit: unit2, unitDisplay = "short" } = options3;
      if (!unit2)
        throw new Error('unit option must be provided with style: "unit"');
      if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit2]) === null || ref === void 0 ? void 0 : ref[unitDisplay]))
        throw new Error(`Unsupported unit ${unit2} with unitDisplay = ${unitDisplay}`);
      options3 = {
        ...options3,
        style: "decimal"
      };
    }
    let cacheKey = locale + (options3 ? Object.entries(options3).sort((a4, b4) => a4[0] < b4[0] ? -1 : 1).join() : "");
    if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
      return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
    let numberFormatter = new Intl.NumberFormat(locale, options3);
    $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
    return numberFormatter;
  }
  function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num2) {
    if (signDisplay === "auto")
      return numberFormat.format(num2);
    else if (signDisplay === "never")
      return numberFormat.format(Math.abs(num2));
    else {
      let needsPositiveSign = false;
      if (signDisplay === "always")
        needsPositiveSign = num2 > 0 || Object.is(num2, 0);
      else if (signDisplay === "exceptZero") {
        if (Object.is(num2, -0) || Object.is(num2, 0))
          num2 = Math.abs(num2);
        else
          needsPositiveSign = num2 > 0;
      }
      if (needsPositiveSign) {
        let negative = numberFormat.format(-num2);
        let noSign = numberFormat.format(num2);
        let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
        if ([
          ...minus
        ].length !== 1)
          console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
        let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
        return positive;
      } else
        return numberFormat.format(num2);
    }
  }
  var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");

  // node_modules/@react-aria/i18n/dist/module.js
  function $parcel$export5(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $18f2051aff69b9bf$exports = {};
  $parcel$export5($18f2051aff69b9bf$exports, "I18nProvider", () => $18f2051aff69b9bf$export$a54013f0d02a8f82);
  $parcel$export5($18f2051aff69b9bf$exports, "useLocale", () => $18f2051aff69b9bf$export$43bb16f9c6d9e3f7);
  var $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
    "Arab",
    "Syrc",
    "Samr",
    "Mand",
    "Thaa",
    "Mend",
    "Nkoo",
    "Adlm",
    "Rohg",
    "Hebr"
  ]);
  var $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
    "ae",
    "ar",
    "arc",
    "bcc",
    "bqi",
    "ckb",
    "dv",
    "fa",
    "glk",
    "he",
    "ku",
    "mzn",
    "nqo",
    "pnb",
    "ps",
    "sd",
    "ug",
    "ur",
    "yi"
  ]);
  function $148a7a147e38ea7f$export$702d680b21cbd764(locale) {
    if (Intl.Locale) {
      let script2 = new Intl.Locale(locale).maximize().script;
      return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script2);
    }
    let lang2 = locale.split("-")[0];
    return $148a7a147e38ea7f$var$RTL_LANGS.has(lang2);
  }
  function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
    let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
    try {
      Intl.DateTimeFormat.supportedLocalesOf([
        locale
      ]);
    } catch (_err) {
      locale = "en-US";
    }
    return {
      locale,
      direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
    };
  }
  var $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  var $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
  function $1e5a04cdaf7d1af8$var$updateLocale() {
    $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
    for (let listener of $1e5a04cdaf7d1af8$var$listeners)
      listener($1e5a04cdaf7d1af8$var$currentLocale);
  }
  function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
    let isSSR = $704cf1d3b684cc5c$export$535bd6ca7f90a273();
    let [defaultLocale, setDefaultLocale] = (0, import_react48.useState)($1e5a04cdaf7d1af8$var$currentLocale);
    (0, import_react48.useEffect)(() => {
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
        window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
      $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
      return () => {
        $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
        if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
          window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
      };
    }, []);
    if (isSSR)
      return {
        locale: "en-US",
        direction: "ltr"
      };
    return defaultLocale;
  }
  var $18f2051aff69b9bf$var$I18nContext = /* @__PURE__ */ import_react48.default.createContext(null);
  function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
    let { locale, children: children2 } = props;
    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
    let value12 = locale ? {
      locale,
      direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
    } : defaultLocale;
    return /* @__PURE__ */ import_react48.default.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
      value: value12
    }, children2);
  }
  function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
    let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
    let context = (0, import_react48.useContext)($18f2051aff69b9bf$var$I18nContext);
    return context || defaultLocale;
  }
  var $321bc95feeb923dd$exports = {};
  $parcel$export5($321bc95feeb923dd$exports, "useMessageFormatter", () => $321bc95feeb923dd$export$ec23bf898b1eed85);
  var $321bc95feeb923dd$var$cache = /* @__PURE__ */ new WeakMap();
  function $321bc95feeb923dd$var$getCachedDictionary(strings) {
    let dictionary = $321bc95feeb923dd$var$cache.get(strings);
    if (!dictionary) {
      dictionary = new $d6fd23bc337660df$export$64839e615120df17(strings);
      $321bc95feeb923dd$var$cache.set(strings, dictionary);
    }
    return dictionary;
  }
  function $321bc95feeb923dd$export$ec23bf898b1eed85(strings) {
    let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    let dictionary = (0, import_react48.useMemo)(() => $321bc95feeb923dd$var$getCachedDictionary(strings), [
      strings
    ]);
    let formatter = (0, import_react48.useMemo)(() => new $972eb555d604f491$export$526ebc05ff964723(locale, dictionary), [
      locale,
      dictionary
    ]);
    return (0, import_react48.useCallback)((key, variables3) => formatter.format(key, variables3), [
      formatter
    ]);
  }
  var $896ba0a80a8f4d36$exports = {};
  $parcel$export5($896ba0a80a8f4d36$exports, "useDateFormatter", () => $896ba0a80a8f4d36$export$85fd5fdf27bacc79);
  function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options3) {
    let lastOptions = (0, import_react48.useRef)(null);
    if (options3 && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options3, lastOptions.current))
      options3 = lastOptions.current;
    lastOptions.current = options3;
    let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    return (0, import_react48.useMemo)(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options3), [
      locale,
      options3
    ]);
  }
  function $896ba0a80a8f4d36$var$isEqual(a4, b4) {
    if (a4 === b4)
      return true;
    let aKeys = Object.keys(a4);
    let bKeys = Object.keys(b4);
    if (aKeys.length !== bKeys.length)
      return false;
    for (let key of aKeys) {
      if (b4[key] !== a4[key])
        return false;
    }
    return true;
  }
  var $a916eb452884faea$exports = {};
  $parcel$export5($a916eb452884faea$exports, "useNumberFormatter", () => $a916eb452884faea$export$b7a616150fdb9f44);
  function $a916eb452884faea$export$b7a616150fdb9f44(options3 = {}) {
    let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    return (0, import_react48.useMemo)(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options3), [
      locale,
      options3
    ]);
  }
  var $325a3faab7a68acd$exports = {};
  $parcel$export5($325a3faab7a68acd$exports, "useCollator", () => $325a3faab7a68acd$export$a16aca283550c30d);
  var $325a3faab7a68acd$var$cache = /* @__PURE__ */ new Map();
  function $325a3faab7a68acd$export$a16aca283550c30d(options3) {
    let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    let cacheKey = locale + (options3 ? Object.entries(options3).sort((a4, b4) => a4[0] < b4[0] ? -1 : 1).join() : "");
    if ($325a3faab7a68acd$var$cache.has(cacheKey))
      return $325a3faab7a68acd$var$cache.get(cacheKey);
    let formatter = new Intl.Collator(locale, options3);
    $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
    return formatter;
  }
  var $bb77f239b46e8c72$exports = {};
  $parcel$export5($bb77f239b46e8c72$exports, "useFilter", () => $bb77f239b46e8c72$export$3274cf84b703fff);
  function $bb77f239b46e8c72$export$3274cf84b703fff(options3) {
    let collator = $325a3faab7a68acd$export$a16aca283550c30d({
      usage: "search",
      ...options3
    });
    return {
      startsWith(string, substring) {
        if (substring.length === 0)
          return true;
        string = string.normalize("NFC");
        substring = substring.normalize("NFC");
        return collator.compare(string.slice(0, substring.length), substring) === 0;
      },
      endsWith(string, substring) {
        if (substring.length === 0)
          return true;
        string = string.normalize("NFC");
        substring = substring.normalize("NFC");
        return collator.compare(string.slice(-substring.length), substring) === 0;
      },
      contains(string, substring) {
        if (substring.length === 0)
          return true;
        string = string.normalize("NFC");
        substring = substring.normalize("NFC");
        let scan2 = 0;
        let sliceLen = substring.length;
        for (; scan2 + sliceLen <= string.length; scan2++) {
          let slice4 = string.slice(scan2, scan2 + sliceLen);
          if (collator.compare(substring, slice4) === 0)
            return true;
        }
        return false;
      }
    };
  }

  // node_modules/dom-helpers/esm/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/dom-helpers/esm/ownerWindow.js
  function ownerWindow(node2) {
    var doc = ownerDocument(node2);
    return doc && doc.defaultView || window;
  }

  // node_modules/dom-helpers/esm/getComputedStyle.js
  function getComputedStyle4(node2, psuedoElement) {
    return ownerWindow(node2).getComputedStyle(node2, psuedoElement);
  }

  // node_modules/dom-helpers/esm/hyphenate.js
  var rUpper = /([A-Z])/g;
  function hyphenate(string) {
    return string.replace(rUpper, "-$1").toLowerCase();
  }

  // node_modules/dom-helpers/esm/hyphenateStyle.js
  var msPattern = /^ms-/;
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, "-ms-");
  }

  // node_modules/dom-helpers/esm/isTransform.js
  var supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;
  function isTransform(value12) {
    return !!(value12 && supportedTransforms.test(value12));
  }

  // node_modules/dom-helpers/esm/css.js
  function style2(node2, property) {
    var css50 = "";
    var transforms = "";
    if (typeof property === "string") {
      return node2.style.getPropertyValue(hyphenateStyleName(property)) || getComputedStyle4(node2).getPropertyValue(hyphenateStyleName(property));
    }
    Object.keys(property).forEach(function(key) {
      var value12 = property[key];
      if (!value12 && value12 !== 0) {
        node2.style.removeProperty(hyphenateStyleName(key));
      } else if (isTransform(key)) {
        transforms += key + "(" + value12 + ") ";
      } else {
        css50 += hyphenateStyleName(key) + ": " + value12 + ";";
      }
    });
    if (transforms) {
      css50 += "transform: " + transforms + ";";
    }
    node2.style.cssText += ";" + css50;
  }
  var css_default = style2;

  // node_modules/dom-helpers/esm/contains.js
  function contains3(context, node2) {
    if (context.contains)
      return context.contains(node2);
    if (context.compareDocumentPosition)
      return context === node2 || !!(context.compareDocumentPosition(node2) & 16);
  }

  // node_modules/dom-helpers/esm/isDocument.js
  function isDocument(element3) {
    return "nodeType" in element3 && element3.nodeType === document.DOCUMENT_NODE;
  }

  // node_modules/dom-helpers/esm/isWindow.js
  function isWindow(node2) {
    if ("window" in node2 && node2.window === node2)
      return node2;
    if (isDocument(node2))
      return node2.defaultView || false;
    return false;
  }

  // node_modules/dom-helpers/esm/getScrollAccessor.js
  function getscrollAccessor(offset2) {
    var prop3 = offset2 === "pageXOffset" ? "scrollLeft" : "scrollTop";
    function scrollAccessor(node2, val) {
      var win = isWindow(node2);
      if (val === void 0) {
        return win ? win[offset2] : node2[prop3];
      }
      if (win) {
        win.scrollTo(win[offset2], val);
      } else {
        node2[prop3] = val;
      }
    }
    return scrollAccessor;
  }

  // node_modules/dom-helpers/esm/scrollLeft.js
  var scrollLeft_default = getscrollAccessor("pageXOffset");

  // node_modules/dom-helpers/esm/scrollTop.js
  var scrollTop_default = getscrollAccessor("pageYOffset");

  // node_modules/dom-helpers/esm/offset.js
  function offset(node2) {
    var doc = ownerDocument(node2);
    var box6 = {
      top: 0,
      left: 0,
      height: 0,
      width: 0
    };
    var docElem = doc && doc.documentElement;
    if (!docElem || !contains3(docElem, node2))
      return box6;
    if (node2.getBoundingClientRect !== void 0)
      box6 = node2.getBoundingClientRect();
    box6 = {
      top: box6.top + scrollTop_default(docElem) - (docElem.clientTop || 0),
      left: box6.left + scrollLeft_default(docElem) - (docElem.clientLeft || 0),
      width: box6.width,
      height: box6.height
    };
    return box6;
  }

  // node_modules/dom-helpers/esm/offsetParent.js
  var isHTMLElement = function isHTMLElement2(e) {
    return !!e && "offsetParent" in e;
  };
  function offsetParent(node2) {
    var doc = ownerDocument(node2);
    var parent2 = node2 && node2.offsetParent;
    while (isHTMLElement(parent2) && parent2.nodeName !== "HTML" && css_default(parent2, "position") === "static") {
      parent2 = parent2.offsetParent;
    }
    return parent2 || doc.documentElement;
  }

  // node_modules/dom-helpers/esm/position.js
  var nodeName2 = function nodeName3(node2) {
    return node2.nodeName && node2.nodeName.toLowerCase();
  };
  function position3(node2, offsetParent2) {
    var parentOffset = {
      top: 0,
      left: 0
    };
    var offset2;
    if (css_default(node2, "position") === "fixed") {
      offset2 = node2.getBoundingClientRect();
    } else {
      var parent2 = offsetParent2 || offsetParent(node2);
      offset2 = offset(node2);
      if (nodeName2(parent2) !== "html")
        parentOffset = offset(parent2);
      var borderTop = String(css_default(parent2, "borderTopWidth") || 0);
      parentOffset.top += parseInt(borderTop, 10) - scrollTop_default(parent2) || 0;
      var borderLeft2 = String(css_default(parent2, "borderLeftWidth") || 0);
      parentOffset.left += parseInt(borderLeft2, 10) - scrollLeft_default(parent2) || 0;
    }
    var marginTop = String(css_default(node2, "marginTop") || 0);
    var marginLeft = String(css_default(node2, "marginLeft") || 0);
    return _extends({}, offset2, {
      top: offset2.top - parentOffset.top - (parseInt(marginTop, 10) || 0),
      left: offset2.left - parentOffset.left - (parseInt(marginLeft, 10) || 0)
    });
  }

  // node_modules/@react-aria/interactions/dist/module.js
  var import_react49 = __toESM(require_react());
  function $parcel$export6(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $3b117e43dc0ca95d$exports = {};
  $parcel$export6($3b117e43dc0ca95d$exports, "Pressable", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);
  var $f6c31cce2adf654f$exports = {};
  $parcel$export6($f6c31cce2adf654f$exports, "usePress", () => $f6c31cce2adf654f$export$45712eceda6fad21);
  var $14c0b72509d70225$var$state = "default";
  var $14c0b72509d70225$var$savedUserSelect = "";
  var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
  function $14c0b72509d70225$export$16a4697467175487(target6) {
    if ($c87311424ea30a05$export$fedb369cb70207f1()) {
      if ($14c0b72509d70225$var$state === "default") {
        $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
        document.documentElement.style.webkitUserSelect = "none";
      }
      $14c0b72509d70225$var$state = "disabled";
    } else if (target6) {
      $14c0b72509d70225$var$modifiedElementMap.set(target6, target6.style.userSelect);
      target6.style.userSelect = "none";
    }
  }
  function $14c0b72509d70225$export$b0d6fa1ab32e3295(target6) {
    if ($c87311424ea30a05$export$fedb369cb70207f1()) {
      if ($14c0b72509d70225$var$state !== "disabled")
        return;
      $14c0b72509d70225$var$state = "restoring";
      setTimeout(() => {
        $bbed8b41f857bcc0$export$24490316f764c430(() => {
          if ($14c0b72509d70225$var$state === "restoring") {
            if (document.documentElement.style.webkitUserSelect === "none")
              document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
            $14c0b72509d70225$var$savedUserSelect = "";
            $14c0b72509d70225$var$state = "default";
          }
        });
      }, 300);
    } else if (target6 && $14c0b72509d70225$var$modifiedElementMap.has(target6)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target6);
      if (target6.style.userSelect === "none")
        target6.style.userSelect = targetOldUserSelect;
      if (target6.getAttribute("style") === "")
        target6.removeAttribute("style");
      $14c0b72509d70225$var$modifiedElementMap.delete(target6);
    }
  }
  function $8a9cb279dc87e130$export$60278871457622de(event) {
    if (event.mozInputSource === 0 && event.isTrusted)
      return true;
    return event.detail === 0 && !event.pointerType;
  }
  var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
    isDefaultPrevented() {
      return this.nativeEvent.defaultPrevented;
    }
    preventDefault() {
      this.defaultPrevented = true;
      this.nativeEvent.preventDefault();
    }
    stopPropagation() {
      this.nativeEvent.stopPropagation();
      this.isPropagationStopped = () => true;
    }
    isPropagationStopped() {
      return false;
    }
    persist() {
    }
    constructor(type, nativeEvent) {
      this.nativeEvent = nativeEvent;
      this.target = nativeEvent.target;
      this.currentTarget = nativeEvent.currentTarget;
      this.relatedTarget = nativeEvent.relatedTarget;
      this.bubbles = nativeEvent.bubbles;
      this.cancelable = nativeEvent.cancelable;
      this.defaultPrevented = nativeEvent.defaultPrevented;
      this.eventPhase = nativeEvent.eventPhase;
      this.isTrusted = nativeEvent.isTrusted;
      this.timeStamp = nativeEvent.timeStamp;
      this.type = type;
    }
  };
  function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
    let stateRef = (0, import_react49.useRef)({
      isFocused: false,
      onBlur,
      observer: null
    });
    stateRef.current.onBlur = onBlur;
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      const state3 = stateRef.current;
      return () => {
        if (state3.observer) {
          state3.observer.disconnect();
          state3.observer = null;
        }
      };
    }, []);
    return (0, import_react49.useCallback)((e1) => {
      if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
        stateRef.current.isFocused = true;
        let target6 = e1.target;
        let onBlurHandler = (e) => {
          var _current, ref;
          stateRef.current.isFocused = false;
          if (target6.disabled)
            (ref = (_current = stateRef.current).onBlur) === null || ref === void 0 ? void 0 : ref.call(_current, new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e));
          if (stateRef.current.observer) {
            stateRef.current.observer.disconnect();
            stateRef.current.observer = null;
          }
        };
        target6.addEventListener("focusout", onBlurHandler, {
          once: true
        });
        stateRef.current.observer = new MutationObserver(() => {
          if (stateRef.current.isFocused && target6.disabled) {
            stateRef.current.observer.disconnect();
            target6.dispatchEvent(new FocusEvent("blur"));
            target6.dispatchEvent(new FocusEvent("focusout", {
              bubbles: true
            }));
          }
        });
        stateRef.current.observer.observe(target6, {
          attributes: true,
          attributeFilter: [
            "disabled"
          ]
        });
      }
    }, []);
  }
  var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = import_react49.default.createContext(null);
  $ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
  function $f6c31cce2adf654f$var$usePressResponderContext(props) {
    let context = (0, import_react49.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
    if (context) {
      let { register, ...contextProps } = context;
      props = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
      register();
    }
    $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
    return props;
  }
  function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
    let {
      onPress: onPress1,
      onPressChange: onPressChange1,
      onPressStart: onPressStart1,
      onPressEnd: onPressEnd1,
      onPressUp: onPressUp1,
      isDisabled: isDisabled1,
      isPressed: isPressedProp,
      preventFocusOnPress,
      shouldCancelOnPointerExit,
      allowTextSelectionOnPress,
      ref: _2,
      ...domProps
    } = $f6c31cce2adf654f$var$usePressResponderContext(props);
    let propsRef = (0, import_react49.useRef)(null);
    propsRef.current = {
      onPress: onPress1,
      onPressChange: onPressChange1,
      onPressStart: onPressStart1,
      onPressEnd: onPressEnd1,
      onPressUp: onPressUp1,
      isDisabled: isDisabled1,
      shouldCancelOnPointerExit
    };
    let [isPressed, setPressed] = (0, import_react49.useState)(false);
    let ref = (0, import_react49.useRef)({
      isPressed: false,
      ignoreEmulatedMouseEvents: false,
      ignoreClickAfterPress: false,
      didFirePressStart: false,
      activePointerId: null,
      target: null,
      isOverTarget: false,
      pointerType: null
    });
    let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let pressProps1 = (0, import_react49.useMemo)(() => {
      let state3 = ref.current;
      let triggerPressStart = (originalEvent, pointerType) => {
        let { onPressStart, onPressChange, isDisabled } = propsRef.current;
        if (isDisabled || state3.didFirePressStart)
          return;
        if (onPressStart)
          onPressStart({
            type: "pressstart",
            pointerType,
            target: originalEvent.currentTarget,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        if (onPressChange)
          onPressChange(true);
        state3.didFirePressStart = true;
        setPressed(true);
      };
      let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
        let { onPressEnd, onPressChange, onPress, isDisabled } = propsRef.current;
        if (!state3.didFirePressStart)
          return;
        state3.ignoreClickAfterPress = true;
        state3.didFirePressStart = false;
        if (onPressEnd)
          onPressEnd({
            type: "pressend",
            pointerType,
            target: originalEvent.currentTarget,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        if (onPressChange)
          onPressChange(false);
        setPressed(false);
        if (onPress && wasPressed && !isDisabled)
          onPress({
            type: "press",
            pointerType,
            target: originalEvent.currentTarget,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
      };
      let triggerPressUp = (originalEvent, pointerType) => {
        let { onPressUp, isDisabled } = propsRef.current;
        if (isDisabled)
          return;
        if (onPressUp)
          onPressUp({
            type: "pressup",
            pointerType,
            target: originalEvent.currentTarget,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
      };
      let cancel = (e) => {
        if (state3.isPressed) {
          if (state3.isOverTarget)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType, false);
          state3.isPressed = false;
          state3.isOverTarget = false;
          state3.activePointerId = null;
          state3.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress)
            $14c0b72509d70225$export$b0d6fa1ab32e3295(state3.target);
        }
      };
      let pressProps = {
        onKeyDown(e) {
          if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {
            if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target))
              e.preventDefault();
            e.stopPropagation();
            if (!state3.isPressed && !e.repeat) {
              state3.target = e.currentTarget;
              state3.isPressed = true;
              triggerPressStart(e, "keyboard");
              addGlobalListener(document, "keyup", onKeyUp, false);
            }
          }
        },
        onKeyUp(e) {
          if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target))
            triggerPressUp($f6c31cce2adf654f$var$createEvent(state3.target, e), "keyboard");
        },
        onClick(e) {
          if (e && !e.currentTarget.contains(e.target))
            return;
          if (e && e.button === 0) {
            e.stopPropagation();
            if (isDisabled1)
              e.preventDefault();
            if (!state3.ignoreClickAfterPress && !state3.ignoreEmulatedMouseEvents && (state3.pointerType === "virtual" || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {
              if (!isDisabled1 && !preventFocusOnPress)
                $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
              triggerPressStart(e, "virtual");
              triggerPressUp(e, "virtual");
              triggerPressEnd(e, "virtual");
            }
            state3.ignoreEmulatedMouseEvents = false;
            state3.ignoreClickAfterPress = false;
          }
        }
      };
      let onKeyUp = (e) => {
        if (state3.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target))
            e.preventDefault();
          e.stopPropagation();
          state3.isPressed = false;
          let target6 = e.target;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), "keyboard", state3.target.contains(target6));
          removeAllGlobalListeners();
          if (state3.target.contains(target6) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state3.target) || state3.target.getAttribute("role") === "link")
            state3.target.click();
        }
      };
      if (typeof PointerEvent !== "undefined") {
        pressProps.onPointerDown = (e) => {
          if (e.button !== 0 || !e.currentTarget.contains(e.target))
            return;
          if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {
            state3.pointerType = "virtual";
            return;
          }
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
            e.preventDefault();
          state3.pointerType = e.pointerType;
          e.stopPropagation();
          if (!state3.isPressed) {
            state3.isPressed = true;
            state3.isOverTarget = true;
            state3.activePointerId = e.pointerId;
            state3.target = e.currentTarget;
            if (!isDisabled1 && !preventFocusOnPress)
              $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
            if (!allowTextSelectionOnPress)
              $14c0b72509d70225$export$16a4697467175487(state3.target);
            triggerPressStart(e, state3.pointerType);
            addGlobalListener(document, "pointermove", onPointerMove, false);
            addGlobalListener(document, "pointerup", onPointerUp, false);
            addGlobalListener(document, "pointercancel", onPointerCancel, false);
          }
        };
        pressProps.onMouseDown = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          if (e.button === 0) {
            if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
              e.preventDefault();
            e.stopPropagation();
          }
        };
        pressProps.onPointerUp = (e) => {
          if (!e.currentTarget.contains(e.target) || state3.pointerType === "virtual")
            return;
          if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget))
            triggerPressUp(e, state3.pointerType || e.pointerType);
        };
        let onPointerMove = (e) => {
          if (e.pointerId !== state3.activePointerId)
            return;
          if ($f6c31cce2adf654f$var$isOverTarget(e, state3.target)) {
            if (!state3.isOverTarget) {
              state3.isOverTarget = true;
              triggerPressStart($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType);
            }
          } else if (state3.isOverTarget) {
            state3.isOverTarget = false;
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType, false);
            if (propsRef.current.shouldCancelOnPointerExit)
              cancel(e);
          }
        };
        let onPointerUp = (e) => {
          if (e.pointerId === state3.activePointerId && state3.isPressed && e.button === 0) {
            if ($f6c31cce2adf654f$var$isOverTarget(e, state3.target))
              triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType);
            else if (state3.isOverTarget)
              triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType, false);
            state3.isPressed = false;
            state3.isOverTarget = false;
            state3.activePointerId = null;
            state3.pointerType = null;
            removeAllGlobalListeners();
            if (!allowTextSelectionOnPress)
              $14c0b72509d70225$export$b0d6fa1ab32e3295(state3.target);
          }
        };
        let onPointerCancel = (e) => {
          cancel(e);
        };
        pressProps.onDragStart = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          cancel(e);
        };
      } else {
        pressProps.onMouseDown = (e) => {
          if (e.button !== 0 || !e.currentTarget.contains(e.target))
            return;
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget))
            e.preventDefault();
          e.stopPropagation();
          if (state3.ignoreEmulatedMouseEvents)
            return;
          state3.isPressed = true;
          state3.isOverTarget = true;
          state3.target = e.currentTarget;
          state3.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? "virtual" : "mouse";
          if (!isDisabled1 && !preventFocusOnPress)
            $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
          triggerPressStart(e, state3.pointerType);
          addGlobalListener(document, "mouseup", onMouseUp, false);
        };
        pressProps.onMouseEnter = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          if (state3.isPressed && !state3.ignoreEmulatedMouseEvents) {
            state3.isOverTarget = true;
            triggerPressStart(e, state3.pointerType);
          }
        };
        pressProps.onMouseLeave = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          if (state3.isPressed && !state3.ignoreEmulatedMouseEvents) {
            state3.isOverTarget = false;
            triggerPressEnd(e, state3.pointerType, false);
            if (propsRef.current.shouldCancelOnPointerExit)
              cancel(e);
          }
        };
        pressProps.onMouseUp = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          if (!state3.ignoreEmulatedMouseEvents && e.button === 0)
            triggerPressUp(e, state3.pointerType);
        };
        let onMouseUp = (e) => {
          if (e.button !== 0)
            return;
          state3.isPressed = false;
          removeAllGlobalListeners();
          if (state3.ignoreEmulatedMouseEvents) {
            state3.ignoreEmulatedMouseEvents = false;
            return;
          }
          if ($f6c31cce2adf654f$var$isOverTarget(e, state3.target))
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType);
          else if (state3.isOverTarget)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state3.target, e), state3.pointerType, false);
          state3.isOverTarget = false;
        };
        pressProps.onTouchStart = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
          if (!touch)
            return;
          state3.activePointerId = touch.identifier;
          state3.ignoreEmulatedMouseEvents = true;
          state3.isOverTarget = true;
          state3.isPressed = true;
          state3.target = e.currentTarget;
          state3.pointerType = "touch";
          if (!isDisabled1 && !preventFocusOnPress)
            $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
          if (!allowTextSelectionOnPress)
            $14c0b72509d70225$export$16a4697467175487(state3.target);
          triggerPressStart(e, state3.pointerType);
          addGlobalListener(window, "scroll", onScroll, true);
        };
        pressProps.onTouchMove = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          if (!state3.isPressed)
            return;
          let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state3.activePointerId);
          if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
            if (!state3.isOverTarget) {
              state3.isOverTarget = true;
              triggerPressStart(e, state3.pointerType);
            }
          } else if (state3.isOverTarget) {
            state3.isOverTarget = false;
            triggerPressEnd(e, state3.pointerType, false);
            if (propsRef.current.shouldCancelOnPointerExit)
              cancel(e);
          }
        };
        pressProps.onTouchEnd = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          if (!state3.isPressed)
            return;
          let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state3.activePointerId);
          if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
            triggerPressUp(e, state3.pointerType);
            triggerPressEnd(e, state3.pointerType);
          } else if (state3.isOverTarget)
            triggerPressEnd(e, state3.pointerType, false);
          state3.isPressed = false;
          state3.activePointerId = null;
          state3.isOverTarget = false;
          state3.ignoreEmulatedMouseEvents = true;
          if (!allowTextSelectionOnPress)
            $14c0b72509d70225$export$b0d6fa1ab32e3295(state3.target);
          removeAllGlobalListeners();
        };
        pressProps.onTouchCancel = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          e.stopPropagation();
          if (state3.isPressed)
            cancel(e);
        };
        let onScroll = (e) => {
          if (state3.isPressed && e.target.contains(state3.target))
            cancel({
              currentTarget: state3.target,
              shiftKey: false,
              ctrlKey: false,
              metaKey: false,
              altKey: false
            });
        };
        pressProps.onDragStart = (e) => {
          if (!e.currentTarget.contains(e.target))
            return;
          cancel(e);
        };
      }
      return pressProps;
    }, [
      addGlobalListener,
      isDisabled1,
      preventFocusOnPress,
      removeAllGlobalListeners,
      allowTextSelectionOnPress
    ]);
    (0, import_react49.useEffect)(() => {
      return () => {
        if (!allowTextSelectionOnPress)
          $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
      };
    }, [
      allowTextSelectionOnPress
    ]);
    return {
      isPressed: isPressedProp || isPressed,
      pressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps1)
    };
  }
  function $f6c31cce2adf654f$var$isHTMLAnchorLink(target6) {
    return target6.tagName === "A" && target6.hasAttribute("href");
  }
  function $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {
    const { key, code: code3, target: target6 } = event;
    const element3 = target6;
    const { tagName: tagName2, isContentEditable: isContentEditable2 } = element3;
    const role = element3.getAttribute("role");
    return (key === "Enter" || key === " " || key === "Spacebar" || code3 === "Space") && tagName2 !== "INPUT" && tagName2 !== "TEXTAREA" && isContentEditable2 !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element3) || role === "button" && key !== "Enter") && !(role === "link" && key !== "Enter");
  }
  function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
    const { targetTouches } = event;
    if (targetTouches.length > 0)
      return targetTouches[0];
    return null;
  }
  function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
    const changedTouches = event.changedTouches;
    for (let i7 = 0; i7 < changedTouches.length; i7++) {
      const touch = changedTouches[i7];
      if (touch.identifier === pointerId)
        return touch;
    }
    return null;
  }
  function $f6c31cce2adf654f$var$createEvent(target6, e) {
    return {
      currentTarget: target6,
      shiftKey: e.shiftKey,
      ctrlKey: e.ctrlKey,
      metaKey: e.metaKey,
      altKey: e.altKey
    };
  }
  function $f6c31cce2adf654f$var$getPointClientRect(point) {
    let offsetX = point.width / 2 || point.radiusX || 0;
    let offsetY = point.height / 2 || point.radiusY || 0;
    return {
      top: point.clientY - offsetY,
      right: point.clientX + offsetX,
      bottom: point.clientY + offsetY,
      left: point.clientX - offsetX
    };
  }
  function $f6c31cce2adf654f$var$areRectanglesOverlapping(a4, b4) {
    if (a4.left > b4.right || b4.left > a4.right)
      return false;
    if (a4.top > b4.bottom || b4.top > a4.bottom)
      return false;
    return true;
  }
  function $f6c31cce2adf654f$var$isOverTarget(point, target6) {
    let rect3 = target6.getBoundingClientRect();
    let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
    return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect3, pointRect);
  }
  function $f6c31cce2adf654f$var$shouldPreventDefault(target6) {
    return !target6.draggable;
  }
  function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target6) {
    return !((target6.tagName === "INPUT" || target6.tagName === "BUTTON") && target6.type === "submit");
  }
  function $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {
    return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse";
  }
  var $3b117e43dc0ca95d$export$27c701ed9e449e99 = /* @__PURE__ */ import_react49.default.forwardRef(({ children: children2, ...props }, ref) => {
    let newRef = (0, import_react49.useRef)();
    ref = ref !== null && ref !== void 0 ? ref : newRef;
    let { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
      ...props,
      ref
    });
    let child = import_react49.default.Children.only(children2);
    return /* @__PURE__ */ import_react49.default.cloneElement(child, {
      ref,
      ...$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, pressProps)
    });
  });
  var $f1ab8c75478c6f73$exports = {};
  $parcel$export6($f1ab8c75478c6f73$exports, "PressResponder", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);
  var $f1ab8c75478c6f73$export$3351871ee4b288b8 = /* @__PURE__ */ import_react49.default.forwardRef(({ children: children2, ...props }, ref) => {
    let isRegistered = (0, import_react49.useRef)(false);
    let prevContext = (0, import_react49.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
    let context = $3ef42575df84b30b$export$9d1611c77c2fe928(prevContext || {}, {
      ...props,
      ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
      register() {
        isRegistered.current = true;
        if (prevContext)
          prevContext.register();
      }
    });
    $e7801be82b4b2a53$export$4debdb1a3f0fa79e(prevContext, ref);
    (0, import_react49.useEffect)(() => {
      if (!isRegistered.current)
        console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
    }, []);
    return /* @__PURE__ */ import_react49.default.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
      value: context
    }, children2);
  });
  var $a1ea59d68270f0dd$exports = {};
  $parcel$export6($a1ea59d68270f0dd$exports, "useFocus", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);
  function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
    let { isDisabled, onFocus: onFocusProp, onBlur: onBlurProp, onFocusChange } = props;
    const onBlur = (0, import_react49.useCallback)((e) => {
      if (e.target === e.currentTarget) {
        if (onBlurProp)
          onBlurProp(e);
        if (onFocusChange)
          onFocusChange(false);
        return true;
      }
    }, [
      onBlurProp,
      onFocusChange
    ]);
    const onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    const onFocus = (0, import_react49.useCallback)((e) => {
      if (e.target === e.currentTarget) {
        if (onFocusProp)
          onFocusProp(e);
        if (onFocusChange)
          onFocusChange(true);
        onSyntheticFocus(e);
      }
    }, [
      onFocusChange,
      onFocusProp,
      onSyntheticFocus
    ]);
    return {
      focusProps: {
        onFocus: !isDisabled && (onFocusProp || onFocusChange || onBlurProp) ? onFocus : void 0,
        onBlur: !isDisabled && (onBlurProp || onFocusChange) ? onBlur : null
      }
    };
  }
  var $507fabe10e71c6fb$exports = {};
  $parcel$export6($507fabe10e71c6fb$exports, "isFocusVisible", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);
  $parcel$export6($507fabe10e71c6fb$exports, "getInteractionModality", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);
  $parcel$export6($507fabe10e71c6fb$exports, "setInteractionModality", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);
  $parcel$export6($507fabe10e71c6fb$exports, "useInteractionModality", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);
  $parcel$export6($507fabe10e71c6fb$exports, "useFocusVisible", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);
  $parcel$export6($507fabe10e71c6fb$exports, "useFocusVisibleListener", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);
  var $507fabe10e71c6fb$var$currentModality = null;
  var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
  var $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
  var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
  var $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
    Tab: true,
    Escape: true
  };
  function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
    for (let handler2 of $507fabe10e71c6fb$var$changeHandlers)
      handler2(modality, e);
  }
  function $507fabe10e71c6fb$var$isValidKey(e) {
    return !(e.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === "Control" || e.key === "Shift" || e.key === "Meta");
  }
  function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    if ($507fabe10e71c6fb$var$isValidKey(e)) {
      $507fabe10e71c6fb$var$currentModality = "keyboard";
      $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e);
    }
  }
  function $507fabe10e71c6fb$var$handlePointerEvent(e) {
    $507fabe10e71c6fb$var$currentModality = "pointer";
    if (e.type === "mousedown" || e.type === "pointerdown") {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e);
    }
  }
  function $507fabe10e71c6fb$var$handleClickEvent(e) {
    if ($8a9cb279dc87e130$export$60278871457622de(e)) {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      $507fabe10e71c6fb$var$currentModality = "virtual";
    }
  }
  function $507fabe10e71c6fb$var$handleFocusEvent(e) {
    if (e.target === window || e.target === document)
      return;
    if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
      $507fabe10e71c6fb$var$currentModality = "virtual";
      $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e);
    }
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
  }
  function $507fabe10e71c6fb$var$handleWindowBlur() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
    $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
  }
  function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
    if (typeof window === "undefined" || $507fabe10e71c6fb$var$hasSetupGlobalListeners)
      return;
    let focus2 = HTMLElement.prototype.focus;
    HTMLElement.prototype.focus = function() {
      $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
      focus2.apply(this, arguments);
    };
    document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
    document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
    window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
    window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
    if (typeof PointerEvent !== "undefined") {
      document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    } else {
      document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
      document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
    }
    $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
  }
  if (typeof document !== "undefined") {
    if (document.readyState !== "loading")
      $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    else
      document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents);
  }
  function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
    return $507fabe10e71c6fb$var$currentModality !== "pointer";
  }
  function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
    return $507fabe10e71c6fb$var$currentModality;
  }
  function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
    $507fabe10e71c6fb$var$currentModality = modality;
    $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
  }
  function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    let [modality, setModality] = (0, import_react49.useState)($507fabe10e71c6fb$var$currentModality);
    (0, import_react49.useEffect)(() => {
      let handler2 = () => {
        setModality($507fabe10e71c6fb$var$currentModality);
      };
      $507fabe10e71c6fb$var$changeHandlers.add(handler2);
      return () => {
        $507fabe10e71c6fb$var$changeHandlers.delete(handler2);
      };
    }, []);
    return modality;
  }
  function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
    return !(isTextInput && modality === "keyboard" && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
  }
  function $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
    let { isTextInput, autoFocus } = props;
    let [isFocusVisibleState, setFocusVisible] = (0, import_react49.useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());
    $507fabe10e71c6fb$export$ec71b4b83ac08ec3(($507fabe10e71c6fb$export$b9b3dfddab17db272) => {
      setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db272);
    }, [
      isTextInput
    ], {
      isTextInput
    });
    return {
      isFocusVisible: isFocusVisibleState
    };
  }
  function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
    (0, import_react49.useEffect)(() => {
      let handler2 = (modality, e) => {
        if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e))
          return;
        fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
      };
      $507fabe10e71c6fb$var$changeHandlers.add(handler2);
      return () => {
        $507fabe10e71c6fb$var$changeHandlers.delete(handler2);
      };
    }, deps);
  }
  var $9ab94262bd0047c7$exports = {};
  $parcel$export6($9ab94262bd0047c7$exports, "useFocusWithin", () => $9ab94262bd0047c7$export$420e68273165f4ec);
  function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
    let { isDisabled, onBlurWithin, onFocusWithin, onFocusWithinChange } = props;
    let state3 = (0, import_react49.useRef)({
      isFocusWithin: false
    });
    let onBlur = (0, import_react49.useCallback)((e) => {
      if (state3.current.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
        state3.current.isFocusWithin = false;
        if (onBlurWithin)
          onBlurWithin(e);
        if (onFocusWithinChange)
          onFocusWithinChange(false);
      }
    }, [
      onBlurWithin,
      onFocusWithinChange,
      state3
    ]);
    let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
    let onFocus = (0, import_react49.useCallback)((e) => {
      if (!state3.current.isFocusWithin) {
        if (onFocusWithin)
          onFocusWithin(e);
        if (onFocusWithinChange)
          onFocusWithinChange(true);
        state3.current.isFocusWithin = true;
        onSyntheticFocus(e);
      }
    }, [
      onFocusWithin,
      onFocusWithinChange,
      onSyntheticFocus
    ]);
    if (isDisabled)
      return {
        focusWithinProps: {
          onFocus: null,
          onBlur: null
        }
      };
    return {
      focusWithinProps: {
        onFocus,
        onBlur
      }
    };
  }
  var $6179b936705e76d3$exports = {};
  $parcel$export6($6179b936705e76d3$exports, "useHover", () => $6179b936705e76d3$export$ae780daf29e6d456);
  var $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  var $6179b936705e76d3$var$hoverCount = 0;
  function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
    setTimeout(() => {
      $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
    }, 50);
  }
  function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
    if (e.pointerType === "touch")
      $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
  }
  function $6179b936705e76d3$var$setupGlobalTouchEvents() {
    if (typeof document === "undefined")
      return;
    if (typeof PointerEvent !== "undefined")
      document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
    else
      document.addEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
    $6179b936705e76d3$var$hoverCount++;
    return () => {
      $6179b936705e76d3$var$hoverCount--;
      if ($6179b936705e76d3$var$hoverCount > 0)
        return;
      if (typeof PointerEvent !== "undefined")
        document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
      else
        document.removeEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
    };
  }
  function $6179b936705e76d3$export$ae780daf29e6d456(props) {
    let { onHoverStart: onHoverStart2, onHoverChange, onHoverEnd: onHoverEnd2, isDisabled } = props;
    let [isHovered, setHovered] = (0, import_react49.useState)(false);
    let state3 = (0, import_react49.useRef)({
      isHovered: false,
      ignoreEmulatedMouseEvents: false,
      pointerType: "",
      target: null
    }).current;
    (0, import_react49.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
    let { hoverProps: hoverProps1, triggerHoverEnd: triggerHoverEnd1 } = (0, import_react49.useMemo)(() => {
      let triggerHoverStart = (event, pointerType) => {
        state3.pointerType = pointerType;
        if (isDisabled || pointerType === "touch" || state3.isHovered || !event.currentTarget.contains(event.target))
          return;
        state3.isHovered = true;
        let target6 = event.currentTarget;
        state3.target = target6;
        if (onHoverStart2)
          onHoverStart2({
            type: "hoverstart",
            target: target6,
            pointerType
          });
        if (onHoverChange)
          onHoverChange(true);
        setHovered(true);
      };
      let triggerHoverEnd = (event, pointerType) => {
        state3.pointerType = "";
        state3.target = null;
        if (pointerType === "touch" || !state3.isHovered)
          return;
        state3.isHovered = false;
        let target6 = event.currentTarget;
        if (onHoverEnd2)
          onHoverEnd2({
            type: "hoverend",
            target: target6,
            pointerType
          });
        if (onHoverChange)
          onHoverChange(false);
        setHovered(false);
      };
      let hoverProps = {};
      if (typeof PointerEvent !== "undefined") {
        hoverProps.onPointerEnter = (e) => {
          if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === "mouse")
            return;
          triggerHoverStart(e, e.pointerType);
        };
        hoverProps.onPointerLeave = (e) => {
          if (!isDisabled && e.currentTarget.contains(e.target))
            triggerHoverEnd(e, e.pointerType);
        };
      } else {
        hoverProps.onTouchStart = () => {
          state3.ignoreEmulatedMouseEvents = true;
        };
        hoverProps.onMouseEnter = (e) => {
          if (!state3.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents)
            triggerHoverStart(e, "mouse");
          state3.ignoreEmulatedMouseEvents = false;
        };
        hoverProps.onMouseLeave = (e) => {
          if (!isDisabled && e.currentTarget.contains(e.target))
            triggerHoverEnd(e, "mouse");
        };
      }
      return {
        hoverProps,
        triggerHoverEnd
      };
    }, [
      onHoverStart2,
      onHoverChange,
      onHoverEnd2,
      isDisabled,
      state3
    ]);
    (0, import_react49.useEffect)(() => {
      if (isDisabled)
        triggerHoverEnd1({
          currentTarget: state3.target
        }, state3.pointerType);
    }, [
      isDisabled
    ]);
    return {
      hoverProps: hoverProps1,
      isHovered
    };
  }
  var $e0b6e0b68ec7f50f$exports = {};
  $parcel$export6($e0b6e0b68ec7f50f$exports, "useInteractOutside", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);
  function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
    let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
    let stateRef = (0, import_react49.useRef)({
      isPointerDown: false,
      ignoreEmulatedMouseEvents: false,
      onInteractOutside,
      onInteractOutsideStart
    });
    let state3 = stateRef.current;
    state3.onInteractOutside = onInteractOutside;
    state3.onInteractOutsideStart = onInteractOutsideStart;
    (0, import_react49.useEffect)(() => {
      if (isDisabled)
        return;
      let onPointerDown = (e) => {
        if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state3.onInteractOutside) {
          if (state3.onInteractOutsideStart)
            state3.onInteractOutsideStart(e);
          state3.isPointerDown = true;
        }
      };
      if (typeof PointerEvent !== "undefined") {
        let onPointerUp = (e) => {
          if (state3.isPointerDown && state3.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
            state3.isPointerDown = false;
            state3.onInteractOutside(e);
          }
        };
        document.addEventListener("pointerdown", onPointerDown, true);
        document.addEventListener("pointerup", onPointerUp, true);
        return () => {
          document.removeEventListener("pointerdown", onPointerDown, true);
          document.removeEventListener("pointerup", onPointerUp, true);
        };
      } else {
        let onMouseUp = (e) => {
          if (state3.ignoreEmulatedMouseEvents)
            state3.ignoreEmulatedMouseEvents = false;
          else if (state3.isPointerDown && state3.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
            state3.isPointerDown = false;
            state3.onInteractOutside(e);
          }
        };
        let onTouchEnd = (e) => {
          state3.ignoreEmulatedMouseEvents = true;
          if (state3.onInteractOutside && state3.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
            state3.isPointerDown = false;
            state3.onInteractOutside(e);
          }
        };
        document.addEventListener("mousedown", onPointerDown, true);
        document.addEventListener("mouseup", onMouseUp, true);
        document.addEventListener("touchstart", onPointerDown, true);
        document.addEventListener("touchend", onTouchEnd, true);
        return () => {
          document.removeEventListener("mousedown", onPointerDown, true);
          document.removeEventListener("mouseup", onMouseUp, true);
          document.removeEventListener("touchstart", onPointerDown, true);
          document.removeEventListener("touchend", onTouchEnd, true);
        };
      }
    }, [
      ref,
      state3,
      isDisabled
    ]);
  }
  function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
    if (event.button > 0)
      return false;
    if (event.target) {
      const ownerDocument2 = event.target.ownerDocument;
      if (!ownerDocument2 || !ownerDocument2.documentElement.contains(event.target))
        return false;
    }
    return ref.current && !ref.current.contains(event.target);
  }
  var $46d819fcbaf35654$exports = {};
  $parcel$export6($46d819fcbaf35654$exports, "useKeyboard", () => $46d819fcbaf35654$export$8f71654801c2f7cd);
  function $93925083ecbb358c$export$48d1ea6320830260(handler2) {
    if (!handler2)
      return;
    let shouldStopPropagation = true;
    return (e) => {
      let event = {
        ...e,
        preventDefault() {
          e.preventDefault();
        },
        isDefaultPrevented() {
          return e.isDefaultPrevented();
        },
        stopPropagation() {
          console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
        },
        continuePropagation() {
          shouldStopPropagation = false;
        }
      };
      handler2(event);
      if (shouldStopPropagation)
        e.stopPropagation();
    };
  }
  function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
    return {
      keyboardProps: props.isDisabled ? {} : {
        onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
        onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
      }
    };
  }
  var $e8a7022cf87cba2a$exports = {};
  $parcel$export6($e8a7022cf87cba2a$exports, "useMove", () => $e8a7022cf87cba2a$export$36da96379f79f245);
  function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
    let { onMoveStart, onMove, onMoveEnd } = props;
    let state3 = (0, import_react49.useRef)({
      didMove: false,
      lastPosition: null,
      id: null
    });
    let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let moveProps1 = (0, import_react49.useMemo)(() => {
      let moveProps = {};
      let start2 = () => {
        $14c0b72509d70225$export$16a4697467175487();
        state3.current.didMove = false;
      };
      let move = (originalEvent, pointerType, deltaX, deltaY) => {
        if (deltaX === 0 && deltaY === 0)
          return;
        if (!state3.current.didMove) {
          state3.current.didMove = true;
          onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
            type: "movestart",
            pointerType,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
        }
        onMove({
          type: "move",
          pointerType,
          deltaX,
          deltaY,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      };
      let end3 = (originalEvent, pointerType) => {
        $14c0b72509d70225$export$b0d6fa1ab32e3295();
        if (state3.current.didMove)
          onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
            type: "moveend",
            pointerType,
            shiftKey: originalEvent.shiftKey,
            metaKey: originalEvent.metaKey,
            ctrlKey: originalEvent.ctrlKey,
            altKey: originalEvent.altKey
          });
      };
      if (typeof PointerEvent === "undefined") {
        let onMouseMove = (e) => {
          if (e.button === 0) {
            move(e, "mouse", e.pageX - state3.current.lastPosition.pageX, e.pageY - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
          }
        };
        let onMouseUp = (e) => {
          if (e.button === 0) {
            end3(e, "mouse");
            removeGlobalListener(window, "mousemove", onMouseMove, false);
            removeGlobalListener(window, "mouseup", onMouseUp, false);
          }
        };
        moveProps.onMouseDown = (e) => {
          if (e.button === 0) {
            start2();
            e.stopPropagation();
            e.preventDefault();
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
            addGlobalListener(window, "mousemove", onMouseMove, false);
            addGlobalListener(window, "mouseup", onMouseUp, false);
          }
        };
        let onTouchMove = (e) => {
          let touch = [
            ...e.changedTouches
          ].findIndex(({ identifier: identifier2 }) => identifier2 === state3.current.id);
          if (touch >= 0) {
            let { pageX: pageX2, pageY: pageY2 } = e.changedTouches[touch];
            move(e, "touch", pageX2 - state3.current.lastPosition.pageX, pageY2 - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX: pageX2,
              pageY: pageY2
            };
          }
        };
        let onTouchEnd = (e) => {
          let touch = [
            ...e.changedTouches
          ].findIndex(({ identifier: identifier2 }) => identifier2 === state3.current.id);
          if (touch >= 0) {
            end3(e, "touch");
            state3.current.id = null;
            removeGlobalListener(window, "touchmove", onTouchMove);
            removeGlobalListener(window, "touchend", onTouchEnd);
            removeGlobalListener(window, "touchcancel", onTouchEnd);
          }
        };
        moveProps.onTouchStart = (e) => {
          if (e.changedTouches.length === 0 || state3.current.id != null)
            return;
          let { pageX: pageX2, pageY: pageY2, identifier: identifier2 } = e.changedTouches[0];
          start2();
          e.stopPropagation();
          e.preventDefault();
          state3.current.lastPosition = {
            pageX: pageX2,
            pageY: pageY2
          };
          state3.current.id = identifier2;
          addGlobalListener(window, "touchmove", onTouchMove, false);
          addGlobalListener(window, "touchend", onTouchEnd, false);
          addGlobalListener(window, "touchcancel", onTouchEnd, false);
        };
      } else {
        let onPointerMove = (e) => {
          if (e.pointerId === state3.current.id) {
            let pointerType = e.pointerType || "mouse";
            move(e, pointerType, e.pageX - state3.current.lastPosition.pageX, e.pageY - state3.current.lastPosition.pageY);
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
          }
        };
        let onPointerUp = (e) => {
          if (e.pointerId === state3.current.id) {
            let pointerType = e.pointerType || "mouse";
            end3(e, pointerType);
            state3.current.id = null;
            removeGlobalListener(window, "pointermove", onPointerMove, false);
            removeGlobalListener(window, "pointerup", onPointerUp, false);
            removeGlobalListener(window, "pointercancel", onPointerUp, false);
          }
        };
        moveProps.onPointerDown = (e) => {
          if (e.button === 0 && state3.current.id == null) {
            start2();
            e.stopPropagation();
            e.preventDefault();
            state3.current.lastPosition = {
              pageX: e.pageX,
              pageY: e.pageY
            };
            state3.current.id = e.pointerId;
            addGlobalListener(window, "pointermove", onPointerMove, false);
            addGlobalListener(window, "pointerup", onPointerUp, false);
            addGlobalListener(window, "pointercancel", onPointerUp, false);
          }
        };
      }
      let triggerKeyboardMove = (e, deltaX, deltaY) => {
        start2();
        move(e, "keyboard", deltaX, deltaY);
        end3(e, "keyboard");
      };
      moveProps.onKeyDown = (e) => {
        switch (e.key) {
          case "Left":
          case "ArrowLeft":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, -1, 0);
            break;
          case "Right":
          case "ArrowRight":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 1, 0);
            break;
          case "Up":
          case "ArrowUp":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 0, -1);
            break;
          case "Down":
          case "ArrowDown":
            e.preventDefault();
            e.stopPropagation();
            triggerKeyboardMove(e, 0, 1);
            break;
        }
      };
      return moveProps;
    }, [
      state3,
      onMoveStart,
      onMove,
      onMoveEnd,
      addGlobalListener,
      removeGlobalListener
    ]);
    return {
      moveProps: moveProps1
    };
  }
  var $7d0a636d7a4dcefd$exports = {};
  $parcel$export6($7d0a636d7a4dcefd$exports, "useScrollWheel", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);
  function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
    let { onScroll, isDisabled } = props;
    let onScrollHandler = (0, import_react49.useCallback)((e) => {
      if (e.ctrlKey)
        return;
      e.preventDefault();
      e.stopPropagation();
      if (onScroll)
        onScroll({
          deltaX: e.deltaX,
          deltaY: e.deltaY
        });
    }, [
      onScroll
    ]);
    $e9faafb641e167db$export$90fc3a17d93f704c(ref, "wheel", isDisabled ? null : onScrollHandler);
  }
  var $8a26561d2877236e$exports = {};
  $parcel$export6($8a26561d2877236e$exports, "useLongPress", () => $8a26561d2877236e$export$c24ed0104d07eab9);
  var $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
  function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
    let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
    const timeRef = (0, import_react49.useRef)(null);
    let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
    let { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
      isDisabled,
      onPressStart(e1) {
        if (e1.pointerType === "mouse" || e1.pointerType === "touch") {
          if (onLongPressStart)
            onLongPressStart({
              ...e1,
              type: "longpressstart"
            });
          timeRef.current = setTimeout(() => {
            e1.target.dispatchEvent(new PointerEvent("pointercancel", {
              bubbles: true
            }));
            if (onLongPress)
              onLongPress({
                ...e1,
                type: "longpress"
              });
            timeRef.current = null;
          }, threshold);
          if (e1.pointerType === "touch") {
            let onContextMenu = (e) => {
              e.preventDefault();
            };
            addGlobalListener(e1.target, "contextmenu", onContextMenu, {
              once: true
            });
            addGlobalListener(window, "pointerup", () => {
              setTimeout(() => {
                removeGlobalListener(e1.target, "contextmenu", onContextMenu);
              }, 30);
            }, {
              once: true
            });
          }
        }
      },
      onPressEnd(e) {
        if (timeRef.current)
          clearTimeout(timeRef.current);
        if (onLongPressEnd && (e.pointerType === "mouse" || e.pointerType === "touch"))
          onLongPressEnd({
            ...e,
            type: "longpressend"
          });
      }
    });
    let descriptionProps = $ef06256079686ba0$export$f8aeda7b10753fa1(onLongPress && !isDisabled ? accessibilityDescription : null);
    return {
      longPressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, descriptionProps)
    };
  }

  // node_modules/@react-aria/overlays/dist/module.js
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/@react-aria/visually-hidden/dist/module.js
  var import_react50 = __toESM(require_react());
  function $parcel$export7(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  var $5c3e21d68f1c4674$exports = {};
  $parcel$export7($5c3e21d68f1c4674$exports, "useVisuallyHidden", () => $5c3e21d68f1c4674$export$a966af930f325cab);
  $parcel$export7($5c3e21d68f1c4674$exports, "VisuallyHidden", () => $5c3e21d68f1c4674$export$439d29a4e110a164);
  var $5c3e21d68f1c4674$var$styles = {
    border: 0,
    clip: "rect(0 0 0 0)",
    clipPath: "inset(50%)",
    height: 1,
    margin: "0 -1px -1px 0",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    width: 1,
    whiteSpace: "nowrap"
  };
  function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
    let { style: style3, isFocusable } = props;
    let [isFocused, setFocused] = (0, import_react50.useState)(false);
    let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
      isDisabled: !isFocusable,
      onFocusChange: setFocused
    });
    let combinedStyles = (0, import_react50.useMemo)(() => {
      if (isFocused)
        return style3;
      else if (style3)
        return {
          ...$5c3e21d68f1c4674$var$styles,
          ...style3
        };
      else
        return $5c3e21d68f1c4674$var$styles;
    }, [
      isFocused
    ]);
    return {
      visuallyHiddenProps: {
        ...focusProps,
        style: combinedStyles
      }
    };
  }
  function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
    let { children: children2, elementType: Element2 = "div", isFocusable, style: style3, ...otherProps } = props;
    let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
    return /* @__PURE__ */ import_react50.default.createElement(Element2, $3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children2);
  }

  // node_modules/@react-aria/overlays/dist/module.js
  function $parcel$export8(e, n2, v2, s3) {
    Object.defineProperty(e, n2, { get: v2, set: s3, enumerable: true, configurable: true });
  }
  function $parcel$interopDefault(a4) {
    return a4 && a4.__esModule ? a4.default : a4;
  }
  var $2a41e45df1593e64$exports = {};
  $parcel$export8($2a41e45df1593e64$exports, "useOverlayPosition", () => $2a41e45df1593e64$export$d39e1813b3bdd0e1);
  var $edcf132a9284368a$var$AXIS = {
    top: "top",
    bottom: "top",
    left: "left",
    right: "left"
  };
  var $edcf132a9284368a$var$FLIPPED_DIRECTION = {
    top: "bottom",
    bottom: "top",
    left: "right",
    right: "left"
  };
  var $edcf132a9284368a$var$CROSS_AXIS = {
    top: "left",
    left: "top"
  };
  var $edcf132a9284368a$var$AXIS_SIZE = {
    top: "height",
    left: "width"
  };
  var $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE = {};
  var $edcf132a9284368a$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
  function $edcf132a9284368a$var$getContainerDimensions(containerNode) {
    let width9 = 0, height9 = 0, top6 = 0, left4 = 0;
    let scroll3 = {};
    if (containerNode.tagName === "BODY") {
      var ref;
      width9 = (ref = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.width) !== null && ref !== void 0 ? ref : document.documentElement.clientWidth;
      var ref1;
      height9 = (ref1 = $edcf132a9284368a$var$visualViewport === null || $edcf132a9284368a$var$visualViewport === void 0 ? void 0 : $edcf132a9284368a$var$visualViewport.height) !== null && ref1 !== void 0 ? ref1 : document.documentElement.clientHeight;
      scroll3.top = scrollTop_default(ownerDocument(containerNode).documentElement) || scrollTop_default(containerNode);
      scroll3.left = scrollLeft_default(ownerDocument(containerNode).documentElement) || scrollLeft_default(containerNode);
    } else {
      ({ width: width9, height: height9, top: top6, left: left4 } = offset(containerNode));
      scroll3.top = scrollTop_default(containerNode);
      scroll3.left = scrollLeft_default(containerNode);
    }
    return {
      width: width9,
      height: height9,
      scroll: scroll3,
      top: top6,
      left: left4
    };
  }
  function $edcf132a9284368a$var$getScroll(node2) {
    return {
      top: node2.scrollTop,
      left: node2.scrollLeft,
      width: node2.scrollWidth,
      height: node2.scrollHeight
    };
  }
  function $edcf132a9284368a$var$getDelta(axis, offset2, size5, containerDimensions, padding) {
    let containerScroll = containerDimensions.scroll[axis];
    let containerHeight = containerDimensions[$edcf132a9284368a$var$AXIS_SIZE[axis]];
    let startEdgeOffset = offset2 - padding - containerScroll;
    let endEdgeOffset = offset2 + padding - containerScroll + size5;
    if (startEdgeOffset < 0)
      return -startEdgeOffset;
    else if (endEdgeOffset > containerHeight)
      return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);
    else
      return 0;
  }
  function $edcf132a9284368a$var$getMargins(node2) {
    let style3 = window.getComputedStyle(node2);
    return {
      top: parseInt(style3.marginTop, 10) || 0,
      bottom: parseInt(style3.marginBottom, 10) || 0,
      left: parseInt(style3.marginLeft, 10) || 0,
      right: parseInt(style3.marginRight, 10) || 0
    };
  }
  function $edcf132a9284368a$var$parsePlacement(input6) {
    if ($edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input6])
      return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input6];
    let [placement, crossPlacement] = input6.split(" ");
    let axis = $edcf132a9284368a$var$AXIS[placement] || "right";
    let crossAxis = $edcf132a9284368a$var$CROSS_AXIS[axis];
    if (!$edcf132a9284368a$var$AXIS[crossPlacement])
      crossPlacement = "center";
    let size5 = $edcf132a9284368a$var$AXIS_SIZE[axis];
    let crossSize = $edcf132a9284368a$var$AXIS_SIZE[crossAxis];
    $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input6] = {
      placement,
      crossPlacement,
      axis,
      crossAxis,
      size: size5,
      crossSize
    };
    return $edcf132a9284368a$var$PARSED_PLACEMENT_CACHE[input6];
  }
  function $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset2, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {
    let { placement, crossPlacement, axis, crossAxis, size: size5, crossSize } = placementInfo;
    let position4 = {};
    position4[crossAxis] = childOffset[crossAxis];
    if (crossPlacement === "center")
      position4[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
    else if (crossPlacement !== crossAxis)
      position4[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
    position4[crossAxis] += crossOffset;
    let minViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2 - overlaySize[crossSize];
    let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;
    position4[crossAxis] = Math.min(Math.max(minViablePosition, position4[crossAxis]), maxViablePosition);
    if (placement === axis) {
      const containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size5] : boundaryDimensions[size5];
      position4[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset2);
    } else
      position4[axis] = Math.floor(childOffset[axis] + childOffset[size5] + offset2);
    return position4;
  }
  function $edcf132a9284368a$var$getMaxHeight(position4, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {
    return position4.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position4.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));
  }
  function $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {
    let { placement, axis, size: size5 } = placementInfo;
    if (placement === axis)
      return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
    return Math.max(0, boundaryDimensions[size5] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size5] - margins[axis] - margins[$edcf132a9284368a$var$FLIPPED_DIRECTION[axis]] - padding);
  }
  function $edcf132a9284368a$export$6839422d1f33cee9(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip2, boundaryDimensions, containerOffsetWithBoundary, offset2, crossOffset, isContainerPositioned, userSetMaxHeight) {
    let placementInfo = $edcf132a9284368a$var$parsePlacement(placementInput);
    let { size: size5, crossAxis, crossSize, placement, crossPlacement } = placementInfo;
    let position4 = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset2, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    let normalizedOffset = offset2;
    let space = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset2, placementInfo);
    if (flip2 && scrollSize[size5] > space) {
      let flippedPlacementInfo = $edcf132a9284368a$var$parsePlacement(`${$edcf132a9284368a$var$FLIPPED_DIRECTION[placement]} ${crossPlacement}`);
      let flippedPosition = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset2, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
      let flippedSpace = $edcf132a9284368a$var$getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset2, flippedPlacementInfo);
      if (flippedSpace > space) {
        placementInfo = flippedPlacementInfo;
        position4 = flippedPosition;
        normalizedOffset = offset2;
      }
    }
    let delta = $edcf132a9284368a$var$getDelta(crossAxis, position4[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
    position4[crossAxis] += delta;
    let maxHeight = $edcf132a9284368a$var$getMaxHeight(position4, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);
    if (userSetMaxHeight && userSetMaxHeight < maxHeight)
      maxHeight = userSetMaxHeight;
    overlaySize.height = Math.min(overlaySize.height, maxHeight);
    position4 = $edcf132a9284368a$var$computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);
    delta = $edcf132a9284368a$var$getDelta(crossAxis, position4[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
    position4[crossAxis] += delta;
    let arrowPosition = {};
    arrowPosition[crossAxis] = childOffset[crossAxis] - position4[crossAxis] + childOffset[crossSize] / 2;
    return {
      position: position4,
      maxHeight,
      arrowOffsetLeft: arrowPosition.left,
      arrowOffsetTop: arrowPosition.top,
      placement: placementInfo.placement
    };
  }
  function $edcf132a9284368a$export$b3ceb0cbf1056d98(opts) {
    let { placement, targetNode, overlayNode, scrollNode, padding, shouldFlip, boundaryElement, offset: offset2, crossOffset, maxHeight } = opts;
    let container5 = overlayNode.offsetParent || document.body;
    let isBodyContainer = container5.tagName === "BODY";
    const containerPositionStyle = window.getComputedStyle(container5).position;
    let isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== "static";
    let childOffset = isBodyContainer ? offset(targetNode) : position3(targetNode, container5);
    if (!isBodyContainer) {
      let marginTop = String(css_default(targetNode, "marginTop"));
      let marginLeft = String(css_default(targetNode, "marginLeft"));
      childOffset.top += parseInt(marginTop, 10) || 0;
      childOffset.left += parseInt(marginLeft, 10) || 0;
    }
    let overlaySize = offset(overlayNode);
    let margins = $edcf132a9284368a$var$getMargins(overlayNode);
    overlaySize.width += margins.left + margins.right;
    overlaySize.height += margins.top + margins.bottom;
    let scrollSize = $edcf132a9284368a$var$getScroll(scrollNode);
    let boundaryDimensions = $edcf132a9284368a$var$getContainerDimensions(boundaryElement);
    let containerOffsetWithBoundary = boundaryElement.tagName === "BODY" ? offset(container5) : position3(container5, boundaryElement);
    return $edcf132a9284368a$export$6839422d1f33cee9(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset2, crossOffset, isContainerPositioned, maxHeight);
  }
  var $dd149f63282afbbf$export$f6211563215e3b37 = /* @__PURE__ */ new WeakMap();
  function $dd149f63282afbbf$export$18fc8428861184da(opts) {
    let { triggerRef, isOpen, onClose } = opts;
    (0, import_react51.useEffect)(() => {
      if (!isOpen)
        return;
      let onScroll = (e) => {
        let target6 = e.target;
        if (!triggerRef.current || target6 instanceof Node && !target6.contains(triggerRef.current))
          return;
        let onCloseHandler = onClose || $dd149f63282afbbf$export$f6211563215e3b37.get(triggerRef.current);
        if (onCloseHandler)
          onCloseHandler();
      };
      window.addEventListener("scroll", onScroll, true);
      return () => {
        window.removeEventListener("scroll", onScroll, true);
      };
    }, [
      isOpen,
      onClose,
      triggerRef
    ]);
  }
  var $2a41e45df1593e64$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
  function $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {
    let { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    let { targetRef, overlayRef, scrollRef = overlayRef, placement = "bottom", containerPadding = 12, shouldFlip = true, boundaryElement = typeof document !== "undefined" ? document.body : null, offset: offset2 = 0, crossOffset = 0, shouldUpdatePosition = true, isOpen = true, onClose, maxHeight } = props;
    let [position4, setPosition] = (0, import_react51.useState)({
      position: {},
      arrowOffsetLeft: void 0,
      arrowOffsetTop: void 0,
      maxHeight: void 0,
      placement: void 0
    });
    let deps = [
      shouldUpdatePosition,
      placement,
      overlayRef.current,
      targetRef.current,
      scrollRef.current,
      containerPadding,
      shouldFlip,
      boundaryElement,
      offset2,
      crossOffset,
      isOpen,
      direction,
      maxHeight
    ];
    let updatePosition = (0, import_react51.useCallback)(() => {
      if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement)
        return;
      setPosition($edcf132a9284368a$export$b3ceb0cbf1056d98({
        placement: $2a41e45df1593e64$var$translateRTL(placement, direction),
        overlayNode: overlayRef.current,
        targetNode: targetRef.current,
        scrollNode: scrollRef.current,
        padding: containerPadding,
        shouldFlip,
        boundaryElement,
        offset: offset2,
        crossOffset,
        maxHeight
      }));
    }, deps);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updatePosition, deps);
    $2a41e45df1593e64$var$useResize(updatePosition);
    let isResizing = (0, import_react51.useRef)(false);
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      let timeout;
      let onResize = () => {
        isResizing.current = true;
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          isResizing.current = false;
        }, 500);
        updatePosition();
      };
      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener("resize", onResize);
      return () => {
        $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener("resize", onResize);
      };
    }, [
      updatePosition
    ]);
    let close = (0, import_react51.useCallback)(() => {
      if (!isResizing.current)
        onClose();
    }, [
      onClose,
      isResizing
    ]);
    $dd149f63282afbbf$export$18fc8428861184da({
      triggerRef: targetRef,
      isOpen,
      onClose: onClose ? close : void 0
    });
    return {
      overlayProps: {
        style: {
          position: "absolute",
          zIndex: 1e5,
          ...position4.position,
          maxHeight: position4.maxHeight
        }
      },
      placement: position4.placement,
      arrowProps: {
        style: {
          left: position4.arrowOffsetLeft,
          top: position4.arrowOffsetTop
        }
      },
      updatePosition
    };
  }
  function $2a41e45df1593e64$var$useResize(onResize) {
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    }, [
      onResize
    ]);
  }
  function $2a41e45df1593e64$var$translateRTL(position4, direction) {
    if (direction === "rtl")
      return position4.replace("start", "right").replace("end", "left");
    return position4.replace("start", "left").replace("end", "right");
  }
  var $a11501f3d1d39e6c$exports = {};
  $parcel$export8($a11501f3d1d39e6c$exports, "useOverlay", () => $a11501f3d1d39e6c$export$ea8f71083e90600f);
  var $a11501f3d1d39e6c$var$visibleOverlays = [];
  function $a11501f3d1d39e6c$export$ea8f71083e90600f(props, ref) {
    let { onClose, shouldCloseOnBlur, isOpen, isDismissable = false, isKeyboardDismissDisabled = false, shouldCloseOnInteractOutside } = props;
    (0, import_react51.useEffect)(() => {
      if (isOpen)
        $a11501f3d1d39e6c$var$visibleOverlays.push(ref);
      return () => {
        let index6 = $a11501f3d1d39e6c$var$visibleOverlays.indexOf(ref);
        if (index6 >= 0)
          $a11501f3d1d39e6c$var$visibleOverlays.splice(index6, 1);
      };
    }, [
      isOpen,
      ref
    ]);
    let onHide = () => {
      if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref && onClose)
        onClose();
    };
    let onInteractOutsideStart = (e) => {
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
        if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
          e.stopPropagation();
          e.preventDefault();
        }
      }
    };
    let onInteractOutside = (e) => {
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
        if ($a11501f3d1d39e6c$var$visibleOverlays[$a11501f3d1d39e6c$var$visibleOverlays.length - 1] === ref) {
          e.stopPropagation();
          e.preventDefault();
        }
        onHide();
      }
    };
    let onKeyDown = (e) => {
      if (e.key === "Escape" && !isKeyboardDismissDisabled) {
        e.stopPropagation();
        e.preventDefault();
        onHide();
      }
    };
    $e0b6e0b68ec7f50f$export$872b660ac5a1ff98({
      ref,
      onInteractOutside: isDismissable ? onInteractOutside : null,
      onInteractOutsideStart
    });
    let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
      isDisabled: !shouldCloseOnBlur,
      onBlurWithin: (e) => {
        if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget))
          onClose();
      }
    });
    let onPointerDownUnderlay = (e) => {
      if (e.target === e.currentTarget)
        e.preventDefault();
    };
    return {
      overlayProps: {
        onKeyDown,
        ...focusWithinProps
      },
      underlayProps: {
        onPointerDown: onPointerDownUnderlay
      }
    };
  }
  var $628037886ba31236$exports = {};
  $parcel$export8($628037886ba31236$exports, "useOverlayTrigger", () => $628037886ba31236$export$f9d5c8beee7d008d);
  function $628037886ba31236$export$f9d5c8beee7d008d(props, state3, ref) {
    let { type } = props;
    let { isOpen } = state3;
    (0, import_react51.useEffect)(() => {
      if (ref && ref.current)
        $dd149f63282afbbf$export$f6211563215e3b37.set(ref.current, state3.close);
    });
    let ariaHasPopup = void 0;
    if (type === "menu")
      ariaHasPopup = true;
    else if (type === "listbox")
      ariaHasPopup = "listbox";
    let overlayId = $bdb11010cef70236$export$f680877a34711e37();
    return {
      triggerProps: {
        "aria-haspopup": ariaHasPopup,
        "aria-expanded": isOpen,
        "aria-controls": isOpen ? overlayId : null
      },
      overlayProps: {
        id: overlayId
      }
    };
  }
  var $49c51c25361d4cd2$exports = {};
  $parcel$export8($49c51c25361d4cd2$exports, "usePreventScroll", () => $49c51c25361d4cd2$export$ee0f7cc6afcd1c18);
  var $49c51c25361d4cd2$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
  var $49c51c25361d4cd2$var$nonTextInputTypes = /* @__PURE__ */ new Set([
    "checkbox",
    "radio",
    "range",
    "color",
    "file",
    "image",
    "button",
    "submit",
    "reset"
  ]);
  function $49c51c25361d4cd2$export$ee0f7cc6afcd1c18(options3 = {}) {
    let { isDisabled } = options3;
    $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
      if (isDisabled)
        return;
      if ($c87311424ea30a05$export$fedb369cb70207f1())
        return $49c51c25361d4cd2$var$preventScrollMobileSafari();
      else
        return $49c51c25361d4cd2$var$preventScrollStandard();
    }, [
      isDisabled
    ]);
  }
  function $49c51c25361d4cd2$var$preventScrollStandard() {
    return $ff5963eb1fccf552$export$e08e3b67e392101e($49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"));
  }
  function $49c51c25361d4cd2$var$preventScrollMobileSafari() {
    let scrollable;
    let lastY = 0;
    let onTouchStart = (e) => {
      scrollable = $62d8ded9296f3872$export$cfa2225e87938781(e.target);
      if (scrollable === document.documentElement && scrollable === document.body)
        return;
      lastY = e.changedTouches[0].pageY;
    };
    let onTouchMove = (e) => {
      if (scrollable === document.documentElement || scrollable === document.body) {
        e.preventDefault();
        return;
      }
      let y2 = e.changedTouches[0].pageY;
      let scrollTop2 = scrollable.scrollTop;
      let bottom6 = scrollable.scrollHeight - scrollable.clientHeight;
      if (scrollTop2 <= 0 && y2 > lastY || scrollTop2 >= bottom6 && y2 < lastY)
        e.preventDefault();
      lastY = y2;
    };
    let onTouchEnd = (e) => {
      let target6 = e.target;
      if ($49c51c25361d4cd2$var$willOpenKeyboard(target6) && target6 !== document.activeElement) {
        e.preventDefault();
        target6.style.transform = "translateY(-2000px)";
        target6.focus();
        requestAnimationFrame(() => {
          target6.style.transform = "";
        });
      }
    };
    let onFocus = (e) => {
      let target6 = e.target;
      if ($49c51c25361d4cd2$var$willOpenKeyboard(target6)) {
        target6.style.transform = "translateY(-2000px)";
        requestAnimationFrame(() => {
          target6.style.transform = "";
          if ($49c51c25361d4cd2$var$visualViewport) {
            if ($49c51c25361d4cd2$var$visualViewport.height < window.innerHeight)
              requestAnimationFrame(() => {
                $49c51c25361d4cd2$var$scrollIntoView(target6);
              });
            else
              $49c51c25361d4cd2$var$visualViewport.addEventListener("resize", () => $49c51c25361d4cd2$var$scrollIntoView(target6), {
                once: true
              });
          }
        });
      }
    };
    let onWindowScroll = () => {
      window.scrollTo(0, 0);
    };
    let scrollX2 = window.pageXOffset;
    let scrollY2 = window.pageYOffset;
    let restoreStyles = $ff5963eb1fccf552$export$e08e3b67e392101e($49c51c25361d4cd2$var$setStyle(document.documentElement, "paddingRight", `${window.innerWidth - document.documentElement.clientWidth}px`), $49c51c25361d4cd2$var$setStyle(document.documentElement, "overflow", "hidden"), $49c51c25361d4cd2$var$setStyle(document.body, "marginTop", `-${scrollY2}px`));
    window.scrollTo(0, 0);
    let removeEvents = $ff5963eb1fccf552$export$e08e3b67e392101e($49c51c25361d4cd2$var$addEvent(document, "touchstart", onTouchStart, {
      passive: false,
      capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, "touchmove", onTouchMove, {
      passive: false,
      capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, "touchend", onTouchEnd, {
      passive: false,
      capture: true
    }), $49c51c25361d4cd2$var$addEvent(document, "focus", onFocus, true), $49c51c25361d4cd2$var$addEvent(window, "scroll", onWindowScroll));
    return () => {
      restoreStyles();
      removeEvents();
      window.scrollTo(scrollX2, scrollY2);
    };
  }
  function $49c51c25361d4cd2$var$setStyle(element3, style3, value12) {
    let cur = element3.style[style3];
    element3.style[style3] = value12;
    return () => {
      element3.style[style3] = cur;
    };
  }
  function $49c51c25361d4cd2$var$addEvent(target6, event, handler2, options3) {
    target6.addEventListener(event, handler2, options3);
    return () => {
      target6.removeEventListener(event, handler2, options3);
    };
  }
  function $49c51c25361d4cd2$var$scrollIntoView(target6) {
    let root2 = document.scrollingElement || document.documentElement;
    while (target6 && target6 !== root2) {
      let scrollable = $62d8ded9296f3872$export$cfa2225e87938781(target6);
      if (scrollable !== document.documentElement && scrollable !== document.body && scrollable !== target6) {
        let scrollableTop = scrollable.getBoundingClientRect().top;
        let targetTop = target6.getBoundingClientRect().top;
        if (targetTop > scrollableTop + target6.clientHeight)
          scrollable.scrollTop += targetTop - scrollableTop;
      }
      target6 = scrollable.parentElement;
    }
  }
  function $49c51c25361d4cd2$var$willOpenKeyboard(target6) {
    return target6 instanceof HTMLInputElement && !$49c51c25361d4cd2$var$nonTextInputTypes.has(target6.type) || target6 instanceof HTMLTextAreaElement || target6 instanceof HTMLElement && target6.isContentEditable;
  }
  var $f57aed4a881a3485$exports = {};
  $parcel$export8($f57aed4a881a3485$exports, "ModalProvider", () => $f57aed4a881a3485$export$178405afcd8c5eb);
  $parcel$export8($f57aed4a881a3485$exports, "useModalProvider", () => $f57aed4a881a3485$export$d9aaed4c3ece1bc0);
  $parcel$export8($f57aed4a881a3485$exports, "OverlayProvider", () => $f57aed4a881a3485$export$bf688221f59024e5);
  $parcel$export8($f57aed4a881a3485$exports, "OverlayContainer", () => $f57aed4a881a3485$export$b47c3594eab58386);
  $parcel$export8($f57aed4a881a3485$exports, "useModal", () => $f57aed4a881a3485$export$33ffd74ebf07f060);
  var $f57aed4a881a3485$var$Context = /* @__PURE__ */ import_react51.default.createContext(null);
  function $f57aed4a881a3485$export$178405afcd8c5eb(props) {
    let { children: children2 } = props;
    let parent2 = (0, import_react51.useContext)($f57aed4a881a3485$var$Context);
    let [modalCount, setModalCount] = (0, import_react51.useState)(0);
    let context = (0, import_react51.useMemo)(() => ({
      parent: parent2,
      modalCount,
      addModal() {
        setModalCount((count) => count + 1);
        if (parent2)
          parent2.addModal();
      },
      removeModal() {
        setModalCount((count) => count - 1);
        if (parent2)
          parent2.removeModal();
      }
    }), [
      parent2,
      modalCount
    ]);
    return /* @__PURE__ */ import_react51.default.createElement($f57aed4a881a3485$var$Context.Provider, {
      value: context
    }, children2);
  }
  function $f57aed4a881a3485$export$d9aaed4c3ece1bc0() {
    let context = (0, import_react51.useContext)($f57aed4a881a3485$var$Context);
    return {
      modalProviderProps: {
        "aria-hidden": context && context.modalCount > 0 ? true : null
      }
    };
  }
  function $f57aed4a881a3485$var$OverlayContainerDOM(props) {
    let { modalProviderProps } = $f57aed4a881a3485$export$d9aaed4c3ece1bc0();
    return /* @__PURE__ */ import_react51.default.createElement("div", {
      "data-overlay-container": true,
      ...props,
      ...modalProviderProps
    });
  }
  function $f57aed4a881a3485$export$bf688221f59024e5(props) {
    return /* @__PURE__ */ import_react51.default.createElement($f57aed4a881a3485$export$178405afcd8c5eb, null, /* @__PURE__ */ import_react51.default.createElement($f57aed4a881a3485$var$OverlayContainerDOM, props));
  }
  function $f57aed4a881a3485$export$b47c3594eab58386(props) {
    let { portalContainer = document.body, ...rest2 } = props;
    import_react51.default.useEffect(() => {
      if (portalContainer.closest("[data-overlay-container]"))
        throw new Error("An OverlayContainer must not be inside another container. Please change the portalContainer prop.");
    }, [
      portalContainer
    ]);
    let contents = /* @__PURE__ */ import_react51.default.createElement($f57aed4a881a3485$export$bf688221f59024e5, rest2);
    return /* @__PURE__ */ import_react_dom3.default.createPortal(contents, portalContainer);
  }
  function $f57aed4a881a3485$export$33ffd74ebf07f060(options3) {
    let context = (0, import_react51.useContext)($f57aed4a881a3485$var$Context);
    if (!context)
      throw new Error("Modal is not contained within a provider");
    (0, import_react51.useEffect)(() => {
      if ((options3 === null || options3 === void 0 ? void 0 : options3.isDisabled) || !context || !context.parent)
        return;
      context.parent.addModal();
      return () => {
        if (context && context.parent)
          context.parent.removeModal();
      };
    }, [
      context,
      context.parent,
      options3 === null || options3 === void 0 ? void 0 : options3.isDisabled
    ]);
    return {
      modalProps: {
        "data-ismodal": !(options3 === null || options3 === void 0 ? void 0 : options3.isDisabled)
      }
    };
  }
  var $86ea4cb521eb2e37$exports = {};
  $parcel$export8($86ea4cb521eb2e37$exports, "DismissButton", () => $86ea4cb521eb2e37$export$2317d149ed6f78c4);
  var $61fe14465afefc5e$exports = {};
  var $773d5888b972f1cf$exports = {};
  $773d5888b972f1cf$exports = JSON.parse('{"dismiss":"\u062A\u062C\u0627\u0647\u0644"}');
  var $d11f19852b941573$exports = {};
  $d11f19852b941573$exports = JSON.parse('{"dismiss":"\u041E\u0442\u0445\u0432\u044A\u0440\u043B\u044F\u043D\u0435"}');
  var $b983974c2ee1efb3$exports = {};
  $b983974c2ee1efb3$exports = JSON.parse('{"dismiss":"Odstranit"}');
  var $5809cc9d4e92de73$exports = {};
  $5809cc9d4e92de73$exports = JSON.parse('{"dismiss":"Luk"}');
  var $c68c2e4fc74398d1$exports = {};
  $c68c2e4fc74398d1$exports = JSON.parse('{"dismiss":"Schlie\xDFen"}');
  var $0898b4c153db2b77$exports = {};
  $0898b4c153db2b77$exports = JSON.parse('{"dismiss":"\u0391\u03C0\u03CC\u03C1\u03C1\u03B9\u03C8\u03B7"}');
  var $6d74810286a15183$exports = {};
  $6d74810286a15183$exports = JSON.parse('{"dismiss":"Dismiss"}');
  var $309d73dc65f78055$exports = {};
  $309d73dc65f78055$exports = JSON.parse('{"dismiss":"Descartar"}');
  var $44ad94f7205cf593$exports = {};
  $44ad94f7205cf593$exports = JSON.parse('{"dismiss":"L\xF5peta"}');
  var $7c28f5687f0779a9$exports = {};
  $7c28f5687f0779a9$exports = JSON.parse('{"dismiss":"Hylk\xE4\xE4"}');
  var $e6d75df4b68bd73a$exports = {};
  $e6d75df4b68bd73a$exports = JSON.parse('{"dismiss":"Rejeter"}');
  var $87505c9dab186d0f$exports = {};
  $87505c9dab186d0f$exports = JSON.parse('{"dismiss":"\u05D4\u05EA\u05E2\u05DC\u05DD"}');
  var $553439c3ffb3e492$exports = {};
  $553439c3ffb3e492$exports = JSON.parse('{"dismiss":"Odbaci"}');
  var $74cf411061b983a2$exports = {};
  $74cf411061b983a2$exports = JSON.parse('{"dismiss":"Elutas\xEDt\xE1s"}');
  var $e933f298574dc435$exports = {};
  $e933f298574dc435$exports = JSON.parse('{"dismiss":"Ignora"}');
  var $ac91fc9fe02f71f6$exports = {};
  $ac91fc9fe02f71f6$exports = JSON.parse('{"dismiss":"\u9589\u3058\u308B"}');
  var $52b96f86422025af$exports = {};
  $52b96f86422025af$exports = JSON.parse('{"dismiss":"\uBB34\uC2DC"}');
  var $c0d724c3e51dafa6$exports = {};
  $c0d724c3e51dafa6$exports = JSON.parse('{"dismiss":"Atmesti"}');
  var $c92899672a3fe72e$exports = {};
  $c92899672a3fe72e$exports = JSON.parse('{"dismiss":"Ner\u0101d\u012Bt"}');
  var $9f576b39d8e7a9d6$exports = {};
  $9f576b39d8e7a9d6$exports = JSON.parse('{"dismiss":"Lukk"}');
  var $9d025808aeec81a7$exports = {};
  $9d025808aeec81a7$exports = JSON.parse('{"dismiss":"Negeren"}');
  var $fce709921e2c0fa6$exports = {};
  $fce709921e2c0fa6$exports = JSON.parse('{"dismiss":"Zignoruj"}');
  var $2599cf0c4ab37f59$exports = {};
  $2599cf0c4ab37f59$exports = JSON.parse('{"dismiss":"Descartar"}');
  var $3c220ae7ef8a35fd$exports = {};
  $3c220ae7ef8a35fd$exports = JSON.parse('{"dismiss":"Dispensar"}');
  var $93562b5094072f54$exports = {};
  $93562b5094072f54$exports = JSON.parse('{"dismiss":"Revocare"}');
  var $cd9e2abd0d06c7b4$exports = {};
  $cd9e2abd0d06c7b4$exports = JSON.parse('{"dismiss":"\u041F\u0440\u043E\u043F\u0443\u0441\u0442\u0438\u0442\u044C"}');
  var $45375701f409adf1$exports = {};
  $45375701f409adf1$exports = JSON.parse('{"dismiss":"Zru\u0161i\u0165"}');
  var $27fab53a576de9dd$exports = {};
  $27fab53a576de9dd$exports = JSON.parse('{"dismiss":"Opusti"}');
  var $4438748d9952e7c7$exports = {};
  $4438748d9952e7c7$exports = JSON.parse('{"dismiss":"Odbaci"}');
  var $0936d7347ef4da4c$exports = {};
  $0936d7347ef4da4c$exports = JSON.parse('{"dismiss":"Avvisa"}');
  var $29700c92185d38f8$exports = {};
  $29700c92185d38f8$exports = JSON.parse('{"dismiss":"Kapat"}');
  var $662ccaf2be4c25b3$exports = {};
  $662ccaf2be4c25b3$exports = JSON.parse('{"dismiss":"\u0421\u043A\u0430\u0441\u0443\u0432\u0430\u0442\u0438"}');
  var $d80a27deda7cdb3c$exports = {};
  $d80a27deda7cdb3c$exports = JSON.parse('{"dismiss":"\u53D6\u6D88"}');
  var $2b2734393847c884$exports = {};
  $2b2734393847c884$exports = JSON.parse('{"dismiss":"\u95DC\u9589"}');
  $61fe14465afefc5e$exports = {
    "ar-AE": $773d5888b972f1cf$exports,
    "bg-BG": $d11f19852b941573$exports,
    "cs-CZ": $b983974c2ee1efb3$exports,
    "da-DK": $5809cc9d4e92de73$exports,
    "de-DE": $c68c2e4fc74398d1$exports,
    "el-GR": $0898b4c153db2b77$exports,
    "en-US": $6d74810286a15183$exports,
    "es-ES": $309d73dc65f78055$exports,
    "et-EE": $44ad94f7205cf593$exports,
    "fi-FI": $7c28f5687f0779a9$exports,
    "fr-FR": $e6d75df4b68bd73a$exports,
    "he-IL": $87505c9dab186d0f$exports,
    "hr-HR": $553439c3ffb3e492$exports,
    "hu-HU": $74cf411061b983a2$exports,
    "it-IT": $e933f298574dc435$exports,
    "ja-JP": $ac91fc9fe02f71f6$exports,
    "ko-KR": $52b96f86422025af$exports,
    "lt-LT": $c0d724c3e51dafa6$exports,
    "lv-LV": $c92899672a3fe72e$exports,
    "nb-NO": $9f576b39d8e7a9d6$exports,
    "nl-NL": $9d025808aeec81a7$exports,
    "pl-PL": $fce709921e2c0fa6$exports,
    "pt-BR": $2599cf0c4ab37f59$exports,
    "pt-PT": $3c220ae7ef8a35fd$exports,
    "ro-RO": $93562b5094072f54$exports,
    "ru-RU": $cd9e2abd0d06c7b4$exports,
    "sk-SK": $45375701f409adf1$exports,
    "sl-SI": $27fab53a576de9dd$exports,
    "sr-SP": $4438748d9952e7c7$exports,
    "sv-SE": $0936d7347ef4da4c$exports,
    "tr-TR": $29700c92185d38f8$exports,
    "uk-UA": $662ccaf2be4c25b3$exports,
    "zh-CN": $d80a27deda7cdb3c$exports,
    "zh-TW": $2b2734393847c884$exports
  };
  function $86ea4cb521eb2e37$export$2317d149ed6f78c4(props) {
    let { onDismiss, ...otherProps } = props;
    let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85(/* @__PURE__ */ $parcel$interopDefault($61fe14465afefc5e$exports));
    let labels9 = $313b98861ee5dd6c$export$d6875122194c7b44(otherProps, formatMessage("dismiss"));
    let onClick = () => {
      if (onDismiss)
        onDismiss();
    };
    return /* @__PURE__ */ import_react51.default.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, null, /* @__PURE__ */ import_react51.default.createElement("button", {
      ...labels9,
      tabIndex: -1,
      onClick
    }));
  }
  var $5e3802645cc19319$exports = {};
  $parcel$export8($5e3802645cc19319$exports, "ariaHideOutside", () => $5e3802645cc19319$export$1c3ebcada18427bf);
  var $5e3802645cc19319$var$refCountMap = /* @__PURE__ */ new WeakMap();
  function $5e3802645cc19319$export$1c3ebcada18427bf(targets, root2 = document.body) {
    let visibleNodes = new Set(targets);
    let hiddenNodes = /* @__PURE__ */ new Set();
    let walker = document.createTreeWalker(root2, NodeFilter.SHOW_ELEMENT, {
      acceptNode(node2) {
        if (node2 instanceof HTMLElement && node2.dataset.liveAnnouncer === "true")
          visibleNodes.add(node2);
        if (visibleNodes.has(node2) || hiddenNodes.has(node2.parentElement))
          return NodeFilter.FILTER_REJECT;
        if (node2 instanceof HTMLElement && node2.getAttribute("role") === "row")
          return NodeFilter.FILTER_SKIP;
        if (targets.some((target6) => node2.contains(target6)))
          return NodeFilter.FILTER_SKIP;
        return NodeFilter.FILTER_ACCEPT;
      }
    });
    let hide = (node2) => {
      var ref;
      let refCount = (ref = $5e3802645cc19319$var$refCountMap.get(node2)) !== null && ref !== void 0 ? ref : 0;
      if (node2.getAttribute("aria-hidden") === "true" && refCount === 0)
        return;
      if (refCount === 0)
        node2.setAttribute("aria-hidden", "true");
      hiddenNodes.add(node2);
      $5e3802645cc19319$var$refCountMap.set(node2, refCount + 1);
    };
    let node1 = walker.nextNode();
    while (node1 != null) {
      hide(node1);
      node1 = walker.nextNode();
    }
    let observer = new MutationObserver((changes) => {
      for (let change2 of changes) {
        if (change2.type !== "childList" || change2.addedNodes.length === 0)
          continue;
        if (![
          ...visibleNodes,
          ...hiddenNodes
        ].some((node2) => node2.contains(change2.target)))
          for (let node2 of change2.addedNodes) {
            if (node2 instanceof HTMLElement && node2.dataset.liveAnnouncer === "true")
              visibleNodes.add(node2);
            else if (node2 instanceof Element)
              hide(node2);
          }
      }
    });
    observer.observe(root2, {
      childList: true,
      subtree: true
    });
    return () => {
      observer.disconnect();
      for (let node2 of hiddenNodes) {
        let count = $5e3802645cc19319$var$refCountMap.get(node2);
        if (count === 1) {
          node2.removeAttribute("aria-hidden");
          $5e3802645cc19319$var$refCountMap.delete(node2);
        } else
          $5e3802645cc19319$var$refCountMap.set(node2, count - 1);
      }
    };
  }

  // output/React.Aria.Overlays/foreign.js
  var usePreventScrollImpl = $49c51c25361d4cd2$export$ee0f7cc6afcd1c18;

  // output/React.Aria.Overlays/index.js
  var usePreventScroll = /* @__PURE__ */ function() {
    var $4 = runEffectFn1(usePreventScrollImpl);
    return function($5) {
      return unsafeHook($4($5));
    };
  }();

  // output/UI.Modal/index.js
  var liftEffect9 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var discard17 = /* @__PURE__ */ discard2(ixBindRender);
  var exit4 = /* @__PURE__ */ exit();
  var pure52 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var el12 = /* @__PURE__ */ el();
  var animatePresence4 = /* @__PURE__ */ animatePresence();
  var foldMap16 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var styled16 = /* @__PURE__ */ styled();
  var div15 = /* @__PURE__ */ div6();
  var append28 = /* @__PURE__ */ append(semigroupStyle);
  var initial6 = /* @__PURE__ */ initial();
  var animate8 = /* @__PURE__ */ animate3();
  var monoidEffect7 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty24 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidFn(monoidEffect7));
  var mempty113 = /* @__PURE__ */ mempty(monoidEffect7);
  var mkModalView = function(v2) {
    return function __do10() {
      var modal2 = liftEffect9(mkModal)();
      return component("ModalView")(function(props) {
        return discard17(usePreventScroll({
          isDisabled: isNothing(props.child\u0294)
        }))(function() {
          var exit1 = exit4(css8({
            y: "-120%",
            transition: {
              type: "spring",
              bounce: 0.2,
              duration: 0.8
            }
          }));
          return pure52(modal2({
            isVisible: isJust(props.child\u0294),
            clickAwayId: v2.clickAwayId,
            modalContainerId: v2.modalContainerId,
            hide: props.hide,
            allowClickAway: true,
            content: el12(animatePresence4)({})([foldMap16(function(child) {
              return styled16(div15)({
                key: "modal",
                css: append28(pY(16))(pT(116)),
                initial: initial6(css8({
                  y: "-100%"
                })),
                animate: animate8(css8({
                  y: "calc(0% - 100px)",
                  transition: {
                    type: "spring",
                    bounce: 0.33,
                    duration: 0.5
                  }
                })),
                exit: exit1,
                onClick: handler(stopPropagation)(mempty24),
                onAnimationComplete: onAnimationComplete(function(fgn) {
                  var $21 = reallyUnsafeRefEq(fgn)(exit1);
                  if ($21) {
                    return props.onHidden;
                  }
                  ;
                  return mempty113;
                })
              })([child]);
            })(props.child\u0294)])
          }));
        });
      })();
    };
  };

  // output/UI.GithubLogin/index.js
  var bind46 = /* @__PURE__ */ bind2(ixBindRender);
  var bind116 = /* @__PURE__ */ bind(bindRemoteData);
  var mapFlipped19 = /* @__PURE__ */ mapFlipped(functorEither);
  var pure53 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var lmap3 = /* @__PURE__ */ lmap(bifunctorRemoteData);
  var styled17 = /* @__PURE__ */ styled();
  var div$prime12 = /* @__PURE__ */ div$prime();
  var show16 = /* @__PURE__ */ show(showInt);
  var append112 = /* @__PURE__ */ append(semigroupStyle);
  var mapFlipped110 = /* @__PURE__ */ mapFlipped(functorArray);
  var un4 = /* @__PURE__ */ un();
  var map40 = /* @__PURE__ */ map(functorArray);
  var pure117 = /* @__PURE__ */ pure(applicativeArray);
  var box4 = /* @__PURE__ */ box2()();
  var css42 = /* @__PURE__ */ css2();
  var centre3 = /* @__PURE__ */ centre2()();
  var keyframes6 = /* @__PURE__ */ keyframes3();
  var h1$prime2 = /* @__PURE__ */ h1$prime();
  var stack5 = /* @__PURE__ */ stack2()();
  var span$prime6 = /* @__PURE__ */ span$prime();
  var a$prime3 = /* @__PURE__ */ a$prime();
  var mempty25 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidMaybe(semigroupString));
  var discard18 = /* @__PURE__ */ discard2(ixBindRender);
  var useAff2 = /* @__PURE__ */ useAff(/* @__PURE__ */ eqMaybe(eqString));
  var for_11 = /* @__PURE__ */ for_(applicativeAff);
  var for_12 = /* @__PURE__ */ for_11(foldableMaybe);
  var discard19 = /* @__PURE__ */ discard(discardUnit);
  var discard24 = /* @__PURE__ */ discard19(bindAff);
  var fromDuration2 = /* @__PURE__ */ fromDuration(durationSeconds);
  var liftEffect10 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var button11 = /* @__PURE__ */ button8()();
  var cluster8 = /* @__PURE__ */ cluster3()();
  var disjointUnion3 = /* @__PURE__ */ disjointUnion()();
  var bind211 = /* @__PURE__ */ bind(bindReaderT);
  var useAff1 = /* @__PURE__ */ useAff(/* @__PURE__ */ eqMaybe(eqDeviceCodeResponse));
  var append29 = /* @__PURE__ */ append(semigroupSeconds);
  var negateDuration3 = /* @__PURE__ */ negateDuration(durationSeconds);
  var eqRec4 = /* @__PURE__ */ eqRec();
  var eqRowCons3 = /* @__PURE__ */ eqRowCons(eqRowNil)();
  var error_uriIsSymbol2 = {
    reflectSymbol: function() {
      return "error_uri";
    }
  };
  var error_descriptionIsSymbol2 = {
    reflectSymbol: function() {
      return "error_description";
    }
  };
  var errorIsSymbol2 = {
    reflectSymbol: function() {
      return "error";
    }
  };
  var useAff22 = /* @__PURE__ */ useAff(/* @__PURE__ */ eqRemoteData(eqVoid)(/* @__PURE__ */ eqEither(eqString)(/* @__PURE__ */ eqEither(/* @__PURE__ */ eqRec4(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons3(error_uriIsSymbol2)(eqString))()(error_descriptionIsSymbol2)(eqString))()(errorIsSymbol2)(eqString)))(/* @__PURE__ */ eqRec4(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons3({
    reflectSymbol: function() {
      return "token_type";
    }
  })(eqTokenType))()({
    reflectSymbol: function() {
      return "scope";
    }
  })(eqScopeList))()({
    reflectSymbol: function() {
      return "access_token";
    }
  })(eqAccessToken))))));
  var for_22 = /* @__PURE__ */ for_11(foldableRemoteData);
  var forever2 = /* @__PURE__ */ forever(monadRecAff);
  var for_32 = /* @__PURE__ */ for_(applicativeEffect)(foldableRemoteData);
  var show17 = /* @__PURE__ */ show(showString);
  var liftEffect1 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var show24 = /* @__PURE__ */ show(/* @__PURE__ */ showRecord()()(/* @__PURE__ */ showRecordFieldsCons(errorIsSymbol2)(/* @__PURE__ */ showRecordFieldsCons(error_descriptionIsSymbol2)(/* @__PURE__ */ showRecordFieldsCons(error_uriIsSymbol2)(showRecordFieldsNil)(showString))(showString))(showString)));
  var useEffect18 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqRemoteData(eqString)(eqDeviceCodeResponse));
  var monoidEffect8 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty114 = /* @__PURE__ */ mempty(monoidEffect8);
  var mempty26 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect8));
  var mapFlipped23 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var applySecond3 = /* @__PURE__ */ applySecond(applyEffect);
  var usePollAccessToken = function(ctx) {
    return bind46(useIPCMessage(ctx))(function(v2) {
      var res = bind116(v2.value0)(function(v1) {
        if (v1 instanceof GithubPollAccessTokenResult) {
          return new Success2(mapFlipped19(failedOrToEither(v1.value0))(failedOrToEither));
        }
        ;
        throw new Error("Failed pattern match at UI.GithubLogin (line 55, column 38 - line 57, column 50): " + [v1.constructor.name]);
      });
      return pure53(new Tuple(res, new Tuple(function($208) {
        return v2.value1.value0(GithubPollAccessToken.create($208));
      }, v2.value1.value1)));
    });
  };
  var useGetDeviceCode = function(ctx) {
    return bind46(useIPCMessage(ctx))(function(v2) {
      var res = bind116(lmap3($$const(""))(v2.value0))(function(v1) {
        if (v1 instanceof GithubLoginGetDeviceCodeResult) {
          return fromEither(failedOrToEither(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at UI.GithubLogin (line 48, column 56 - line 49, column 76): " + [v1.constructor.name]);
      });
      return pure53(new Tuple(res, new Tuple(v2.value1.value0(GithubLoginGetDeviceCode.value), v2.value1.value1)));
    });
  };
  var renderCode = function(user_code) {
    var toLetter = function(i7) {
      return function(s3) {
        return styled17(div$prime12)({
          key: show16(i7) + s3,
          css: append112(pX(12))(append112(pY(4))(append112(border2(1))(append112(borderCol$prime(col2.backgroundBright5))(append112(roundedXl)(append112(shadowMd)(background$prime(col2.backgroundBright3)))))))
        })([text2(s3)]);
      };
    };
    var numberCluster = div_2(append112(flexRow)(append112(gap(4))(append112(justifyAround)(textCenter))));
    var clusters = mapFlipped110(split("-")(un4(UserCode)(user_code)))(function() {
      var $209 = map40(function($211) {
        return fromCodePointArray(pure117($211));
      });
      return function($210) {
        return $209(toCodePointArray($210));
      };
    }());
    return box_([div_2(append112(text3xl)(append112(fontFamilyOrMono("Jetbrains Mono"))(append112(textCol$prime(col2.text))(append112(flexCol)(append112(width$prime(str("fit-content")))(append112(mXAuto)(append112(justifyAround)(append112(itemsCenter)(screenSm(append112(flexRow)(gap(8))))))))))))(intersperse(span_2(textCol$prime(col2.textPaler3))([text2("-")]))(mapFlipped110(clusters)(function(cluster1) {
      return numberCluster(mapWithIndex(toLetter)(cluster1));
    })))]);
  };
  var renderInstructions = function(copyToClipboardButton) {
    return function(user_code) {
      return function(verification_uri) {
        return box4({
          css: append112(background$prime(col2.backgroundLayer5))(append112(rounded3xl)(append112(css42({
            width: str("fit-content")
          }))(append112(mT(24))(append112(pB(36))(append112(pX(42))(shadowXl))))))
        })([centre3({
          andText: true
        })([stack_([centre3({
          css: css42({
            width: str("fit-content")
          })
        })([box4({
          padding: str("20px"),
          css: append112(widthAndHeight(100))(append112(roundedFull)(append112(mT(-34 | 0))(append112(background$prime(col2.highlight))(append112(textCol$prime(col2.highlightText))(css42({
            "& > svg > path": nested(css42({
              strokeWidth: str("1.2")
            }))
          }))))))
        })([styled17(div$prime12)({
          css: css42({
            animation: str("x 8s linear infinite"),
            animationName: keyframes6({
              from: css42({
                opacity: num(0.7)
              }),
              "60%": css42({
                opacity: num(0.3)
              }),
              to: css42({
                opacity: num(0.7)
              })
            })
          })
        })([fingerPrint])])]), styled17(h1$prime2)({
          css: text4xl
        })([text2("Github Login")]), box_([stack5({})([styled17(span$prime6)({
          css: append112(textSm)(textCol$prime(col2.textPaler2))
        })([text2("To complete your login to Github copy this code")]), renderCode(user_code), copyToClipboardButton, styled17(div$prime12)({
          css: append112(textSm)(textCol$prime(col2.textPaler2))
        })([text2("into the form at")]), styled17(a$prime3)({
          css: append112(textXl)(append112(underline)(append112(cursorPointer)(append112(transition2("all 0.5s ease"))(append112(hover(underline))(append112(textCol$prime(col2.highlight))(append112(pX(24))(pY(12)))))))),
          target: "_blank",
          href: un4(VerificationURI)(verification_uri)
        })([text2(un4(VerificationURI)(verification_uri))])])])])])]);
      };
    };
  };
  var mkCopyToClipboardButton = /* @__PURE__ */ function() {
    var useCopyToClipboard = function(ctx) {
      return bind46(useIPCMessage(ctx))(function(v2) {
        var copyToClipboard = function(text7) {
          return v2.value1.value0(new CopyToClipboard(text7));
        };
        var copiedToClipboard = function() {
          var v1 = toMaybe2(v2.value0);
          if (v1 instanceof Nothing) {
            return mempty25;
          }
          ;
          if (v1 instanceof Just && v1.value0 instanceof CopyToClipboardResult) {
            return new Just(v1.value0.value0);
          }
          ;
          throw new Error("Failed pattern match at UI.GithubLogin (line 265, column 41 - line 267, column 54): " + [v1.constructor.name]);
        }();
        return pure53(new Tuple(copiedToClipboard, new Tuple(copyToClipboard, v2.value1.value1)));
      });
    };
    return component2("CopyToClipboardButton")(function(ctx) {
      return function(toCopy) {
        return bind46(useCopyToClipboard(ctx))(function(v2) {
          return discard18(useAff2(v2.value0)(for_12(v2.value0)(function(v1) {
            return discard24(delay(fromDuration2(5)))(function() {
              return liftEffect10(v2.value1.value1);
            });
          })))(function() {
            return pure53(button11({
              buttonType: Primary.value,
              css: shadowSm,
              onClick: handler_(v2.value1.value0(toCopy))
            })([cluster8({
              css: textCol$prime(col2.highlightText),
              space: "4px"
            })([text2("Copy to Clipboard"), div_2(append112(width(22))(append112(height(18))(append112(mL(4))(append112(pL(4))(append112(borderLeft(1))(borderCol$prime(col2.highlight)))))))([function() {
              var $165 = isJust(v2.value0);
              if ($165) {
                return clipboardCheck;
              }
              ;
              return clipboard;
            }()])])]));
          });
        });
      };
    });
  }();
  var githubButton = function() {
    return function() {
      return function() {
        return function() {
          return function(props) {
            return button11(disjointUnion3(props)({
              css: append112(background(gray["_800"]))(append112(textCol(gray["_100"]))(append112(shadowSm)(append112(width(170))(css42({
                "&:disabled, &:disabled:active": nested(css42({
                  color: color(gray["_400"]),
                  boxShadow: none,
                  background: color(gray["_700"]),
                  transform: str("none")
                }))
              }))))),
              ripple: cssStringRGBA(gray["_600"])
            }));
          };
        };
      };
    };
  };
  var githubButton1 = /* @__PURE__ */ githubButton()()()();
  var mkGithubLogin = /* @__PURE__ */ bind211(/* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect))(/* @__PURE__ */ mkModalView({
    clickAwayId: modalClickawayId,
    modalContainerId
  })))(function(modalView) {
    return bind211(mkCopyToClipboardButton)(function(copyToClipboardButton) {
      return component2("GithubLoginButton")(function(ctx) {
        return function(v2) {
          var notifyError = function(message2) {
            return sendNotification(ctx)(errorNotification({
              title: "Error",
              body: text2(message2)
            }));
          };
          return bind46(useGetDeviceCode(ctx))(function(v1) {
            var code\u0294 = toMaybe2(v1.value0);
            return bind46(usePollAccessToken(ctx))(function(v22) {
              return discard18(useAff1(code\u0294)(for_12(code\u0294)(function(v3) {
                return discard24(liftEffect10(v22.value1.value0(v3.device_code)))(function() {
                  return discard24(delay(fromDuration2(append29(v3.expires_in)(negateDuration3(10)))))(function() {
                    return liftEffect10(v1.value1.value0);
                  });
                });
              })))(function() {
                return discard18(useAff22(v22.value0)(for_22(v22.value0)(function(v3) {
                  return for_12(code\u0294)(function(v42) {
                    return forever2(discard24(delay(fromDuration2(v42.interval)))(function() {
                      return liftEffect10(for_32(v22.value0)(function(v5) {
                        if (v5 instanceof Left) {
                          return notifyError(show17(v5.value0));
                        }
                        ;
                        if (v5 instanceof Right && (v5.value0 instanceof Left && v5.value0.value0.error === "authorization_pending")) {
                          return liftEffect1(v22.value1.value0(v42.device_code));
                        }
                        ;
                        if (v5 instanceof Right && v5.value0 instanceof Left) {
                          return notifyError(show24(v5.value0.value0));
                        }
                        ;
                        if (v5 instanceof Right && v5.value0 instanceof Right) {
                          return v1.value1.value1;
                        }
                        ;
                        throw new Error("Failed pattern match at UI.GithubLogin (line 88, column 32 - line 94, column 28): " + [v5.constructor.name]);
                      }));
                    }));
                  });
                })))(function() {
                  return discard18(useEffect18(v1.value0)(function __do10() {
                    (function() {
                      if (v1.value0 instanceof Failure) {
                        return notifyError(v1.value0.value0)();
                      }
                      ;
                      return mempty114();
                    })();
                    return mempty26();
                  }))(function() {
                    var buttonGithubLogo = div_2(append112(mL(8))(append112(widthAndHeight(16))(mB(1))))([githubLogo]);
                    var loginButton = function(v3) {
                      return githubButton1({
                        disabled: v3.disabled,
                        onClick: handler_(v1.value1.value0)
                      })([div_2(append112(flexRow)(append112(justifyBetween)(append112(widthFull)(itemsCenter))))([div_2(css42({
                        whiteSpace: nowrap
                      }))([text2("Login to Github")]), buttonGithubLogo])]);
                    };
                    var loggedOutView = function() {
                      if (v1.value0 instanceof NotAsked) {
                        return loginButton({
                          disabled: false
                        });
                      }
                      ;
                      if (v1.value0 instanceof Loading2) {
                        return loginButton({
                          disabled: true
                        });
                      }
                      ;
                      if (v1.value0 instanceof Failure) {
                        return loginButton({
                          disabled: false
                        });
                      }
                      ;
                      if (v1.value0 instanceof Success2) {
                        return fragment([loginButton({
                          disabled: true
                        })]);
                      }
                      ;
                      throw new Error("Failed pattern match at UI.GithubLogin (line 119, column 23 - line 125, column 12): " + [v1.value0.constructor.name]);
                    }();
                    return pure53(fragment([loggedOutView, modalView({
                      child\u0294: mapFlipped23(code\u0294)(function(v3) {
                        return renderInstructions(copyToClipboardButton(un4(UserCode)(v3.user_code)))(v3.user_code)(v3.verification_uri);
                      }),
                      hide: applySecond3(v1.value1.value1)(v22.value1.value1),
                      onHidden: function() {
                        if (v22.value0 instanceof Success2) {
                          return v2.onComplete;
                        }
                        ;
                        return applySecond3(v1.value1.value1)(v22.value1.value1);
                      }()
                    })]));
                  });
                });
              });
            });
          });
        };
      });
    });
  });

  // output/UI.GithubLogin.UseIsLoggedIntoGithub/index.js
  var coerceHook13 = /* @__PURE__ */ coerceHook();
  var bind47 = /* @__PURE__ */ bind2(ixBindRender);
  var pure54 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useIsLoggedIntoGithub = function(ctx) {
    return coerceHook13(bind47(useIPCMessage(ctx))(function(v2) {
      var checkIsLoggedIn = v2.value1.value0(GetIsLoggedIntoGithub.value);
      var isLoggedIn = function() {
        var v1 = toMaybe2(v2.value0);
        if (v1 instanceof Just && v1.value0 instanceof GetIsLoggedIntoGithubResult) {
          return v1.value0.value0;
        }
        ;
        if (v1 instanceof Nothing) {
          return false;
        }
        ;
        throw new Error("Failed pattern match at UI.GithubLogin.UseIsLoggedIntoGithub (line 29, column 32 - line 31, column 22): " + [v1.constructor.name]);
      }();
      return pure54({
        isLoggedIn,
        checkIsLoggedIn,
        resetCheckIsLoggedIn: v2.value1.value1
      });
    }));
  };

  // output/UI.Navigation.HeaderBar.GithubAvatar/index.js
  var bind48 = /* @__PURE__ */ bind2(ixBindRender);
  var styled18 = /* @__PURE__ */ styled();
  var div$prime13 = /* @__PURE__ */ div$prime();
  var append30 = /* @__PURE__ */ append(semigroupStyle);
  var guard9 = /* @__PURE__ */ guard(monoidStyle);
  var monoidEffect9 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var fold5 = /* @__PURE__ */ fold(foldableMaybe)(monoidEffect9);
  var css43 = /* @__PURE__ */ css2();
  var pure55 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var cluster9 = /* @__PURE__ */ cluster3()();
  var button12 = /* @__PURE__ */ button8()();
  var img2 = /* @__PURE__ */ img();
  var stack6 = /* @__PURE__ */ stack2()();
  var bind117 = /* @__PURE__ */ bind(bindReaderT);
  var liftEffect11 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
  var discard20 = /* @__PURE__ */ discard2(ixBindRender);
  var voidRight4 = /* @__PURE__ */ voidRight(functorEffect);
  var mempty27 = /* @__PURE__ */ mempty(monoidEffect9);
  var unless6 = /* @__PURE__ */ unless(applicativeEffect);
  var readForeignRecord6 = /* @__PURE__ */ readForeignRecord();
  var useGithubGraphQL3 = /* @__PURE__ */ useGithubGraphQL(/* @__PURE__ */ writeForeignRecord()(writeForeignFieldsNilRowR))(/* @__PURE__ */ readForeignRecord6(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "data";
    }
  })(/* @__PURE__ */ readForeignRecord6(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "viewer";
    }
  })(/* @__PURE__ */ readForeignRecord6(/* @__PURE__ */ readForeignFieldsCons({
    reflectSymbol: function() {
      return "login";
    }
  })(readForeignString)(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()));
  var useEffect19 = /* @__PURE__ */ useEffect(eqBoolean);
  var when8 = /* @__PURE__ */ when(applicativeEffect);
  var foldMap17 = /* @__PURE__ */ foldMap(foldableMaybe)(monoidJSX);
  var mkGithubAvatarPresentational = /* @__PURE__ */ component("GithubAvatarPresentational")(function(name15) {
    return bind48(useRef(nullImpl))(function(popOverContainerRef) {
      return bind48(usePopOver({
        dismissBehaviour\u0294: new Just(new DismissPopOverOnClickOutsideTargetAnd([popOverContainerRef])),
        containerId: popOverId,
        placement: new Placement(Below.value, End.value)
      }))(function(v2) {
        var menuEntry = function(text7) {
          return function(icon) {
            return function(onClick\u0294) {
              return styled18(div$prime13)({
                css: append30(popOverMenuEntryStyle)(append30(guard9(isJust(onClick\u0294))(popOverMenuEntryHoverStyle))(textXs)),
                onClick: handler_(fold5(onClick\u0294))
              })([div_2(widthAndHeight(16))([icon]), div_2(css43({
                whiteSpace: str("nowrap")
              }))([text2(text7)])]);
            };
          };
        };
        return pure55(cluster9({
          css: append30(borderBottom(1))(borderCol$prime(col2.backgroundBright3)),
          align: "flex-end",
          space: "var(--s-1)"
        })([button12({
          css: append30(toolbarButtonStyle)(append30(active(transform("scale(0.99)")))(append30(guard9(v2.isVisible)(background$prime(col2.backgroundLayer3)))(hover(background$prime(col2.backgroundLayer3))))),
          ripple: toolbarRippleCol,
          ref: v2.targetRef,
          onClick: handler_(function() {
            if (v2.isVisible) {
              return v2.hidePopOver;
            }
            ;
            return v2.showPopOver;
          }())
        })([cluster9({
          space: "12px"
        })([cluster9({
          space: "4px"
        })([div_2(append30(widthAndHeight(32))(append30(roundedFull)(overflowHidden)))([img2({
          width: "32",
          height: "32",
          src: "https://github.com/" + (name15 + ".png"),
          onError: handler(target5)(setFallbackImgSrc(duckImage))
        })]), div_2(widthAndHeight(14))([chevronDown])])])]), v2.renderInPopOver(styled18(div$prime13)({
          ref: popOverContainerRef,
          css: append30(mT(1))(append30(roundedDefault)(append30(border2(1))(append30(borderCol$prime(col2.backgroundBright5))(append30(background$prime(col2.backgroundLayer4))(append30(roundedLg)(append30(shadowXxl)(fontMedium)))))))
        })([stack6({
          space: str("0"),
          css: append30(divideY(1))(divideCol$prime(col2.backgroundLayer2))
        })([menuEntry("Logged in as " + name15)(user)(Nothing.value)])]))]));
      });
    });
  });
  var mkView6 = /* @__PURE__ */ bind117(mkGithubLogin)(function(githubLogin) {
    return bind117(liftEffect11(mkGithubAvatarPresentational))(function(githubAvatarView) {
      return component2("GithubAvatar")(function(ctx) {
        return function(v2) {
          return bind48(useIsLoggedIntoGithub(ctx))(function(v1) {
            return discard20(useEffectAlways(voidRight4(mempty27)(unless6(v1.isLoggedIn)(v1.checkIsLoggedIn))))(function() {
              return bind48(useGithubGraphQL3(ctx)("query { viewer { login } }"))(function(v22) {
                return discard20(useEffect19(v1.isLoggedIn)(voidRight4(mempty27)(when8(isNothing(toMaybe2(v22.value0)))(v22.value1({})))))(function() {
                  return pure55(function() {
                    if (v1.isLoggedIn) {
                      return foldMap17(function($76) {
                        return githubAvatarView(function(v3) {
                          return v3.data.viewer.login;
                        }($76));
                      })(toMaybe2(v22.value0));
                    }
                    ;
                    return githubLogin({
                      onComplete: v1.checkIsLoggedIn
                    });
                  }());
                });
              });
            });
          });
        };
      });
    });
  });

  // node_modules/marked/lib/marked.esm.js
  function getDefaults() {
    return {
      baseUrl: null,
      breaks: false,
      extensions: null,
      gfm: true,
      headerIds: true,
      headerPrefix: "",
      highlight: null,
      langPrefix: "language-",
      mangle: true,
      pedantic: false,
      renderer: null,
      sanitize: false,
      sanitizer: null,
      silent: false,
      smartLists: false,
      smartypants: false,
      tokenizer: null,
      walkTokens: null,
      xhtml: false
    };
  }
  var defaults = getDefaults();
  function changeDefaults(newDefaults) {
    defaults = newDefaults;
  }
  var escapeTest = /[&<>"']/;
  var escapeReplace = /[&<>"']/g;
  var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
  var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
  var escapeReplacements = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
  };
  var getEscapeReplacement = (ch2) => escapeReplacements[ch2];
  function escape(html3, encode2) {
    if (encode2) {
      if (escapeTest.test(html3)) {
        return html3.replace(escapeReplace, getEscapeReplacement);
      }
    } else {
      if (escapeTestNoEncode.test(html3)) {
        return html3.replace(escapeReplaceNoEncode, getEscapeReplacement);
      }
    }
    return html3;
  }
  var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
  function unescape(html3) {
    return html3.replace(unescapeTest, (_2, n2) => {
      n2 = n2.toLowerCase();
      if (n2 === "colon")
        return ":";
      if (n2.charAt(0) === "#") {
        return n2.charAt(1) === "x" ? String.fromCharCode(parseInt(n2.substring(2), 16)) : String.fromCharCode(+n2.substring(1));
      }
      return "";
    });
  }
  var caret2 = /(^|[^\[])\^/g;
  function edit(regex2, opt) {
    regex2 = typeof regex2 === "string" ? regex2 : regex2.source;
    opt = opt || "";
    const obj = {
      replace: (name15, val) => {
        val = val.source || val;
        val = val.replace(caret2, "$1");
        regex2 = regex2.replace(name15, val);
        return obj;
      },
      getRegex: () => {
        return new RegExp(regex2, opt);
      }
    };
    return obj;
  }
  var nonWordAndColonTest = /[^\w:]/g;
  var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
  function cleanUrl(sanitize3, base2, href4) {
    if (sanitize3) {
      let prot;
      try {
        prot = decodeURIComponent(unescape(href4)).replace(nonWordAndColonTest, "").toLowerCase();
      } catch (e) {
        return null;
      }
      if (prot.indexOf("javascript:") === 0 || prot.indexOf("vbscript:") === 0 || prot.indexOf("data:") === 0) {
        return null;
      }
    }
    if (base2 && !originIndependentUrl.test(href4)) {
      href4 = resolveUrl(base2, href4);
    }
    try {
      href4 = encodeURI(href4).replace(/%25/g, "%");
    } catch (e) {
      return null;
    }
    return href4;
  }
  var baseUrls = {};
  var justDomain = /^[^:]+:\/*[^/]*$/;
  var protocol2 = /^([^:]+:)[\s\S]*$/;
  var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
  function resolveUrl(base2, href4) {
    if (!baseUrls[" " + base2]) {
      if (justDomain.test(base2)) {
        baseUrls[" " + base2] = base2 + "/";
      } else {
        baseUrls[" " + base2] = rtrim(base2, "/", true);
      }
    }
    base2 = baseUrls[" " + base2];
    const relativeBase = base2.indexOf(":") === -1;
    if (href4.substring(0, 2) === "//") {
      if (relativeBase) {
        return href4;
      }
      return base2.replace(protocol2, "$1") + href4;
    } else if (href4.charAt(0) === "/") {
      if (relativeBase) {
        return href4;
      }
      return base2.replace(domain, "$1") + href4;
    } else {
      return base2 + href4;
    }
  }
  var noopTest = { exec: function noopTest2() {
  } };
  function merge6(obj) {
    let i7 = 1, target6, key;
    for (; i7 < arguments.length; i7++) {
      target6 = arguments[i7];
      for (key in target6) {
        if (Object.prototype.hasOwnProperty.call(target6, key)) {
          obj[key] = target6[key];
        }
      }
    }
    return obj;
  }
  function splitCells(tableRow, count) {
    const row2 = tableRow.replace(/\|/g, (match6, offset2, str2) => {
      let escaped = false, curr = offset2;
      while (--curr >= 0 && str2[curr] === "\\")
        escaped = !escaped;
      if (escaped) {
        return "|";
      } else {
        return " |";
      }
    }), cells2 = row2.split(/ \|/);
    let i7 = 0;
    if (!cells2[0].trim()) {
      cells2.shift();
    }
    if (cells2.length > 0 && !cells2[cells2.length - 1].trim()) {
      cells2.pop();
    }
    if (cells2.length > count) {
      cells2.splice(count);
    } else {
      while (cells2.length < count)
        cells2.push("");
    }
    for (; i7 < cells2.length; i7++) {
      cells2[i7] = cells2[i7].trim().replace(/\\\|/g, "|");
    }
    return cells2;
  }
  function rtrim(str2, c3, invert) {
    const l2 = str2.length;
    if (l2 === 0) {
      return "";
    }
    let suffLen = 0;
    while (suffLen < l2) {
      const currChar = str2.charAt(l2 - suffLen - 1);
      if (currChar === c3 && !invert) {
        suffLen++;
      } else if (currChar !== c3 && invert) {
        suffLen++;
      } else {
        break;
      }
    }
    return str2.slice(0, l2 - suffLen);
  }
  function findClosingBracket(str2, b4) {
    if (str2.indexOf(b4[1]) === -1) {
      return -1;
    }
    const l2 = str2.length;
    let level = 0, i7 = 0;
    for (; i7 < l2; i7++) {
      if (str2[i7] === "\\") {
        i7++;
      } else if (str2[i7] === b4[0]) {
        level++;
      } else if (str2[i7] === b4[1]) {
        level--;
        if (level < 0) {
          return i7;
        }
      }
    }
    return -1;
  }
  function checkSanitizeDeprecation(opt) {
    if (opt && opt.sanitize && !opt.silent) {
      console.warn("marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options");
    }
  }
  function repeatString(pattern2, count) {
    if (count < 1) {
      return "";
    }
    let result = "";
    while (count > 1) {
      if (count & 1) {
        result += pattern2;
      }
      count >>= 1;
      pattern2 += pattern2;
    }
    return result + pattern2;
  }
  function outputLink(cap, link2, raw, lexer2) {
    const href4 = link2.href;
    const title5 = link2.title ? escape(link2.title) : null;
    const text7 = cap[1].replace(/\\([\[\]])/g, "$1");
    if (cap[0].charAt(0) !== "!") {
      lexer2.state.inLink = true;
      const token2 = {
        type: "link",
        raw,
        href: href4,
        title: title5,
        text: text7,
        tokens: lexer2.inlineTokens(text7, [])
      };
      lexer2.state.inLink = false;
      return token2;
    }
    return {
      type: "image",
      raw,
      href: href4,
      title: title5,
      text: escape(text7)
    };
  }
  function indentCodeCompensation(raw, text7) {
    const matchIndentToCode = raw.match(/^(\s+)(?:```)/);
    if (matchIndentToCode === null) {
      return text7;
    }
    const indentToCode = matchIndentToCode[1];
    return text7.split("\n").map((node2) => {
      const matchIndentInNode = node2.match(/^\s+/);
      if (matchIndentInNode === null) {
        return node2;
      }
      const [indentInNode] = matchIndentInNode;
      if (indentInNode.length >= indentToCode.length) {
        return node2.slice(indentToCode.length);
      }
      return node2;
    }).join("\n");
  }
  var Tokenizer = class {
    constructor(options3) {
      this.options = options3 || defaults;
    }
    space(src9) {
      const cap = this.rules.block.newline.exec(src9);
      if (cap && cap[0].length > 0) {
        return {
          type: "space",
          raw: cap[0]
        };
      }
    }
    code(src9) {
      const cap = this.rules.block.code.exec(src9);
      if (cap) {
        const text7 = cap[0].replace(/^ {1,4}/gm, "");
        return {
          type: "code",
          raw: cap[0],
          codeBlockStyle: "indented",
          text: !this.options.pedantic ? rtrim(text7, "\n") : text7
        };
      }
    }
    fences(src9) {
      const cap = this.rules.block.fences.exec(src9);
      if (cap) {
        const raw = cap[0];
        const text7 = indentCodeCompensation(raw, cap[3] || "");
        return {
          type: "code",
          raw,
          lang: cap[2] ? cap[2].trim() : cap[2],
          text: text7
        };
      }
    }
    heading(src9) {
      const cap = this.rules.block.heading.exec(src9);
      if (cap) {
        let text7 = cap[2].trim();
        if (/#$/.test(text7)) {
          const trimmed = rtrim(text7, "#");
          if (this.options.pedantic) {
            text7 = trimmed.trim();
          } else if (!trimmed || / $/.test(trimmed)) {
            text7 = trimmed.trim();
          }
        }
        const token2 = {
          type: "heading",
          raw: cap[0],
          depth: cap[1].length,
          text: text7,
          tokens: []
        };
        this.lexer.inline(token2.text, token2.tokens);
        return token2;
      }
    }
    hr(src9) {
      const cap = this.rules.block.hr.exec(src9);
      if (cap) {
        return {
          type: "hr",
          raw: cap[0]
        };
      }
    }
    blockquote(src9) {
      const cap = this.rules.block.blockquote.exec(src9);
      if (cap) {
        const text7 = cap[0].replace(/^ *>[ \t]?/gm, "");
        return {
          type: "blockquote",
          raw: cap[0],
          tokens: this.lexer.blockTokens(text7, []),
          text: text7
        };
      }
    }
    list(src9) {
      let cap = this.rules.block.list.exec(src9);
      if (cap) {
        let raw, istask, ischecked, indent, i7, blankLine, endsWithBlankLine, line2, nextLine, rawLine, itemContents, endEarly;
        let bull = cap[1].trim();
        const isordered = bull.length > 1;
        const list = {
          type: "list",
          raw: "",
          ordered: isordered,
          start: isordered ? +bull.slice(0, -1) : "",
          loose: false,
          items: []
        };
        bull = isordered ? `\\d{1,9}\\${bull.slice(-1)}` : `\\${bull}`;
        if (this.options.pedantic) {
          bull = isordered ? bull : "[*+-]";
        }
        const itemRegex = new RegExp(`^( {0,3}${bull})((?:[	 ][^\\n]*)?(?:\\n|$))`);
        while (src9) {
          endEarly = false;
          if (!(cap = itemRegex.exec(src9))) {
            break;
          }
          if (this.rules.block.hr.test(src9)) {
            break;
          }
          raw = cap[0];
          src9 = src9.substring(raw.length);
          line2 = cap[2].split("\n", 1)[0];
          nextLine = src9.split("\n", 1)[0];
          if (this.options.pedantic) {
            indent = 2;
            itemContents = line2.trimLeft();
          } else {
            indent = cap[2].search(/[^ ]/);
            indent = indent > 4 ? 1 : indent;
            itemContents = line2.slice(indent);
            indent += cap[1].length;
          }
          blankLine = false;
          if (!line2 && /^ *$/.test(nextLine)) {
            raw += nextLine + "\n";
            src9 = src9.substring(nextLine.length + 1);
            endEarly = true;
          }
          if (!endEarly) {
            const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))`);
            const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`);
            const fencesBeginRegex = new RegExp(`^( {0,${Math.min(3, indent - 1)}})(\`\`\`|~~~)`);
            while (src9) {
              rawLine = src9.split("\n", 1)[0];
              line2 = rawLine;
              if (this.options.pedantic) {
                line2 = line2.replace(/^ {1,4}(?=( {4})*[^ ])/g, "  ");
              }
              if (fencesBeginRegex.test(line2)) {
                break;
              }
              if (this.rules.block.heading.test(line2)) {
                break;
              }
              if (nextBulletRegex.test(line2)) {
                break;
              }
              if (hrRegex.test(src9)) {
                break;
              }
              if (line2.search(/[^ ]/) >= indent || !line2.trim()) {
                itemContents += "\n" + line2.slice(indent);
              } else if (!blankLine) {
                itemContents += "\n" + line2;
              } else {
                break;
              }
              if (!blankLine && !line2.trim()) {
                blankLine = true;
              }
              raw += rawLine + "\n";
              src9 = src9.substring(rawLine.length + 1);
            }
          }
          if (!list.loose) {
            if (endsWithBlankLine) {
              list.loose = true;
            } else if (/\n *\n *$/.test(raw)) {
              endsWithBlankLine = true;
            }
          }
          if (this.options.gfm) {
            istask = /^\[[ xX]\] /.exec(itemContents);
            if (istask) {
              ischecked = istask[0] !== "[ ] ";
              itemContents = itemContents.replace(/^\[[ xX]\] +/, "");
            }
          }
          list.items.push({
            type: "list_item",
            raw,
            task: !!istask,
            checked: ischecked,
            loose: false,
            text: itemContents
          });
          list.raw += raw;
        }
        list.items[list.items.length - 1].raw = raw.trimRight();
        list.items[list.items.length - 1].text = itemContents.trimRight();
        list.raw = list.raw.trimRight();
        const l2 = list.items.length;
        for (i7 = 0; i7 < l2; i7++) {
          this.lexer.state.top = false;
          list.items[i7].tokens = this.lexer.blockTokens(list.items[i7].text, []);
          const spacers = list.items[i7].tokens.filter((t) => t.type === "space");
          const hasMultipleLineBreaks = spacers.every((t) => {
            const chars = t.raw.split("");
            let lineBreaks = 0;
            for (const char3 of chars) {
              if (char3 === "\n") {
                lineBreaks += 1;
              }
              if (lineBreaks > 1) {
                return true;
              }
            }
            return false;
          });
          if (!list.loose && spacers.length && hasMultipleLineBreaks) {
            list.loose = true;
            list.items[i7].loose = true;
          }
        }
        return list;
      }
    }
    html(src9) {
      const cap = this.rules.block.html.exec(src9);
      if (cap) {
        const token2 = {
          type: "html",
          raw: cap[0],
          pre: !this.options.sanitizer && (cap[1] === "pre" || cap[1] === "script" || cap[1] === "style"),
          text: cap[0]
        };
        if (this.options.sanitize) {
          token2.type = "paragraph";
          token2.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
          token2.tokens = [];
          this.lexer.inline(token2.text, token2.tokens);
        }
        return token2;
      }
    }
    def(src9) {
      const cap = this.rules.block.def.exec(src9);
      if (cap) {
        if (cap[3])
          cap[3] = cap[3].substring(1, cap[3].length - 1);
        const tag2 = cap[1].toLowerCase().replace(/\s+/g, " ");
        return {
          type: "def",
          tag: tag2,
          raw: cap[0],
          href: cap[2],
          title: cap[3]
        };
      }
    }
    table(src9) {
      const cap = this.rules.block.table.exec(src9);
      if (cap) {
        const item = {
          type: "table",
          header: splitCells(cap[1]).map((c3) => {
            return { text: c3 };
          }),
          align: cap[2].replace(/^ *|\| *$/g, "").split(/ *\| */),
          rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, "").split("\n") : []
        };
        if (item.header.length === item.align.length) {
          item.raw = cap[0];
          let l2 = item.align.length;
          let i7, j2, k2, row2;
          for (i7 = 0; i7 < l2; i7++) {
            if (/^ *-+: *$/.test(item.align[i7])) {
              item.align[i7] = "right";
            } else if (/^ *:-+: *$/.test(item.align[i7])) {
              item.align[i7] = "center";
            } else if (/^ *:-+ *$/.test(item.align[i7])) {
              item.align[i7] = "left";
            } else {
              item.align[i7] = null;
            }
          }
          l2 = item.rows.length;
          for (i7 = 0; i7 < l2; i7++) {
            item.rows[i7] = splitCells(item.rows[i7], item.header.length).map((c3) => {
              return { text: c3 };
            });
          }
          l2 = item.header.length;
          for (j2 = 0; j2 < l2; j2++) {
            item.header[j2].tokens = [];
            this.lexer.inline(item.header[j2].text, item.header[j2].tokens);
          }
          l2 = item.rows.length;
          for (j2 = 0; j2 < l2; j2++) {
            row2 = item.rows[j2];
            for (k2 = 0; k2 < row2.length; k2++) {
              row2[k2].tokens = [];
              this.lexer.inline(row2[k2].text, row2[k2].tokens);
            }
          }
          return item;
        }
      }
    }
    lheading(src9) {
      const cap = this.rules.block.lheading.exec(src9);
      if (cap) {
        const token2 = {
          type: "heading",
          raw: cap[0],
          depth: cap[2].charAt(0) === "=" ? 1 : 2,
          text: cap[1],
          tokens: []
        };
        this.lexer.inline(token2.text, token2.tokens);
        return token2;
      }
    }
    paragraph(src9) {
      const cap = this.rules.block.paragraph.exec(src9);
      if (cap) {
        const token2 = {
          type: "paragraph",
          raw: cap[0],
          text: cap[1].charAt(cap[1].length - 1) === "\n" ? cap[1].slice(0, -1) : cap[1],
          tokens: []
        };
        this.lexer.inline(token2.text, token2.tokens);
        return token2;
      }
    }
    text(src9) {
      const cap = this.rules.block.text.exec(src9);
      if (cap) {
        const token2 = {
          type: "text",
          raw: cap[0],
          text: cap[0],
          tokens: []
        };
        this.lexer.inline(token2.text, token2.tokens);
        return token2;
      }
    }
    escape(src9) {
      const cap = this.rules.inline.escape.exec(src9);
      if (cap) {
        return {
          type: "escape",
          raw: cap[0],
          text: escape(cap[1])
        };
      }
    }
    tag(src9) {
      const cap = this.rules.inline.tag.exec(src9);
      if (cap) {
        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
          this.lexer.state.inLink = true;
        } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
          this.lexer.state.inLink = false;
        }
        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = true;
        } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
          this.lexer.state.inRawBlock = false;
        }
        return {
          type: this.options.sanitize ? "text" : "html",
          raw: cap[0],
          inLink: this.lexer.state.inLink,
          inRawBlock: this.lexer.state.inRawBlock,
          text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
        };
      }
    }
    link(src9) {
      const cap = this.rules.inline.link.exec(src9);
      if (cap) {
        const trimmedUrl = cap[2].trim();
        if (!this.options.pedantic && /^</.test(trimmedUrl)) {
          if (!/>$/.test(trimmedUrl)) {
            return;
          }
          const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), "\\");
          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
            return;
          }
        } else {
          const lastParenIndex = findClosingBracket(cap[2], "()");
          if (lastParenIndex > -1) {
            const start2 = cap[0].indexOf("!") === 0 ? 5 : 4;
            const linkLen = start2 + cap[1].length + lastParenIndex;
            cap[2] = cap[2].substring(0, lastParenIndex);
            cap[0] = cap[0].substring(0, linkLen).trim();
            cap[3] = "";
          }
        }
        let href4 = cap[2];
        let title5 = "";
        if (this.options.pedantic) {
          const link2 = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href4);
          if (link2) {
            href4 = link2[1];
            title5 = link2[3];
          }
        } else {
          title5 = cap[3] ? cap[3].slice(1, -1) : "";
        }
        href4 = href4.trim();
        if (/^</.test(href4)) {
          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
            href4 = href4.slice(1);
          } else {
            href4 = href4.slice(1, -1);
          }
        }
        return outputLink(cap, {
          href: href4 ? href4.replace(this.rules.inline._escapes, "$1") : href4,
          title: title5 ? title5.replace(this.rules.inline._escapes, "$1") : title5
        }, cap[0], this.lexer);
      }
    }
    reflink(src9, links) {
      let cap;
      if ((cap = this.rules.inline.reflink.exec(src9)) || (cap = this.rules.inline.nolink.exec(src9))) {
        let link2 = (cap[2] || cap[1]).replace(/\s+/g, " ");
        link2 = links[link2.toLowerCase()];
        if (!link2 || !link2.href) {
          const text7 = cap[0].charAt(0);
          return {
            type: "text",
            raw: text7,
            text: text7
          };
        }
        return outputLink(cap, link2, cap[0], this.lexer);
      }
    }
    emStrong(src9, maskedSrc, prevChar = "") {
      let match6 = this.rules.inline.emStrong.lDelim.exec(src9);
      if (!match6)
        return;
      if (match6[3] && prevChar.match(/[\p{L}\p{N}]/u))
        return;
      const nextChar = match6[1] || match6[2] || "";
      if (!nextChar || nextChar && (prevChar === "" || this.rules.inline.punctuation.exec(prevChar))) {
        const lLength = match6[0].length - 1;
        let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;
        const endReg = match6[0][0] === "*" ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
        endReg.lastIndex = 0;
        maskedSrc = maskedSrc.slice(-1 * src9.length + lLength);
        while ((match6 = endReg.exec(maskedSrc)) != null) {
          rDelim = match6[1] || match6[2] || match6[3] || match6[4] || match6[5] || match6[6];
          if (!rDelim)
            continue;
          rLength = rDelim.length;
          if (match6[3] || match6[4]) {
            delimTotal += rLength;
            continue;
          } else if (match6[5] || match6[6]) {
            if (lLength % 3 && !((lLength + rLength) % 3)) {
              midDelimTotal += rLength;
              continue;
            }
          }
          delimTotal -= rLength;
          if (delimTotal > 0)
            continue;
          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
          if (Math.min(lLength, rLength) % 2) {
            const text8 = src9.slice(1, lLength + match6.index + rLength);
            return {
              type: "em",
              raw: src9.slice(0, lLength + match6.index + rLength + 1),
              text: text8,
              tokens: this.lexer.inlineTokens(text8, [])
            };
          }
          const text7 = src9.slice(2, lLength + match6.index + rLength - 1);
          return {
            type: "strong",
            raw: src9.slice(0, lLength + match6.index + rLength + 1),
            text: text7,
            tokens: this.lexer.inlineTokens(text7, [])
          };
        }
      }
    }
    codespan(src9) {
      const cap = this.rules.inline.code.exec(src9);
      if (cap) {
        let text7 = cap[2].replace(/\n/g, " ");
        const hasNonSpaceChars = /[^ ]/.test(text7);
        const hasSpaceCharsOnBothEnds = /^ /.test(text7) && / $/.test(text7);
        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
          text7 = text7.substring(1, text7.length - 1);
        }
        text7 = escape(text7, true);
        return {
          type: "codespan",
          raw: cap[0],
          text: text7
        };
      }
    }
    br(src9) {
      const cap = this.rules.inline.br.exec(src9);
      if (cap) {
        return {
          type: "br",
          raw: cap[0]
        };
      }
    }
    del(src9) {
      const cap = this.rules.inline.del.exec(src9);
      if (cap) {
        return {
          type: "del",
          raw: cap[0],
          text: cap[2],
          tokens: this.lexer.inlineTokens(cap[2], [])
        };
      }
    }
    autolink(src9, mangle2) {
      const cap = this.rules.inline.autolink.exec(src9);
      if (cap) {
        let text7, href4;
        if (cap[2] === "@") {
          text7 = escape(this.options.mangle ? mangle2(cap[1]) : cap[1]);
          href4 = "mailto:" + text7;
        } else {
          text7 = escape(cap[1]);
          href4 = text7;
        }
        return {
          type: "link",
          raw: cap[0],
          text: text7,
          href: href4,
          tokens: [
            {
              type: "text",
              raw: text7,
              text: text7
            }
          ]
        };
      }
    }
    url(src9, mangle2) {
      let cap;
      if (cap = this.rules.inline.url.exec(src9)) {
        let text7, href4;
        if (cap[2] === "@") {
          text7 = escape(this.options.mangle ? mangle2(cap[0]) : cap[0]);
          href4 = "mailto:" + text7;
        } else {
          let prevCapZero;
          do {
            prevCapZero = cap[0];
            cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
          } while (prevCapZero !== cap[0]);
          text7 = escape(cap[0]);
          if (cap[1] === "www.") {
            href4 = "http://" + text7;
          } else {
            href4 = text7;
          }
        }
        return {
          type: "link",
          raw: cap[0],
          text: text7,
          href: href4,
          tokens: [
            {
              type: "text",
              raw: text7,
              text: text7
            }
          ]
        };
      }
    }
    inlineText(src9, smartypants2) {
      const cap = this.rules.inline.text.exec(src9);
      if (cap) {
        let text7;
        if (this.lexer.state.inRawBlock) {
          text7 = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
        } else {
          text7 = escape(this.options.smartypants ? smartypants2(cap[0]) : cap[0]);
        }
        return {
          type: "text",
          raw: cap[0],
          text: text7
        };
      }
    }
  };
  var block2 = {
    newline: /^(?: *(?:\n|$))+/,
    code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
    fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
    hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
    heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
    blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
    list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
    html: "^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$))",
    def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
    table: noopTest,
    lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
    _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
    text: /^[^\n]+/
  };
  block2._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
  block2._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
  block2.def = edit(block2.def).replace("label", block2._label).replace("title", block2._title).getRegex();
  block2.bullet = /(?:[*+-]|\d{1,9}[.)])/;
  block2.listItemStart = edit(/^( *)(bull) */).replace("bull", block2.bullet).getRegex();
  block2.list = edit(block2.list).replace(/bull/g, block2.bullet).replace("hr", "\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def", "\\n+(?=" + block2.def.source + ")").getRegex();
  block2._tag = "address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul";
  block2._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
  block2.html = edit(block2.html, "i").replace("comment", block2._comment).replace("tag", block2._tag).replace("attribute", / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
  block2.paragraph = edit(block2._paragraph).replace("hr", block2.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("|table", "").replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block2._tag).getRegex();
  block2.blockquote = edit(block2.blockquote).replace("paragraph", block2.paragraph).getRegex();
  block2.normal = merge6({}, block2);
  block2.gfm = merge6({}, block2.normal, {
    table: "^ *([^\\n ].*\\|.*)\\n {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)"
  });
  block2.gfm.table = edit(block2.gfm.table).replace("hr", block2.hr).replace("heading", " {0,3}#{1,6} ").replace("blockquote", " {0,3}>").replace("code", " {4}[^\\n]").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block2._tag).getRegex();
  block2.gfm.paragraph = edit(block2._paragraph).replace("hr", block2.hr).replace("heading", " {0,3}#{1,6} ").replace("|lheading", "").replace("table", block2.gfm.table).replace("blockquote", " {0,3}>").replace("fences", " {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list", " {0,3}(?:[*+-]|1[.)]) ").replace("html", "</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag", block2._tag).getRegex();
  block2.pedantic = merge6({}, block2.normal, {
    html: edit(`^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:"[^"]*"|'[^']*'|\\s[^'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))`).replace("comment", block2._comment).replace(/tag/g, "(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),
    def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
    heading: /^(#{1,6})(.*)(?:\n+|$)/,
    fences: noopTest,
    paragraph: edit(block2.normal._paragraph).replace("hr", block2.hr).replace("heading", " *#{1,6} *[^\n]").replace("lheading", block2.lheading).replace("blockquote", " {0,3}>").replace("|fences", "").replace("|list", "").replace("|html", "").getRegex()
  });
  var inline = {
    escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
    autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
    url: noopTest,
    tag: "^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>",
    link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
    reflink: /^!?\[(label)\]\[(ref)\]/,
    nolink: /^!?\[(ref)\](?:\[\])?/,
    reflinkSearch: "reflink|nolink(?!\\()",
    emStrong: {
      lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
      rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
      rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/
    },
    code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
    br: /^( {2,}|\\)\n(?!\s*$)/,
    del: noopTest,
    text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
    punctuation: /^([\spunctuation])/
  };
  inline._punctuation = "!\"#$%&'()+\\-.,/:;<=>?@\\[\\]`^{|}~";
  inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();
  inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
  inline.escapedEmSt = /\\\*|\\_/g;
  inline._comment = edit(block2._comment).replace("(?:-->|$)", "-->").getRegex();
  inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, "g").replace(/punct/g, inline._punctuation).getRegex();
  inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, "g").replace(/punct/g, inline._punctuation).getRegex();
  inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
  inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
  inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
  inline.autolink = edit(inline.autolink).replace("scheme", inline._scheme).replace("email", inline._email).getRegex();
  inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
  inline.tag = edit(inline.tag).replace("comment", inline._comment).replace("attribute", inline._attribute).getRegex();
  inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
  inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
  inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
  inline.link = edit(inline.link).replace("label", inline._label).replace("href", inline._href).replace("title", inline._title).getRegex();
  inline.reflink = edit(inline.reflink).replace("label", inline._label).replace("ref", block2._label).getRegex();
  inline.nolink = edit(inline.nolink).replace("ref", block2._label).getRegex();
  inline.reflinkSearch = edit(inline.reflinkSearch, "g").replace("reflink", inline.reflink).replace("nolink", inline.nolink).getRegex();
  inline.normal = merge6({}, inline);
  inline.pedantic = merge6({}, inline.normal, {
    strong: {
      start: /^__|\*\*/,
      middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
      endAst: /\*\*(?!\*)/g,
      endUnd: /__(?!_)/g
    },
    em: {
      start: /^_|\*/,
      middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
      endAst: /\*(?!\*)/g,
      endUnd: /_(?!_)/g
    },
    link: edit(/^!?\[(label)\]\((.*?)\)/).replace("label", inline._label).getRegex(),
    reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label", inline._label).getRegex()
  });
  inline.gfm = merge6({}, inline.normal, {
    escape: edit(inline.escape).replace("])", "~|])").getRegex(),
    _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
    url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
    _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
    del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
    text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
  });
  inline.gfm.url = edit(inline.gfm.url, "i").replace("email", inline.gfm._extended_email).getRegex();
  inline.breaks = merge6({}, inline.gfm, {
    br: edit(inline.br).replace("{2,}", "*").getRegex(),
    text: edit(inline.gfm.text).replace("\\b_", "\\b_| {2,}\\n").replace(/\{2,\}/g, "*").getRegex()
  });
  function smartypants(text7) {
    return text7.replace(/---/g, "\u2014").replace(/--/g, "\u2013").replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018").replace(/'/g, "\u2019").replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C").replace(/"/g, "\u201D").replace(/\.{3}/g, "\u2026");
  }
  function mangle(text7) {
    let out = "", i7, ch2;
    const l2 = text7.length;
    for (i7 = 0; i7 < l2; i7++) {
      ch2 = text7.charCodeAt(i7);
      if (Math.random() > 0.5) {
        ch2 = "x" + ch2.toString(16);
      }
      out += "&#" + ch2 + ";";
    }
    return out;
  }
  var Lexer = class {
    constructor(options3) {
      this.tokens = [];
      this.tokens.links = /* @__PURE__ */ Object.create(null);
      this.options = options3 || defaults;
      this.options.tokenizer = this.options.tokenizer || new Tokenizer();
      this.tokenizer = this.options.tokenizer;
      this.tokenizer.options = this.options;
      this.tokenizer.lexer = this;
      this.inlineQueue = [];
      this.state = {
        inLink: false,
        inRawBlock: false,
        top: true
      };
      const rules2 = {
        block: block2.normal,
        inline: inline.normal
      };
      if (this.options.pedantic) {
        rules2.block = block2.pedantic;
        rules2.inline = inline.pedantic;
      } else if (this.options.gfm) {
        rules2.block = block2.gfm;
        if (this.options.breaks) {
          rules2.inline = inline.breaks;
        } else {
          rules2.inline = inline.gfm;
        }
      }
      this.tokenizer.rules = rules2;
    }
    static get rules() {
      return {
        block: block2,
        inline
      };
    }
    static lex(src9, options3) {
      const lexer2 = new Lexer(options3);
      return lexer2.lex(src9);
    }
    static lexInline(src9, options3) {
      const lexer2 = new Lexer(options3);
      return lexer2.inlineTokens(src9);
    }
    lex(src9) {
      src9 = src9.replace(/\r\n|\r/g, "\n");
      this.blockTokens(src9, this.tokens);
      let next2;
      while (next2 = this.inlineQueue.shift()) {
        this.inlineTokens(next2.src, next2.tokens);
      }
      return this.tokens;
    }
    blockTokens(src9, tokens = []) {
      if (this.options.pedantic) {
        src9 = src9.replace(/\t/g, "    ").replace(/^ +$/gm, "");
      } else {
        src9 = src9.replace(/^( *)(\t+)/gm, (_2, leading, tabs) => {
          return leading + "    ".repeat(tabs.length);
        });
      }
      let token2, lastToken, cutSrc, lastParagraphClipped;
      while (src9) {
        if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some((extTokenizer) => {
          if (token2 = extTokenizer.call({ lexer: this }, src9, tokens)) {
            src9 = src9.substring(token2.raw.length);
            tokens.push(token2);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token2 = this.tokenizer.space(src9)) {
          src9 = src9.substring(token2.raw.length);
          if (token2.raw.length === 1 && tokens.length > 0) {
            tokens[tokens.length - 1].raw += "\n";
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (token2 = this.tokenizer.code(src9)) {
          src9 = src9.substring(token2.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token2.raw;
            lastToken.text += "\n" + token2.text;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (token2 = this.tokenizer.fences(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.heading(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.hr(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.blockquote(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.list(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.html(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.def(src9)) {
          src9 = src9.substring(token2.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && (lastToken.type === "paragraph" || lastToken.type === "text")) {
            lastToken.raw += "\n" + token2.raw;
            lastToken.text += "\n" + token2.raw;
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else if (!this.tokens.links[token2.tag]) {
            this.tokens.links[token2.tag] = {
              href: token2.href,
              title: token2.title
            };
          }
          continue;
        }
        if (token2 = this.tokenizer.table(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.lheading(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        cutSrc = src9;
        if (this.options.extensions && this.options.extensions.startBlock) {
          let startIndex = Infinity;
          const tempSrc = src9.slice(1);
          let tempStart;
          this.options.extensions.startBlock.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src9.substring(0, startIndex + 1);
          }
        }
        if (this.state.top && (token2 = this.tokenizer.paragraph(cutSrc))) {
          lastToken = tokens[tokens.length - 1];
          if (lastParagraphClipped && lastToken.type === "paragraph") {
            lastToken.raw += "\n" + token2.raw;
            lastToken.text += "\n" + token2.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token2);
          }
          lastParagraphClipped = cutSrc.length !== src9.length;
          src9 = src9.substring(token2.raw.length);
          continue;
        }
        if (token2 = this.tokenizer.text(src9)) {
          src9 = src9.substring(token2.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += "\n" + token2.raw;
            lastToken.text += "\n" + token2.text;
            this.inlineQueue.pop();
            this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (src9) {
          const errMsg = "Infinite loop on byte: " + src9.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      this.state.top = true;
      return tokens;
    }
    inline(src9, tokens) {
      this.inlineQueue.push({ src: src9, tokens });
    }
    inlineTokens(src9, tokens = []) {
      let token2, lastToken, cutSrc;
      let maskedSrc = src9;
      let match6;
      let keepPrevChar, prevChar;
      if (this.tokens.links) {
        const links = Object.keys(this.tokens.links);
        if (links.length > 0) {
          while ((match6 = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
            if (links.includes(match6[0].slice(match6[0].lastIndexOf("[") + 1, -1))) {
              maskedSrc = maskedSrc.slice(0, match6.index) + "[" + repeatString("a", match6[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
            }
          }
        }
      }
      while ((match6 = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match6.index) + "[" + repeatString("a", match6[0].length - 2) + "]" + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
      }
      while ((match6 = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
        maskedSrc = maskedSrc.slice(0, match6.index) + "++" + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      }
      while (src9) {
        if (!keepPrevChar) {
          prevChar = "";
        }
        keepPrevChar = false;
        if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some((extTokenizer) => {
          if (token2 = extTokenizer.call({ lexer: this }, src9, tokens)) {
            src9 = src9.substring(token2.raw.length);
            tokens.push(token2);
            return true;
          }
          return false;
        })) {
          continue;
        }
        if (token2 = this.tokenizer.escape(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.tag(src9)) {
          src9 = src9.substring(token2.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token2.type === "text" && lastToken.type === "text") {
            lastToken.raw += token2.raw;
            lastToken.text += token2.text;
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (token2 = this.tokenizer.link(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.reflink(src9, this.tokens.links)) {
          src9 = src9.substring(token2.raw.length);
          lastToken = tokens[tokens.length - 1];
          if (lastToken && token2.type === "text" && lastToken.type === "text") {
            lastToken.raw += token2.raw;
            lastToken.text += token2.text;
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (token2 = this.tokenizer.emStrong(src9, maskedSrc, prevChar)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.codespan(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.br(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.del(src9)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (token2 = this.tokenizer.autolink(src9, mangle)) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        if (!this.state.inLink && (token2 = this.tokenizer.url(src9, mangle))) {
          src9 = src9.substring(token2.raw.length);
          tokens.push(token2);
          continue;
        }
        cutSrc = src9;
        if (this.options.extensions && this.options.extensions.startInline) {
          let startIndex = Infinity;
          const tempSrc = src9.slice(1);
          let tempStart;
          this.options.extensions.startInline.forEach(function(getStartIndex) {
            tempStart = getStartIndex.call({ lexer: this }, tempSrc);
            if (typeof tempStart === "number" && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });
          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src9.substring(0, startIndex + 1);
          }
        }
        if (token2 = this.tokenizer.inlineText(cutSrc, smartypants)) {
          src9 = src9.substring(token2.raw.length);
          if (token2.raw.slice(-1) !== "_") {
            prevChar = token2.raw.slice(-1);
          }
          keepPrevChar = true;
          lastToken = tokens[tokens.length - 1];
          if (lastToken && lastToken.type === "text") {
            lastToken.raw += token2.raw;
            lastToken.text += token2.text;
          } else {
            tokens.push(token2);
          }
          continue;
        }
        if (src9) {
          const errMsg = "Infinite loop on byte: " + src9.charCodeAt(0);
          if (this.options.silent) {
            console.error(errMsg);
            break;
          } else {
            throw new Error(errMsg);
          }
        }
      }
      return tokens;
    }
  };
  var Renderer = class {
    constructor(options3) {
      this.options = options3 || defaults;
    }
    code(code3, infostring, escaped) {
      const lang2 = (infostring || "").match(/\S*/)[0];
      if (this.options.highlight) {
        const out = this.options.highlight(code3, lang2);
        if (out != null && out !== code3) {
          escaped = true;
          code3 = out;
        }
      }
      code3 = code3.replace(/\n$/, "") + "\n";
      if (!lang2) {
        return "<pre><code>" + (escaped ? code3 : escape(code3, true)) + "</code></pre>\n";
      }
      return '<pre><code class="' + this.options.langPrefix + escape(lang2, true) + '">' + (escaped ? code3 : escape(code3, true)) + "</code></pre>\n";
    }
    blockquote(quote) {
      return `<blockquote>
${quote}</blockquote>
`;
    }
    html(html3) {
      return html3;
    }
    heading(text7, level, raw, slugger) {
      if (this.options.headerIds) {
        const id5 = this.options.headerPrefix + slugger.slug(raw);
        return `<h${level} id="${id5}">${text7}</h${level}>
`;
      }
      return `<h${level}>${text7}</h${level}>
`;
    }
    hr() {
      return this.options.xhtml ? "<hr/>\n" : "<hr>\n";
    }
    list(body2, ordered, start2) {
      const type = ordered ? "ol" : "ul", startatt = ordered && start2 !== 1 ? ' start="' + start2 + '"' : "";
      return "<" + type + startatt + ">\n" + body2 + "</" + type + ">\n";
    }
    listitem(text7) {
      return `<li>${text7}</li>
`;
    }
    checkbox(checked2) {
      return "<input " + (checked2 ? 'checked="" ' : "") + 'disabled="" type="checkbox"' + (this.options.xhtml ? " /" : "") + "> ";
    }
    paragraph(text7) {
      return `<p>${text7}</p>
`;
    }
    table(header3, body2) {
      if (body2)
        body2 = `<tbody>${body2}</tbody>`;
      return "<table>\n<thead>\n" + header3 + "</thead>\n" + body2 + "</table>\n";
    }
    tablerow(content3) {
      return `<tr>
${content3}</tr>
`;
    }
    tablecell(content3, flags) {
      const type = flags.header ? "th" : "td";
      const tag2 = flags.align ? `<${type} align="${flags.align}">` : `<${type}>`;
      return tag2 + content3 + `</${type}>
`;
    }
    strong(text7) {
      return `<strong>${text7}</strong>`;
    }
    em(text7) {
      return `<em>${text7}</em>`;
    }
    codespan(text7) {
      return `<code>${text7}</code>`;
    }
    br() {
      return this.options.xhtml ? "<br/>" : "<br>";
    }
    del(text7) {
      return `<del>${text7}</del>`;
    }
    link(href4, title5, text7) {
      href4 = cleanUrl(this.options.sanitize, this.options.baseUrl, href4);
      if (href4 === null) {
        return text7;
      }
      let out = '<a href="' + escape(href4) + '"';
      if (title5) {
        out += ' title="' + title5 + '"';
      }
      out += ">" + text7 + "</a>";
      return out;
    }
    image(href4, title5, text7) {
      href4 = cleanUrl(this.options.sanitize, this.options.baseUrl, href4);
      if (href4 === null) {
        return text7;
      }
      let out = `<img src="${href4}" alt="${text7}"`;
      if (title5) {
        out += ` title="${title5}"`;
      }
      out += this.options.xhtml ? "/>" : ">";
      return out;
    }
    text(text7) {
      return text7;
    }
  };
  var TextRenderer = class {
    strong(text7) {
      return text7;
    }
    em(text7) {
      return text7;
    }
    codespan(text7) {
      return text7;
    }
    del(text7) {
      return text7;
    }
    html(text7) {
      return text7;
    }
    text(text7) {
      return text7;
    }
    link(href4, title5, text7) {
      return "" + text7;
    }
    image(href4, title5, text7) {
      return "" + text7;
    }
    br() {
      return "";
    }
  };
  var Slugger = class {
    constructor() {
      this.seen = {};
    }
    serialize(value12) {
      return value12.toLowerCase().trim().replace(/<[!\/a-z].*?>/ig, "").replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, "").replace(/\s/g, "-");
    }
    getNextSafeSlug(originalSlug, isDryRun) {
      let slug = originalSlug;
      let occurenceAccumulator = 0;
      if (this.seen.hasOwnProperty(slug)) {
        occurenceAccumulator = this.seen[originalSlug];
        do {
          occurenceAccumulator++;
          slug = originalSlug + "-" + occurenceAccumulator;
        } while (this.seen.hasOwnProperty(slug));
      }
      if (!isDryRun) {
        this.seen[originalSlug] = occurenceAccumulator;
        this.seen[slug] = 0;
      }
      return slug;
    }
    slug(value12, options3 = {}) {
      const slug = this.serialize(value12);
      return this.getNextSafeSlug(slug, options3.dryrun);
    }
  };
  var Parser2 = class {
    constructor(options3) {
      this.options = options3 || defaults;
      this.options.renderer = this.options.renderer || new Renderer();
      this.renderer = this.options.renderer;
      this.renderer.options = this.options;
      this.textRenderer = new TextRenderer();
      this.slugger = new Slugger();
    }
    static parse(tokens, options3) {
      const parser2 = new Parser2(options3);
      return parser2.parse(tokens);
    }
    static parseInline(tokens, options3) {
      const parser2 = new Parser2(options3);
      return parser2.parseInline(tokens);
    }
    parse(tokens, top6 = true) {
      let out = "", i7, j2, k2, l2, l3, row2, cell, header3, body2, token2, ordered, start2, loose, itemBody, item, checked2, task, checkbox, ret;
      const l4 = tokens.length;
      for (i7 = 0; i7 < l4; i7++) {
        token2 = tokens[i7];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token2.type]) {
          ret = this.options.extensions.renderers[token2.type].call({ parser: this }, token2);
          if (ret !== false || !["space", "hr", "heading", "code", "table", "blockquote", "list", "html", "paragraph", "text"].includes(token2.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token2.type) {
          case "space": {
            continue;
          }
          case "hr": {
            out += this.renderer.hr();
            continue;
          }
          case "heading": {
            out += this.renderer.heading(this.parseInline(token2.tokens), token2.depth, unescape(this.parseInline(token2.tokens, this.textRenderer)), this.slugger);
            continue;
          }
          case "code": {
            out += this.renderer.code(token2.text, token2.lang, token2.escaped);
            continue;
          }
          case "table": {
            header3 = "";
            cell = "";
            l2 = token2.header.length;
            for (j2 = 0; j2 < l2; j2++) {
              cell += this.renderer.tablecell(this.parseInline(token2.header[j2].tokens), { header: true, align: token2.align[j2] });
            }
            header3 += this.renderer.tablerow(cell);
            body2 = "";
            l2 = token2.rows.length;
            for (j2 = 0; j2 < l2; j2++) {
              row2 = token2.rows[j2];
              cell = "";
              l3 = row2.length;
              for (k2 = 0; k2 < l3; k2++) {
                cell += this.renderer.tablecell(this.parseInline(row2[k2].tokens), { header: false, align: token2.align[k2] });
              }
              body2 += this.renderer.tablerow(cell);
            }
            out += this.renderer.table(header3, body2);
            continue;
          }
          case "blockquote": {
            body2 = this.parse(token2.tokens);
            out += this.renderer.blockquote(body2);
            continue;
          }
          case "list": {
            ordered = token2.ordered;
            start2 = token2.start;
            loose = token2.loose;
            l2 = token2.items.length;
            body2 = "";
            for (j2 = 0; j2 < l2; j2++) {
              item = token2.items[j2];
              checked2 = item.checked;
              task = item.task;
              itemBody = "";
              if (item.task) {
                checkbox = this.renderer.checkbox(checked2);
                if (loose) {
                  if (item.tokens.length > 0 && item.tokens[0].type === "paragraph") {
                    item.tokens[0].text = checkbox + " " + item.tokens[0].text;
                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === "text") {
                      item.tokens[0].tokens[0].text = checkbox + " " + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: "text",
                      text: checkbox
                    });
                  }
                } else {
                  itemBody += checkbox;
                }
              }
              itemBody += this.parse(item.tokens, loose);
              body2 += this.renderer.listitem(itemBody, task, checked2);
            }
            out += this.renderer.list(body2, ordered, start2);
            continue;
          }
          case "html": {
            out += this.renderer.html(token2.text);
            continue;
          }
          case "paragraph": {
            out += this.renderer.paragraph(this.parseInline(token2.tokens));
            continue;
          }
          case "text": {
            body2 = token2.tokens ? this.parseInline(token2.tokens) : token2.text;
            while (i7 + 1 < l4 && tokens[i7 + 1].type === "text") {
              token2 = tokens[++i7];
              body2 += "\n" + (token2.tokens ? this.parseInline(token2.tokens) : token2.text);
            }
            out += top6 ? this.renderer.paragraph(body2) : body2;
            continue;
          }
          default: {
            const errMsg = 'Token with "' + token2.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
    parseInline(tokens, renderer2) {
      renderer2 = renderer2 || this.renderer;
      let out = "", i7, token2, ret;
      const l2 = tokens.length;
      for (i7 = 0; i7 < l2; i7++) {
        token2 = tokens[i7];
        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token2.type]) {
          ret = this.options.extensions.renderers[token2.type].call({ parser: this }, token2);
          if (ret !== false || !["escape", "html", "link", "image", "strong", "em", "codespan", "br", "del", "text"].includes(token2.type)) {
            out += ret || "";
            continue;
          }
        }
        switch (token2.type) {
          case "escape": {
            out += renderer2.text(token2.text);
            break;
          }
          case "html": {
            out += renderer2.html(token2.text);
            break;
          }
          case "link": {
            out += renderer2.link(token2.href, token2.title, this.parseInline(token2.tokens, renderer2));
            break;
          }
          case "image": {
            out += renderer2.image(token2.href, token2.title, token2.text);
            break;
          }
          case "strong": {
            out += renderer2.strong(this.parseInline(token2.tokens, renderer2));
            break;
          }
          case "em": {
            out += renderer2.em(this.parseInline(token2.tokens, renderer2));
            break;
          }
          case "codespan": {
            out += renderer2.codespan(token2.text);
            break;
          }
          case "br": {
            out += renderer2.br();
            break;
          }
          case "del": {
            out += renderer2.del(this.parseInline(token2.tokens, renderer2));
            break;
          }
          case "text": {
            out += renderer2.text(token2.text);
            break;
          }
          default: {
            const errMsg = 'Token with "' + token2.type + '" type was not found.';
            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
        }
      }
      return out;
    }
  };
  function marked(src9, opt, callback2) {
    if (typeof src9 === "undefined" || src9 === null) {
      throw new Error("marked(): input parameter is undefined or null");
    }
    if (typeof src9 !== "string") {
      throw new Error("marked(): input parameter is of type " + Object.prototype.toString.call(src9) + ", string expected");
    }
    if (typeof opt === "function") {
      callback2 = opt;
      opt = null;
    }
    opt = merge6({}, marked.defaults, opt || {});
    checkSanitizeDeprecation(opt);
    if (callback2) {
      const highlight = opt.highlight;
      let tokens;
      try {
        tokens = Lexer.lex(src9, opt);
      } catch (e) {
        return callback2(e);
      }
      const done = function(err) {
        let out;
        if (!err) {
          try {
            if (opt.walkTokens) {
              marked.walkTokens(tokens, opt.walkTokens);
            }
            out = Parser2.parse(tokens, opt);
          } catch (e) {
            err = e;
          }
        }
        opt.highlight = highlight;
        return err ? callback2(err) : callback2(null, out);
      };
      if (!highlight || highlight.length < 3) {
        return done();
      }
      delete opt.highlight;
      if (!tokens.length)
        return done();
      let pending = 0;
      marked.walkTokens(tokens, function(token2) {
        if (token2.type === "code") {
          pending++;
          setTimeout(() => {
            highlight(token2.text, token2.lang, function(err, code3) {
              if (err) {
                return done(err);
              }
              if (code3 != null && code3 !== token2.text) {
                token2.text = code3;
                token2.escaped = true;
              }
              pending--;
              if (pending === 0) {
                done();
              }
            });
          }, 0);
        }
      });
      if (pending === 0) {
        done();
      }
      return;
    }
    try {
      const tokens = Lexer.lex(src9, opt);
      if (opt.walkTokens) {
        marked.walkTokens(tokens, opt.walkTokens);
      }
      return Parser2.parse(tokens, opt);
    } catch (e) {
      e.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (opt.silent) {
        return "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
      }
      throw e;
    }
  }
  marked.options = marked.setOptions = function(opt) {
    merge6(marked.defaults, opt);
    changeDefaults(marked.defaults);
    return marked;
  };
  marked.getDefaults = getDefaults;
  marked.defaults = defaults;
  marked.use = function(...args) {
    const opts = merge6({}, ...args);
    const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };
    let hasExtensions;
    args.forEach((pack) => {
      if (pack.extensions) {
        hasExtensions = true;
        pack.extensions.forEach((ext) => {
          if (!ext.name) {
            throw new Error("extension name required");
          }
          if (ext.renderer) {
            const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;
            if (prevRenderer) {
              extensions.renderers[ext.name] = function(...args2) {
                let ret = ext.renderer.apply(this, args2);
                if (ret === false) {
                  ret = prevRenderer.apply(this, args2);
                }
                return ret;
              };
            } else {
              extensions.renderers[ext.name] = ext.renderer;
            }
          }
          if (ext.tokenizer) {
            if (!ext.level || ext.level !== "block" && ext.level !== "inline") {
              throw new Error("extension level must be 'block' or 'inline'");
            }
            if (extensions[ext.level]) {
              extensions[ext.level].unshift(ext.tokenizer);
            } else {
              extensions[ext.level] = [ext.tokenizer];
            }
            if (ext.start) {
              if (ext.level === "block") {
                if (extensions.startBlock) {
                  extensions.startBlock.push(ext.start);
                } else {
                  extensions.startBlock = [ext.start];
                }
              } else if (ext.level === "inline") {
                if (extensions.startInline) {
                  extensions.startInline.push(ext.start);
                } else {
                  extensions.startInline = [ext.start];
                }
              }
            }
          }
          if (ext.childTokens) {
            extensions.childTokens[ext.name] = ext.childTokens;
          }
        });
      }
      if (pack.renderer) {
        const renderer2 = marked.defaults.renderer || new Renderer();
        for (const prop3 in pack.renderer) {
          const prevRenderer = renderer2[prop3];
          renderer2[prop3] = (...args2) => {
            let ret = pack.renderer[prop3].apply(renderer2, args2);
            if (ret === false) {
              ret = prevRenderer.apply(renderer2, args2);
            }
            return ret;
          };
        }
        opts.renderer = renderer2;
      }
      if (pack.tokenizer) {
        const tokenizer = marked.defaults.tokenizer || new Tokenizer();
        for (const prop3 in pack.tokenizer) {
          const prevTokenizer = tokenizer[prop3];
          tokenizer[prop3] = (...args2) => {
            let ret = pack.tokenizer[prop3].apply(tokenizer, args2);
            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args2);
            }
            return ret;
          };
        }
        opts.tokenizer = tokenizer;
      }
      if (pack.walkTokens) {
        const walkTokens2 = marked.defaults.walkTokens;
        opts.walkTokens = function(token2) {
          pack.walkTokens.call(this, token2);
          if (walkTokens2) {
            walkTokens2.call(this, token2);
          }
        };
      }
      if (hasExtensions) {
        opts.extensions = extensions;
      }
      marked.setOptions(opts);
    });
  };
  marked.walkTokens = function(tokens, callback2) {
    for (const token2 of tokens) {
      callback2.call(marked, token2);
      switch (token2.type) {
        case "table": {
          for (const cell of token2.header) {
            marked.walkTokens(cell.tokens, callback2);
          }
          for (const row2 of token2.rows) {
            for (const cell of row2) {
              marked.walkTokens(cell.tokens, callback2);
            }
          }
          break;
        }
        case "list": {
          marked.walkTokens(token2.items, callback2);
          break;
        }
        default: {
          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token2.type]) {
            marked.defaults.extensions.childTokens[token2.type].forEach(function(childTokens) {
              marked.walkTokens(token2[childTokens], callback2);
            });
          } else if (token2.tokens) {
            marked.walkTokens(token2.tokens, callback2);
          }
        }
      }
    }
  };
  marked.parseInline = function(src9, opt) {
    if (typeof src9 === "undefined" || src9 === null) {
      throw new Error("marked.parseInline(): input parameter is undefined or null");
    }
    if (typeof src9 !== "string") {
      throw new Error("marked.parseInline(): input parameter is of type " + Object.prototype.toString.call(src9) + ", string expected");
    }
    opt = merge6({}, marked.defaults, opt || {});
    checkSanitizeDeprecation(opt);
    try {
      const tokens = Lexer.lexInline(src9, opt);
      if (opt.walkTokens) {
        marked.walkTokens(tokens, opt.walkTokens);
      }
      return Parser2.parseInline(tokens, opt);
    } catch (e) {
      e.message += "\nPlease report this to https://github.com/markedjs/marked.";
      if (opt.silent) {
        return "<p>An error occurred:</p><pre>" + escape(e.message + "", true) + "</pre>";
      }
      throw e;
    }
  };
  marked.Parser = Parser2;
  marked.parser = Parser2.parse;
  marked.Renderer = Renderer;
  marked.TextRenderer = TextRenderer;
  marked.Lexer = Lexer;
  marked.lexer = Lexer.lex;
  marked.Tokenizer = Tokenizer;
  marked.Slugger = Slugger;
  marked.parse = marked;
  var options2 = marked.options;
  var setOptions = marked.setOptions;
  var use = marked.use;
  var walkTokens = marked.walkTokens;
  var parseInline = marked.parseInline;
  var parser = Parser2.parse;
  var lexer = Lexer.lex;

  // output/Markdown/foreign.js
  var import_dompurify = __toESM(require_purify(), 1);

  // node_modules/highlight.js/es/core.js
  var import_core2 = __toESM(require_core(), 1);
  var core_default = import_core2.default;

  // node_modules/highlight.js/es/languages/javascript.js
  var IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
  var KEYWORDS = [
    "as",
    "in",
    "of",
    "if",
    "for",
    "while",
    "finally",
    "var",
    "new",
    "function",
    "do",
    "return",
    "void",
    "else",
    "break",
    "catch",
    "instanceof",
    "with",
    "throw",
    "case",
    "default",
    "try",
    "switch",
    "continue",
    "typeof",
    "delete",
    "let",
    "yield",
    "const",
    "class",
    "debugger",
    "async",
    "await",
    "static",
    "import",
    "from",
    "export",
    "extends"
  ];
  var LITERALS = [
    "true",
    "false",
    "null",
    "undefined",
    "NaN",
    "Infinity"
  ];
  var TYPES = [
    "Object",
    "Function",
    "Boolean",
    "Symbol",
    "Math",
    "Date",
    "Number",
    "BigInt",
    "String",
    "RegExp",
    "Array",
    "Float32Array",
    "Float64Array",
    "Int8Array",
    "Uint8Array",
    "Uint8ClampedArray",
    "Int16Array",
    "Int32Array",
    "Uint16Array",
    "Uint32Array",
    "BigInt64Array",
    "BigUint64Array",
    "Set",
    "Map",
    "WeakSet",
    "WeakMap",
    "ArrayBuffer",
    "SharedArrayBuffer",
    "Atomics",
    "DataView",
    "JSON",
    "Promise",
    "Generator",
    "GeneratorFunction",
    "AsyncFunction",
    "Reflect",
    "Proxy",
    "Intl",
    "WebAssembly"
  ];
  var ERROR_TYPES = [
    "Error",
    "EvalError",
    "InternalError",
    "RangeError",
    "ReferenceError",
    "SyntaxError",
    "TypeError",
    "URIError"
  ];
  var BUILT_IN_GLOBALS = [
    "setInterval",
    "setTimeout",
    "clearInterval",
    "clearTimeout",
    "require",
    "exports",
    "eval",
    "isFinite",
    "isNaN",
    "parseFloat",
    "parseInt",
    "decodeURI",
    "decodeURIComponent",
    "encodeURI",
    "encodeURIComponent",
    "escape",
    "unescape"
  ];
  var BUILT_IN_VARIABLES = [
    "arguments",
    "this",
    "super",
    "console",
    "window",
    "document",
    "localStorage",
    "module",
    "global"
  ];
  var BUILT_INS = [].concat(BUILT_IN_GLOBALS, TYPES, ERROR_TYPES);
  function javascript(hljs) {
    const regex2 = hljs.regex;
    const hasClosingTag = (match6, { after }) => {
      const tag2 = "</" + match6[0].slice(1);
      const pos = match6.input.indexOf(tag2, after);
      return pos !== -1;
    };
    const IDENT_RE$1 = IDENT_RE;
    const FRAGMENT = {
      begin: "<>",
      end: "</>"
    };
    const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
    const XML_TAG = {
      begin: /<[A-Za-z0-9\\._:-]+/,
      end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
      isTrulyOpeningTag: (match6, response) => {
        const afterMatchIndex = match6[0].length + match6.index;
        const nextChar = match6.input[afterMatchIndex];
        if (nextChar === "<" || nextChar === ",") {
          response.ignoreMatch();
          return;
        }
        if (nextChar === ">") {
          if (!hasClosingTag(match6, { after: afterMatchIndex })) {
            response.ignoreMatch();
          }
        }
        let m2;
        const afterMatch = match6.input.substr(afterMatchIndex);
        if (m2 = afterMatch.match(/^\s+extends\s+/)) {
          if (m2.index === 0) {
            response.ignoreMatch();
            return;
          }
        }
      }
    };
    const KEYWORDS$1 = {
      $pattern: IDENT_RE,
      keyword: KEYWORDS,
      literal: LITERALS,
      built_in: BUILT_INS,
      "variable.language": BUILT_IN_VARIABLES
    };
    const decimalDigits = "[0-9](_?[0-9])*";
    const frac = `\\.(${decimalDigits})`;
    const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
    const NUMBER = {
      className: "number",
      variants: [
        { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})\\b` },
        { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
        { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
        { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
        { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
        { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
        { begin: "\\b0[0-7]+n?\\b" }
      ],
      relevance: 0
    };
    const SUBST = {
      className: "subst",
      begin: "\\$\\{",
      end: "\\}",
      keywords: KEYWORDS$1,
      contains: []
    };
    const HTML_TEMPLATE = {
      begin: "html`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "xml"
      }
    };
    const CSS_TEMPLATE = {
      begin: "css`",
      end: "",
      starts: {
        end: "`",
        returnEnd: false,
        contains: [
          hljs.BACKSLASH_ESCAPE,
          SUBST
        ],
        subLanguage: "css"
      }
    };
    const TEMPLATE_STRING = {
      className: "string",
      begin: "`",
      end: "`",
      contains: [
        hljs.BACKSLASH_ESCAPE,
        SUBST
      ]
    };
    const JSDOC_COMMENT = hljs.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
      relevance: 0,
      contains: [
        {
          begin: "(?=@[A-Za-z]+)",
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            },
            {
              className: "type",
              begin: "\\{",
              end: "\\}",
              excludeEnd: true,
              excludeBegin: true,
              relevance: 0
            },
            {
              className: "variable",
              begin: IDENT_RE$1 + "(?=\\s*(-)|$)",
              endsParent: true,
              relevance: 0
            },
            {
              begin: /(?=[^\n])\s/,
              relevance: 0
            }
          ]
        }
      ]
    });
    const COMMENT2 = {
      className: "comment",
      variants: [
        JSDOC_COMMENT,
        hljs.C_BLOCK_COMMENT_MODE,
        hljs.C_LINE_COMMENT_MODE
      ]
    };
    const SUBST_INTERNALS = [
      hljs.APOS_STRING_MODE,
      hljs.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      TEMPLATE_STRING,
      NUMBER
    ];
    SUBST.contains = SUBST_INTERNALS.concat({
      begin: /\{/,
      end: /\}/,
      keywords: KEYWORDS$1,
      contains: [
        "self"
      ].concat(SUBST_INTERNALS)
    });
    const SUBST_AND_COMMENTS = [].concat(COMMENT2, SUBST.contains);
    const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS$1,
        contains: ["self"].concat(SUBST_AND_COMMENTS)
      }
    ]);
    const PARAMS = {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      keywords: KEYWORDS$1,
      contains: PARAMS_CONTAINS
    };
    const CLASS_OR_EXTENDS = {
      variants: [
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1,
            /\s+/,
            /extends/,
            /\s+/,
            regex2.concat(IDENT_RE$1, "(", regex2.concat(/\./, IDENT_RE$1), ")*")
          ],
          scope: {
            1: "keyword",
            3: "title.class",
            5: "keyword",
            7: "title.class.inherited"
          }
        },
        {
          match: [
            /class/,
            /\s+/,
            IDENT_RE$1
          ],
          scope: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    };
    const CLASS_REFERENCE = {
      relevance: 0,
      match: regex2.either(/\bJSON/, /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/, /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/, /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),
      className: "title.class",
      keywords: {
        _: [
          ...TYPES,
          ...ERROR_TYPES
        ]
      }
    };
    const USE_STRICT = {
      label: "use_strict",
      className: "meta",
      relevance: 10,
      begin: /^\s*['"]use (strict|asm)['"]/
    };
    const FUNCTION_DEFINITION = {
      variants: [
        {
          match: [
            /function/,
            /\s+/,
            IDENT_RE$1,
            /(?=\s*\()/
          ]
        },
        {
          match: [
            /function/,
            /\s*(?=\()/
          ]
        }
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      label: "func.def",
      contains: [PARAMS],
      illegal: /%/
    };
    const UPPER_CASE_CONSTANT = {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    };
    function noneOf(list) {
      return regex2.concat("(?!", list.join("|"), ")");
    }
    const FUNCTION_CALL = {
      match: regex2.concat(/\b/, noneOf([
        ...BUILT_IN_GLOBALS,
        "super"
      ]), IDENT_RE$1, regex2.lookahead(/\(/)),
      className: "title.function",
      relevance: 0
    };
    const PROPERTY_ACCESS = {
      begin: regex2.concat(/\./, regex2.lookahead(regex2.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/))),
      end: IDENT_RE$1,
      excludeBegin: true,
      keywords: "prototype",
      className: "property",
      relevance: 0
    };
    const GETTER_OR_SETTER = {
      match: [
        /get|set/,
        /\s+/,
        IDENT_RE$1,
        /(?=\()/
      ],
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        {
          begin: /\(\)/
        },
        PARAMS
      ]
    };
    const FUNC_LEAD_IN_RE = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs.UNDERSCORE_IDENT_RE + ")\\s*=>";
    const FUNCTION_VARIABLE = {
      match: [
        /const|var|let/,
        /\s+/,
        IDENT_RE$1,
        /\s*/,
        /=\s*/,
        /(async\s*)?/,
        regex2.lookahead(FUNC_LEAD_IN_RE)
      ],
      keywords: "async",
      className: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        PARAMS
      ]
    };
    return {
      name: "Javascript",
      aliases: ["js", "jsx", "mjs", "cjs"],
      keywords: KEYWORDS$1,
      exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
      illegal: /#(?![$_A-z])/,
      contains: [
        hljs.SHEBANG({
          label: "shebang",
          binary: "node",
          relevance: 5
        }),
        USE_STRICT,
        hljs.APOS_STRING_MODE,
        hljs.QUOTE_STRING_MODE,
        HTML_TEMPLATE,
        CSS_TEMPLATE,
        TEMPLATE_STRING,
        COMMENT2,
        NUMBER,
        CLASS_REFERENCE,
        {
          className: "attr",
          begin: IDENT_RE$1 + regex2.lookahead(":"),
          relevance: 0
        },
        FUNCTION_VARIABLE,
        {
          begin: "(" + hljs.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
          keywords: "return throw case",
          relevance: 0,
          contains: [
            COMMENT2,
            hljs.REGEXP_MODE,
            {
              className: "function",
              begin: FUNC_LEAD_IN_RE,
              returnBegin: true,
              end: "\\s*=>",
              contains: [
                {
                  className: "params",
                  variants: [
                    {
                      begin: hljs.UNDERSCORE_IDENT_RE,
                      relevance: 0
                    },
                    {
                      className: null,
                      begin: /\(\s*\)/,
                      skip: true
                    },
                    {
                      begin: /\(/,
                      end: /\)/,
                      excludeBegin: true,
                      excludeEnd: true,
                      keywords: KEYWORDS$1,
                      contains: PARAMS_CONTAINS
                    }
                  ]
                }
              ]
            },
            {
              begin: /,/,
              relevance: 0
            },
            {
              match: /\s+/,
              relevance: 0
            },
            {
              variants: [
                { begin: FRAGMENT.begin, end: FRAGMENT.end },
                { match: XML_SELF_CLOSING },
                {
                  begin: XML_TAG.begin,
                  "on:begin": XML_TAG.isTrulyOpeningTag,
                  end: XML_TAG.end
                }
              ],
              subLanguage: "xml",
              contains: [
                {
                  begin: XML_TAG.begin,
                  end: XML_TAG.end,
                  skip: true,
                  contains: ["self"]
                }
              ]
            }
          ]
        },
        FUNCTION_DEFINITION,
        {
          beginKeywords: "while if switch catch for"
        },
        {
          begin: "\\b(?!function)" + hljs.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
          returnBegin: true,
          label: "func.def",
          contains: [
            PARAMS,
            hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
          ]
        },
        {
          match: /\.\.\./,
          relevance: 0
        },
        PROPERTY_ACCESS,
        {
          match: "\\$" + IDENT_RE$1,
          relevance: 0
        },
        {
          match: [/\bconstructor(?=\s*\()/],
          className: { 1: "title.function" },
          contains: [PARAMS]
        },
        FUNCTION_CALL,
        UPPER_CASE_CONSTANT,
        CLASS_OR_EXTENDS,
        GETTER_OR_SETTER,
        {
          match: /\$[(.]/
        }
      ]
    };
  }

  // node_modules/highlight.js/es/languages/xml.js
  function xml(hljs) {
    const regex2 = hljs.regex;
    const TAG_NAME_RE = regex2.concat(/[A-Z_]/, regex2.optional(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);
    const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;
    const XML_ENTITIES = {
      className: "symbol",
      begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
    };
    const XML_META_KEYWORDS = {
      begin: /\s/,
      contains: [
        {
          className: "keyword",
          begin: /#?[a-z_][a-z1-9_-]+/,
          illegal: /\n/
        }
      ]
    };
    const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
      begin: /\(/,
      end: /\)/
    });
    const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: "string" });
    const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: "string" });
    const TAG_INTERNALS = {
      endsWithParent: true,
      illegal: /</,
      relevance: 0,
      contains: [
        {
          className: "attr",
          begin: XML_IDENT_RE,
          relevance: 0
        },
        {
          begin: /=\s*/,
          relevance: 0,
          contains: [
            {
              className: "string",
              endsParent: true,
              variants: [
                {
                  begin: /"/,
                  end: /"/,
                  contains: [XML_ENTITIES]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [XML_ENTITIES]
                },
                { begin: /[^\s"'=<>`]+/ }
              ]
            }
          ]
        }
      ]
    };
    return {
      name: "HTML, XML",
      aliases: [
        "html",
        "xhtml",
        "rss",
        "atom",
        "xjb",
        "xsd",
        "xsl",
        "plist",
        "wsf",
        "svg"
      ],
      case_insensitive: true,
      contains: [
        {
          className: "meta",
          begin: /<![a-z]/,
          end: />/,
          relevance: 10,
          contains: [
            XML_META_KEYWORDS,
            QUOTE_META_STRING_MODE,
            APOS_META_STRING_MODE,
            XML_META_PAR_KEYWORDS,
            {
              begin: /\[/,
              end: /\]/,
              contains: [
                {
                  className: "meta",
                  begin: /<![a-z]/,
                  end: />/,
                  contains: [
                    XML_META_KEYWORDS,
                    XML_META_PAR_KEYWORDS,
                    QUOTE_META_STRING_MODE,
                    APOS_META_STRING_MODE
                  ]
                }
              ]
            }
          ]
        },
        hljs.COMMENT(/<!--/, /-->/, { relevance: 10 }),
        {
          begin: /<!\[CDATA\[/,
          end: /\]\]>/,
          relevance: 10
        },
        XML_ENTITIES,
        {
          className: "meta",
          end: /\?>/,
          variants: [
            {
              begin: /<\?xml/,
              relevance: 10,
              contains: [
                QUOTE_META_STRING_MODE
              ]
            },
            {
              begin: /<\?[a-z][a-z0-9]+/
            }
          ]
        },
        {
          className: "tag",
          begin: /<style(?=\s|>)/,
          end: />/,
          keywords: { name: "style" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/style>/,
            returnEnd: true,
            subLanguage: [
              "css",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          begin: /<script(?=\s|>)/,
          end: />/,
          keywords: { name: "script" },
          contains: [TAG_INTERNALS],
          starts: {
            end: /<\/script>/,
            returnEnd: true,
            subLanguage: [
              "javascript",
              "handlebars",
              "xml"
            ]
          }
        },
        {
          className: "tag",
          begin: /<>|<\/>/
        },
        {
          className: "tag",
          begin: regex2.concat(/</, regex2.lookahead(regex2.concat(TAG_NAME_RE, regex2.either(/\/>/, />/, /\s/)))),
          end: /\/?>/,
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0,
              starts: TAG_INTERNALS
            }
          ]
        },
        {
          className: "tag",
          begin: regex2.concat(/<\//, regex2.lookahead(regex2.concat(TAG_NAME_RE, />/))),
          contains: [
            {
              className: "name",
              begin: TAG_NAME_RE,
              relevance: 0
            },
            {
              begin: />/,
              relevance: 0,
              endsParent: true
            }
          ]
        }
      ]
    };
  }

  // output/Markdown/foreign.js
  var purescript = function(hljs) {
    var COMMENT2 = {
      variants: [
        hljs.COMMENT("--", "$"),
        hljs.COMMENT("{-", "-}", {
          contains: ["self"]
        })
      ]
    };
    var ESCAPED_KEY = {
      className: "attribute",
      begin: '"',
      illegal: '"',
      end: '"',
      relevance: 0
    };
    var CONSTRUCTOR = {
      className: "type",
      begin: "\\b[A-Z][\\w']*",
      relevance: 0
    };
    var LIST = {
      begin: "\\(",
      end: "\\)",
      illegal: '"',
      contains: [
        { className: "type", begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?" },
        hljs.inherit(hljs.TITLE_MODE, { begin: "[_a-z][\\w']*" }),
        COMMENT2
      ]
    };
    var VALUE2 = {};
    var KEY_VALUE = {
      className: "attribute",
      begin: "\\w+",
      end: ",|}",
      contains: [VALUE2]
    };
    var RECORD = {
      begin: "{",
      end: "}",
      contains: [KEY_VALUE]
    };
    return {
      name: "PureScript",
      aliases: ["purs", "purescript"],
      keywords: {
        keyword: "case class data derive ado do else if import in infix infixl infixr instance let module newtype of then type where : foreign forall \u2200"
      },
      contains: [
        {
          beginKeywords: "module",
          end: "where",
          keywords: "module where",
          contains: [LIST, COMMENT2],
          illegal: "\\W\\.|;"
        },
        {
          begin: "\\bimport\\b",
          end: "$",
          keywords: "import as hiding",
          contains: [LIST, COMMENT2],
          illegal: "\\W\\.|;"
        },
        {
          className: "class",
          begin: "^(\\s*)?(class|instance)\\b",
          end: "where",
          keywords: "class instance where",
          contains: [CONSTRUCTOR, LIST, COMMENT2]
        },
        {
          className: "class",
          begin: "\\b(data|(new)?type)\\b",
          end: "$",
          keywords: "data family type newtype derive",
          contains: [CONSTRUCTOR, LIST, RECORD, COMMENT2]
        },
        {
          className: "symbol",
          begin: "=|<-|->|\\:\\:|\\\\|=>|<=|forall|\u2200|\\:|::|\u2237|{|}|\\(|\\)|\\[|\\]|,",
          invalid: "/"
        },
        {
          beginKeywords: "default",
          end: "$",
          contains: [CONSTRUCTOR, LIST, COMMENT2]
        },
        {
          beginKeywords: "infix infixl infixr",
          end: "$",
          contains: [hljs.C_NUMBER_MODE, COMMENT2]
        },
        {
          begin: "\\bforeign\\b",
          end: "$",
          keywords: "foreign import",
          contains: [CONSTRUCTOR, hljs.QUOTE_STRING_MODE, COMMENT2]
        },
        hljs.QUOTE_STRING_MODE,
        hljs.C_NUMBER_MODE,
        CONSTRUCTOR,
        hljs.inherit(hljs.TITLE_MODE, { begin: "^[_a-z][\\w']*" }),
        COMMENT2,
        { begin: "->|<-" }
      ]
    };
  };
  core_default.registerLanguage("javascript", javascript);
  core_default.registerLanguage("purescript", purescript);
  core_default.registerLanguage("html", xml);
  core_default.registerLanguage("xml", xml);
  var renderer = new marked.Renderer();
  var linkRenderer = renderer.link;
  renderer.link = (href4, title5, text7) => {
    const isLocalLink = href4.startsWith(`${location.protocol}//${location.hostname}`);
    const html3 = linkRenderer.call(renderer, href4, title5, text7);
    return html3.replace(/^<a /, `<a target="_blank" rel="noreferrer noopener nofollow" `);
  };
  var marked2 = (str2) => marked(str2, {
    renderer,
    highlight: function(code3, lang2) {
      if (lang2 === "purescript" || lang2 === "javascript" || lang2 === "js" || lang2 === "html" || lang2 == "xml") {
        return core_default.highlight(code3, { language: lang2 }).value;
      }
      return code3;
    }
  });

  // output/Markdown/index.js
  var parseMarkdown = function($1) {
    return import_dompurify.sanitize(marked2($1));
  };

  // output/UI.Repository.Style/index.js
  var append31 = /* @__PURE__ */ append(semigroupStyle);
  var css44 = /* @__PURE__ */ css2();
  var markdownStyle = /* @__PURE__ */ function() {
    return append31(css44({
      WebkitFontFeatureSettings: str('"liga" on, "calt" on'),
      WebkitFontSmoothing: str("antialiased"),
      textRendering: str("optimizeLegibility"),
      h1: nested(append31(text4xl)(append31(fontBold)(append31(textCol$prime(col2.textPaler1))(pB(24))))),
      h2: nested(append31(text2xl)(append31(fontBold)(append31(textCol$prime(col2.textPaler1))(append31(pT(28))(pB(12)))))),
      h3: nested(append31(textXl)(append31(fontSemibold)(append31(textCol$prime(col2.textPaler1))(append31(pT(24))(pB(8)))))),
      "p, li": nested(append31(textLg)(append31(fontNormal)(append31(maxWidth$prime(ch(70)))(append31(fontFamilyOrSerif("Georgia"))(textCol$prime(col2.text)))))),
      pre: nested(append31(background$prime(col2.backgroundBright1))(append31(pX(16))(append31(roundedMd)(append31(overflowXScroll)(transition2("all 0.5s ease")))))),
      code: nested(append31(background$prime(col2.backgroundBright3))(append31(pX(4))(append31(pY(1))(append31(roundedDefault)(append31(textSized(0.94)(1.5))(append31(tracking(-6e-3))(append31(border2(1))(borderCol$prime(col2.backgroundBright5))))))))),
      "pre > code": nested(append31(pX(0))(append31(border2(0))(background(transparent)))),
      a: nested(textCol$prime(col2.highlightTextOnBackground)),
      "& > * + *": nested(pY(12)),
      li: nested(css44({
        listStyleType: str("\u2192"),
        listStylePosition: str("inside")
      }))
    }))(append31(textDefault)(append31(userSelectText)(screenLg(css44({
      "p, li": nested(append31(textXl)(fontNormal))
    })))));
  }();
  var lightTheme = /* @__PURE__ */ css44({
    ".hljs": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#383a42"),
      background: /* @__PURE__ */ str("#fafafa")
    })),
    ".hljs-comment, .hljs-quote": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#a0a1a7"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-doctag, .hljs-keyword, .hljs-formula": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#a626a4")
    })),
    ".hljs-section, .hljs-name, .hljs-selector-tag, .hljs-deletion, .hljs-subst": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#e45649")
    })),
    ".hljs-literal": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#0184bb")
    })),
    ".hljs-string, .hljs-regexp, .hljs-addition, .hljs-attribute, .hljs-meta .hljs-string": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#50a14f")
    })),
    ".hljs-attr, .hljs-variable, .hljs-template-variable, .hljs-type, .hljs-selector-class, .hljs-selector-attr, .hljs-selector-pseudo, .hljs-number": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#986801")
    })),
    ".hljs-symbol, .hljs-bullet, .hljs-link, .hljs-meta, .hljs-selector-id, .hljs-title": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#4078f2")
    })),
    ".hljs-built_in, .hljs-title.class_, .hljs-class .hljs-title": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c18401")
    })),
    ".hljs-emphasis": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-strong": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      fontWeight: /* @__PURE__ */ str("bold")
    })),
    ".hljs-link": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      textDecoration: /* @__PURE__ */ str("underline")
    }))
  });
  var darkTheme = /* @__PURE__ */ css44({
    ".hljs": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      background: /* @__PURE__ */ str("#011627"),
      color: /* @__PURE__ */ str("#d6deeb")
    })),
    ".hljs-keyword": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c792ea"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-built_in": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-type": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82aaff")
    })),
    ".hljs-literal": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ff5874")
    })),
    ".hljs-number": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#F78C6C")
    })),
    ".hljs-regexp": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#5ca7e4")
    })),
    ".hljs-string": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ecc48d")
    })),
    ".hljs-subst": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#d3423e")
    })),
    ".hljs-symbol": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82aaff")
    })),
    ".hljs-class": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ffcb8b")
    })),
    ".hljs-function": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82AAFF")
    })),
    ".hljs-title": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#DCDCAA"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-params": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#7fdbca")
    })),
    ".hljs-comment": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#637777"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-doctag": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#7fdbca")
    })),
    ".hljs-meta": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82aaff")
    })),
    ".hljs-meta .hljs-keyword": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82aaff")
    })),
    ".hljs-meta .hljs-string": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ecc48d")
    })),
    ".hljs-section": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#82b1ff")
    })),
    ".hljs-tag, .hljs-name": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#7fdbca")
    })),
    ".hljs-attr": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#7fdbca")
    })),
    ".hljs-attribute": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#80cbc4")
    })),
    ".hljs-variable": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67")
    })),
    ".hljs-bullet": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#d9f5dd")
    })),
    ".hljs-code": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#80CBC4")
    })),
    ".hljs-emphasis": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c792ea"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-strong": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67"),
      fontWeight: /* @__PURE__ */ str("bold")
    })),
    ".hljs-formula": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c792ea")
    })),
    ".hljs-link": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ff869a")
    })),
    ".hljs-quote": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#697098"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-selector-tag": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#ff6363")
    })),
    ".hljs-selector-id": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#fad430")
    })),
    ".hljs-selector-class": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-selector-attr, .hljs-selector-pseudo": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c792ea"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-template-tag": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#c792ea")
    })),
    ".hljs-template-variable": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67")
    })),
    ".hljs-addition": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#addb67ff"),
      fontStyle: /* @__PURE__ */ str("italic")
    })),
    ".hljs-deletion": /* @__PURE__ */ nested(/* @__PURE__ */ css44({
      color: /* @__PURE__ */ str("#EF535090"),
      fontStyle: /* @__PURE__ */ str("italic")
    }))
  });

  // output/UI.Repository.View/index.js
  var bind49 = /* @__PURE__ */ bind2(ixBindRender);
  var useMemo6 = /* @__PURE__ */ useMemo(/* @__PURE__ */ eqRemoteData(/* @__PURE__ */ eqNonEmptyList(eqForeignError))(eqString));
  var mapFlipped20 = /* @__PURE__ */ mapFlipped(functorRemoteData);
  var discard21 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect20 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqRec()(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(eqRowNil)()({
    reflectSymbol: function() {
      return "repoName";
    }
  })(eqString))()({
    reflectSymbol: function() {
      return "owner";
    }
  })(eqString)));
  var mempty28 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(/* @__PURE__ */ monoidEffect(monoidUnit)));
  var pure56 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var foldMap18 = /* @__PURE__ */ foldMap(foldableRemoteData)(monoidJSX);
  var centre4 = /* @__PURE__ */ centre2()();
  var append32 = /* @__PURE__ */ append(semigroupStyle);
  var div$prime14 = /* @__PURE__ */ div$prime();
  var mkView7 = /* @__PURE__ */ component2("Repository")(function(ctx) {
    return function(props) {
      return bind49(useGetTextFileInRepo(ctx))(function(v2) {
        return bind49(useMemo6(v2.value0)(function(v1) {
          return mapFlipped20(v2.value0)(parseMarkdown);
        }))(function(result) {
          return bind49(useTheme)(function(v1) {
            return discard21(useEffect20(props)(function __do10() {
              v2.value1({
                revision_and_file: "HEAD:README.md",
                owner: props.owner,
                name: props.repoName
              })();
              return mempty28();
            }))(function() {
              return pure56(foldMap18(function(__html) {
                return centre4({
                  css: append32(screenMd(textLg))(append32(screenLg(textXl))(screenXl(text2xl)))
                })([styledLeaf(div$prime14)({
                  className: "readme-markdown",
                  css: append32(markdownStyle)(function() {
                    if (v1.theme instanceof LightMode) {
                      return lightTheme;
                    }
                    ;
                    if (v1.theme instanceof DarkMode) {
                      return darkTheme;
                    }
                    ;
                    throw new Error("Failed pattern match at UI.Repository.View (line 37, column 41 - line 39, column 41): " + [v1.theme.constructor.name]);
                  }()),
                  dangerouslySetInnerHTML: {
                    "__html": __html
                  }
                })]);
              })(result));
            });
          });
        });
      });
    };
  });

  // output/Effect.Random/foreign.js
  var random = Math.random;

  // output/Effect.Random/index.js
  var randomRange = function(min8) {
    return function(max7) {
      return function __do10() {
        var n2 = random();
        return n2 * (max7 - min8) + min8;
      };
    };
  };

  // output/Yoga.Block.Atom.Input.Hook.UseTypingPlaceholders/index.js
  var $runtime_lazy5 = function(name15, moduleName, init5) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name15 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init5();
      state3 = 2;
      return val;
    };
  };
  var coerceHook14 = /* @__PURE__ */ coerceHook();
  var bind50 = /* @__PURE__ */ bind2(ixBindRender);
  var bind118 = /* @__PURE__ */ bind(/* @__PURE__ */ bindMaybeT(monadEffect));
  var pure57 = /* @__PURE__ */ pure(applicativeEffect);
  var mapFlipped21 = /* @__PURE__ */ mapFlipped(functorEffect);
  var pure118 = /* @__PURE__ */ pure(applicativeMaybe);
  var discard25 = /* @__PURE__ */ discard2(ixBindRender);
  var for_13 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var liftEffect12 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var bind310 = /* @__PURE__ */ bind(bindMaybe);
  var bind410 = /* @__PURE__ */ bind(bindAff);
  var mapFlipped111 = /* @__PURE__ */ mapFlipped(functorAff);
  var liftEffect13 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var $$for4 = /* @__PURE__ */ $$for(applicativeAff)(traversableMaybe);
  var pure210 = /* @__PURE__ */ pure(applicativeAff);
  var for_14 = /* @__PURE__ */ for_(applicativeAff)(foldableMaybe);
  var discard110 = /* @__PURE__ */ discard(discardUnit);
  var discard26 = /* @__PURE__ */ discard110(bindAff);
  var mod4 = /* @__PURE__ */ mod(euclideanRingInt);
  var min6 = /* @__PURE__ */ min(ordNumber);
  var when9 = /* @__PURE__ */ when(applicativeEffect);
  var eqMaybe3 = /* @__PURE__ */ eqMaybe(eqString);
  var eq110 = /* @__PURE__ */ eq(eqMaybe3);
  var notEq5 = /* @__PURE__ */ notEq(eqMaybe3);
  var pure310 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useTypingPlaceholders = function(defaultPlaceholder) {
    return function(otherPlaceholders) {
      return coerceHook14(function() {
        var placeholders = cons$prime(defaultPlaceholder)(otherPlaceholders);
        return bind50(useRef(nullImpl))(function(inputRef) {
          return bind50(useRef(0))(function(placeholderIndexRef) {
            return bind50(useRef(false))(function(isDeletingRef) {
              return bind50(useRef(Nothing.value))(function(fiberRef) {
                var getInputValue = runMaybeT(bind118(readRefMaybe(inputRef))(function(node2) {
                  return bind118(pure57(fromNode2(node2)))(function(inputElement) {
                    return mapFlipped21(value3(inputElement))(pure118);
                  });
                }));
                return discard25(useEffectOnce(function() {
                  var unregister = function(et2) {
                    return function(listener) {
                      return function __do10() {
                        var maybeInputNode = readRefMaybe(inputRef)();
                        return for_13(maybeInputNode)(function(ie2) {
                          return removeEventListener(et2)(listener)(false)(toEventTarget3(ie2));
                        })();
                      };
                    };
                  };
                  var setPlaceholder3 = function(s3) {
                    return function __do10() {
                      var inputElement\u0294 = mapFlipped21(liftEffect12(readRefMaybe(inputRef)))(function(v2) {
                        return bind310(v2)(fromNode2);
                      })();
                      return for_13(inputElement\u0294)(function(inputElement) {
                        return liftEffect12(setPlaceholder(s3)(inputElement));
                      })();
                    };
                  };
                  var register = function(et2) {
                    return function(listener) {
                      return function __do10() {
                        var maybeInputNode = readRefMaybe(inputRef)();
                        return for_13(maybeInputNode)(function(ie2) {
                          return addEventListener(et2)(listener)(false)(toEventTarget3(ie2));
                        })();
                      };
                    };
                  };
                  var getPlaceholder = bind410(mapFlipped111(liftEffect13(readRefMaybe(inputRef)))(function(v2) {
                    return bind310(v2)(fromNode2);
                  }))(function(inputElement\u0294) {
                    return bind410($$for4(inputElement\u0294)(function(inputElement) {
                      return liftEffect13(placeholder(inputElement));
                    }))(function(placeholder3) {
                      return pure210(fromMaybe("")(placeholder3));
                    });
                  });
                  var $lazy_go = $runtime_lazy5("go", "Yoga.Block.Atom.Input.Hook.UseTypingPlaceholders", function() {
                    return bind410(liftEffect13(readRef(placeholderIndexRef)))(function(placeholderIndex) {
                      return bind410(liftEffect13(readRef(isDeletingRef)))(function(isDeleting) {
                        return for_14(index2(placeholders)(placeholderIndex))(function(toWrite) {
                          return bind410(getPlaceholder)(function(placeholder3) {
                            var $45 = !isDeleting && placeholder3 === toWrite;
                            if ($45) {
                              return discard26(liftEffect13(writeRef(isDeletingRef)(true)))(function() {
                                return discard26(delay(1200))(function() {
                                  return discard26(liftEffect13(setPlaceholder3(take4(length5(toWrite) - 1 | 0)(placeholder3))))(function() {
                                    return $lazy_go(115);
                                  });
                                });
                              });
                            }
                            ;
                            var $46 = isDeleting && placeholder3 === "";
                            if ($46) {
                              return discard26(liftEffect13(writeRef(isDeletingRef)(false)))(function() {
                                var newPlaceholderIndex = mod4(placeholderIndex + 1 | 0)(length2(placeholders));
                                return discard26(liftEffect13(writeRef(placeholderIndexRef)(newPlaceholderIndex)))(function() {
                                  var newToWrite = fromMaybe$prime(function(v2) {
                                    return unsafeCrashWith("Nope");
                                  })(index2(placeholders)(newPlaceholderIndex));
                                  return discard26(delay(60))(function() {
                                    return discard26(liftEffect13(setPlaceholder3(take4(1)(newToWrite))))(function() {
                                      return $lazy_go(128);
                                    });
                                  });
                                });
                              });
                            }
                            ;
                            var $47 = !isDeleting;
                            if ($47) {
                              var charactersWritten = length5(placeholder3);
                              return bind410(liftEffect13(randomRange(40)(100)))(function(delayBy1) {
                                return bind410(liftEffect13(randomRange(40)(100)))(function(delayBy2) {
                                  return discard26(delay(min6(delayBy1)(delayBy2)))(function() {
                                    return discard26(liftEffect13(setPlaceholder3(take4(charactersWritten + 1 | 0)(toWrite))))(function() {
                                      return $lazy_go(136);
                                    });
                                  });
                                });
                              });
                            }
                            ;
                            var charactersWritten = length5(placeholder3);
                            var charactersDeleted = length5(toWrite) - charactersWritten | 0;
                            return discard26(function() {
                              if (charactersDeleted === 1) {
                                return delay(100);
                              }
                              ;
                              if (charactersDeleted === 2) {
                                return delay(100);
                              }
                              ;
                              if (charactersDeleted === 3) {
                                return delay(100);
                              }
                              ;
                              if (charactersDeleted < 5) {
                                return delay(16);
                              }
                              ;
                              return delay(8);
                            }())(function() {
                              return discard26(liftEffect13(setPlaceholder3(take4(charactersWritten - 1 | 0)(toWrite))))(function() {
                                return $lazy_go(148);
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                  var go2 = $lazy_go(104);
                  var start2 = function __do10() {
                    var fiber = launchAff(go2)();
                    return writeRef(fiberRef)(new Just(fiber))();
                  };
                  var mkOnFocusListener = eventListener(function(v2) {
                    return function __do10() {
                      setPlaceholder3(defaultPlaceholder)();
                      writeRef(placeholderIndexRef)(0)();
                      writeRef(isDeletingRef)(false)();
                      var inputValue\u0294 = getInputValue();
                      return when9(eq110(inputValue\u0294)(new Just("")))(start2)();
                    };
                  });
                  var cancel = function(why) {
                    return function __do10() {
                      var fiber\u0294 = readRef(fiberRef)();
                      launchAff_(for_14(fiber\u0294)(function(fib) {
                        return killFiber(error(why))(fib);
                      }))();
                      return writeRef(fiberRef)(Nothing.value)();
                    };
                  };
                  var mkOnBlurListener = eventListener(function(v2) {
                    return function __do10() {
                      setPlaceholder3("")();
                      return cancel("blur")();
                    };
                  });
                  var mkOnInputListener = eventListener(function(v2) {
                    return function __do10() {
                      var inputValue\u0294 = getInputValue();
                      var $49 = notEq5(inputValue\u0294)(new Just("")) && notEq5(inputValue\u0294)(Nothing.value);
                      if ($49) {
                        return cancel("on change non-empty")();
                      }
                      ;
                      setPlaceholder3("")();
                      writeRef(placeholderIndexRef)(0)();
                      writeRef(isDeletingRef)(false)();
                      return start2();
                    };
                  });
                  return function __do10() {
                    var onFocusListener = mkOnFocusListener();
                    var onBlurListener = mkOnBlurListener();
                    var onInputListener = mkOnInputListener();
                    launchAff_(discard26(delay(0))(function() {
                      return liftEffect13(function __do11() {
                        register("focus")(onFocusListener)();
                        register("blur")(onBlurListener)();
                        return register("input")(onInputListener)();
                      });
                    }))();
                    setPlaceholder3(defaultPlaceholder)();
                    return function __do11() {
                      cancel("Killed fiber because component was unmounted")();
                      unregister("focus")(onFocusListener)();
                      unregister("blur")(onBlurListener)();
                      return unregister("input")(onInputListener)();
                    };
                  };
                }()))(function() {
                  return pure310(inputRef);
                });
              });
            });
          });
        });
      }());
    };
  };

  // output/Yoga.Block.Hook.UseMediaQuery/index.js
  var coerceHook15 = /* @__PURE__ */ coerceHook();
  var bind51 = /* @__PURE__ */ bind(bindEffect);
  var bind119 = /* @__PURE__ */ bind2(ixBindRender);
  var discard27 = /* @__PURE__ */ discard2(ixBindRender);
  var useEffect21 = /* @__PURE__ */ useEffect(eqString);
  var pure119 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var useMediaQuery = function(query) {
    return coerceHook15(function() {
      var check = bind51(bind51(windowImpl)(matchMedia(query)))(matches2);
      return bind119(useState$prime(unsafePerformEffect(check)))(function(v2) {
        return discard27(useEffect21(query)(function __do10() {
          var queryList = bind51(windowImpl)(matchMedia(query))();
          var target6 = toEventTarget4(queryList);
          var listener = eventListener($$const(bind51(check)(v2.value1)))();
          addEventListener(change)(listener)(true)(target6)();
          return removeEventListener(change)(listener)(true)(target6);
        }))(function() {
          return pure119(v2.value0);
        });
      });
    }());
  };

  // output/Fahrtwind.Style.ScollBar/index.js
  var css45 = /* @__PURE__ */ css2();
  var scrollBar$prime = function(v2) {
    return css45({
      scrollbarWidth: auto,
      scrollbarColor: str(v2.col + (" " + v2.background)),
      "&::-webkit-scrollbar": nested(css45({
        width: v2.width
      })),
      "&::-webkit-scrollbar-track": nested(css45({
        background: v2.background
      })),
      "&::-webkit-scrollbar-thumb": nested(css45({
        background: v2.col,
        borderRadius: v2.borderRadius,
        border: str(v2.borderWidth + (" solid " + v2.background))
      }))
    });
  };

  // output/Yoga.Block.Molecule.Sheet.Style/index.js
  var append33 = /* @__PURE__ */ append(semigroupStyle);
  var css46 = /* @__PURE__ */ css2();
  var sheetContent = /* @__PURE__ */ function() {
    var styles = append33(pX$prime($$var("--s0")))(append33(pY$prime($$var("--s1")))(append33(css46({
      maxHeight: str("calc(100vh - var(--s3))")
    }))(maxHeight$prime(vh(90)))));
    return styles;
  }();
  var sheetBody = /* @__PURE__ */ function() {
    return append33(maxHeight$prime(vh(67.7)))(append33(overflowYScroll)(scrollBar$prime({
      background: col2.backgroundLayer4,
      col: col2.textPaler3,
      width: str("calc(var(--s0) * 0.75)"),
      borderRadius: str("var(--s-1)"),
      borderWidth: str("var(--s-3)")
    })));
  }();
  var sheet = /* @__PURE__ */ function() {
    var styles = css46({
      zIndex: str("3"),
      position: fixed,
      left: str("0"),
      pointerEvents: auto,
      width: str("100vw"),
      background: str(colour.backgroundLayer4),
      borderRadius: str("var(--s1) var(--s1) 0 0"),
      borderTop: str("1px solid " + colour.backgroundLayer5),
      boxShadow: str("0 0 var(--s3) rgba(0,0,0,0.1)"),
      height: str("100vh")
    });
    return styles;
  }();
  var clickaway2 = /* @__PURE__ */ css46({
    width: /* @__PURE__ */ vw(100),
    height: /* @__PURE__ */ vh(100),
    position: fixed,
    left: _0,
    top: _0,
    pointerEvents: auto,
    backdropFilter: /* @__PURE__ */ str("blur(4px) brightness(80%)"),
    zIndex: /* @__PURE__ */ str("3")
  });

  // output/Yoga.Block.Molecule.Sheet.View/index.js
  var reactComponent2 = /* @__PURE__ */ reactComponent()()();
  var bind52 = /* @__PURE__ */ bind2(ixBindRender);
  var mapFlipped24 = /* @__PURE__ */ mapFlipped(functorEffect);
  var bind120 = /* @__PURE__ */ bind(bindEffect);
  var min7 = /* @__PURE__ */ min(ordNumber);
  var discard28 = /* @__PURE__ */ discard2(ixBindRender);
  var monoidEffect10 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty29 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect10));
  var pure120 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var el13 = /* @__PURE__ */ el();
  var animatePresence5 = /* @__PURE__ */ animatePresence();
  var guard10 = /* @__PURE__ */ guard(monoidJSX);
  var styled19 = /* @__PURE__ */ styled();
  var div16 = /* @__PURE__ */ div6();
  var layout3 = /* @__PURE__ */ layout();
  var initial7 = /* @__PURE__ */ initial();
  var animate9 = /* @__PURE__ */ animate3();
  var exit5 = /* @__PURE__ */ exit();
  var for_15 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var log4 = /* @__PURE__ */ log3(monadEffectEffect);
  var when10 = /* @__PURE__ */ when(applicativeEffect);
  var div$prime15 = /* @__PURE__ */ div$prime();
  var component110 = /* @__PURE__ */ component13();
  var prop2 = /* @__PURE__ */ prop();
  var mempty115 = /* @__PURE__ */ mempty(monoidEffect10);
  var window2 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent2("Sheet Window")(function(v2) {
    return bind52(useRef(nullImpl))(function(v1) {
      return bind52(useRef(nullImpl))(function(contentRef) {
        return bind52(useRef(0))(function(velocityRef) {
          return bind52(useRef(Nothing.value))(function(animationRef) {
            return bind52(useMotionValue2(0))(function(top6) {
              var getWindowHeight = mapFlipped24(bind120(windowImpl)(innerHeight))(toNumber);
              var getMaxHeight = function __do10() {
                var wh = getWindowHeight();
                var maybeOffsetHeight = getOffsetHeightFromRef(contentRef)();
                return maybe(0)(function(x3) {
                  return min7(wh)(wh - x3);
                })(maybeOffsetHeight);
              };
              return discard28(useEffectAlways(function __do10() {
                var maxHeight = getMaxHeight();
                set2(maxHeight)(top6)();
                return mempty29();
              }))(function() {
                return pure120(el13(animatePresence5)({})([guard10(v2.isOpen)(styled19(div16)({
                  className: "ry-sheet-background",
                  css: sheet,
                  layout: layout3(true),
                  style: css8({
                    top: top6
                  }),
                  ref: v1,
                  initial: initial7(css8({
                    y: "100%"
                  })),
                  animate: animate9(css8({
                    y: "0%",
                    transition: {
                      type: "spring",
                      stiffness: 1200,
                      damping: 90
                    }
                  })),
                  exit: exit5(css8({
                    top: "100%"
                  })),
                  onPanStart: onPanStart(function(v22) {
                    return function(v3) {
                      return function __do10() {
                        var maybeRunningAnimation = readRef(animationRef)();
                        for_15(maybeRunningAnimation)(stopAnimation)();
                        return writeRef(animationRef)(Nothing.value)();
                      };
                    };
                  }),
                  onPan: onPan(function(v22) {
                    return function(pi2) {
                      return function __do10() {
                        var oldY = get3(top6)();
                        var maxHeight = getMaxHeight();
                        writeRef(velocityRef)(pi2.velocity.y)();
                        var newNaiveValue = pi2.delta.y + oldY;
                        var newY = function() {
                          var $53 = newNaiveValue < maxHeight && pi2.delta.y < 0;
                          if ($53) {
                            return -pow(-pi2.delta.y)(0.33) + oldY;
                          }
                          ;
                          var $54 = newNaiveValue < maxHeight && pi2.delta.y > 0;
                          if ($54) {
                            return pow(pi2.delta.y)(0.33) + oldY;
                          }
                          ;
                          return newNaiveValue;
                        }();
                        return set2(newY)(top6)();
                      };
                    };
                  }),
                  onPanEnd: onPanEnd(function(v22) {
                    return function(pi2) {
                      return function __do10() {
                        var velocity = readRef(velocityRef)();
                        var yValue = get3(top6)();
                        var maxHeight = getMaxHeight();
                        var windowHeight = getWindowHeight();
                        var percentPosition = (yValue - maxHeight) / (windowHeight - maxHeight);
                        var target6 = function() {
                          var $55 = percentPosition > 0.7;
                          if ($55) {
                            return windowHeight;
                          }
                          ;
                          var $56 = percentPosition < 0.2;
                          if ($56) {
                            return maxHeight;
                          }
                          ;
                          var $57 = velocity > 70;
                          if ($57) {
                            return windowHeight;
                          }
                          ;
                          return maxHeight;
                        }();
                        var animation = animate7(target6)({
                          type: "spring",
                          velocity: pi2.velocity.y,
                          stiffness: 1200,
                          damping: 90,
                          onComplete: function __do11() {
                            log4("complete")();
                            writeRef(animationRef)(Nothing.value)();
                            return when10(target6 === windowHeight)(v2.onDismiss)();
                          }
                        })(top6)();
                        return writeRef(animationRef)(new Just(animation))();
                      };
                    };
                  })
                })([styled19(div$prime15)({
                  ref: contentRef,
                  css: sheetContent,
                  className: "ry-sheet-content"
                })([el13(component110)({
                  space: str("0")
                })([v2.header, styled19(div$prime15)({
                  css: sheetBody
                })([v2.content]), v2.footer])])]))]));
              });
            });
          });
        });
      });
    });
  }));
  var clickaway3 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent2("Sheet Clickaway")(function(v2) {
    return bind52(useRenderInPortal(v2.containerId))(function(renderInPortal) {
      return pure120(renderInPortal(elementKeyed2(div16)({
        key: "ry-modal-clickaway",
        onClick: handler_(v2.onDismiss),
        className: "ry-modal-clickaway",
        css: clickaway2,
        initial: prop2(css8({
          opacity: 0
        })),
        animate: prop2(css8({
          opacity: 1
        })),
        exit: prop2(css8({
          opacity: 0
        }))
      })));
    });
  }));
  var component25 = /* @__PURE__ */ unsafePerformEffect(/* @__PURE__ */ reactComponent2("Sheet Wrapper")(function(v2) {
    return bind52(useRenderInPortal(v2.containerId))(function(renderInPortal) {
      return discard28(useKeyDown(function(v1) {
        if (v1 instanceof Escape) {
          return v2.onDismiss;
        }
        ;
        return mempty115;
      }))(function() {
        var toRender = el13(div$prime15)({})([el13(animatePresence5)({})([guard10(v2.isOpen)(element(clickaway3)({
          containerId: v2.clickAwayId,
          onDismiss: v2.onDismiss
        }))]), element(window2)({
          onDismiss: v2.onDismiss,
          header: v2.header,
          content: v2.content,
          footer: v2.footer,
          isOpen: v2.isOpen
        })]);
        return pure120(renderInPortal(toRender));
      });
    });
  }));

  // output/UI.Registry/index.js
  var bind53 = /* @__PURE__ */ bind2(ixBindRender);
  var pure58 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var bind121 = /* @__PURE__ */ bind(bindRemoteData);
  var readJSON3 = /* @__PURE__ */ readJSON(/* @__PURE__ */ readForeignMap()(/* @__PURE__ */ readForeignMapString(readForeignRepository)));
  var alt13 = /* @__PURE__ */ alt(altMaybe);
  var useStateEq$prime4 = /* @__PURE__ */ useStateEq$prime(eqString);
  var discard29 = /* @__PURE__ */ discard2(ixBindRender);
  var useAff3 = /* @__PURE__ */ useAff(eqString);
  var discard111 = /* @__PURE__ */ discard(discardUnit);
  var discard210 = /* @__PURE__ */ discard111(bindAff);
  var filterWithKey2 = /* @__PURE__ */ filterWithKey(ordProjectName);
  var liftEffect14 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var append34 = /* @__PURE__ */ append(semigroupStyle);
  var leaf6 = /* @__PURE__ */ leaf();
  var input5 = /* @__PURE__ */ input4();
  var styled20 = /* @__PURE__ */ styled();
  var div$prime16 = /* @__PURE__ */ div$prime();
  var monoidEffect11 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var guard11 = /* @__PURE__ */ guard(monoidEffect11);
  var bind212 = /* @__PURE__ */ bind(bindEffect);
  var traverse_3 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var show18 = /* @__PURE__ */ show(showString);
  var interpStringFunction4 = /* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(interpString))));
  var i6 = /* @__PURE__ */ i2(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpIntFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(/* @__PURE__ */ interpStringFunction(interpStringFunction4)))))));
  var foldMapWithIndex2 = /* @__PURE__ */ foldMapWithIndex(foldableWithIndexNonEmptyArray)(monoidString);
  var i13 = /* @__PURE__ */ i2(interpStringFunction4);
  var mapFlipped25 = /* @__PURE__ */ mapFlipped(functorST);
  var for_16 = /* @__PURE__ */ for_(applicativeST)(foldableMaybe);
  var readForeignRecord7 = /* @__PURE__ */ readForeignRecord();
  var dataIsSymbol = {
    reflectSymbol: function() {
      return "data";
    }
  };
  var defaultBranchRefIsSymbol = {
    reflectSymbol: function() {
      return "defaultBranchRef";
    }
  };
  var nameIsSymbol2 = {
    reflectSymbol: function() {
      return "name";
    }
  };
  var readForeignFieldsCons3 = /* @__PURE__ */ readForeignFieldsCons(nameIsSymbol2)(readForeignString);
  var targetIsSymbol = {
    reflectSymbol: function() {
      return "target";
    }
  };
  var historyIsSymbol = {
    reflectSymbol: function() {
      return "history";
    }
  };
  var edgesIsSymbol = {
    reflectSymbol: function() {
      return "edges";
    }
  };
  var nodeIsSymbol = {
    reflectSymbol: function() {
      return "node";
    }
  };
  var pushedDateIsSymbol = {
    reflectSymbol: function() {
      return "pushedDate";
    }
  };
  var ownerIsSymbol = {
    reflectSymbol: function() {
      return "owner";
    }
  };
  var loginIsSymbol = {
    reflectSymbol: function() {
      return "login";
    }
  };
  var useDynamicGithubGraphQL2 = /* @__PURE__ */ useDynamicGithubGraphQL(/* @__PURE__ */ writeForeignRecord()(writeForeignFieldsNilRowR))(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(dataIsSymbol)(/* @__PURE__ */ readForeignMapString(/* @__PURE__ */ readForeignMaybe(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(defaultBranchRefIsSymbol)(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons3(/* @__PURE__ */ readForeignFieldsCons(targetIsSymbol)(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(historyIsSymbol)(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(edgesIsSymbol)(/* @__PURE__ */ readForeignArray(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(nodeIsSymbol)(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(pushedDateIsSymbol)(/* @__PURE__ */ readForeignMaybe(readForeignString))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()())))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()())()()))(/* @__PURE__ */ readForeignFieldsCons3(/* @__PURE__ */ readForeignFieldsCons(ownerIsSymbol)(/* @__PURE__ */ readForeignRecord7(/* @__PURE__ */ readForeignFieldsCons(loginIsSymbol)(readForeignString)(readForeignFieldsNilRowRo)()()))(readForeignFieldsNilRowRo)()())()())()()))))(readForeignFieldsNilRowRo)()()));
  var eqRec5 = /* @__PURE__ */ eqRec();
  var eqRowCons4 = /* @__PURE__ */ eqRowCons(eqRowNil)();
  var repoNameIsSymbol = {
    reflectSymbol: function() {
      return "repoName";
    }
  };
  var eqRec12 = /* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons4(repoNameIsSymbol)(eqString))()(ownerIsSymbol)(eqString));
  var useEffect22 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqNonEmptyArray(eqRec12)));
  var ordRecord2 = /* @__PURE__ */ ordRecord()(/* @__PURE__ */ ordRecordCons(/* @__PURE__ */ ordRecordCons(ordRecordNil)()(repoNameIsSymbol)(ordString))()(ownerIsSymbol)(ordString));
  var union3 = /* @__PURE__ */ union2(ordRecord2);
  var mempty30 = /* @__PURE__ */ mempty(monoidEffect11);
  var fromFoldable8 = /* @__PURE__ */ fromFoldable3(ordRecord2);
  var fromFoldable1 = /* @__PURE__ */ fromFoldable8(foldableNonEmptyArray);
  var mapFlipped112 = /* @__PURE__ */ mapFlipped(functorNonEmptyArray);
  var mempty116 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect11));
  var eqRemoteData2 = /* @__PURE__ */ eqRemoteData(/* @__PURE__ */ eqNonEmptyList(eqForeignError));
  var useEffect1 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqRemoteData2(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(dataIsSymbol)(/* @__PURE__ */ eqMap(eqString)(/* @__PURE__ */ eqMaybe(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons4(ownerIsSymbol)(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(loginIsSymbol)(eqString))))()(nameIsSymbol2)(eqString))()(defaultBranchRefIsSymbol)(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons(/* @__PURE__ */ eqRowCons4(targetIsSymbol)(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(historyIsSymbol)(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(edgesIsSymbol)(/* @__PURE__ */ eqArray(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(nodeIsSymbol)(/* @__PURE__ */ eqRec5(/* @__PURE__ */ eqRowCons4(pushedDateIsSymbol)(/* @__PURE__ */ eqMaybe(eqString))))))))))))()(nameIsSymbol2)(eqString))))))))));
  var log5 = /* @__PURE__ */ log3(monadEffectEffect);
  var show19 = /* @__PURE__ */ show(/* @__PURE__ */ showNonEmptyList(showForeignError));
  var fromFoldable22 = /* @__PURE__ */ fromFoldable8(foldableList);
  var map41 = /* @__PURE__ */ map(functorMaybe);
  var mapFlipped26 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var bind411 = /* @__PURE__ */ bind(bindMaybe);
  var fromFoldable32 = /* @__PURE__ */ fromFoldable8(foldableArray);
  var mapFlipped32 = /* @__PURE__ */ mapFlipped(functorArray);
  var un5 = /* @__PURE__ */ un();
  var toDuration2 = /* @__PURE__ */ toDuration(durationDays);
  var show25 = /* @__PURE__ */ show(showInt);
  var lookup5 = /* @__PURE__ */ lookup(ordRecord2);
  var foldMap19 = /* @__PURE__ */ foldMap(foldableMaybe);
  var foldMap110 = /* @__PURE__ */ foldMap19(monoidJSX);
  var img$prime2 = /* @__PURE__ */ img$prime();
  var stack7 = /* @__PURE__ */ stack2()();
  var foldMap24 = /* @__PURE__ */ foldMap19(monoidString);
  var eqMap2 = /* @__PURE__ */ eqMap(eqProjectName)(eqRepository);
  var useMemo7 = /* @__PURE__ */ useMemo(eqMap2);
  var toUnfoldable3 = /* @__PURE__ */ toUnfoldable2(unfoldableArray);
  var bind54 = /* @__PURE__ */ bind(bindReaderT);
  var liftEffect15 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
  var useStateEq$prime1 = /* @__PURE__ */ useStateEq$prime(/* @__PURE__ */ eqMaybe(eqMap2));
  var useStateEq$prime22 = /* @__PURE__ */ useStateEq$prime(/* @__PURE__ */ eqMaybe(eqRec12));
  var voidRight5 = /* @__PURE__ */ voidRight(functorEffect);
  var eqRemoteData1 = /* @__PURE__ */ eqRemoteData2(eqMap2);
  var useEffect23 = /* @__PURE__ */ useEffect(/* @__PURE__ */ eqTuple(eqRemoteData1)(eqRemoteData1));
  var append210 = /* @__PURE__ */ append(/* @__PURE__ */ semigroupMap()(ordProjectName)(semigroupRepository));
  var fromFoldable42 = /* @__PURE__ */ fromFoldable(foldableList);
  var mapMaybe4 = /* @__PURE__ */ mapMaybe3(ordProjectName);
  var box5 = /* @__PURE__ */ box2()();
  var cluster10 = /* @__PURE__ */ cluster3()();
  var css47 = /* @__PURE__ */ css2();
  var pure211 = /* @__PURE__ */ pure(applicativeArray);
  var guard1 = /* @__PURE__ */ guard(monoidJSX);
  var mempty210 = /* @__PURE__ */ mempty(monoidJSX);
  var useGetPackagesFileInRepo = function(ctx) {
    return bind53(useGetTextFileInRepo(ctx))(function(v2) {
      return pure58(new Tuple(bind121(v2.value0)(function($397) {
        return fromEither(readJSON3($397));
      }), v2.value1));
    });
  };
  var parseGithubRepoLink = function(v2) {
    var strippedPrefix = alt13(stripPrefix("https://github.com/")(v2))(stripPrefix("git@github.com:")(v2));
    var v1 = function(v22) {
      return Nothing.value;
    };
    if (strippedPrefix instanceof Just) {
      var $302 = split("/")(strippedPrefix.value0);
      if ($302.length === 2) {
        var repoName = fromMaybe($302[1])(stripSuffix(".git")($302[1]));
        return new Just({
          owner: $302[0],
          repoName
        });
      }
      ;
      return v1(true);
    }
    ;
    return v1(true);
  };
  var newPackagesInput = {
    owner: "purescript",
    name: "registry",
    revision_and_file: "HEAD:new-packages.json"
  };
  var mkRepositoryFilter = /* @__PURE__ */ component("RepositoryFilter")(function(props) {
    return bind53(useStateEq$prime4(""))(function(v2) {
      return discard29(useAff3(v2.value0)(discard210(delay(200))(function() {
        var pattern2 = toLower(v2.value0);
        var filter6 = filterWithKey2(function(v1) {
          return function(v22) {
            return contains(pattern2)(toLower(v1)) || contains(pattern2)(toLower(v22));
          };
        });
        return liftEffect14(props.onChange(filter6(props.repositories)));
      })))(function() {
        return bind53(useTypingPlaceholders("Filter for a repository name...")(["for example", "yoga-blocks", "Or find libraries by an organisation...", "like rowtype-yoga"]))(function(inputRef) {
          return pure58(div_2(append34(width(120))(append34(transition2("all 200ms ease-out"))(focusWithin(width(300)))))([leaf6(input5)({
            value: v2.value0,
            css: widthFull,
            trailing: styled20(div$prime16)({
              css: append34(widthAndHeight(18))(append34(textCol$prime(col2.textPaler4))(cursorPointer)),
              onClick: handler_(function __do10() {
                guard11(v2.value0 !== "")(v2.value1(""))();
                return bind212(getHTMLElementFromRef(inputRef))(traverse_3(focus))();
              })
            })([function() {
              var $309 = v2.value0 === "";
              if ($309) {
                return search2;
              }
              ;
              return x;
            }()]),
            onChange: handler(targetValue)(traverse_3(v2.value1)),
            inputRef
          })]));
        });
      });
    });
  });
  var mkGetRepoInfo = function(repos) {
    var toRepoQuery = function(index6) {
      return function(v2) {
        return i6("repo")(index6)(":")("repository")("(owner:")(show18(v2.owner))(", name: ")(show18(v2.repoName))(") ")("{ ...repoProperties }\n");
      };
    };
    var inputs = foldMapWithIndex2(toRepoQuery)(repos);
    return i13("\n    fragment repoProperties on Repository {\n        name\n        owner { login }\n        defaultBranchRef {\n          name\n          target {\n            ... on Commit {\n              history(first: 1) {\n                edges {\n                  node {\n                    pushedDate\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    ")("\n{\n")(inputs)("\n}");
  };
  var chunked = function(chunkSize) {
    return function(arr) {
      return function __do10() {
        var iRef = {
          value: 0
        };
        var result = newSTArray();
        (function() {
          while (mapFlipped25(read2(iRef))(function(v2) {
            return v2 < length(arr);
          })()) {
            (function __do11() {
              var i23 = iRef.value;
              var chunk = slice(i23)(i23 + chunkSize | 0)(arr);
              for_16(fromArray(chunk))(function(res) {
                return push(res)(result);
              })();
              iRef.value = function(v2) {
                return v2 + chunkSize | 0;
              }(iRef.value);
              return unit;
            })();
          }
          ;
          return {};
        })();
        return freeze(result)();
      }();
    };
  };
  var useGetGithubRepoInfo = function(v2) {
    return bind53(useDynamicGithubGraphQL2(v2))(function(v1) {
      return bind53(useState([]))(function(v22) {
        return bind53(useState(empty3))(function(v3) {
          return bind53(useRef(empty3))(function(resultsRef) {
            return discard29(useEffect22(v22.value0)(function __do10() {
              var chunkResults = readRef(resultsRef)();
              v3.value1(union3(chunkResults))();
              (function() {
                var v42 = head(v22.value0);
                if (v42 instanceof Nothing) {
                  return mempty30();
                }
                ;
                if (v42 instanceof Just) {
                  v3.value1(union3(fromFoldable1(mapFlipped112(v42.value0)(function(repo) {
                    return new Tuple(repo, Loading2.value);
                  }))))();
                  return v1.value1(mkGetRepoInfo(v42.value0))({})();
                }
                ;
                throw new Error("Failed pattern match at UI.Registry (line 377, column 5 - line 386, column 37): " + [v42.constructor.name]);
              })();
              return mempty116();
            }))(function() {
              return discard29(useEffect1(v1.value0)(function __do10() {
                (function() {
                  if (v1.value0 instanceof NotAsked) {
                    return writeRef(resultsRef)(empty3)();
                  }
                  ;
                  if (v1.value0 instanceof Loading2) {
                    return mempty30();
                  }
                  ;
                  if (v1.value0 instanceof Failure) {
                    log5(show19(v1.value0.value0))();
                    return mempty30();
                  }
                  ;
                  if (v1.value0 instanceof Success2) {
                    var intermediate = readRef(resultsRef)();
                    writeRef(resultsRef)(union3(fromFoldable22(mapMaybe2(map41(function(v42) {
                      return new Tuple({
                        owner: v42.owner.login,
                        repoName: v42.name
                      }, fromEither(note("null result from API")(mapFlipped26(bind411(head(v42.defaultBranchRef.target.history.edges))(function(v5) {
                        return v5.node.pushedDate;
                      }))(function($398) {
                        return unsafePerformEffect(parse10($398));
                      }))));
                    }))(values(v1.value0.value0.data))))(intermediate))();
                    return v22.value1(function() {
                      var $399 = fromMaybe([]);
                      return function($400) {
                        return $399(tail($400));
                      };
                    }())();
                  }
                  ;
                  throw new Error("Failed pattern match at UI.Registry (line 391, column 5 - line 419, column 57): " + [v1.value0.constructor.name]);
                })();
                return mempty116();
              }))(function() {
                var result = new Tuple(v3.value0, function(repos) {
                  var chunks = chunked(200)(repos);
                  return function __do10() {
                    v3.value1($$const(fromFoldable32(mapFlipped32(repos)(function(repo) {
                      return new Tuple(repo, NotAsked.value);
                    }))))();
                    return v22.value1($$const(chunks))();
                  };
                });
                return pure58(result);
              });
            });
          });
        });
      });
    });
  };
  var bowerPackagesInput = {
    owner: "purescript",
    name: "registry",
    revision_and_file: "HEAD:bower-packages.json"
  };
  var approximateHumanReadableTimeInThePast = function(v2) {
    var duration2 = durationMillis({
      start: v2.start,
      end: v2.end
    });
    var days = un5(Days)(toDuration2(duration2));
    var hours = days * 24;
    var minutes = hours / 60;
    var years = days / 365;
    var months = days / 30;
    var $336 = years > 1;
    if ($336) {
      var intYears = round2(years);
      var $337 = intYears === 1;
      if ($337) {
        return "one year ago";
      }
      ;
      return show25(intYears) + " years ago";
    }
    ;
    var $338 = months > 1;
    if ($338) {
      var intMonths = round2(months);
      var $339 = intMonths === 1;
      if ($339) {
        return "one month ago";
      }
      ;
      return show25(intMonths) + " months ago";
    }
    ;
    var $340 = days >= 1;
    if ($340) {
      var intDays = round2(days);
      var $341 = intDays === 1;
      if ($341) {
        return "one day ago";
      }
      ;
      return show25(intDays) + " days ago";
    }
    ;
    var $342 = hours >= 1;
    if ($342) {
      var intHours = round2(hours);
      var $343 = intHours === 0;
      if ($343) {
        return "today";
      }
      ;
      var $344 = intHours === 1;
      if ($344) {
        return "yesterday";
      }
      ;
      return show25(intHours) + " days ago";
    }
    ;
    var intMinutes = round2(minutes);
    var $345 = intMinutes === 0;
    if ($345) {
      return "just now";
    }
    ;
    var $346 = intMinutes === 1;
    if ($346) {
      return "a minute ago";
    }
    ;
    return show25(intMinutes) + " minutes ago";
  };
  var mkRepoList = /* @__PURE__ */ function() {
    var renderRepo = function(_i) {
      return function(v2) {
        return function(v1) {
          var githubRepo\u0294 = parseGithubRepoLink(v2.value1);
          var lastCommitRD = bind411(githubRepo\u0294)(function(ghr) {
            return lookup5(ghr)(v1.props.repoInfo);
          });
          var cardStyle = append34(roundedNone)(append34(borderBottom(1))(append34(borderCol$prime(col2.backgroundLayer2))(hover(background$prime(col2.backgroundLayer3)))));
          var theCard = maybe(styledCard(cardStyle))(function() {
            var $401 = styledClickableCard(cardStyle);
            return function($402) {
              return $401(handler_(v1.props.setSelectedRepo(Just.create($402))));
            };
          }())(githubRepo\u0294);
          return theCard([cluster_([foldMap110(function(v22) {
            return styledLeaf(img$prime2)({
              css: roundedMd,
              className: "gh-avatar",
              width: "48px",
              height: "48px",
              src: "https://github.com/" + (v22.owner + ".png"),
              onError: handler(target5)(setFallbackImgSrc(notFoundImage))
            });
          })(githubRepo\u0294), stack7({
            space: str("0")
          })([div_2(append34(textDefault)(append34(fontMedium)(lineHeight("1em"))))([text2(function(n2) {
            return fromMaybe(n2)(stripPrefix("purescript-")(n2));
          }(un5(ProjectName)(v2.value0)))]), span_2(append34(textXs)(textCol$prime(col2.textPaler4)))([text2(function(v22) {
            if (v22 instanceof Nothing) {
              return "(Only works for Github repos)";
            }
            ;
            if (v22 instanceof Just && v22.value0 instanceof NotAsked) {
              return "-";
            }
            ;
            if (v22 instanceof Just && v22.value0 instanceof Loading2) {
              return "Loading last commit age";
            }
            ;
            if (v22 instanceof Just && v22.value0 instanceof Failure) {
              return take4(24)(v22.value0.value0);
            }
            ;
            if (v22 instanceof Just && v22.value0 instanceof Success2) {
              return foldMap24(function(start2) {
                return approximateHumanReadableTimeInThePast({
                  start: start2,
                  end: v1.now
                });
              })(toInstant(v22.value0.value0));
            }
            ;
            throw new Error("Failed pattern match at UI.Registry (line 302, column 49 - line 310, column 50): " + [v22.constructor.name]);
          }(lastCommitRD))]), function() {
            if (githubRepo\u0294 instanceof Nothing) {
              return renderFilePath(un5(Repository)(v2.value1));
            }
            ;
            if (githubRepo\u0294 instanceof Just) {
              return renderGithubRepo(githubRepo\u0294.value0);
            }
            ;
            throw new Error("Failed pattern match at UI.Registry (line 313, column 19 - line 315, column 66): " + [githubRepo\u0294.constructor.name]);
          }()])])]);
        };
      };
    };
    return function __do10() {
      var now3 = now2();
      return component("RepoList")(function(props) {
        return bind53(useMemo7(props.repos)(function(v2) {
          return mkFn3(renderRepo);
        }))(function(itemContent) {
          return pure58(leaf6(virtuosoImpl)({
            useWindowScroll: false,
            overscan: 100,
            className: "virtualised-registry-entries",
            style: css8({
              height: "100%",
              background: colour.backgroundLayer4
            }),
            context: {
              props,
              now: now3
            },
            data: toUnfoldable3(props.repos),
            itemContent
          }));
        });
      })();
    };
  }();
  var mkView8 = /* @__PURE__ */ bind54(/* @__PURE__ */ liftEffect15(mkRepositoryFilter))(function(repoFilter) {
    return bind54(mkView7)(function(repoView) {
      return bind54(liftEffect15(mkRepoList))(function(repoList) {
        return bind54(liftEffect15(now2))(function(now3) {
          return component2("Registry")(function(ctx) {
            return function(v2) {
              return bind53(useGetPackagesFileInRepo(ctx))(function(v1) {
                return bind53(useGetPackagesFileInRepo(ctx))(function(v22) {
                  return bind53(useStateEq$prime1(Nothing.value))(function(v3) {
                    return bind53(useGetGithubRepoInfo(ctx))(function(v42) {
                      return bind53(useStateEq$prime1(Nothing.value))(function(v5) {
                        return bind53(useStateEq$prime22(Nothing.value))(function(v6) {
                          return bind53(useMediaQuery("(min-width: 768px)"))(function(screenIsAtLeastMedium) {
                            return discard29(useEffectOnce(voidRight5(mempty30)(function __do10() {
                              v1.value1(bowerPackagesInput)();
                              return v22.value1(newPackagesInput)();
                            })))(function() {
                              return discard29(useEffect23(new Tuple(v1.value0, v22.value0))(function __do10() {
                                (function() {
                                  if (v1.value0 instanceof Success2 && v22.value0 instanceof Success2) {
                                    var allRepos = append210(v1.value0.value0)(v22.value0.value0);
                                    v3.value1(new Just(allRepos))();
                                    v5.value1(new Just(allRepos))();
                                    return v42.value1(fromFoldable42(values(mapMaybe4(parseGithubRepoLink)(allRepos))))();
                                  }
                                  ;
                                  return mempty30();
                                })();
                                return mempty116();
                              }))(function() {
                                var filterBar = function(repos) {
                                  return box5({
                                    css: append34(background$prime(col2.backgroundBright3))(append34(borderCol$prime(col2.backgroundBright5))(borderBottom(1)))
                                  })([cluster10({
                                    justify: "flex-end"
                                  })([repoFilter({
                                    repositories: repos,
                                    onChange: function($403) {
                                      return v5.value1(Just.create($403));
                                    }
                                  })])]);
                                };
                                var view = function() {
                                  if (v3.value0 instanceof Just && v5.value0 instanceof Just) {
                                    return fragment([div_2(append34(flexCol)(append34(heightFull)(maxHeight$prime(full))))([filterBar(v3.value0.value0), div_2(append34(flexRow)(append34(flexGrow(999))(append34(overflowHidden)(append34(screenMd(css47({
                                      ".virtualised-registry-entries": nested(append34(width(360))(maxWidth(360)))
                                    })))(css47({
                                      ".virtualised-registry-entries": nested(widthFull)
                                    }))))))([div_2(append34(displayNone)(screenMd(append34(css47({
                                      display: str("block")
                                    }))(append34(overflowYScroll)(append34(heightFull)(append34(maxHeight$prime(full))(width$prime(str("calc(100% - 360px)")))))))))([foldMap110(function() {
                                      var $404 = styledCard(append34(mXY(24))(append34(pX$prime($$var("--s2")))(append34(pY$prime($$var("--s2")))(append34(roundedLg)(screenXl(append34(width(800))(append34(mXAuto)(append34(roundedXl)(append34(pX$prime($$var("--s4")))(pY$prime($$var("--s3"))))))))))));
                                      return function($405) {
                                        return $404(pure211(repoView($405)));
                                      };
                                    }())(v6.value0)]), repoList({
                                      repoInfo: v42.value0,
                                      selectedRepo\u0294: v6.value0,
                                      setSelectedRepo: v6.value1,
                                      repos: v5.value0.value0
                                    })]), guard1(!screenIsAtLeastMedium)(leaf6(component25)({
                                      content: div_2(height$prime(str("66vh")))([foldMap110(repoView)(v6.value0)]),
                                      header: div_2(textLg)([text2("README.md")]),
                                      footer: mempty210,
                                      isOpen: isJust(v6.value0),
                                      onDismiss: v6.value1(Nothing.value),
                                      containerId: modalContainerId,
                                      clickAwayId: modalClickawayId
                                    }))])]);
                                  }
                                  ;
                                  return mempty210;
                                }();
                                return pure58(div_2(append34(height$prime(mainViewHeight))(overflowHidden))([view]));
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            };
          });
        });
      });
    });
  });

  // output/UI.Solutions/index.js
  var el14 = /* @__PURE__ */ el();
  var li$prime2 = /* @__PURE__ */ li$prime();
  var mempty31 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffectFn1(monoidUnit));
  var stack8 = /* @__PURE__ */ stack2()();
  var styled21 = /* @__PURE__ */ styled();
  var h2$prime3 = /* @__PURE__ */ h2$prime();
  var mempty117 = /* @__PURE__ */ mempty(monoidStyle);
  var bind55 = /* @__PURE__ */ bind2(ixBindRender);
  var discard30 = /* @__PURE__ */ discard2(ixBindRender);
  var monoidEffect12 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var mempty211 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidEffect12));
  var h1$prime3 = /* @__PURE__ */ h1$prime();
  var button13 = /* @__PURE__ */ button8()();
  var append35 = /* @__PURE__ */ append(semigroupStyle);
  var cluster11 = /* @__PURE__ */ cluster3()();
  var mempty32 = /* @__PURE__ */ mempty(monoidEffect12);
  var pure59 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var map42 = /* @__PURE__ */ map(functorArray);
  var mempty42 = /* @__PURE__ */ mempty(monoidJSX);
  var renderSolution = function(v2) {
    return el14(li$prime2)({
      key: v2.value0
    })([clickableCard(mempty31)([stack8({
      space: $$var("--s-1")
    })([styled21(h2$prime3)({
      css: mempty117
    })([text2(v2.value1.name)]), renderFilePath(v2.value0)])])]);
  };
  var mkView9 = /* @__PURE__ */ component2("Solutions")(function(v2) {
    return function(v1) {
      return bind55(useIPCMessage(v2))(function(v22) {
        return discard30(useEffectOnce(function __do10() {
          v22.value1.value0(GetPureScriptSolutionDefinitions.value)();
          return mempty211();
        }))(function() {
          var title5 = styled21(h1$prime3)({
            css: text2xl
          })([text2("Solutions")]);
          var toolbarIcon = function(text7) {
            return function(icon) {
              return function(action2) {
                return button13({
                  buttonType: Generic.value,
                  onClick: handler_(action2),
                  css: append35(pL(8))(append35(pR(12))(textCol$prime(col2.text)))
                })([cluster11({
                  space: "4px"
                })([div_2(widthAndHeight(16))([icon]), text2(text7)])]);
              };
            };
          };
          var toolbar = cluster_([toolbarIcon("New solution")(plus)(mempty32)]);
          var topBar = cluster11({
            justify: "space-between"
          })([title5, toolbar]);
          return pure59(box_([stack8({
            space: px(12),
            css: append35(divideY(1))(divideCol$prime(col2.backgroundBright5))
          })([topBar, div_2(mT(12))([function(v3) {
            if (v3 instanceof NotAsked) {
              return text2("Jo, dann mach mal");
            }
            ;
            if (v3 instanceof Loading2) {
              return text2("Warte!");
            }
            ;
            if (v3 instanceof Success2 && v3.value0 instanceof GetPureScriptSolutionDefinitionsResponse) {
              return ul_(map42(renderSolution)(v3.value0.value0));
            }
            ;
            if (v3 instanceof Success2) {
              return text2("wrong message");
            }
            ;
            if (v3 instanceof Failure) {
              return mempty42;
            }
            ;
            throw new Error("Failed pattern match at UI.Solutions (line 63, column 31 - line 70, column 40): " + [v3.constructor.name]);
          }(v22.value0)])])]));
        });
      });
    };
  });

  // output/UI.MainPane.View/index.js
  var bind56 = /* @__PURE__ */ bind(bindReaderT);
  var bind122 = /* @__PURE__ */ bind2(ixBindRender);
  var pure60 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var mkView10 = /* @__PURE__ */ bind56(mkView2)(function(openProjectView) {
    return bind56(mkView9)(function(solutionsView) {
      return bind56(mkView8)(function(registry) {
        return bind56(mkView5)(function(preferences) {
          return component2("MainPane")(function(v2) {
            return function(v1) {
              return bind122(useRouter)(function(v22) {
                return pure60(function() {
                  if (v22.route instanceof Home) {
                    return openProjectView(unit);
                  }
                  ;
                  if (v22.route instanceof Solutions) {
                    return solutionsView(unit);
                  }
                  ;
                  if (v22.route instanceof Registry) {
                    return registry(unit);
                  }
                  ;
                  if (v22.route instanceof Preferences) {
                    return preferences(v22.route.value0);
                  }
                  ;
                  throw new Error("Failed pattern match at UI.MainPane.View (line 22, column 12 - line 26, column 50): " + [v22.route.constructor.name]);
                }());
              });
            };
          });
        });
      });
    });
  });

  // output/UI.Navigation.HeaderBar/index.js
  var append36 = /* @__PURE__ */ append(semigroupStyle);
  var css48 = /* @__PURE__ */ css2();
  var styled22 = /* @__PURE__ */ styled();
  var a$prime4 = /* @__PURE__ */ a$prime();
  var pure61 = /* @__PURE__ */ pure(applicativeArray);
  var div17 = /* @__PURE__ */ div6();
  var animate10 = /* @__PURE__ */ animate3();
  var bind57 = /* @__PURE__ */ bind2(ixBindRender);
  var pure121 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var fold6 = /* @__PURE__ */ fold(foldableMaybe)(monoidJSX);
  var bind123 = /* @__PURE__ */ bind(bindReaderT);
  var liftEffect16 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
  var renderRoute = function(route) {
    var linkStyle = append36(pL(30))(append36(pY(3))(append36(overflowHidden)(append36(height(28))(append36(positionRelative)(append36(mR(18))(append36(mL(-26 | 0))(append36(overflowVisible)(append36(textSm)(append36(css48({
      "--bg": col2.backgroundLayer3,
      borderRight: str("1px solid var(--bg)"),
      background: str("var(--bg)"),
      "&:after": nested(append36(css48({
        content: str("''"),
        border: str("1px solid " + colour.backgroundLayer2),
        position: str("absolute"),
        background: str("var(--bg)"),
        overflow: visible,
        top: str("3px"),
        right: str("-11px"),
        borderRadius: str("0 3px 0 0"),
        clipPath: str("polygon(0 0, 100% 0, 100% 100%)"),
        transform: str("rotate(45deg)")
      }))(widthAndHeight(22)))
    }))(hover(css48({
      "--bg": col2.backgroundBright3
    }))))))))))));
    var linkTo = function(r2) {
      return function(child) {
        return styled22(a$prime4)({
          className: "route-link",
          css: linkStyle,
          href: printRoute(r2)
        })([text2(child)]);
      };
    };
    var link2 = linkTo(route);
    return div_2(css48({
      "@container breadcrumbs (max-width: 350px)": nested(css48({
        ".breadcrumb-container > *": nested(css48({
          display: none
        })),
        ".breadcrumb-container > a:last-of-type, .breadcrumb-container > div:last-of-type": nested(css48({
          display: block
        }))
      }))
    }))(pure61(styled22(div17)({
      className: "breadcrumb-container",
      animate: animate10(css8({
        transition: {
          when: "beforeChildren",
          staggerChildren: 0.1,
          delayChildren: 0.1
        }
      })),
      css: append36(flexRow)(append36(border2(1))(append36(borderCol$prime(col2.backgroundLayer2))(append36(overflowHidden)(css48({
        borderRadius: str("8px"),
        flexDirection: str("row-reverse"),
        "& > a:last-of-type": nested(append36(pL(12))(mL(0))),
        "& > a:first-of-type": nested(append36(css48({
          "&:after": nested(css48({
            content: none
          }))
        }))(append36(pR(12))(append36(mR(0))(css48({
          borderRadius: str("8px"),
          "--bg": col2.backgroundLayer4
        })))))
      })))))
    })(reverse(function() {
      if (route instanceof Home) {
        return [link2("Home")];
      }
      ;
      if (route instanceof Solutions) {
        return [link2("Solutions")];
      }
      ;
      if (route instanceof Registry) {
        return [link2("Registry")];
      }
      ;
      if (route instanceof Preferences) {
        if (route.value0 instanceof Root) {
          return [link2("Preferences")];
        }
        ;
        if (route.value0 instanceof Spago2) {
          return [linkTo(new Preferences(Root.value))("Preferences"), link2("Spago")];
        }
        ;
        throw new Error("Failed pattern match at UI.Navigation.HeaderBar (line 123, column 30 - line 128, column 12): " + [route.value0.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.HeaderBar (line 119, column 22 - line 128, column 12): " + [route.constructor.name]);
    }()))));
  };
  var mkPresentationalView = /* @__PURE__ */ component("HeaderBarPresentational")(function(v2) {
    return bind57(useRef(nullImpl))(function(popOverContainerRef) {
      return bind57(usePopOver({
        dismissBehaviour\u0294: new Just(new DismissPopOverOnClickOutsideTargetAnd([popOverContainerRef])),
        containerId: popOverId,
        placement: new Placement(Below.value, End.value)
      }))(function(v1) {
        return pure121(div4("header-bar")(append36(flexRow)(append36(gap(8))(append36(justifyBetween)(append36(itemsCenter)(append36(toolbarBackground)(append36(heightFull)(append36(borderBottom(1))(append36(toolbarBorderCol)(append36(fontSemiMedium)(append36(textCol$prime(col2.textPaler1))(append36(textSm)(append36(pY(12))(append36(pX(24))(css48({
          containerType: str("inline-size"),
          containerName: str("breadcrumbs"),
          overflow: str("auto"),
          minWidth: str("150px"),
          maxWidth: str("100%")
        })))))))))))))))([renderRoute(v2.route), fold6(v2.topRight)]));
      });
    });
  });
  var mkView11 = /* @__PURE__ */ bind123(mkView6)(function(githubAvatar) {
    return bind123(liftEffect16(mkPresentationalView))(function(view) {
      return component2("HeaderBar")(function(v2) {
        return function(v1) {
          return bind57(useRouter)(function(v22) {
            return pure121(view({
              route: v22.route,
              topRight: new Just(githubAvatar(unit))
            }));
          });
        };
      });
    });
  });

  // output/UI.Navigation.SideBar/index.js
  var eq20 = /* @__PURE__ */ eq(eqTopLevelRoute);
  var button14 = /* @__PURE__ */ button8()();
  var fromHomogeneous7 = /* @__PURE__ */ fromHomogeneous();
  var show20 = /* @__PURE__ */ show(showBoolean);
  var unless7 = /* @__PURE__ */ unless(applicativeEffect);
  var append37 = /* @__PURE__ */ append(semigroupStyle);
  var enumFromTo2 = /* @__PURE__ */ enumFromTo(enumTopLevelRoute)(unfoldable1Array);
  var bottom5 = /* @__PURE__ */ bottom(boundedTopLevelRoute);
  var top5 = /* @__PURE__ */ top(boundedTopLevelRoute);
  var mapFlipped27 = /* @__PURE__ */ mapFlipped(functorArray);
  var pure62 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var stack9 = /* @__PURE__ */ stack2()();
  var css49 = /* @__PURE__ */ css2();
  var bind58 = /* @__PURE__ */ bind2(ixBindRender);
  var renderLinks = function(v2) {
    var current = toTopLevelRoute(v2.value0);
    var iconButton = function(tlr) {
      return function(target6) {
        return function(svg5) {
          var isCurrent = eq20(tlr)(current);
          return button14({
            "_aria": fromHomogeneous7({
              pressed: show20(isCurrent)
            }),
            onClick: handler_(unless7(isCurrent)(v2.value1(target6))),
            css: append37(toolbarButtonStyle)(append37(widthAndHeight(56))(pXY(12))),
            ripple: toolbarRippleCol
          })([svg5]);
        };
      };
    };
    var renderTopLevelRoute = function(tlr) {
      if (tlr instanceof TopLevelHome) {
        return iconButton(tlr)(Home.value)(home);
      }
      ;
      if (tlr instanceof TopLevelSolutions) {
        return iconButton(tlr)(Solutions.value)(code2);
      }
      ;
      if (tlr instanceof TopLevelRegistry) {
        return iconButton(tlr)(Registry.value)(identification);
      }
      ;
      if (tlr instanceof TopLevelPreferences) {
        return iconButton(tlr)(new Preferences(Root.value))(cog);
      }
      ;
      throw new Error("Failed pattern match at UI.Navigation.SideBar (line 57, column 29 - line 62, column 19): " + [tlr.constructor.name]);
    };
    var allTopLevelRoutes = enumFromTo2(bottom5)(top5);
    return mapFlipped27(allTopLevelRoutes)(renderTopLevelRoute);
  };
  var mkPresentationalView2 = /* @__PURE__ */ component("HeaderBarPresentational")(function(props) {
    return pure62(stack9({
      space: str("16px"),
      splitAfter: 3,
      css: append37(toolbarBackground)(append37(borderRight(1))(append37(toolbarBorderCol)(append37(pY(12))(append37(pX(8))(append37(heightScreen)(css49({
        width: str("fit-content")
      })))))))
    })(renderLinks(props)));
  });
  var mkView12 = /* @__PURE__ */ bind(bindReaderT)(/* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect))(mkPresentationalView2))(function(view) {
    return component2("SideBar")(function(v2) {
      return function(v1) {
        return bind58(useRouter)(function(v22) {
          return pure62(view(new Tuple(v22.route, v22.navigate)));
        });
      };
    });
  });

  // output/UI.Start/index.js
  var bind59 = /* @__PURE__ */ bind(bindReaderT);
  var liftEffect17 = /* @__PURE__ */ liftEffect(/* @__PURE__ */ monadEffectReaderT(monadEffectEffect));
  var pure63 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeRender(refl));
  var append38 = /* @__PURE__ */ append(semigroupStyle);
  var show21 = /* @__PURE__ */ show(showInt);
  var mkView13 = /* @__PURE__ */ bind59(/* @__PURE__ */ ask(monadAskReaderT))(function(v2) {
    return bind59(liftEffect17(mkRouter))(function(router) {
      return bind59(liftEffect17(mkThemeProvider(ourGlobalStyle)))(function(themeProvider) {
        return bind59(liftEffect17(mkContainer(v2.notificationCentre)))(function(container5) {
          return bind59(mkView11)(function(headerBar) {
            return bind59(mkView12)(function(sideBar) {
              return bind59(mkView10)(function(mainPane) {
                return component2("MainWindow")(function(v1) {
                  return function(v22) {
                    return pure63(router(themeProvider(container5([div_2(append38(positionFixed)(append38(width(72))(append38(heightFull)(append38(left(0))(top4(0))))))([sideBar(unit)]), div_2(append38(positionFixed)(append38(width$prime(str("calc(100% - 72px)")))(append38(height(headerBarHeight))(append38(right(0))(top4(0))))))([headerBar(unit)]), div_2(append38(height$prime(str("calc(100vh - " + (show21(headerBarHeight) + "px)"))))(append38(overflowHidden)(append38(mT(headerBarHeight))(mL(72)))))([mainPane(unit)])]))));
                  };
                });
              });
            });
          });
        });
      });
    });
  });

  // output/Renderer/index.js
  var bind60 = /* @__PURE__ */ bind(bindEffect);
  var flap3 = /* @__PURE__ */ flap(functorReaderT);
  var for_17 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var mkEntryView = function __do8() {
    var electronCtx = mkElectronCtx();
    return runComponent(electronCtx)(flap3(mkView13)(unit))();
  };
  var getContentDiv = /* @__PURE__ */ bind60(/* @__PURE__ */ mapFlipped(functorEffect)(/* @__PURE__ */ bind60(windowImpl)(document2))(toNonElementParentNode))(/* @__PURE__ */ getElementById("content"));
  var main3 = function __do9() {
    var contentDiv\u0294 = getContentDiv();
    var entryView = mkEntryView();
    return for_17(contentDiv\u0294)(function(elem3) {
      return function __do10() {
        var root2 = createRoot(elem3)();
        return renderRoot(root2)(entryView)();
      };
    })();
  };

  // renderer.mjs
  main3();
})();
/*! @license DOMPurify 2.3.8 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/2.3.8/LICENSE */
/**
 * @license React
 * react-dom-server-legacy.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom-server.browser.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=renderer.js.map
